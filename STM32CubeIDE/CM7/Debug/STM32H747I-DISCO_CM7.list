
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000210bc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000310c  08021360  08021360  00022360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000506  0802446c  0802446c  0002546c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08024974  08024974  00025974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00013880  90000000  90000000  00027000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000005e  90013880  90013880  0003a880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0802498c  0802498c  0003a8de  2**0
                  CONTENTS
  8 .ARM          00000008  0802498c  0802498c  0002598c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08024994  08024994  0003a8de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  08024994  08024994  00025994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080249b0  080249b0  000259b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  080249b8  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00025c20  2400013c  08024af4  0002613c  2**2
                  ALLOC
 14 ._user_heap_stack 00002004  24025d5c  08024af4  00026d5c  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  0003a8de  2**0
                  CONTENTS, READONLY
 16 BufferSection 00232800  d0000000  d0000000  0003b000  2**2
                  ALLOC
 17 .debug_info   000cfa92  00000000  00000000  0003a90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00016e2c  00000000  00000000  0010a39e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003910  00000000  00000000  001211d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00003e42  00000000  00000000  00124ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00053176  00000000  00000000  00128922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000672ba  00000000  00000000  0017ba98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001e6ca6  00000000  00000000  001e2d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000c2  00000000  00000000  003c99f8  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000a524  00000000  00000000  003c9abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loclists 00020ff7  00000000  00000000  003d3fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 00000067  00000000  00000000  003f4fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400013c 	.word	0x2400013c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08021344 	.word	0x08021344

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000140 	.word	0x24000140
 80002dc:	08021344 	.word	0x08021344

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00c ba78 	b.w	800cbf0 <vTaskSetApplicationTaskTag>
 8000700:	08002011 	.word	0x08002011

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	224c      	movs	r2, #76	@ 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	a809      	add	r0, sp, #36	@ 0x24
 800070e:	f020 f883 	bl	8020818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f020 f87e 	bl	8020818 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800071c:	2004      	movs	r0, #4
 800071e:	f008 fbff 	bl	8008f20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <SystemClock_Config+0xbc>)
 8000728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <SystemClock_Config+0xc0>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	0491      	lsls	r1, r2, #18
 8000750:	d5fc      	bpl.n	800074c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000756:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 800075a:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000762:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2301      	movs	r3, #1
 800076a:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800076e:	23a0      	movs	r3, #160	@ 0xa0
 8000770:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000774:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077a:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000782:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f008 feca 	bl	800951c <HAL_RCC_OscConfig>
 8000788:	b108      	cbz	r0, 800078e <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000790:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800079a:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007a0:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a4:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f009 fa54 	bl	8009c54 <HAL_RCC_ClockConfig>
 80007ac:	4601      	mov	r1, r0
 80007ae:	b108      	cbz	r0, 80007b4 <SystemClock_Config+0xb0>
 80007b0:	b672      	cpsid	i
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007b8:	f009 f95c 	bl	8009a74 <HAL_RCC_MCOConfig>
}
 80007bc:	b01d      	add	sp, #116	@ 0x74
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	58000400 	.word	0x58000400
 80007c4:	58024800 	.word	0x58024800

080007c8 <main>:
{
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ce:	2210      	movs	r2, #16
 80007d0:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007d2:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007d6:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d8:	f020 f81e 	bl	8020818 <memset>
  HAL_MPU_Disable();
 80007dc:	f005 fdbc 	bl	8006358 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007e0:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 80007e4:	4bbe      	ldr	r3, [pc, #760]	@ (8000ae0 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007e6:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e8:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ec:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007ee:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f2:	f005 fdcf 	bl	8006394 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007f6:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007fa:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007fe:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000802:	f005 fdc7 	bl	8006394 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000806:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000808:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800080a:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800080e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000812:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000816:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000818:	2318      	movs	r3, #24
 800081a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081e:	f005 fdb9 	bl	8006394 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000822:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000824:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000826:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800082a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800082e:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000830:	2312      	movs	r3, #18
 8000832:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800083c:	f005 fdaa 	bl	8006394 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000840:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000844:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000846:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 800084a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800084c:	2311      	movs	r3, #17
 800084e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	f005 fd9f 	bl	8006394 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000856:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800085a:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800085e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000862:	4ba0      	ldr	r3, [pc, #640]	@ (8000ae4 <main+0x31c>)
 8000864:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000866:	230e      	movs	r3, #14
 8000868:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086c:	f005 fd92 	bl	8006394 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000870:	4628      	mov	r0, r5
 8000872:	f005 fd7f 	bl	8006374 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000876:	4b9c      	ldr	r3, [pc, #624]	@ (8000ae8 <main+0x320>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800087e:	d111      	bne.n	80008a4 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000884:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000888:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800088c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800089a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800089c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008a4:	4a90      	ldr	r2, [pc, #576]	@ (8000ae8 <main+0x320>)
 80008a6:	6953      	ldr	r3, [r2, #20]
 80008a8:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80008ac:	d123      	bne.n	80008f6 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ba:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008be:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008c2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008c6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008cc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008d2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80008d8:	d2f9      	bcs.n	80008ce <main+0x106>
    } while(sets-- != 0U);
 80008da:	3b20      	subs	r3, #32
 80008dc:	f113 0f20 	cmn.w	r3, #32
 80008e0:	d1f2      	bne.n	80008c8 <main+0x100>
 80008e2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008e6:	6953      	ldr	r3, [r2, #20]
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008f2:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 80008f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008fa:	4d7c      	ldr	r5, [pc, #496]	@ (8000aec <main+0x324>)
 80008fc:	682c      	ldr	r4, [r5, #0]
 80008fe:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000902:	f000 82e3 	beq.w	8000ecc <main+0x704>
 8000906:	3b01      	subs	r3, #1
 8000908:	d2f8      	bcs.n	80008fc <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800090a:	b672      	cpsid	i
  while (1)
 800090c:	e7fe      	b.n	800090c <main+0x144>
 800090e:	b672      	cpsid	i
 8000910:	e7fe      	b.n	8000910 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000912:	4877      	ldr	r0, [pc, #476]	@ (8000af0 <main+0x328>)
 8000914:	4a77      	ldr	r2, [pc, #476]	@ (8000af4 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000916:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000918:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 800091a:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800091e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000922:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000926:	f008 fc19 	bl	800915c <HAL_QSPI_Init>
 800092a:	b108      	cbz	r0, 8000930 <main+0x168>
 800092c:	b672      	cpsid	i
  while (1)
 800092e:	e7fe      	b.n	800092e <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000930:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000934:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000936:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 800093a:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 800093e:	f004 ffeb 	bl	8005918 <BSP_QSPI_Init>
 8000942:	b108      	cbz	r0, 8000948 <main+0x180>
 8000944:	b672      	cpsid	i
  while (1)
 8000946:	e7fe      	b.n	8000946 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000948:	f004 ff92 	bl	8005870 <BSP_QSPI_EnableMemoryMappedMode>
 800094c:	4603      	mov	r3, r0
 800094e:	b108      	cbz	r0, 8000954 <main+0x18c>
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000954:	4868      	ldr	r0, [pc, #416]	@ (8000af8 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000956:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800095a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000b04 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 800095e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000962:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000966:	f005 fda2 	bl	80064ae <HAL_DMA2D_Init>
 800096a:	4604      	mov	r4, r0
 800096c:	b108      	cbz	r0, 8000972 <main+0x1aa>
 800096e:	b672      	cpsid	i
  while (1)
 8000970:	e7fe      	b.n	8000970 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000972:	4602      	mov	r2, r0
 8000974:	4639      	mov	r1, r7
 8000976:	4861      	ldr	r0, [pc, #388]	@ (8000afc <main+0x334>)
 8000978:	f006 fc3c 	bl	80071f4 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800097c:	2014      	movs	r0, #20
 800097e:	f005 fc6f 	bl	8006260 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000982:	4639      	mov	r1, r7
 8000984:	462a      	mov	r2, r5
 8000986:	485d      	ldr	r0, [pc, #372]	@ (8000afc <main+0x334>)
 8000988:	f006 fc34 	bl	80071f4 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800098c:	200a      	movs	r0, #10
 800098e:	f005 fc67 	bl	8006260 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000992:	2224      	movs	r2, #36	@ 0x24
 8000994:	4621      	mov	r1, r4
 8000996:	a817      	add	r0, sp, #92	@ 0x5c
 8000998:	f01f ff3e 	bl	8020818 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800099c:	2218      	movs	r2, #24
 800099e:	4621      	mov	r1, r4
 80009a0:	a811      	add	r0, sp, #68	@ 0x44
 80009a2:	f01f ff39 	bl	8020818 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009a6:	2234      	movs	r2, #52	@ 0x34
 80009a8:	4621      	mov	r1, r4
 80009aa:	a82d      	add	r0, sp, #180	@ 0xb4
 80009ac:	f01f ff34 	bl	8020818 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009b0:	4621      	mov	r1, r4
 80009b2:	222c      	movs	r2, #44	@ 0x2c
 80009b4:	a820      	add	r0, sp, #128	@ 0x80
 80009b6:	f01f ff2f 	bl	8020818 <memset>
  hdsi.Instance = DSI;
 80009ba:	4f51      	ldr	r7, [pc, #324]	@ (8000b00 <main+0x338>)
 80009bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009c0:	a90e      	add	r1, sp, #56	@ 0x38
 80009c2:	4638      	mov	r0, r7
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009c4:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009c6:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLNDIV = 119;
 80009ca:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009cc:	e9c7 8502 	strd	r8, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 80009d0:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009d4:	f005 feb8 	bl	8006748 <HAL_DSI_Init>
 80009d8:	b108      	cbz	r0, 80009de <main+0x216>
 80009da:	b672      	cpsid	i
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80009de:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 80009e2:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009e6:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009ea:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 80009ee:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009f0:	a917      	add	r1, sp, #92	@ 0x5c
 80009f2:	4638      	mov	r0, r7
 80009f4:	f006 f8d4 	bl	8006ba0 <HAL_DSI_ConfigHostTimeouts>
 80009f8:	b108      	cbz	r0, 80009fe <main+0x236>
 80009fa:	b672      	cpsid	i
  while (1)
 80009fc:	e7fe      	b.n	80009fc <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009fe:	2321      	movs	r3, #33	@ 0x21
 8000a00:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a02:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a04:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a06:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a0a:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000a0c:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a10:	4638      	mov	r0, r7
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a12:	e9cd 6313 	strd	r6, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a16:	f006 f886 	bl	8006b26 <HAL_DSI_ConfigPhyTimer>
 8000a1a:	b108      	cbz	r0, 8000a20 <main+0x258>
 8000a1c:	b672      	cpsid	i
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a20:	2104      	movs	r1, #4
 8000a22:	4837      	ldr	r0, [pc, #220]	@ (8000b00 <main+0x338>)
 8000a24:	f006 f86e 	bl	8006b04 <HAL_DSI_ConfigFlowControl>
 8000a28:	b108      	cbz	r0, 8000a2e <main+0x266>
 8000a2a:	b672      	cpsid	i
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a2e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000a32:	4833      	ldr	r0, [pc, #204]	@ (8000b00 <main+0x338>)
 8000a34:	f006 fa3d 	bl	8006eb2 <HAL_DSI_SetLowPowerRXFilter>
 8000a38:	4601      	mov	r1, r0
 8000a3a:	b108      	cbz	r0, 8000a40 <main+0x278>
 8000a3c:	b672      	cpsid	i
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a40:	482f      	ldr	r0, [pc, #188]	@ (8000b00 <main+0x338>)
 8000a42:	f005 fe1e 	bl	8006682 <HAL_DSI_ConfigErrorMonitor>
 8000a46:	b108      	cbz	r0, 8000a4c <main+0x284>
 8000a48:	b672      	cpsid	i
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a50:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a54:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a60:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a64:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a68:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a6c:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a74:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a78:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a80:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a88:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a90:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a92:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a9a:	4819      	ldr	r0, [pc, #100]	@ (8000b00 <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a9c:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aa0:	f005 fffc 	bl	8006a9c <HAL_DSI_ConfigCommand>
 8000aa4:	b108      	cbz	r0, 8000aaa <main+0x2e2>
 8000aa6:	b672      	cpsid	i
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab0:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000ab2:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ab4:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab6:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000ab8:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000abc:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000abe:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000ac2:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000ac4:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ac8:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000acc:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <main+0x338>)
 8000ad2:	f005 ff71 	bl	80069b8 <HAL_DSI_ConfigAdaptedCommandMode>
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	b1b0      	cbz	r0, 8000b08 <main+0x340>
 8000ada:	b672      	cpsid	i
  while (1)
 8000adc:	e7fe      	b.n	8000adc <main+0x314>
 8000ade:	bf00      	nop
 8000ae0:	0300001b 	.word	0x0300001b
 8000ae4:	10040000 	.word	0x10040000
 8000ae8:	e000ed00 	.word	0xe000ed00
 8000aec:	58024400 	.word	0x58024400
 8000af0:	240001c4 	.word	0x240001c4
 8000af4:	52005000 	.word	0x52005000
 8000af8:	24000404 	.word	0x24000404
 8000afc:	58021800 	.word	0x58021800
 8000b00:	240003e8 	.word	0x240003e8
 8000b04:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b08:	485b      	ldr	r0, [pc, #364]	@ (8000c78 <main+0x4b0>)
 8000b0a:	f005 ff44 	bl	8006996 <HAL_DSI_SetGenericVCID>
 8000b0e:	4604      	mov	r4, r0
 8000b10:	b108      	cbz	r0, 8000b16 <main+0x34e>
 8000b12:	b672      	cpsid	i
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b16:	2234      	movs	r2, #52	@ 0x34
 8000b18:	4601      	mov	r1, r0
 8000b1a:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000b1c:	4d57      	ldr	r5, [pc, #348]	@ (8000c7c <main+0x4b4>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b1e:	f01f fe7b 	bl	8020818 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b22:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8000cbc <main+0x4f4>
 8000b26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b2a:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000b2e:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b32:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000b34:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000b36:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b3a:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b42:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b46:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000b4a:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b4e:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b52:	f240 1893 	movw	r8, #403	@ 0x193
 8000b56:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b5a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000b5e:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b62:	f007 fead 	bl	80088c0 <HAL_LTDC_Init>
 8000b66:	4602      	mov	r2, r0
 8000b68:	b108      	cbz	r0, 8000b6e <main+0x3a6>
 8000b6a:	b672      	cpsid	i
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000b6e:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000b70:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8000b72:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000b76:	f8ad 20b0 	strh.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000b7a:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000b7e:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000b80:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.WindowX1 = 400;
 8000b84:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b88:	2107      	movs	r1, #7
 8000b8a:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000b8e:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b92:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b96:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000b98:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9c:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b9e:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ba2:	f007 ff59 	bl	8008a58 <HAL_LTDC_ConfigLayer>
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	b108      	cbz	r0, 8000bae <main+0x3e6>
 8000baa:	b672      	cpsid	i
  while (1)
 8000bac:	e7fe      	b.n	8000bac <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bae:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bb0:	4831      	ldr	r0, [pc, #196]	@ (8000c78 <main+0x4b0>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bb2:	6993      	ldr	r3, [r2, #24]
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000bba:	f006 f857 	bl	8006c6c <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000bbe:	4930      	ldr	r1, [pc, #192]	@ (8000c80 <main+0x4b8>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc0:	4b30      	ldr	r3, [pc, #192]	@ (8000c84 <main+0x4bc>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bc2:	4831      	ldr	r0, [pc, #196]	@ (8000c88 <main+0x4c0>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc4:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <main+0x4c4>)
  IOCtx.Address     = 0;
 8000bc8:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bca:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	@ (8000c90 <main+0x4c8>)
 8000bce:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bd0:	f004 fc46 	bl	8005460 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000bd4:	4632      	mov	r2, r6
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	482b      	ldr	r0, [pc, #172]	@ (8000c88 <main+0x4c0>)
 8000bda:	f004 f8b1 	bl	8004d40 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000bde:	2328      	movs	r3, #40	@ 0x28
 8000be0:	2215      	movs	r2, #21
 8000be2:	4621      	mov	r1, r4
 8000be4:	4824      	ldr	r0, [pc, #144]	@ (8000c78 <main+0x4b0>)
 8000be6:	9400      	str	r4, [sp, #0]
 8000be8:	f006 f873 	bl	8006cd2 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000bec:	a92d      	add	r1, sp, #180	@ 0xb4
 8000bee:	4822      	ldr	r0, [pc, #136]	@ (8000c78 <main+0x4b0>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000bf0:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000bf2:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000bf6:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000bfa:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000bfe:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c02:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c06:	f005 ff49 	bl	8006a9c <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c10:	4628      	mov	r0, r5
 8000c12:	f007 ff4f 	bl	8008ab4 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c16:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000c18:	481e      	ldr	r0, [pc, #120]	@ (8000c94 <main+0x4cc>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1a:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c1c:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <main+0x4d0>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c26:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000c28:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c2a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c2e:	f005 fbdd 	bl	80063ec <HAL_CRC_Init>
 8000c32:	b108      	cbz	r0, 8000c38 <main+0x470>
 8000c34:	b672      	cpsid	i
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000c38:	4818      	ldr	r0, [pc, #96]	@ (8000c9c <main+0x4d4>)
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <main+0x4d8>)
 8000c3c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000c3e:	f007 f827 	bl	8007c90 <HAL_JPEG_Init>
 8000c42:	b108      	cbz	r0, 8000c48 <main+0x480>
 8000c44:	b672      	cpsid	i
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <main+0x47e>
  MX_TouchGFX_Init();
 8000c48:	f000 fd8e 	bl	8001768 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c4c:	f000 fd8b 	bl	8001766 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c50:	f00a fa6e 	bl	800b130 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c54:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <main+0x4dc>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4813      	ldr	r0, [pc, #76]	@ (8000ca8 <main+0x4e0>)
 8000c5a:	f00a fa95 	bl	800b188 <osThreadNew>
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <main+0x4e4>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c60:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <main+0x4e8>)
 8000c62:	2100      	movs	r1, #0
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c64:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c66:	4813      	ldr	r0, [pc, #76]	@ (8000cb4 <main+0x4ec>)
 8000c68:	f00a fa8e 	bl	800b188 <osThreadNew>
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <main+0x4f0>)
 8000c6e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c70:	f00a fa70 	bl	800b154 <osKernelStart>
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <main+0x4ac>
 8000c76:	bf00      	nop
 8000c78:	240003e8 	.word	0x240003e8
 8000c7c:	24000210 	.word	0x24000210
 8000c80:	24000158 	.word	0x24000158
 8000c84:	08005841 	.word	0x08005841
 8000c88:	24000168 	.word	0x24000168
 8000c8c:	08001d11 	.word	0x08001d11
 8000c90:	08001d49 	.word	0x08001d49
 8000c94:	2400046c 	.word	0x2400046c
 8000c98:	58024c00 	.word	0x58024c00
 8000c9c:	24000390 	.word	0x24000390
 8000ca0:	52003000 	.word	0x52003000
 8000ca4:	080213e8 	.word	0x080213e8
 8000ca8:	08001777 	.word	0x08001777
 8000cac:	2400018c 	.word	0x2400018c
 8000cb0:	080213c4 	.word	0x080213c4
 8000cb4:	080037ed 	.word	0x080037ed
 8000cb8:	24000188 	.word	0x24000188
 8000cbc:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	2214      	movs	r2, #20
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f01f fda6 	bl	8020818 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ccc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cda:	488d      	ldr	r0, [pc, #564]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	f04f 0900 	mov.w	r9, #0
 8000ce0:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce2:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000cf2:	2708      	movs	r7, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf8:	9304      	str	r3, [sp, #16]
 8000cfa:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	9305      	str	r3, [sp, #20]
 8000d12:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d28:	9306      	str	r3, [sp, #24]
 8000d2a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	9307      	str	r3, [sp, #28]
 8000d42:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d58:	9308      	str	r3, [sp, #32]
 8000d5a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000da2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000db0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	930c      	str	r3, [sp, #48]	@ 0x30
 8000dba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dbc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	930d      	str	r3, [sp, #52]	@ 0x34
 8000dd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000dd4:	f006 fa0e 	bl	80071f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2108      	movs	r1, #8
 8000ddc:	484d      	ldr	r0, [pc, #308]	@ (8000f14 <main+0x74c>)
 8000dde:	f006 fa09 	bl	80071f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de8:	484b      	ldr	r0, [pc, #300]	@ (8000f18 <main+0x750>)
 8000dea:	f006 fa03 	bl	80071f4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000df2:	a92d      	add	r1, sp, #180	@ 0xb4
 8000df4:	4846      	ldr	r0, [pc, #280]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dfe:	f006 f86f 	bl	8006ee0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e04:	4845      	ldr	r0, [pc, #276]	@ (8000f1c <main+0x754>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e06:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	e9cd 992f 	strd	r9, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f006 f865 	bl	8006ee0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e16:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e18:	483e      	ldr	r0, [pc, #248]	@ (8000f14 <main+0x74c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	e9cd 562f 	strd	r5, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f006 f85d 	bl	8006ee0 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e26:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e28:	483b      	ldr	r0, [pc, #236]	@ (8000f18 <main+0x750>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f006 f855 	bl	8006ee0 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e36:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e3a:	464a      	mov	r2, r9
 8000e3c:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e3e:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e40:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e42:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e46:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8000e4a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e4e:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e50:	402b      	ands	r3, r5
 8000e52:	9303      	str	r3, [sp, #12]
 8000e54:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e56:	f005 fa2d 	bl	80062b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e5a:	207a      	movs	r0, #122	@ 0x7a
 8000e5c:	f005 fa5c 	bl	8006318 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e60:	4a2f      	ldr	r2, [pc, #188]	@ (8000f20 <main+0x758>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e62:	4830      	ldr	r0, [pc, #192]	@ (8000f24 <main+0x75c>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e64:	a92d      	add	r1, sp, #180	@ 0xb4
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e66:	6813      	ldr	r3, [r2, #0]
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e72:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <main+0x760>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e74:	f8c0 901c 	str.w	r9, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e78:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000e7c:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8000e7e:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000e82:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e86:	2320      	movs	r3, #32
 8000e88:	e9c0 8303 	strd	r8, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e8c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e90:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e98:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e9c:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 8000e9e:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  SdramTiming.SelfRefreshTime = 4;
 8000ea2:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 8000ea6:	e9cd 3630 	strd	r3, r6, [sp, #192]	@ 0xc0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000eaa:	f009 fe67 	bl	800ab7c <HAL_SDRAM_Init>
 8000eae:	4681      	mov	r9, r0
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	f47f ad2c 	bne.w	800090e <main+0x146>
  BSP_SDRAM_DeInit(0);
 8000eb6:	f004 fee9 	bl	8005c8c <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000eba:	4648      	mov	r0, r9
 8000ebc:	f004 ff34 	bl	8005d28 <BSP_SDRAM_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	f43f ad25 	beq.w	8000912 <main+0x14a>
 8000ec8:	b672      	cpsid	i
  while (1)
 8000eca:	e7fe      	b.n	8000eca <main+0x702>
  HAL_Init();
 8000ecc:	f005 f988 	bl	80061e0 <HAL_Init>
  SystemClock_Config();
 8000ed0:	f7ff fc18 	bl	8000704 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ed4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ed8:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000eda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ede:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000ee2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000eee:	f006 f98f 	bl	8007210 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f006 f999 	bl	800722c <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000efa:	4c0c      	ldr	r4, [pc, #48]	@ (8000f2c <main+0x764>)
timeout = 0xFFFF;
 8000efc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	0412      	lsls	r2, r2, #16
 8000f04:	f53f aedc 	bmi.w	8000cc0 <main+0x4f8>
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	d2f9      	bcs.n	8000f00 <main+0x738>
 8000f0c:	b672      	cpsid	i
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <main+0x746>
 8000f10:	58022400 	.word	0x58022400
 8000f14:	58021800 	.word	0x58021800
 8000f18:	58021400 	.word	0x58021400
 8000f1c:	58020000 	.word	0x58020000
 8000f20:	52004000 	.word	0x52004000
 8000f24:	24000190 	.word	0x24000190
 8000f28:	52004140 	.word	0x52004140
 8000f2c:	58024400 	.word	0x58024400

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d101      	bne.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000f38:	f005 b980 	b.w	800623c <HAL_IncTick>
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40001000 	.word	0x40001000

08000f44 <Error_Handler>:
 8000f44:	b672      	cpsid	i
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <Error_Handler+0x2>

08000f48 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_MspInit+0x2c>)
{
 8000f4a:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f56:	f042 0202 	orr.w	r2, r2, #2
 8000f5a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f5e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f6e:	f005 b9a1 	b.w	80062b4 <HAL_NVIC_SetPriority>
 8000f72:	bf00      	nop
 8000f74:	58024400 	.word	0x58024400

08000f78 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f78:	6802      	ldr	r2, [r0, #0]
{
 8000f7a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_CRC_MspInit+0x2c>)
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d10d      	bne.n	8000f9e <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f82:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000f86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f8a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000f8e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f9e:	b002      	add	sp, #8
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	58024c00 	.word	0x58024c00

08000fa8 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_DMA2D_MspInit+0x40>)
{
 8000faa:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000fac:	6802      	ldr	r2, [r0, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d117      	bne.n	8000fe2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fb4:	2107      	movs	r1, #7
 8000fb6:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000fbc:	f042 0210 	orr.w	r2, r2, #16
 8000fc0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fc4:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fc6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fd2:	f005 f96f 	bl	80062b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fd6:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000fd8:	b003      	add	sp, #12
 8000fda:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fde:	f005 b99b 	b.w	8006318 <HAL_NVIC_EnableIRQ>
}
 8000fe2:	b003      	add	sp, #12
 8000fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fe8:	52001000 	.word	0x52001000
 8000fec:	58024400 	.word	0x58024400

08000ff0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ff4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	2214      	movs	r2, #20
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	a803      	add	r0, sp, #12
 8000ffc:	f01f fc0c 	bl	8020818 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	22c8      	movs	r2, #200	@ 0xc8
 8001002:	2100      	movs	r1, #0
 8001004:	a808      	add	r0, sp, #32
 8001006:	f01f fc07 	bl	8020818 <memset>
  if(hdsi->Instance==DSI)
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001010:	d138      	bne.n	8001084 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001012:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001016:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001018:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800101a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101e:	f009 f89f 	bl	800a160 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	b108      	cbz	r0, 8001028 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001024:	f7ff ff8e 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800102c:	a903      	add	r1, sp, #12
 800102e:	4817      	ldr	r0, [pc, #92]	@ (800108c <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001030:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001034:	f042 0210 	orr.w	r2, r2, #16
 8001038:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800103c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001040:	f002 0210 	and.w	r2, r2, #16
 8001044:	9201      	str	r2, [sp, #4]
 8001046:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001048:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800104c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001050:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001068:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800106e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001070:	f005 ff36 	bl	8006ee0 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001074:	207b      	movs	r0, #123	@ 0x7b
 8001076:	4622      	mov	r2, r4
 8001078:	2107      	movs	r1, #7
 800107a:	f005 f91b 	bl	80062b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800107e:	207b      	movs	r0, #123	@ 0x7b
 8001080:	f005 f94a 	bl	8006318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001084:	b03a      	add	sp, #232	@ 0xe8
 8001086:	bd10      	pop	{r4, pc}
 8001088:	58024400 	.word	0x58024400
 800108c:	58022400 	.word	0x58022400

08001090 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001090:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8001092:	4b3c      	ldr	r3, [pc, #240]	@ (8001184 <HAL_JPEG_MspInit+0xf4>)
{
 8001094:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8001096:	6802      	ldr	r2, [r0, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	d170      	bne.n	800117e <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800109c:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800109e:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80010a0:	4c3a      	ldr	r4, [pc, #232]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010a2:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010aa:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8001198 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010ae:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010b0:	f042 0220 	orr.w	r2, r2, #32
 80010b4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010b8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010c6:	2311      	movs	r3, #17
 80010c8:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80010d2:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010d6:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80010d8:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80010da:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010de:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010e2:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80010e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80010ea:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010ee:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010f2:	f007 fd4a 	bl	8008b8a <HAL_MDMA_Init>
 80010f6:	b108      	cbz	r0, 80010fc <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 80010f8:	f7ff ff24 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80010fc:	2200      	movs	r2, #0
 80010fe:	4823      	ldr	r0, [pc, #140]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
 8001100:	4611      	mov	r1, r2
 8001102:	f007 fdd0 	bl	8008ca6 <HAL_MDMA_ConfigPostRequestMask>
 8001106:	b108      	cbz	r0, 800110c <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 8001108:	f7ff ff1c 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800110c:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800110e:	2313      	movs	r3, #19
 8001110:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001112:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001114:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001116:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800111a:	4c1e      	ldr	r4, [pc, #120]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800111c:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	22c0      	movs	r2, #192	@ 0xc0
 8001124:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001128:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800112a:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800112c:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001130:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001134:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001138:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800113c:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001140:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001142:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8001146:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800114a:	f007 fd1e 	bl	8008b8a <HAL_MDMA_Init>
 800114e:	b108      	cbz	r0, 8001154 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 8001150:	f7ff fef8 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001154:	2200      	movs	r2, #0
 8001156:	480f      	ldr	r0, [pc, #60]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
 8001158:	4611      	mov	r1, r2
 800115a:	f007 fda4 	bl	8008ca6 <HAL_MDMA_ConfigPostRequestMask>
 800115e:	b108      	cbz	r0, 8001164 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 8001160:	f7ff fef0 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001164:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2105      	movs	r1, #5
 800116a:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 800116c:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800116e:	f005 f8a1 	bl	80062b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001172:	2079      	movs	r0, #121	@ 0x79
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8001174:	b003      	add	sp, #12
 8001176:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800117a:	f005 b8cd 	b.w	8006318 <HAL_NVIC_EnableIRQ>
}
 800117e:	b003      	add	sp, #12
 8001180:	bd30      	pop	{r4, r5, pc}
 8001182:	bf00      	nop
 8001184:	52003000 	.word	0x52003000
 8001188:	58024400 	.word	0x58024400
 800118c:	24000324 	.word	0x24000324
 8001190:	520001c0 	.word	0x520001c0
 8001194:	240002b8 	.word	0x240002b8
 8001198:	52000200 	.word	0x52000200

0800119c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800119c:	b510      	push	{r4, lr}
 800119e:	b0b4      	sub	sp, #208	@ 0xd0
 80011a0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a2:	22c8      	movs	r2, #200	@ 0xc8
 80011a4:	2100      	movs	r1, #0
 80011a6:	a802      	add	r0, sp, #8
 80011a8:	f01f fb36 	bl	8020818 <memset>
  if(hltdc->Instance==LTDC)
 80011ac:	6822      	ldr	r2, [r4, #0]
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <HAL_LTDC_MspInit+0x74>)
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d12b      	bne.n	800120c <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80011b8:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011ba:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 80011c2:	23a1      	movs	r3, #161	@ 0xa1
 80011c4:	2205      	movs	r2, #5
 80011c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011ca:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80011cc:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011d4:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d8:	f008 ffc2 	bl	800a160 <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	b108      	cbz	r0, 80011e2 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 80011de:	f7ff feb1 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011e4:	2058      	movs	r0, #88	@ 0x58
 80011e6:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80011ec:	f042 0208 	orr.w	r2, r2, #8
 80011f0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011f4:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001202:	f005 f857 	bl	80062b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001206:	2058      	movs	r0, #88	@ 0x58
 8001208:	f005 f886 	bl	8006318 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800120c:	b034      	add	sp, #208	@ 0xd0
 800120e:	bd10      	pop	{r4, pc}
 8001210:	50001000 	.word	0x50001000
 8001214:	58024400 	.word	0x58024400

08001218 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	b0bf      	sub	sp, #252	@ 0xfc
 800121c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	2214      	movs	r2, #20
 8001220:	2100      	movs	r1, #0
 8001222:	a807      	add	r0, sp, #28
 8001224:	f01f faf8 	bl	8020818 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	22c8      	movs	r2, #200	@ 0xc8
 800122a:	2100      	movs	r1, #0
 800122c:	a80c      	add	r0, sp, #48	@ 0x30
 800122e:	f01f faf3 	bl	8020818 <memset>
  if(hqspi->Instance==QUADSPI)
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	4b53      	ldr	r3, [pc, #332]	@ (8001384 <HAL_QSPI_MspInit+0x16c>)
 8001236:	429a      	cmp	r2, r3
 8001238:	f040 80a1 	bne.w	800137e <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800123c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001240:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001244:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f008 ff8a 	bl	800a160 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	b108      	cbz	r0, 8001252 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800124e:	f7ff fe79 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001252:	4b4d      	ldr	r3, [pc, #308]	@ (8001388 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001258:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800125a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800125e:	a907      	add	r1, sp, #28
 8001260:	484a      	ldr	r0, [pc, #296]	@ (800138c <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001262:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001264:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001268:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800126c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001270:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001278:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800127c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001280:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001284:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001288:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800128c:	9202      	str	r2, [sp, #8]
 800128e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001290:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001294:	f042 0220 	orr.w	r2, r2, #32
 8001298:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800129c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012a0:	f002 0220 	and.w	r2, r2, #32
 80012a4:	9203      	str	r2, [sp, #12]
 80012a6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012b0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012b8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80012bc:	9204      	str	r2, [sp, #16]
 80012be:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012c4:	f042 0202 	orr.w	r2, r2, #2
 80012c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012d0:	f002 0202 	and.w	r2, r2, #2
 80012d4:	9205      	str	r2, [sp, #20]
 80012d6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012dc:	f042 0208 	orr.w	r2, r2, #8
 80012e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	9306      	str	r3, [sp, #24]
 80012ee:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80012f4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012fc:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fe:	f005 fdef 	bl	8006ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001302:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001304:	a907      	add	r1, sp, #28
 8001306:	4821      	ldr	r0, [pc, #132]	@ (800138c <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001308:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001312:	f005 fde5 	bl	8006ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001316:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001318:	a907      	add	r1, sp, #28
 800131a:	481d      	ldr	r0, [pc, #116]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800131c:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001326:	f005 fddb 	bl	8006ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800132a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800132e:	a907      	add	r1, sp, #28
 8001330:	4817      	ldr	r0, [pc, #92]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001332:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133c:	f005 fdd0 	bl	8006ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001340:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001342:	a907      	add	r1, sp, #28
 8001344:	4813      	ldr	r0, [pc, #76]	@ (8001394 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001346:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001350:	f005 fdc6 	bl	8006ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001354:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	a907      	add	r1, sp, #28
 8001358:	480f      	ldr	r0, [pc, #60]	@ (8001398 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800135a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f005 fdbc 	bl	8006ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001368:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	a907      	add	r1, sp, #28
 800136e:	480b      	ldr	r0, [pc, #44]	@ (800139c <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001370:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f005 fdb1 	bl	8006ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800137e:	b03f      	add	sp, #252	@ 0xfc
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	bf00      	nop
 8001384:	52005000 	.word	0x52005000
 8001388:	58024400 	.word	0x58024400
 800138c:	58021800 	.word	0x58021800
 8001390:	58021400 	.word	0x58021400
 8001394:	58021c00 	.word	0x58021c00
 8001398:	58020400 	.word	0x58020400
 800139c:	58020c00 	.word	0x58020c00

080013a0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013a4:	2100      	movs	r1, #0
 80013a6:	2214      	movs	r2, #20
 80013a8:	a801      	add	r0, sp, #4
 80013aa:	f01f fa35 	bl	8020818 <memset>
  if (FMC_Initialized) {
 80013ae:	4b3f      	ldr	r3, [pc, #252]	@ (80014ac <HAL_SDRAM_MspInit+0x10c>)
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	2900      	cmp	r1, #0
 80013b4:	d177      	bne.n	80014a6 <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80013b6:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80013ba:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	22c0      	movs	r2, #192	@ 0xc0
 80013be:	f01f fa2b 	bl	8020818 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013c6:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c8:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f008 fec7 	bl	800a160 <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	b108      	cbz	r0, 80013d8 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 80013d4:	f7ff fdb6 	bl	8000f44 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2600      	movs	r6, #0
 80013de:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80013e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e4:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013e6:	a901      	add	r1, sp, #4
 80013e8:	4832      	ldr	r0, [pc, #200]	@ (80014b4 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80013ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80013ee:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80013f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f6:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80013f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800140c:	f005 fd68 	bl	8006ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001410:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	a901      	add	r1, sp, #4
 8001414:	4828      	ldr	r0, [pc, #160]	@ (80014b8 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001416:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f005 fd5e 	bl	8006ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001424:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001428:	a901      	add	r1, sp, #4
 800142a:	4824      	ldr	r0, [pc, #144]	@ (80014bc <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001436:	f005 fd53 	bl	8006ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800143a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800143e:	a901      	add	r1, sp, #4
 8001440:	481f      	ldr	r0, [pc, #124]	@ (80014c0 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001442:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800144c:	f005 fd48 	bl	8006ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001450:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001454:	a901      	add	r1, sp, #4
 8001456:	481b      	ldr	r0, [pc, #108]	@ (80014c4 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001458:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001462:	f005 fd3d 	bl	8006ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001466:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146a:	a901      	add	r1, sp, #4
 800146c:	4816      	ldr	r0, [pc, #88]	@ (80014c8 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800146e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001478:	f005 fd32 	bl	8006ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800147c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001480:	a901      	add	r1, sp, #4
 8001482:	4812      	ldr	r0, [pc, #72]	@ (80014cc <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001484:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800148e:	f005 fd27 	bl	8006ee0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001492:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	a901      	add	r1, sp, #4
 8001496:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001498:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	f005 fd1d 	bl	8006ee0 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014a6:	b039      	add	sp, #228	@ 0xe4
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24000494 	.word	0x24000494
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58022000 	.word	0x58022000
 80014b8:	58020400 	.word	0x58020400
 80014bc:	58021000 	.word	0x58021000
 80014c0:	58021c00 	.word	0x58021c00
 80014c4:	58021800 	.word	0x58021800
 80014c8:	58020c00 	.word	0x58020c00
 80014cc:	58021400 	.word	0x58021400
 80014d0:	58020800 	.word	0x58020800

080014d4 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80014d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <HAL_SDRAM_MspDeInit+0x6c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80014d8:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 80014da:	bb82      	cbnz	r2, 800153e <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 80014dc:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 80014de:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014e0:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 80014e4:	4818      	ldr	r0, [pc, #96]	@ (8001548 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 80014e6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 80014e8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 80014ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014f4:	f005 fddc 	bl	80070b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 80014f8:	2160      	movs	r1, #96	@ 0x60
 80014fa:	4814      	ldr	r0, [pc, #80]	@ (800154c <HAL_SDRAM_MspDeInit+0x78>)
 80014fc:	f005 fdd8 	bl	80070b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001500:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001504:	4812      	ldr	r0, [pc, #72]	@ (8001550 <HAL_SDRAM_MspDeInit+0x7c>)
 8001506:	f005 fdd3 	bl	80070b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800150a:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800150e:	4811      	ldr	r0, [pc, #68]	@ (8001554 <HAL_SDRAM_MspDeInit+0x80>)
 8001510:	f005 fdce 	bl	80070b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001514:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001518:	480f      	ldr	r0, [pc, #60]	@ (8001558 <HAL_SDRAM_MspDeInit+0x84>)
 800151a:	f005 fdc9 	bl	80070b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800151e:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001522:	480e      	ldr	r0, [pc, #56]	@ (800155c <HAL_SDRAM_MspDeInit+0x88>)
 8001524:	f005 fdc4 	bl	80070b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001528:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <HAL_SDRAM_MspDeInit+0x8c>)
 800152e:	f005 fdbf 	bl	80070b0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001532:	4621      	mov	r1, r4
 8001534:	480b      	ldr	r0, [pc, #44]	@ (8001564 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800153a:	f005 bdb9 	b.w	80070b0 <HAL_GPIO_DeInit>
}
 800153e:	bd10      	pop	{r4, pc}
 8001540:	24000490 	.word	0x24000490
 8001544:	58024400 	.word	0x58024400
 8001548:	58022000 	.word	0x58022000
 800154c:	58020400 	.word	0x58020400
 8001550:	58021000 	.word	0x58021000
 8001554:	58021c00 	.word	0x58021c00
 8001558:	58021800 	.word	0x58021800
 800155c:	58020c00 	.word	0x58020c00
 8001560:	58021400 	.word	0x58021400
 8001564:	58020800 	.word	0x58020800

08001568 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001568:	280f      	cmp	r0, #15
{
 800156a:	b510      	push	{r4, lr}
 800156c:	4604      	mov	r4, r0
 800156e:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001570:	d902      	bls.n	8001578 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001574:	b00a      	add	sp, #40	@ 0x28
 8001576:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001578:	4601      	mov	r1, r0
 800157a:	2200      	movs	r2, #0
 800157c:	2036      	movs	r0, #54	@ 0x36
 800157e:	f004 fe99 	bl	80062b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001582:	2036      	movs	r0, #54	@ 0x36
 8001584:	f004 fec8 	bl	8006318 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800158a:	4669      	mov	r1, sp
 800158c:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 800158e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <HAL_InitTick+0x88>)
 8001592:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001596:	f042 0210 	orr.w	r2, r2, #16
 800159a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800159e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015aa:	f008 fcbf 	bl	8009f2c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015ae:	9b07      	ldr	r3, [sp, #28]
 80015b0:	b9c3      	cbnz	r3, 80015e4 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015b2:	f008 fc97 	bl	8009ee4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80015b6:	4c0f      	ldr	r4, [pc, #60]	@ (80015f4 <HAL_InitTick+0x8c>)
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_InitTick+0x90>)
 80015ba:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015bc:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80015c0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <HAL_InitTick+0x94>)
 80015c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80015c8:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80015ca:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80015cc:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015ce:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80015d0:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015d4:	f009 fcd2 	bl	800af7c <HAL_TIM_Base_Init>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d1ca      	bne.n	8001572 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80015dc:	4620      	mov	r0, r4
 80015de:	f009 fb75 	bl	800accc <HAL_TIM_Base_Start_IT>
 80015e2:	e7c7      	b.n	8001574 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015e4:	f008 fc7e 	bl	8009ee4 <HAL_RCC_GetPCLK1Freq>
 80015e8:	0040      	lsls	r0, r0, #1
 80015ea:	e7e4      	b.n	80015b6 <HAL_InitTick+0x4e>
 80015ec:	24000074 	.word	0x24000074
 80015f0:	58024400 	.word	0x58024400
 80015f4:	24000498 	.word	0x24000498
 80015f8:	40001000 	.word	0x40001000
 80015fc:	000f4240 	.word	0x000f4240

08001600 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler>

08001602 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler>

08001604 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler>

08001606 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler>

08001608 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler>

0800160a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	4770      	bx	lr

0800160c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800160c:	4801      	ldr	r0, [pc, #4]	@ (8001614 <TIM6_DAC_IRQHandler+0x8>)
 800160e:	f009 bb9f 	b.w	800ad50 <HAL_TIM_IRQHandler>
 8001612:	bf00      	nop
 8001614:	24000498 	.word	0x24000498

08001618 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001618:	4801      	ldr	r0, [pc, #4]	@ (8001620 <LTDC_IRQHandler+0x8>)
 800161a:	f007 b9c0 	b.w	800899e <HAL_LTDC_IRQHandler>
 800161e:	bf00      	nop
 8001620:	24000210 	.word	0x24000210

08001624 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001624:	4801      	ldr	r0, [pc, #4]	@ (800162c <DMA2D_IRQHandler+0x8>)
 8001626:	f004 bf81 	b.w	800652c <HAL_DMA2D_IRQHandler>
 800162a:	bf00      	nop
 800162c:	24000404 	.word	0x24000404

08001630 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001630:	4801      	ldr	r0, [pc, #4]	@ (8001638 <JPEG_IRQHandler+0x8>)
 8001632:	f007 b865 	b.w	8008700 <HAL_JPEG_IRQHandler>
 8001636:	bf00      	nop
 8001638:	24000390 	.word	0x24000390

0800163c <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MDMA_IRQHandler+0x14>)
{
 800163e:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001640:	f007 fbb6 	bl	8008db0 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001644:	4803      	ldr	r0, [pc, #12]	@ (8001654 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 800164a:	f007 bbb1 	b.w	8008db0 <HAL_MDMA_IRQHandler>
 800164e:	bf00      	nop
 8001650:	240002b8 	.word	0x240002b8
 8001654:	24000324 	.word	0x24000324

08001658 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001658:	4801      	ldr	r0, [pc, #4]	@ (8001660 <DSI_IRQHandler+0x8>)
 800165a:	f005 b92a 	b.w	80068b2 <HAL_DSI_IRQHandler>
 800165e:	bf00      	nop
 8001660:	240003e8 	.word	0x240003e8

08001664 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001664:	2001      	movs	r0, #1
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b508      	push	{r3, lr}
	errno = EINVAL;
 800166a:	f01f f989 	bl	8020980 <__errno>
 800166e:	2316      	movs	r3, #22
 8001670:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001672:	f04f 30ff 	mov.w	r0, #4294967295
 8001676:	bd08      	pop	{r3, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b508      	push	{r3, lr}
	errno = EINVAL;
 800167a:	f01f f981 	bl	8020980 <__errno>
 800167e:	2316      	movs	r3, #22
 8001680:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001682:	e7fe      	b.n	8001682 <_exit+0xa>

08001684 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	460d      	mov	r5, r1
 8001688:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	460e      	mov	r6, r1
 800168c:	1b73      	subs	r3, r6, r5
 800168e:	429c      	cmp	r4, r3
 8001690:	dc01      	bgt.n	8001696 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001692:	4620      	mov	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001696:	f3af 8000 	nop.w
 800169a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	e7f5      	b.n	800168c <_read+0x8>

080016a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	460d      	mov	r5, r1
 80016a4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	460e      	mov	r6, r1
 80016a8:	1b73      	subs	r3, r6, r5
 80016aa:	429c      	cmp	r4, r3
 80016ac:	dc01      	bgt.n	80016b2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80016ae:	4620      	mov	r0, r4
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80016b2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80016b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	e7f5      	b.n	80016a8 <_write+0x8>

080016bc <_close>:

int _close(int file)
{
	return -1;
}
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	4770      	bx	lr

080016c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80016c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80016c6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80016c8:	604b      	str	r3, [r1, #4]
}
 80016ca:	4770      	bx	lr

080016cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80016cc:	2001      	movs	r0, #1
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80016d0:	2000      	movs	r0, #0
 80016d2:	4770      	bx	lr

080016d4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <_sbrk+0x30>)
{
 80016d6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80016d8:	6811      	ldr	r1, [r2, #0]
{
 80016da:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80016dc:	b909      	cbnz	r1, 80016e2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80016de:	490a      	ldr	r1, [pc, #40]	@ (8001708 <_sbrk+0x34>)
 80016e0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	6810      	ldr	r0, [r2, #0]
 80016e4:	4909      	ldr	r1, [pc, #36]	@ (800170c <_sbrk+0x38>)
 80016e6:	4c0a      	ldr	r4, [pc, #40]	@ (8001710 <_sbrk+0x3c>)
 80016e8:	4403      	add	r3, r0
 80016ea:	1b09      	subs	r1, r1, r4
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d906      	bls.n	80016fe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80016f0:	f01f f946 	bl	8020980 <__errno>
 80016f4:	230c      	movs	r3, #12
 80016f6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80016fc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80016fe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001700:	e7fc      	b.n	80016fc <_sbrk+0x28>
 8001702:	bf00      	nop
 8001704:	240004e4 	.word	0x240004e4
 8001708:	24025d60 	.word	0x24025d60
 800170c:	24080000 	.word	0x24080000
 8001710:	00001000 	.word	0x00001000

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800174c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001718:	f004 fcf2 	bl	8006100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	@ (8001754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	@ (8001760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f01f f923 	bl	802098c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff f83f 	bl	80007c8 <main>
  bx  lr
 800174a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001750:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001754:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001758:	080249b8 	.word	0x080249b8
  ldr r2, =_sbss
 800175c:	2400013c 	.word	0x2400013c
  ldr r4, =_ebss
 8001760:	24025d5c 	.word	0x24025d5c

08001764 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC3_IRQHandler>

08001766 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001766:	4770      	bx	lr

08001768 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001768:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800176a:	f001 fcb5 	bl	80030d8 <touchgfx_components_init>
    touchgfx_init();
}
 800176e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001772:	f001 bc39 	b.w	8002fe8 <touchgfx_init>

08001776 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001776:	f001 bcb1 	b.w	80030dc <touchgfx_taskEntry>

0800177a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800177a:	6840      	ldr	r0, [r0, #4]
    }
 800177c:	4770      	bx	lr

0800177e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800177e:	6041      	str	r1, [r0, #4]
    }
 8001780:	4770      	bx	lr

08001782 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001782:	1a52      	subs	r2, r2, r1
 8001784:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001788:	fbb2 f0f3 	udiv	r0, r2, r3
 800178c:	4770      	bx	lr
	...

08001790 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001790:	4b02      	ldr	r3, [pc, #8]	@ (800179c <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001792:	68c0      	ldr	r0, [r0, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001798:	4358      	muls	r0, r3
 800179a:	4770      	bx	lr
 800179c:	240004e8 	.word	0x240004e8

080017a0 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 80017a0:	4770      	bx	lr
	...

080017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 80017a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 80017a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 80017ac:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 80017ae:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017be:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80017cc:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 80017d0:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 80017d6:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 80017d8:	2101      	movs	r1, #1
 80017da:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 80017dc:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	2210      	movs	r2, #16
 80017e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017e4:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80017e8:	fab2 f282 	clz	r2, r2
 80017ec:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 80017ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	b983      	cbnz	r3, 8001816 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 80017f4:	f008 fb54 	bl	8009ea0 <HAL_RCC_GetHCLKFreq>
 80017f8:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 80017fa:	f008 f989 	bl	8009b10 <HAL_RCC_GetSysClockFreq>
 80017fe:	fbb0 f0f4 	udiv	r0, r0, r4
 8001802:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001806:	f009 fbb9 	bl	800af7c <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 800180c:	b003      	add	sp, #12
 800180e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001812:	f009 ba21 	b.w	800ac58 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001816:	f008 fb65 	bl	8009ee4 <HAL_RCC_GetPCLK1Freq>
 800181a:	0044      	lsls	r4, r0, #1
 800181c:	e7ed      	b.n	80017fa <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800181e:	bf00      	nop
 8001820:	58024400 	.word	0x58024400
 8001824:	240004e8 	.word	0x240004e8
 8001828:	080238f8 	.word	0x080238f8

0800182c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 800182c:	b510      	push	{r4, lr}
 800182e:	4604      	mov	r4, r0
 8001830:	2110      	movs	r1, #16
 8001832:	f01e f965 	bl	801fb00 <_ZdlPvj>
 8001836:	4620      	mov	r0, r4
 8001838:	bd10      	pop	{r4, pc}

0800183a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800183a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 800183c:	6803      	ldr	r3, [r0, #0]
{
 800183e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001840:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001842:	b131      	cbz	r1, 8001852 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001844:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001846:	4798      	blx	r3
 8001848:	6863      	ldr	r3, [r4, #4]
 800184a:	1b5b      	subs	r3, r3, r5
 800184c:	4403      	add	r3, r0
 800184e:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001850:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001852:	4798      	blx	r3
 8001854:	60a0      	str	r0, [r4, #8]
}
 8001856:	e7fb      	b.n	8001850 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001858 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001858:	4770      	bx	lr
	...

0800185c <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001860:	460f      	mov	r7, r1
 8001862:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001864:	781d      	ldrb	r5, [r3, #0]
 8001866:	b915      	cbnz	r5, 800186e <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001868:	2500      	movs	r5, #0
}
 800186a:	4628      	mov	r0, r5
 800186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 800186e:	4c07      	ldr	r4, [pc, #28]	@ (800188c <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001870:	2000      	movs	r0, #0
 8001872:	4621      	mov	r1, r4
 8001874:	f004 fbe8 	bl	8006048 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f4      	beq.n	8001868 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 800187e:	6863      	ldr	r3, [r4, #4]
 8001880:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001882:	68a3      	ldr	r3, [r4, #8]
 8001884:	6033      	str	r3, [r6, #0]
            return true;
 8001886:	e7f0      	b.n	800186a <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001888:	24000544 	.word	0x24000544
 800188c:	24000534 	.word	0x24000534

08001890 <_ZN20STM32TouchControllerD0Ev>:
 8001890:	b510      	push	{r4, lr}
 8001892:	4604      	mov	r4, r0
 8001894:	2104      	movs	r1, #4
 8001896:	f01e f933 	bl	801fb00 <_ZdlPvj>
 800189a:	4620      	mov	r0, r4
 800189c:	bd10      	pop	{r4, pc}
	...

080018a0 <_ZN20STM32TouchController4initEv>:
{
 80018a0:	b508      	push	{r3, lr}
    hTS->Width = 800;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80018a4:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 80018a8:	2000      	movs	r0, #0
    hTS->Width = 800;
 80018aa:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80018ac:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018b0:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80018b4:	230c      	movs	r3, #12
 80018b6:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80018ba:	f004 fb35 	bl	8005f28 <BSP_TS_Init>
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <_ZN20STM32TouchController4initEv+0x40>)
 80018c0:	b910      	cbnz	r0, 80018c8 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1fb      	bne.n	80018c6 <_ZN20STM32TouchController4initEv+0x26>
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <_ZN20STM32TouchController4initEv+0x44>)
 80018d0:	212e      	movs	r1, #46	@ 0x2e
 80018d2:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <_ZN20STM32TouchController4initEv+0x48>)
 80018d4:	4805      	ldr	r0, [pc, #20]	@ (80018ec <_ZN20STM32TouchController4initEv+0x4c>)
 80018d6:	f01e fcab 	bl	8020230 <__assert_func>
 80018da:	bf00      	nop
 80018dc:	24000540 	.word	0x24000540
 80018e0:	24000544 	.word	0x24000544
 80018e4:	08021434 	.word	0x08021434
 80018e8:	08021447 	.word	0x08021447
 80018ec:	08021471 	.word	0x08021471

080018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 80018f0:	2803      	cmp	r0, #3
 80018f2:	d825      	bhi.n	8001940 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 80018f4:	e8df f000 	tbb	[pc, r0]
 80018f8:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80018fe:	2108      	movs	r1, #8
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	fab2 f282 	clz	r2, r2
 8001906:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001908:	480f      	ldr	r0, [pc, #60]	@ (8001948 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800190a:	f005 bc73 	b.w	80071f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800190e:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001910:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	fab2 f282 	clz	r2, r2
 800191a:	0952      	lsrs	r2, r2, #5
 800191c:	e7f4      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001920:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	fab2 f282 	clz	r2, r2
 800192a:	0952      	lsrs	r2, r2, #5
 800192c:	e7ec      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800192e:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001930:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001934:	4805      	ldr	r0, [pc, #20]	@ (800194c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	fab2 f282 	clz	r2, r2
 800193c:	0952      	lsrs	r2, r2, #5
 800193e:	e7e4      	b.n	800190a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	24000548 	.word	0x24000548
 8001948:	58022400 	.word	0x58022400
 800194c:	58021400 	.word	0x58021400

08001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001950:	2803      	cmp	r0, #3
 8001952:	d825      	bhi.n	80019a0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001954:	e8df f000 	tbb	[pc, r0]
 8001958:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 800195e:	2108      	movs	r1, #8
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	3a00      	subs	r2, #0
 8001964:	bf18      	it	ne
 8001966:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001968:	480f      	ldr	r0, [pc, #60]	@ (80019a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800196a:	f005 bc43 	b.w	80071f4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001970:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	3a00      	subs	r2, #0
 8001978:	bf18      	it	ne
 800197a:	2201      	movne	r2, #1
 800197c:	e7f4      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001980:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	3a00      	subs	r2, #0
 8001988:	bf18      	it	ne
 800198a:	2201      	movne	r2, #1
 800198c:	e7ec      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	3a00      	subs	r2, #0
 800199a:	bf18      	it	ne
 800199c:	2201      	movne	r2, #1
 800199e:	e7e4      	b.n	800196a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	24000548 	.word	0x24000548
 80019a8:	58022400 	.word	0x58022400
 80019ac:	58021400 	.word	0x58021400

080019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80019b0:	2803      	cmp	r0, #3
 80019b2:	d811      	bhi.n	80019d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 80019b4:	e8df f000 	tbb	[pc, r0]
 80019b8:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019bc:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019be:	4807      	ldr	r0, [pc, #28]	@ (80019dc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019c0:	f005 bc1d 	b.w	80071fe <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c8:	e7f9      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019ce:	e7f6      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 80019d6:	e7f3      	b.n	80019c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	58022400 	.word	0x58022400
 80019e0:	58021400 	.word	0x58021400

080019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 80019e4:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 80019e6:	2803      	cmp	r0, #3
 80019e8:	d815      	bhi.n	8001a16 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 80019ea:	e8df f000 	tbb	[pc, r0]
 80019ee:	0a02      	.short	0x0a02
 80019f0:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019f2:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019f4:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019f6:	f005 fbf7 	bl	80071e8 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 80019fa:	1e43      	subs	r3, r0, #1
 80019fc:	4258      	negs	r0, r3
 80019fe:	4158      	adcs	r0, r3
 8001a00:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a06:	e7f5      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001a08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a0c:	e7f2      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001a0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a12:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001a14:	e7ef      	b.n	80019f6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001a16:	2000      	movs	r0, #0
 8001a18:	e7ef      	b.n	80019fa <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001a1a:	bf00      	nop
 8001a1c:	58022400 	.word	0x58022400
 8001a20:	58021400 	.word	0x58021400

08001a24 <_ZN8touchgfx4GPIO4initEv>:
{
 8001a24:	b570      	push	{r4, r5, r6, lr}
 8001a26:	4d08      	ldr	r5, [pc, #32]	@ (8001a48 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001a28:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001a2a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001a2c:	b2e0      	uxtb	r0, r4
 8001a2e:	f7ff ffd9 	bl	80019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001a32:	b118      	cbz	r0, 8001a3c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001a34:	682b      	ldr	r3, [r5, #0]
 8001a36:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001a38:	bf18      	it	ne
 8001a3a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001a3c:	3401      	adds	r4, #1
 8001a3e:	3504      	adds	r5, #4
 8001a40:	2c05      	cmp	r4, #5
 8001a42:	d1f3      	bne.n	8001a2c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001a44:	bd70      	pop	{r4, r5, r6, pc}
 8001a46:	bf00      	nop
 8001a48:	24000548 	.word	0x24000548

08001a4c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001a4c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001a4e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001a52:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001a56:	4770      	bx	lr

08001a58 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001a58:	2000      	movs	r0, #0
 8001a5a:	4770      	bx	lr

08001a5c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001a5c:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001a5e:	3900      	subs	r1, #0
 8001a60:	4b02      	ldr	r3, [pc, #8]	@ (8001a6c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001a62:	bf18      	it	ne
 8001a64:	2101      	movne	r1, #1
 8001a66:	7019      	strb	r1, [r3, #0]
    }
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	2402513f 	.word	0x2402513f

08001a70 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001a70:	2000      	movs	r0, #0
 8001a72:	4770      	bx	lr

08001a74 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001a74:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001a76:	b10b      	cbz	r3, 8001a7c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001a78:	4608      	mov	r0, r1
 8001a7a:	4718      	bx	r3
        }
    }
 8001a7c:	4770      	bx	lr

08001a7e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001a7e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a82:	4770      	bx	lr

08001a84 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001a84:	6840      	ldr	r0, [r0, #4]
 8001a86:	6803      	ldr	r3, [r0, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4718      	bx	r3

08001a8c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001a8c:	4b01      	ldr	r3, [pc, #4]	@ (8001a94 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	2400056c 	.word	0x2400056c

08001a98 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001a98:	4770      	bx	lr

08001a9a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001a9a:	f001 bc1c 	b.w	80032d6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001a9e <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001a9e:	f001 bbab 	b.w	80031f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001aa2 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001aa2:	f001 bd7d 	b.w	80035a0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001aa6 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001aa6:	f001 bd6f 	b.w	8003588 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001aac <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001aac:	b510      	push	{r4, lr}
 8001aae:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001ab0:	f001 fd32 	bl	8003518 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001ab4:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001ab8:	b113      	cbz	r3, 8001ac0 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001aba:	4b02      	ldr	r3, [pc, #8]	@ (8001ac4 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
    }
}
 8001ac0:	bd10      	pop	{r4, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2400000c 	.word	0x2400000c

08001ac8 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001ac8:	f001 bb9e 	b.w	8003208 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001acc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001acc:	b510      	push	{r4, lr}
 8001ace:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001ad0:	f00c fd48 	bl	800e564 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001ae0:	4718      	bx	r3

08001ae2 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001ae2:	b510      	push	{r4, lr}
 8001ae4:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001ae6:	f00c f8c5 	bl	800dc74 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001aea:	6860      	ldr	r0, [r4, #4]
 8001aec:	6803      	ldr	r3, [r0, #0]
    }
 8001aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	4718      	bx	r3

08001af6 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001af6:	f00b bf93 	b.w	800da20 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001afa <_ZN11TouchGFXHALD0Ev>:
 8001afa:	b510      	push	{r4, lr}
 8001afc:	4604      	mov	r4, r0
 8001afe:	217c      	movs	r1, #124	@ 0x7c
 8001b00:	f01d fffe 	bl	801fb00 <_ZdlPvj>
 8001b04:	4620      	mov	r0, r4
 8001b06:	bd10      	pop	{r4, pc}

08001b08 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001b08:	4b02      	ldr	r3, [pc, #8]	@ (8001b14 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001b0e:	f00b bfc3 	b.w	800da98 <_ZN8touchgfx3HAL10beginFrameEv>
 8001b12:	bf00      	nop
 8001b14:	2400000c 	.word	0x2400000c

08001b18 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001b18:	b538      	push	{r3, r4, r5, lr}
 8001b1a:	4604      	mov	r4, r0
    mcuInstr.init();
 8001b1c:	4d06      	ldr	r5, [pc, #24]	@ (8001b38 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001b1e:	f001 fb9b 	bl	8003258 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001b22:	2300      	movs	r3, #0
    mcuInstr.init();
 8001b24:	4628      	mov	r0, r5
 8001b26:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001b2a:	f7ff fe3b 	bl	80017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001b2e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001b30:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001b32:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001b36:	bd38      	pop	{r3, r4, r5, pc}
 8001b38:	2400055c 	.word	0x2400055c

08001b3c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001b3c:	6803      	ldr	r3, [r0, #0]
{
 8001b3e:	4604      	mov	r4, r0
 8001b40:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b46:	4798      	blx	r3
    enableInterrupts();
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b4e:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001b50:	f000 ff5c 	bl	8002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	4620      	mov	r0, r4
 8001b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5a:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2329      	movs	r3, #41	@ 0x29
 8001b60:	2215      	movs	r2, #21
 8001b62:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001b64:	9100      	str	r1, [sp, #0]
 8001b66:	f005 f8b4 	bl	8006cd2 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001b6a:	f000 ff4f 	bl	8002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	4620      	mov	r0, r4
 8001b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b74:	4798      	blx	r3
    for (;;)
 8001b76:	e7f8      	b.n	8001b6a <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001b78:	240003e8 	.word	0x240003e8

08001b7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001b7c:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001b80:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001b82:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001b84:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001b88:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001b8a:	428c      	cmp	r4, r1
 8001b8c:	d009      	beq.n	8001ba2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001b8e:	b93a      	cbnz	r2, 8001ba0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b90:	490a      	ldr	r1, [pc, #40]	@ (8001bbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b92:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b94:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b96:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001b98:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001b9a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b9c:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001b9e:	701a      	strb	r2, [r3, #0]
        }
    }
 8001ba0:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d0fc      	beq.n	8001ba0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ba6:	4a06      	ldr	r2, [pc, #24]	@ (8001bc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001ba8:	4904      	ldr	r1, [pc, #16]	@ (8001bbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001baa:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001bac:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bae:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001bb0:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	e7f3      	b.n	8001b9e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001bb6:	bf00      	nop
 8001bb8:	24025138 	.word	0x24025138
 8001bbc:	24025136 	.word	0x24025136
 8001bc0:	24025134 	.word	0x24025134

08001bc4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001bc4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	428b      	cmp	r3, r1
 8001bcc:	d803      	bhi.n	8001bd6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d905      	bls.n	8001be2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001bd8:	219e      	movs	r1, #158	@ 0x9e
 8001bda:	4a07      	ldr	r2, [pc, #28]	@ (8001bf8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001bdc:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001bde:	f01e fb27 	bl	8020230 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001be4:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001be6:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001be8:	801a      	strh	r2, [r3, #0]
    }
 8001bea:	bd08      	pop	{r3, pc}
 8001bec:	24025134 	.word	0x24025134
 8001bf0:	24025136 	.word	0x24025136
 8001bf4:	080214d4 	.word	0x080214d4
 8001bf8:	08021537 	.word	0x08021537
 8001bfc:	0802157a 	.word	0x0802157a
 8001c00:	2402513a 	.word	0x2402513a
 8001c04:	2402513c 	.word	0x2402513c

08001c08 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001c08:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001c0a:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001c0e:	b118      	cbz	r0, 8001c18 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001c10:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001c12:	6803      	ldr	r3, [r0, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4718      	bx	r3
    }
 8001c18:	4770      	bx	lr
	...

08001c1c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	460d      	mov	r5, r1
 8001c20:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001c24:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001c26:	b935      	cbnz	r5, 8001c36 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001c2a:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001c30:	480a      	ldr	r0, [pc, #40]	@ (8001c5c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001c32:	f01e fafd 	bl	8020230 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001c36:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001c3a:	3a00      	subs	r2, #0
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001c3e:	bf18      	it	ne
 8001c40:	2201      	movne	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001c44:	6803      	ldr	r3, [r0, #0]
}
 8001c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c4e:	4718      	bx	r3
 8001c50:	2400056c 	.word	0x2400056c
 8001c54:	080215cd 	.word	0x080215cd
 8001c58:	08021605 	.word	0x08021605
 8001c5c:	0802157a 	.word	0x0802157a
 8001c60:	2402513e 	.word	0x2402513e

08001c64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8001c64:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001c68:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001c6e:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 8001c70:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001c74:	4a1d      	ldr	r2, [pc, #116]	@ (8001cec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001c76:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001c78:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001c7c:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001c7e:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 8001c80:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001c84:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 8001c86:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 8001c8a:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c8c:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 8001c8e:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 8001c92:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001c96:	4a16      	ldr	r2, [pc, #88]	@ (8001cf0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c98:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8001c9c:	3520      	adds	r5, #32
          buttonController(0),
 8001c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8001ca2:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8001ca6:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8001caa:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8001cae:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001cb2:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8001cb6:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001cba:	6782      	str	r2, [r0, #120]	@ 0x78
 8001cbc:	b2ad      	uxth	r5, r5
        instance = this;
 8001cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cc0:	42b5      	cmp	r5, r6
        instance = this;
 8001cc2:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001cc6:	8015      	strh	r5, [r2, #0]
 8001cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8001cfc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8001cca:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001ccc:	bf28      	it	cs
 8001cce:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001d00 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cd2:	bf38      	it	cc
 8001cd4:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cd6:	8016      	strh	r6, [r2, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cda:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cde:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001ce0:	4a09      	ldr	r2, [pc, #36]	@ (8001d08 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001ce2:	7013      	strb	r3, [r2, #0]
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8001ce6:	6003      	str	r3, [r0, #0]
}
 8001ce8:	bd70      	pop	{r4, r5, r6, pc}
 8001cea:	bf00      	nop
 8001cec:	01000001 	.word	0x01000001
 8001cf0:	01010000 	.word	0x01010000
 8001cf4:	24025140 	.word	0x24025140
 8001cf8:	24025134 	.word	0x24025134
 8001cfc:	2402513a 	.word	0x2402513a
 8001d00:	24025136 	.word	0x24025136
 8001d04:	2402513c 	.word	0x2402513c
 8001d08:	24025138 	.word	0x24025138
 8001d0c:	0802165c 	.word	0x0802165c

08001d10 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001d10:	2b01      	cmp	r3, #1
    {
 8001d12:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001d14:	d80e      	bhi.n	8001d34 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	2215      	movs	r2, #21
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4601      	mov	r1, r0
 8001d20:	4808      	ldr	r0, [pc, #32]	@ (8001d44 <DSI_IO_Write+0x34>)
 8001d22:	f004 ffd6 	bl	8006cd2 <HAL_DSI_ShortWrite>
 8001d26:	b118      	cbz	r0, 8001d30 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001d28:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001d30:	2000      	movs	r0, #0
 8001d32:	e7fb      	b.n	8001d2c <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001d34:	e9cd 1200 	strd	r1, r2, [sp]
 8001d38:	4601      	mov	r1, r0
 8001d3a:	2239      	movs	r2, #57	@ 0x39
 8001d3c:	4801      	ldr	r0, [pc, #4]	@ (8001d44 <DSI_IO_Write+0x34>)
 8001d3e:	f004 ffd9 	bl	8006cf4 <HAL_DSI_LongWrite>
 8001d42:	e7f0      	b.n	8001d26 <DSI_IO_Write+0x16>
 8001d44:	240003e8 	.word	0x240003e8

08001d48 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001d4a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001d4e:	2106      	movs	r1, #6
 8001d50:	9100      	str	r1, [sp, #0]
 8001d52:	4601      	mov	r1, r0
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <DSI_IO_Read+0x24>)
 8001d56:	f005 f82d 	bl	8006db4 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8001d5a:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8001d5c:	bf14      	ite	ne
 8001d5e:	f06f 0007 	mvnne.w	r0, #7
 8001d62:	2000      	moveq	r0, #0
 8001d64:	b005      	add	sp, #20
 8001d66:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d6a:	bf00      	nop
 8001d6c:	240003e8 	.word	0x240003e8

08001d70 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 8001d72:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d76:	4c0b      	ldr	r4, [pc, #44]	@ (8001da4 <LCD_ReqTear+0x34>)
 8001d78:	2239      	movs	r2, #57	@ 0x39
 8001d7a:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8001d7c:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d80:	ab03      	add	r3, sp, #12
 8001d82:	4620      	mov	r0, r4
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	2344      	movs	r3, #68	@ 0x44
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	f004 ffb2 	bl	8006cf4 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001d90:	2100      	movs	r1, #0
 8001d92:	2335      	movs	r3, #53	@ 0x35
 8001d94:	2215      	movs	r2, #21
 8001d96:	4620      	mov	r0, r4
 8001d98:	9100      	str	r1, [sp, #0]
 8001d9a:	f004 ff9a 	bl	8006cd2 <HAL_DSI_ShortWrite>
    }
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	bf00      	nop
 8001da4:	240003e8 	.word	0x240003e8

08001da8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001da8:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001daa:	f7ff ffe1 	bl	8001d70 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001db8:	2201      	movs	r2, #1
 8001dba:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001dbe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001dca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dce:	f042 0202 	orr.w	r2, r2, #2
 8001dd2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	4b02      	ldr	r3, [pc, #8]	@ (8001de4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001dda:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ddc:	bd08      	pop	{r3, pc}
 8001dde:	bf00      	nop
 8001de0:	240003e8 	.word	0x240003e8
 8001de4:	50001000 	.word	0x50001000

08001de8 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001de8:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <LCD_ReqEnable+0x20>)
    {
 8001dea:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001dec:	7819      	ldrb	r1, [r3, #0]
 8001dee:	b939      	cbnz	r1, 8001e00 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001df0:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001df2:	4806      	ldr	r0, [pc, #24]	@ (8001e0c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001df4:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001df6:	2329      	movs	r3, #41	@ 0x29
 8001df8:	2215      	movs	r2, #21
 8001dfa:	9100      	str	r1, [sp, #0]
 8001dfc:	f004 ff69 	bl	8006cd2 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001e00:	b003      	add	sp, #12
 8001e02:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e06:	bf00      	nop
 8001e08:	24000558 	.word	0x24000558
 8001e0c:	240003e8 	.word	0x240003e8

08001e10 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001e12:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	232a      	movs	r3, #42	@ 0x2a
 8001e18:	2239      	movs	r2, #57	@ 0x39
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2304      	movs	r3, #4
 8001e20:	4803      	ldr	r0, [pc, #12]	@ (8001e30 <LCD_SetUpdateRegionLeft+0x20>)
 8001e22:	f004 ff67 	bl	8006cf4 <HAL_DSI_LongWrite>
    }
 8001e26:	b003      	add	sp, #12
 8001e28:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e2c:	24000008 	.word	0x24000008
 8001e30:	240003e8 	.word	0x240003e8

08001e34 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001e36:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	232a      	movs	r3, #42	@ 0x2a
 8001e3c:	2239      	movs	r2, #57	@ 0x39
 8001e3e:	2100      	movs	r1, #0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2304      	movs	r3, #4
 8001e44:	4803      	ldr	r0, [pc, #12]	@ (8001e54 <LCD_SetUpdateRegionRight+0x20>)
 8001e46:	f004 ff55 	bl	8006cf4 <HAL_DSI_LongWrite>
    }
 8001e4a:	b003      	add	sp, #12
 8001e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e50:	24000004 	.word	0x24000004
 8001e54:	240003e8 	.word	0x240003e8

08001e58 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001e58:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001e5a:	4d14      	ldr	r5, [pc, #80]	@ (8001eac <HAL_DSI_TearingEffectCallback+0x54>)
 8001e5c:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff fd46 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001e64:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001e66:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001e70:	f000 fdc0 	bl	80029f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001e74:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001e76:	682a      	ldr	r2, [r5, #0]
 8001e78:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 8001e80:	b173      	cbz	r3, 8001ea0 <HAL_DSI_TearingEffectCallback+0x48>
 8001e82:	4d0c      	ldr	r5, [pc, #48]	@ (8001eb4 <HAL_DSI_TearingEffectCallback+0x5c>)
 8001e84:	782b      	ldrb	r3, [r5, #0]
 8001e86:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001e8a:	b94b      	cbnz	r3, 8001ea0 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_DSI_TearingEffectCallback+0x60>)
 8001e8e:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001e90:	f7ff ffbe 	bl	8001e10 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001e94:	4620      	mov	r0, r4
 8001e96:	f004 ff0c 	bl	8006cb2 <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001e9e:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ea0:	2000      	movs	r0, #0
    }
 8001ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ea6:	f7ff bd53 	b.w	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001eaa:	bf00      	nop
 8001eac:	24025140 	.word	0x24025140
 8001eb0:	2400000c 	.word	0x2400000c
 8001eb4:	24000574 	.word	0x24000574
 8001eb8:	24000570 	.word	0x24000570

08001ebc <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001ec0:	4e48      	ldr	r6, [pc, #288]	@ (8001fe4 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001ec6:	7833      	ldrb	r3, [r6, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8088 	beq.w	8001fde <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 8001ece:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002008 <HAL_DSI_EndOfRefreshCallback+0x14c>
 8001ed2:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 800200c <HAL_DSI_EndOfRefreshCallback+0x150>
 8001ed6:	f8d9 5000 	ldr.w	r5, [r9]
 8001eda:	4f43      	ldr	r7, [pc, #268]	@ (8001fe8 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 8001edc:	2d00      	cmp	r5, #0
 8001ede:	d13e      	bne.n	8001f5e <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8001ee0:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001ee2:	4e42      	ldr	r6, [pc, #264]	@ (8001fec <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8001ee4:	f004 f9bc 	bl	8006260 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	9500      	str	r5, [sp, #0]
 8001eec:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001ef0:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001ef2:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001ef6:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001efa:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001efe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f02:	f002 0208 	and.w	r2, r2, #8
 8001f06:	9200      	str	r2, [sp, #0]
 8001f08:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001f0a:	f8d8 2000 	ldr.w	r2, [r8]
 8001f0e:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001f12:	4837      	ldr	r0, [pc, #220]	@ (8001ff0 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001f14:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001f16:	4e37      	ldr	r6, [pc, #220]	@ (8001ff4 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8001f18:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8001f1a:	4837      	ldr	r0, [pc, #220]	@ (8001ff8 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f1c:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8001f20:	4836      	ldr	r0, [pc, #216]	@ (8001ffc <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f22:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001f26:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001f28:	f041 0101 	orr.w	r1, r1, #1
 8001f2c:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001f2e:	9501      	str	r5, [sp, #4]
 8001f30:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f34:	f042 0208 	orr.w	r2, r2, #8
 8001f38:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8001f48:	f7ff ff74 	bl	8001e34 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001f4c:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 8001f4e:	4620      	mov	r0, r4
                updateRegion = 1;
 8001f50:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001f54:	b005      	add	sp, #20
 8001f56:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001f5a:	f004 beaa 	b.w	8006cb2 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f5e:	6803      	ldr	r3, [r0, #0]
 8001f60:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f62:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f64:	9502      	str	r5, [sp, #8]
 8001f66:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f6a:	4c25      	ldr	r4, [pc, #148]	@ (8002000 <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f6c:	f022 0208 	bic.w	r2, r2, #8
 8001f70:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f74:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f78:	f002 0208 	and.w	r2, r2, #8
 8001f7c:	9202      	str	r2, [sp, #8]
 8001f7e:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f80:	f8d8 2000 	ldr.w	r2, [r8]
 8001f84:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f88:	4819      	ldr	r0, [pc, #100]	@ (8001ff0 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001f8a:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8001f8c:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8001f90:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001f92:	4819      	ldr	r0, [pc, #100]	@ (8001ff8 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f94:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 8001f98:	4818      	ldr	r0, [pc, #96]	@ (8001ffc <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f9a:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001f9e:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001fa0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001fa2:	f041 0101 	orr.w	r1, r1, #1
 8001fa6:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001fa8:	9503      	str	r5, [sp, #12]
 8001faa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fae:	f042 0208 	orr.w	r2, r2, #8
 8001fb2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001fb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	9303      	str	r3, [sp, #12]
 8001fc0:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001fc2:	f7ff fcc5 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001fc6:	f7ff ff0f 	bl	8001de8 <LCD_ReqEnable>
        return instance;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 8001fcc:	7035      	strb	r5, [r6, #0]
 8001fce:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001fd0:	b128      	cbz	r0, 8001fde <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 8001fd2:	6803      	ldr	r3, [r0, #0]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
    }
 8001fd6:	b005      	add	sp, #20
 8001fd8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fdc:	4718      	bx	r3
 8001fde:	b005      	add	sp, #20
 8001fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fe4:	24000574 	.word	0x24000574
 8001fe8:	2400056c 	.word	0x2400056c
 8001fec:	01b201e2 	.word	0x01b201e2
 8001ff0:	50001000 	.word	0x50001000
 8001ff4:	019201e3 	.word	0x019201e3
 8001ff8:	01920003 	.word	0x01920003
 8001ffc:	09c004b3 	.word	0x09c004b3
 8002000:	019201e2 	.word	0x019201e2
 8002004:	24025140 	.word	0x24025140
 8002008:	24000570 	.word	0x24000570
 800200c:	24000210 	.word	0x24000210

08002010 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002010:	4601      	mov	r1, r0
 8002012:	b508      	push	{r3, lr}
        return instance;
 8002014:	4b03      	ldr	r3, [pc, #12]	@ (8002024 <IdleTaskHook+0x14>)
 8002016:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002018:	b101      	cbz	r1, 800201c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800201a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 800201c:	f00c fabc 	bl	800e598 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002020:	2001      	movs	r0, #1
 8002022:	bd08      	pop	{r3, pc}
 8002024:	24025140 	.word	0x24025140

08002028 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800202a:	2200      	movs	r2, #0
 800202c:	605a      	str	r2, [r3, #4]
          cc_in(0)
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	4a02      	ldr	r2, [pc, #8]	@ (800203c <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002032:	601a      	str	r2, [r3, #0]

}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	2400055c 	.word	0x2400055c
 800203c:	08021414 	.word	0x08021414

08002040 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002040:	6940      	ldr	r0, [r0, #20]
 8002042:	4770      	bx	lr

08002044 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8002044:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002048:	4770      	bx	lr

0800204a <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800204a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800204c:	b923      	cbnz	r3, 8002058 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 800204e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002050:	3800      	subs	r0, #0
 8002052:	bf18      	it	ne
 8002054:	2001      	movne	r0, #1
 8002056:	4770      	bx	lr
 8002058:	2001      	movs	r0, #1
}
 800205a:	4770      	bx	lr

0800205c <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 800205c:	6880      	ldr	r0, [r0, #8]
 800205e:	4770      	bx	lr

08002060 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002060:	4770      	bx	lr

08002062 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002062:	3004      	adds	r0, #4
{
 8002064:	b510      	push	{r4, lr}
 8002066:	460c      	mov	r4, r1
    *data = videoInfo;
 8002068:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800206a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800206e:	bd10      	pop	{r4, pc}

08002070 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002070:	4770      	bx	lr
	...

08002074 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002074:	b508      	push	{r3, lr}
    assert(0);
 8002076:	4a03      	ldr	r2, [pc, #12]	@ (8002084 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002078:	f240 11c5 	movw	r1, #453	@ 0x1c5
 800207c:	4b02      	ldr	r3, [pc, #8]	@ (8002088 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800207e:	4803      	ldr	r0, [pc, #12]	@ (800208c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002080:	f01e f8d6 	bl	8020230 <__assert_func>
 8002084:	0802172c 	.word	0x0802172c
 8002088:	080233db 	.word	0x080233db
 800208c:	08021787 	.word	0x08021787

08002090 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8002090:	b510      	push	{r4, lr}
 8002092:	4604      	mov	r4, r0
 8002094:	2148      	movs	r1, #72	@ 0x48
 8002096:	f01d fd33 	bl	801fb00 <_ZdlPvj>
 800209a:	4620      	mov	r0, r4
 800209c:	bd10      	pop	{r4, pc}
	...

080020a0 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020a0:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020a4:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 80020a6:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020a8:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020aa:	6003      	str	r3, [r0, #0]
 80020ac:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80020ae:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020b2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80020b6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80020ba:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020be:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80020c2:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 80020c6:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80020ca:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 80020ce:	2001      	movs	r0, #1
 80020d0:	f009 f918 	bl	800b304 <osSemaphoreNew>
 80020d4:	4b02      	ldr	r3, [pc, #8]	@ (80020e0 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 80020d6:	6018      	str	r0, [r3, #0]
}
 80020d8:	4620      	mov	r0, r4
 80020da:	bd10      	pop	{r4, pc}
 80020dc:	080219b4 	.word	0x080219b4
 80020e0:	24000594 	.word	0x24000594

080020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 80020e4:	b410      	push	{r4}
 80020e6:	460c      	mov	r4, r1
 80020e8:	4611      	mov	r1, r2
 80020ea:	461a      	mov	r2, r3
    if (reader != 0)
 80020ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80020ee:	b13b      	cbz	r3, 8002100 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80020f0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80020f2:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80020f4:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 80020f6:	4420      	add	r0, r4
}
 80020f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 80020fc:	f01e bb94 	b.w	8020828 <strncmp>
        src = (const char*)movieData + offset;
 8002100:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002102:	e7f8      	b.n	80020f6 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002104 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002104:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 8002106:	b510      	push	{r4, lr}
    if (reader != 0)
 8002108:	b173      	cbz	r3, 8002128 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800210a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800210c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 800210e:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002110:	1853      	adds	r3, r2, r1
 8002112:	5c52      	ldrb	r2, [r2, r1]
 8002114:	7898      	ldrb	r0, [r3, #2]
 8002116:	785c      	ldrb	r4, [r3, #1]
 8002118:	0400      	lsls	r0, r0, #16
 800211a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 800211e:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002120:	78db      	ldrb	r3, [r3, #3]
 8002122:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002126:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 8002128:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800212a:	1853      	adds	r3, r2, r1
        val |= d[0];
 800212c:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 800212e:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002130:	7898      	ldrb	r0, [r3, #2]
 8002132:	0400      	lsls	r0, r0, #16
 8002134:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8002138:	e7f1      	b.n	800211e <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800213a <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800213a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800213c:	b143      	cbz	r3, 8002150 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800213e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002140:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002142:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002144:	185a      	adds	r2, r3, r1
 8002146:	5c58      	ldrb	r0, [r3, r1]
 8002148:	7852      	ldrb	r2, [r2, #1]
 800214a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800214e:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8002150:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002152:	185a      	adds	r2, r3, r1
        val |= d[0];
 8002154:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 8002156:	7853      	ldrb	r3, [r2, #1]
 8002158:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 800215c:	4770      	bx	lr
	...

08002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	4604      	mov	r4, r0
    if (reader != 0)
 8002164:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 8002166:	460d      	mov	r5, r1
 8002168:	4616      	mov	r6, r2
    if (reader != 0)
 800216a:	b1d8      	cbz	r0, 80021a4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 800216c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800216e:	4293      	cmp	r3, r2
 8002170:	d208      	bcs.n	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002172:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002174:	4a0d      	ldr	r2, [pc, #52]	@ (80021ac <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 8002176:	219f      	movs	r1, #159	@ 0x9f
 8002178:	480d      	ldr	r0, [pc, #52]	@ (80021b0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800217a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 800217e:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8002180:	f01e f856 	bl	8020230 <__assert_func>
        reader->seek(offset);
 8002184:	6803      	ldr	r3, [r0, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800218a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800218c:	4632      	mov	r2, r6
 800218e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002190:	6803      	ldr	r3, [r0, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4798      	blx	r3
 8002196:	b910      	cbnz	r0, 800219e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002198:	230d      	movs	r3, #13
 800219a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 800219e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 80021a0:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80021a4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80021a6:	4408      	add	r0, r1
 80021a8:	e7fb      	b.n	80021a2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80021aa:	bf00      	nop
 80021ac:	080217ed 	.word	0x080217ed
 80021b0:	08021787 	.word	0x08021787
 80021b4:	080217da 	.word	0x080217da

080021b8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80021b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021bc:	6943      	ldr	r3, [r0, #20]
{
 80021be:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021c0:	b92b      	cbnz	r3, 80021ce <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80021c2:	4b22      	ldr	r3, [pc, #136]	@ (800224c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80021c4:	21e5      	movs	r1, #229	@ 0xe5
 80021c6:	4a22      	ldr	r2, [pc, #136]	@ (8002250 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80021c8:	4822      	ldr	r0, [pc, #136]	@ (8002254 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80021ca:	f01e f831 	bl	8020230 <__assert_func>
    readData(currentMovieOffset, 8);
 80021ce:	2208      	movs	r2, #8
 80021d0:	6981      	ldr	r1, [r0, #24]
 80021d2:	f7ff ffc5 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80021d6:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80021d8:	f243 0630 	movw	r6, #12336	@ 0x3030
 80021dc:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80021e0:	3104      	adds	r1, #4
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7ff ff8e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80021e8:	69a3      	ldr	r3, [r4, #24]
 80021ea:	4418      	add	r0, r3
 80021ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80021ee:	f100 0208 	add.w	r2, r0, #8
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d306      	bcc.n	8002204 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 80021f6:	2301      	movs	r3, #1
    return false;
 80021f8:	2000      	movs	r0, #0
    frameNumber = 1;
 80021fa:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 80021fc:	6a23      	ldr	r3, [r4, #32]
 80021fe:	61a3      	str	r3, [r4, #24]
}
 8002200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002204:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002206:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800220a:	2208      	movs	r2, #8
 800220c:	4620      	mov	r0, r4
        frameNumber++;
 800220e:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002210:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002214:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002216:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8002218:	f7ff ffa2 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 800221c:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002220:	4620      	mov	r0, r4
 8002222:	4649      	mov	r1, r9
 8002224:	f7ff ff89 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002228:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 800222c:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800222e:	4620      	mov	r0, r4
 8002230:	f7ff ff83 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002234:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002238:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff ff62 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002240:	45b0      	cmp	r8, r6
 8002242:	d1d1      	bne.n	80021e8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002244:	42bd      	cmp	r5, r7
 8002246:	d1cf      	bne.n	80021e8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 8002248:	2001      	movs	r0, #1
 800224a:	e7d9      	b.n	8002200 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 800224c:	0802182f 	.word	0x0802182f
 8002250:	08021878 	.word	0x08021878
 8002254:	08021787 	.word	0x08021787

08002258 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002258:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800225a:	6803      	ldr	r3, [r0, #0]
 800225c:	bf38      	it	cc
 800225e:	2101      	movcc	r1, #1
 8002260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8002262:	b570      	push	{r4, r5, r6, lr}
 8002264:	460d      	mov	r5, r1
 8002266:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002268:	4798      	blx	r3
 800226a:	42a8      	cmp	r0, r5
 800226c:	d204      	bcs.n	8002278 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	4620      	mov	r0, r4
 8002272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002274:	4798      	blx	r3
 8002276:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002278:	1e6b      	subs	r3, r5, #1
 800227a:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 800227c:	2210      	movs	r2, #16
 800227e:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002280:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8002284:	f106 0108 	add.w	r1, r6, #8
 8002288:	f7ff ff6a 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 800228c:	f106 0110 	add.w	r1, r6, #16
 8002290:	4620      	mov	r0, r4
 8002292:	f7ff ff37 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002296:	6a23      	ldr	r3, [r4, #32]
 8002298:	3b04      	subs	r3, #4
 800229a:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 800229c:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80022a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80022a4:	2100      	movs	r1, #0
    readData(0, 72);
 80022a6:	2248      	movs	r2, #72	@ 0x48
{
 80022a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ac:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80022ae:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80022b0:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 80022b4:	f7ff ff54 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80022b8:	69a6      	ldr	r6, [r4, #24]
 80022ba:	2304      	movs	r3, #4
 80022bc:	4a63      	ldr	r2, [pc, #396]	@ (800244c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80022be:	4631      	mov	r1, r6
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7ff ff0f 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022c6:	b148      	cbz	r0, 80022dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80022c8:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80022ca:	4a61      	ldr	r2, [pc, #388]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022cc:	f240 112d 	movw	r1, #301	@ 0x12d
        lastError = AVI_ERROR_NOT_RIFF;
 80022d0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 80022d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002454 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80022d6:	4860      	ldr	r0, [pc, #384]	@ (8002458 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 80022d8:	f01d ffaa 	bl	8020230 <__assert_func>
    currentMovieOffset += 8;
 80022dc:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80022e0:	2304      	movs	r3, #4
 80022e2:	4a5e      	ldr	r2, [pc, #376]	@ (800245c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80022e4:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80022e6:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80022e8:	f7ff fefc 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022ec:	b138      	cbz	r0, 80022fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80022ee:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80022f0:	4a57      	ldr	r2, [pc, #348]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022f2:	f240 1135 	movw	r1, #309	@ 0x135
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80022f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 80022fa:	4b59      	ldr	r3, [pc, #356]	@ (8002460 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80022fc:	e7eb      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 80022fe:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002302:	2304      	movs	r3, #4
 8002304:	4a57      	ldr	r2, [pc, #348]	@ (8002464 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002306:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002308:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800230a:	f7ff feeb 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800230e:	4607      	mov	r7, r0
 8002310:	b138      	cbz	r0, 8002322 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002312:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002314:	4a4e      	ldr	r2, [pc, #312]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002316:	f44f 719e 	mov.w	r1, #316	@ 0x13c
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800231a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 800231e:	4b52      	ldr	r3, [pc, #328]	@ (8002468 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002320:	e7d9      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002322:	f106 0110 	add.w	r1, r6, #16
 8002326:	4620      	mov	r0, r4
 8002328:	f7ff feec 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 800232c:	4605      	mov	r5, r0
 800232e:	b920      	cbnz	r0, 800233a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002330:	4b4e      	ldr	r3, [pc, #312]	@ (800246c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002332:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8002336:	4a46      	ldr	r2, [pc, #280]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002338:	e7cd      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800233a:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 800233e:	2304      	movs	r3, #4
 8002340:	4a4b      	ldr	r2, [pc, #300]	@ (8002470 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002342:	4620      	mov	r0, r4
 8002344:	4641      	mov	r1, r8
 8002346:	f7ff fecd 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800234a:	2800      	cmp	r0, #0
 800234c:	d049      	beq.n	80023e2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 800234e:	2306      	movs	r3, #6
 8002350:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 8002354:	2304      	movs	r3, #4
 8002356:	4a47      	ldr	r2, [pc, #284]	@ (8002474 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8002358:	f106 0118 	add.w	r1, r6, #24
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff fec1 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002362:	2800      	cmp	r0, #0
 8002364:	d03f      	beq.n	80023e6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8002366:	2307      	movs	r3, #7
 8002368:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 800236c:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800236e:	4f42      	ldr	r7, [pc, #264]	@ (8002478 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002370:	220c      	movs	r2, #12
 8002372:	4620      	mov	r0, r4
 8002374:	4629      	mov	r1, r5
 8002376:	f7ff fef3 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800237a:	f105 0608 	add.w	r6, r5, #8
 800237e:	2304      	movs	r3, #4
 8002380:	463a      	mov	r2, r7
 8002382:	4620      	mov	r0, r4
 8002384:	4631      	mov	r1, r6
 8002386:	f7ff fead 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800238a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800238e:	2800      	cmp	r0, #0
 8002390:	d048      	beq.n	8002424 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002392:	2b00      	cmp	r3, #0
 8002394:	d148      	bne.n	8002428 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8002396:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002398:	42ab      	cmp	r3, r5
 800239a:	d849      	bhi.n	8002430 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 800239c:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023a0:	3504      	adds	r5, #4
 80023a2:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80023a4:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7ff feac 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023ac:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023ae:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023b0:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7ff fea6 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80023b8:	4406      	add	r6, r0
    readData(listOffset, 4);
 80023ba:	2204      	movs	r2, #4
 80023bc:	4620      	mov	r0, r4
 80023be:	4631      	mov	r1, r6
 80023c0:	f7ff fece 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80023c4:	2304      	movs	r3, #4
 80023c6:	4a2d      	ldr	r2, [pc, #180]	@ (800247c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80023c8:	4631      	mov	r1, r6
 80023ca:	4620      	mov	r0, r4
 80023cc:	f7ff fe8a 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d138      	bne.n	8002446 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 80023d4:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80023d6:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 80023d8:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80023da:	69a3      	ldr	r3, [r4, #24]
 80023dc:	6223      	str	r3, [r4, #32]
}
 80023de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80023e2:	2701      	movs	r7, #1
 80023e4:	e7b6      	b.n	8002354 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 80023e6:	2f00      	cmp	r7, #0
 80023e8:	d0c0      	beq.n	800236c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80023ea:	f106 0120 	add.w	r1, r6, #32
 80023ee:	4620      	mov	r0, r4
 80023f0:	f7ff fe88 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 80023f8:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80023fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002400:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002402:	4620      	mov	r0, r4
 8002404:	f7ff fe7e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002408:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 800240c:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800240e:	4620      	mov	r0, r4
 8002410:	f7ff fe78 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002414:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002418:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff fe72 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002420:	6120      	str	r0, [r4, #16]
 8002422:	e7a3      	b.n	800236c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0b9      	beq.n	800239c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002428:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800242a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 800242e:	e7d6      	b.n	80023de <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002430:	1d29      	adds	r1, r5, #4
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff fe66 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 8002438:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800243a:	220c      	movs	r2, #12
 800243c:	4620      	mov	r0, r4
 800243e:	4629      	mov	r1, r5
 8002440:	f7ff fe8e 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002444:	e799      	b.n	800237a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002446:	230b      	movs	r3, #11
 8002448:	e7ef      	b.n	800242a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 800244a:	bf00      	nop
 800244c:	080218ab 	.word	0x080218ab
 8002450:	080218c9 	.word	0x080218c9
 8002454:	080218b0 	.word	0x080218b0
 8002458:	08021787 	.word	0x08021787
 800245c:	080218f6 	.word	0x080218f6
 8002460:	080218fb 	.word	0x080218fb
 8002464:	08021913 	.word	0x08021913
 8002468:	08021918 	.word	0x08021918
 800246c:	0802192e 	.word	0x0802192e
 8002470:	0802193a 	.word	0x0802193a
 8002474:	0802193f 	.word	0x0802193f
 8002478:	08021944 	.word	0x08021944
 800247c:	08021949 	.word	0x08021949

08002480 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002480:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 8002484:	2200      	movs	r2, #0
 8002486:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 8002488:	f7ff bf0c 	b.w	80022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

0800248c <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 800248c:	b510      	push	{r4, lr}
    movieData = 0;
 800248e:	2300      	movs	r3, #0
{
 8002490:	4604      	mov	r4, r0
 8002492:	4608      	mov	r0, r1
    movieData = 0;
 8002494:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 8002496:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002498:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4798      	blx	r3
 800249e:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80024a0:	4620      	mov	r0, r4
}
 80024a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80024a6:	f7ff befd 	b.w	80022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080024ac <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80024ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 80024ae:	4c14      	ldr	r4, [pc, #80]	@ (8002500 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 80024b0:	4d14      	ldr	r5, [pc, #80]	@ (8002504 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 80024b2:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 80024b4:	2400      	movs	r4, #0
 80024b6:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <JPEG_Decode_DMA+0x5c>)
 80024b8:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80024ba:	4b14      	ldr	r3, [pc, #80]	@ (800250c <JPEG_Decode_DMA+0x60>)
 80024bc:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80024be:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 80024c0:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 80024c2:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80024c4:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <JPEG_Decode_DMA+0x68>)
 80024c6:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80024c8:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <JPEG_Decode_DMA+0x6c>)
 80024ca:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 80024cc:	4b13      	ldr	r3, [pc, #76]	@ (800251c <JPEG_Decode_DMA+0x70>)
 80024ce:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80024d2:	682a      	ldr	r2, [r5, #0]
 80024d4:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80024d8:	701c      	strb	r4, [r3, #0]
 80024da:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 80024dc:	e9c3 4402 	strd	r4, r4, [r3, #8]
 80024e0:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80024e4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80024e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002524 <JPEG_Decode_DMA+0x78>)
 80024ea:	68d2      	ldr	r2, [r2, #12]
 80024ec:	436a      	muls	r2, r5
 80024ee:	9200      	str	r2, [sp, #0]
 80024f0:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f005 fd79 	bl	8007fec <HAL_JPEG_Decode_DMA>

        return 0;
    }
 80024fa:	4620      	mov	r0, r4
 80024fc:	b003      	add	sp, #12
 80024fe:	bd30      	pop	{r4, r5, pc}
 8002500:	24009bc0 	.word	0x24009bc0
 8002504:	24009b9c 	.word	0x24009b9c
 8002508:	24009bac 	.word	0x24009bac
 800250c:	24000590 	.word	0x24000590
 8002510:	24009bbc 	.word	0x24009bbc
 8002514:	24009bb4 	.word	0x24009bb4
 8002518:	24009bb8 	.word	0x24009bb8
 800251c:	24000598 	.word	0x24000598
 8002520:	24000010 	.word	0x24000010
 8002524:	24000578 	.word	0x24000578

08002528 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002528:	684b      	ldr	r3, [r1, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d115      	bne.n	800255a <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 800252e:	68cb      	ldr	r3, [r1, #12]
 8002530:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002532:	bf1e      	ittt	ne
 8002534:	f023 030f 	bicne.w	r3, r3, #15
 8002538:	3310      	addne	r3, #16
 800253a:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 800253c:	688b      	ldr	r3, [r1, #8]
 800253e:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8002540:	bf1e      	ittt	ne
 8002542:	f023 030f 	bicne.w	r3, r3, #15
 8002546:	3310      	addne	r3, #16
 8002548:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800254a:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 800254c:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800254e:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002550:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 8002552:	4353      	muls	r3, r2
 8002554:	4a0e      	ldr	r2, [pc, #56]	@ (8002590 <HAL_JPEG_InfoReadyCallback+0x68>)
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800255a:	2b02      	cmp	r3, #2
 800255c:	d10e      	bne.n	800257c <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 800255e:	68cb      	ldr	r3, [r1, #12]
 8002560:	071a      	lsls	r2, r3, #28
 8002562:	d003      	beq.n	800256c <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002564:	f023 030f 	bic.w	r3, r3, #15
 8002568:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800256a:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 800256c:	688b      	ldr	r3, [r1, #8]
 800256e:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002570:	bf1e      	ittt	ne
 8002572:	f023 0307 	bicne.w	r3, r3, #7
 8002576:	3308      	addne	r3, #8
 8002578:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 800257a:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1fc      	bne.n	800257a <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 8002580:	68cb      	ldr	r3, [r1, #12]
 8002582:	0758      	lsls	r0, r3, #29
 8002584:	d0f2      	beq.n	800256c <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002586:	f023 0307 	bic.w	r3, r3, #7
 800258a:	3308      	adds	r3, #8
 800258c:	e7ed      	b.n	800256a <HAL_JPEG_InfoReadyCallback+0x42>
 800258e:	bf00      	nop
 8002590:	24009ba4 	.word	0x24009ba4

08002594 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8002594:	4a0b      	ldr	r2, [pc, #44]	@ (80025c4 <HAL_JPEG_GetDataCallback+0x30>)
 8002596:	6813      	ldr	r3, [r2, #0]
 8002598:	440b      	add	r3, r1
    {
 800259a:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 800259c:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <HAL_JPEG_GetDataCallback+0x34>)
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d20c      	bcs.n	80025c0 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025a6:	4c09      	ldr	r4, [pc, #36]	@ (80025cc <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80025a8:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025aa:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025ac:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025b0:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025b2:	bf28      	it	cs
 80025b4:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025b8:	6021      	str	r1, [r4, #0]
        }
    }
 80025ba:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025bc:	f005 bd78 	b.w	80080b0 <HAL_JPEG_ConfigInputBuffer>
    }
 80025c0:	bc30      	pop	{r4, r5}
 80025c2:	4770      	bx	lr
 80025c4:	24009bbc 	.word	0x24009bbc
 80025c8:	24009bb8 	.word	0x24009bb8
 80025cc:	24009bb4 	.word	0x24009bb4

080025d0 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025d2:	4c20      	ldr	r4, [pc, #128]	@ (8002654 <HAL_JPEG_DataReadyCallback+0x84>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	4d20      	ldr	r5, [pc, #128]	@ (8002658 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 80025d8:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025da:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80025dc:	4f1f      	ldr	r7, [pc, #124]	@ (800265c <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80025e8:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 80025ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <HAL_JPEG_DataReadyCallback+0x90>)
 80025ec:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 80025ee:	6822      	ldr	r2, [r4, #0]
 80025f0:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 80025f4:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	440a      	add	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d901      	bls.n	800260e <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	5ceb      	ldrb	r3, [r5, r3]
 8002614:	b133      	cbz	r3, 8002624 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002616:	2102      	movs	r1, #2
 8002618:	4630      	mov	r0, r6
 800261a:	f005 fd1b 	bl	8008054 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 800261e:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <HAL_JPEG_DataReadyCallback+0x94>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	4630      	mov	r0, r6
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 800262e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002632:	6869      	ldr	r1, [r5, #4]
 8002634:	435a      	muls	r2, r3
 8002636:	f005 fd3e 	bl	80080b6 <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 800263a:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <HAL_JPEG_DataReadyCallback+0x98>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	7a1a      	ldrb	r2, [r3, #8]
 8002640:	b93a      	cbnz	r2, 8002652 <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002642:	7a9b      	ldrb	r3, [r3, #10]
 8002644:	b92b      	cbnz	r3, 8002652 <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_JPEG_DataReadyCallback+0x9c>)
 8002648:	6818      	ldr	r0, [r3, #0]
        }
    }
 800264a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 800264e:	f008 becf 	b.w	800b3f0 <osSemaphoreRelease>
    }
 8002652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002654:	24009b9c 	.word	0x24009b9c
 8002658:	24000010 	.word	0x24000010
 800265c:	24000578 	.word	0x24000578
 8002660:	24000598 	.word	0x24000598
 8002664:	24009bac 	.word	0x24009bac
 8002668:	24009ba0 	.word	0x24009ba0
 800266c:	24000594 	.word	0x24000594

08002670 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002672:	e7fe      	b.n	8002672 <HAL_JPEG_ErrorCallback+0x2>

08002674 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002674:	4b01      	ldr	r3, [pc, #4]	@ (800267c <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    }
 800267a:	4770      	bx	lr
 800267c:	24009bb0 	.word	0x24009bb0

08002680 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002680:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002682:	4d16      	ldr	r5, [pc, #88]	@ (80026dc <JPEG_OutputHandler+0x5c>)
{
 8002684:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002686:	682b      	ldr	r3, [r5, #0]
 8002688:	b113      	cbz	r3, 8002690 <JPEG_OutputHandler+0x10>
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <JPEG_OutputHandler+0x60>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	bb1b      	cbnz	r3, 80026d8 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002690:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <JPEG_OutputHandler+0x64>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	7a03      	ldrb	r3, [r0, #8]
 8002696:	b963      	cbnz	r3, 80026b2 <JPEG_OutputHandler+0x32>
 8002698:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <JPEG_OutputHandler+0x68>)
 800269a:	4a14      	ldr	r2, [pc, #80]	@ (80026ec <JPEG_OutputHandler+0x6c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d105      	bne.n	80026b2 <JPEG_OutputHandler+0x32>
 80026a6:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <JPEG_OutputHandler+0x60>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b913      	cbnz	r3, 80026b2 <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 80026ac:	6803      	ldr	r3, [r0, #0]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 80026b2:	4a0f      	ldr	r2, [pc, #60]	@ (80026f0 <JPEG_OutputHandler+0x70>)
 80026b4:	6813      	ldr	r3, [r2, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10c      	bne.n	80026d4 <JPEG_OutputHandler+0x54>
 80026ba:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <JPEG_OutputHandler+0x74>)
 80026bc:	490b      	ldr	r1, [pc, #44]	@ (80026ec <JPEG_OutputHandler+0x6c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	b933      	cbnz	r3, 80026d4 <JPEG_OutputHandler+0x54>
 80026c6:	682b      	ldr	r3, [r5, #0]
 80026c8:	b923      	cbnz	r3, 80026d4 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026ca:	2102      	movs	r1, #2
 80026cc:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 80026ce:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026d0:	f005 ff1f 	bl	8008512 <HAL_JPEG_Resume>
        return 1;
 80026d4:	2002      	movs	r0, #2
    }

    return 2;
}
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 80026d8:	2001      	movs	r0, #1
 80026da:	e7fc      	b.n	80026d6 <JPEG_OutputHandler+0x56>
 80026dc:	24009bb0 	.word	0x24009bb0
 80026e0:	2400058c 	.word	0x2400058c
 80026e4:	24009ba0 	.word	0x24009ba0
 80026e8:	24000590 	.word	0x24000590
 80026ec:	24000010 	.word	0x24000010
 80026f0:	24009bac 	.word	0x24009bac
 80026f4:	24009b9c 	.word	0x24009b9c

080026f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	4605      	mov	r5, r0
    if (length == 0)
 80026fc:	2a00      	cmp	r2, #0
 80026fe:	d035      	beq.n	800276c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002700:	2b00      	cmp	r3, #0
 8002702:	d033      	beq.n	800276c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002704:	481a      	ldr	r0, [pc, #104]	@ (8002770 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8002706:	2403      	movs	r4, #3
 8002708:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800270a:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 800270c:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 800270e:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002712:	bf18      	it	ne
 8002714:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002718:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800271a:	bf18      	it	ne
 800271c:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800271e:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002720:	0924      	lsrs	r4, r4, #4
 8002722:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002724:	692c      	ldr	r4, [r5, #16]
 8002726:	f014 040f 	ands.w	r4, r4, #15
 800272a:	bf18      	it	ne
 800272c:	f1c4 0410 	rsbne	r4, r4, #16
 8002730:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002732:	4810      	ldr	r0, [pc, #64]	@ (8002774 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002734:	f7ff feba 	bl	80024ac <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002738:	4c0f      	ldr	r4, [pc, #60]	@ (8002778 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 800273a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 800273c:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800273e:	4d0d      	ldr	r5, [pc, #52]	@ (8002774 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8002740:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002742:	4628      	mov	r0, r5
 8002744:	f7ff ff9c 	bl	8002680 <JPEG_OutputHandler>
 8002748:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d105      	bne.n	800275c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8002750:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002752:	f04f 31ff 	mov.w	r1, #4294967295
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	f008 fe1e 	bl	800b398 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d1ef      	bne.n	8002742 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	4a07      	ldr	r2, [pc, #28]	@ (8002784 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002766:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002768:	4a07      	ldr	r2, [pc, #28]	@ (8002788 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bd70      	pop	{r4, r5, r6, pc}
 800276e:	bf00      	nop
 8002770:	24000578 	.word	0x24000578
 8002774:	24000390 	.word	0x24000390
 8002778:	24009ba8 	.word	0x24009ba8
 800277c:	24009ba0 	.word	0x24009ba0
 8002780:	24000594 	.word	0x24000594
 8002784:	24009bb0 	.word	0x24009bb0
 8002788:	2400058c 	.word	0x2400058c

0800278c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 800278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002790:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002792:	6943      	ldr	r3, [r0, #20]
{
 8002794:	b085      	sub	sp, #20
 8002796:	4604      	mov	r4, r0
 8002798:	460f      	mov	r7, r1
 800279a:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800279c:	b92b      	cbnz	r3, 80027aa <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 800279e:	4b29      	ldr	r3, [pc, #164]	@ (8002844 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 80027a0:	21b1      	movs	r1, #177	@ 0xb1
 80027a2:	4a29      	ldr	r2, [pc, #164]	@ (8002848 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80027a4:	4829      	ldr	r0, [pc, #164]	@ (800284c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80027a6:	f01d fd43 	bl	8020230 <__assert_func>
    readData(currentMovieOffset, 8);
 80027aa:	2208      	movs	r2, #8
 80027ac:	6981      	ldr	r1, [r0, #24]
 80027ae:	f7ff fcd7 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027b2:	69a6      	ldr	r6, [r4, #24]
 80027b4:	4620      	mov	r0, r4
 80027b6:	4631      	mov	r1, r6
 80027b8:	f7ff fcbf 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027bc:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027be:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7ff fcba 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027c6:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027c8:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff fc9a 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80027d0:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80027d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027d6:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80027d8:	1842      	adds	r2, r0, r1
 80027da:	429a      	cmp	r2, r3
 80027dc:	d226      	bcs.n	800282c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80027de:	f243 0330 	movw	r3, #12336	@ 0x3030
 80027e2:	459b      	cmp	fp, r3
 80027e4:	d117      	bne.n	8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80027e6:	f246 3364 	movw	r3, #25444	@ 0x6364
 80027ea:	459a      	cmp	sl, r3
 80027ec:	d113      	bne.n	8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80027ee:	b190      	cbz	r0, 8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027f0:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 80027f2:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff fcb3 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80027fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027fc:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80027fe:	462a      	mov	r2, r5
 8002800:	4620      	mov	r0, r4
 8002802:	f8cd 8000 	str.w	r8, [sp]
 8002806:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800280a:	463b      	mov	r3, r7
 800280c:	f7ff ff74 	bl	80026f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002810:	6963      	ldr	r3, [r4, #20]
 8002812:	3301      	adds	r3, #1
 8002814:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002816:	69a3      	ldr	r3, [r4, #24]
 8002818:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 800281a:	b905      	cbnz	r5, 800281e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 800281c:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800281e:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002820:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002822:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002826:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002828:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 800282a:	d109      	bne.n	8002840 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 800282c:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 800282e:	2001      	movs	r0, #1
        frameNumber = 1;
 8002830:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002832:	6a23      	ldr	r3, [r4, #32]
 8002834:	61a3      	str	r3, [r4, #24]
}
 8002836:	f080 0001 	eor.w	r0, r0, #1
 800283a:	b005      	add	sp, #20
 800283c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002840:	2000      	movs	r0, #0
 8002842:	e7f8      	b.n	8002836 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002844:	0802182f 	.word	0x0802182f
 8002848:	0802194e 	.word	0x0802194e
 800284c:	08021787 	.word	0x08021787

08002850 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002854:	6981      	ldr	r1, [r0, #24]
{
 8002856:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002858:	2208      	movs	r2, #8
 800285a:	f7ff fc81 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 800285e:	69a7      	ldr	r7, [r4, #24]
 8002860:	4620      	mov	r0, r4
 8002862:	1d39      	adds	r1, r7, #4
 8002864:	f7ff fc4e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002868:	f107 0108 	add.w	r1, r7, #8
 800286c:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 800286e:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002870:	4620      	mov	r0, r4
 8002872:	f7ff fc75 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002876:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002878:	b16e      	cbz	r6, 8002896 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 800287a:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800287c:	4c07      	ldr	r4, [pc, #28]	@ (800289c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 800287e:	4d08      	ldr	r5, [pc, #32]	@ (80028a0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002880:	4633      	mov	r3, r6
 8002882:	4807      	ldr	r0, [pc, #28]	@ (80028a0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002884:	f7ff fe12 	bl	80024ac <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002888:	4628      	mov	r0, r5
 800288a:	f7ff fef9 	bl	8002680 <JPEG_OutputHandler>
 800288e:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f8      	beq.n	8002888 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002896:	2001      	movs	r0, #1
 8002898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800289a:	bf00      	nop
 800289c:	24009ba8 	.word	0x24009ba8
 80028a0:	24000390 	.word	0x24000390

080028a4 <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <DMA2D_CopyBuffer+0x70>)
 80028a6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 80028aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028ac:	ea4f 130c 	mov.w	r3, ip, lsl #4
 80028b0:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028b2:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028b4:	4e18      	ldr	r6, [pc, #96]	@ (8002918 <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028b6:	4f19      	ldr	r7, [pc, #100]	@ (800291c <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028b8:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 80028bc:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028c0:	434d      	muls	r5, r1
 80028c2:	6911      	ldr	r1, [r2, #16]
 80028c4:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028c8:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028ca:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028cc:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028ce:	683f      	ldr	r7, [r7, #0]
 80028d0:	68d3      	ldr	r3, [r2, #12]
 80028d2:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028d4:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028d6:	45bc      	cmp	ip, r7
 80028d8:	d317      	bcc.n	800290a <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028da:	6892      	ldr	r2, [r2, #8]
 80028dc:	f1c2 0210 	rsb	r2, r2, #16
 80028e0:	430a      	orrs	r2, r1
 80028e2:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002920 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028e6:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028ea:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028ec:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <DMA2D_CopyBuffer+0x74>)
 80028f0:	4421      	add	r1, r4
 80028f2:	4429      	add	r1, r5
 80028f4:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028f6:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 80028f8:	2300      	movs	r3, #0
 80028fa:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 80028fc:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <DMA2D_CopyBuffer+0x80>)
 80028fe:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002900:	6843      	ldr	r3, [r0, #4]
 8002902:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002904:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <DMA2D_CopyBuffer+0x84>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 800290a:	f041 0110 	orr.w	r1, r1, #16
 800290e:	6471      	str	r1, [r6, #68]	@ 0x44
 8002910:	e7e8      	b.n	80028e4 <DMA2D_CopyBuffer+0x40>
 8002912:	bf00      	nop
 8002914:	24000578 	.word	0x24000578
 8002918:	52001000 	.word	0x52001000
 800291c:	24009ba4 	.word	0x24009ba4
 8002920:	24009bc0 	.word	0x24009bc0
 8002924:	ff09000b 	.word	0xff09000b
 8002928:	00010201 	.word	0x00010201

0800292c <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 800292e:	2200      	movs	r2, #0
 8002930:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002932:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002934:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002936:	3101      	adds	r1, #1
 8002938:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800293a:	6819      	ldr	r1, [r3, #0]
 800293c:	2901      	cmp	r1, #1
 800293e:	d900      	bls.n	8002942 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002940:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002942:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <DMA2D_ExternalJobCompleted+0x38>)
 8002944:	4a08      	ldr	r2, [pc, #32]	@ (8002968 <DMA2D_ExternalJobCompleted+0x3c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68d2      	ldr	r2, [r2, #12]
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	68c2      	ldr	r2, [r0, #12]
 800294e:	429a      	cmp	r2, r3
 8002950:	d302      	bcc.n	8002958 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002952:	4b06      	ldr	r3, [pc, #24]	@ (800296c <DMA2D_ExternalJobCompleted+0x40>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <DMA2D_ExternalJobCompleted+0x44>)
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	f008 bd48 	b.w	800b3f0 <osSemaphoreRelease>
 8002960:	24000590 	.word	0x24000590
 8002964:	24009ba4 	.word	0x24009ba4
 8002968:	24000578 	.word	0x24000578
 800296c:	2400058c 	.word	0x2400058c
 8002970:	24000594 	.word	0x24000594

08002974 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002974:	2101      	movs	r1, #1
 8002976:	2200      	movs	r2, #0
{
 8002978:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800297a:	4608      	mov	r0, r1
 800297c:	f008 fcc2 	bl	800b304 <osSemaphoreNew>
 8002980:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002982:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002984:	b928      	cbnz	r0, 8002992 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002986:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002988:	2128      	movs	r1, #40	@ 0x28
 800298a:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800298c:	480a      	ldr	r0, [pc, #40]	@ (80029b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800298e:	f01d fc4f 	bl	8020230 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002992:	2200      	movs	r2, #0
 8002994:	2104      	movs	r1, #4
 8002996:	2001      	movs	r0, #1
 8002998:	f008 fd53 	bl	800b442 <osMessageQueueNew>
 800299c:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800299e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80029a0:	b918      	cbnz	r0, 80029aa <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 80029a2:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80029a4:	212c      	movs	r1, #44	@ 0x2c
 80029a6:	4a03      	ldr	r2, [pc, #12]	@ (80029b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80029a8:	e7f0      	b.n	800298c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 80029aa:	bd08      	pop	{r3, pc}
 80029ac:	24009bc8 	.word	0x24009bc8
 80029b0:	080219f0 	.word	0x080219f0
 80029b4:	08021a39 	.word	0x08021a39
 80029b8:	08021a68 	.word	0x08021a68
 80029bc:	24009bc4 	.word	0x24009bc4
 80029c0:	08021ab1 	.word	0x08021ab1

080029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80029c4:	4b02      	ldr	r3, [pc, #8]	@ (80029d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80029c6:	f04f 31ff 	mov.w	r1, #4294967295
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	f008 bce4 	b.w	800b398 <osSemaphoreAcquire>
 80029d0:	24009bc8 	.word	0x24009bc8

080029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 80029d4:	4b01      	ldr	r3, [pc, #4]	@ (80029dc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	f008 bd0a 	b.w	800b3f0 <osSemaphoreRelease>
 80029dc:	24009bc8 	.word	0x24009bc8

080029e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80029e0:	4b02      	ldr	r3, [pc, #8]	@ (80029ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 80029e2:	2100      	movs	r1, #0
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	f008 bcd7 	b.w	800b398 <osSemaphoreAcquire>
 80029ea:	bf00      	nop
 80029ec:	24009bc8 	.word	0x24009bc8

080029f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 80029f0:	f7ff bff0 	b.w	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080029f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80029f4:	2300      	movs	r3, #0
 80029f6:	4803      	ldr	r0, [pc, #12]	@ (8002a04 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 80029f8:	4903      	ldr	r1, [pc, #12]	@ (8002a08 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80029fa:	461a      	mov	r2, r3
 80029fc:	6800      	ldr	r0, [r0, #0]
 80029fe:	f008 bd5b 	b.w	800b4b8 <osMessageQueuePut>
 8002a02:	bf00      	nop
 8002a04:	24009bc4 	.word	0x24009bc4
 8002a08:	24000030 	.word	0x24000030

08002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002a0c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002a0e:	2300      	movs	r3, #0
 8002a10:	4c07      	ldr	r4, [pc, #28]	@ (8002a30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002a12:	a901      	add	r1, sp, #4
 8002a14:	461a      	mov	r2, r3
 8002a16:	6820      	ldr	r0, [r4, #0]
 8002a18:	f008 fd7f 	bl	800b51a <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a20:	2200      	movs	r2, #0
 8002a22:	a901      	add	r1, sp, #4
 8002a24:	6820      	ldr	r0, [r4, #0]
 8002a26:	f008 fd78 	bl	800b51a <osMessageQueueGet>
}
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd10      	pop	{r4, pc}
 8002a2e:	bf00      	nop
 8002a30:	24009bc4 	.word	0x24009bc4

08002a34 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002a34:	6803      	ldr	r3, [r0, #0]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a38:	4718      	bx	r3

08002a3a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	4770      	bx	lr

08002a3e <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002a3e:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002a42:	4770      	bx	lr

08002a44 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002a44:	b510      	push	{r4, lr}
 8002a46:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4c:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002a50:	f008 fc16 	bl	800b280 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002a54:	6860      	ldr	r0, [r4, #4]
 8002a56:	6803      	ldr	r3, [r0, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4798      	blx	r3
 8002a5c:	b978      	cbnz	r0, 8002a7e <_ZN8STM32DMA5startEv+0x3a>
 8002a5e:	7a63      	ldrb	r3, [r4, #9]
 8002a60:	b16b      	cbz	r3, 8002a7e <_ZN8STM32DMA5startEv+0x3a>
 8002a62:	7a23      	ldrb	r3, [r4, #8]
 8002a64:	b95b      	cbnz	r3, 8002a7e <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002a66:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002a72:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002a7a:	f008 bc24 	b.w	800b2c6 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002a7e:	490b      	ldr	r1, [pc, #44]	@ (8002aac <_ZN8STM32DMA5startEv+0x68>)
 8002a80:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab0 <_ZN8STM32DMA5startEv+0x6c>)
 8002a82:	680b      	ldr	r3, [r1, #0]
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	5cd3      	ldrb	r3, [r2, r3]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d1f2      	bne.n	8002a72 <_ZN8STM32DMA5startEv+0x2e>
 8002a8c:	7a20      	ldrb	r0, [r4, #8]
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d1ef      	bne.n	8002a72 <_ZN8STM32DMA5startEv+0x2e>
 8002a92:	7aa0      	ldrb	r0, [r4, #10]
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d1ec      	bne.n	8002a72 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002a98:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002a9a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002a9e:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002aa2:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002aa4:	f7ff fefe 	bl	80028a4 <DMA2D_CopyBuffer>
    }
 8002aa8:	e7e3      	b.n	8002a72 <_ZN8STM32DMA5startEv+0x2e>
 8002aaa:	bf00      	nop
 8002aac:	24000590 	.word	0x24000590
 8002ab0:	24000010 	.word	0x24000010

08002ab4 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002ab4:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002aba:	6003      	str	r3, [r0, #0]
 8002abc:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <_ZN8STM32DMAD1Ev+0x1c>)
 8002abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002ac2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ac6:	f3bf 8f6f 	isb	sy
}
 8002aca:	4770      	bx	lr
 8002acc:	08021c4c 	.word	0x08021c4c
 8002ad0:	e000e100 	.word	0xe000e100

08002ad4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	4604      	mov	r4, r0
}
 8002ad8:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002adc:	f7ff ffea 	bl	8002ab4 <_ZN8STM32DMAD1Ev>
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	f01d f80d 	bl	801fb00 <_ZdlPvj>
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	bd10      	pop	{r4, pc}
	...

08002aec <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002aec:	4b0f      	ldr	r3, [pc, #60]	@ (8002b2c <_ZN8STM32DMA10initializeEv+0x40>)
{
 8002aee:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002af0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002af4:	f042 0210 	orr.w	r2, r2, #16
 8002af8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002afc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002b00:	f002 0210 	and.w	r2, r2, #16
 8002b04:	9201      	str	r2, [sp, #4]
 8002b06:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002b08:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b0a:	f042 0210 	orr.w	r2, r2, #16
 8002b0e:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002b10:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b12:	f022 0210 	bic.w	r2, r2, #16
 8002b16:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002b18:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <_ZN8STM32DMA10initializeEv+0x44>)
 8002b1a:	4a06      	ldr	r2, [pc, #24]	@ (8002b34 <_ZN8STM32DMA10initializeEv+0x48>)
 8002b1c:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1e:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <_ZN8STM32DMA10initializeEv+0x4c>)
 8002b20:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b24:	609a      	str	r2, [r3, #8]
}
 8002b26:	b002      	add	sp, #8
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	58024400 	.word	0x58024400
 8002b30:	24000404 	.word	0x24000404
 8002b34:	08002d81 	.word	0x08002d81
 8002b38:	e000e100 	.word	0xe000e100

08002b3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002b3c:	b508      	push	{r3, lr}
    switch (format)
 8002b3e:	280a      	cmp	r0, #10
 8002b40:	d809      	bhi.n	8002b56 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002b42:	e8df f000 	tbb	[pc, r0]
 8002b46:	1006      	.short	0x1006
 8002b48:	0808080e 	.word	0x0808080e
 8002b4c:	10101008 	.word	0x10101008
 8002b50:	10          	.byte	0x10
 8002b51:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002b52:	2002      	movs	r0, #2
}
 8002b54:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002b56:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002b58:	2187      	movs	r1, #135	@ 0x87
 8002b5a:	4a05      	ldr	r2, [pc, #20]	@ (8002b70 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002b5c:	4805      	ldr	r0, [pc, #20]	@ (8002b74 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002b5e:	f01d fb67 	bl	8020230 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002b62:	2000      	movs	r0, #0
 8002b64:	e7f6      	b.n	8002b54 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002b66:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002b68:	e7f4      	b.n	8002b54 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002b6a:	bf00      	nop
 8002b6c:	08021af3 	.word	0x08021af3
 8002b70:	08021b0e 	.word	0x08021b0e
 8002b74:	08021b59 	.word	0x08021b59

08002b78 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002b78:	b538      	push	{r3, r4, r5, lr}
 8002b7a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002b7c:	7f88      	ldrb	r0, [r1, #30]
 8002b7e:	f7ff ffdd 	bl	8002b3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b82:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b84:	8aa5      	ldrh	r5, [r4, #20]
 8002b86:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b88:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b8a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b8e:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b92:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b94:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b96:	1b52      	subs	r2, r2, r5
 8002b98:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002b9a:	6825      	ldr	r5, [r4, #0]
 8002b9c:	2d08      	cmp	r5, #8
 8002b9e:	d10e      	bne.n	8002bbe <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ba0:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ba2:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ba4:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002ba8:	7f20      	ldrb	r0, [r4, #28]
 8002baa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002bae:	61da      	str	r2, [r3, #28]
        return color;
 8002bb0:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002bb2:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002bb4:	4a07      	ldr	r2, [pc, #28]	@ (8002bd4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bb6:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bb8:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002bba:	601a      	str	r2, [r3, #0]
    }
}
 8002bbc:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002bbe:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002bc0:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002bc2:	611a      	str	r2, [r3, #16]
 8002bc4:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002bc6:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002bc8:	4a03      	ldr	r2, [pc, #12]	@ (8002bd8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002bca:	e7f6      	b.n	8002bba <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002bcc:	52001000 	.word	0x52001000
 8002bd0:	00010009 	.word	0x00010009
 8002bd4:	00020201 	.word	0x00020201
 8002bd8:	00030201 	.word	0x00030201

08002bdc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002bdc:	b508      	push	{r3, lr}
    switch (format)
 8002bde:	280b      	cmp	r0, #11
 8002be0:	d80b      	bhi.n	8002bfa <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002be2:	e8df f000 	tbb	[pc, r0]
 8002be6:	1206      	.short	0x1206
 8002be8:	0a0a0a10 	.word	0x0a0a0a10
 8002bec:	0808080a 	.word	0x0808080a
 8002bf0:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002bf2:	2002      	movs	r0, #2
}
 8002bf4:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002bf6:	2005      	movs	r0, #5
        break;
 8002bf8:	e7fc      	b.n	8002bf4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002bfa:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002bfc:	2166      	movs	r1, #102	@ 0x66
 8002bfe:	4a05      	ldr	r2, [pc, #20]	@ (8002c14 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002c00:	4805      	ldr	r0, [pc, #20]	@ (8002c18 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002c02:	f01d fb15 	bl	8020230 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002c06:	2000      	movs	r0, #0
 8002c08:	e7f4      	b.n	8002bf4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002c0a:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002c0c:	e7f2      	b.n	8002bf4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002c0e:	bf00      	nop
 8002c10:	08021af3 	.word	0x08021af3
 8002c14:	08021ba0 	.word	0x08021ba0
 8002c18:	08021b59 	.word	0x08021b59

08002c1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c20:	7f4f      	ldrb	r7, [r1, #29]
{
 8002c22:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c24:	4638      	mov	r0, r7
 8002c26:	f7ff ffd9 	bl	8002bdc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c2a:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c2e:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c30:	4628      	mov	r0, r5
 8002c32:	f7ff ffd3 	bl	8002bdc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002c36:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c38:	4628      	mov	r0, r5
 8002c3a:	f7ff ff7f 	bl	8002b3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c3e:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002c42:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c46:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c4a:	4b45      	ldr	r3, [pc, #276]	@ (8002d60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002c4c:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c4e:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c50:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c52:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c54:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c56:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c5a:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c60:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c64:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c66:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c6a:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c6c:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002c6e:	f8d9 4000 	ldr.w	r4, [r9]
 8002c72:	f899 201c 	ldrb.w	r2, [r9, #28]
 8002c76:	2c80      	cmp	r4, #128	@ 0x80
 8002c78:	d022      	beq.n	8002cc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8002c7a:	d80f      	bhi.n	8002c9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002c7c:	2c20      	cmp	r4, #32
 8002c7e:	d066      	beq.n	8002d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002c80:	2c40      	cmp	r4, #64	@ 0x40
 8002c82:	d064      	beq.n	8002d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002c84:	2c04      	cmp	r4, #4
 8002c86:	d05c      	beq.n	8002d42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c88:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8002c8c:	4b34      	ldr	r3, [pc, #208]	@ (8002d60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002c8e:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c90:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002c94:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002c96:	d060      	beq.n	8002d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002c98:	4a32      	ldr	r2, [pc, #200]	@ (8002d64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002c9a:	e03f      	b.n	8002d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002c9c:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002ca0:	d004      	beq.n	8002cac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8002ca2:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8002ca6:	d1ef      	bne.n	8002c88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002ca8:	482f      	ldr	r0, [pc, #188]	@ (8002d68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002caa:	e000      	b.n	8002cae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cac:	482f      	ldr	r0, [pc, #188]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cae:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002cb2:	61da      	str	r2, [r3, #28]
 8002cb4:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002cb8:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cba:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cbc:	6159      	str	r1, [r3, #20]
 8002cbe:	e02c      	b.n	8002d1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cc0:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002cc4:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cc8:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002ccc:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cce:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cd0:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002cd2:	1d21      	adds	r1, r4, #4
 8002cd4:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002cd6:	7821      	ldrb	r1, [r4, #0]
 8002cd8:	b141      	cbz	r1, 8002cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002cda:	2901      	cmp	r1, #1
 8002cdc:	d021      	beq.n	8002d22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002cde:	4b24      	ldr	r3, [pc, #144]	@ (8002d70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8002ce0:	f240 1101 	movw	r1, #257	@ 0x101
 8002ce4:	4a23      	ldr	r2, [pc, #140]	@ (8002d74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002ce6:	4824      	ldr	r0, [pc, #144]	@ (8002d78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8002ce8:	f01d faa2 	bl	8020230 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002cec:	69da      	ldr	r2, [r3, #28]
 8002cee:	8861      	ldrh	r1, [r4, #2]
 8002cf0:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002cf4:	3901      	subs	r1, #1
 8002cf6:	f022 0210 	bic.w	r2, r2, #16
 8002cfa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002cfe:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8002d00:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002d02:	4b17      	ldr	r3, [pc, #92]	@ (8002d60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d04:	69d9      	ldr	r1, [r3, #28]
 8002d06:	f041 0120 	orr.w	r1, r1, #32
 8002d0a:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002d0c:	69d9      	ldr	r1, [r3, #28]
 8002d0e:	0689      	lsls	r1, r1, #26
 8002d10:	d4fc      	bmi.n	8002d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002d12:	2110      	movs	r1, #16
 8002d14:	6099      	str	r1, [r3, #8]
            if (blend)
 8002d16:	2a00      	cmp	r2, #0
 8002d18:	d0be      	beq.n	8002c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002d1a:	4a18      	ldr	r2, [pc, #96]	@ (8002d7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002d1c:	601a      	str	r2, [r3, #0]
}
 8002d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d22:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8002d24:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d26:	8860      	ldrh	r0, [r4, #2]
 8002d28:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8002d2c:	bf18      	it	ne
 8002d2e:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d30:	3801      	subs	r0, #1
 8002d32:	f021 0110 	bic.w	r1, r1, #16
 8002d36:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002d3a:	f041 0110 	orr.w	r1, r1, #16
 8002d3e:	61d9      	str	r1, [r3, #28]
                break;
 8002d40:	e7df      	b.n	8002d02 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d42:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d46:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d4a:	61da      	str	r2, [r3, #28]
 8002d4c:	e7b5      	b.n	8002cba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8002d4e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d52:	4b03      	ldr	r3, [pc, #12]	@ (8002d60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d54:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002d58:	e7f7      	b.n	8002d4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002d5a:	f240 2201 	movw	r2, #513	@ 0x201
 8002d5e:	e7dd      	b.n	8002d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002d60:	52001000 	.word	0x52001000
 8002d64:	00010201 	.word	0x00010201
 8002d68:	00020009 	.word	0x00020009
 8002d6c:	0002000a 	.word	0x0002000a
 8002d70:	08021bea 	.word	0x08021bea
 8002d74:	08021c04 	.word	0x08021c04
 8002d78:	08021b59 	.word	0x08021b59
 8002d7c:	00020201 	.word	0x00020201

08002d80 <DMA2D_XferCpltCallback>:
 8002d80:	4b02      	ldr	r3, [pc, #8]	@ (8002d8c <DMA2D_XferCpltCallback+0xc>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002d86:	6803      	ldr	r3, [r0, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4718      	bx	r3
 8002d8c:	24025140 	.word	0x24025140

08002d90 <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8002d90:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8002d94:	b510      	push	{r4, lr}
 8002d96:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8002d98:	b9d3      	cbnz	r3, 8002dd0 <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8002d9a:	6803      	ldr	r3, [r0, #0]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9e:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8002da0:	4919      	ldr	r1, [pc, #100]	@ (8002e08 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002da2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e0c <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002da4:	680b      	ldr	r3, [r1, #0]
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	5cd3      	ldrb	r3, [r2, r3]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d12a      	bne.n	8002e04 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dae:	4818      	ldr	r0, [pc, #96]	@ (8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8002db0:	6800      	ldr	r0, [r0, #0]
 8002db2:	bb38      	cbnz	r0, 8002e04 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002db4:	7a20      	ldrb	r0, [r4, #8]
 8002db6:	bb28      	cbnz	r0, 8002e04 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002db8:	7aa0      	ldrb	r0, [r4, #10]
 8002dba:	bb18      	cbnz	r0, 8002e04 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dbc:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 8002dbe:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8002dc2:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dc4:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8002dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dcc:	f7ff bd6a 	b.w	80028a4 <DMA2D_CopyBuffer>
        if (isRunning)
 8002dd0:	7a03      	ldrb	r3, [r0, #8]
 8002dd2:	b143      	cbz	r3, 8002de6 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002dde:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002de2:	f7ff fda3 	bl	800292c <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8002de6:	6860      	ldr	r0, [r4, #4]
 8002de8:	6803      	ldr	r3, [r0, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4798      	blx	r3
 8002dee:	b948      	cbnz	r0, 8002e04 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002df0:	7a63      	ldrb	r3, [r4, #9]
 8002df2:	b13b      	cbz	r3, 8002e04 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8002df4:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8002df6:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8002dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8002e02:	4718      	bx	r3
    }
 8002e04:	bd10      	pop	{r4, pc}
 8002e06:	bf00      	nop
 8002e08:	24000590 	.word	0x24000590
 8002e0c:	24000010 	.word	0x24000010
 8002e10:	2400058c 	.word	0x2400058c

08002e14 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e18:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <_ZN8STM32DMAC1Ev+0x40>)
 8002e1a:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002e1c:	2600      	movs	r6, #0
 8002e1e:	4625      	mov	r5, r4
 8002e20:	2260      	movs	r2, #96	@ 0x60
 8002e22:	6060      	str	r0, [r4, #4]
 8002e24:	7226      	strb	r6, [r4, #8]
 8002e26:	7266      	strb	r6, [r4, #9]
 8002e28:	f845 3b20 	str.w	r3, [r5], #32
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	f00b fcf7 	bl	800e820 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002e32:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8002e36:	60ee      	str	r6, [r5, #12]
 8002e38:	3524      	adds	r5, #36	@ 0x24
 8002e3a:	429d      	cmp	r5, r3
 8002e3c:	d1fb      	bne.n	8002e36 <_ZN8STM32DMAC1Ev+0x22>
 8002e3e:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 8002e42:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e44:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8002e48:	f008 f9e5 	bl	800b216 <osMutexNew>
 8002e4c:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 8002e50:	4620      	mov	r0, r4
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	08021c4c 	.word	0x08021c4c

08002e58 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002e58:	4b03      	ldr	r3, [pc, #12]	@ (8002e68 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	07d2      	lsls	r2, r2, #31
 8002e5e:	d4fc      	bmi.n	8002e5a <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e60:	2223      	movs	r2, #35	@ 0x23
 8002e62:	609a      	str	r2, [r3, #8]
}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	52001000 	.word	0x52001000

08002e6c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002e6c:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002e6e:	4c10      	ldr	r4, [pc, #64]	@ (8002eb0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002e70:	6825      	ldr	r5, [r4, #0]
 8002e72:	07ed      	lsls	r5, r5, #31
 8002e74:	d4fc      	bmi.n	8002e70 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e76:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002e78:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8002e7a:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e7c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002e7e:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002e82:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002e86:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002e88:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002e8a:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8002e8c:	d00c      	beq.n	8002ea8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002e8e:	4909      	ldr	r1, [pc, #36]	@ (8002eb4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002e90:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e94:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002e96:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002e9a:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002e9c:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002e9e:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002ea0:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002ea2:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002ea4:	6023      	str	r3, [r4, #0]
    }
}
 8002ea6:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002ea8:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002eaa:	4b04      	ldr	r3, [pc, #16]	@ (8002ebc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002eac:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002eae:	e7f9      	b.n	8002ea4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002eb0:	52001000 	.word	0x52001000
 8002eb4:	00010009 	.word	0x00010009
 8002eb8:	00020001 	.word	0x00020001
 8002ebc:	00030001 	.word	0x00030001

08002ec0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	4770      	bx	lr

08002ec4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002ec4:	200c      	movs	r0, #12
 8002ec6:	4770      	bx	lr

08002ec8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002ec8:	230c      	movs	r3, #12
 8002eca:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002ece:	3008      	adds	r0, #8
 8002ed0:	4770      	bx	lr

08002ed2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002ed2:	230c      	movs	r3, #12
 8002ed4:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002ed8:	3008      	adds	r0, #8
 8002eda:	4770      	bx	lr

08002edc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002edc:	2001      	movs	r0, #1
 8002ede:	4770      	bx	lr

08002ee0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002ee0:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8002ee4:	4770      	bx	lr

08002ee6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002ee6:	f44f 7344 	mov.w	r3, #784	@ 0x310
 8002eea:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002eee:	3008      	adds	r0, #8
 8002ef0:	4770      	bx	lr

08002ef2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002ef2:	f44f 7344 	mov.w	r3, #784	@ 0x310
 8002ef6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002efa:	3008      	adds	r0, #8
 8002efc:	4770      	bx	lr

08002efe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002efe:	2001      	movs	r0, #1
 8002f00:	4770      	bx	lr

08002f02 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002f02:	2010      	movs	r0, #16
 8002f04:	4770      	bx	lr

08002f06 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002f06:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002f0a:	3008      	adds	r0, #8
 8002f0c:	4770      	bx	lr

08002f0e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002f0e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002f12:	3008      	adds	r0, #8
 8002f14:	4770      	bx	lr

08002f16 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002f16:	4608      	mov	r0, r1
 8002f18:	f000 be40 	b.w	8003b9c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002f1c:	4b03      	ldr	r3, [pc, #12]	@ (8002f2c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002f1e:	b510      	push	{r4, lr}
 8002f20:	4604      	mov	r4, r0
 8002f22:	6003      	str	r3, [r0, #0]
 8002f24:	f00a fad3 	bl	800d4ce <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002f28:	4620      	mov	r0, r4
 8002f2a:	bd10      	pop	{r4, pc}
 8002f2c:	08021d04 	.word	0x08021d04

08002f30 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002f30:	b510      	push	{r4, lr}
 8002f32:	4604      	mov	r4, r0
 8002f34:	f7ff fff2 	bl	8002f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002f38:	2114      	movs	r1, #20
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f01c fde0 	bl	801fb00 <_ZdlPvj>
 8002f40:	4620      	mov	r0, r4
 8002f42:	bd10      	pop	{r4, pc}

08002f44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002f44:	4b03      	ldr	r3, [pc, #12]	@ (8002f54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002f46:	b510      	push	{r4, lr}
 8002f48:	4604      	mov	r4, r0
 8002f4a:	6003      	str	r3, [r0, #0]
 8002f4c:	f00a fabf 	bl	800d4ce <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002f50:	4620      	mov	r0, r4
 8002f52:	bd10      	pop	{r4, pc}
 8002f54:	08021cd0 	.word	0x08021cd0

08002f58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002f58:	b510      	push	{r4, lr}
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	f7ff fff2 	bl	8002f44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002f60:	f44f 7146 	mov.w	r1, #792	@ 0x318
 8002f64:	4620      	mov	r0, r4
 8002f66:	f01c fdcb 	bl	801fb00 <_ZdlPvj>
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	bd10      	pop	{r4, pc}
	...

08002f70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002f70:	4b03      	ldr	r3, [pc, #12]	@ (8002f80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002f72:	b510      	push	{r4, lr}
 8002f74:	4604      	mov	r4, r0
 8002f76:	6003      	str	r3, [r0, #0]
 8002f78:	f00a faa9 	bl	800d4ce <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	bd10      	pop	{r4, pc}
 8002f80:	08021c9c 	.word	0x08021c9c

08002f84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002f84:	b510      	push	{r4, lr}
 8002f86:	4604      	mov	r4, r0
 8002f88:	f7ff fff2 	bl	8002f70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002f8c:	2118      	movs	r1, #24
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f01c fdb6 	bl	801fb00 <_ZdlPvj>
 8002f94:	4620      	mov	r0, r4
 8002f96:	bd10      	pop	{r4, pc}

08002f98 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002f98:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <_ZN12FrontendHeapD1Ev+0x24>)
 8002f9a:	b510      	push	{r4, lr}
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	6003      	str	r3, [r0, #0]
 8002fa0:	f500 7051 	add.w	r0, r0, #836	@ 0x344
 8002fa4:	f7ff ffba 	bl	8002f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fa8:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8002fac:	f7ff ffca 	bl	8002f44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fb0:	f104 0014 	add.w	r0, r4, #20
 8002fb4:	f7ff ffdc 	bl	8002f70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fb8:	4620      	mov	r0, r4
 8002fba:	bd10      	pop	{r4, pc}
 8002fbc:	08021d38 	.word	0x08021d38

08002fc0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002fc0:	b508      	push	{r3, lr}
 8002fc2:	4802      	ldr	r0, [pc, #8]	@ (8002fcc <__tcf_0+0xc>)
 8002fc4:	f7ff ffe8 	bl	8002f98 <_ZN12FrontendHeapD1Ev>
 8002fc8:	bd08      	pop	{r3, pc}
 8002fca:	bf00      	nop
 8002fcc:	2400aa80 	.word	0x2400aa80

08002fd0 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	f7ff ffe0 	bl	8002f98 <_ZN12FrontendHeapD1Ev>
 8002fd8:	f44f 6197 	mov.w	r1, #1208	@ 0x4b8
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f01c fd8f 	bl	801fb00 <_ZdlPvj>
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	bd10      	pop	{r4, pc}
	...

08002fe8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8002fe8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002fec:	f000 fc50 	bl	8003890 <_ZN14BitmapDatabase11getInstanceEv>
 8002ff0:	2400      	movs	r4, #0
 8002ff2:	4605      	mov	r5, r0
 8002ff4:	f000 fc50 	bl	8003898 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002ff8:	4623      	mov	r3, r4
 8002ffa:	4601      	mov	r1, r0
 8002ffc:	4622      	mov	r2, r4
 8002ffe:	4628      	mov	r0, r5
 8003000:	9400      	str	r4, [sp, #0]
 8003002:	f012 fd7b 	bl	8015afc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8003006:	4b27      	ldr	r3, [pc, #156]	@ (80030a4 <touchgfx_init+0xbc>)
 8003008:	4a27      	ldr	r2, [pc, #156]	@ (80030a8 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 800300a:	4620      	mov	r0, r4
        static FrontendHeap instance;
 800300c:	4d27      	ldr	r5, [pc, #156]	@ (80030ac <touchgfx_init+0xc4>)
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	f000 ffd0 	bl	8003fb4 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 8003014:	4b26      	ldr	r3, [pc, #152]	@ (80030b0 <touchgfx_init+0xc8>)
 8003016:	4a27      	ldr	r2, [pc, #156]	@ (80030b4 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8003018:	4827      	ldr	r0, [pc, #156]	@ (80030b8 <touchgfx_init+0xd0>)
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	f012 fc1a 	bl	8015854 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	f3bf 8f5b 	dmb	ish
 8003026:	07db      	lsls	r3, r3, #31
 8003028:	d435      	bmi.n	8003096 <touchgfx_init+0xae>
 800302a:	4628      	mov	r0, r5
 800302c:	f01c fd6a 	bl	801fb04 <__cxa_guard_acquire>
 8003030:	b388      	cbz	r0, 8003096 <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8003032:	4c22      	ldr	r4, [pc, #136]	@ (80030bc <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8003034:	4b22      	ldr	r3, [pc, #136]	@ (80030c0 <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8003036:	f504 7657 	add.w	r6, r4, #860	@ 0x35c
        : presenterStorage(pres),
 800303a:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 800303e:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8003042:	f504 7751 	add.w	r7, r4, #836	@ 0x344
 8003046:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8003048:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800304a:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 800304e:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003050:	6126      	str	r6, [r4, #16]
 8003052:	f00a fa3d 	bl	800d4d0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003056:	4b1b      	ldr	r3, [pc, #108]	@ (80030c4 <touchgfx_init+0xdc>)
 8003058:	4640      	mov	r0, r8
 800305a:	6163      	str	r3, [r4, #20]
 800305c:	f00a fa38 	bl	800d4d0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003060:	4b19      	ldr	r3, [pc, #100]	@ (80030c8 <touchgfx_init+0xe0>)
 8003062:	4638      	mov	r0, r7
 8003064:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003066:	f00a fa33 	bl	800d4d0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800306a:	4b18      	ldr	r3, [pc, #96]	@ (80030cc <touchgfx_init+0xe4>)
 800306c:	f504 7056 	add.w	r0, r4, #856	@ 0x358
 8003070:	f8c4 3344 	str.w	r3, [r4, #836]	@ 0x344
 8003074:	f001 f822 	bl	80040bc <_ZN5ModelC1Ev>
 8003078:	4622      	mov	r2, r4
 800307a:	f504 7156 	add.w	r1, r4, #856	@ 0x358
 800307e:	4630      	mov	r0, r6
 8003080:	f001 f812 	bl	80040a8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8003084:	4630      	mov	r0, r6
 8003086:	f000 fd89 	bl	8003b9c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800308a:	4811      	ldr	r0, [pc, #68]	@ (80030d0 <touchgfx_init+0xe8>)
 800308c:	f01d f8ee 	bl	802026c <atexit>
 8003090:	4628      	mov	r0, r5
 8003092:	f01c fd43 	bl	801fb1c <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003096:	480f      	ldr	r0, [pc, #60]	@ (80030d4 <touchgfx_init+0xec>)
}
 8003098:	b002      	add	sp, #8
 800309a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800309e:	f7fe bd3b 	b.w	8001b18 <_ZN11TouchGFXHAL10initializeEv>
 80030a2:	bf00      	nop
 80030a4:	240251a4 	.word	0x240251a4
 80030a8:	24009c48 	.word	0x24009c48
 80030ac:	2400aa7c 	.word	0x2400aa7c
 80030b0:	24009c68 	.word	0x24009c68
 80030b4:	24009c4c 	.word	0x24009c4c
 80030b8:	24000034 	.word	0x24000034
 80030bc:	2400aa80 	.word	0x2400aa80
 80030c0:	08021d38 	.word	0x08021d38
 80030c4:	08021c9c 	.word	0x08021c9c
 80030c8:	08021cd0 	.word	0x08021cd0
 80030cc:	08021d04 	.word	0x08021d04
 80030d0:	08002fc1 	.word	0x08002fc1
 80030d4:	24009bcc 	.word	0x24009bcc

080030d8 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80030d8:	4770      	bx	lr
	...

080030dc <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80030dc:	4801      	ldr	r0, [pc, #4]	@ (80030e4 <touchgfx_taskEntry+0x8>)
 80030de:	f7fe bd2d 	b.w	8001b3c <_ZN11TouchGFXHAL9taskEntryEv>
 80030e2:	bf00      	nop
 80030e4:	24009bcc 	.word	0x24009bcc

080030e8 <_GLOBAL__sub_I_touchgfx_init>:
}
 80030e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 80030ea:	4c0e      	ldr	r4, [pc, #56]	@ (8003124 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 80030ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003128 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80030ee:	4e0f      	ldr	r6, [pc, #60]	@ (800312c <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80030f0:	4620      	mov	r0, r4
static LCD24bpp display;
 80030f2:	4d0f      	ldr	r5, [pc, #60]	@ (8003130 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80030f4:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80030f6:	f7ff fe8d 	bl	8002e14 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80030fa:	4628      	mov	r0, r5
 80030fc:	f015 fdb2 	bl	8018c64 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8003100:	480c      	ldr	r0, [pc, #48]	@ (8003134 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 8003102:	f010 fd91 	bl	8013c28 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8003106:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800310a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800310e:	4621      	mov	r1, r4
 8003110:	4809      	ldr	r0, [pc, #36]	@ (8003138 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 8003112:	e9cd 3200 	strd	r3, r2, [sp]
 8003116:	4633      	mov	r3, r6
 8003118:	462a      	mov	r2, r5
 800311a:	f7fe fda3 	bl	8001c64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800311e:	b002      	add	sp, #8
 8003120:	bd70      	pop	{r4, r5, r6, pc}
 8003122:	bf00      	nop
 8003124:	24009cd0 	.word	0x24009cd0
 8003128:	080214c4 	.word	0x080214c4
 800312c:	2400aa78 	.word	0x2400aa78
 8003130:	24009c68 	.word	0x24009c68
 8003134:	24009c4c 	.word	0x24009c4c
 8003138:	24009bcc 	.word	0x24009bcc

0800313c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800313c:	4801      	ldr	r0, [pc, #4]	@ (8003144 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800313e:	f7ff bcb9 	b.w	8002ab4 <_ZN8STM32DMAD1Ev>
 8003142:	bf00      	nop
 8003144:	24009cd0 	.word	0x24009cd0

08003148 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003148:	2000      	movs	r0, #0
 800314a:	4770      	bx	lr

0800314c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800314c:	8081      	strh	r1, [r0, #4]
    }
 800314e:	4770      	bx	lr

08003150 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003150:	80c1      	strh	r1, [r0, #6]
    }
 8003152:	4770      	bx	lr

08003154 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003154:	8101      	strh	r1, [r0, #8]
    }
 8003156:	4770      	bx	lr

08003158 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003158:	8141      	strh	r1, [r0, #10]
    }
 800315a:	4770      	bx	lr

0800315c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800315c:	4770      	bx	lr

0800315e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800315e:	4770      	bx	lr

08003160 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003160:	4770      	bx	lr

08003162 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003162:	4770      	bx	lr

08003164 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003164:	4770      	bx	lr

08003166 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003166:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003168:	88c4      	ldrh	r4, [r0, #6]
 800316a:	6803      	ldr	r3, [r0, #0]
 800316c:	1b12      	subs	r2, r2, r4
 800316e:	8884      	ldrh	r4, [r0, #4]
 8003170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003172:	1b09      	subs	r1, r1, r4
 8003174:	b212      	sxth	r2, r2
    }
 8003176:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800317a:	b209      	sxth	r1, r1
 800317c:	4718      	bx	r3

0800317e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800317e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003182:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003184:	f04f 33ff 	mov.w	r3, #4294967295
 8003188:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800318a:	6813      	ldr	r3, [r2, #0]
 800318c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800318e:	6010      	str	r0, [r2, #0]
    }
 8003190:	4770      	bx	lr

08003192 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8003192:	2000      	movs	r0, #0
 8003194:	4770      	bx	lr

08003196 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8003196:	888b      	ldrh	r3, [r1, #4]
 8003198:	8083      	strh	r3, [r0, #4]
        return true;
    }
 800319a:	2001      	movs	r0, #1
 800319c:	4770      	bx	lr

0800319e <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800319e:	4770      	bx	lr

080031a0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80031a0:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 80031a4:	4770      	bx	lr

080031a6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 80031a6:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 80031aa:	4770      	bx	lr

080031ac <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80031ac:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80031ae:	b510      	push	{r4, lr}
        return rect.width;
 80031b0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 80031b4:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80031b8:	8002      	strh	r2, [r0, #0]
 80031ba:	8042      	strh	r2, [r0, #2]
 80031bc:	8084      	strh	r4, [r0, #4]
 80031be:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 80031c0:	bd10      	pop	{r4, pc}

080031c2 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80031c2:	2200      	movs	r2, #0
 80031c4:	8002      	strh	r2, [r0, #0]
 80031c6:	8042      	strh	r2, [r0, #2]
 80031c8:	8082      	strh	r2, [r0, #4]
 80031ca:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80031cc:	4770      	bx	lr

080031ce <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 80031ce:	7701      	strb	r1, [r0, #28]
    }
 80031d0:	4770      	bx	lr

080031d2 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 80031d2:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 80031d6:	4770      	bx	lr

080031d8 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80031d8:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 80031dc:	4770      	bx	lr

080031de <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 80031de:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80031e2:	4770      	bx	lr

080031e4 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80031e4:	2001      	movs	r0, #1
 80031e6:	4770      	bx	lr

080031e8 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80031e8:	3098      	adds	r0, #152	@ 0x98
 80031ea:	4770      	bx	lr

080031ec <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80031ec:	308c      	adds	r0, #140	@ 0x8c
 80031ee:	4770      	bx	lr

080031f0 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80031f0:	3084      	adds	r0, #132	@ 0x84
 80031f2:	4770      	bx	lr

080031f4 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 80031f4:	4770      	bx	lr
	...

080031f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f8:	4b02      	ldr	r3, [pc, #8]	@ (8003204 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80031fa:	2290      	movs	r2, #144	@ 0x90
 80031fc:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000e100 	.word	0xe000e100

08003208 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8003208:	4770      	bx	lr

0800320a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 800320a:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 800320c:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 8003210:	4770      	bx	lr

08003212 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003212:	4770      	bx	lr

08003214 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003214:	4770      	bx	lr

08003216 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003216:	4770      	bx	lr

08003218 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8003218:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800321c:	4611      	mov	r1, r2
 800321e:	6840      	ldr	r0, [r0, #4]
 8003220:	6803      	ldr	r3, [r0, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4718      	bx	r3

08003226 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003226:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 800322a:	4770      	bx	lr

0800322c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800322c:	b510      	push	{r4, lr}
 800322e:	4604      	mov	r4, r0
 8003230:	2148      	movs	r1, #72	@ 0x48
 8003232:	f01c fc65 	bl	801fb00 <_ZdlPvj>
 8003236:	4620      	mov	r0, r4
 8003238:	bd10      	pop	{r4, pc}

0800323a <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 800323a:	b510      	push	{r4, lr}
 800323c:	4604      	mov	r4, r0
 800323e:	212c      	movs	r1, #44	@ 0x2c
 8003240:	f01c fc5e 	bl	801fb00 <_ZdlPvj>
 8003244:	4620      	mov	r0, r4
 8003246:	bd10      	pop	{r4, pc}

08003248 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003248:	b510      	push	{r4, lr}
 800324a:	4604      	mov	r4, r0
 800324c:	21bc      	movs	r1, #188	@ 0xbc
 800324e:	f01c fc57 	bl	801fb00 <_ZdlPvj>
 8003252:	4620      	mov	r0, r4
 8003254:	bd10      	pop	{r4, pc}
	...

08003258 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003258:	b538      	push	{r3, r4, r5, lr}
 800325a:	4604      	mov	r4, r0
    HAL::initialize();
 800325c:	f00a fc35 	bl	800daca <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003264:	f00f fbb2 	bl	80129cc <_ZN8touchgfx11Application11getInstanceEv>
 8003268:	4601      	mov	r1, r0
 800326a:	4620      	mov	r0, r4
 800326c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	4908      	ldr	r1, [pc, #32]	@ (8003294 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8003272:	4620      	mov	r0, r4
 8003274:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8003278:	2300      	movs	r3, #0
 800327a:	461a      	mov	r2, r3
 800327c:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 800327e:	6863      	ldr	r3, [r4, #4]
 8003280:	4a05      	ldr	r2, [pc, #20]	@ (8003298 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8003282:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 8003284:	4b05      	ldr	r3, [pc, #20]	@ (800329c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003286:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003288:	4a05      	ldr	r2, [pc, #20]	@ (80032a0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 800328a:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 800328c:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 800328e:	4a05      	ldr	r2, [pc, #20]	@ (80032a4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8003290:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003292:	bd38      	pop	{r3, r4, r5, pc}
 8003294:	d0119400 	.word	0xd0119400
 8003298:	2400b040 	.word	0x2400b040
 800329c:	2400aff8 	.word	0x2400aff8
 80032a0:	d0000000 	.word	0xd0000000
 80032a4:	00119400 	.word	0x00119400

080032a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 80032a8:	b538      	push	{r3, r4, r5, lr}
 80032aa:	4604      	mov	r4, r0
 80032ac:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 80032ae:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80032b0:	f04f 31ff 	mov.w	r1, #4294967295
 80032b4:	f007 ffe4 	bl	800b280 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80032b8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80032ba:	f008 f804 	bl	800b2c6 <osMutexRelease>
        streams[handle].isActive = false;
 80032be:	2324      	movs	r3, #36	@ 0x24
 80032c0:	fb03 4505 	mla	r5, r3, r5, r4
 80032c4:	2300      	movs	r3, #0
 80032c6:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 80032ca:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80032ce:	b90b      	cbnz	r3, 80032d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80032d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80032d2:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 80032d4:	bd38      	pop	{r3, r4, r5, pc}

080032d6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80032d6:	f00a bba9 	b.w	800da2c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080032da <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80032da:	f00a bd0a 	b.w	800dcf2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080032de <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80032de:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80032e2:	b112      	cbz	r2, 80032ea <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80032e4:	6803      	ldr	r3, [r0, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	4718      	bx	r3
    }
 80032ea:	4770      	bx	lr

080032ec <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80032ec:	4a12      	ldr	r2, [pc, #72]	@ (8003338 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80032ee:	6953      	ldr	r3, [r2, #20]
 80032f0:	03db      	lsls	r3, r3, #15
{
 80032f2:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80032f4:	d51e      	bpl.n	8003334 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80032f6:	2300      	movs	r3, #0
 80032f8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80032fc:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003300:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003304:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003308:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800330c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003310:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003312:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003316:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003318:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800331c:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800331e:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8003322:	d2f9      	bcs.n	8003318 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003324:	3b20      	subs	r3, #32
 8003326:	f113 0f20 	cmn.w	r3, #32
 800332a:	d1f2      	bne.n	8003312 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 800332c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003330:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003334:	bd70      	pop	{r4, r5, r6, pc}
 8003336:	bf00      	nop
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 800333c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800333e:	b131      	cbz	r1, 800334e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003340:	4b04      	ldr	r3, [pc, #16]	@ (8003354 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 8003342:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003346:	4a04      	ldr	r2, [pc, #16]	@ (8003358 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003348:	4804      	ldr	r0, [pc, #16]	@ (800335c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 800334a:	f01c ff71 	bl	8020230 <__assert_func>
    }
 800334e:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8003352:	bd08      	pop	{r3, pc}
 8003354:	08021d44 	.word	0x08021d44
 8003358:	08021d58 	.word	0x08021d58
 800335c:	08021ee2 	.word	0x08021ee2

08003360 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003360:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003362:	b131      	cbz	r1, 8003372 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003364:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8003366:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 800336a:	4a06      	ldr	r2, [pc, #24]	@ (8003384 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 800336c:	4806      	ldr	r0, [pc, #24]	@ (8003388 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 800336e:	f01c ff5f 	bl	8020230 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8003372:	6840      	ldr	r0, [r0, #4]
 8003374:	4611      	mov	r1, r2
 8003376:	6803      	ldr	r3, [r0, #0]
    }
 8003378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 800337c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337e:	4718      	bx	r3
 8003380:	08021d44 	.word	0x08021d44
 8003384:	08021f2c 	.word	0x08021f2c
 8003388:	08021ee2 	.word	0x08021ee2

0800338c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 800338c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800338e:	b129      	cbz	r1, 800339c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8003390:	4b03      	ldr	r3, [pc, #12]	@ (80033a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 8003392:	2179      	movs	r1, #121	@ 0x79
 8003394:	4a03      	ldr	r2, [pc, #12]	@ (80033a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 8003396:	4804      	ldr	r0, [pc, #16]	@ (80033a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8003398:	f01c ff4a 	bl	8020230 <__assert_func>
    }
 800339c:	68c0      	ldr	r0, [r0, #12]
 800339e:	bd08      	pop	{r3, pc}
 80033a0:	08021d44 	.word	0x08021d44
 80033a4:	080220da 	.word	0x080220da
 80033a8:	08021ee2 	.word	0x08021ee2

080033ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 80033ac:	b510      	push	{r4, lr}
 80033ae:	4604      	mov	r4, r0
        assert(handle < no_streams);
 80033b0:	b129      	cbz	r1, 80033be <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 80033b2:	4b19      	ldr	r3, [pc, #100]	@ (8003418 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 80033b4:	21a2      	movs	r1, #162	@ 0xa2
 80033b6:	4a19      	ldr	r2, [pc, #100]	@ (800341c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 80033b8:	4819      	ldr	r0, [pc, #100]	@ (8003420 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 80033ba:	f01c ff39 	bl	8020230 <__assert_func>
        switch (cmd)
 80033be:	2a05      	cmp	r2, #5
 80033c0:	d815      	bhi.n	80033ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80033c2:	e8df f002 	tbb	[pc, r2]
 80033c6:	1103      	.short	0x1103
 80033c8:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80033cc:	6840      	ldr	r0, [r0, #4]
 80033ce:	6803      	ldr	r3, [r0, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	4798      	blx	r3
 80033d4:	b158      	cbz	r0, 80033ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80033dc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80033e0:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80033e2:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80033e6:	e002      	b.n	80033ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80033e8:	2300      	movs	r3, #0
 80033ea:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80033ee:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80033f0:	6203      	str	r3, [r0, #32]
 80033f2:	e7f5      	b.n	80033e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80033f4:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80033fc:	e7f0      	b.n	80033e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80033fe:	2300      	movs	r3, #0
 8003400:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 8003404:	2301      	movs	r3, #1
 8003406:	6203      	str	r3, [r0, #32]
            break;
 8003408:	e7f1      	b.n	80033ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 800340a:	3b00      	subs	r3, #0
 800340c:	bf18      	it	ne
 800340e:	2301      	movne	r3, #1
 8003410:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8003414:	e7eb      	b.n	80033ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003416:	bf00      	nop
 8003418:	08021d44 	.word	0x08021d44
 800341c:	0802228f 	.word	0x0802228f
 8003420:	08021ee2 	.word	0x08021ee2

08003424 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003424:	b510      	push	{r4, lr}
 8003426:	460c      	mov	r4, r1
 8003428:	4611      	mov	r1, r2
 800342a:	461a      	mov	r2, r3
        assert(handle < no_streams);
 800342c:	b12c      	cbz	r4, 800343a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 800342e:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8003430:	2190      	movs	r1, #144	@ 0x90
 8003432:	4a06      	ldr	r2, [pc, #24]	@ (800344c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003434:	4806      	ldr	r0, [pc, #24]	@ (8003450 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003436:	f01c fefb 	bl	8020230 <__assert_func>
        stream.frameNumber = 0;
 800343a:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 800343c:	6840      	ldr	r0, [r0, #4]
 800343e:	6803      	ldr	r3, [r0, #0]
    }
 8003440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	4718      	bx	r3
 8003448:	08021d44 	.word	0x08021d44
 800344c:	08022463 	.word	0x08022463
 8003450:	08021ee2 	.word	0x08021ee2

08003454 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003454:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003456:	b129      	cbz	r1, 8003464 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003458:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 800345a:	2182      	movs	r1, #130	@ 0x82
 800345c:	4a05      	ldr	r2, [pc, #20]	@ (8003474 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 800345e:	4806      	ldr	r0, [pc, #24]	@ (8003478 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003460:	f01c fee6 	bl	8020230 <__assert_func>
        stream.tickCount = 0;
 8003464:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003468:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 800346c:	bd08      	pop	{r3, pc}
 800346e:	bf00      	nop
 8003470:	08021d44 	.word	0x08021d44
 8003474:	0802263e 	.word	0x0802263e
 8003478:	08021ee2 	.word	0x08021ee2

0800347c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 800347c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8003480:	b510      	push	{r4, lr}
 8003482:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8003484:	b153      	cbz	r3, 800349c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8003486:	f04f 31ff 	mov.w	r1, #4294967295
 800348a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800348c:	f007 fef8 	bl	800b280 <osMutexAcquire>
            firstDrawThisFrame = false;
 8003490:	2300      	movs	r3, #0
 8003492:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 8003496:	2301      	movs	r3, #1
 8003498:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 800349c:	bd10      	pop	{r4, pc}

0800349e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800349e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80034a2:	b11a      	cbz	r2, 80034ac <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80034a4:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80034a8:	b102      	cbz	r2, 80034ac <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80034aa:	6018      	str	r0, [r3, #0]
        }
    }
 80034ac:	4770      	bx	lr
	...

080034b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 80034b0:	b510      	push	{r4, lr}
 80034b2:	4604      	mov	r4, r0
 80034b4:	4610      	mov	r0, r2
        assert(handle < no_streams);
 80034b6:	b129      	cbz	r1, 80034c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 80034b8:	4b13      	ldr	r3, [pc, #76]	@ (8003508 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 80034ba:	21d0      	movs	r1, #208	@ 0xd0
 80034bc:	4a13      	ldr	r2, [pc, #76]	@ (800350c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 80034be:	4814      	ldr	r0, [pc, #80]	@ (8003510 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 80034c0:	f01c feb6 	bl	8020230 <__assert_func>
        if (stream.isPlaying)
 80034c4:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80034c8:	b133      	cbz	r3, 80034d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 80034ca:	4b12      	ldr	r3, [pc, #72]	@ (8003514 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 80034d2:	6963      	ldr	r3, [r4, #20]
 80034d4:	4413      	add	r3, r2
 80034d6:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80034d8:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80034dc:	b90b      	cbnz	r3, 80034e2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80034de:	2001      	movs	r0, #1
    }
 80034e0:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80034e2:	68a3      	ldr	r3, [r4, #8]
 80034e4:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80034e6:	6803      	ldr	r3, [r0, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80034ec:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80034ee:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80034f2:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d1f1      	bne.n	80034de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80034fa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1ee      	bne.n	80034e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 8003502:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8003506:	e7eb      	b.n	80034e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8003508:	08021d44 	.word	0x08021d44
 800350c:	080227fa 	.word	0x080227fa
 8003510:	08021ee2 	.word	0x08021ee2
 8003514:	24025140 	.word	0x24025140

08003518 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003518:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 800351a:	4c1a      	ldr	r4, [pc, #104]	@ (8003584 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 800351c:	4605      	mov	r5, r0
    HAL::endFrame();
 800351e:	f00a fac7 	bl	800dab0 <_ZN8touchgfx3HAL8endFrameEv>
 8003522:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003526:	b913      	cbnz	r3, 800352e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003528:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800352c:	b1ab      	cbz	r3, 800355a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 800352e:	69e1      	ldr	r1, [r4, #28]
 8003530:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003534:	4353      	muls	r3, r2
 8003536:	6922      	ldr	r2, [r4, #16]
 8003538:	434a      	muls	r2, r1
 800353a:	4293      	cmp	r3, r2
 800353c:	d30d      	bcc.n	800355a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 800353e:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8003542:	b138      	cbz	r0, 8003554 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 800354a:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 800354c:	bf98      	it	ls
 800354e:	f102 32ff 	addls.w	r2, r2, #4294967295
 8003552:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8003554:	2301      	movs	r3, #1
 8003556:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 800355a:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 800355c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 800355e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8003562:	f007 ff45 	bl	800b3f0 <osSemaphoreRelease>
        if (uiHasMutex)
 8003566:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800356a:	b12b      	cbz	r3, 8003578 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 800356c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800356e:	f007 feaa 	bl	800b2c6 <osMutexRelease>
            uiHasMutex = false;
 8003572:	2300      	movs	r3, #0
 8003574:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003578:	6868      	ldr	r0, [r5, #4]
 800357a:	6803      	ldr	r3, [r0, #0]
}
 800357c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	4718      	bx	r3
 8003584:	2400aff8 	.word	0x2400aff8

08003588 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003588:	4b04      	ldr	r3, [pc, #16]	@ (800359c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 800358a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800358e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003592:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003596:	f3bf 8f6f 	isb	sy
}
 800359a:	4770      	bx	lr
 800359c:	e000e100 	.word	0xe000e100

080035a0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035a0:	4b02      	ldr	r3, [pc, #8]	@ (80035ac <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80035a2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80035a6:	609a      	str	r2, [r3, #8]
}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	e000e100 	.word	0xe000e100

080035b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80035b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b2:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 80035b4:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 80035b8:	b9d8      	cbnz	r0, 80035f2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 80035ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80035be:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 80035c0:	2501      	movs	r5, #1
                streams[i] = Stream();
 80035c2:	60d8      	str	r0, [r3, #12]
 80035c4:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80035c6:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 80035ca:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80035cc:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 80035d0:	6158      	str	r0, [r3, #20]
 80035d2:	6198      	str	r0, [r3, #24]
 80035d4:	61d8      	str	r0, [r3, #28]
 80035d6:	6218      	str	r0, [r3, #32]
 80035d8:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 80035da:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 80035dc:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80035e0:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 80035e4:	443c      	add	r4, r7
 80035e6:	42a2      	cmp	r2, r4
 80035e8:	d90a      	bls.n	8003600 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80035ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003618 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 80035ec:	2152      	movs	r1, #82	@ 0x52
 80035ee:	4a0b      	ldr	r2, [pc, #44]	@ (800361c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80035f0:	e003      	b.n	80035fa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80035f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 80035f4:	f240 11c5 	movw	r1, #453	@ 0x1c5
 80035f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80035fa:	480b      	ldr	r0, [pc, #44]	@ (8003628 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80035fc:	f01c fe18 	bl	8020230 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8003600:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003602:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003604:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8003608:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 800360c:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 800360e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 8003612:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003614:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003618:	08022b52 	.word	0x08022b52
 800361c:	08022b8d 	.word	0x08022b8d
 8003620:	0802299b 	.word	0x0802299b
 8003624:	080229cb 	.word	0x080229cb
 8003628:	08021ee2 	.word	0x08021ee2

0800362c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 800362c:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 800362e:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003630:	4e12      	ldr	r6, [pc, #72]	@ (800367c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8003632:	4604      	mov	r4, r0
 8003634:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003636:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003638:	6003      	str	r3, [r0, #0]
 800363a:	6833      	ldr	r3, [r6, #0]
 800363c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003640:	b10a      	cbz	r2, 8003646 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8003642:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003644:	b900      	cbnz	r0, 8003648 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003646:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003648:	6803      	ldr	r3, [r0, #0]
 800364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364c:	4798      	blx	r3
 800364e:	1e43      	subs	r3, r0, #1
 8003650:	425d      	negs	r5, r3
 8003652:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003654:	6833      	ldr	r3, [r6, #0]
 8003656:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003658:	b130      	cbz	r0, 8003668 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800365a:	6803      	ldr	r3, [r0, #0]
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	4798      	blx	r3
 8003660:	2801      	cmp	r0, #1
 8003662:	bf08      	it	eq
 8003664:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003668:	b92d      	cbnz	r5, 8003676 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 800366a:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 800366c:	2127      	movs	r1, #39	@ 0x27
 800366e:	4a06      	ldr	r2, [pc, #24]	@ (8003688 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003670:	4806      	ldr	r0, [pc, #24]	@ (800368c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8003672:	f01c fddd 	bl	8020230 <__assert_func>
    }
 8003676:	4620      	mov	r0, r4
 8003678:	bd70      	pop	{r4, r5, r6, pc}
 800367a:	bf00      	nop
 800367c:	24025140 	.word	0x24025140
 8003680:	08022e40 	.word	0x08022e40
 8003684:	08022d30 	.word	0x08022d30
 8003688:	08022d8e 	.word	0x08022d8e
 800368c:	08022dc7 	.word	0x08022dc7

08003690 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003690:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8003692:	4e24      	ldr	r6, [pc, #144]	@ (8003724 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 8003694:	6835      	ldr	r5, [r6, #0]
 8003696:	f3bf 8f5b 	dmb	ish
 800369a:	f015 0501 	ands.w	r5, r5, #1
 800369e:	d13f      	bne.n	8003720 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 80036a0:	4630      	mov	r0, r6
 80036a2:	f01c fa2f 	bl	801fb04 <__cxa_guard_acquire>
 80036a6:	2800      	cmp	r0, #0
 80036a8:	d03a      	beq.n	8003720 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 80036aa:	4c1f      	ldr	r4, [pc, #124]	@ (8003728 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 80036ac:	4b1f      	ldr	r3, [pc, #124]	@ (800372c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 80036ae:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80036b2:	6125      	str	r5, [r4, #16]
 80036b4:	84e5      	strh	r5, [r4, #38]	@ 0x26
 80036b6:	62a5      	str	r5, [r4, #40]	@ 0x28
 80036b8:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 80036ba:	e9c4 3500 	strd	r3, r5, [r4]
 80036be:	e9c4 5502 	strd	r5, r5, [r4, #8]
 80036c2:	f010 fd10 	bl	80140e6 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 80036c6:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80036ca:	f00c fc2f 	bl	800ff2c <_ZN8touchgfx12CanvasWidgetC1Ev>
 80036ce:	4b18      	ldr	r3, [pc, #96]	@ (8003730 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80036d0:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 80036d2:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80036d4:	4b17      	ldr	r3, [pc, #92]	@ (8003734 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 80036d6:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 80036da:	f7ff ffa7 	bl	800362c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80036de:	4b16      	ldr	r3, [pc, #88]	@ (8003738 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 80036e0:	4816      	ldr	r0, [pc, #88]	@ (800373c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 80036e2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80036e6:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 80036e8:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 80036ec:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 80036f0:	2364      	movs	r3, #100	@ 0x64
 80036f2:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 80036f6:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 80036fa:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8003704:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003708:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 800370c:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8003710:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8003712:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003716:	f01c fda9 	bl	802026c <atexit>
 800371a:	4630      	mov	r0, r6
 800371c:	f01c f9fe 	bl	801fb1c <__cxa_guard_release>
}
 8003720:	4801      	ldr	r0, [pc, #4]	@ (8003728 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	2400af38 	.word	0x2400af38
 8003728:	2400af3c 	.word	0x2400af3c
 800372c:	08023c88 	.word	0x08023c88
 8003730:	08022e60 	.word	0x08022e60
 8003734:	08022ed8 	.word	0x08022ed8
 8003738:	08023cd4 	.word	0x08023cd4
 800373c:	080031f5 	.word	0x080031f5
 8003740:	08023d0c 	.word	0x08023d0c

08003744 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003748:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 800374a:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 800374c:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003750:	f04f 31ff 	mov.w	r1, #4294967295
 8003754:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003756:	f007 fe1f 	bl	800b398 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 800375a:	f04f 31ff 	mov.w	r1, #4294967295
 800375e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003760:	f007 fd8e 	bl	800b280 <osMutexAcquire>
                if (stream.doDecode)
 8003764:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003768:	b343      	cbz	r3, 80037bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 800376a:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 800376c:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003770:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003772:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8003776:	f1b8 0f00 	cmp.w	r8, #0
 800377a:	d023      	beq.n	80037c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	4641      	mov	r1, r8
 8003780:	4628      	mov	r0, r5
 8003782:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800378e:	9700      	str	r7, [sp, #0]
 8003790:	4628      	mov	r0, r5
 8003792:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003796:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800379a:	68a1      	ldr	r1, [r4, #8]
 800379c:	47c0      	blx	r8
                    stream.frameCount++;
 800379e:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80037a0:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 80037a4:	3301      	adds	r3, #1
 80037a6:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 80037a8:	b1f0      	cbz	r0, 80037e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80037aa:	682b      	ldr	r3, [r5, #0]
 80037ac:	4628      	mov	r0, r5
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	4798      	blx	r3
 80037b2:	3801      	subs	r0, #1
                    stream.doDecode = false;
 80037b4:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80037b6:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 80037b8:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 80037bc:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80037be:	f007 fd82 	bl	800b2c6 <osMutexRelease>
        while (1)
 80037c2:	e7c5      	b.n	8003750 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 80037c4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80037c6:	2a00      	cmp	r2, #0
 80037c8:	d0de      	beq.n	8003788 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 80037ca:	4628      	mov	r0, r5
 80037cc:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 80037d0:	4798      	blx	r3
 80037d2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80037d4:	4401      	add	r1, r0
 80037d6:	4628      	mov	r0, r5
 80037d8:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 80037da:	6923      	ldr	r3, [r4, #16]
 80037dc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 80037de:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 80037e2:	4413      	add	r3, r2
 80037e4:	6123      	str	r3, [r4, #16]
 80037e6:	e7cf      	b.n	8003788 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 80037e8:	2001      	movs	r0, #1
 80037ea:	e7e3      	b.n	80037b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

080037ec <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 80037ec:	4801      	ldr	r0, [pc, #4]	@ (80037f4 <videoTaskFunc+0x8>)
{
 80037ee:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80037f0:	f7ff ffa8 	bl	8003744 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 80037f4:	2400aff8 	.word	0x2400aff8

080037f8 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 80037f8:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 80037fa:	4814      	ldr	r0, [pc, #80]	@ (800384c <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80037fc:	2500      	movs	r5, #0
 80037fe:	f7fe fc4f 	bl	80020a0 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003802:	4c13      	ldr	r4, [pc, #76]	@ (8003850 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8003804:	4b13      	ldr	r3, [pc, #76]	@ (8003854 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003806:	462a      	mov	r2, r5
 8003808:	4629      	mov	r1, r5
 800380a:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 800380c:	6023      	str	r3, [r4, #0]
 800380e:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003812:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003814:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003816:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003818:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 800381c:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003820:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003824:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003828:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 800382c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003830:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003834:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003838:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 800383c:	f007 fd62 	bl	800b304 <osSemaphoreNew>
 8003840:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003842:	4628      	mov	r0, r5
 8003844:	f007 fce7 	bl	800b216 <osMutexNew>
 8003848:	6460      	str	r0, [r4, #68]	@ 0x44
}
 800384a:	bd38      	pop	{r3, r4, r5, pc}
 800384c:	2400b040 	.word	0x2400b040
 8003850:	2400aff8 	.word	0x2400aff8
 8003854:	08022f24 	.word	0x08022f24

08003858 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003858:	4770      	bx	lr

0800385a <_ZN23ApplicationFontProviderD0Ev>:
 800385a:	b510      	push	{r4, lr}
 800385c:	4604      	mov	r4, r0
 800385e:	2104      	movs	r1, #4
 8003860:	f01c f94e 	bl	801fb00 <_ZdlPvj>
 8003864:	4620      	mov	r0, r4
 8003866:	bd10      	pop	{r4, pc}

08003868 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8003868:	2901      	cmp	r1, #1
{
 800386a:	b508      	push	{r3, lr}
    switch (typography)
 800386c:	d006      	beq.n	800387c <_ZN23ApplicationFontProvider7getFontEt+0x14>
 800386e:	2902      	cmp	r1, #2
 8003870:	d008      	beq.n	8003884 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8003872:	b959      	cbnz	r1, 800388c <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003874:	f000 fbea 	bl	800404c <_ZN17TypedTextDatabase8getFontsEv>
 8003878:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 800387a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800387c:	f000 fbe6 	bl	800404c <_ZN17TypedTextDatabase8getFontsEv>
 8003880:	6840      	ldr	r0, [r0, #4]
 8003882:	e7fa      	b.n	800387a <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003884:	f000 fbe2 	bl	800404c <_ZN17TypedTextDatabase8getFontsEv>
 8003888:	6880      	ldr	r0, [r0, #8]
 800388a:	e7f6      	b.n	800387a <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 800388c:	2000      	movs	r0, #0
 800388e:	e7f4      	b.n	800387a <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003890 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003890:	4800      	ldr	r0, [pc, #0]	@ (8003894 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003892:	4770      	bx	lr
 8003894:	08022f74 	.word	0x08022f74

08003898 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003898:	2002      	movs	r0, #2
 800389a:	4770      	bx	lr

0800389c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800389c:	b513      	push	{r0, r1, r4, lr}
 800389e:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80038a0:	b151      	cbz	r1, 80038b8 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80038a2:	6803      	ldr	r3, [r0, #0]
 80038a4:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 80038a6:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80038a8:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80038ac:	689c      	ldr	r4, [r3, #8]
 80038ae:	f10d 0303 	add.w	r3, sp, #3
 80038b2:	47a0      	blx	r4
        return glyph;
    }
 80038b4:	b002      	add	sp, #8
 80038b6:	bd10      	pop	{r4, pc}
            return 0;
 80038b8:	4608      	mov	r0, r1
 80038ba:	e7fb      	b.n	80038b4 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080038bc <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80038bc:	89c0      	ldrh	r0, [r0, #14]
 80038be:	4770      	bx	lr

080038c0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80038c0:	8a00      	ldrh	r0, [r0, #16]
 80038c2:	4770      	bx	lr

080038c4 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 80038c4:	88c0      	ldrh	r0, [r0, #6]
 80038c6:	4770      	bx	lr

080038c8 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 80038c8:	8880      	ldrh	r0, [r0, #4]
 80038ca:	4770      	bx	lr

080038cc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80038cc:	7a80      	ldrb	r0, [r0, #10]
    }
 80038ce:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80038d2:	4770      	bx	lr

080038d4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80038d4:	7a80      	ldrb	r0, [r0, #10]
    }
 80038d6:	09c0      	lsrs	r0, r0, #7
 80038d8:	4770      	bx	lr

080038da <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 80038da:	2000      	movs	r0, #0
 80038dc:	4770      	bx	lr
	...

080038e0 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 80038e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80038e8 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	00000000 	.word	0x00000000

080038ec <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80038ec:	4770      	bx	lr

080038ee <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80038ee:	b510      	push	{r4, lr}
 80038f0:	4604      	mov	r4, r0
    }
 80038f2:	2108      	movs	r1, #8
 80038f4:	f01c f904 	bl	801fb00 <_ZdlPvj>
 80038f8:	4620      	mov	r0, r4
 80038fa:	bd10      	pop	{r4, pc}

080038fc <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80038fc:	4770      	bx	lr

080038fe <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80038fe:	4770      	bx	lr

08003900 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003900:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003904:	6808      	ldr	r0, [r1, #0]
 8003906:	6849      	ldr	r1, [r1, #4]
 8003908:	c303      	stmia	r3!, {r0, r1}
    }
 800390a:	4770      	bx	lr

0800390c <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800390c:	4770      	bx	lr

0800390e <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 800390e:	4770      	bx	lr

08003910 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003910:	6041      	str	r1, [r0, #4]
    }
 8003912:	4770      	bx	lr

08003914 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003914:	4770      	bx	lr
	...

08003918 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003918:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800391a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800391e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003922:	2300      	movs	r3, #0
 8003924:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003928:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800392c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	080039d9 	.word	0x080039d9

08003938 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003938:	2301      	movs	r3, #1
 800393a:	7203      	strb	r3, [r0, #8]
    }
 800393c:	4770      	bx	lr

0800393e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800393e:	4770      	bx	lr

08003940 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003940:	4770      	bx	lr

08003942 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003942:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003944:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003946:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003948:	68c2      	ldr	r2, [r0, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	1054      	asrs	r4, r2, #1
 800394e:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003952:	07d2      	lsls	r2, r2, #31
 8003954:	bf48      	it	mi
 8003956:	590a      	ldrmi	r2, [r1, r4]
    }
 8003958:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 800395c:	bf48      	it	mi
 800395e:	58d3      	ldrmi	r3, [r2, r3]
 8003960:	4718      	bx	r3

08003962 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003962:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003964:	6840      	ldr	r0, [r0, #4]
 8003966:	b130      	cbz	r0, 8003976 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	b91a      	cbnz	r2, 8003974 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 800396c:	68d8      	ldr	r0, [r3, #12]
 800396e:	f000 0001 	and.w	r0, r0, #1
 8003972:	4770      	bx	lr
 8003974:	2001      	movs	r0, #1
    }
 8003976:	4770      	bx	lr

08003978 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003978:	b510      	push	{r4, lr}
 800397a:	4604      	mov	r4, r0
 800397c:	210c      	movs	r1, #12
 800397e:	f01c f8bf 	bl	801fb00 <_ZdlPvj>
 8003982:	4620      	mov	r0, r4
 8003984:	bd10      	pop	{r4, pc}

08003986 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003986:	b510      	push	{r4, lr}
 8003988:	4604      	mov	r4, r0
 800398a:	2110      	movs	r1, #16
 800398c:	f01c f8b8 	bl	801fb00 <_ZdlPvj>
 8003990:	4620      	mov	r0, r4
 8003992:	bd10      	pop	{r4, pc}

08003994 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003994:	b510      	push	{r4, lr}
 8003996:	4604      	mov	r4, r0
 8003998:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800399c:	f01c f8b0 	bl	801fb00 <_ZdlPvj>
 80039a0:	4620      	mov	r0, r4
 80039a2:	bd10      	pop	{r4, pc}

080039a4 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80039a4:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 80039a6:	f00f f811 	bl	80129cc <_ZN8touchgfx11Application11getInstanceEv>
 80039aa:	6803      	ldr	r3, [r0, #0]
    }
 80039ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 80039b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b2:	4718      	bx	r3

080039b4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80039b4:	b510      	push	{r4, lr}
 80039b6:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80039b8:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 80039bc:	b158      	cbz	r0, 80039d6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80039be:	6803      	ldr	r3, [r0, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	4798      	blx	r3
 80039c4:	b138      	cbz	r0, 80039d6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80039c6:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 80039ca:	6803      	ldr	r3, [r0, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 80039d6:	bd10      	pop	{r4, pc}

080039d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80039d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80039dc:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 80039e0:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80039e2:	68b0      	ldr	r0, [r6, #8]
 80039e4:	6803      	ldr	r3, [r0, #0]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4798      	blx	r3
 80039ea:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 80039ee:	d205      	bcs.n	80039fc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 80039f0:	4b44      	ldr	r3, [pc, #272]	@ (8003b04 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 80039f2:	21a3      	movs	r1, #163	@ 0xa3
 80039f4:	4a44      	ldr	r2, [pc, #272]	@ (8003b08 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80039f6:	4845      	ldr	r0, [pc, #276]	@ (8003b0c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80039f8:	f01c fc1a 	bl	8020230 <__assert_func>
 80039fc:	6870      	ldr	r0, [r6, #4]
 80039fe:	6803      	ldr	r3, [r0, #0]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	4798      	blx	r3
 8003a04:	280f      	cmp	r0, #15
 8003a06:	d803      	bhi.n	8003a10 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8003a08:	4b41      	ldr	r3, [pc, #260]	@ (8003b10 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003a0a:	21a4      	movs	r1, #164	@ 0xa4
 8003a0c:	4a3e      	ldr	r2, [pc, #248]	@ (8003b08 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003a0e:	e7f2      	b.n	80039f6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003a10:	68f0      	ldr	r0, [r6, #12]
 8003a12:	6803      	ldr	r3, [r0, #0]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4798      	blx	r3
 8003a18:	280b      	cmp	r0, #11
 8003a1a:	d803      	bhi.n	8003a24 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8003a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b14 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003a1e:	21a5      	movs	r1, #165	@ 0xa5
 8003a20:	4a39      	ldr	r2, [pc, #228]	@ (8003b08 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003a22:	e7e8      	b.n	80039f6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003a24:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8003b1c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003a28:	f00e ffd0 	bl	80129cc <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003a2c:	3004      	adds	r0, #4
 8003a2e:	f00e fff2 	bl	8012a16 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003a32:	f8d9 0000 	ldr.w	r0, [r9]
 8003a36:	b110      	cbz	r0, 8003a3e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8003a38:	6803      	ldr	r3, [r0, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	4798      	blx	r3
    if (*currentTrans)
 8003a3e:	f8d9 0000 	ldr.w	r0, [r9]
 8003a42:	b110      	cbz	r0, 8003a4a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8003a44:	6803      	ldr	r3, [r0, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4798      	blx	r3
    if (*currentScreen)
 8003a4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b20 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8003a4e:	f8d8 0000 	ldr.w	r0, [r8]
 8003a52:	b110      	cbz	r0, 8003a5a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8003a54:	6803      	ldr	r3, [r0, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	4798      	blx	r3
    if (*currentPresenter)
 8003a5a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003a5e:	b110      	cbz	r0, 8003a66 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8003a60:	6803      	ldr	r3, [r0, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4798      	blx	r3
    if (*currentScreen)
 8003a66:	f8d8 0000 	ldr.w	r0, [r8]
 8003a6a:	b110      	cbz	r0, 8003a72 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8003a6c:	6803      	ldr	r3, [r0, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4798      	blx	r3
    if (*currentPresenter)
 8003a72:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003a76:	b110      	cbz	r0, 8003a7e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8003a78:	6803      	ldr	r3, [r0, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003a7e:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003a80:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003a82:	f04f 0b00 	mov.w	fp, #0
 8003a86:	6803      	ldr	r3, [r0, #0]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	4798      	blx	r3
 8003a8c:	4b22      	ldr	r3, [pc, #136]	@ (8003b18 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8003a8e:	4604      	mov	r4, r0
 8003a90:	f8c0 b004 	str.w	fp, [r0, #4]
 8003a94:	f880 b008 	strb.w	fp, [r0, #8]
 8003a98:	4659      	mov	r1, fp
 8003a9a:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003a9c:	68b0      	ldr	r0, [r6, #8]
 8003a9e:	6803      	ldr	r3, [r0, #0]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	4798      	blx	r3
 8003aa4:	4605      	mov	r5, r0
 8003aa6:	f000 fcc5 	bl	8004434 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003aaa:	6870      	ldr	r0, [r6, #4]
 8003aac:	4659      	mov	r1, fp
 8003aae:	6803      	ldr	r3, [r0, #0]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	4798      	blx	r3
 8003ab4:	4606      	mov	r6, r0
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f000 fb12 	bl	80040e0 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003abc:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003abe:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003ac2:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003ac4:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003ac8:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003acc:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003ad0:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003ad2:	f8c6 a008 	str.w	sl, [r6, #8]
 8003ad6:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003ad8:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003ada:	4798      	blx	r3
    newPresenter->activate();
 8003adc:	6833      	ldr	r3, [r6, #0]
 8003ade:	4630      	mov	r0, r6
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	f010 ff60 	bl	80149ac <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	4620      	mov	r0, r4
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	4798      	blx	r3
    newTransition->invalidate();
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	4620      	mov	r0, r4
 8003af8:	695b      	ldr	r3, [r3, #20]
}
 8003afa:	b001      	add	sp, #4
 8003afc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b00:	4718      	bx	r3
 8003b02:	bf00      	nop
 8003b04:	08022fac 	.word	0x08022fac
 8003b08:	0802303a 	.word	0x0802303a
 8003b0c:	0802310c 	.word	0x0802310c
 8003b10:	08023161 	.word	0x08023161
 8003b14:	08023204 	.word	0x08023204
 8003b18:	0802331c 	.word	0x0802331c
 8003b1c:	24025188 	.word	0x24025188
 8003b20:	24025184 	.word	0x24025184

08003b24 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003b24:	4b04      	ldr	r3, [pc, #16]	@ (8003b38 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003b2c:	b10a      	cbz	r2, 8003b32 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8003b2e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003b30:	b900      	cbnz	r0, 8003b34 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8003b32:	6898      	ldr	r0, [r3, #8]
    }
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	24025140 	.word	0x24025140

08003b3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	4604      	mov	r4, r0
 8003b40:	4617      	mov	r7, r2
 8003b42:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8003b44:	f00f f808 	bl	8012b58 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003b48:	4b10      	ldr	r3, [pc, #64]	@ (8003b8c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 8003b4a:	2500      	movs	r5, #0
        instance = this;
 8003b4c:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003b4e:	4629      	mov	r1, r5
      model(m)
 8003b50:	4b0f      	ldr	r3, [pc, #60]	@ (8003b90 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8003b52:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8003b54:	4b0f      	ldr	r3, [pc, #60]	@ (8003b94 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8003b56:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b98 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003b62:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8003b64:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8003b68:	689b      	ldr	r3, [r3, #8]
      model(m)
 8003b6a:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003b6e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003b70:	4628      	mov	r0, r5
 8003b72:	f000 fa1f 	bl	8003fb4 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003b76:	f7ff ffd5 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 8003b7a:	f016 f95a 	bl	8019e32 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8003b7e:	f7ff ffd1 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 8003b82:	f016 f9cd 	bl	8019f20 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
}
 8003b86:	4620      	mov	r0, r4
 8003b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	24025194 	.word	0x24025194
 8003b90:	080232c8 	.word	0x080232c8
 8003b94:	080232b0 	.word	0x080232b0
 8003b98:	24025140 	.word	0x24025140

08003b9c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003b9c:	4b06      	ldr	r3, [pc, #24]	@ (8003bb8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8003b9e:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003ba2:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003bac:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003bb0:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	080039d9 	.word	0x080039d9

08003bbc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003bbc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003bbe:	4770      	bx	lr

08003bc0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003bc0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003bc2:	4770      	bx	lr

08003bc4 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003bc4:	4770      	bx	lr

08003bc6 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003bc6:	888b      	ldrh	r3, [r1, #4]
 8003bc8:	69c0      	ldr	r0, [r0, #28]
 8003bca:	0adb      	lsrs	r3, r3, #11
 8003bcc:	680a      	ldr	r2, [r1, #0]
 8003bce:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8003bd2:	4410      	add	r0, r2
 8003bd4:	4770      	bx	lr

08003bd6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8003bd6:	b510      	push	{r4, lr}
 8003bd8:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8003bda:	b1ba      	cbz	r2, 8003c0c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003bdc:	7b10      	ldrb	r0, [r2, #12]
 8003bde:	b168      	cbz	r0, 8003bfc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003be0:	7b53      	ldrb	r3, [r2, #13]
 8003be2:	7ad2      	ldrb	r2, [r2, #11]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003bea:	431a      	orrs	r2, r3
 8003bec:	6a23      	ldr	r3, [r4, #32]
 8003bee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003bf2:	881a      	ldrh	r2, [r3, #0]
 8003bf4:	428a      	cmp	r2, r1
 8003bf6:	d102      	bne.n	8003bfe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003bf8:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8003bfc:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003bfe:	d805      	bhi.n	8003c0c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003c00:	3801      	subs	r0, #1
 8003c02:	3304      	adds	r3, #4
 8003c04:	b280      	uxth	r0, r0
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d1f3      	bne.n	8003bf2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003c0a:	e7f7      	b.n	8003bfc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	e7f5      	b.n	8003bfc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003c10 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003c10:	b510      	push	{r4, lr}
 8003c12:	4604      	mov	r4, r0
 8003c14:	212c      	movs	r1, #44	@ 0x2c
 8003c16:	f01b ff73 	bl	801fb00 <_ZdlPvj>
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	bd10      	pop	{r4, pc}
	...

08003c20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003c20:	b530      	push	{r4, r5, lr}
 8003c22:	b08b      	sub	sp, #44	@ 0x2c
 8003c24:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003c26:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8003c2a:	9508      	str	r5, [sp, #32]
 8003c2c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8003c30:	9507      	str	r5, [sp, #28]
 8003c32:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8003c36:	9506      	str	r5, [sp, #24]
 8003c38:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8003c3c:	9505      	str	r5, [sp, #20]
 8003c3e:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8003c42:	9504      	str	r5, [sp, #16]
 8003c44:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8003c48:	9503      	str	r5, [sp, #12]
 8003c4a:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8003c4e:	9502      	str	r5, [sp, #8]
 8003c50:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8003c54:	9501      	str	r5, [sp, #4]
 8003c56:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8003c5a:	9500      	str	r5, [sp, #0]
 8003c5c:	f010 fb00 	bl	8014260 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003c60:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8003c62:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003c64:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8003c66:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003c68:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8003c6a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003c6c:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8003c6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003c70:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8003c72:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003c74:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8003c76:	b00b      	add	sp, #44	@ 0x2c
 8003c78:	bd30      	pop	{r4, r5, pc}
 8003c7a:	bf00      	nop
 8003c7c:	08023340 	.word	0x08023340

08003c80 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003c80:	4770      	bx	lr

08003c82 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003c82:	4770      	bx	lr

08003c84 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003c84:	4770      	bx	lr

08003c86 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003c86:	4770      	bx	lr

08003c88 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003c88:	4770      	bx	lr

08003c8a <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8003c8a:	4770      	bx	lr

08003c8c <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8003c8c:	4770      	bx	lr

08003c8e <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8003c8e:	b510      	push	{r4, lr}
 8003c90:	4604      	mov	r4, r0
}
 8003c92:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 8003c96:	f01b ff33 	bl	801fb00 <_ZdlPvj>
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	bd10      	pop	{r4, pc}
	...

08003ca0 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	4604      	mov	r4, r0
        : presenter(0)
 8003ca4:	2500      	movs	r5, #0
 8003ca6:	f010 fcd5 	bl	8014654 <_ZN8touchgfx6ScreenC1Ev>
 8003caa:	4b2b      	ldr	r3, [pc, #172]	@ (8003d58 <_ZN15Screen1ViewBaseC1Ev+0xb8>)
 8003cac:	4626      	mov	r6, r4
 8003cae:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8003cb0:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8003cb4:	f846 3b40 	str.w	r3, [r6], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003cb8:	4b28      	ldr	r3, [pc, #160]	@ (8003d5c <_ZN15Screen1ViewBaseC1Ev+0xbc>)
          cachedAbsX(0),
 8003cba:	6625      	str	r5, [r4, #96]	@ 0x60
        : color(col)
 8003cbc:	66a5      	str	r5, [r4, #104]	@ 0x68
        : x(0), y(0), width(0), height(0)
 8003cbe:	e9c4 3510 	strd	r3, r5, [r4, #64]	@ 0x40
          touchable(false),
 8003cc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cc6:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 8003cca:	23ff      	movs	r3, #255	@ 0xff
 8003ccc:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8003cd0:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
          parent(0),
 8003cd4:	e9c4 5514 	strd	r5, r5, [r4, #80]	@ 0x50
          nextDrawChainElement(0),
 8003cd8:	e9c4 5516 	strd	r5, r5, [r4, #88]	@ 0x58
 8003cdc:	f00c fb0c 	bl	80102f8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003ce0:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 8003ce4:	f00c fb08 	bl	80102f8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003ce8:	f104 00fc 	add.w	r0, r4, #252	@ 0xfc
 8003cec:	f00c fb04 	bl	80102f8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003cf0:	f504 70a2 	add.w	r0, r4, #324	@ 0x144
 8003cf4:	f00c fb00 	bl	80102f8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003cf8:	f504 70c6 	add.w	r0, r4, #396	@ 0x18c
 8003cfc:	f00c fafc 	bl	80102f8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003d00:	f504 70ea 	add.w	r0, r4, #468	@ 0x1d4
 8003d04:	f00c faf8 	bl	80102f8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003d08:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 8003d0c:	f00c faf4 	bl	80102f8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003d10:	f504 7019 	add.w	r0, r4, #612	@ 0x264
 8003d14:	f00c faf0 	bl	80102f8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003d18:	f504 702b 	add.w	r0, r4, #684	@ 0x2ac
 8003d1c:	f00c faec 	bl	80102f8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
        setX(x);
 8003d20:	4629      	mov	r1, r5
 8003d22:	4630      	mov	r0, r6
 8003d24:	f7ff fa12 	bl	800314c <_ZN8touchgfx8Drawable4setXEs>
        setY(y);
 8003d28:	4629      	mov	r1, r5
 8003d2a:	4630      	mov	r0, r6
 8003d2c:	f7ff fa10 	bl	8003150 <_ZN8touchgfx8Drawable4setYEs>
        setWidth(width);
 8003d30:	4630      	mov	r0, r6
 8003d32:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8003d36:	f7ff fa0d 	bl	8003154 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8003d40:	f7ff fa0a 	bl	8003158 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003d44:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003d48:	1d20      	adds	r0, r4, #4
 8003d4a:	4631      	mov	r1, r6
 8003d4c:	66a3      	str	r3, [r4, #104]	@ 0x68
 8003d4e:	f009 fbd3 	bl	800d4f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003d52:	4620      	mov	r0, r4
 8003d54:	bd70      	pop	{r4, r5, r6, pc}
 8003d56:	bf00      	nop
 8003d58:	080233a8 	.word	0x080233a8
 8003d5c:	08023da4 	.word	0x08023da4

08003d60 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003d60:	4770      	bx	lr
	...

08003d64 <_Z23getFont_verdana_10_4bppv>:
{
 8003d64:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003d66:	4d16      	ldr	r5, [pc, #88]	@ (8003dc0 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8003d68:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003d6a:	682c      	ldr	r4, [r5, #0]
 8003d6c:	f3bf 8f5b 	dmb	ish
 8003d70:	f014 0401 	ands.w	r4, r4, #1
 8003d74:	d120      	bne.n	8003db8 <_Z23getFont_verdana_10_4bppv+0x54>
 8003d76:	4628      	mov	r0, r5
 8003d78:	f01b fec4 	bl	801fb04 <__cxa_guard_acquire>
 8003d7c:	b1e0      	cbz	r0, 8003db8 <_Z23getFont_verdana_10_4bppv+0x54>
 8003d7e:	233f      	movs	r3, #63	@ 0x3f
 8003d80:	2201      	movs	r2, #1
 8003d82:	4910      	ldr	r1, [pc, #64]	@ (8003dc4 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d86:	4b10      	ldr	r3, [pc, #64]	@ (8003dc8 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003d88:	4810      	ldr	r0, [pc, #64]	@ (8003dcc <_Z23getFont_verdana_10_4bppv+0x68>)
 8003d8a:	9308      	str	r3, [sp, #32]
 8003d8c:	4b10      	ldr	r3, [pc, #64]	@ (8003dd0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003d8e:	940a      	str	r4, [sp, #40]	@ 0x28
 8003d90:	9405      	str	r4, [sp, #20]
 8003d92:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003d96:	2304      	movs	r3, #4
 8003d98:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003d9c:	230a      	movs	r3, #10
 8003d9e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003da8:	f7ff ff3a 	bl	8003c20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003dac:	4809      	ldr	r0, [pc, #36]	@ (8003dd4 <_Z23getFont_verdana_10_4bppv+0x70>)
 8003dae:	f01c fa5d 	bl	802026c <atexit>
 8003db2:	4628      	mov	r0, r5
 8003db4:	f01b feb2 	bl	801fb1c <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8003db8:	4804      	ldr	r0, [pc, #16]	@ (8003dcc <_Z23getFont_verdana_10_4bppv+0x68>)
 8003dba:	b00f      	add	sp, #60	@ 0x3c
 8003dbc:	bd30      	pop	{r4, r5, pc}
 8003dbe:	bf00      	nop
 8003dc0:	2400b088 	.word	0x2400b088
 8003dc4:	080248c8 	.word	0x080248c8
 8003dc8:	08024974 	.word	0x08024974
 8003dcc:	2400b08c 	.word	0x2400b08c
 8003dd0:	08024980 	.word	0x08024980
 8003dd4:	08003d61 	.word	0x08003d61

08003dd8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 10, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003dd8:	4770      	bx	lr
	...

08003ddc <_Z23getFont_verdana_20_4bppv>:
{
 8003ddc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 10, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003dde:	4d16      	ldr	r5, [pc, #88]	@ (8003e38 <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 8003de0:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 10, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003de2:	682c      	ldr	r4, [r5, #0]
 8003de4:	f3bf 8f5b 	dmb	ish
 8003de8:	f014 0401 	ands.w	r4, r4, #1
 8003dec:	d121      	bne.n	8003e32 <_Z23getFont_verdana_20_4bppv+0x56>
 8003dee:	4628      	mov	r0, r5
 8003df0:	f01b fe88 	bl	801fb04 <__cxa_guard_acquire>
 8003df4:	b1e8      	cbz	r0, 8003e32 <_Z23getFont_verdana_20_4bppv+0x56>
 8003df6:	233f      	movs	r3, #63	@ 0x3f
 8003df8:	2201      	movs	r2, #1
 8003dfa:	4910      	ldr	r1, [pc, #64]	@ (8003e3c <_Z23getFont_verdana_20_4bppv+0x60>)
 8003dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dfe:	4b10      	ldr	r3, [pc, #64]	@ (8003e40 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003e00:	4810      	ldr	r0, [pc, #64]	@ (8003e44 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003e02:	9308      	str	r3, [sp, #32]
 8003e04:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003e06:	940a      	str	r4, [sp, #40]	@ 0x28
 8003e08:	9405      	str	r4, [sp, #20]
 8003e0a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003e0e:	2304      	movs	r3, #4
 8003e10:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003e14:	2314      	movs	r3, #20
 8003e16:	220a      	movs	r2, #10
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003e1e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003e22:	f7ff fefd 	bl	8003c20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003e26:	4809      	ldr	r0, [pc, #36]	@ (8003e4c <_Z23getFont_verdana_20_4bppv+0x70>)
 8003e28:	f01c fa20 	bl	802026c <atexit>
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	f01b fe75 	bl	801fb1c <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8003e32:	4804      	ldr	r0, [pc, #16]	@ (8003e44 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003e34:	b00f      	add	sp, #60	@ 0x3c
 8003e36:	bd30      	pop	{r4, r5, pc}
 8003e38:	2400b0b8 	.word	0x2400b0b8
 8003e3c:	080248d8 	.word	0x080248d8
 8003e40:	08024978 	.word	0x08024978
 8003e44:	2400b0bc 	.word	0x2400b0bc
 8003e48:	08024984 	.word	0x08024984
 8003e4c:	08003dd9 	.word	0x08003dd9

08003e50 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003e50:	4770      	bx	lr
	...

08003e54 <_Z23getFont_verdana_40_4bppv>:
{
 8003e54:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003e56:	4d16      	ldr	r5, [pc, #88]	@ (8003eb0 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8003e58:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003e5a:	682c      	ldr	r4, [r5, #0]
 8003e5c:	f3bf 8f5b 	dmb	ish
 8003e60:	f014 0401 	ands.w	r4, r4, #1
 8003e64:	d120      	bne.n	8003ea8 <_Z23getFont_verdana_40_4bppv+0x54>
 8003e66:	4628      	mov	r0, r5
 8003e68:	f01b fe4c 	bl	801fb04 <__cxa_guard_acquire>
 8003e6c:	b1e0      	cbz	r0, 8003ea8 <_Z23getFont_verdana_40_4bppv+0x54>
 8003e6e:	233f      	movs	r3, #63	@ 0x3f
 8003e70:	2201      	movs	r2, #1
 8003e72:	4910      	ldr	r1, [pc, #64]	@ (8003eb4 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e76:	4b10      	ldr	r3, [pc, #64]	@ (8003eb8 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003e78:	4810      	ldr	r0, [pc, #64]	@ (8003ebc <_Z23getFont_verdana_40_4bppv+0x68>)
 8003e7a:	9308      	str	r3, [sp, #32]
 8003e7c:	4b10      	ldr	r3, [pc, #64]	@ (8003ec0 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003e7e:	940a      	str	r4, [sp, #40]	@ 0x28
 8003e80:	9405      	str	r4, [sp, #20]
 8003e82:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003e86:	2304      	movs	r3, #4
 8003e88:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003e8c:	2328      	movs	r3, #40	@ 0x28
 8003e8e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003e98:	f7ff fec2 	bl	8003c20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003e9c:	4809      	ldr	r0, [pc, #36]	@ (8003ec4 <_Z23getFont_verdana_40_4bppv+0x70>)
 8003e9e:	f01c f9e5 	bl	802026c <atexit>
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	f01b fe3a 	bl	801fb1c <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8003ea8:	4804      	ldr	r0, [pc, #16]	@ (8003ebc <_Z23getFont_verdana_40_4bppv+0x68>)
 8003eaa:	b00f      	add	sp, #60	@ 0x3c
 8003eac:	bd30      	pop	{r4, r5, pc}
 8003eae:	bf00      	nop
 8003eb0:	2400b0e8 	.word	0x2400b0e8
 8003eb4:	08024964 	.word	0x08024964
 8003eb8:	0802497c 	.word	0x0802497c
 8003ebc:	2400b0ec 	.word	0x2400b0ec
 8003ec0:	08024988 	.word	0x08024988
 8003ec4:	08003e51 	.word	0x08003e51

08003ec8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8003ec8:	2000      	movs	r0, #0
 8003eca:	4770      	bx	lr

08003ecc <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8003ecc:	2000      	movs	r0, #0
 8003ece:	4770      	bx	lr

08003ed0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003ed0:	b40e      	push	{r1, r2, r3}
 8003ed2:	b503      	push	{r0, r1, lr}
 8003ed4:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003ed6:	2100      	movs	r1, #0
{
 8003ed8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003edc:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003ede:	f00f fcc3 	bl	8013868 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003ee2:	b002      	add	sp, #8
 8003ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ee8:	b003      	add	sp, #12
 8003eea:	4770      	bx	lr

08003eec <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003eec:	b40c      	push	{r2, r3}
 8003eee:	b507      	push	{r0, r1, r2, lr}
 8003ef0:	ab04      	add	r3, sp, #16
 8003ef2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003ef6:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003ef8:	f00f fcb6 	bl	8013868 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003efc:	b003      	add	sp, #12
 8003efe:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f02:	b002      	add	sp, #8
 8003f04:	4770      	bx	lr
	...

08003f08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003f08:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8003f0a:	b510      	push	{r4, lr}
 8003f0c:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003f0e:	b373      	cbz	r3, 8003f6e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003f10:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8003f12:	b92b      	cbnz	r3, 8003f20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003f14:	4b18      	ldr	r3, [pc, #96]	@ (8003f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003f16:	21c5      	movs	r1, #197	@ 0xc5
 8003f18:	4a18      	ldr	r2, [pc, #96]	@ (8003f7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003f1a:	4819      	ldr	r0, [pc, #100]	@ (8003f80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003f1c:	f01c f988 	bl	8020230 <__assert_func>
            return buffer[pos];
 8003f20:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8003f22:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003f26:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003f28:	b30b      	cbz	r3, 8003f6e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003f2a:	f011 fa57 	bl	80153dc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003f2e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d803      	bhi.n	8003f3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003f34:	4b13      	ldr	r3, [pc, #76]	@ (8003f84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003f36:	21cb      	movs	r1, #203	@ 0xcb
 8003f38:	4a13      	ldr	r2, [pc, #76]	@ (8003f88 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003f3a:	e7ee      	b.n	8003f1a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003f3c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003f3e:	f640 103f 	movw	r0, #2367	@ 0x93f
 8003f42:	1c53      	adds	r3, r2, #1
 8003f44:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003f46:	2b09      	cmp	r3, #9
 8003f48:	4619      	mov	r1, r3
 8003f4a:	bf88      	it	hi
 8003f4c:	f1a3 010a 	subhi.w	r1, r3, #10
 8003f50:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003f54:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8003f56:	4281      	cmp	r1, r0
 8003f58:	d109      	bne.n	8003f6e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8003f5a:	2b0a      	cmp	r3, #10
 8003f5c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003f60:	bf28      	it	cs
 8003f62:	2300      	movcs	r3, #0
            return buffer[pos];
 8003f64:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003f66:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003f6a:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8003f6c:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003f6e:	4620      	mov	r0, r4
}
 8003f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003f74:	f011 b934 	b.w	80151e0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003f78:	080233d4 	.word	0x080233d4
 8003f7c:	080233dd 	.word	0x080233dd
 8003f80:	08023488 	.word	0x08023488
 8003f84:	080234e0 	.word	0x080234e0
 8003f88:	080234ee 	.word	0x080234ee

08003f8c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003f8c:	f011 b8f1 	b.w	8015172 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003f90 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8003f90:	b510      	push	{r4, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	ac02      	add	r4, sp, #8
 8003f96:	e884 0006 	stmia.w	r4, {r1, r2}
 8003f9a:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8003f9c:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003f9e:	4621      	mov	r1, r4
    va_start(pArg, format);
 8003fa0:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	9b08      	ldr	r3, [sp, #32]
 8003faa:	f00e f8ad 	bl	8012108 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003fae:	b006      	add	sp, #24
 8003fb0:	bd10      	pop	{r4, pc}
	...

08003fb4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003fb4:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003fb6:	bb18      	cbnz	r0, 8004000 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003fb8:	4b12      	ldr	r3, [pc, #72]	@ (8004004 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003fba:	4813      	ldr	r0, [pc, #76]	@ (8004008 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003fbc:	681c      	ldr	r4, [r3, #0]
 8003fbe:	4913      	ldr	r1, [pc, #76]	@ (800400c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003fc0:	b1b4      	cbz	r4, 8003ff0 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003fc2:	6822      	ldr	r2, [r4, #0]
 8003fc4:	4422      	add	r2, r4
 8003fc6:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003fc8:	6862      	ldr	r2, [r4, #4]
 8003fca:	4422      	add	r2, r4
 8003fcc:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003fce:	68a2      	ldr	r2, [r4, #8]
 8003fd0:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004010 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003fd8:	f000 f838 	bl	800404c <_ZN17TypedTextDatabase8getFontsEv>
 8003fdc:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003fde:	f000 f833 	bl	8004048 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8004014 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003fe4:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8004018 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003fe8:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003fea:	4b0c      	ldr	r3, [pc, #48]	@ (800401c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003fec:	8018      	strh	r0, [r3, #0]
    }
}
 8003fee:	e007      	b.n	8004000 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003ff2:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8004024 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003ff6:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8004028 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003ffa:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003ffc:	2c00      	cmp	r4, #0
 8003ffe:	d1e8      	bne.n	8003fd2 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004000:	bd38      	pop	{r3, r4, r5, pc}
 8004002:	bf00      	nop
 8004004:	2400b124 	.word	0x2400b124
 8004008:	2400b11c 	.word	0x2400b11c
 800400c:	2400b118 	.word	0x2400b118
 8004010:	2400b120 	.word	0x2400b120
 8004014:	24025198 	.word	0x24025198
 8004018:	240251a0 	.word	0x240251a0
 800401c:	2402519c 	.word	0x2402519c
 8004020:	900138a4 	.word	0x900138a4
 8004024:	90013880 	.word	0x90013880
 8004028:	900138c8 	.word	0x900138c8

0800402c <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800402c:	4b04      	ldr	r3, [pc, #16]	@ (8004040 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8004034:	4b03      	ldr	r3, [pc, #12]	@ (8004044 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	2400b118 	.word	0x2400b118
 8004044:	2400b11c 	.word	0x2400b11c

08004048 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8004048:	2009      	movs	r0, #9
 800404a:	4770      	bx	lr

0800404c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 800404c:	4800      	ldr	r0, [pc, #0]	@ (8004050 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800404e:	4770      	bx	lr
 8004050:	2400b128 	.word	0x2400b128

08004054 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004054:	b510      	push	{r4, lr}
};
 8004056:	4c05      	ldr	r4, [pc, #20]	@ (800406c <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8004058:	f7ff fec0 	bl	8003ddc <_Z23getFont_verdana_20_4bppv>
};
 800405c:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800405e:	f7ff fef9 	bl	8003e54 <_Z23getFont_verdana_40_4bppv>
};
 8004062:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8004064:	f7ff fe7e 	bl	8003d64 <_Z23getFont_verdana_10_4bppv>
};
 8004068:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800406a:	bd10      	pop	{r4, pc}
 800406c:	2400b128 	.word	0x2400b128

08004070 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8004070:	b510      	push	{r4, lr}
    pointArray = 0;
 8004072:	2400      	movs	r4, #0
 8004074:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8004076:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8004078:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 800407a:	601c      	str	r4, [r3, #0]
}
 800407c:	bd10      	pop	{r4, pc}

0800407e <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800407e:	4770      	bx	lr

08004080 <_ZN19FrontendApplicationD0Ev>:
 8004080:	b510      	push	{r4, lr}
 8004082:	4604      	mov	r4, r0
 8004084:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8004088:	f01b fd3a 	bl	801fb00 <_ZdlPvj>
 800408c:	4620      	mov	r0, r4
 800408e:	bd10      	pop	{r4, pc}

08004090 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8004090:	b510      	push	{r4, lr}
 8004092:	4604      	mov	r4, r0
    {
        model.tick();
 8004094:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8004098:	f000 f813 	bl	80040c2 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800409c:	4620      	mov	r0, r4
    }
 800409e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80040a2:	f00e bd15 	b.w	8012ad0 <_ZN8touchgfx11Application15handleTickEventEv>
	...

080040a8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80040a8:	b510      	push	{r4, lr}
 80040aa:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80040ac:	f7ff fd46 	bl	8003b3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80040b0:	4b01      	ldr	r3, [pc, #4]	@ (80040b8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80040b2:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80040b4:	6023      	str	r3, [r4, #0]
}
 80040b6:	bd10      	pop	{r4, pc}
 80040b8:	080235c8 	.word	0x080235c8

080040bc <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80040bc:	2200      	movs	r2, #0
 80040be:	6002      	str	r2, [r0, #0]
{

}
 80040c0:	4770      	bx	lr

080040c2 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80040c2:	4770      	bx	lr

080040c4 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 80040c4:	4770      	bx	lr

080040c6 <_ZThn4_N16Screen1PresenterD1Ev>:
 80040c6:	3804      	subs	r0, #4
 80040c8:	4770      	bx	lr

080040ca <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 80040ca:	4770      	bx	lr

080040cc <_ZN16Screen1PresenterD0Ev>:
 80040cc:	b510      	push	{r4, lr}
 80040ce:	4604      	mov	r4, r0
 80040d0:	2110      	movs	r1, #16
 80040d2:	f01b fd15 	bl	801fb00 <_ZdlPvj>
 80040d6:	4620      	mov	r0, r4
 80040d8:	bd10      	pop	{r4, pc}

080040da <_ZThn4_N16Screen1PresenterD0Ev>:
 80040da:	f1a0 0004 	sub.w	r0, r0, #4
 80040de:	e7f5      	b.n	80040cc <_ZN16Screen1PresenterD0Ev>

080040e0 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 80040e0:	2200      	movs	r2, #0
    : view(v)
 80040e2:	60c1      	str	r1, [r0, #12]
 80040e4:	6082      	str	r2, [r0, #8]
 80040e6:	4a02      	ldr	r2, [pc, #8]	@ (80040f0 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 80040e8:	6002      	str	r2, [r0, #0]
 80040ea:	3218      	adds	r2, #24
 80040ec:	6042      	str	r2, [r0, #4]
}
 80040ee:	4770      	bx	lr
 80040f0:	0802361c 	.word	0x0802361c

080040f4 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80040f4:	4770      	bx	lr

080040f6 <_ZN11Screen1View15handleTickEventEv>:
void Screen1View::buttonCallbackHandler(const touchgfx::AbstractButton& src) {
    shuffleButtons();
}

void Screen1View::handleTickEvent()
{
 80040f6:	b538      	push	{r3, r4, r5, lr}
 80040f8:	4605      	mov	r5, r0
 80040fa:	2400      	movs	r4, #0
    for(int i = 0; i<9; i++) {
    	buttons[i]->invalidate();
 80040fc:	f8d5 3304 	ldr.w	r3, [r5, #772]	@ 0x304
 8004100:	5918      	ldr	r0, [r3, r4]
    for(int i = 0; i<9; i++) {
 8004102:	3404      	adds	r4, #4
    	buttons[i]->invalidate();
 8004104:	6803      	ldr	r3, [r0, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	4798      	blx	r3
    for(int i = 0; i<9; i++) {
 800410a:	2c24      	cmp	r4, #36	@ 0x24
 800410c:	d1f6      	bne.n	80040fc <_ZN11Screen1View15handleTickEventEv+0x6>
    }
}
 800410e:	bd38      	pop	{r3, r4, r5, pc}

08004110 <_ZN8touchgfx8CallbackI11Screen1ViewRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004110:	4770      	bx	lr

08004112 <_ZN8touchgfx8CallbackI11Screen1ViewRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8004112:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004114:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004116:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004118:	68c2      	ldr	r2, [r0, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	1055      	asrs	r5, r2, #1
 800411e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004122:	07d2      	lsls	r2, r2, #31
 8004124:	bf48      	it	mi
 8004126:	5962      	ldrmi	r2, [r4, r5]
    }
 8004128:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 800412a:	bf48      	it	mi
 800412c:	58d3      	ldrmi	r3, [r2, r3]
 800412e:	4718      	bx	r3

08004130 <_ZNK8touchgfx8CallbackI11Screen1ViewRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8004130:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004132:	6840      	ldr	r0, [r0, #4]
 8004134:	b130      	cbz	r0, 8004144 <_ZNK8touchgfx8CallbackI11Screen1ViewRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	b91a      	cbnz	r2, 8004142 <_ZNK8touchgfx8CallbackI11Screen1ViewRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 800413a:	68d8      	ldr	r0, [r3, #12]
 800413c:	f000 0001 	and.w	r0, r0, #1
 8004140:	4770      	bx	lr
 8004142:	2001      	movs	r0, #1
    }
 8004144:	4770      	bx	lr

08004146 <_ZN8touchgfx8CallbackI11Screen1ViewRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004146:	b510      	push	{r4, lr}
 8004148:	4604      	mov	r4, r0
 800414a:	2110      	movs	r1, #16
 800414c:	f01b fcd8 	bl	801fb00 <_ZdlPvj>
 8004150:	4620      	mov	r0, r4
 8004152:	bd10      	pop	{r4, pc}

08004154 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8004154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return typedTextId < numberOfTypedTexts;
 8004156:	4b19      	ldr	r3, [pc, #100]	@ (80041bc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x68>)
 8004158:	4606      	mov	r6, r0
 800415a:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
    {
        if (typedText.hasValidId())
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	428b      	cmp	r3, r1
 8004160:	d92a      	bls.n	80041b8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004162:	4b17      	ldr	r3, [pc, #92]	@ (80041c0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	b92b      	cbnz	r3, 8004174 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8004168:	4b16      	ldr	r3, [pc, #88]	@ (80041c4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 800416a:	216c      	movs	r1, #108	@ 0x6c
 800416c:	4a16      	ldr	r2, [pc, #88]	@ (80041c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 800416e:	4817      	ldr	r0, [pc, #92]	@ (80041cc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 8004170:	f01c f85e 	bl	8020230 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 8004174:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8004178:	4b15      	ldr	r3, [pc, #84]	@ (80041d0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8004180:	4b14      	ldr	r3, [pc, #80]	@ (80041d4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	f7ff ff52 	bl	800402c <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8004188:	682b      	ldr	r3, [r5, #0]
 800418a:	4607      	mov	r7, r0
 800418c:	4628      	mov	r0, r5
 800418e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004190:	4798      	blx	r3
 8004192:	682b      	ldr	r3, [r5, #0]
 8004194:	4604      	mov	r4, r0
 8004196:	4639      	mov	r1, r7
 8004198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800419a:	4628      	mov	r0, r5
 800419c:	4798      	blx	r3
 800419e:	fb14 f400 	smulbb	r4, r4, r0
 80041a2:	682b      	ldr	r3, [r5, #0]
 80041a4:	4639      	mov	r1, r7
 80041a6:	b2a4      	uxth	r4, r4
 80041a8:	4628      	mov	r0, r5
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	4798      	blx	r3
 80041ae:	1823      	adds	r3, r4, r0
 80041b0:	b21b      	sxth	r3, r3
 80041b2:	f8a6 3046 	strh.w	r3, [r6, #70]	@ 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 80041b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041b8:	2300      	movs	r3, #0
 80041ba:	e7fa      	b.n	80041b2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5e>
 80041bc:	2402519c 	.word	0x2402519c
 80041c0:	24025198 	.word	0x24025198
 80041c4:	0802363c 	.word	0x0802363c
 80041c8:	0802367e 	.word	0x0802367e
 80041cc:	080236b9 	.word	0x080236b9
 80041d0:	240251a0 	.word	0x240251a0
 80041d4:	240251a4 	.word	0x240251a4

080041d8 <_ZNSt12_Vector_baseIPN8touchgfx15ButtonWithLabelESaIS2_EED1Ev>:
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }
#endif

      _GLIBCXX20_CONSTEXPR
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80041d8:	b510      	push	{r4, lr}
 80041da:	4604      	mov	r4, r0
      {
	_M_deallocate(_M_impl._M_start,
 80041dc:	6800      	ldr	r0, [r0, #0]
      _GLIBCXX20_CONSTEXPR
      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 80041de:	b118      	cbz	r0, 80041e8 <_ZNSt12_Vector_baseIPN8touchgfx15ButtonWithLabelESaIS2_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80041e0:	68a1      	ldr	r1, [r4, #8]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80041e2:	1a09      	subs	r1, r1, r0
 80041e4:	f01b fc8c 	bl	801fb00 <_ZdlPvj>
      }
 80041e8:	4620      	mov	r0, r4
 80041ea:	bd10      	pop	{r4, pc}

080041ec <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80041ec:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <_ZN11Screen1ViewD1Ev+0x1c>)
 80041ee:	b510      	push	{r4, lr}
 80041f0:	4604      	mov	r4, r0
 80041f2:	6003      	str	r3, [r0, #0]
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80041f4:	f500 7041 	add.w	r0, r0, #772	@ 0x304
 80041f8:	f7ff ffee 	bl	80041d8 <_ZNSt12_Vector_baseIPN8touchgfx15ButtonWithLabelESaIS2_EED1Ev>
 80041fc:	4620      	mov	r0, r4
 80041fe:	f7ff fd44 	bl	8003c8a <_ZN15Screen1ViewBaseD1Ev>
 8004202:	4620      	mov	r0, r4
 8004204:	bd10      	pop	{r4, pc}
 8004206:	bf00      	nop
 8004208:	0802377c 	.word	0x0802377c

0800420c <_ZN11Screen1ViewD0Ev>:
 800420c:	b510      	push	{r4, lr}
 800420e:	4604      	mov	r4, r0
 8004210:	f7ff ffec 	bl	80041ec <_ZN11Screen1ViewD1Ev>
 8004214:	f44f 7144 	mov.w	r1, #784	@ 0x310
 8004218:	4620      	mov	r0, r4
 800421a:	f01b fc71 	bl	801fb00 <_ZdlPvj>
 800421e:	4620      	mov	r0, r4
 8004220:	bd10      	pop	{r4, pc}

08004222 <_ZNSt12_Vector_baseI5TEXTSSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8004222:	b510      	push	{r4, lr}
 8004224:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 8004226:	6800      	ldr	r0, [r0, #0]
	if (__p)
 8004228:	b118      	cbz	r0, 8004232 <_ZNSt12_Vector_baseI5TEXTSSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800422a:	68a1      	ldr	r1, [r4, #8]
 800422c:	1a09      	subs	r1, r1, r0
 800422e:	f01b fc67 	bl	801fb00 <_ZdlPvj>
      }
 8004232:	4620      	mov	r0, r4
 8004234:	bd10      	pop	{r4, pc}
	...

08004238 <_ZNSt6vectorIPN8touchgfx15ButtonWithLabelESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8004238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800423c:	e9d0 8a00 	ldrd	r8, sl, [r0]
 8004240:	4693      	mov	fp, r2
      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 8004242:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004246:	ebaa 0208 	sub.w	r2, sl, r8
 800424a:	4607      	mov	r7, r0
 800424c:	4689      	mov	r9, r1
	if (max_size() - size() < __n)
 800424e:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004252:	ea4f 04a2 	mov.w	r4, r2, asr #2
	if (max_size() - size() < __n)
 8004256:	d102      	bne.n	800425e <_ZNSt6vectorIPN8touchgfx15ButtonWithLabelESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 8004258:	481e      	ldr	r0, [pc, #120]	@ (80042d4 <_ZNSt6vectorIPN8touchgfx15ButtonWithLabelESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x9c>)
 800425a:	f01b fc79 	bl	801fb50 <_ZSt20__throw_length_errorPKc>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800425e:	45c2      	cmp	sl, r8
 8004260:	bf14      	ite	ne
 8004262:	4622      	movne	r2, r4
 8004264:	2201      	moveq	r2, #1
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8004266:	eba1 0508 	sub.w	r5, r1, r8
 800426a:	18a4      	adds	r4, r4, r2

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800426c:	d22e      	bcs.n	80042cc <_ZNSt6vectorIPN8touchgfx15ButtonWithLabelESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x94>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800426e:	b37c      	cbz	r4, 80042d0 <_ZNSt6vectorIPN8touchgfx15ButtonWithLabelESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x98>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004270:	429c      	cmp	r4, r3
 8004272:	bf28      	it	cs
 8004274:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8004276:	00a0      	lsls	r0, r4, #2
 8004278:	f01b fc53 	bl	801fb22 <_Znwj>
 800427c:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800427e:	f8db 3000 	ldr.w	r3, [fp]
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result,
		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 8004282:	2d00      	cmp	r5, #0
 8004284:	5173      	str	r3, [r6, r5]
 8004286:	dd04      	ble.n	8004292 <_ZNSt6vectorIPN8touchgfx15ButtonWithLabelESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x5a>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8004288:	462a      	mov	r2, r5
 800428a:	4641      	mov	r1, r8
 800428c:	4630      	mov	r0, r6
 800428e:	f01c faa9 	bl	80207e4 <memmove>
      ptrdiff_t __count = __last - __first;
 8004292:	ebaa 0a09 	sub.w	sl, sl, r9
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 8004296:	3504      	adds	r5, #4
      if (__count > 0)
 8004298:	f1ba 0f00 	cmp.w	sl, #0
 800429c:	4435      	add	r5, r6
 800429e:	dd04      	ble.n	80042aa <_ZNSt6vectorIPN8touchgfx15ButtonWithLabelESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x72>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80042a0:	4652      	mov	r2, sl
 80042a2:	4649      	mov	r1, r9
 80042a4:	4628      	mov	r0, r5
 80042a6:	f01c fb98 	bl	80209da <memcpy>
	}
      return __result + __count;
 80042aa:	4455      	add	r5, sl
	if (__p)
 80042ac:	f1b8 0f00 	cmp.w	r8, #0
 80042b0:	d005      	beq.n	80042be <_ZNSt6vectorIPN8touchgfx15ButtonWithLabelESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x86>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 80042b2:	68b9      	ldr	r1, [r7, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80042b4:	4640      	mov	r0, r8
 80042b6:	eba1 0108 	sub.w	r1, r1, r8
 80042ba:	f01b fc21 	bl	801fb00 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
 80042be:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80042c2:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 80042c6:	60be      	str	r6, [r7, #8]
    }
 80042c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80042cc:	461c      	mov	r4, r3
 80042ce:	e7d2      	b.n	8004276 <_ZNSt6vectorIPN8touchgfx15ButtonWithLabelESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80042d0:	4626      	mov	r6, r4
 80042d2:	e7d4      	b.n	800427e <_ZNSt6vectorIPN8touchgfx15ButtonWithLabelESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x46>
 80042d4:	0802370e 	.word	0x0802370e

080042d8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI5TEXTSEEPT_PKS4_S7_S5_>:
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
	_GLIBCXX20_CONSTEXPR
	static _Tp*
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80042d8:	b510      	push	{r4, lr}
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 80042da:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80042dc:	4613      	mov	r3, r2
	  if (_Num)
 80042de:	d005      	beq.n	80042ec <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI5TEXTSEEPT_PKS4_S7_S5_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80042e0:	4601      	mov	r1, r0
 80042e2:	4622      	mov	r2, r4
 80042e4:	4618      	mov	r0, r3
 80042e6:	f01c fa7d 	bl	80207e4 <memmove>
 80042ea:	4603      	mov	r3, r0
	  return __result + _Num;
	}
 80042ec:	1918      	adds	r0, r3, r4
 80042ee:	bd10      	pop	{r4, pc}

080042f0 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_>:
      if (std::__addressof(__x) != this)
 80042f0:	4281      	cmp	r1, r0
			 - this->_M_impl._M_start); }
 80042f2:	680a      	ldr	r2, [r1, #0]
    a = b;
    b = temp;
}

template<typename T>
void shuffle(const std::vector<T>& input, std::vector<T>& output) {
 80042f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042f8:	4605      	mov	r5, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	d020      	beq.n	8004340 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x50>
 80042fe:	688b      	ldr	r3, [r1, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004300:	e9d0 7800 	ldrd	r7, r8, [r0]
			 - this->_M_impl._M_start); }
 8004304:	1a9b      	subs	r3, r3, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004306:	eba8 0607 	sub.w	r6, r8, r7
	  if (__xlen > capacity())
 800430a:	429e      	cmp	r6, r3
 800430c:	d920      	bls.n	8004350 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x60>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800430e:	2e00      	cmp	r6, #0
 8004310:	da01      	bge.n	8004316 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x26>
	    std::__throw_bad_alloc();
 8004312:	f01b fc1a 	bl	801fb4a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8004316:	4630      	mov	r0, r6
 8004318:	f01b fc03 	bl	801fb22 <_Znwj>
      if (std::is_constant_evaluated())
	return std::__copy_move<_IsMove, false, _Category>::
	  __copy_m(__first, __last, __result);
#endif
      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
			      _Category>::__copy_m(__first, __last, __result);
 800431c:	4641      	mov	r1, r8
 800431e:	4602      	mov	r2, r0
 8004320:	4605      	mov	r5, r0
 8004322:	4638      	mov	r0, r7
 8004324:	f7ff ffd8 	bl	80042d8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI5TEXTSEEPT_PKS4_S7_S5_>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004328:	6820      	ldr	r0, [r4, #0]
	if (__p)
 800432a:	b118      	cbz	r0, 8004334 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x44>
			    - this->_M_impl._M_start);
 800432c:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800432e:	1a09      	subs	r1, r1, r0
 8004330:	f01b fbe6 	bl	801fb00 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 8004334:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8004336:	4435      	add	r5, r6
 8004338:	60a5      	str	r5, [r4, #8]
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	4433      	add	r3, r6
 800433e:	6063      	str	r3, [r4, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004340:	e9d4 3500 	ldrd	r3, r5, [r4]
 8004344:	1aed      	subs	r5, r5, r3
    output = input;

    int n = output.size();
    for (int i = n - 1; i > 0; --i) {
 8004346:	3d01      	subs	r5, #1
 8004348:	2d00      	cmp	r5, #0
 800434a:	dc15      	bgt.n	8004378 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x88>
        int rand_index = rand() % (i + 1);
        T temp = output[i];
        output[i] = output[rand_index];
        output[rand_index] = temp;
    }
}
 800434c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004350:	684b      	ldr	r3, [r1, #4]
 8004352:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
 8004354:	429e      	cmp	r6, r3
 8004356:	d804      	bhi.n	8004362 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x72>
 8004358:	4641      	mov	r1, r8
 800435a:	4638      	mov	r0, r7
 800435c:	f7ff ffbc 	bl	80042d8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI5TEXTSEEPT_PKS4_S7_S5_>
      return std::uninitialized_copy(__first, __last, __result);
 8004360:	e7eb      	b.n	800433a <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x4a>
 8004362:	18f9      	adds	r1, r7, r3
 8004364:	4638      	mov	r0, r7
 8004366:	f7ff ffb7 	bl	80042d8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI5TEXTSEEPT_PKS4_S7_S5_>
 800436a:	e9d4 0200 	ldrd	r0, r2, [r4]
 800436e:	e9d5 3100 	ldrd	r3, r1, [r5]
 8004372:	1a10      	subs	r0, r2, r0
 8004374:	4418      	add	r0, r3
 8004376:	e7f1      	b.n	800435c <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x6c>
        int rand_index = rand() % (i + 1);
 8004378:	f01c f83c 	bl	80203f4 <rand>
 800437c:	1c6a      	adds	r2, r5, #1
	return *(this->_M_impl._M_start + __n);
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	fb90 f6f2 	sdiv	r6, r0, r2
 8004384:	fb06 0012 	mls	r0, r6, r2, r0
        T temp = output[i];
 8004388:	5d59      	ldrb	r1, [r3, r5]
        output[i] = output[rand_index];
 800438a:	5c1a      	ldrb	r2, [r3, r0]
 800438c:	555a      	strb	r2, [r3, r5]
        output[rand_index] = temp;
 800438e:	5419      	strb	r1, [r3, r0]
 8004390:	e7d9      	b.n	8004346 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x56>
	...

08004394 <_ZNSt6vectorI5TEXTSSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 8004396:	1a54      	subs	r4, r2, r1
 8004398:	4605      	mov	r5, r0
 800439a:	460e      	mov	r6, r1
 800439c:	4617      	mov	r7, r2

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800439e:	2c00      	cmp	r4, #0
 80043a0:	da02      	bge.n	80043a8 <_ZNSt6vectorI5TEXTSSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x14>
	  __throw_length_error(
 80043a2:	4809      	ldr	r0, [pc, #36]	@ (80043c8 <_ZNSt6vectorI5TEXTSSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x34>)
 80043a4:	f01b fbd4 	bl	801fb50 <_ZSt20__throw_length_errorPKc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80043a8:	d00c      	beq.n	80043c4 <_ZNSt6vectorI5TEXTSSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x30>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80043aa:	4620      	mov	r0, r4
 80043ac:	f01b fbb9 	bl	801fb22 <_Znwj>
 80043b0:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80043b2:	4414      	add	r4, r2
 80043b4:	4639      	mov	r1, r7
 80043b6:	4630      	mov	r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80043b8:	602a      	str	r2, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80043ba:	60ac      	str	r4, [r5, #8]
 80043bc:	f7ff ff8c 	bl	80042d8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI5TEXTSEEPT_PKS4_S7_S5_>
	  this->_M_impl._M_finish =
 80043c0:	6068      	str	r0, [r5, #4]
	}
 80043c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80043c4:	4622      	mov	r2, r4
 80043c6:	e7f4      	b.n	80043b2 <_ZNSt6vectorI5TEXTSSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x1e>
 80043c8:	08023728 	.word	0x08023728

080043cc <_ZN11Screen1View14shuffleButtonsEv>:
void Screen1View::shuffleButtons() {
 80043cc:	b530      	push	{r4, r5, lr}
    std::vector<TEXTS> number_list = {T_NINE, T_EIGHT, T_SEVEN, T_SIX, T_FIVE, T_FOUR, T_THREE, T_TWO, T_ONE};
 80043ce:	4a17      	ldr	r2, [pc, #92]	@ (800442c <_ZN11Screen1View14shuffleButtonsEv+0x60>)
void Screen1View::shuffleButtons() {
 80043d0:	b087      	sub	sp, #28
 80043d2:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 80043d4:	2400      	movs	r4, #0
    std::vector<TEXTS> number_list = {T_NINE, T_EIGHT, T_SEVEN, T_SIX, T_FIVE, T_FOUR, T_THREE, T_TWO, T_ONE};
 80043d6:	6810      	ldr	r0, [r2, #0]
 80043d8:	ab03      	add	r3, sp, #12
 80043da:	6851      	ldr	r1, [r2, #4]
 80043dc:	7a12      	ldrb	r2, [r2, #8]
 80043de:	9402      	str	r4, [sp, #8]
 80043e0:	c303      	stmia	r3!, {r0, r1}
	_M_range_initialize(__l.begin(), __l.end(),
 80043e2:	a903      	add	r1, sp, #12
 80043e4:	4668      	mov	r0, sp
 80043e6:	701a      	strb	r2, [r3, #0]
 80043e8:	f10d 0215 	add.w	r2, sp, #21
	: _M_start(), _M_finish(), _M_end_of_storage()
 80043ec:	e9cd 4400 	strd	r4, r4, [sp]
	_M_range_initialize(__l.begin(), __l.end(),
 80043f0:	f7ff ffd0 	bl	8004394 <_ZNSt6vectorI5TEXTSSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
    shuffle(number_list, shuffled_numbers);
 80043f4:	a903      	add	r1, sp, #12
 80043f6:	4668      	mov	r0, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 80043f8:	9405      	str	r4, [sp, #20]
 80043fa:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80043fe:	f7ff ff77 	bl	80042f0 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_>
    	buttons[i]->setLabelText(touchgfx::TypedText(shuffled_numbers[i]));
 8004402:	f8d5 3304 	ldr.w	r3, [r5, #772]	@ 0x304
 8004406:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800440a:	9b03      	ldr	r3, [sp, #12]
 800440c:	5d1b      	ldrb	r3, [r3, r4]
    for(int i = 0; i<9; i++) {
 800440e:	3401      	adds	r4, #1
    	buttons[i]->setLabelText(touchgfx::TypedText(shuffled_numbers[i]));
 8004410:	8703      	strh	r3, [r0, #56]	@ 0x38
        updateTextPosition();
 8004412:	f7ff fe9f 	bl	8004154 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    for(int i = 0; i<9; i++) {
 8004416:	2c09      	cmp	r4, #9
 8004418:	d1f3      	bne.n	8004402 <_ZN11Screen1View14shuffleButtonsEv+0x36>
      }
 800441a:	a803      	add	r0, sp, #12
 800441c:	f7ff ff01 	bl	8004222 <_ZNSt12_Vector_baseI5TEXTSSaIS0_EED1Ev>
 8004420:	4668      	mov	r0, sp
 8004422:	f7ff fefe 	bl	8004222 <_ZNSt12_Vector_baseI5TEXTSSaIS0_EED1Ev>
}
 8004426:	b007      	add	sp, #28
 8004428:	bd30      	pop	{r4, r5, pc}
 800442a:	bf00      	nop
 800442c:	08021360 	.word	0x08021360

08004430 <_ZN11Screen1View21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:
    shuffleButtons();
 8004430:	f7ff bfcc 	b.w	80043cc <_ZN11Screen1View14shuffleButtonsEv>

08004434 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View():
 8004434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004438:	b08f      	sub	sp, #60	@ 0x3c
 800443a:	4605      	mov	r5, r0
	buttonCallback(this, &Screen1View::buttonCallbackHandler)
 800443c:	f7ff fc30 	bl	8003ca0 <_ZN15Screen1ViewBaseC1Ev>
 8004440:	4b3d      	ldr	r3, [pc, #244]	@ (8004538 <_ZN11Screen1ViewC1Ev+0x104>)
    std::vector<TEXTS> number_list = {T_NINE, T_EIGHT, T_SEVEN, T_SIX, T_FIVE, T_FOUR, T_THREE, T_TWO, T_ONE};
 8004442:	4a3e      	ldr	r2, [pc, #248]	@ (800453c <_ZN11Screen1ViewC1Ev+0x108>)
        : pobject(pObject), pmemfun(pmemfun_1)
 8004444:	2400      	movs	r4, #0
	buttonCallback(this, &Screen1View::buttonCallbackHandler)
 8004446:	602b      	str	r3, [r5, #0]
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8004448:	f04f 0a01 	mov.w	sl, #1
 800444c:	4b3c      	ldr	r3, [pc, #240]	@ (8004540 <_ZN11Screen1ViewC1Ev+0x10c>)
    int counter = 0;
 800444e:	46a1      	mov	r9, r4
    std::vector<TEXTS> number_list = {T_NINE, T_EIGHT, T_SEVEN, T_SIX, T_FIVE, T_FOUR, T_THREE, T_TWO, T_ONE};
 8004450:	6810      	ldr	r0, [r2, #0]
			button->setXY(buttonX, buttonY);
 8004452:	46a3      	mov	fp, r4
    std::vector<TEXTS> number_list = {T_NINE, T_EIGHT, T_SEVEN, T_SIX, T_FIVE, T_FOUR, T_THREE, T_TWO, T_ONE};
 8004454:	6851      	ldr	r1, [r2, #4]
 8004456:	7a12      	ldrb	r2, [r2, #8]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004458:	9407      	str	r4, [sp, #28]
 800445a:	940a      	str	r4, [sp, #40]	@ 0x28
 800445c:	e9c5 35bd 	strd	r3, r5, [r5, #756]	@ 0x2f4
 8004460:	4b38      	ldr	r3, [pc, #224]	@ (8004544 <_ZN11Screen1ViewC1Ev+0x110>)
 8004462:	f8c5 32fc 	str.w	r3, [r5, #764]	@ 0x2fc
 8004466:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004468:	e9c5 44c0 	strd	r4, r4, [r5, #768]	@ 0x300
 800446c:	c303      	stmia	r3!, {r0, r1}
 800446e:	e9c5 44c2 	strd	r4, r4, [r5, #776]	@ 0x308
 8004472:	701a      	strb	r2, [r3, #0]
	_M_range_initialize(__l.begin(), __l.end(),
 8004474:	a90b      	add	r1, sp, #44	@ 0x2c
 8004476:	f10d 0235 	add.w	r2, sp, #53	@ 0x35
 800447a:	a808      	add	r0, sp, #32
	: _M_start(), _M_finish(), _M_end_of_storage()
 800447c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8004480:	e9cd 4408 	strd	r4, r4, [sp, #32]
	_M_range_initialize(__l.begin(), __l.end(),
 8004484:	f7ff ff86 	bl	8004394 <_ZNSt6vectorI5TEXTSSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
    shuffle(number_list, shuffled_numbers);
 8004488:	a90b      	add	r1, sp, #44	@ 0x2c
 800448a:	a808      	add	r0, sp, #32
	: _M_start(), _M_finish(), _M_end_of_storage()
 800448c:	940d      	str	r4, [sp, #52]	@ 0x34
 800448e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004492:	f7ff ff2d 	bl	80042f0 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_>
			button->setXY(buttonX, buttonY);
 8004496:	b223      	sxth	r3, r4
 8004498:	46c8      	mov	r8, r9
 800449a:	2700      	movs	r7, #0
 800449c:	9301      	str	r3, [sp, #4]
			ButtonWithLabel* button = new ButtonWithLabel();
 800449e:	2048      	movs	r0, #72	@ 0x48
 80044a0:	f01b fb3f 	bl	801fb22 <_Znwj>
 80044a4:	4606      	mov	r6, r0
 80044a6:	f00b ff27 	bl	80102f8 <_ZN8touchgfx15ButtonWithLabelC1Ev>
        rect.y = y;
 80044aa:	9b01      	ldr	r3, [sp, #4]
			button->setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_FILL_PRESSED_ID));
 80044ac:	a902      	add	r1, sp, #8
 80044ae:	aa03      	add	r2, sp, #12
 80044b0:	80f3      	strh	r3, [r6, #6]
 80044b2:	4630      	mov	r0, r6
        rect.x = x;
 80044b4:	80b7      	strh	r7, [r6, #4]
			ButtonWithLabel* button = new ButtonWithLabel();
 80044b6:	9604      	str	r6, [sp, #16]
 80044b8:	f8ad b008 	strh.w	fp, [sp, #8]
 80044bc:	f8ad a00c 	strh.w	sl, [sp, #12]
			button->setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_FILL_PRESSED_ID));
 80044c0:	f00b fd91 	bl	800ffe6 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
			button->setLabelText(touchgfx::TypedText(shuffled_numbers[counter++]));
 80044c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80044c6:	4630      	mov	r0, r6
 80044c8:	f812 2008 	ldrb.w	r2, [r2, r8]
 80044cc:	8732      	strh	r2, [r6, #56]	@ 0x38
 80044ce:	f7ff fe41 	bl	8004154 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 80044d2:	f04f 32ff 	mov.w	r2, #4294967295
 80044d6:	4631      	mov	r1, r6
 80044d8:	1d28      	adds	r0, r5, #4
        colorPressed = col;
 80044da:	e9c6 220f 	strd	r2, r2, [r6, #60]	@ 0x3c
			button->setAction(buttonCallback);
 80044de:	f505 723d 	add.w	r2, r5, #756	@ 0x2f4
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 80044e2:	62b2      	str	r2, [r6, #40]	@ 0x28
 80044e4:	f009 f808 	bl	800d4f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80044e8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80044ec:	4291      	cmp	r1, r2
 80044ee:	d01d      	beq.n	800452c <_ZN11Screen1ViewC1Ev+0xf8>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80044f0:	f841 6b04 	str.w	r6, [r1], #4
	    ++this->_M_impl._M_finish;
 80044f4:	9106      	str	r1, [sp, #24]
		for (int col = 0; col < 3; col++) {
 80044f6:	376e      	adds	r7, #110	@ 0x6e
 80044f8:	f108 0801 	add.w	r8, r8, #1
 80044fc:	b2bf      	uxth	r7, r7
 80044fe:	f5b7 7fa5 	cmp.w	r7, #330	@ 0x14a
 8004502:	d1cc      	bne.n	800449e <_ZN11Screen1ViewC1Ev+0x6a>
			button->setLabelText(touchgfx::TypedText(shuffled_numbers[counter++]));
 8004504:	f109 0903 	add.w	r9, r9, #3
	for (int row = 0; row < 3; row++) {
 8004508:	346e      	adds	r4, #110	@ 0x6e
 800450a:	f1b9 0f09 	cmp.w	r9, #9
 800450e:	b2a4      	uxth	r4, r4
 8004510:	d1c1      	bne.n	8004496 <_ZN11Screen1ViewC1Ev+0x62>
      }
 8004512:	a80b      	add	r0, sp, #44	@ 0x2c
 8004514:	f7ff fe85 	bl	8004222 <_ZNSt12_Vector_baseI5TEXTSSaIS0_EED1Ev>
 8004518:	a808      	add	r0, sp, #32
 800451a:	f7ff fe82 	bl	8004222 <_ZNSt12_Vector_baseI5TEXTSSaIS0_EED1Ev>
 800451e:	a805      	add	r0, sp, #20
 8004520:	f7ff fe5a 	bl	80041d8 <_ZNSt12_Vector_baseIPN8touchgfx15ButtonWithLabelESaIS2_EED1Ev>
}
 8004524:	4628      	mov	r0, r5
 8004526:	b00f      	add	sp, #60	@ 0x3c
 8004528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  _M_realloc_insert(end(), __x);
 800452c:	aa04      	add	r2, sp, #16
 800452e:	a805      	add	r0, sp, #20
 8004530:	f7ff fe82 	bl	8004238 <_ZNSt6vectorIPN8touchgfx15ButtonWithLabelESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
 8004534:	e7df      	b.n	80044f6 <_ZN11Screen1ViewC1Ev+0xc2>
 8004536:	bf00      	nop
 8004538:	0802377c 	.word	0x0802377c
 800453c:	08021360 	.word	0x08021360
 8004540:	08023764 	.word	0x08023764
 8004544:	08004431 	.word	0x08004431

08004548 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8004548:	f7ff bba0 	b.w	8003c8c <_ZN15Screen1ViewBase11setupScreenEv>

0800454c <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800454c:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800454e:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 8004552:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8004554:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8004556:	2302      	movs	r3, #2
 8004558:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800455a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800455e:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8004562:	4770      	bx	lr

08004564 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8004564:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8004568:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 800456a:	bf04      	itt	eq
 800456c:	2300      	moveq	r3, #0
 800456e:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8004572:	2000      	movs	r0, #0
 8004574:	4770      	bx	lr

08004576 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8004576:	2000      	movs	r0, #0
 8004578:	4770      	bx	lr

0800457a <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800457a:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800457c:	6904      	ldr	r4, [r0, #16]
 800457e:	8900      	ldrh	r0, [r0, #8]
 8004580:	46a4      	mov	ip, r4
}
 8004582:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004586:	4760      	bx	ip

08004588 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004588:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800458a:	68c4      	ldr	r4, [r0, #12]
 800458c:	8900      	ldrh	r0, [r0, #8]
 800458e:	46a4      	mov	ip, r4
}
 8004590:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004594:	4760      	bx	ip

08004596 <FT6X06_GestureConfig>:
{
 8004596:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004598:	f100 0518 	add.w	r5, r0, #24
{
 800459c:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800459e:	7809      	ldrb	r1, [r1, #0]
 80045a0:	4628      	mov	r0, r5
 80045a2:	f000 f911 	bl	80047c8 <ft6x06_radian_value>
 80045a6:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80045a8:	7931      	ldrb	r1, [r6, #4]
 80045aa:	4628      	mov	r0, r5
 80045ac:	f000 f918 	bl	80047e0 <ft6x06_offset_left_right>
 80045b0:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80045b2:	7a31      	ldrb	r1, [r6, #8]
 80045b4:	4628      	mov	r0, r5
 80045b6:	f000 f91f 	bl	80047f8 <ft6x06_offset_up_down>
 80045ba:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80045bc:	7b31      	ldrb	r1, [r6, #12]
 80045be:	4628      	mov	r0, r5
 80045c0:	f000 f926 	bl	8004810 <ft6x06_disatnce_left_right>
 80045c4:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80045c6:	7c31      	ldrb	r1, [r6, #16]
 80045c8:	4628      	mov	r0, r5
 80045ca:	f000 f92d 	bl	8004828 <ft6x06_distance_up_down>
 80045ce:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80045d0:	7d31      	ldrb	r1, [r6, #20]
 80045d2:	4628      	mov	r0, r5
 80045d4:	f000 f934 	bl	8004840 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 80045d8:	42c4      	cmn	r4, r0
}
 80045da:	bf14      	ite	ne
 80045dc:	f04f 30ff 	movne.w	r0, #4294967295
 80045e0:	2000      	moveq	r0, #0
 80045e2:	bd70      	pop	{r4, r5, r6, pc}

080045e4 <FT6X06_ReadID>:
{
 80045e4:	b513      	push	{r0, r1, r4, lr}
 80045e6:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 80045e8:	3018      	adds	r0, #24
 80045ea:	f10d 0107 	add.w	r1, sp, #7
 80045ee:	f000 f93f 	bl	8004870 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 80045f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80045f6:	6023      	str	r3, [r4, #0]
}
 80045f8:	b002      	add	sp, #8
 80045fa:	bd10      	pop	{r4, pc}

080045fc <FT6X06_GetState>:
{
 80045fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80045fe:	f100 0518 	add.w	r5, r0, #24
{
 8004602:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004604:	a901      	add	r1, sp, #4
 8004606:	4628      	mov	r0, r5
 8004608:	f000 f8d1 	bl	80047ae <ft6x06_td_status>
 800460c:	bb08      	cbnz	r0, 8004652 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800460e:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8004612:	2b02      	cmp	r3, #2
 8004614:	bf98      	it	ls
 8004616:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004618:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 800461a:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800461c:	2103      	movs	r1, #3
 800461e:	4628      	mov	r0, r5
 8004620:	eb0d 0203 	add.w	r2, sp, r3
 8004624:	f000 f8b0 	bl	8004788 <ft6x06_read_reg>
 8004628:	b9b0      	cbnz	r0, 8004658 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800462a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800462e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004638:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800463a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800463e:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004640:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004644:	021b      	lsls	r3, r3, #8
 8004646:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800464a:	4313      	orrs	r3, r2
 800464c:	60a3      	str	r3, [r4, #8]
}
 800464e:	b003      	add	sp, #12
 8004650:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004652:	f04f 30ff 	mov.w	r0, #4294967295
 8004656:	e7df      	b.n	8004618 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800465c:	e7f7      	b.n	800464e <FT6X06_GetState+0x52>

0800465e <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 800465e:	3018      	adds	r0, #24
 8004660:	f000 b8a0 	b.w	80047a4 <ft6x06_gest_id>

08004664 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8004664:	2101      	movs	r1, #1
 8004666:	3018      	adds	r0, #24
 8004668:	f000 b8f6 	b.w	8004858 <ft6x06_g_mode>

0800466c <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 800466c:	2100      	movs	r1, #0
 800466e:	3018      	adds	r0, #24
 8004670:	f000 b8f2 	b.w	8004858 <ft6x06_g_mode>

08004674 <FT6X06_Init>:
{
 8004674:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8004676:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 800467a:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 800467c:	b96b      	cbnz	r3, 800469a <FT6X06_Init+0x26>
    pObj->IO.Init();
 800467e:	6803      	ldr	r3, [r0, #0]
 8004680:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8004682:	4620      	mov	r0, r4
 8004684:	f7ff fff2 	bl	800466c <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8004688:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 800468a:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 800468e:	bf18      	it	ne
 8004690:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8004692:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8004696:	4240      	negs	r0, r0
}
 8004698:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 800469a:	2000      	movs	r0, #0
  return ret;
 800469c:	e7fc      	b.n	8004698 <FT6X06_Init+0x24>

0800469e <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 800469e:	2000      	movs	r0, #0
 80046a0:	4770      	bx	lr

080046a2 <FT6X06_GetMultiTouchState>:
{
 80046a2:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80046a4:	f100 0518 	add.w	r5, r0, #24
{
 80046a8:	b085      	sub	sp, #20
 80046aa:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80046ac:	4628      	mov	r0, r5
 80046ae:	a901      	add	r1, sp, #4
 80046b0:	f000 f87d 	bl	80047ae <ft6x06_td_status>
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d145      	bne.n	8004744 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80046b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80046bc:	2b02      	cmp	r3, #2
 80046be:	bf98      	it	ls
 80046c0:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80046c2:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80046c4:	230c      	movs	r3, #12
 80046c6:	aa01      	add	r2, sp, #4
 80046c8:	2103      	movs	r1, #3
 80046ca:	4628      	mov	r0, r5
 80046cc:	f000 f85c 	bl	8004788 <ft6x06_read_reg>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d13a      	bne.n	800474a <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80046d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80046d8:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80046dc:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80046de:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80046e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80046e4:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80046e6:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80046e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80046ec:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80046f0:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80046f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80046fc:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80046fe:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004702:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8004704:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004708:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 800470a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004712:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8004714:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004716:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 800471a:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800471c:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 800471e:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004722:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8004724:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800472e:	430b      	orrs	r3, r1
 8004730:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8004732:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004736:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8004738:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8004740:	b005      	add	sp, #20
 8004742:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004744:	f04f 30ff 	mov.w	r0, #4294967295
 8004748:	e7bb      	b.n	80046c2 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 800474a:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 800474e:	e7f7      	b.n	8004740 <FT6X06_GetMultiTouchState+0x9e>

08004750 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8004750:	b190      	cbz	r0, 8004778 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8004752:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8004754:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004756:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8004758:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 800475a:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 800475c:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800475e:	68ca      	ldr	r2, [r1, #12]
 8004760:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004762:	690a      	ldr	r2, [r1, #16]
 8004764:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004766:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8004768:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 800476a:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 800476c:	4a04      	ldr	r2, [pc, #16]	@ (8004780 <FT6X06_RegisterBusIO+0x30>)
 800476e:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004770:	4a04      	ldr	r2, [pc, #16]	@ (8004784 <FT6X06_RegisterBusIO+0x34>)
 8004772:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8004774:	b103      	cbz	r3, 8004778 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8004776:	4718      	bx	r3
}
 8004778:	f04f 30ff 	mov.w	r0, #4294967295
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	0800457b 	.word	0x0800457b
 8004784:	08004589 	.word	0x08004589

08004788 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8004788:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800478a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800478e:	46a4      	mov	ip, r4
}
 8004790:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004794:	4760      	bx	ip

08004796 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8004796:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004798:	6804      	ldr	r4, [r0, #0]
 800479a:	6880      	ldr	r0, [r0, #8]
 800479c:	46a4      	mov	ip, r4
}
 800479e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80047a2:	4760      	bx	ip

080047a4 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80047a4:	2301      	movs	r3, #1
{
 80047a6:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80047a8:	4619      	mov	r1, r3
 80047aa:	f7ff bfed 	b.w	8004788 <ft6x06_read_reg>

080047ae <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80047ae:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 80047b0:	460a      	mov	r2, r1
{
 80047b2:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 80047b4:	2301      	movs	r3, #1
 80047b6:	2102      	movs	r1, #2
 80047b8:	f7ff ffe6 	bl	8004788 <ft6x06_read_reg>
  
  if(ret == 0)
 80047bc:	b918      	cbnz	r0, 80047c6 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 80047be:	7823      	ldrb	r3, [r4, #0]
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 80047c6:	bd10      	pop	{r4, pc}

080047c8 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 80047c8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80047ca:	2301      	movs	r3, #1
{
 80047cc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80047d0:	f10d 0207 	add.w	r2, sp, #7
 80047d4:	2191      	movs	r1, #145	@ 0x91
 80047d6:	f7ff ffde 	bl	8004796 <ft6x06_write_reg>
}
 80047da:	b003      	add	sp, #12
 80047dc:	f85d fb04 	ldr.w	pc, [sp], #4

080047e0 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80047e0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80047e2:	2301      	movs	r3, #1
{
 80047e4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80047e8:	f10d 0207 	add.w	r2, sp, #7
 80047ec:	2192      	movs	r1, #146	@ 0x92
 80047ee:	f7ff ffd2 	bl	8004796 <ft6x06_write_reg>
}
 80047f2:	b003      	add	sp, #12
 80047f4:	f85d fb04 	ldr.w	pc, [sp], #4

080047f8 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80047f8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 80047fa:	2301      	movs	r3, #1
{
 80047fc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004800:	f10d 0207 	add.w	r2, sp, #7
 8004804:	2193      	movs	r1, #147	@ 0x93
 8004806:	f7ff ffc6 	bl	8004796 <ft6x06_write_reg>
}
 800480a:	b003      	add	sp, #12
 800480c:	f85d fb04 	ldr.w	pc, [sp], #4

08004810 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004810:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8004812:	2301      	movs	r3, #1
{
 8004814:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8004818:	f10d 0207 	add.w	r2, sp, #7
 800481c:	2194      	movs	r1, #148	@ 0x94
 800481e:	f7ff ffba 	bl	8004796 <ft6x06_write_reg>
}
 8004822:	b003      	add	sp, #12
 8004824:	f85d fb04 	ldr.w	pc, [sp], #4

08004828 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004828:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 800482a:	2301      	movs	r3, #1
{
 800482c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004830:	f10d 0207 	add.w	r2, sp, #7
 8004834:	2195      	movs	r1, #149	@ 0x95
 8004836:	f7ff ffae 	bl	8004796 <ft6x06_write_reg>
}
 800483a:	b003      	add	sp, #12
 800483c:	f85d fb04 	ldr.w	pc, [sp], #4

08004840 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004840:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004842:	2301      	movs	r3, #1
{
 8004844:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004848:	f10d 0207 	add.w	r2, sp, #7
 800484c:	2196      	movs	r1, #150	@ 0x96
 800484e:	f7ff ffa2 	bl	8004796 <ft6x06_write_reg>
}
 8004852:	b003      	add	sp, #12
 8004854:	f85d fb04 	ldr.w	pc, [sp], #4

08004858 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004858:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 800485a:	2301      	movs	r3, #1
{
 800485c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004860:	f10d 0207 	add.w	r2, sp, #7
 8004864:	21a4      	movs	r1, #164	@ 0xa4
 8004866:	f7ff ff96 	bl	8004796 <ft6x06_write_reg>
}
 800486a:	b003      	add	sp, #12
 800486c:	f85d fb04 	ldr.w	pc, [sp], #4

08004870 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004870:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8004872:	2301      	movs	r3, #1
 8004874:	21a8      	movs	r1, #168	@ 0xa8
 8004876:	f7ff bf87 	b.w	8004788 <ft6x06_read_reg>
	...

0800487c <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800487c:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 800487e:	2201      	movs	r2, #1
 8004880:	4b07      	ldr	r3, [pc, #28]	@ (80048a0 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8004882:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8004886:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004888:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800488a:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 800488c:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800488e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004892:	f006 f9a9 	bl	800abe8 <HAL_SDRAM_SendCommand>
 8004896:	3800      	subs	r0, #0
 8004898:	bf18      	it	ne
 800489a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800489c:	4240      	negs	r0, r0
 800489e:	bd08      	pop	{r3, pc}
 80048a0:	2400b134 	.word	0x2400b134

080048a4 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80048a4:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80048a6:	2202      	movs	r2, #2
 80048a8:	4b08      	ldr	r3, [pc, #32]	@ (80048cc <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 80048aa:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 80048ae:	2101      	movs	r1, #1
 80048b0:	2200      	movs	r2, #0
 80048b2:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80048b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048ba:	4619      	mov	r1, r3
 80048bc:	f006 f994 	bl	800abe8 <HAL_SDRAM_SendCommand>
 80048c0:	3800      	subs	r0, #0
 80048c2:	bf18      	it	ne
 80048c4:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80048c6:	4240      	negs	r0, r0
 80048c8:	bd08      	pop	{r3, pc}
 80048ca:	bf00      	nop
 80048cc:	2400b134 	.word	0x2400b134

080048d0 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80048d0:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80048d2:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 80048d6:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80048d8:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 80048da:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80048dc:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 80048de:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 80048e0:	6991      	ldr	r1, [r2, #24]
 80048e2:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80048e4:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 80048e6:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80048e8:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80048ea:	4907      	ldr	r1, [pc, #28]	@ (8004908 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 80048ec:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 80048ee:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80048f0:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 80048f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80048f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048fa:	f006 f975 	bl	800abe8 <HAL_SDRAM_SendCommand>
 80048fe:	3800      	subs	r0, #0
 8004900:	bf18      	it	ne
 8004902:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004904:	4240      	negs	r0, r0
 8004906:	bd10      	pop	{r4, pc}
 8004908:	2400b134 	.word	0x2400b134

0800490c <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800490c:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 800490e:	4b08      	ldr	r3, [pc, #32]	@ (8004930 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8004910:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8004914:	2108      	movs	r1, #8
 8004916:	2200      	movs	r2, #0
 8004918:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800491c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004920:	4619      	mov	r1, r3
 8004922:	f006 f961 	bl	800abe8 <HAL_SDRAM_SendCommand>
 8004926:	3800      	subs	r0, #0
 8004928:	bf18      	it	ne
 800492a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800492c:	4240      	negs	r0, r0
 800492e:	bd08      	pop	{r3, pc}
 8004930:	2400b134 	.word	0x2400b134

08004934 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8004934:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8004936:	f006 f976 	bl	800ac26 <HAL_SDRAM_ProgramRefreshRate>
 800493a:	3800      	subs	r0, #0
 800493c:	bf18      	it	ne
 800493e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004940:	4240      	negs	r0, r0
 8004942:	bd08      	pop	{r3, pc}

08004944 <IS42S32800J_Init>:
{
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004948:	6809      	ldr	r1, [r1, #0]
{
 800494a:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800494c:	f7ff ff96 	bl	800487c <IS42S32800J_ClockEnable>
 8004950:	b110      	cbz	r0, 8004958 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8004952:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004956:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8004958:	f001 fc7c 	bl	8006254 <HAL_GetTick>
 800495c:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800495e:	f001 fc79 	bl	8006254 <HAL_GetTick>
 8004962:	4286      	cmp	r6, r0
 8004964:	d0fb      	beq.n	800495e <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004966:	6821      	ldr	r1, [r4, #0]
 8004968:	4628      	mov	r0, r5
 800496a:	f7ff ff9b 	bl	80048a4 <IS42S32800J_Precharge>
 800496e:	2800      	cmp	r0, #0
 8004970:	d1ef      	bne.n	8004952 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8004972:	4628      	mov	r0, r5
 8004974:	e9d4 1200 	ldrd	r1, r2, [r4]
 8004978:	f7ff ffc8 	bl	800490c <IS42S32800J_RefreshMode>
 800497c:	2800      	cmp	r0, #0
 800497e:	d1e8      	bne.n	8004952 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8004980:	4621      	mov	r1, r4
 8004982:	4628      	mov	r0, r5
 8004984:	f7ff ffa4 	bl	80048d0 <IS42S32800J_ModeRegConfig>
 8004988:	2800      	cmp	r0, #0
 800498a:	d1e2      	bne.n	8004952 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 800498c:	68a1      	ldr	r1, [r4, #8]
 800498e:	4628      	mov	r0, r5
 8004990:	f7ff ffd0 	bl	8004934 <IS42S32800J_RefreshRate>
 8004994:	3800      	subs	r0, #0
 8004996:	bf18      	it	ne
 8004998:	2001      	movne	r0, #1
 800499a:	4240      	negs	r0, r0
  return ret;
 800499c:	e7db      	b.n	8004956 <IS42S32800J_Init+0x12>

0800499e <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800499e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80049a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80049a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80049aa:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80049ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80049b2:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 80049b6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80049ba:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 80049bc:	2000      	movs	r0, #0
 80049be:	4770      	bx	lr

080049c0 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80049c0:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80049c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 80049c6:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80049c8:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80049cc:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80049ce:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80049d0:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 80049d2:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80049d4:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80049d6:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 80049d8:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049da:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80049dc:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 80049de:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80049e0:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 80049e2:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049e4:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80049e6:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80049ea:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 80049ee:	2310      	movs	r3, #16
 80049f0:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80049f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80049f6:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 80049f8:	f240 1301 	movw	r3, #257	@ 0x101
 80049fc:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004a02:	f004 fcf8 	bl	80093f6 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8004a06:	2800      	cmp	r0, #0

}
 8004a08:	bf14      	ite	ne
 8004a0a:	f06f 0004 	mvnne.w	r0, #4
 8004a0e:	2000      	moveq	r0, #0
 8004a10:	b015      	add	sp, #84	@ 0x54
 8004a12:	f85d fb04 	ldr.w	pc, [sp], #4

08004a16 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004a16:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a18:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004a1c:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004a1e:	bf08      	it	eq
 8004a20:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004a24:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004a26:	bf18      	it	ne
 8004a28:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004a2c:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a2e:	a906      	add	r1, sp, #24
{
 8004a30:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004a32:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8004a34:	2306      	movs	r3, #6
 8004a36:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004a38:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004a3a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8004a3e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8004a40:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004a42:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004a44:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a48:	f004 fbd4 	bl	80091f4 <HAL_QSPI_Command>
 8004a4c:	bb20      	cbnz	r0, 8004a98 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004a4e:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8004a52:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004a54:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004a56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004a5a:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a5c:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004a5e:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8004a62:	f04f 0310 	mov.w	r3, #16
 8004a66:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004a6a:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a6e:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004a70:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004a74:	bf14      	ite	ne
 8004a76:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8004a7a:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a7e:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004a80:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a82:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004a86:	f004 fcb6 	bl	80093f6 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	bf14      	ite	ne
 8004a8e:	f06f 0004 	mvnne.w	r0, #4
 8004a92:	2000      	moveq	r0, #0
}
 8004a94:	b015      	add	sp, #84	@ 0x54
 8004a96:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8004a98:	f06f 0001 	mvn.w	r0, #1
 8004a9c:	e7fa      	b.n	8004a94 <MT25TL01G_WriteEnable+0x7e>

08004a9e <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004a9e:	2903      	cmp	r1, #3
{
 8004aa0:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004aa2:	bf08      	it	eq
 8004aa4:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004aa8:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004aaa:	bf18      	it	ne
 8004aac:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004ab4:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8004ab6:	23b7      	movs	r3, #183	@ 0xb7
 8004ab8:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004aba:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004abc:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004ac0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004ac2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004ac4:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004ac6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8004aca:	f7ff ffa4 	bl	8004a16 <MT25TL01G_WriteEnable>
 8004ace:	b118      	cbz	r0, 8004ad8 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8004ad0:	f06f 0001 	mvn.w	r0, #1
}
 8004ad4:	b00f      	add	sp, #60	@ 0x3c
 8004ad6:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004adc:	4669      	mov	r1, sp
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f004 fb88 	bl	80091f4 <HAL_QSPI_Command>
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d1f3      	bne.n	8004ad0 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8004ae8:	4629      	mov	r1, r5
 8004aea:	4620      	mov	r0, r4
 8004aec:	f7ff ff68 	bl	80049c0 <MT25TL01G_AutoPollingMemReady>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d0ef      	beq.n	8004ad4 <MT25TL01G_Enter4BytesAddressMode+0x36>
 8004af4:	e7ec      	b.n	8004ad0 <MT25TL01G_Enter4BytesAddressMode+0x32>

08004af6 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004af6:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004af8:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004afc:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004afe:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b02:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004b04:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b06:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004b08:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004b0a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b0c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004b10:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004b12:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004b14:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004b16:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b1a:	f004 fb6b 	bl	80091f4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004b1e:	2800      	cmp	r0, #0
}
 8004b20:	bf14      	ite	ne
 8004b22:	f06f 0001 	mvnne.w	r0, #1
 8004b26:	2000      	moveq	r0, #0
 8004b28:	b00f      	add	sp, #60	@ 0x3c
 8004b2a:	f85d fb04 	ldr.w	pc, [sp], #4

08004b2e <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004b2e:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b30:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004b34:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b36:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b3a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004b3c:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b3e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004b40:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004b42:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b44:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004b48:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004b4a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004b4c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004b4e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b52:	f004 fb4f 	bl	80091f4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004b56:	2800      	cmp	r0, #0
}
 8004b58:	bf14      	ite	ne
 8004b5a:	f06f 0001 	mvnne.w	r0, #1
 8004b5e:	2000      	moveq	r0, #0
 8004b60:	b00f      	add	sp, #60	@ 0x3c
 8004b62:	f85d fb04 	ldr.w	pc, [sp], #4

08004b66 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004b66:	b500      	push	{lr}
 8004b68:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004b6a:	2903      	cmp	r1, #3
 8004b6c:	d80e      	bhi.n	8004b8c <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8004b6e:	e8df f001 	tbb	[pc, r1]
 8004b72:	2902      	.short	0x2902
 8004b74:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b7a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8004b7c:	230e      	movs	r3, #14
 8004b7e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004b80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b84:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004b86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004b8a:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004b8c:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004b8e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004b92:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004b96:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004b98:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004b9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004b9e:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004ba0:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004ba2:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004ba6:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004ba8:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004baa:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004bac:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004bb0:	f004 fc72 	bl	8009498 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004bb4:	2800      	cmp	r0, #0
}
 8004bb6:	bf14      	ite	ne
 8004bb8:	f06f 0005 	mvnne.w	r0, #5
 8004bbc:	2000      	moveq	r0, #0
 8004bbe:	b011      	add	sp, #68	@ 0x44
 8004bc0:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004bc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bc8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8004bca:	233d      	movs	r3, #61	@ 0x3d
 8004bcc:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004bce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bd2:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004bd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004bd8:	e7d7      	b.n	8004b8a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004bda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bde:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8004be0:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004be2:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004be4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004be8:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004bea:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004bee:	e7cc      	b.n	8004b8a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004bf0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004bf4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004bf6:	23ed      	movs	r3, #237	@ 0xed
 8004bf8:	e7f3      	b.n	8004be2 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08004bfa <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004bfa:	b500      	push	{lr}
 8004bfc:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004bfe:	2903      	cmp	r1, #3
 8004c00:	d80e      	bhi.n	8004c20 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8004c02:	e8df f001 	tbb	[pc, r1]
 8004c06:	2502      	.short	0x2502
 8004c08:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c0e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8004c10:	230c      	movs	r3, #12
 8004c12:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004c14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c18:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004c1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004c1e:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004c20:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004c22:	466a      	mov	r2, sp
 8004c24:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004c26:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004c28:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004c2c:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004c32:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004c34:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004c38:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004c3c:	f004 fc2c 	bl	8009498 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004c40:	2800      	cmp	r0, #0
}
 8004c42:	bf14      	ite	ne
 8004c44:	f06f 0005 	mvnne.w	r0, #5
 8004c48:	2000      	moveq	r0, #0
 8004c4a:	b011      	add	sp, #68	@ 0x44
 8004c4c:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c54:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004c56:	23bc      	movs	r3, #188	@ 0xbc
 8004c58:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8004c5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c5e:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004c60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c64:	e7db      	b.n	8004c1e <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c6a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004c6c:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004c6e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004c70:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004c74:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004c76:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004c7a:	e7d0      	b.n	8004c1e <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004c7c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004c80:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004c82:	23eb      	movs	r3, #235	@ 0xeb
 8004c84:	e7f3      	b.n	8004c6e <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08004c86 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004c86:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c88:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004c8c:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004c8e:	bf18      	it	ne
 8004c90:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004c94:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004c96:	bf08      	it	eq
 8004c98:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c9c:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004c9e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8004ca0:	2366      	movs	r3, #102	@ 0x66
 8004ca2:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004ca4:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004ca6:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004caa:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004cac:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004cae:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004cb0:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004cb4:	f004 fa9e 	bl	80091f4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004cb8:	2800      	cmp	r0, #0
}
 8004cba:	bf14      	ite	ne
 8004cbc:	f06f 0001 	mvnne.w	r0, #1
 8004cc0:	2000      	moveq	r0, #0
 8004cc2:	b00f      	add	sp, #60	@ 0x3c
 8004cc4:	f85d fb04 	ldr.w	pc, [sp], #4

08004cc8 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004cc8:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004cca:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004cce:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004cd0:	bf18      	it	ne
 8004cd2:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004cd6:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004cd8:	bf08      	it	eq
 8004cda:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004cde:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004ce0:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8004ce2:	2399      	movs	r3, #153	@ 0x99
 8004ce4:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004ce6:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004ce8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004cec:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004cee:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004cf0:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004cf2:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004cf6:	f004 fa7d 	bl	80091f4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004cfa:	2800      	cmp	r0, #0
}
 8004cfc:	bf14      	ite	ne
 8004cfe:	f06f 0001 	mvnne.w	r0, #1
 8004d02:	2000      	moveq	r0, #0
 8004d04:	b00f      	add	sp, #60	@ 0x3c
 8004d06:	f85d fb04 	ldr.w	pc, [sp], #4

08004d0a <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004d0a:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004d0c:	6884      	ldr	r4, [r0, #8]
 8004d0e:	8800      	ldrh	r0, [r0, #0]
 8004d10:	46a4      	mov	ip, r4
}
 8004d12:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004d16:	4760      	bx	ip

08004d18 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004d18:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004d1a:	6844      	ldr	r4, [r0, #4]
 8004d1c:	8800      	ldrh	r0, [r0, #0]
 8004d1e:	46a4      	mov	ip, r4
}
 8004d20:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004d24:	4760      	bx	ip

08004d26 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004d26:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004d28:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8004d2e:	4798      	blx	r3
 8004d30:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004d32:	68e3      	ldr	r3, [r4, #12]
 8004d34:	4798      	blx	r3
 8004d36:	1b83      	subs	r3, r0, r6
 8004d38:	42ab      	cmp	r3, r5
 8004d3a:	d3fa      	bcc.n	8004d32 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d40 <OTM8009A_Init>:
{
 8004d40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d44:	2300      	movs	r3, #0
 8004d46:	f100 0510 	add.w	r5, r0, #16
{
 8004d4a:	4607      	mov	r7, r0
 8004d4c:	460e      	mov	r6, r1
 8004d4e:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d50:	4619      	mov	r1, r3
 8004d52:	4ade      	ldr	r2, [pc, #888]	@ (80050cc <OTM8009A_Init+0x38c>)
 8004d54:	4628      	mov	r0, r5
 8004d56:	f000 fb99 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004d5a:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d5c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004d5e:	4adc      	ldr	r2, [pc, #880]	@ (80050d0 <OTM8009A_Init+0x390>)
 8004d60:	21ff      	movs	r1, #255	@ 0xff
 8004d62:	4628      	mov	r0, r5
 8004d64:	f000 fb92 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d68:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004d6a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d6c:	4ad9      	ldr	r2, [pc, #868]	@ (80050d4 <OTM8009A_Init+0x394>)
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4628      	mov	r0, r5
 8004d72:	f000 fb8b 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004d76:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d78:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004d7a:	4ad7      	ldr	r2, [pc, #860]	@ (80050d8 <OTM8009A_Init+0x398>)
 8004d7c:	21ff      	movs	r1, #255	@ 0xff
 8004d7e:	4628      	mov	r0, r5
 8004d80:	f000 fb84 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d84:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004d86:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004d88:	4ad2      	ldr	r2, [pc, #840]	@ (80050d4 <OTM8009A_Init+0x394>)
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	f000 fb7d 	bl	800548c <otm8009a_write_reg>
 8004d92:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004d94:	2300      	movs	r3, #0
 8004d96:	4ad1      	ldr	r2, [pc, #836]	@ (80050dc <OTM8009A_Init+0x39c>)
 8004d98:	21c4      	movs	r1, #196	@ 0xc4
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	f000 fb76 	bl	800548c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004da0:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004da2:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004da4:	4638      	mov	r0, r7
 8004da6:	f7ff ffbe 	bl	8004d26 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004daa:	2300      	movs	r3, #0
 8004dac:	4acc      	ldr	r2, [pc, #816]	@ (80050e0 <OTM8009A_Init+0x3a0>)
 8004dae:	4628      	mov	r0, r5
 8004db0:	4619      	mov	r1, r3
 8004db2:	f000 fb6b 	bl	800548c <otm8009a_write_reg>
 8004db6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004db8:	2300      	movs	r3, #0
 8004dba:	4aca      	ldr	r2, [pc, #808]	@ (80050e4 <OTM8009A_Init+0x3a4>)
 8004dbc:	21c4      	movs	r1, #196	@ 0xc4
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	f000 fb64 	bl	800548c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004dc4:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004dc6:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004dc8:	4638      	mov	r0, r7
 8004dca:	f7ff ffac 	bl	8004d26 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	4ac5      	ldr	r2, [pc, #788]	@ (80050e8 <OTM8009A_Init+0x3a8>)
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	f000 fb59 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004dda:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004ddc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004dde:	4ac3      	ldr	r2, [pc, #780]	@ (80050ec <OTM8009A_Init+0x3ac>)
 8004de0:	21c5      	movs	r1, #197	@ 0xc5
 8004de2:	4628      	mov	r0, r5
 8004de4:	f000 fb52 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004de8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004dea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004dec:	4ac0      	ldr	r2, [pc, #768]	@ (80050f0 <OTM8009A_Init+0x3b0>)
 8004dee:	4619      	mov	r1, r3
 8004df0:	4628      	mov	r0, r5
 8004df2:	f000 fb4b 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004df6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004df8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004dfa:	4abe      	ldr	r2, [pc, #760]	@ (80050f4 <OTM8009A_Init+0x3b4>)
 8004dfc:	21c5      	movs	r1, #197	@ 0xc5
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f000 fb44 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004e04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004e06:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004e08:	4abb      	ldr	r2, [pc, #748]	@ (80050f8 <OTM8009A_Init+0x3b8>)
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f000 fb3d 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004e12:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004e14:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004e16:	4ab9      	ldr	r2, [pc, #740]	@ (80050fc <OTM8009A_Init+0x3bc>)
 8004e18:	21c0      	movs	r1, #192	@ 0xc0
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f000 fb36 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e20:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004e22:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e24:	4aa9      	ldr	r2, [pc, #676]	@ (80050cc <OTM8009A_Init+0x38c>)
 8004e26:	4619      	mov	r1, r3
 8004e28:	4628      	mov	r0, r5
 8004e2a:	f000 fb2f 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004e2e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e30:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004e32:	4ab3      	ldr	r2, [pc, #716]	@ (8005100 <OTM8009A_Init+0x3c0>)
 8004e34:	21d9      	movs	r1, #217	@ 0xd9
 8004e36:	4628      	mov	r0, r5
 8004e38:	f000 fb28 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004e3c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004e3e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004e40:	4ab0      	ldr	r2, [pc, #704]	@ (8005104 <OTM8009A_Init+0x3c4>)
 8004e42:	4619      	mov	r1, r3
 8004e44:	4628      	mov	r0, r5
 8004e46:	f000 fb21 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004e4a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004e4c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004e4e:	4aae      	ldr	r2, [pc, #696]	@ (8005108 <OTM8009A_Init+0x3c8>)
 8004e50:	21c1      	movs	r1, #193	@ 0xc1
 8004e52:	4628      	mov	r0, r5
 8004e54:	f000 fb1a 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004e58:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004e5a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004e5c:	4aab      	ldr	r2, [pc, #684]	@ (800510c <OTM8009A_Init+0x3cc>)
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4628      	mov	r0, r5
 8004e62:	f000 fb13 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004e66:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004e68:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004e6a:	4aa9      	ldr	r2, [pc, #676]	@ (8005110 <OTM8009A_Init+0x3d0>)
 8004e6c:	21c5      	movs	r1, #197	@ 0xc5
 8004e6e:	4628      	mov	r0, r5
 8004e70:	f000 fb0c 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004e74:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004e76:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004e78:	4aa6      	ldr	r2, [pc, #664]	@ (8005114 <OTM8009A_Init+0x3d4>)
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	f000 fb05 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004e82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004e84:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004e86:	4a9b      	ldr	r2, [pc, #620]	@ (80050f4 <OTM8009A_Init+0x3b4>)
 8004e88:	21c5      	movs	r1, #197	@ 0xc5
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	f000 fafe 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004e92:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e94:	4a8d      	ldr	r2, [pc, #564]	@ (80050cc <OTM8009A_Init+0x38c>)
 8004e96:	4619      	mov	r1, r3
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 faf7 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004e9e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ea0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004ea2:	4a9d      	ldr	r2, [pc, #628]	@ (8005118 <OTM8009A_Init+0x3d8>)
 8004ea4:	21d8      	movs	r1, #216	@ 0xd8
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	f000 faf0 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004eac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004eae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004eb0:	4a9a      	ldr	r2, [pc, #616]	@ (800511c <OTM8009A_Init+0x3dc>)
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	f000 fae9 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004eba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004ebc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004ebe:	4a98      	ldr	r2, [pc, #608]	@ (8005120 <OTM8009A_Init+0x3e0>)
 8004ec0:	21c5      	movs	r1, #197	@ 0xc5
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	f000 fae2 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004ec8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004eca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004ecc:	4a95      	ldr	r2, [pc, #596]	@ (8005124 <OTM8009A_Init+0x3e4>)
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f000 fadb 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004ed6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004ed8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004eda:	4a93      	ldr	r2, [pc, #588]	@ (8005128 <OTM8009A_Init+0x3e8>)
 8004edc:	21c0      	movs	r1, #192	@ 0xc0
 8004ede:	4628      	mov	r0, r5
 8004ee0:	f000 fad4 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004ee4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004ee6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004ee8:	4a90      	ldr	r2, [pc, #576]	@ (800512c <OTM8009A_Init+0x3ec>)
 8004eea:	4619      	mov	r1, r3
 8004eec:	4628      	mov	r0, r5
 8004eee:	f000 facd 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004ef2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004ef4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004ef6:	4a8e      	ldr	r2, [pc, #568]	@ (8005130 <OTM8009A_Init+0x3f0>)
 8004ef8:	21c5      	movs	r1, #197	@ 0xc5
 8004efa:	4628      	mov	r0, r5
 8004efc:	f000 fac6 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004f00:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004f02:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004f04:	4a8b      	ldr	r2, [pc, #556]	@ (8005134 <OTM8009A_Init+0x3f4>)
 8004f06:	4619      	mov	r1, r3
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f000 fabf 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004f0e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004f10:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004f12:	4a89      	ldr	r2, [pc, #548]	@ (8005138 <OTM8009A_Init+0x3f8>)
 8004f14:	21c4      	movs	r1, #196	@ 0xc4
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 fab8 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004f1c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004f1e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004f20:	4a78      	ldr	r2, [pc, #480]	@ (8005104 <OTM8009A_Init+0x3c4>)
 8004f22:	4619      	mov	r1, r3
 8004f24:	4628      	mov	r0, r5
 8004f26:	f000 fab1 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004f2a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004f2c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004f2e:	4a83      	ldr	r2, [pc, #524]	@ (800513c <OTM8009A_Init+0x3fc>)
 8004f30:	21c1      	movs	r1, #193	@ 0xc1
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 faaa 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004f38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004f3a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004f3c:	4a80      	ldr	r2, [pc, #512]	@ (8005140 <OTM8009A_Init+0x400>)
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4628      	mov	r0, r5
 8004f42:	f000 faa3 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004f46:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004f48:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004f4a:	4a7e      	ldr	r2, [pc, #504]	@ (8005144 <OTM8009A_Init+0x404>)
 8004f4c:	21b3      	movs	r1, #179	@ 0xb3
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f000 fa9c 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004f54:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004f56:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004f58:	4a5e      	ldr	r2, [pc, #376]	@ (80050d4 <OTM8009A_Init+0x394>)
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	f000 fa95 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004f62:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004f64:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004f66:	4a78      	ldr	r2, [pc, #480]	@ (8005148 <OTM8009A_Init+0x408>)
 8004f68:	21ce      	movs	r1, #206	@ 0xce
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 fa8e 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004f70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004f72:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004f74:	4a75      	ldr	r2, [pc, #468]	@ (800514c <OTM8009A_Init+0x40c>)
 8004f76:	4619      	mov	r1, r3
 8004f78:	4628      	mov	r0, r5
 8004f7a:	f000 fa87 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004f7e:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004f80:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004f82:	4a73      	ldr	r2, [pc, #460]	@ (8005150 <OTM8009A_Init+0x410>)
 8004f84:	21ce      	movs	r1, #206	@ 0xce
 8004f86:	4628      	mov	r0, r5
 8004f88:	f000 fa80 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f8c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004f8e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f90:	4a70      	ldr	r2, [pc, #448]	@ (8005154 <OTM8009A_Init+0x414>)
 8004f92:	4619      	mov	r1, r3
 8004f94:	4628      	mov	r0, r5
 8004f96:	f000 fa79 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004f9a:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f9c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8005158 <OTM8009A_Init+0x418>)
 8004fa0:	21ce      	movs	r1, #206	@ 0xce
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	f000 fa72 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004fa8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004faa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004fac:	4a6b      	ldr	r2, [pc, #428]	@ (800515c <OTM8009A_Init+0x41c>)
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	f000 fa6b 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004fb6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004fb8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004fba:	4a69      	ldr	r2, [pc, #420]	@ (8005160 <OTM8009A_Init+0x420>)
 8004fbc:	21cf      	movs	r1, #207	@ 0xcf
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f000 fa64 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004fc4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004fc6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004fc8:	4a66      	ldr	r2, [pc, #408]	@ (8005164 <OTM8009A_Init+0x424>)
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f000 fa5d 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004fd2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004fd4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004fd6:	4a64      	ldr	r2, [pc, #400]	@ (8005168 <OTM8009A_Init+0x428>)
 8004fd8:	21cf      	movs	r1, #207	@ 0xcf
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f000 fa56 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004fe0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004fe2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004fe4:	4a3b      	ldr	r2, [pc, #236]	@ (80050d4 <OTM8009A_Init+0x394>)
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4628      	mov	r0, r5
 8004fea:	f000 fa4f 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004fee:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ff0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004ff2:	4a5e      	ldr	r2, [pc, #376]	@ (800516c <OTM8009A_Init+0x42c>)
 8004ff4:	21cb      	movs	r1, #203	@ 0xcb
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f000 fa48 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004ffc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004ffe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005000:	4a5b      	ldr	r2, [pc, #364]	@ (8005170 <OTM8009A_Init+0x430>)
 8005002:	4619      	mov	r1, r3
 8005004:	4628      	mov	r0, r5
 8005006:	f000 fa41 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800500a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800500c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800500e:	4a59      	ldr	r2, [pc, #356]	@ (8005174 <OTM8009A_Init+0x434>)
 8005010:	21cb      	movs	r1, #203	@ 0xcb
 8005012:	4628      	mov	r0, r5
 8005014:	f000 fa3a 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005018:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800501a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800501c:	4a4b      	ldr	r2, [pc, #300]	@ (800514c <OTM8009A_Init+0x40c>)
 800501e:	4619      	mov	r1, r3
 8005020:	4628      	mov	r0, r5
 8005022:	f000 fa33 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005026:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005028:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800502a:	4a53      	ldr	r2, [pc, #332]	@ (8005178 <OTM8009A_Init+0x438>)
 800502c:	21cb      	movs	r1, #203	@ 0xcb
 800502e:	4628      	mov	r0, r5
 8005030:	f000 fa2c 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005034:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005036:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005038:	4a46      	ldr	r2, [pc, #280]	@ (8005154 <OTM8009A_Init+0x414>)
 800503a:	4619      	mov	r1, r3
 800503c:	4628      	mov	r0, r5
 800503e:	f000 fa25 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005042:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005044:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005046:	4a4d      	ldr	r2, [pc, #308]	@ (800517c <OTM8009A_Init+0x43c>)
 8005048:	21cb      	movs	r1, #203	@ 0xcb
 800504a:	4628      	mov	r0, r5
 800504c:	f000 fa1e 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005050:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005052:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005054:	4a41      	ldr	r2, [pc, #260]	@ (800515c <OTM8009A_Init+0x41c>)
 8005056:	4619      	mov	r1, r3
 8005058:	4628      	mov	r0, r5
 800505a:	f000 fa17 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800505e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005060:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005062:	4a47      	ldr	r2, [pc, #284]	@ (8005180 <OTM8009A_Init+0x440>)
 8005064:	21cb      	movs	r1, #203	@ 0xcb
 8005066:	4628      	mov	r0, r5
 8005068:	f000 fa10 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800506c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800506e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005070:	4a3c      	ldr	r2, [pc, #240]	@ (8005164 <OTM8009A_Init+0x424>)
 8005072:	4619      	mov	r1, r3
 8005074:	4628      	mov	r0, r5
 8005076:	f000 fa09 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800507a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800507c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800507e:	4a41      	ldr	r2, [pc, #260]	@ (8005184 <OTM8009A_Init+0x444>)
 8005080:	21cb      	movs	r1, #203	@ 0xcb
 8005082:	4628      	mov	r0, r5
 8005084:	f000 fa02 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005088:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800508a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800508c:	4a3e      	ldr	r2, [pc, #248]	@ (8005188 <OTM8009A_Init+0x448>)
 800508e:	4619      	mov	r1, r3
 8005090:	4628      	mov	r0, r5
 8005092:	f000 f9fb 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005096:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005098:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800509a:	4a3c      	ldr	r2, [pc, #240]	@ (800518c <OTM8009A_Init+0x44c>)
 800509c:	21cb      	movs	r1, #203	@ 0xcb
 800509e:	4628      	mov	r0, r5
 80050a0:	f000 f9f4 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80050a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80050a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80050a8:	4a39      	ldr	r2, [pc, #228]	@ (8005190 <OTM8009A_Init+0x450>)
 80050aa:	4619      	mov	r1, r3
 80050ac:	4628      	mov	r0, r5
 80050ae:	f000 f9ed 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80050b2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80050b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80050b6:	4a37      	ldr	r2, [pc, #220]	@ (8005194 <OTM8009A_Init+0x454>)
 80050b8:	21cb      	movs	r1, #203	@ 0xcb
 80050ba:	4628      	mov	r0, r5
 80050bc:	f000 f9e6 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80050c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80050c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80050c4:	4a03      	ldr	r2, [pc, #12]	@ (80050d4 <OTM8009A_Init+0x394>)
 80050c6:	4619      	mov	r1, r3
 80050c8:	4628      	mov	r0, r5
 80050ca:	e065      	b.n	8005198 <OTM8009A_Init+0x458>
 80050cc:	080238b5 	.word	0x080238b5
 80050d0:	080238b1 	.word	0x080238b1
 80050d4:	080238b6 	.word	0x080238b6
 80050d8:	080238af 	.word	0x080238af
 80050dc:	080238b7 	.word	0x080238b7
 80050e0:	080238b8 	.word	0x080238b8
 80050e4:	080238b9 	.word	0x080238b9
 80050e8:	080238ba 	.word	0x080238ba
 80050ec:	080238bb 	.word	0x080238bb
 80050f0:	080238bc 	.word	0x080238bc
 80050f4:	080238bd 	.word	0x080238bd
 80050f8:	080238be 	.word	0x080238be
 80050fc:	080238bf 	.word	0x080238bf
 8005100:	080238c0 	.word	0x080238c0
 8005104:	080238c3 	.word	0x080238c3
 8005108:	080238c4 	.word	0x080238c4
 800510c:	080238c5 	.word	0x080238c5
 8005110:	080238c6 	.word	0x080238c6
 8005114:	080238c7 	.word	0x080238c7
 8005118:	080238ad 	.word	0x080238ad
 800511c:	080238c8 	.word	0x080238c8
 8005120:	080238c9 	.word	0x080238c9
 8005124:	080238ca 	.word	0x080238ca
 8005128:	080238cb 	.word	0x080238cb
 800512c:	080238cc 	.word	0x080238cc
 8005130:	080238cd 	.word	0x080238cd
 8005134:	080238c1 	.word	0x080238c1
 8005138:	080238ce 	.word	0x080238ce
 800513c:	080238cf 	.word	0x080238cf
 8005140:	080238d0 	.word	0x080238d0
 8005144:	080238ab 	.word	0x080238ab
 8005148:	080238a5 	.word	0x080238a5
 800514c:	080238d1 	.word	0x080238d1
 8005150:	08023897 	.word	0x08023897
 8005154:	080238d2 	.word	0x080238d2
 8005158:	08023889 	.word	0x08023889
 800515c:	080238d3 	.word	0x080238d3
 8005160:	0802387f 	.word	0x0802387f
 8005164:	080238d4 	.word	0x080238d4
 8005168:	080238e1 	.word	0x080238e1
 800516c:	08023875 	.word	0x08023875
 8005170:	080238d5 	.word	0x080238d5
 8005174:	08023866 	.word	0x08023866
 8005178:	08023857 	.word	0x08023857
 800517c:	0802384d 	.word	0x0802384d
 8005180:	0802383e 	.word	0x0802383e
 8005184:	0802382f 	.word	0x0802382f
 8005188:	080238d6 	.word	0x080238d6
 800518c:	08023825 	.word	0x08023825
 8005190:	080238d7 	.word	0x080238d7
 8005194:	0802381b 	.word	0x0802381b
 8005198:	f000 f978 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800519c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800519e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80051a0:	4a8e      	ldr	r2, [pc, #568]	@ (80053dc <OTM8009A_Init+0x69c>)
 80051a2:	21cc      	movs	r1, #204	@ 0xcc
 80051a4:	4628      	mov	r0, r5
 80051a6:	f000 f971 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80051aa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80051ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80051ae:	4a8c      	ldr	r2, [pc, #560]	@ (80053e0 <OTM8009A_Init+0x6a0>)
 80051b0:	4619      	mov	r1, r3
 80051b2:	4628      	mov	r0, r5
 80051b4:	f000 f96a 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80051b8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80051ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80051bc:	4a89      	ldr	r2, [pc, #548]	@ (80053e4 <OTM8009A_Init+0x6a4>)
 80051be:	21cc      	movs	r1, #204	@ 0xcc
 80051c0:	4628      	mov	r0, r5
 80051c2:	f000 f963 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80051c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80051c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80051ca:	4a87      	ldr	r2, [pc, #540]	@ (80053e8 <OTM8009A_Init+0x6a8>)
 80051cc:	4619      	mov	r1, r3
 80051ce:	4628      	mov	r0, r5
 80051d0:	f000 f95c 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80051d4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80051d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80051d8:	4a84      	ldr	r2, [pc, #528]	@ (80053ec <OTM8009A_Init+0x6ac>)
 80051da:	21cc      	movs	r1, #204	@ 0xcc
 80051dc:	4628      	mov	r0, r5
 80051de:	f000 f955 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80051e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80051e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80051e6:	4a82      	ldr	r2, [pc, #520]	@ (80053f0 <OTM8009A_Init+0x6b0>)
 80051e8:	4619      	mov	r1, r3
 80051ea:	4628      	mov	r0, r5
 80051ec:	f000 f94e 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80051f0:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80051f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80051f4:	4a7f      	ldr	r2, [pc, #508]	@ (80053f4 <OTM8009A_Init+0x6b4>)
 80051f6:	21cc      	movs	r1, #204	@ 0xcc
 80051f8:	4628      	mov	r0, r5
 80051fa:	f000 f947 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80051fe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005200:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005202:	4a7d      	ldr	r2, [pc, #500]	@ (80053f8 <OTM8009A_Init+0x6b8>)
 8005204:	4619      	mov	r1, r3
 8005206:	4628      	mov	r0, r5
 8005208:	f000 f940 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800520c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800520e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005210:	4a7a      	ldr	r2, [pc, #488]	@ (80053fc <OTM8009A_Init+0x6bc>)
 8005212:	21cc      	movs	r1, #204	@ 0xcc
 8005214:	4628      	mov	r0, r5
 8005216:	f000 f939 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800521a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800521c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800521e:	4a78      	ldr	r2, [pc, #480]	@ (8005400 <OTM8009A_Init+0x6c0>)
 8005220:	4619      	mov	r1, r3
 8005222:	4628      	mov	r0, r5
 8005224:	f000 f932 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005228:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800522a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800522c:	4a75      	ldr	r2, [pc, #468]	@ (8005404 <OTM8009A_Init+0x6c4>)
 800522e:	21cc      	movs	r1, #204	@ 0xcc
 8005230:	4628      	mov	r0, r5
 8005232:	f000 f92b 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005236:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005238:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800523a:	4a73      	ldr	r2, [pc, #460]	@ (8005408 <OTM8009A_Init+0x6c8>)
 800523c:	4619      	mov	r1, r3
 800523e:	4628      	mov	r0, r5
 8005240:	f000 f924 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005244:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005246:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005248:	4a70      	ldr	r2, [pc, #448]	@ (800540c <OTM8009A_Init+0x6cc>)
 800524a:	21c5      	movs	r1, #197	@ 0xc5
 800524c:	4628      	mov	r0, r5
 800524e:	f000 f91d 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005252:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005254:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005256:	4a6e      	ldr	r2, [pc, #440]	@ (8005410 <OTM8009A_Init+0x6d0>)
 8005258:	4619      	mov	r1, r3
 800525a:	4628      	mov	r0, r5
 800525c:	f000 f916 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005260:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005262:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005264:	4a6b      	ldr	r2, [pc, #428]	@ (8005414 <OTM8009A_Init+0x6d4>)
 8005266:	21f5      	movs	r1, #245	@ 0xf5
 8005268:	4628      	mov	r0, r5
 800526a:	f000 f90f 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800526e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005270:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005272:	4a69      	ldr	r2, [pc, #420]	@ (8005418 <OTM8009A_Init+0x6d8>)
 8005274:	4619      	mov	r1, r3
 8005276:	4628      	mov	r0, r5
 8005278:	f000 f908 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800527c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800527e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005280:	4a66      	ldr	r2, [pc, #408]	@ (800541c <OTM8009A_Init+0x6dc>)
 8005282:	21c6      	movs	r1, #198	@ 0xc6
 8005284:	4628      	mov	r0, r5
 8005286:	f000 f901 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800528a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800528c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800528e:	4a64      	ldr	r2, [pc, #400]	@ (8005420 <OTM8009A_Init+0x6e0>)
 8005290:	4619      	mov	r1, r3
 8005292:	4628      	mov	r0, r5
 8005294:	f000 f8fa 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005298:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800529a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800529c:	4a61      	ldr	r2, [pc, #388]	@ (8005424 <OTM8009A_Init+0x6e4>)
 800529e:	21ff      	movs	r1, #255	@ 0xff
 80052a0:	4628      	mov	r0, r5
 80052a2:	f000 f8f3 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052a6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80052a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052aa:	4a5d      	ldr	r2, [pc, #372]	@ (8005420 <OTM8009A_Init+0x6e0>)
 80052ac:	4619      	mov	r1, r3
 80052ae:	4628      	mov	r0, r5
 80052b0:	f000 f8ec 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052b8:	4a59      	ldr	r2, [pc, #356]	@ (8005420 <OTM8009A_Init+0x6e0>)
 80052ba:	4619      	mov	r1, r3
 80052bc:	4628      	mov	r0, r5
 80052be:	f000 f8e5 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80052c2:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052c4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80052c6:	4a58      	ldr	r2, [pc, #352]	@ (8005428 <OTM8009A_Init+0x6e8>)
 80052c8:	21e1      	movs	r1, #225	@ 0xe1
 80052ca:	4628      	mov	r0, r5
 80052cc:	f000 f8de 	bl	800548c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80052d2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052d4:	4a52      	ldr	r2, [pc, #328]	@ (8005420 <OTM8009A_Init+0x6e0>)
 80052d6:	4619      	mov	r1, r3
 80052d8:	4628      	mov	r0, r5
 80052da:	f000 f8d7 	bl	800548c <otm8009a_write_reg>
 80052de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80052e0:	2310      	movs	r3, #16
 80052e2:	4a52      	ldr	r2, [pc, #328]	@ (800542c <OTM8009A_Init+0x6ec>)
 80052e4:	21e2      	movs	r1, #226	@ 0xe2
 80052e6:	4628      	mov	r0, r5
 80052e8:	f000 f8d0 	bl	800548c <otm8009a_write_reg>
 80052ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80052ee:	2300      	movs	r3, #0
 80052f0:	4a4f      	ldr	r2, [pc, #316]	@ (8005430 <OTM8009A_Init+0x6f0>)
 80052f2:	2111      	movs	r1, #17
 80052f4:	4628      	mov	r0, r5
 80052f6:	f000 f8c9 	bl	800548c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 80052fa:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 80052fc:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 80052fe:	4638      	mov	r0, r7
 8005300:	f7ff fd11 	bl	8004d26 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8005304:	4f4b      	ldr	r7, [pc, #300]	@ (8005434 <OTM8009A_Init+0x6f4>)
 8005306:	2e00      	cmp	r6, #0
 8005308:	d061      	beq.n	80053ce <OTM8009A_Init+0x68e>
 800530a:	2e02      	cmp	r6, #2
 800530c:	d107      	bne.n	800531e <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800530e:	2300      	movs	r3, #0
 8005310:	4a49      	ldr	r2, [pc, #292]	@ (8005438 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005312:	213a      	movs	r1, #58	@ 0x3a
 8005314:	4628      	mov	r0, r5
 8005316:	f000 f8b9 	bl	800548c <otm8009a_write_reg>
 800531a:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800531c:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800531e:	f1b8 0f01 	cmp.w	r8, #1
 8005322:	d157      	bne.n	80053d4 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005324:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005326:	f10d 0207 	add.w	r2, sp, #7
 800532a:	2136      	movs	r1, #54	@ 0x36
 800532c:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800532e:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005332:	2300      	movs	r3, #0
 8005334:	f000 f8aa 	bl	800548c <otm8009a_write_reg>
 8005338:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800533a:	2304      	movs	r3, #4
 800533c:	4a3f      	ldr	r2, [pc, #252]	@ (800543c <OTM8009A_Init+0x6fc>)
 800533e:	212a      	movs	r1, #42	@ 0x2a
 8005340:	4628      	mov	r0, r5
 8005342:	f000 f8a3 	bl	800548c <otm8009a_write_reg>
 8005346:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005348:	2304      	movs	r3, #4
 800534a:	4a3d      	ldr	r2, [pc, #244]	@ (8005440 <OTM8009A_Init+0x700>)
 800534c:	212b      	movs	r1, #43	@ 0x2b
 800534e:	4628      	mov	r0, r5
 8005350:	f000 f89c 	bl	800548c <otm8009a_write_reg>
 8005354:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8005356:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800535a:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800535c:	2300      	movs	r3, #0
 800535e:	4a39      	ldr	r2, [pc, #228]	@ (8005444 <OTM8009A_Init+0x704>)
 8005360:	2151      	movs	r1, #81	@ 0x51
 8005362:	4628      	mov	r0, r5
 8005364:	f000 f892 	bl	800548c <otm8009a_write_reg>
 8005368:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800536a:	4633      	mov	r3, r6
 800536c:	4a36      	ldr	r2, [pc, #216]	@ (8005448 <OTM8009A_Init+0x708>)
 800536e:	2153      	movs	r1, #83	@ 0x53
 8005370:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005372:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005374:	f000 f88a 	bl	800548c <otm8009a_write_reg>
 8005378:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800537a:	4633      	mov	r3, r6
 800537c:	4a33      	ldr	r2, [pc, #204]	@ (800544c <OTM8009A_Init+0x70c>)
 800537e:	2155      	movs	r1, #85	@ 0x55
 8005380:	4628      	mov	r0, r5
 8005382:	f000 f883 	bl	800548c <otm8009a_write_reg>
 8005386:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005388:	4633      	mov	r3, r6
 800538a:	4a31      	ldr	r2, [pc, #196]	@ (8005450 <OTM8009A_Init+0x710>)
 800538c:	215e      	movs	r1, #94	@ 0x5e
 800538e:	4628      	mov	r0, r5
 8005390:	f000 f87c 	bl	800548c <otm8009a_write_reg>
 8005394:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005396:	4633      	mov	r3, r6
 8005398:	4a2e      	ldr	r2, [pc, #184]	@ (8005454 <OTM8009A_Init+0x714>)
 800539a:	2129      	movs	r1, #41	@ 0x29
 800539c:	4628      	mov	r0, r5
 800539e:	f000 f875 	bl	800548c <otm8009a_write_reg>
 80053a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80053a4:	4633      	mov	r3, r6
 80053a6:	4631      	mov	r1, r6
 80053a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005420 <OTM8009A_Init+0x6e0>)
 80053aa:	4628      	mov	r0, r5
 80053ac:	f000 f86e 	bl	800548c <otm8009a_write_reg>
 80053b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80053b2:	4633      	mov	r3, r6
 80053b4:	4a28      	ldr	r2, [pc, #160]	@ (8005458 <OTM8009A_Init+0x718>)
 80053b6:	212c      	movs	r1, #44	@ 0x2c
 80053b8:	4628      	mov	r0, r5
 80053ba:	f000 f867 	bl	800548c <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 80053be:	42c4      	cmn	r4, r0
}
 80053c0:	bf14      	ite	ne
 80053c2:	f04f 30ff 	movne.w	r0, #4294967295
 80053c6:	4630      	moveq	r0, r6
 80053c8:	b002      	add	sp, #8
 80053ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80053ce:	4633      	mov	r3, r6
 80053d0:	4a22      	ldr	r2, [pc, #136]	@ (800545c <OTM8009A_Init+0x71c>)
 80053d2:	e79e      	b.n	8005312 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80053d4:	2300      	movs	r3, #0
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	e7bf      	b.n	800535a <OTM8009A_Init+0x61a>
 80053da:	bf00      	nop
 80053dc:	08023811 	.word	0x08023811
 80053e0:	080238d5 	.word	0x080238d5
 80053e4:	08023802 	.word	0x08023802
 80053e8:	080238d1 	.word	0x080238d1
 80053ec:	080237f3 	.word	0x080237f3
 80053f0:	080238d2 	.word	0x080238d2
 80053f4:	080237e9 	.word	0x080237e9
 80053f8:	080238d3 	.word	0x080238d3
 80053fc:	080237da 	.word	0x080237da
 8005400:	080238d4 	.word	0x080238d4
 8005404:	080237cb 	.word	0x080237cb
 8005408:	080238c1 	.word	0x080238c1
 800540c:	080238e2 	.word	0x080238e2
 8005410:	080238e3 	.word	0x080238e3
 8005414:	080238e4 	.word	0x080238e4
 8005418:	080238e5 	.word	0x080238e5
 800541c:	080238e6 	.word	0x080238e6
 8005420:	080238b5 	.word	0x080238b5
 8005424:	080237c8 	.word	0x080237c8
 8005428:	080237b8 	.word	0x080237b8
 800542c:	080237a8 	.word	0x080237a8
 8005430:	080238d8 	.word	0x080238d8
 8005434:	2400b144 	.word	0x2400b144
 8005438:	080238d9 	.word	0x080238d9
 800543c:	080238eb 	.word	0x080238eb
 8005440:	080238e7 	.word	0x080238e7
 8005444:	080238db 	.word	0x080238db
 8005448:	080238dc 	.word	0x080238dc
 800544c:	080238dd 	.word	0x080238dd
 8005450:	080238de 	.word	0x080238de
 8005454:	080238df 	.word	0x080238df
 8005458:	080238e0 	.word	0x080238e0
 800545c:	080238da 	.word	0x080238da

08005460 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8005460:	b160      	cbz	r0, 800547c <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005462:	684b      	ldr	r3, [r1, #4]
 8005464:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005466:	688b      	ldr	r3, [r1, #8]
 8005468:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800546a:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 800546c:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 800546e:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8005470:	4b04      	ldr	r3, [pc, #16]	@ (8005484 <OTM8009A_RegisterBusIO+0x24>)
 8005472:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005474:	4b04      	ldr	r3, [pc, #16]	@ (8005488 <OTM8009A_RegisterBusIO+0x28>)
 8005476:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8005478:	2000      	movs	r0, #0
 800547a:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	08004d0b 	.word	0x08004d0b
 8005488:	08004d19 	.word	0x08004d19

0800548c <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800548c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800548e:	6804      	ldr	r4, [r0, #0]
 8005490:	6880      	ldr	r0, [r0, #8]
 8005492:	46a4      	mov	ip, r4
}
 8005494:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005498:	4760      	bx	ip
	...

0800549c <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 800549c:	4a10      	ldr	r2, [pc, #64]	@ (80054e0 <BSP_I2C4_DeInit+0x44>)
{
 800549e:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 80054a0:	6813      	ldr	r3, [r2, #0]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 80054a6:	b10b      	cbz	r3, 80054ac <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 80054a8:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 80054aa:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80054ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80054b0:	480c      	ldr	r0, [pc, #48]	@ (80054e4 <BSP_I2C4_DeInit+0x48>)
 80054b2:	f001 fdfd 	bl	80070b0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80054b6:	480b      	ldr	r0, [pc, #44]	@ (80054e4 <BSP_I2C4_DeInit+0x48>)
 80054b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80054bc:	f001 fdf8 	bl	80070b0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80054c0:	4a09      	ldr	r2, [pc, #36]	@ (80054e8 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80054c2:	480a      	ldr	r0, [pc, #40]	@ (80054ec <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 80054c4:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 80054c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054cc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80054d0:	f002 f832 	bl	8007538 <HAL_I2C_DeInit>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d0e7      	beq.n	80054a8 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 80054d8:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80054dc:	e7e5      	b.n	80054aa <BSP_I2C4_DeInit+0xe>
 80054de:	bf00      	nop
 80054e0:	2400bba8 	.word	0x2400bba8
 80054e4:	58020c00 	.word	0x58020c00
 80054e8:	58024400 	.word	0x58024400
 80054ec:	2400b150 	.word	0x2400b150

080054f0 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80054f0:	2300      	movs	r3, #0
 80054f2:	2201      	movs	r2, #1
{
 80054f4:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 80054f6:	6041      	str	r1, [r0, #4]
{
 80054f8:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80054fa:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80054fc:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8005500:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005504:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8005508:	f001 ffc4 	bl	8007494 <HAL_I2C_Init>
 800550c:	4601      	mov	r1, r0
 800550e:	b108      	cbz	r0, 8005514 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8005510:	2001      	movs	r0, #1
}
 8005512:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8005514:	4620      	mov	r0, r4
 8005516:	f002 f9e6 	bl	80078e6 <HAL_I2CEx_ConfigAnalogFilter>
 800551a:	4601      	mov	r1, r0
 800551c:	2800      	cmp	r0, #0
 800551e:	d1f7      	bne.n	8005510 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8005520:	4620      	mov	r0, r4
 8005522:	f002 fa06 	bl	8007932 <HAL_I2CEx_ConfigDigitalFilter>
 8005526:	3800      	subs	r0, #0
 8005528:	bf18      	it	ne
 800552a:	2001      	movne	r0, #1
 800552c:	e7f1      	b.n	8005512 <MX_I2C4_Init+0x22>
	...

08005530 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8005530:	4ba1      	ldr	r3, [pc, #644]	@ (80057b8 <BSP_I2C4_Init+0x288>)
 8005532:	48a2      	ldr	r0, [pc, #648]	@ (80057bc <BSP_I2C4_Init+0x28c>)
{
 8005534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8005538:	6003      	str	r3, [r0, #0]
{
 800553a:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 800553c:	4ba0      	ldr	r3, [pc, #640]	@ (80057c0 <BSP_I2C4_Init+0x290>)
 800553e:	681c      	ldr	r4, [r3, #0]
 8005540:	b11c      	cbz	r4, 800554a <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8005542:	2000      	movs	r0, #0
}
 8005544:	b013      	add	sp, #76	@ 0x4c
 8005546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 800554a:	2201      	movs	r2, #1
 800554c:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800554e:	f002 f9c5 	bl	80078dc <HAL_I2C_GetState>
 8005552:	2800      	cmp	r0, #0
 8005554:	d1f5      	bne.n	8005542 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005556:	4d9b      	ldr	r5, [pc, #620]	@ (80057c4 <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005558:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800555c:	2702      	movs	r7, #2
 800555e:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005560:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005564:	a90d      	add	r1, sp, #52	@ 0x34
 8005566:	4898      	ldr	r0, [pc, #608]	@ (80057c8 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005568:	f043 0308 	orr.w	r3, r3, #8
 800556c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8005570:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8005574:	f003 0308 	and.w	r3, r3, #8
 8005578:	930a      	str	r3, [sp, #40]	@ 0x28
 800557a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800557c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8005580:	f043 0308 	orr.w	r3, r3, #8
 8005584:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8005588:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800558c:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005594:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005596:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800559a:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800559e:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80055a2:	f001 fc9d 	bl	8006ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80055a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80055aa:	a90d      	add	r1, sp, #52	@ 0x34
 80055ac:	4886      	ldr	r0, [pc, #536]	@ (80057c8 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80055ae:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80055b0:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80055b4:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80055b8:	f001 fc92 	bl	8006ee0 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80055bc:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80055c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055c4:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 80055c8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80055cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80055d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 80055d4:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80055d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055dc:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 80055e0:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80055e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055e8:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80055ec:	f004 fc8c 	bl	8009f08 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d06f      	beq.n	80056d4 <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80055f4:	4b75      	ldr	r3, [pc, #468]	@ (80057cc <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 80055f6:	4622      	mov	r2, r4
 80055f8:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 80055fa:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80055fe:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005602:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 80057d4 <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005606:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800560a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800560e:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 8005612:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005614:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005618:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 800561c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8005620:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 8005624:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005626:	4b6a      	ldr	r3, [pc, #424]	@ (80057d0 <BSP_I2C4_Init+0x2a0>)
 8005628:	681b      	ldr	r3, [r3, #0]
{
 800562a:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800562c:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8005630:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8005634:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8005638:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800563c:	d35d      	bcc.n	80056fa <BSP_I2C4_Init+0x1ca>
 800563e:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005640:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8005642:	9d00      	ldr	r5, [sp, #0]
 8005644:	42bd      	cmp	r5, r7
 8005646:	d852      	bhi.n	80056ee <BSP_I2C4_Init+0x1be>
 8005648:	42be      	cmp	r6, r7
 800564a:	d350      	bcc.n	80056ee <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 800564c:	4591      	cmp	r9, r2
 800564e:	d04e      	beq.n	80056ee <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005650:	2514      	movs	r5, #20
 8005652:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 8005656:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8005658:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800565a:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800565e:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005660:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005664:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005668:	d93e      	bls.n	80056e8 <BSP_I2C4_Init+0x1b8>
 800566a:	4a59      	ldr	r2, [pc, #356]	@ (80057d0 <BSP_I2C4_Init+0x2a0>)
 800566c:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800566e:	4b58      	ldr	r3, [pc, #352]	@ (80057d0 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005670:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 8005674:	f04f 32ff 	mov.w	r2, #4294967295
 8005678:	4956      	ldr	r1, [pc, #344]	@ (80057d4 <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800567a:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800567c:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800567e:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005680:	0043      	lsls	r3, r0, #1
 8005682:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 8005686:	e9cd 2501 	strd	r2, r5, [sp, #4]
 800568a:	f10b 0b01 	add.w	fp, fp, #1
 800568e:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 8005692:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8005696:	9508      	str	r5, [sp, #32]
 8005698:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800569a:	9b05      	ldr	r3, [sp, #20]
 800569c:	429f      	cmp	r7, r3
 800569e:	d138      	bne.n	8005712 <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 80056a0:	9b01      	ldr	r3, [sp, #4]
 80056a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80056a4:	d816      	bhi.n	80056d4 <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80056a6:	2114      	movs	r1, #20
 80056a8:	9a01      	ldr	r2, [sp, #4]
 80056aa:	4b4a      	ldr	r3, [pc, #296]	@ (80057d4 <BSP_I2C4_Init+0x2a4>)
 80056ac:	434a      	muls	r2, r1
 80056ae:	1899      	adds	r1, r3, r2
 80056b0:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80056b2:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80056b4:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80056b8:	684b      	ldr	r3, [r1, #4]
 80056ba:	051b      	lsls	r3, r3, #20
 80056bc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80056c0:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80056c2:	688b      	ldr	r3, [r1, #8]
 80056c4:	041b      	lsls	r3, r3, #16
 80056c6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80056ca:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80056cc:	68cb      	ldr	r3, [r1, #12]
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80056d2:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80056d4:	4621      	mov	r1, r4
 80056d6:	4839      	ldr	r0, [pc, #228]	@ (80057bc <BSP_I2C4_Init+0x28c>)
 80056d8:	f7ff ff0a 	bl	80054f0 <MX_I2C4_Init>
 80056dc:	2800      	cmp	r0, #0
 80056de:	f43f af30 	beq.w	8005542 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 80056e2:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80056e6:	e72d      	b.n	8005544 <BSP_I2C4_Init+0x14>
 80056e8:	4691      	mov	r9, r2
 80056ea:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80056ee:	f10e 0e01 	add.w	lr, lr, #1
 80056f2:	440f      	add	r7, r1
 80056f4:	f1be 0f10 	cmp.w	lr, #16
 80056f8:	d1a3      	bne.n	8005642 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80056fa:	f1bc 0f10 	cmp.w	ip, #16
 80056fe:	4488      	add	r8, r1
 8005700:	d196      	bne.n	8005630 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005702:	3201      	adds	r2, #1
 8005704:	4401      	add	r1, r0
 8005706:	2a10      	cmp	r2, #16
 8005708:	d18f      	bne.n	800562a <BSP_I2C4_Init+0xfa>
 800570a:	f1ba 0f00 	cmp.w	sl, #0
 800570e:	d1ac      	bne.n	800566a <BSP_I2C4_Init+0x13a>
 8005710:	e7ad      	b.n	800566e <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005712:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005714:	f04f 0c00 	mov.w	ip, #0
 8005718:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800571a:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800571e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8005720:	441d      	add	r5, r3
 8005722:	441e      	add	r6, r3
 8005724:	9503      	str	r5, [sp, #12]
 8005726:	ebab 0503 	sub.w	r5, fp, r3
 800572a:	9607      	str	r6, [sp, #28]
 800572c:	006d      	lsls	r5, r5, #1
 800572e:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005730:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005732:	f240 5214 	movw	r2, #1300	@ 0x514
 8005736:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800573a:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800573e:	4295      	cmp	r5, r2
 8005740:	d92f      	bls.n	80057a2 <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005742:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005746:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 800574a:	d22a      	bcs.n	80057a2 <BSP_I2C4_Init+0x272>
 800574c:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800574e:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005752:	f8dd 9000 	ldr.w	r9, [sp]
 8005756:	442e      	add	r6, r5
 8005758:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800575c:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8005760:	f240 4212 	movw	r2, #1042	@ 0x412
 8005764:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8005768:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800576c:	4592      	cmp	sl, r2
 800576e:	d811      	bhi.n	8005794 <BSP_I2C4_Init+0x264>
 8005770:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8005774:	d30e      	bcc.n	8005794 <BSP_I2C4_Init+0x264>
 8005776:	4580      	cmp	r8, r0
 8005778:	d90c      	bls.n	8005794 <BSP_I2C4_Init+0x264>
              error = -error;
 800577a:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 800577e:	bf28      	it	cs
 8005780:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8005782:	9a02      	ldr	r2, [sp, #8]
 8005784:	4592      	cmp	sl, r2
 8005786:	d205      	bcs.n	8005794 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 8005788:	9a04      	ldr	r2, [sp, #16]
 800578a:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 800578c:	9a06      	ldr	r2, [sp, #24]
 800578e:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8005792:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005794:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 8005798:	4498      	add	r8, r3
 800579a:	441e      	add	r6, r3
 800579c:	eba9 0903 	sub.w	r9, r9, r3
 80057a0:	d1dc      	bne.n	800575c <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80057a2:	9a00      	ldr	r2, [sp, #0]
 80057a4:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 80057a8:	441d      	add	r5, r3
 80057aa:	eba2 0203 	sub.w	r2, r2, r3
 80057ae:	9200      	str	r2, [sp, #0]
 80057b0:	d1bf      	bne.n	8005732 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80057b2:	3701      	adds	r7, #1
 80057b4:	3114      	adds	r1, #20
 80057b6:	e770      	b.n	800569a <BSP_I2C4_Init+0x16a>
 80057b8:	58001c00 	.word	0x58001c00
 80057bc:	2400b150 	.word	0x2400b150
 80057c0:	2400bba8 	.word	0x2400bba8
 80057c4:	58024400 	.word	0x58024400
 80057c8:	58020c00 	.word	0x58020c00
 80057cc:	3b9aca00 	.word	0x3b9aca00
 80057d0:	2400b1a4 	.word	0x2400b1a4
 80057d4:	2400b1a8 	.word	0x2400b1a8

080057d8 <BSP_I2C4_WriteReg>:
{
 80057d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80057da:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80057de:	9200      	str	r2, [sp, #0]
 80057e0:	460a      	mov	r2, r1
 80057e2:	4601      	mov	r1, r0
 80057e4:	4808      	ldr	r0, [pc, #32]	@ (8005808 <BSP_I2C4_WriteReg+0x30>)
 80057e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057ea:	2301      	movs	r3, #1
 80057ec:	f001 febe 	bl	800756c <HAL_I2C_Mem_Write>
 80057f0:	b140      	cbz	r0, 8005804 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80057f2:	4805      	ldr	r0, [pc, #20]	@ (8005808 <BSP_I2C4_WriteReg+0x30>)
 80057f4:	f002 f875 	bl	80078e2 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80057f8:	2804      	cmp	r0, #4
 80057fa:	bf14      	ite	ne
 80057fc:	f06f 0003 	mvnne.w	r0, #3
 8005800:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8005804:	b004      	add	sp, #16
 8005806:	bd10      	pop	{r4, pc}
 8005808:	2400b150 	.word	0x2400b150

0800580c <BSP_I2C4_ReadReg>:
{
 800580c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800580e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8005812:	9200      	str	r2, [sp, #0]
 8005814:	460a      	mov	r2, r1
 8005816:	4601      	mov	r1, r0
 8005818:	4808      	ldr	r0, [pc, #32]	@ (800583c <BSP_I2C4_ReadReg+0x30>)
 800581a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800581e:	2301      	movs	r3, #1
 8005820:	f001 ff7e 	bl	8007720 <HAL_I2C_Mem_Read>
 8005824:	b140      	cbz	r0, 8005838 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005826:	4805      	ldr	r0, [pc, #20]	@ (800583c <BSP_I2C4_ReadReg+0x30>)
 8005828:	f002 f85b 	bl	80078e2 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800582c:	2804      	cmp	r0, #4
 800582e:	bf14      	ite	ne
 8005830:	f06f 0003 	mvnne.w	r0, #3
 8005834:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8005838:	b004      	add	sp, #16
 800583a:	bd10      	pop	{r4, pc}
 800583c:	2400b150 	.word	0x2400b150

08005840 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8005840:	f000 bd08 	b.w	8006254 <HAL_GetTick>

08005844 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8005844:	4a09      	ldr	r2, [pc, #36]	@ (800586c <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005846:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 800584a:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800584c:	684a      	ldr	r2, [r1, #4]
 800584e:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8005850:	2201      	movs	r2, #1
 8005852:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8005854:	688a      	ldr	r2, [r1, #8]
 8005856:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8005858:	680a      	ldr	r2, [r1, #0]
 800585a:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800585c:	2200      	movs	r2, #0
 800585e:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8005862:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8005864:	68ca      	ldr	r2, [r1, #12]
 8005866:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8005868:	f003 bc78 	b.w	800915c <HAL_QSPI_Init>
 800586c:	52005000 	.word	0x52005000

08005870 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8005870:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005872:	b988      	cbnz	r0, 8005898 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005874:	4c0a      	ldr	r4, [pc, #40]	@ (80058a0 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8005876:	480b      	ldr	r0, [pc, #44]	@ (80058a4 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005878:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800587a:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800587c:	b94b      	cbnz	r3, 8005892 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800587e:	f7ff f9bc 	bl	8004bfa <MT25TL01G_EnableMemoryMappedModeSTR>
 8005882:	b110      	cbz	r0, 800588a <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005884:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8005888:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800588a:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 800588c:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800588e:	7023      	strb	r3, [r4, #0]
 8005890:	e7fa      	b.n	8005888 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005892:	f7ff f968 	bl	8004b66 <MT25TL01G_EnableMemoryMappedModeDTR>
 8005896:	e7f4      	b.n	8005882 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8005898:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800589c:	e7f4      	b.n	8005888 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 800589e:	bf00      	nop
 80058a0:	2400bbac 	.word	0x2400bbac
 80058a4:	240001c4 	.word	0x240001c4

080058a8 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	460c      	mov	r4, r1
 80058ac:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80058ae:	bb30      	cbnz	r0, 80058fe <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 80058b0:	4d17      	ldr	r5, [pc, #92]	@ (8005910 <BSP_QSPI_ConfigFlash+0x68>)
 80058b2:	782b      	ldrb	r3, [r5, #0]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d025      	beq.n	8005904 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80058b8:	fab2 f382 	clz	r3, r2
 80058bc:	4e15      	ldr	r6, [pc, #84]	@ (8005914 <BSP_QSPI_ConfigFlash+0x6c>)
 80058be:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80058c0:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80058c6:	f003 fc49 	bl	800915c <HAL_QSPI_Init>
 80058ca:	b9f0      	cbnz	r0, 800590a <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 80058cc:	786b      	ldrb	r3, [r5, #1]
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d10f      	bne.n	80058f2 <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 80058d2:	2c03      	cmp	r4, #3
 80058d4:	d105      	bne.n	80058e2 <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80058d6:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80058d8:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 80058da:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80058dc:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80058de:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 80058e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 80058e2:	4630      	mov	r0, r6
 80058e4:	f7ff f923 	bl	8004b2e <MT25TL01G_ExitQPIMode>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	d0f4      	beq.n	80058d6 <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80058ec:	f06f 0004 	mvn.w	r0, #4
 80058f0:	e7f6      	b.n	80058e0 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 80058f2:	2c03      	cmp	r4, #3
 80058f4:	d1ef      	bne.n	80058d6 <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 80058f6:	4630      	mov	r0, r6
 80058f8:	f7ff f8fd 	bl	8004af6 <MT25TL01G_EnterQPIMode>
 80058fc:	e7f4      	b.n	80058e8 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 80058fe:	f06f 0001 	mvn.w	r0, #1
 8005902:	e7ed      	b.n	80058e0 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8005904:	f06f 0019 	mvn.w	r0, #25
 8005908:	e7ea      	b.n	80058e0 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800590a:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800590e:	e7e7      	b.n	80058e0 <BSP_QSPI_ConfigFlash+0x38>
 8005910:	2400bbac 	.word	0x2400bbac
 8005914:	240001c4 	.word	0x240001c4

08005918 <BSP_QSPI_Init>:
{
 8005918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800591c:	460c      	mov	r4, r1
 800591e:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005920:	2800      	cmp	r0, #0
 8005922:	f040 81ac 	bne.w	8005c7e <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8005926:	4d03      	ldr	r5, [pc, #12]	@ (8005934 <BSP_QSPI_Init+0x1c>)
 8005928:	782f      	ldrb	r7, [r5, #0]
 800592a:	b12f      	cbz	r7, 8005938 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 800592c:	2000      	movs	r0, #0
}
 800592e:	b024      	add	sp, #144	@ 0x90
 8005930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005934:	2400bbac 	.word	0x2400bbac
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8005938:	4bc3      	ldr	r3, [pc, #780]	@ (8005c48 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800593a:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800593e:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005940:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8005942:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005946:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800594a:	48c0      	ldr	r0, [pc, #768]	@ (8005c4c <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800594c:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8005950:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005954:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005958:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800595c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8005960:	9201      	str	r2, [sp, #4]
 8005962:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8005964:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005966:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800596a:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 800596c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800596e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005972:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8005974:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005978:	f042 0202 	orr.w	r2, r2, #2
 800597c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005980:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005984:	f002 0202 	and.w	r2, r2, #2
 8005988:	9202      	str	r2, [sp, #8]
 800598a:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800598c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005990:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005994:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005998:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800599c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80059a0:	9203      	str	r2, [sp, #12]
 80059a2:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 80059a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80059a8:	f042 0208 	orr.w	r2, r2, #8
 80059ac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80059b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80059b4:	f002 0208 	and.w	r2, r2, #8
 80059b8:	9204      	str	r2, [sp, #16]
 80059ba:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 80059bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80059c0:	f042 0220 	orr.w	r2, r2, #32
 80059c4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80059c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80059cc:	f002 0220 	and.w	r2, r2, #32
 80059d0:	9205      	str	r2, [sp, #20]
 80059d2:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 80059d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80059d8:	f042 0220 	orr.w	r2, r2, #32
 80059dc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80059e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80059e4:	f002 0220 	and.w	r2, r2, #32
 80059e8:	9206      	str	r2, [sp, #24]
 80059ea:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 80059ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80059f0:	f042 0220 	orr.w	r2, r2, #32
 80059f4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80059f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80059fc:	f002 0220 	and.w	r2, r2, #32
 8005a00:	9207      	str	r2, [sp, #28]
 8005a02:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8005a04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a0c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a14:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005a18:	9208      	str	r2, [sp, #32]
 8005a1a:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8005a1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a20:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a24:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a2c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005a30:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8005a34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a3c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a44:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005a48:	920a      	str	r2, [sp, #40]	@ 0x28
 8005a4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8005a4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a54:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a5c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005a60:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005a62:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8005a64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a6c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a78:	930c      	str	r3, [sp, #48]	@ 0x30
 8005a7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a82:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005a84:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005a86:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005a8a:	f001 fa29 	bl	8006ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005a8e:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005a90:	a916      	add	r1, sp, #88	@ 0x58
 8005a92:	486f      	ldr	r0, [pc, #444]	@ (8005c50 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005a94:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005a96:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005a9a:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005a9e:	f001 fa1f 	bl	8006ee0 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005aa2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005aa6:	a916      	add	r1, sp, #88	@ 0x58
 8005aa8:	486a      	ldr	r0, [pc, #424]	@ (8005c54 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005aaa:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005aac:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005aae:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005ab0:	f001 fa16 	bl	8006ee0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005ab4:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8005ab6:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005aba:	4867      	ldr	r0, [pc, #412]	@ (8005c58 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005abc:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005ac0:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005ac2:	f001 fa0d 	bl	8006ee0 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005ac6:	a916      	add	r1, sp, #88	@ 0x58
 8005ac8:	4864      	ldr	r0, [pc, #400]	@ (8005c5c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005aca:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005ace:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005ad2:	f001 fa05 	bl	8006ee0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005ad6:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005ad8:	a916      	add	r1, sp, #88	@ 0x58
 8005ada:	485f      	ldr	r0, [pc, #380]	@ (8005c58 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005adc:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005ade:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005ae0:	f001 f9fe 	bl	8006ee0 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005ae4:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005ae6:	a916      	add	r1, sp, #88	@ 0x58
 8005ae8:	485c      	ldr	r0, [pc, #368]	@ (8005c5c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005aea:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005aec:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005aee:	f001 f9f7 	bl	8006ee0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005af2:	a916      	add	r1, sp, #88	@ 0x58
 8005af4:	4856      	ldr	r0, [pc, #344]	@ (8005c50 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8005af6:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005afa:	f001 f9f1 	bl	8006ee0 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005afe:	a916      	add	r1, sp, #88	@ 0x58
 8005b00:	4856      	ldr	r0, [pc, #344]	@ (8005c5c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8005b02:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005b06:	f001 f9eb 	bl	8006ee0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005b0a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005b0e:	a916      	add	r1, sp, #88	@ 0x58
 8005b10:	484f      	ldr	r0, [pc, #316]	@ (8005c50 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005b12:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005b14:	f001 f9e4 	bl	8006ee0 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8005b18:	463a      	mov	r2, r7
 8005b1a:	210f      	movs	r1, #15
 8005b1c:	205c      	movs	r0, #92	@ 0x5c
 8005b1e:	f000 fbc9 	bl	80062b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005b22:	205c      	movs	r0, #92	@ 0x5c
 8005b24:	f000 fbf8 	bl	8006318 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8005b28:	a811      	add	r0, sp, #68	@ 0x44
 8005b2a:	f7fe ff38 	bl	800499e <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005b2e:	7863      	ldrb	r3, [r4, #1]
 8005b30:	4a4b      	ldr	r2, [pc, #300]	@ (8005c60 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8005b32:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005b36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b3a:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005b3e:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005b42:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8005b46:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005b4a:	a90d      	add	r1, sp, #52	@ 0x34
 8005b4c:	4845      	ldr	r0, [pc, #276]	@ (8005c64 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005b4e:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005b50:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005b52:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005b54:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005b56:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005b58:	f7ff fe74 	bl	8005844 <MX_QSPI_Init>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	f040 8091 	bne.w	8005c84 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005b62:	2103      	movs	r1, #3
 8005b64:	483f      	ldr	r0, [pc, #252]	@ (8005c64 <BSP_QSPI_Init+0x34c>)
 8005b66:	f7ff f88e 	bl	8004c86 <MT25TL01G_ResetEnable>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	f040 8084 	bne.w	8005c78 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005b70:	2103      	movs	r1, #3
 8005b72:	483c      	ldr	r0, [pc, #240]	@ (8005c64 <BSP_QSPI_Init+0x34c>)
 8005b74:	f7ff f8a8 	bl	8004cc8 <MT25TL01G_ResetMemory>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	d17d      	bne.n	8005c78 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005b7c:	7869      	ldrb	r1, [r5, #1]
 8005b7e:	4839      	ldr	r0, [pc, #228]	@ (8005c64 <BSP_QSPI_Init+0x34c>)
 8005b80:	f7fe ff1e 	bl	80049c0 <MT25TL01G_AutoPollingMemReady>
 8005b84:	4601      	mov	r1, r0
 8005b86:	2800      	cmp	r0, #0
 8005b88:	d176      	bne.n	8005c78 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005b8a:	4836      	ldr	r0, [pc, #216]	@ (8005c64 <BSP_QSPI_Init+0x34c>)
 8005b8c:	f7ff f87b 	bl	8004c86 <MT25TL01G_ResetEnable>
 8005b90:	4601      	mov	r1, r0
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d170      	bne.n	8005c78 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005b96:	4833      	ldr	r0, [pc, #204]	@ (8005c64 <BSP_QSPI_Init+0x34c>)
 8005b98:	f7ff f896 	bl	8004cc8 <MT25TL01G_ResetMemory>
 8005b9c:	4601      	mov	r1, r0
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d16a      	bne.n	8005c78 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005ba2:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8005ba4:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005ba6:	482f      	ldr	r0, [pc, #188]	@ (8005c64 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005ba8:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005baa:	f7fe ff09 	bl	80049c0 <MT25TL01G_AutoPollingMemReady>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d162      	bne.n	8005c78 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005bb2:	7869      	ldrb	r1, [r5, #1]
 8005bb4:	482b      	ldr	r0, [pc, #172]	@ (8005c64 <BSP_QSPI_Init+0x34c>)
 8005bb6:	f7fe ff72 	bl	8004a9e <MT25TL01G_Enter4BytesAddressMode>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d15c      	bne.n	8005c78 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005bbe:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8005bc2:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8005bc6:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005bcc:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005bce:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005bd0:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005bd2:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005bd4:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8005bd8:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 8005bda:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005bdc:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005be0:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005be4:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005be8:	481e      	ldr	r0, [pc, #120]	@ (8005c64 <BSP_QSPI_Init+0x34c>)
 8005bea:	f003 fb03 	bl	80091f4 <HAL_QSPI_Command>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d142      	bne.n	8005c78 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bf6:	f10d 0102 	add.w	r1, sp, #2
 8005bfa:	481a      	ldr	r0, [pc, #104]	@ (8005c64 <BSP_QSPI_Init+0x34c>)
 8005bfc:	f003 fb9b 	bl	8009336 <HAL_QSPI_Receive>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d139      	bne.n	8005c78 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005c04:	7869      	ldrb	r1, [r5, #1]
 8005c06:	4817      	ldr	r0, [pc, #92]	@ (8005c64 <BSP_QSPI_Init+0x34c>)
 8005c08:	f7fe ff05 	bl	8004a16 <MT25TL01G_WriteEnable>
 8005c0c:	bba0      	cbnz	r0, 8005c78 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005c0e:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c14:	a916      	add	r1, sp, #88	@ 0x58
 8005c16:	4813      	ldr	r0, [pc, #76]	@ (8005c64 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005c18:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8005c1a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005c1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c22:	051b      	lsls	r3, r3, #20
 8005c24:	0d1b      	lsrs	r3, r3, #20
 8005c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c2e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c32:	f003 fadf 	bl	80091f4 <HAL_QSPI_Command>
 8005c36:	b9f8      	cbnz	r0, 8005c78 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c3c:	f10d 0102 	add.w	r1, sp, #2
 8005c40:	4808      	ldr	r0, [pc, #32]	@ (8005c64 <BSP_QSPI_Init+0x34c>)
 8005c42:	f003 fb1c 	bl	800927e <HAL_QSPI_Transmit>
 8005c46:	e00f      	b.n	8005c68 <BSP_QSPI_Init+0x350>
 8005c48:	58024400 	.word	0x58024400
 8005c4c:	58020400 	.word	0x58020400
 8005c50:	58021800 	.word	0x58021800
 8005c54:	58020c00 	.word	0x58020c00
 8005c58:	58021c00 	.word	0x58021c00
 8005c5c:	58021400 	.word	0x58021400
 8005c60:	080238f0 	.word	0x080238f0
 8005c64:	240001c4 	.word	0x240001c4
 8005c68:	b930      	cbnz	r0, 8005c78 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8005c6a:	7862      	ldrb	r2, [r4, #1]
 8005c6c:	7821      	ldrb	r1, [r4, #0]
 8005c6e:	f7ff fe1b 	bl	80058a8 <BSP_QSPI_ConfigFlash>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	f43f ae5a 	beq.w	800592c <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005c78:	f06f 0004 	mvn.w	r0, #4
 8005c7c:	e657      	b.n	800592e <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 8005c7e:	f06f 0001 	mvn.w	r0, #1
 8005c82:	e654      	b.n	800592e <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005c84:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005c88:	e651      	b.n	800592e <BSP_QSPI_Init+0x16>
 8005c8a:	bf00      	nop

08005c8c <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8005c8c:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8005c8e:	4604      	mov	r4, r0
 8005c90:	b970      	cbnz	r0, 8005cb0 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8005c92:	4b09      	ldr	r3, [pc, #36]	@ (8005cb8 <BSP_SDRAM_DeInit+0x2c>)
 8005c94:	4809      	ldr	r0, [pc, #36]	@ (8005cbc <BSP_SDRAM_DeInit+0x30>)
 8005c96:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8005c98:	f004 ff98 	bl	800abcc <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8005c9c:	207a      	movs	r0, #122	@ 0x7a
 8005c9e:	f000 fb49 	bl	8006334 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8005ca2:	4807      	ldr	r0, [pc, #28]	@ (8005cc0 <BSP_SDRAM_DeInit+0x34>)
 8005ca4:	4b07      	ldr	r3, [pc, #28]	@ (8005cc4 <BSP_SDRAM_DeInit+0x38>)
 8005ca6:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005ca8:	f002 ffde 	bl	8008c68 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8005cac:	4620      	mov	r0, r4
}
 8005cae:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005cb0:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005cb4:	e7fb      	b.n	8005cae <BSP_SDRAM_DeInit+0x22>
 8005cb6:	bf00      	nop
 8005cb8:	52004140 	.word	0x52004140
 8005cbc:	2400bcb0 	.word	0x2400bcb0
 8005cc0:	2400bbb8 	.word	0x2400bbb8
 8005cc4:	52000040 	.word	0x52000040

08005cc8 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005cc8:	2201      	movs	r2, #1
 8005cca:	4915      	ldr	r1, [pc, #84]	@ (8005d20 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005ccc:	4b15      	ldr	r3, [pc, #84]	@ (8005d24 <MX_SDRAM_Init+0x5c>)
{
 8005cce:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005cd0:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005cd4:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005cd6:	2104      	movs	r1, #4
 8005cd8:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005cda:	2440      	movs	r4, #64	@ 0x40
{
 8005cdc:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005cde:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005ce2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8005ce6:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005cea:	2200      	movs	r2, #0
 8005cec:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8005cf0:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005cf4:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8005cf8:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005cfa:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005cfc:	2207      	movs	r2, #7
 8005cfe:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8005d00:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005d04:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8005d06:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005d08:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8005d0c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005d10:	f004 ff34 	bl	800ab7c <HAL_SDRAM_Init>
}
 8005d14:	3800      	subs	r0, #0
 8005d16:	bf18      	it	ne
 8005d18:	2001      	movne	r0, #1
 8005d1a:	b008      	add	sp, #32
 8005d1c:	bd10      	pop	{r4, pc}
 8005d1e:	bf00      	nop
 8005d20:	52004140 	.word	0x52004140
 8005d24:	2400bcb0 	.word	0x2400bcb0

08005d28 <BSP_SDRAM_Init>:
{
 8005d28:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005d2a:	4605      	mov	r5, r0
{
 8005d2c:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	f040 80dd 	bne.w	8005eee <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d34:	4b71      	ldr	r3, [pc, #452]	@ (8005efc <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005d36:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005d38:	a909      	add	r1, sp, #36	@ 0x24
 8005d3a:	4871      	ldr	r0, [pc, #452]	@ (8005f00 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d3c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005d40:	4c70      	ldr	r4, [pc, #448]	@ (8005f04 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005d46:	4e70      	ldr	r6, [pc, #448]	@ (8005f08 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d48:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005d4c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005d50:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005d54:	9201      	str	r2, [sp, #4]
 8005d56:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8005d58:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005d5c:	f042 0201 	orr.w	r2, r2, #1
 8005d60:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005d64:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005d68:	f002 0201 	and.w	r2, r2, #1
 8005d6c:	9202      	str	r2, [sp, #8]
 8005d6e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d74:	f042 0208 	orr.w	r2, r2, #8
 8005d78:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005d7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d80:	f002 0208 	and.w	r2, r2, #8
 8005d84:	9203      	str	r2, [sp, #12]
 8005d86:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005d88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d8c:	f042 0210 	orr.w	r2, r2, #16
 8005d90:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005d94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d98:	f002 0210 	and.w	r2, r2, #16
 8005d9c:	9204      	str	r2, [sp, #16]
 8005d9e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005da0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005da4:	f042 0220 	orr.w	r2, r2, #32
 8005da8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005dac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005db0:	f002 0220 	and.w	r2, r2, #32
 8005db4:	9205      	str	r2, [sp, #20]
 8005db6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005db8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005dbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dc0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005dc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005dc8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005dcc:	9206      	str	r2, [sp, #24]
 8005dce:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005dd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005dd4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005dd8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005ddc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005de0:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005de4:	9207      	str	r2, [sp, #28]
 8005de6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005de8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005dec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005df0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005df4:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dfe:	9308      	str	r3, [sp, #32]
 8005e00:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005e08:	230c      	movs	r3, #12
 8005e0a:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005e0e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005e12:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005e14:	f001 f864 	bl	8006ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005e18:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005e1c:	a909      	add	r1, sp, #36	@ 0x24
 8005e1e:	483b      	ldr	r0, [pc, #236]	@ (8005f0c <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005e20:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005e22:	f001 f85d 	bl	8006ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005e26:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005e2a:	a909      	add	r1, sp, #36	@ 0x24
 8005e2c:	4838      	ldr	r0, [pc, #224]	@ (8005f10 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005e2e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005e30:	f001 f856 	bl	8006ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005e34:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005e38:	a909      	add	r1, sp, #36	@ 0x24
 8005e3a:	4836      	ldr	r0, [pc, #216]	@ (8005f14 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005e3c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005e3e:	f001 f84f 	bl	8006ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005e42:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005e46:	a909      	add	r1, sp, #36	@ 0x24
 8005e48:	4833      	ldr	r0, [pc, #204]	@ (8005f18 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005e4a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005e4c:	f001 f848 	bl	8006ee0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005e50:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005e54:	a909      	add	r1, sp, #36	@ 0x24
 8005e56:	4831      	ldr	r0, [pc, #196]	@ (8005f1c <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005e58:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005e5a:	f001 f841 	bl	8006ee0 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005e5e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005e62:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005e66:	f240 2002 	movw	r0, #514	@ 0x202
 8005e6a:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005e6e:	6334      	str	r4, [r6, #48]	@ 0x30
 8005e70:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005e72:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005e76:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005e7a:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005e7c:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005e7e:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8005e80:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8005e82:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005e86:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005e8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005e8e:	4b24      	ldr	r3, [pc, #144]	@ (8005f20 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005e90:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005e92:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8005e94:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8005e98:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005e9c:	f002 fee4 	bl	8008c68 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f002 fe72 	bl	8008b8a <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8005ea6:	462a      	mov	r2, r5
 8005ea8:	210f      	movs	r1, #15
 8005eaa:	207a      	movs	r0, #122	@ 0x7a
 8005eac:	f000 fa02 	bl	80062b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8005eb0:	207a      	movs	r0, #122	@ 0x7a
 8005eb2:	f000 fa31 	bl	8006318 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f7ff ff06 	bl	8005cc8 <MX_SDRAM_Init>
 8005ebc:	b9d0      	cbnz	r0, 8005ef4 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005ebe:	4919      	ldr	r1, [pc, #100]	@ (8005f24 <BSP_SDRAM_Init+0x1fc>)
 8005ec0:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8005ec2:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8005ec6:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8005eca:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8005ecc:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005ed0:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8005ed2:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005ed6:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005eda:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005edc:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005ede:	f7fe fd31 	bl	8004944 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	bf18      	it	ne
 8005ee6:	f06f 0004 	mvnne.w	r0, #4
}
 8005eea:	b00f      	add	sp, #60	@ 0x3c
 8005eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005eee:	f06f 0001 	mvn.w	r0, #1
 8005ef2:	e7fa      	b.n	8005eea <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8005ef4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005ef8:	e7f7      	b.n	8005eea <BSP_SDRAM_Init+0x1c2>
 8005efa:	bf00      	nop
 8005efc:	58024400 	.word	0x58024400
 8005f00:	58020c00 	.word	0x58020c00
 8005f04:	2400bc24 	.word	0x2400bc24
 8005f08:	2400bcb0 	.word	0x2400bcb0
 8005f0c:	58021000 	.word	0x58021000
 8005f10:	58021400 	.word	0x58021400
 8005f14:	58021800 	.word	0x58021800
 8005f18:	58021c00 	.word	0x58021c00
 8005f1c:	58022000 	.word	0x58022000
 8005f20:	52000040 	.word	0x52000040
 8005f24:	2400bc90 	.word	0x2400bc90

08005f28 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8005f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005f30:	4606      	mov	r6, r0
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d15c      	bne.n	8005ff0 <BSP_TS_Init+0xc8>
 8005f36:	680b      	ldr	r3, [r1, #0]
 8005f38:	1e5a      	subs	r2, r3, #1
 8005f3a:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8005f3e:	d257      	bcs.n	8005ff0 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005f40:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005f42:	1e51      	subs	r1, r2, #1
 8005f44:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8005f48:	d252      	bcs.n	8005ff0 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	bf28      	it	cs
 8005f4e:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005f50:	68e2      	ldr	r2, [r4, #12]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d84c      	bhi.n	8005ff0 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005f56:	2370      	movs	r3, #112	@ 0x70
 8005f58:	2254      	movs	r2, #84	@ 0x54
 8005f5a:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005f5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006034 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005f62:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8005f66:	4b2e      	ldr	r3, [pc, #184]	@ (8006020 <BSP_TS_Init+0xf8>)
 8005f68:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8005f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8006024 <BSP_TS_Init+0xfc>)
 8005f6c:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8005f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8006028 <BSP_TS_Init+0x100>)
 8005f70:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8005f72:	4b2e      	ldr	r3, [pc, #184]	@ (800602c <BSP_TS_Init+0x104>)
 8005f74:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8005f76:	4b2e      	ldr	r3, [pc, #184]	@ (8006030 <BSP_TS_Init+0x108>)
 8005f78:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005f7a:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005f7e:	a906      	add	r1, sp, #24
 8005f80:	482c      	ldr	r0, [pc, #176]	@ (8006034 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005f82:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005f86:	f7fe fbe3 	bl	8004750 <FT6X06_RegisterBusIO>
 8005f8a:	b9c0      	cbnz	r0, 8005fbe <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8005f8c:	4669      	mov	r1, sp
 8005f8e:	4829      	ldr	r0, [pc, #164]	@ (8006034 <BSP_TS_Init+0x10c>)
 8005f90:	f7fe fb28 	bl	80045e4 <FT6X06_ReadID>
 8005f94:	b998      	cbnz	r0, 8005fbe <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 8005f96:	9b00      	ldr	r3, [sp, #0]
 8005f98:	2b11      	cmp	r3, #17
 8005f9a:	d110      	bne.n	8005fbe <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8005f9c:	a903      	add	r1, sp, #12
 8005f9e:	4825      	ldr	r0, [pc, #148]	@ (8006034 <BSP_TS_Init+0x10c>)
 8005fa0:	f7fe fad4 	bl	800454c <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 8005fa4:	4f24      	ldr	r7, [pc, #144]	@ (8006038 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8005fa6:	4b25      	ldr	r3, [pc, #148]	@ (800603c <BSP_TS_Init+0x114>)
 8005fa8:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006044 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8005fac:	4821      	ldr	r0, [pc, #132]	@ (8006034 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8005fae:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 8005fb2:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4798      	blx	r3
 8005fba:	4605      	mov	r5, r0
 8005fbc:	b1d8      	cbz	r0, 8005ff6 <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 8005fbe:	b116      	cbz	r6, 8005fc6 <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 8005fc0:	f04f 35ff 	mov.w	r5, #4294967295
 8005fc4:	e010      	b.n	8005fe8 <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 8005fc6:	2601      	movs	r6, #1
 8005fc8:	e7d7      	b.n	8005f7a <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005fca:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005fcc:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005fce:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005fd0:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005fd2:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005fd4:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005fd6:	68e3      	ldr	r3, [r4, #12]
 8005fd8:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005fda:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005fdc:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005fde:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005fe0:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005fe2:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005fe4:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8005fe8:	4628      	mov	r0, r5
 8005fea:	b00c      	add	sp, #48	@ 0x30
 8005fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005ff0:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8005ff4:	e7f8      	b.n	8005fe8 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005ff6:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005ff8:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005ffa:	4e11      	ldr	r6, [pc, #68]	@ (8006040 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005ffc:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005ffe:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8006000:	6863      	ldr	r3, [r4, #4]
 8006002:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8006004:	68a3      	ldr	r3, [r4, #8]
 8006006:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8006008:	68e3      	ldr	r3, [r4, #12]
 800600a:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800600c:	f8d8 3000 	ldr.w	r3, [r8]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	4798      	blx	r3
 8006014:	2800      	cmp	r0, #0
 8006016:	dad8      	bge.n	8005fca <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006018:	f06f 0504 	mvn.w	r5, #4
 800601c:	e7e4      	b.n	8005fe8 <BSP_TS_Init+0xc0>
 800601e:	bf00      	nop
 8006020:	08005531 	.word	0x08005531
 8006024:	0800549d 	.word	0x0800549d
 8006028:	0800580d 	.word	0x0800580d
 800602c:	080057d9 	.word	0x080057d9
 8006030:	08005841 	.word	0x08005841
 8006034:	2400bce4 	.word	0x2400bce4
 8006038:	2400bd0c 	.word	0x2400bd0c
 800603c:	24000038 	.word	0x24000038
 8006040:	2400bd10 	.word	0x2400bd10
 8006044:	2400bd38 	.word	0x2400bd38

08006048 <BSP_TS_GetState>:
{
 8006048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800604a:	460c      	mov	r4, r1
 800604c:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 800604e:	2800      	cmp	r0, #0
 8006050:	d14d      	bne.n	80060ee <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8006052:	4b28      	ldr	r3, [pc, #160]	@ (80060f4 <BSP_TS_GetState+0xac>)
 8006054:	a901      	add	r1, sp, #4
 8006056:	4a28      	ldr	r2, [pc, #160]	@ (80060f8 <BSP_TS_GetState+0xb0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6810      	ldr	r0, [r2, #0]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	4798      	blx	r3
 8006060:	2800      	cmp	r0, #0
 8006062:	db41      	blt.n	80060e8 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006064:	4925      	ldr	r1, [pc, #148]	@ (80060fc <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 8006066:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006068:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800606a:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 800606c:	2e00      	cmp	r6, #0
 800606e:	d037      	beq.n	80060e0 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006070:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006072:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006076:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 800607a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800607e:	bf1e      	ittt	ne
 8006080:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 8006082:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 8006084:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8006086:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800608a:	bf1c      	itt	ne
 800608c:	f10e 3cff 	addne.w	ip, lr, #4294967295
 8006090:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006094:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8006098:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800609a:	bf44      	itt	mi
 800609c:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 80060a0:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80060a2:	680f      	ldr	r7, [r1, #0]
 80060a4:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80060a6:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 80060a8:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80060aa:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80060ac:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80060ae:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80060b2:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80060b6:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80060b8:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80060ba:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80060bc:	bf8c      	ite	hi
 80060be:	eba2 0c05 	subhi.w	ip, r2, r5
 80060c2:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80060c6:	4283      	cmp	r3, r0
 80060c8:	bf8c      	ite	hi
 80060ca:	1a1e      	subhi	r6, r3, r0
 80060cc:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80060ce:	4567      	cmp	r7, ip
 80060d0:	d301      	bcc.n	80060d6 <BSP_TS_GetState+0x8e>
 80060d2:	42b7      	cmp	r7, r6
 80060d4:	d205      	bcs.n	80060e2 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80060d6:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80060d8:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 80060da:	2000      	movs	r0, #0
}
 80060dc:	b005      	add	sp, #20
 80060de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 80060e0:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80060e2:	e9c4 5001 	strd	r5, r0, [r4, #4]
 80060e6:	e7f8      	b.n	80060da <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80060e8:	f06f 0004 	mvn.w	r0, #4
 80060ec:	e7f6      	b.n	80060dc <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 80060ee:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80060f2:	e7f3      	b.n	80060dc <BSP_TS_GetState+0x94>
 80060f4:	2400bd38 	.word	0x2400bd38
 80060f8:	2400bd0c 	.word	0x2400bd0c
 80060fc:	2400bd10 	.word	0x2400bd10

08006100 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006100:	4b2d      	ldr	r3, [pc, #180]	@ (80061b8 <SystemInit+0xb8>)
 8006102:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006106:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800610a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800610e:	691a      	ldr	r2, [r3, #16]
 8006110:	f042 0210 	orr.w	r2, r2, #16
 8006114:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006116:	4a29      	ldr	r2, [pc, #164]	@ (80061bc <SystemInit+0xbc>)
 8006118:	6813      	ldr	r3, [r2, #0]
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	2b06      	cmp	r3, #6
 8006120:	d805      	bhi.n	800612e <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006122:	6813      	ldr	r3, [r2, #0]
 8006124:	f023 030f 	bic.w	r3, r3, #15
 8006128:	f043 0307 	orr.w	r3, r3, #7
 800612c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800612e:	4b24      	ldr	r3, [pc, #144]	@ (80061c0 <SystemInit+0xc0>)
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006138:	2200      	movs	r2, #0
 800613a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800613c:	4a21      	ldr	r2, [pc, #132]	@ (80061c4 <SystemInit+0xc4>)
 800613e:	6819      	ldr	r1, [r3, #0]
 8006140:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006142:	491e      	ldr	r1, [pc, #120]	@ (80061bc <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8006144:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006146:	680a      	ldr	r2, [r1, #0]
 8006148:	0712      	lsls	r2, r2, #28
 800614a:	d505      	bpl.n	8006158 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800614c:	680a      	ldr	r2, [r1, #0]
 800614e:	f022 020f 	bic.w	r2, r2, #15
 8006152:	f042 0207 	orr.w	r2, r2, #7
 8006156:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006158:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800615a:	491b      	ldr	r1, [pc, #108]	@ (80061c8 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 800615c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800615e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006160:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006162:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006164:	4919      	ldr	r1, [pc, #100]	@ (80061cc <SystemInit+0xcc>)
 8006166:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006168:	4919      	ldr	r1, [pc, #100]	@ (80061d0 <SystemInit+0xd0>)
 800616a:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800616c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800616e:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006170:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006172:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006174:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006176:	6819      	ldr	r1, [r3, #0]
 8006178:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 800617c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800617e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8006180:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006184:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8006188:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800618c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006190:	4b10      	ldr	r3, [pc, #64]	@ (80061d4 <SystemInit+0xd4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	0c1b      	lsrs	r3, r3, #16
 8006196:	041b      	lsls	r3, r3, #16
 8006198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800619c:	d203      	bcs.n	80061a6 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800619e:	4b0e      	ldr	r3, [pc, #56]	@ (80061d8 <SystemInit+0xd8>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80061a6:	4b0d      	ldr	r3, [pc, #52]	@ (80061dc <SystemInit+0xdc>)
 80061a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80061ac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80061ae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80061b2:	4b01      	ldr	r3, [pc, #4]	@ (80061b8 <SystemInit+0xb8>)
 80061b4:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80061b6:	4770      	bx	lr
 80061b8:	e000ed00 	.word	0xe000ed00
 80061bc:	52002000 	.word	0x52002000
 80061c0:	58024400 	.word	0x58024400
 80061c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80061c8:	02020200 	.word	0x02020200
 80061cc:	01ff0000 	.word	0x01ff0000
 80061d0:	01010280 	.word	0x01010280
 80061d4:	5c001000 	.word	0x5c001000
 80061d8:	51008000 	.word	0x51008000
 80061dc:	52004000 	.word	0x52004000

080061e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061e0:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061e2:	2003      	movs	r0, #3
 80061e4:	f000 f854 	bl	8006290 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80061e8:	f003 fc92 	bl	8009b10 <HAL_RCC_GetSysClockFreq>
 80061ec:	490f      	ldr	r1, [pc, #60]	@ (800622c <HAL_Init+0x4c>)
 80061ee:	4a10      	ldr	r2, [pc, #64]	@ (8006230 <HAL_Init+0x50>)
 80061f0:	698b      	ldr	r3, [r1, #24]
 80061f2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80061f6:	5cd3      	ldrb	r3, [r2, r3]
 80061f8:	f003 031f 	and.w	r3, r3, #31
 80061fc:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061fe:	698b      	ldr	r3, [r1, #24]
 8006200:	f003 030f 	and.w	r3, r3, #15
 8006204:	5cd3      	ldrb	r3, [r2, r3]
 8006206:	4a0b      	ldr	r2, [pc, #44]	@ (8006234 <HAL_Init+0x54>)
 8006208:	f003 031f 	and.w	r3, r3, #31
 800620c:	fa20 f303 	lsr.w	r3, r0, r3
 8006210:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006212:	4b09      	ldr	r3, [pc, #36]	@ (8006238 <HAL_Init+0x58>)
 8006214:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006216:	2000      	movs	r0, #0
 8006218:	f7fb f9a6 	bl	8001568 <HAL_InitTick>
 800621c:	4604      	mov	r4, r0
 800621e:	b918      	cbnz	r0, 8006228 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006220:	f7fa fe92 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006224:	4620      	mov	r0, r4
 8006226:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006228:	2401      	movs	r4, #1
 800622a:	e7fb      	b.n	8006224 <HAL_Init+0x44>
 800622c:	58024400 	.word	0x58024400
 8006230:	080238f8 	.word	0x080238f8
 8006234:	24000068 	.word	0x24000068
 8006238:	2400006c 	.word	0x2400006c

0800623c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800623c:	4a03      	ldr	r2, [pc, #12]	@ (800624c <HAL_IncTick+0x10>)
 800623e:	4b04      	ldr	r3, [pc, #16]	@ (8006250 <HAL_IncTick+0x14>)
 8006240:	6811      	ldr	r1, [r2, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	440b      	add	r3, r1
 8006246:	6013      	str	r3, [r2, #0]
}
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	2400bd3c 	.word	0x2400bd3c
 8006250:	24000070 	.word	0x24000070

08006254 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006254:	4b01      	ldr	r3, [pc, #4]	@ (800625c <HAL_GetTick+0x8>)
 8006256:	6818      	ldr	r0, [r3, #0]
}
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	2400bd3c 	.word	0x2400bd3c

08006260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006264:	f7ff fff6 	bl	8006254 <HAL_GetTick>
 8006268:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800626a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800626c:	bf1e      	ittt	ne
 800626e:	4b04      	ldrne	r3, [pc, #16]	@ (8006280 <HAL_Delay+0x20>)
 8006270:	781b      	ldrbne	r3, [r3, #0]
 8006272:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006274:	f7ff ffee 	bl	8006254 <HAL_GetTick>
 8006278:	1b43      	subs	r3, r0, r5
 800627a:	42a3      	cmp	r3, r4
 800627c:	d3fa      	bcc.n	8006274 <HAL_Delay+0x14>
  {
  }
}
 800627e:	bd38      	pop	{r3, r4, r5, pc}
 8006280:	24000070 	.word	0x24000070

08006284 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006284:	4b01      	ldr	r3, [pc, #4]	@ (800628c <HAL_GetREVID+0x8>)
 8006286:	6818      	ldr	r0, [r3, #0]
}
 8006288:	0c00      	lsrs	r0, r0, #16
 800628a:	4770      	bx	lr
 800628c:	5c001000 	.word	0x5c001000

08006290 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006290:	4907      	ldr	r1, [pc, #28]	@ (80062b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006292:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006294:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006296:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800629a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800629e:	0412      	lsls	r2, r2, #16
 80062a0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80062a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80062ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80062ae:	4770      	bx	lr
 80062b0:	e000ed00 	.word	0xe000ed00

080062b4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062b4:	4b16      	ldr	r3, [pc, #88]	@ (8006310 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062b6:	b530      	push	{r4, r5, lr}
 80062b8:	68dc      	ldr	r4, [r3, #12]
 80062ba:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062be:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062c2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	bf28      	it	cs
 80062c8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062ca:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062cc:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062d0:	bf8c      	ite	hi
 80062d2:	3c03      	subhi	r4, #3
 80062d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062d6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80062da:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062dc:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062e0:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062e4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062e8:	fa03 f304 	lsl.w	r3, r3, r4
 80062ec:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062f0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80062f4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80062f6:	db06      	blt.n	8006306 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062f8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80062fc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006300:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006304:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006306:	f000 000f 	and.w	r0, r0, #15
 800630a:	4a02      	ldr	r2, [pc, #8]	@ (8006314 <HAL_NVIC_SetPriority+0x60>)
 800630c:	5413      	strb	r3, [r2, r0]
 800630e:	e7f9      	b.n	8006304 <HAL_NVIC_SetPriority+0x50>
 8006310:	e000ed00 	.word	0xe000ed00
 8006314:	e000ed14 	.word	0xe000ed14

08006318 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006318:	2800      	cmp	r0, #0
 800631a:	db07      	blt.n	800632c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800631c:	2301      	movs	r3, #1
 800631e:	0941      	lsrs	r1, r0, #5
 8006320:	f000 001f 	and.w	r0, r0, #31
 8006324:	4a02      	ldr	r2, [pc, #8]	@ (8006330 <HAL_NVIC_EnableIRQ+0x18>)
 8006326:	4083      	lsls	r3, r0
 8006328:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	e000e100 	.word	0xe000e100

08006334 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006334:	2800      	cmp	r0, #0
 8006336:	db0c      	blt.n	8006352 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006338:	0943      	lsrs	r3, r0, #5
 800633a:	2201      	movs	r2, #1
 800633c:	f000 001f 	and.w	r0, r0, #31
 8006340:	4904      	ldr	r1, [pc, #16]	@ (8006354 <HAL_NVIC_DisableIRQ+0x20>)
 8006342:	3320      	adds	r3, #32
 8006344:	4082      	lsls	r2, r0
 8006346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800634a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800634e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006352:	4770      	bx	lr
 8006354:	e000e100 	.word	0xe000e100

08006358 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006358:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800635c:	4b04      	ldr	r3, [pc, #16]	@ (8006370 <HAL_MPU_Disable+0x18>)
 800635e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006360:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006364:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006366:	2200      	movs	r2, #0
 8006368:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	e000ed00 	.word	0xe000ed00

08006374 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006374:	4b06      	ldr	r3, [pc, #24]	@ (8006390 <HAL_MPU_Enable+0x1c>)
 8006376:	f040 0001 	orr.w	r0, r0, #1
 800637a:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800637e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006380:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006384:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006386:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800638a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800638e:	4770      	bx	lr
 8006390:	e000ed00 	.word	0xe000ed00

08006394 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006394:	7843      	ldrb	r3, [r0, #1]
 8006396:	4a14      	ldr	r2, [pc, #80]	@ (80063e8 <HAL_MPU_ConfigRegion+0x54>)
{
 8006398:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800639a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != 0UL)
 800639e:	7801      	ldrb	r1, [r0, #0]
 80063a0:	b1e9      	cbz	r1, 80063de <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80063a2:	6843      	ldr	r3, [r0, #4]
 80063a4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80063a8:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80063aa:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80063ac:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80063ae:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80063b2:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80063b4:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80063b6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80063ba:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80063bc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80063c0:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80063c2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80063c6:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80063c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80063cc:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80063ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80063d2:	7a01      	ldrb	r1, [r0, #8]
 80063d4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80063d8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80063dc:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80063de:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 80063e2:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
}
 80063e6:	e7f9      	b.n	80063dc <HAL_MPU_ConfigRegion+0x48>
 80063e8:	e000ed00 	.word	0xe000ed00

080063ec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80063ec:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80063ee:	4604      	mov	r4, r0
 80063f0:	b908      	cbnz	r0, 80063f6 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80063f2:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80063f4:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80063f6:	7f43      	ldrb	r3, [r0, #29]
 80063f8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80063fc:	b913      	cbnz	r3, 8006404 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80063fe:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8006400:	f7fa fdba 	bl	8000f78 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006404:	2302      	movs	r3, #2
 8006406:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006408:	7923      	ldrb	r3, [r4, #4]
 800640a:	b9e3      	cbnz	r3, 8006446 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	4a13      	ldr	r2, [pc, #76]	@ (800645c <HAL_CRC_Init+0x70>)
 8006410:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	f022 0218 	bic.w	r2, r2, #24
 8006418:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800641a:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800641c:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800641e:	b9d2      	cbnz	r2, 8006456 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006420:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006424:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8006426:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	6961      	ldr	r1, [r4, #20]
 800642c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006430:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006432:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006434:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800643c:	430a      	orrs	r2, r1
 800643e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8006440:	2301      	movs	r3, #1
 8006442:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8006444:	e7d6      	b.n	80063f4 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006446:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800644a:	4620      	mov	r0, r4
 800644c:	f000 f808 	bl	8006460 <HAL_CRCEx_Polynomial_Set>
 8006450:	2800      	cmp	r0, #0
 8006452:	d0e2      	beq.n	800641a <HAL_CRC_Init+0x2e>
 8006454:	e7cd      	b.n	80063f2 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006456:	6922      	ldr	r2, [r4, #16]
 8006458:	e7e4      	b.n	8006424 <HAL_CRC_Init+0x38>
 800645a:	bf00      	nop
 800645c:	04c11db7 	.word	0x04c11db7

08006460 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006460:	07cb      	lsls	r3, r1, #31
{
 8006462:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006464:	d50d      	bpl.n	8006482 <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006466:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006468:	3b01      	subs	r3, #1
 800646a:	d31d      	bcc.n	80064a8 <HAL_CRCEx_Polynomial_Set+0x48>
 800646c:	fa21 f403 	lsr.w	r4, r1, r3
 8006470:	07e4      	lsls	r4, r4, #31
 8006472:	d5f9      	bpl.n	8006468 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8006474:	2a10      	cmp	r2, #16
 8006476:	d013      	beq.n	80064a0 <HAL_CRCEx_Polynomial_Set+0x40>
 8006478:	2a10      	cmp	r2, #16
 800647a:	d804      	bhi.n	8006486 <HAL_CRCEx_Polynomial_Set+0x26>
 800647c:	b13a      	cbz	r2, 800648e <HAL_CRCEx_Polynomial_Set+0x2e>
 800647e:	2a08      	cmp	r2, #8
 8006480:	d010      	beq.n	80064a4 <HAL_CRCEx_Polynomial_Set+0x44>
 8006482:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8006484:	e00b      	b.n	800649e <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 8006486:	2a18      	cmp	r2, #24
 8006488:	d1fb      	bne.n	8006482 <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 800648a:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 800648c:	d8f9      	bhi.n	8006482 <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800648e:	6800      	ldr	r0, [r0, #0]
 8006490:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006492:	6883      	ldr	r3, [r0, #8]
 8006494:	f023 0318 	bic.w	r3, r3, #24
 8006498:	4313      	orrs	r3, r2
 800649a:	6083      	str	r3, [r0, #8]
 800649c:	2000      	movs	r0, #0
}
 800649e:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 80064a0:	2b07      	cmp	r3, #7
 80064a2:	e7f3      	b.n	800648c <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 80064a4:	2b0f      	cmp	r3, #15
 80064a6:	e7f1      	b.n	800648c <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 80064a8:	2a10      	cmp	r2, #16
 80064aa:	d1e5      	bne.n	8006478 <HAL_CRCEx_Polynomial_Set+0x18>
 80064ac:	e7e9      	b.n	8006482 <HAL_CRCEx_Polynomial_Set+0x22>

080064ae <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80064ae:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80064b0:	4604      	mov	r4, r0
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d036      	beq.n	8006524 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80064b6:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 80064ba:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80064be:	b91b      	cbnz	r3, 80064c8 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80064c0:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80064c4:	f7fa fd70 	bl	8000fa8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80064c8:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80064ca:	69e0      	ldr	r0, [r4, #28]
 80064cc:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80064ce:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80064d6:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80064d8:	6819      	ldr	r1, [r3, #0]
 80064da:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80064de:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80064e2:	430a      	orrs	r2, r1
 80064e4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80064e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80064e8:	68a2      	ldr	r2, [r4, #8]
 80064ea:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 80064ee:	4302      	orrs	r2, r0
 80064f0:	f021 0101 	bic.w	r1, r1, #1
 80064f4:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80064f6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80064f8:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80064fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064fc:	0c12      	lsrs	r2, r2, #16
 80064fe:	0412      	lsls	r2, r2, #16
 8006500:	430a      	orrs	r2, r1
 8006502:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006504:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006506:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800650a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800650e:	0552      	lsls	r2, r2, #21
 8006510:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006514:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006516:	430a      	orrs	r2, r1
 8006518:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800651a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800651c:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800651e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8006522:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006524:	2001      	movs	r0, #1
 8006526:	e7fc      	b.n	8006522 <HAL_DMA2D_Init+0x74>

08006528 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8006528:	4770      	bx	lr

0800652a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800652a:	4770      	bx	lr

0800652c <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800652c:	6803      	ldr	r3, [r0, #0]
{
 800652e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006530:	685e      	ldr	r6, [r3, #4]
{
 8006532:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006534:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006536:	07f2      	lsls	r2, r6, #31
 8006538:	d514      	bpl.n	8006564 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800653a:	05e9      	lsls	r1, r5, #23
 800653c:	d512      	bpl.n	8006564 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006544:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006546:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8006548:	f042 0201 	orr.w	r2, r2, #1
 800654c:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800654e:	2201      	movs	r2, #1
 8006550:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006552:	2304      	movs	r3, #4
 8006554:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006558:	2300      	movs	r3, #0
 800655a:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800655e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006560:	b103      	cbz	r3, 8006564 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8006562:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006564:	06b2      	lsls	r2, r6, #26
 8006566:	d516      	bpl.n	8006596 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006568:	04ab      	lsls	r3, r5, #18
 800656a:	d514      	bpl.n	8006596 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006574:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006576:	2220      	movs	r2, #32
 8006578:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800657a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800657c:	f043 0302 	orr.w	r3, r3, #2
 8006580:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006582:	2304      	movs	r3, #4
 8006584:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006588:	2300      	movs	r3, #0
 800658a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800658e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006590:	b10b      	cbz	r3, 8006596 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8006592:	4620      	mov	r0, r4
 8006594:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006596:	0730      	lsls	r0, r6, #28
 8006598:	d516      	bpl.n	80065c8 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800659a:	0529      	lsls	r1, r5, #20
 800659c:	d514      	bpl.n	80065c8 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80065a8:	2208      	movs	r2, #8
 80065aa:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80065ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065ae:	f043 0304 	orr.w	r3, r3, #4
 80065b2:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80065b4:	2304      	movs	r3, #4
 80065b6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80065ba:	2300      	movs	r3, #0
 80065bc:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80065c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80065c2:	b10b      	cbz	r3, 80065c8 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80065c4:	4620      	mov	r0, r4
 80065c6:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80065c8:	0772      	lsls	r2, r6, #29
 80065ca:	d50b      	bpl.n	80065e4 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80065cc:	056b      	lsls	r3, r5, #21
 80065ce:	d509      	bpl.n	80065e4 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80065d0:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80065d2:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065da:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80065dc:	2204      	movs	r2, #4
 80065de:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80065e0:	f7ff ffa2 	bl	8006528 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80065e4:	07b0      	lsls	r0, r6, #30
 80065e6:	d514      	bpl.n	8006612 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80065e8:	05a9      	lsls	r1, r5, #22
 80065ea:	d512      	bpl.n	8006612 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80065f4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80065f6:	2202      	movs	r2, #2
 80065f8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80065fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065fc:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80065fe:	2301      	movs	r3, #1
 8006600:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006604:	2300      	movs	r3, #0
 8006606:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 800660a:	6a23      	ldr	r3, [r4, #32]
 800660c:	b10b      	cbz	r3, 8006612 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800660e:	4620      	mov	r0, r4
 8006610:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006612:	06f2      	lsls	r2, r6, #27
 8006614:	d513      	bpl.n	800663e <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006616:	04eb      	lsls	r3, r5, #19
 8006618:	d511      	bpl.n	800663e <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800661a:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800661c:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006624:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006626:	2210      	movs	r2, #16
 8006628:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800662a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800662c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800662e:	2301      	movs	r3, #1
 8006630:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006634:	2300      	movs	r3, #0
 8006636:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800663a:	f7ff ff76 	bl	800652a <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800663e:	bd70      	pop	{r4, r5, r6, pc}

08006640 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8006640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006644:	4607      	mov	r7, r0
 8006646:	460d      	mov	r5, r1
 8006648:	4614      	mov	r4, r2
 800664a:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800664c:	f7ff fe02 	bl	8006254 <HAL_GetTick>
 8006650:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006656:	07d2      	lsls	r2, r2, #31
 8006658:	d50a      	bpl.n	8006670 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800665a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800665e:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8006660:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006662:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006666:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800666a:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 800666c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006670:	f7ff fdf0 	bl	8006254 <HAL_GetTick>
 8006674:	eba0 0008 	sub.w	r0, r0, r8
 8006678:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800667c:	d9e9      	bls.n	8006652 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 800667e:	2003      	movs	r0, #3
 8006680:	e7f4      	b.n	800666c <DSI_ShortWrite.constprop.0+0x2c>

08006682 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006682:	7c03      	ldrb	r3, [r0, #16]
{
 8006684:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8006686:	2b01      	cmp	r3, #1
 8006688:	d05b      	beq.n	8006742 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800668a:	6803      	ldr	r3, [r0, #0]
 800668c:	2000      	movs	r0, #0
 800668e:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006692:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006696:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8006698:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800669a:	d507      	bpl.n	80066ac <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800669c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80066a0:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 80066a4:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 80066a8:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80066ac:	0788      	lsls	r0, r1, #30
 80066ae:	d505      	bpl.n	80066bc <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80066b0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80066b4:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 80066b8:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80066bc:	0748      	lsls	r0, r1, #29
 80066be:	d505      	bpl.n	80066cc <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80066c0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80066c4:	f040 0001 	orr.w	r0, r0, #1
 80066c8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80066cc:	0708      	lsls	r0, r1, #28
 80066ce:	d505      	bpl.n	80066dc <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80066d0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80066d4:	f040 0002 	orr.w	r0, r0, #2
 80066d8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80066dc:	06c8      	lsls	r0, r1, #27
 80066de:	d505      	bpl.n	80066ec <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80066e0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80066e4:	f040 000c 	orr.w	r0, r0, #12
 80066e8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80066ec:	0688      	lsls	r0, r1, #26
 80066ee:	d505      	bpl.n	80066fc <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80066f0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80066f4:	f040 0010 	orr.w	r0, r0, #16
 80066f8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80066fc:	0648      	lsls	r0, r1, #25
 80066fe:	d505      	bpl.n	800670c <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8006700:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006704:	f040 0020 	orr.w	r0, r0, #32
 8006708:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800670c:	0608      	lsls	r0, r1, #24
 800670e:	d505      	bpl.n	800671c <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006710:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006714:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8006718:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800671c:	05c8      	lsls	r0, r1, #23
 800671e:	d505      	bpl.n	800672c <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8006720:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006724:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8006728:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800672c:	0589      	lsls	r1, r1, #22
 800672e:	d505      	bpl.n	800673c <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8006730:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8006734:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8006738:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800673c:	2000      	movs	r0, #0
 800673e:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8006740:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006742:	2002      	movs	r0, #2
}
 8006744:	4770      	bx	lr
	...

08006748 <HAL_DSI_Init>:
{
 8006748:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800674a:	460d      	mov	r5, r1
  if (hdsi == NULL)
 800674c:	4604      	mov	r4, r0
 800674e:	2800      	cmp	r0, #0
 8006750:	f000 80a9 	beq.w	80068a6 <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006754:	7c43      	ldrb	r3, [r0, #17]
 8006756:	b90b      	cbnz	r3, 800675c <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8006758:	f7fa fc4a 	bl	8000ff0 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800675c:	2303      	movs	r3, #3
 800675e:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8006760:	2300      	movs	r3, #0
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800676a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800676e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8006772:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006776:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800677e:	f7ff fd69 	bl	8006254 <HAL_GetTick>
 8006782:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006784:	6822      	ldr	r2, [r4, #0]
 8006786:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 800678a:	04d9      	lsls	r1, r3, #19
 800678c:	d57a      	bpl.n	8006884 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800678e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8006792:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8006796:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 800679a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800679e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80067a2:	e9d5 0300 	ldrd	r0, r3, [r5]
 80067a6:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80067a8:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80067ac:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80067ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 80067b2:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80067b4:	430b      	orrs	r3, r1
 80067b6:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80067ba:	2300      	movs	r3, #0
 80067bc:	9301      	str	r3, [sp, #4]
 80067be:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80067c2:	f043 0301 	orr.w	r3, r3, #1
 80067c6:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 80067ca:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	9301      	str	r3, [sp, #4]
 80067d4:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 80067d6:	f7ff fd43 	bl	8006260 <HAL_Delay>
  tickstart = HAL_GetTick();
 80067da:	f7ff fd3b 	bl	8006254 <HAL_GetTick>
 80067de:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80067e6:	05d2      	lsls	r2, r2, #23
 80067e8:	d556      	bpl.n	8006898 <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80067ea:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80067ee:	f246 10a8 	movw	r0, #25000	@ 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80067f2:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80067f4:	f042 0206 	orr.w	r2, r2, #6
 80067f8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80067fc:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8006800:	f022 0203 	bic.w	r2, r2, #3
 8006804:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006808:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800680c:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800680e:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006810:	f042 0201 	orr.w	r2, r2, #1
 8006814:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8006818:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800681c:	f022 0203 	bic.w	r2, r2, #3
 8006820:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006824:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006828:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800682a:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800682c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006836:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006838:	689a      	ldr	r2, [r3, #8]
 800683a:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800683c:	491b      	ldr	r1, [pc, #108]	@ (80068ac <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800683e:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006840:	686a      	ldr	r2, [r5, #4]
 8006842:	2a01      	cmp	r2, #1
 8006844:	bf38      	it	cc
 8006846:	2201      	movcc	r2, #1
 8006848:	434a      	muls	r2, r1
 800684a:	68a9      	ldr	r1, [r5, #8]
 800684c:	f001 0103 	and.w	r1, r1, #3
 8006850:	408a      	lsls	r2, r1
 8006852:	6829      	ldr	r1, [r5, #0]
 8006854:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 8006856:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006858:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800685c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8006860:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8006864:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8006868:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800686c:	430a      	orrs	r2, r1
 800686e:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 8006872:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006876:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 800687a:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800687c:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800687e:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8006880:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8006882:	e007      	b.n	8006894 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006884:	f7ff fce6 	bl	8006254 <HAL_GetTick>
 8006888:	1b80      	subs	r0, r0, r6
 800688a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800688e:	f67f af79 	bls.w	8006784 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8006892:	2003      	movs	r0, #3
}
 8006894:	b002      	add	sp, #8
 8006896:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006898:	f7ff fcdc 	bl	8006254 <HAL_GetTick>
 800689c:	1b80      	subs	r0, r0, r6
 800689e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80068a2:	d99d      	bls.n	80067e0 <HAL_DSI_Init+0x98>
 80068a4:	e7f5      	b.n	8006892 <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 80068a6:	2001      	movs	r0, #1
 80068a8:	e7f4      	b.n	8006894 <HAL_DSI_Init+0x14c>
 80068aa:	bf00      	nop
 80068ac:	003d0900 	.word	0x003d0900

080068b0 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 80068b0:	4770      	bx	lr

080068b2 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80068b2:	6803      	ldr	r3, [r0, #0]
 80068b4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80068b8:	07d1      	lsls	r1, r2, #31
{
 80068ba:	b510      	push	{r4, lr}
 80068bc:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80068be:	d508      	bpl.n	80068d2 <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80068c0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80068c4:	07d2      	lsls	r2, r2, #31
 80068c6:	d504      	bpl.n	80068d2 <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80068c8:	2201      	movs	r2, #1
 80068ca:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 80068ce:	f7fb fac3 	bl	8001e58 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80068d8:	0791      	lsls	r1, r2, #30
 80068da:	d509      	bpl.n	80068f0 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80068dc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80068e0:	0792      	lsls	r2, r2, #30
 80068e2:	d505      	bpl.n	80068f0 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80068e4:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80068e6:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80068e8:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80068ec:	f7fb fae6 	bl	8001ebc <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 80068f0:	69a3      	ldr	r3, [r4, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d04e      	beq.n	8006994 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80068f6:	6821      	ldr	r1, [r4, #0]
 80068f8:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80068fc:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8006900:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8006902:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006906:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 800690a:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800690c:	b291      	uxth	r1, r2
 800690e:	b119      	cbz	r1, 8006918 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8006910:	6961      	ldr	r1, [r4, #20]
 8006912:	f041 0101 	orr.w	r1, r1, #1
 8006916:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8006918:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 800691c:	d003      	beq.n	8006926 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800691e:	6962      	ldr	r2, [r4, #20]
 8006920:	f042 0202 	orr.w	r2, r2, #2
 8006924:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8006926:	07d8      	lsls	r0, r3, #31
 8006928:	d503      	bpl.n	8006932 <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800692a:	6962      	ldr	r2, [r4, #20]
 800692c:	f042 0204 	orr.w	r2, r2, #4
 8006930:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8006932:	0799      	lsls	r1, r3, #30
 8006934:	d503      	bpl.n	800693e <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8006936:	6962      	ldr	r2, [r4, #20]
 8006938:	f042 0208 	orr.w	r2, r2, #8
 800693c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800693e:	f013 0f0c 	tst.w	r3, #12
 8006942:	d003      	beq.n	800694c <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8006944:	6962      	ldr	r2, [r4, #20]
 8006946:	f042 0210 	orr.w	r2, r2, #16
 800694a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800694c:	06da      	lsls	r2, r3, #27
 800694e:	d503      	bpl.n	8006958 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8006950:	6962      	ldr	r2, [r4, #20]
 8006952:	f042 0220 	orr.w	r2, r2, #32
 8006956:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8006958:	0698      	lsls	r0, r3, #26
 800695a:	d503      	bpl.n	8006964 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800695c:	6962      	ldr	r2, [r4, #20]
 800695e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006962:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8006964:	0659      	lsls	r1, r3, #25
 8006966:	d503      	bpl.n	8006970 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8006968:	6962      	ldr	r2, [r4, #20]
 800696a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800696e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8006970:	061a      	lsls	r2, r3, #24
 8006972:	d503      	bpl.n	800697c <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8006974:	6962      	ldr	r2, [r4, #20]
 8006976:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800697a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800697c:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8006980:	d003      	beq.n	800698a <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8006982:	6963      	ldr	r3, [r4, #20]
 8006984:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006988:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800698a:	6963      	ldr	r3, [r4, #20]
 800698c:	b113      	cbz	r3, 8006994 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 800698e:	4620      	mov	r0, r4
 8006990:	f7ff ff8e 	bl	80068b0 <HAL_DSI_ErrorCallback>
}
 8006994:	bd10      	pop	{r4, pc}

08006996 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006996:	7c02      	ldrb	r2, [r0, #16]
{
 8006998:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800699a:	2a01      	cmp	r2, #1
 800699c:	d00a      	beq.n	80069b4 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800699e:	6802      	ldr	r2, [r0, #0]
 80069a0:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80069a2:	f020 0003 	bic.w	r0, r0, #3
 80069a6:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80069a8:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80069aa:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80069ac:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80069ae:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 80069b0:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80069b2:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80069b4:	2002      	movs	r0, #2
}
 80069b6:	4770      	bx	lr

080069b8 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80069b8:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80069ba:	7c03      	ldrb	r3, [r0, #16]
{
 80069bc:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d069      	beq.n	8006a96 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80069c2:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80069c4:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80069c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069c8:	f042 0201 	orr.w	r2, r2, #1
 80069cc:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80069ce:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80069d2:	f022 0201 	bic.w	r2, r2, #1
 80069d6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80069da:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80069de:	f042 0201 	orr.w	r2, r2, #1
 80069e2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	f022 0203 	bic.w	r2, r2, #3
 80069ec:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80069ee:	68da      	ldr	r2, [r3, #12]
 80069f0:	4302      	orrs	r2, r0
 80069f2:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80069f4:	695a      	ldr	r2, [r3, #20]
 80069f6:	f022 0207 	bic.w	r2, r2, #7
 80069fa:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80069fc:	6958      	ldr	r0, [r3, #20]
 80069fe:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8006a02:	432a      	orrs	r2, r5
 8006a04:	694d      	ldr	r5, [r1, #20]
 8006a06:	432a      	orrs	r2, r5
 8006a08:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006a0a:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006a0c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006a0e:	691a      	ldr	r2, [r3, #16]
 8006a10:	f022 020f 	bic.w	r2, r2, #15
 8006a14:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006a16:	691a      	ldr	r2, [r3, #16]
 8006a18:	4302      	orrs	r2, r0
 8006a1a:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006a1c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006a20:	f022 020e 	bic.w	r2, r2, #14
 8006a24:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006a28:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006a2c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006a30:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006a32:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8006a36:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006a38:	0c12      	lsrs	r2, r2, #16
 8006a3a:	0412      	lsls	r2, r2, #16
 8006a3c:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006a3e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006a40:	4302      	orrs	r2, r0
 8006a42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8006a44:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006a48:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006a4c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006a50:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8006a54:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8006a58:	432a      	orrs	r2, r5
 8006a5a:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8006a5c:	432a      	orrs	r2, r5
 8006a5e:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006a60:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006a62:	432a      	orrs	r2, r5
 8006a64:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a66:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006a68:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8006a6c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006a6e:	f022 0201 	bic.w	r2, r2, #1
 8006a72:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006a74:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006a76:	430a      	orrs	r2, r1
 8006a78:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8006a7a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006a7e:	f042 0201 	orr.w	r2, r2, #1
 8006a82:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8006a86:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006a8a:	f042 0202 	orr.w	r2, r2, #2
 8006a8e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 8006a92:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8006a94:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006a96:	2002      	movs	r0, #2
 8006a98:	e7fc      	b.n	8006a94 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08006a9c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8006a9c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006a9e:	7c03      	ldrb	r3, [r0, #16]
{
 8006aa0:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d029      	beq.n	8006afa <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8006aa6:	6800      	ldr	r0, [r0, #0]
 8006aa8:	4b15      	ldr	r3, [pc, #84]	@ (8006b00 <HAL_DSI_ConfigCommand+0x64>)
 8006aaa:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8006aac:	4023      	ands	r3, r4
 8006aae:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006ab0:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8006ab2:	e9d1 3500 	ldrd	r3, r5, [r1]
 8006ab6:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8006ab8:	688d      	ldr	r5, [r1, #8]
 8006aba:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8006abc:	68cd      	ldr	r5, [r1, #12]
 8006abe:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8006ac0:	690d      	ldr	r5, [r1, #16]
 8006ac2:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8006ac4:	694d      	ldr	r5, [r1, #20]
 8006ac6:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8006ac8:	698d      	ldr	r5, [r1, #24]
 8006aca:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8006acc:	69cd      	ldr	r5, [r1, #28]
 8006ace:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8006ad0:	6a0d      	ldr	r5, [r1, #32]
 8006ad2:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8006ad4:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8006ad6:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8006ad8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8006ada:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8006adc:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006ade:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 8006ae0:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006ae2:	4323      	orrs	r3, r4
 8006ae4:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8006ae6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8006ae8:	f023 0302 	bic.w	r3, r3, #2
 8006aec:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006aee:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8006af0:	430b      	orrs	r3, r1
 8006af2:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006af4:	2000      	movs	r0, #0
 8006af6:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8006af8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006afa:	2002      	movs	r0, #2
 8006afc:	e7fc      	b.n	8006af8 <HAL_DSI_ConfigCommand+0x5c>
 8006afe:	bf00      	nop
 8006b00:	fef080ff 	.word	0xfef080ff

08006b04 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006b04:	7c02      	ldrb	r2, [r0, #16]
{
 8006b06:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006b08:	2a01      	cmp	r2, #1
 8006b0a:	d00a      	beq.n	8006b22 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006b0c:	6802      	ldr	r2, [r0, #0]
 8006b0e:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8006b10:	f020 001f 	bic.w	r0, r0, #31
 8006b14:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006b16:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8006b18:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006b1a:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 8006b1c:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 8006b1e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006b20:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006b22:	2002      	movs	r0, #2
}
 8006b24:	4770      	bx	lr

08006b26 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8006b26:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006b28:	7c03      	ldrb	r3, [r0, #16]
{
 8006b2a:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d034      	beq.n	8006b9a <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8006b30:	e9d1 0300 	ldrd	r0, r3, [r1]
 8006b34:	4298      	cmp	r0, r3
 8006b36:	bf38      	it	cc
 8006b38:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006b40:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8006b44:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8006b48:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006b4c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006b50:	4302      	orrs	r2, r0
 8006b52:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8006b56:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006b5a:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8006b5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006b62:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8006b66:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006b6a:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006b6c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8006b70:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006b72:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006b74:	432a      	orrs	r2, r5
 8006b76:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006b78:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006b7a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8006b7e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006b82:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006b86:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006b8a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006b8e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006b92:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 8006b96:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8006b98:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006b9a:	2002      	movs	r0, #2
 8006b9c:	e7fc      	b.n	8006b98 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08006ba0 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8006ba0:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006ba2:	7c03      	ldrb	r3, [r0, #16]
{
 8006ba4:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d05b      	beq.n	8006c62 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006baa:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006bac:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006bae:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006bb0:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006bb2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006bb6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006bbe:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006bc0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8006bc2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8006bc4:	b292      	uxth	r2, r2
 8006bc6:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006bc8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8006bca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006bce:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8006bd0:	4a25      	ldr	r2, [pc, #148]	@ (8006c68 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8006bd2:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8006bd4:	4010      	ands	r0, r2
 8006bd6:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006bd8:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8006bda:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006bdc:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006bde:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8006be0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006be2:	4010      	ands	r0, r2
 8006be4:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006be6:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006be8:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006bea:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006bec:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8006bee:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006bf2:	4010      	ands	r0, r2
 8006bf4:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006bf8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006bfc:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006bfe:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006c00:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8006c04:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006c08:	4010      	ands	r0, r2
 8006c0a:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006c0e:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006c12:	4328      	orrs	r0, r5
 8006c14:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8006c18:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006c1c:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8006c20:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006c24:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006c28:	698d      	ldr	r5, [r1, #24]
 8006c2a:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006c2c:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006c2e:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006c30:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8006c34:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8006c38:	4010      	ands	r0, r2
 8006c3a:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006c3e:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8006c42:	4328      	orrs	r0, r5
 8006c44:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006c48:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 8006c4c:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006c4e:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006c50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006c54:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 8006c5e:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8006c60:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006c62:	2002      	movs	r0, #2
 8006c64:	e7fc      	b.n	8006c60 <HAL_DSI_ConfigHostTimeouts+0xc0>
 8006c66:	bf00      	nop
 8006c68:	ffff0000 	.word	0xffff0000

08006c6c <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c6c:	7c03      	ldrb	r3, [r0, #16]
{
 8006c6e:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d01c      	beq.n	8006cae <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8006c74:	6802      	ldr	r2, [r0, #0]
 8006c76:	2300      	movs	r3, #0
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	6851      	ldr	r1, [r2, #4]
 8006c7c:	f041 0101 	orr.w	r1, r1, #1
 8006c80:	6051      	str	r1, [r2, #4]
 8006c82:	6851      	ldr	r1, [r2, #4]
 8006c84:	f001 0101 	and.w	r1, r1, #1
 8006c88:	9100      	str	r1, [sp, #0]
 8006c8a:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 8006c92:	f041 0108 	orr.w	r1, r1, #8
 8006c96:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 8006c9a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006c9e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006ca0:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006ca2:	f002 0208 	and.w	r2, r2, #8
 8006ca6:	9201      	str	r2, [sp, #4]
 8006ca8:	9a01      	ldr	r2, [sp, #4]
}
 8006caa:	b002      	add	sp, #8
 8006cac:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006cae:	2002      	movs	r0, #2
 8006cb0:	e7fb      	b.n	8006caa <HAL_DSI_Start+0x3e>

08006cb2 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006cb2:	7c02      	ldrb	r2, [r0, #16]
{
 8006cb4:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006cb6:	2a01      	cmp	r2, #1
 8006cb8:	d009      	beq.n	8006cce <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8006cba:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006cbc:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8006cbe:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 8006cc2:	f042 0204 	orr.w	r2, r2, #4
 8006cc6:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 8006cca:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006ccc:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006cce:	2002      	movs	r0, #2
}
 8006cd0:	4770      	bx	lr

08006cd2 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8006cd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006cd4:	7c05      	ldrb	r5, [r0, #16]
{
 8006cd6:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006cd8:	2d01      	cmp	r5, #1
 8006cda:	d009      	beq.n	8006cf0 <HAL_DSI_ShortWrite+0x1e>
 8006cdc:	2501      	movs	r5, #1
 8006cde:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006ce0:	9d06      	ldr	r5, [sp, #24]
 8006ce2:	9500      	str	r5, [sp, #0]
 8006ce4:	f7ff fcac 	bl	8006640 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006ce8:	2300      	movs	r3, #0
 8006cea:	7423      	strb	r3, [r4, #16]

  return status;
}
 8006cec:	b003      	add	sp, #12
 8006cee:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006cf0:	2002      	movs	r0, #2
 8006cf2:	e7fb      	b.n	8006cec <HAL_DSI_ShortWrite+0x1a>

08006cf4 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8006cf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf8:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006cfa:	7c03      	ldrb	r3, [r0, #16]
{
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8006d00:	2b01      	cmp	r3, #1
{
 8006d02:	4615      	mov	r5, r2
 8006d04:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8006d08:	d052      	beq.n	8006db0 <HAL_DSI_LongWrite+0xbc>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d0e:	f7ff faa1 	bl	8006254 <HAL_GetTick>
 8006d12:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006d14:	6832      	ldr	r2, [r6, #0]
 8006d16:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8006d18:	f013 0a01 	ands.w	sl, r3, #1
 8006d1c:	d019      	beq.n	8006d52 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006d1e:	2c03      	cmp	r4, #3
 8006d20:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8006d22:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006d26:	bf28      	it	cs
 8006d28:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8006d2a:	4283      	cmp	r3, r0
 8006d2c:	d11d      	bne.n	8006d6a <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8006d2e:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 8006d30:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 8006d32:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8006d36:	bb10      	cbnz	r0, 8006d7e <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8006d38:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d3a:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 8006d3e:	0223      	lsls	r3, r4, #8
 8006d40:	0224      	lsls	r4, r4, #8
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 8006d48:	431d      	orrs	r5, r3
 8006d4a:	4325      	orrs	r5, r4
 8006d4c:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006d4e:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8006d50:	e009      	b.n	8006d66 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006d52:	f7ff fa7f 	bl	8006254 <HAL_GetTick>
 8006d56:	eba0 000b 	sub.w	r0, r0, fp
 8006d5a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006d5e:	d9d9      	bls.n	8006d14 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8006d60:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006d62:	f886 a010 	strb.w	sl, [r6, #16]
}
 8006d66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006d6a:	f818 1003 	ldrb.w	r1, [r8, r3]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8006d74:	fa01 f10c 	lsl.w	r1, r1, ip
 8006d78:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 8006d7c:	e7d5      	b.n	8006d2a <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006d7e:	2804      	cmp	r0, #4
    fifoword = 0U;
 8006d80:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006d84:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 8006d86:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006d88:	bf28      	it	cs
 8006d8a:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006d8e:	f813 8001 	ldrb.w	r8, [r3, r1]
 8006d92:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8006d96:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006d98:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8006d9c:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006d9e:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8006da2:	d1f4      	bne.n	8006d8e <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8006da4:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8006da8:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 8006daa:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 8006dae:	e7c2      	b.n	8006d36 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8006db0:	2002      	movs	r0, #2
 8006db2:	e7d8      	b.n	8006d66 <HAL_DSI_LongWrite+0x72>

08006db4 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8006db4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006db8:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006dba:	7c03      	ldrb	r3, [r0, #16]
{
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8006dc0:	2b01      	cmp	r3, #1
{
 8006dc2:	4617      	mov	r7, r2
 8006dc4:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006dc8:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8006dcc:	d06f      	beq.n	8006eae <HAL_DSI_Read+0xfa>
 8006dce:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8006dd0:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8006dd2:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8006dd4:	d90d      	bls.n	8006df2 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8006dd6:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8006dda:	2237      	movs	r2, #55	@ 0x37
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	b2f3      	uxtb	r3, r6
 8006de0:	f7ff fc2e 	bl	8006640 <DSI_ShortWrite.constprop.0>
 8006de4:	b128      	cbz	r0, 8006df2 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8006de6:	2300      	movs	r3, #0

      return HAL_ERROR;
 8006de8:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8006dea:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8006dec:	b003      	add	sp, #12
 8006dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8006df2:	f1b9 0f06 	cmp.w	r9, #6
 8006df6:	d10f      	bne.n	8006e18 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006df8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8006dfa:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006dfc:	021b      	lsls	r3, r3, #8
 8006dfe:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8006e02:	f043 0306 	orr.w	r3, r3, #6
 8006e06:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8006e08:	f7ff fa24 	bl	8006254 <HAL_GetTick>
 8006e0c:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8006e0e:	2e00      	cmp	r6, #0
 8006e10:	dc27      	bgt.n	8006e62 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8006e12:	2000      	movs	r0, #0
 8006e14:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8006e16:	e7e9      	b.n	8006dec <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8006e18:	f1b9 0f04 	cmp.w	r9, #4
 8006e1c:	d105      	bne.n	8006e2a <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e1e:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8006e20:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e22:	f044 0404 	orr.w	r4, r4, #4
 8006e26:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8006e28:	e7ee      	b.n	8006e08 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8006e2a:	f1b9 0f14 	cmp.w	r9, #20
 8006e2e:	d108      	bne.n	8006e42 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006e30:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e34:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006e36:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e38:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8006e3c:	f044 0414 	orr.w	r4, r4, #20
 8006e40:	e7f1      	b.n	8006e26 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8006e42:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 8006e46:	d1ce      	bne.n	8006de6 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006e48:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e4c:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006e4e:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006e54:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006e58:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8006e5c:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 8006e60:	e7e1      	b.n	8006e26 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8006e62:	682a      	ldr	r2, [r5, #0]
 8006e64:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8006e66:	f013 0310 	ands.w	r3, r3, #16
 8006e6a:	d10d      	bne.n	8006e88 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006e6c:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8006e6e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006e70:	4632      	mov	r2, r6
 8006e72:	bf28      	it	cs
 8006e74:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8006e76:	00d9      	lsls	r1, r3, #3
 8006e78:	fa20 f101 	lsr.w	r1, r0, r1
 8006e7c:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8006e7e:	3301      	adds	r3, #1
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d1f8      	bne.n	8006e76 <HAL_DSI_Read+0xc2>
        pdata++;
 8006e84:	4417      	add	r7, r2
        datasize--;
 8006e86:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006e88:	f7ff f9e4 	bl	8006254 <HAL_GetTick>
 8006e8c:	1b00      	subs	r0, r0, r4
 8006e8e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006e92:	d903      	bls.n	8006e9c <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8006e94:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8006e96:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006e98:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8006e9a:	e7a7      	b.n	8006dec <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8006e9c:	682b      	ldr	r3, [r5, #0]
 8006e9e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006ea0:	0652      	lsls	r2, r2, #25
 8006ea2:	d4b4      	bmi.n	8006e0e <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8006ea4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006ea8:	069b      	lsls	r3, r3, #26
 8006eaa:	d49c      	bmi.n	8006de6 <HAL_DSI_Read+0x32>
 8006eac:	e7af      	b.n	8006e0e <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8006eae:	2002      	movs	r0, #2
 8006eb0:	e79c      	b.n	8006dec <HAL_DSI_Read+0x38>

08006eb2 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006eb2:	7c02      	ldrb	r2, [r0, #16]
{
 8006eb4:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006eb6:	2a01      	cmp	r2, #1
 8006eb8:	d00f      	beq.n	8006eda <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8006eba:	6802      	ldr	r2, [r0, #0]
 8006ebc:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8006ec0:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8006ec4:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8006ec8:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8006ecc:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006ed0:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8006ed2:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 8006ed6:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006ed8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006eda:	2002      	movs	r0, #2
}
 8006edc:	4770      	bx	lr
	...

08006ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8006ee4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ee6:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 80070ac <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006eea:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006eee:	680a      	ldr	r2, [r1, #0]
 8006ef0:	fa32 f503 	lsrs.w	r5, r2, r3
 8006ef4:	d102      	bne.n	8006efc <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8006ef6:	b003      	add	sp, #12
 8006ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006efc:	2501      	movs	r5, #1
 8006efe:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8006f02:	ea18 0202 	ands.w	r2, r8, r2
 8006f06:	f000 80bb 	beq.w	8007080 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f0a:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f0c:	2703      	movs	r7, #3
 8006f0e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f12:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f16:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f1a:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f1c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f20:	2f01      	cmp	r7, #1
 8006f22:	d834      	bhi.n	8006f8e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8006f24:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f26:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f2a:	68cf      	ldr	r7, [r1, #12]
 8006f2c:	fa07 f70e 	lsl.w	r7, r7, lr
 8006f30:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8006f34:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006f36:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f38:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f3c:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8006f40:	409f      	lsls	r7, r3
 8006f42:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8006f46:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8006f48:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f4a:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f4c:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f50:	688f      	ldr	r7, [r1, #8]
 8006f52:	fa07 f70e 	lsl.w	r7, r7, lr
 8006f56:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8006f5a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f5c:	d119      	bne.n	8006f92 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8006f5e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f62:	f003 0a07 	and.w	sl, r3, #7
 8006f66:	f04f 0b0f 	mov.w	fp, #15
 8006f6a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8006f6e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8006f72:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f76:	fa0b fb0a 	lsl.w	fp, fp, sl
 8006f7a:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f7e:	690f      	ldr	r7, [r1, #16]
 8006f80:	fa07 f70a 	lsl.w	r7, r7, sl
 8006f84:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8006f88:	f8c8 7020 	str.w	r7, [r8, #32]
 8006f8c:	e001      	b.n	8006f92 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f8e:	2d03      	cmp	r5, #3
 8006f90:	d1da      	bne.n	8006f48 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8006f92:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f94:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f98:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f9c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fa0:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8006fa4:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006fa6:	d06b      	beq.n	8007080 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fa8:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8006fac:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fb0:	f003 0c03 	and.w	ip, r3, #3
 8006fb4:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fb8:	f045 0502 	orr.w	r5, r5, #2
 8006fbc:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fc0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fc4:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8006fc8:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8006fcc:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fd0:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fd4:	f005 0502 	and.w	r5, r5, #2
 8006fd8:	9501      	str	r5, [sp, #4]
 8006fda:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006fdc:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fde:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fe2:	4d31      	ldr	r5, [pc, #196]	@ (80070a8 <HAL_GPIO_Init+0x1c8>)
 8006fe4:	42a8      	cmp	r0, r5
 8006fe6:	d04d      	beq.n	8007084 <HAL_GPIO_Init+0x1a4>
 8006fe8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006fec:	42a8      	cmp	r0, r5
 8006fee:	d04b      	beq.n	8007088 <HAL_GPIO_Init+0x1a8>
 8006ff0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006ff4:	42a8      	cmp	r0, r5
 8006ff6:	d049      	beq.n	800708c <HAL_GPIO_Init+0x1ac>
 8006ff8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006ffc:	42a8      	cmp	r0, r5
 8006ffe:	d047      	beq.n	8007090 <HAL_GPIO_Init+0x1b0>
 8007000:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007004:	42a8      	cmp	r0, r5
 8007006:	d045      	beq.n	8007094 <HAL_GPIO_Init+0x1b4>
 8007008:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800700c:	42a8      	cmp	r0, r5
 800700e:	d043      	beq.n	8007098 <HAL_GPIO_Init+0x1b8>
 8007010:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007014:	42a8      	cmp	r0, r5
 8007016:	d041      	beq.n	800709c <HAL_GPIO_Init+0x1bc>
 8007018:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800701c:	42a8      	cmp	r0, r5
 800701e:	d03f      	beq.n	80070a0 <HAL_GPIO_Init+0x1c0>
 8007020:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007024:	42a8      	cmp	r0, r5
 8007026:	d03d      	beq.n	80070a4 <HAL_GPIO_Init+0x1c4>
 8007028:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800702c:	42a8      	cmp	r0, r5
 800702e:	bf14      	ite	ne
 8007030:	250a      	movne	r5, #10
 8007032:	2509      	moveq	r5, #9
 8007034:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007038:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800703c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007040:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8007042:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8007046:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8007048:	bf0c      	ite	eq
 800704a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800704c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800704e:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8007052:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8007054:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8007056:	bf0c      	ite	eq
 8007058:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800705a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800705c:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8007060:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8007062:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8007066:	bf0c      	ite	eq
 8007068:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800706a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800706c:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800706e:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8007072:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8007076:	bf54      	ite	pl
 8007078:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800707a:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800707c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8007080:	3301      	adds	r3, #1
 8007082:	e734      	b.n	8006eee <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007084:	2500      	movs	r5, #0
 8007086:	e7d5      	b.n	8007034 <HAL_GPIO_Init+0x154>
 8007088:	2501      	movs	r5, #1
 800708a:	e7d3      	b.n	8007034 <HAL_GPIO_Init+0x154>
 800708c:	2502      	movs	r5, #2
 800708e:	e7d1      	b.n	8007034 <HAL_GPIO_Init+0x154>
 8007090:	2503      	movs	r5, #3
 8007092:	e7cf      	b.n	8007034 <HAL_GPIO_Init+0x154>
 8007094:	2504      	movs	r5, #4
 8007096:	e7cd      	b.n	8007034 <HAL_GPIO_Init+0x154>
 8007098:	2505      	movs	r5, #5
 800709a:	e7cb      	b.n	8007034 <HAL_GPIO_Init+0x154>
 800709c:	2506      	movs	r5, #6
 800709e:	e7c9      	b.n	8007034 <HAL_GPIO_Init+0x154>
 80070a0:	2507      	movs	r5, #7
 80070a2:	e7c7      	b.n	8007034 <HAL_GPIO_Init+0x154>
 80070a4:	2508      	movs	r5, #8
 80070a6:	e7c5      	b.n	8007034 <HAL_GPIO_Init+0x154>
 80070a8:	58020000 	.word	0x58020000
 80070ac:	58024400 	.word	0x58024400

080070b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80070b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80070b4:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80070b6:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80070ba:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80070be:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80070c2:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 80070c6:	fa31 f302 	lsrs.w	r3, r1, r2
 80070ca:	d101      	bne.n	80070d0 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 80070cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 80070d0:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 80070d4:	ea1c 0601 	ands.w	r6, ip, r1
 80070d8:	d070      	beq.n	80071bc <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80070da:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80070de:	f002 0703 	and.w	r7, r2, #3
 80070e2:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 80070e6:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 80070e8:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80070ec:	fa08 f907 	lsl.w	r9, r8, r7
 80070f0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80070f4:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80070f8:	4b3a      	ldr	r3, [pc, #232]	@ (80071e4 <HAL_GPIO_DeInit+0x134>)
 80070fa:	4298      	cmp	r0, r3
 80070fc:	d060      	beq.n	80071c0 <HAL_GPIO_DeInit+0x110>
 80070fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007102:	4298      	cmp	r0, r3
 8007104:	d05e      	beq.n	80071c4 <HAL_GPIO_DeInit+0x114>
 8007106:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800710a:	4298      	cmp	r0, r3
 800710c:	d05c      	beq.n	80071c8 <HAL_GPIO_DeInit+0x118>
 800710e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007112:	4298      	cmp	r0, r3
 8007114:	d05a      	beq.n	80071cc <HAL_GPIO_DeInit+0x11c>
 8007116:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800711a:	4298      	cmp	r0, r3
 800711c:	d058      	beq.n	80071d0 <HAL_GPIO_DeInit+0x120>
 800711e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007122:	4298      	cmp	r0, r3
 8007124:	d056      	beq.n	80071d4 <HAL_GPIO_DeInit+0x124>
 8007126:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800712a:	4298      	cmp	r0, r3
 800712c:	d054      	beq.n	80071d8 <HAL_GPIO_DeInit+0x128>
 800712e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007132:	4298      	cmp	r0, r3
 8007134:	d052      	beq.n	80071dc <HAL_GPIO_DeInit+0x12c>
 8007136:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800713a:	4298      	cmp	r0, r3
 800713c:	d050      	beq.n	80071e0 <HAL_GPIO_DeInit+0x130>
 800713e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007142:	4298      	cmp	r0, r3
 8007144:	bf0c      	ite	eq
 8007146:	2309      	moveq	r3, #9
 8007148:	230a      	movne	r3, #10
 800714a:	40bb      	lsls	r3, r7
 800714c:	4573      	cmp	r3, lr
 800714e:	d117      	bne.n	8007180 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007150:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8007154:	ea23 0306 	bic.w	r3, r3, r6
 8007158:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800715c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8007160:	ea23 0306 	bic.w	r3, r3, r6
 8007164:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8007168:	6863      	ldr	r3, [r4, #4]
 800716a:	ea23 0306 	bic.w	r3, r3, r6
 800716e:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	ea23 0306 	bic.w	r3, r3, r6
 8007176:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007178:	68ab      	ldr	r3, [r5, #8]
 800717a:	ea23 0309 	bic.w	r3, r3, r9
 800717e:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007180:	0053      	lsls	r3, r2, #1
 8007182:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007184:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007186:	fa0b f303 	lsl.w	r3, fp, r3
 800718a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800718e:	431d      	orrs	r5, r3
 8007190:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007192:	f002 0507 	and.w	r5, r2, #7
 8007196:	6a37      	ldr	r7, [r6, #32]
 8007198:	00ad      	lsls	r5, r5, #2
 800719a:	fa08 f505 	lsl.w	r5, r8, r5
 800719e:	ea27 0705 	bic.w	r7, r7, r5
 80071a2:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80071a4:	68c5      	ldr	r5, [r0, #12]
 80071a6:	ea25 0503 	bic.w	r5, r5, r3
 80071aa:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80071ac:	6845      	ldr	r5, [r0, #4]
 80071ae:	ea25 050c 	bic.w	r5, r5, ip
 80071b2:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80071b4:	6885      	ldr	r5, [r0, #8]
 80071b6:	ea25 0303 	bic.w	r3, r5, r3
 80071ba:	6083      	str	r3, [r0, #8]
    position++;
 80071bc:	3201      	adds	r2, #1
 80071be:	e782      	b.n	80070c6 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80071c0:	2300      	movs	r3, #0
 80071c2:	e7c2      	b.n	800714a <HAL_GPIO_DeInit+0x9a>
 80071c4:	2301      	movs	r3, #1
 80071c6:	e7c0      	b.n	800714a <HAL_GPIO_DeInit+0x9a>
 80071c8:	2302      	movs	r3, #2
 80071ca:	e7be      	b.n	800714a <HAL_GPIO_DeInit+0x9a>
 80071cc:	2303      	movs	r3, #3
 80071ce:	e7bc      	b.n	800714a <HAL_GPIO_DeInit+0x9a>
 80071d0:	2304      	movs	r3, #4
 80071d2:	e7ba      	b.n	800714a <HAL_GPIO_DeInit+0x9a>
 80071d4:	2305      	movs	r3, #5
 80071d6:	e7b8      	b.n	800714a <HAL_GPIO_DeInit+0x9a>
 80071d8:	2306      	movs	r3, #6
 80071da:	e7b6      	b.n	800714a <HAL_GPIO_DeInit+0x9a>
 80071dc:	2307      	movs	r3, #7
 80071de:	e7b4      	b.n	800714a <HAL_GPIO_DeInit+0x9a>
 80071e0:	2308      	movs	r3, #8
 80071e2:	e7b2      	b.n	800714a <HAL_GPIO_DeInit+0x9a>
 80071e4:	58020000 	.word	0x58020000

080071e8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80071e8:	6903      	ldr	r3, [r0, #16]
 80071ea:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80071ec:	bf14      	ite	ne
 80071ee:	2001      	movne	r0, #1
 80071f0:	2000      	moveq	r0, #0
 80071f2:	4770      	bx	lr

080071f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80071f4:	b10a      	cbz	r2, 80071fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80071f6:	6181      	str	r1, [r0, #24]
  }
}
 80071f8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80071fa:	0409      	lsls	r1, r1, #16
 80071fc:	e7fb      	b.n	80071f6 <HAL_GPIO_WritePin+0x2>

080071fe <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80071fe:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007200:	ea01 0203 	and.w	r2, r1, r3
 8007204:	ea21 0103 	bic.w	r1, r1, r3
 8007208:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800720c:	6181      	str	r1, [r0, #24]
}
 800720e:	4770      	bx	lr

08007210 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007210:	4b04      	ldr	r3, [pc, #16]	@ (8007224 <HAL_HSEM_FastTake+0x14>)
 8007212:	3020      	adds	r0, #32
 8007214:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8007218:	4b03      	ldr	r3, [pc, #12]	@ (8007228 <HAL_HSEM_FastTake+0x18>)
 800721a:	1ac0      	subs	r0, r0, r3
 800721c:	bf18      	it	ne
 800721e:	2001      	movne	r0, #1
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	58026400 	.word	0x58026400
 8007228:	80000300 	.word	0x80000300

0800722c <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800722c:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 8007230:	4b01      	ldr	r3, [pc, #4]	@ (8007238 <HAL_HSEM_Release+0xc>)
 8007232:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8007236:	4770      	bx	lr
 8007238:	58026400 	.word	0x58026400

0800723c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800723c:	6803      	ldr	r3, [r0, #0]
 800723e:	699a      	ldr	r2, [r3, #24]
 8007240:	0791      	lsls	r1, r2, #30
 8007242:	d501      	bpl.n	8007248 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007244:	2200      	movs	r2, #0
 8007246:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007248:	699a      	ldr	r2, [r3, #24]
 800724a:	07d2      	lsls	r2, r2, #31
 800724c:	d403      	bmi.n	8007256 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800724e:	699a      	ldr	r2, [r3, #24]
 8007250:	f042 0201 	orr.w	r2, r2, #1
 8007254:	619a      	str	r2, [r3, #24]
  }
}
 8007256:	4770      	bx	lr

08007258 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007258:	b530      	push	{r4, r5, lr}
 800725a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800725c:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007260:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007262:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8007264:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800726a:	4a05      	ldr	r2, [pc, #20]	@ (8007280 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800726c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800726e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007272:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8007276:	ea20 0002 	bic.w	r0, r0, r2
 800727a:	4303      	orrs	r3, r0
 800727c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800727e:	bd30      	pop	{r4, r5, pc}
 8007280:	03ff63ff 	.word	0x03ff63ff

08007284 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8007284:	6803      	ldr	r3, [r0, #0]
{
 8007286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800728a:	699c      	ldr	r4, [r3, #24]
{
 800728c:	4605      	mov	r5, r0
 800728e:	460f      	mov	r7, r1
 8007290:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007292:	f014 0410 	ands.w	r4, r4, #16
 8007296:	d06f      	beq.n	8007378 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8007298:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800729a:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800729c:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800729e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	699a      	ldr	r2, [r3, #24]
 80072a4:	0690      	lsls	r0, r2, #26
 80072a6:	d461      	bmi.n	800736c <I2C_IsErrorOccurred+0xe8>
 80072a8:	f1b8 0f00 	cmp.w	r8, #0
 80072ac:	d035      	beq.n	800731a <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 80072ae:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80072b2:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80072b4:	682e      	ldr	r6, [r5, #0]
 80072b6:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80072b8:	05d9      	lsls	r1, r3, #23
 80072ba:	d505      	bpl.n	80072c8 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80072bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80072c0:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80072c4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80072c6:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80072c8:	055a      	lsls	r2, r3, #21
 80072ca:	d505      	bpl.n	80072d8 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80072cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80072d0:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80072d4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80072d6:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80072d8:	059b      	lsls	r3, r3, #22
 80072da:	d54f      	bpl.n	800737c <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80072dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80072e0:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80072e4:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 80072e6:	4628      	mov	r0, r5
 80072e8:	f7ff ffa8 	bl	800723c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80072ec:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 80072ee:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80072f0:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80072f4:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80072f8:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80072fc:	f023 0301 	bic.w	r3, r3, #1
 8007300:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8007302:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8007304:	4323      	orrs	r3, r4
 8007306:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007308:	2320      	movs	r3, #32
 800730a:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800730e:	2300      	movs	r3, #0
 8007310:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8007314:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8007318:	e032      	b.n	8007380 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800731a:	1c7a      	adds	r2, r7, #1
 800731c:	d0c1      	beq.n	80072a2 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800731e:	f7fe ff99 	bl	8006254 <HAL_GetTick>
 8007322:	1b80      	subs	r0, r0, r6
 8007324:	42b8      	cmp	r0, r7
 8007326:	d801      	bhi.n	800732c <I2C_IsErrorOccurred+0xa8>
 8007328:	2f00      	cmp	r7, #0
 800732a:	d1b9      	bne.n	80072a0 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800732c:	682b      	ldr	r3, [r5, #0]
 800732e:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8007330:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007334:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8007336:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007338:	0400      	lsls	r0, r0, #16
 800733a:	d50a      	bpl.n	8007352 <I2C_IsErrorOccurred+0xce>
 800733c:	0449      	lsls	r1, r1, #17
 800733e:	d408      	bmi.n	8007352 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8007340:	2a20      	cmp	r2, #32
 8007342:	d006      	beq.n	8007352 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800734a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800734c:	f7fe ff82 	bl	8006254 <HAL_GetTick>
 8007350:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007352:	682b      	ldr	r3, [r5, #0]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	069b      	lsls	r3, r3, #26
 8007358:	d4a2      	bmi.n	80072a0 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800735a:	f7fe ff7b 	bl	8006254 <HAL_GetTick>
 800735e:	1b80      	subs	r0, r0, r6
 8007360:	2819      	cmp	r0, #25
 8007362:	d9f6      	bls.n	8007352 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007364:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8007366:	f04f 0801 	mov.w	r8, #1
 800736a:	e799      	b.n	80072a0 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800736c:	f1b8 0f00 	cmp.w	r8, #0
 8007370:	d19d      	bne.n	80072ae <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007372:	2220      	movs	r2, #32
 8007374:	61da      	str	r2, [r3, #28]
 8007376:	e79a      	b.n	80072ae <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8007378:	4620      	mov	r0, r4
 800737a:	e79b      	b.n	80072b4 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800737c:	2800      	cmp	r0, #0
 800737e:	d1b2      	bne.n	80072e6 <I2C_IsErrorOccurred+0x62>
}
 8007380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007384 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	4604      	mov	r4, r0
 8007388:	460d      	mov	r5, r1
 800738a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	079b      	lsls	r3, r3, #30
 8007392:	d501      	bpl.n	8007398 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8007394:	2000      	movs	r0, #0
 8007396:	e01f      	b.n	80073d8 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007398:	4632      	mov	r2, r6
 800739a:	4629      	mov	r1, r5
 800739c:	4620      	mov	r0, r4
 800739e:	f7ff ff71 	bl	8007284 <I2C_IsErrorOccurred>
 80073a2:	b9c0      	cbnz	r0, 80073d6 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80073a4:	1c6a      	adds	r2, r5, #1
 80073a6:	d0f1      	beq.n	800738c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073a8:	f7fe ff54 	bl	8006254 <HAL_GetTick>
 80073ac:	1b80      	subs	r0, r0, r6
 80073ae:	42a8      	cmp	r0, r5
 80073b0:	d801      	bhi.n	80073b6 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80073b2:	2d00      	cmp	r5, #0
 80073b4:	d1ea      	bne.n	800738c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	f013 0302 	ands.w	r3, r3, #2
 80073be:	d1e5      	bne.n	800738c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073c0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 80073c2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073c6:	f042 0220 	orr.w	r2, r2, #32
 80073ca:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80073cc:	2220      	movs	r2, #32
 80073ce:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80073d2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80073d6:	2001      	movs	r0, #1
}
 80073d8:	bd70      	pop	{r4, r5, r6, pc}

080073da <I2C_WaitOnFlagUntilTimeout>:
{
 80073da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073de:	9f06      	ldr	r7, [sp, #24]
 80073e0:	4604      	mov	r4, r0
 80073e2:	4688      	mov	r8, r1
 80073e4:	4616      	mov	r6, r2
 80073e6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073e8:	6822      	ldr	r2, [r4, #0]
 80073ea:	6993      	ldr	r3, [r2, #24]
 80073ec:	ea38 0303 	bics.w	r3, r8, r3
 80073f0:	bf0c      	ite	eq
 80073f2:	2301      	moveq	r3, #1
 80073f4:	2300      	movne	r3, #0
 80073f6:	42b3      	cmp	r3, r6
 80073f8:	d001      	beq.n	80073fe <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80073fa:	2000      	movs	r0, #0
 80073fc:	e01e      	b.n	800743c <I2C_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 80073fe:	1c6b      	adds	r3, r5, #1
 8007400:	d0f3      	beq.n	80073ea <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007402:	f7fe ff27 	bl	8006254 <HAL_GetTick>
 8007406:	1bc0      	subs	r0, r0, r7
 8007408:	42a8      	cmp	r0, r5
 800740a:	d801      	bhi.n	8007410 <I2C_WaitOnFlagUntilTimeout+0x36>
 800740c:	2d00      	cmp	r5, #0
 800740e:	d1eb      	bne.n	80073e8 <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	ea38 0303 	bics.w	r3, r8, r3
 8007418:	bf0c      	ite	eq
 800741a:	2301      	moveq	r3, #1
 800741c:	2300      	movne	r3, #0
 800741e:	42b3      	cmp	r3, r6
 8007420:	d1e2      	bne.n	80073e8 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007422:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          return HAL_ERROR;
 8007424:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007426:	f043 0320 	orr.w	r3, r3, #32
 800742a:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800742c:	2320      	movs	r3, #32
 800742e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007432:	2300      	movs	r3, #0
 8007434:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8007438:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007440 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007440:	b570      	push	{r4, r5, r6, lr}
 8007442:	4604      	mov	r4, r0
 8007444:	460d      	mov	r5, r1
 8007446:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007448:	6823      	ldr	r3, [r4, #0]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	069b      	lsls	r3, r3, #26
 800744e:	d501      	bpl.n	8007454 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8007450:	2000      	movs	r0, #0
 8007452:	e01d      	b.n	8007490 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007454:	4632      	mov	r2, r6
 8007456:	4629      	mov	r1, r5
 8007458:	4620      	mov	r0, r4
 800745a:	f7ff ff13 	bl	8007284 <I2C_IsErrorOccurred>
 800745e:	b9b0      	cbnz	r0, 800748e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007460:	f7fe fef8 	bl	8006254 <HAL_GetTick>
 8007464:	1b80      	subs	r0, r0, r6
 8007466:	42a8      	cmp	r0, r5
 8007468:	d801      	bhi.n	800746e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800746a:	2d00      	cmp	r5, #0
 800746c:	d1ec      	bne.n	8007448 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	f013 0320 	ands.w	r3, r3, #32
 8007476:	d1e7      	bne.n	8007448 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007478:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800747a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800747e:	f042 0220 	orr.w	r2, r2, #32
 8007482:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007484:	2220      	movs	r2, #32
 8007486:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800748a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800748e:	2001      	movs	r0, #1
}
 8007490:	bd70      	pop	{r4, r5, r6, pc}

08007492 <HAL_I2C_MspInit>:
}
 8007492:	4770      	bx	lr

08007494 <HAL_I2C_Init>:
{
 8007494:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8007496:	4604      	mov	r4, r0
 8007498:	2800      	cmp	r0, #0
 800749a:	d04a      	beq.n	8007532 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800749c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80074a0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80074a4:	b91b      	cbnz	r3, 80074ae <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80074a6:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80074aa:	f7ff fff2 	bl	8007492 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80074ae:	2324      	movs	r3, #36	@ 0x24
 80074b0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	f022 0201 	bic.w	r2, r2, #1
 80074bc:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074be:	6862      	ldr	r2, [r4, #4]
 80074c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80074c4:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80074cc:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074ce:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074d2:	2901      	cmp	r1, #1
 80074d4:	d124      	bne.n	8007520 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074da:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80074dc:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074de:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80074e0:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80074e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074e8:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80074ea:	68da      	ldr	r2, [r3, #12]
 80074ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80074f0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80074f2:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80074f6:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80074f8:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80074fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80074fe:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007500:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8007504:	430a      	orrs	r2, r1
 8007506:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	f042 0201 	orr.w	r2, r2, #1
 800750e:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8007510:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007512:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007514:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007518:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800751a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800751e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007520:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007524:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007526:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007528:	d1d8      	bne.n	80074dc <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800752a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800752e:	605a      	str	r2, [r3, #4]
 8007530:	e7d4      	b.n	80074dc <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8007532:	2001      	movs	r0, #1
 8007534:	e7f3      	b.n	800751e <HAL_I2C_Init+0x8a>

08007536 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 8007536:	4770      	bx	lr

08007538 <HAL_I2C_DeInit>:
{
 8007538:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800753a:	4604      	mov	r4, r0
 800753c:	b198      	cbz	r0, 8007566 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800753e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007540:	2324      	movs	r3, #36	@ 0x24
 8007542:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007546:	6813      	ldr	r3, [r2, #0]
 8007548:	f023 0301 	bic.w	r3, r3, #1
 800754c:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800754e:	f7ff fff2 	bl	8007536 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007552:	2000      	movs	r0, #0
 8007554:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8007556:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800755a:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800755e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007560:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8007564:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007566:	2001      	movs	r0, #1
 8007568:	e7fc      	b.n	8007564 <HAL_I2C_DeInit+0x2c>
	...

0800756c <HAL_I2C_Mem_Write>:
{
 800756c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007572:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8007576:	4604      	mov	r4, r0
 8007578:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800757a:	2b20      	cmp	r3, #32
{
 800757c:	4616      	mov	r6, r2
 800757e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8007582:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007586:	f040 80c6 	bne.w	8007716 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800758a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800758c:	b113      	cbz	r3, 8007594 <HAL_I2C_Mem_Write+0x28>
 800758e:	f1ba 0f00 	cmp.w	sl, #0
 8007592:	d106      	bne.n	80075a2 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007594:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007598:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800759a:	2001      	movs	r0, #1
}
 800759c:	b003      	add	sp, #12
 800759e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80075a2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	f000 80b5 	beq.w	8007716 <HAL_I2C_Mem_Write+0x1aa>
 80075ac:	f04f 0b01 	mov.w	fp, #1
 80075b0:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80075b4:	f7fe fe4e 	bl	8006254 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075b8:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80075ba:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075bc:	9000      	str	r0, [sp, #0]
 80075be:	465a      	mov	r2, fp
 80075c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80075c4:	4620      	mov	r0, r4
 80075c6:	f7ff ff08 	bl	80073da <I2C_WaitOnFlagUntilTimeout>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d1e5      	bne.n	800759a <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075ce:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 80075d0:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80075d2:	fa5f f289 	uxtb.w	r2, r9
 80075d6:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075d8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075dc:	2340      	movs	r3, #64	@ 0x40
 80075de:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 80075e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075e4:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80075e6:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80075e8:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80075ea:	4b4c      	ldr	r3, [pc, #304]	@ (800771c <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 80075ec:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80075f6:	f7ff fe2f 	bl	8007258 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075fa:	462a      	mov	r2, r5
 80075fc:	4641      	mov	r1, r8
 80075fe:	4620      	mov	r0, r4
 8007600:	f7ff fec0 	bl	8007384 <I2C_WaitOnTXISFlagUntilTimeout>
 8007604:	bb18      	cbnz	r0, 800764e <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007606:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800760a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800760c:	d115      	bne.n	800763a <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800760e:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007610:	2200      	movs	r2, #0
 8007612:	2180      	movs	r1, #128	@ 0x80
 8007614:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007616:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007618:	4643      	mov	r3, r8
 800761a:	9500      	str	r5, [sp, #0]
 800761c:	f7ff fedd 	bl	80073da <I2C_WaitOnFlagUntilTimeout>
 8007620:	b9a8      	cbnz	r0, 800764e <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007622:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007624:	b29b      	uxth	r3, r3
 8007626:	2bff      	cmp	r3, #255	@ 0xff
 8007628:	d815      	bhi.n	8007656 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800762a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800762c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8007630:	b292      	uxth	r2, r2
 8007632:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007634:	b2d2      	uxtb	r2, r2
 8007636:	9000      	str	r0, [sp, #0]
 8007638:	e012      	b.n	8007660 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800763a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800763c:	4641      	mov	r1, r8
 800763e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007640:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007642:	462a      	mov	r2, r5
 8007644:	f7ff fe9e 	bl	8007384 <I2C_WaitOnTXISFlagUntilTimeout>
 8007648:	b908      	cbnz	r0, 800764e <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	e7df      	b.n	800760e <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800764e:	2300      	movs	r3, #0
 8007650:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007654:	e7a1      	b.n	800759a <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007656:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007658:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800765c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800765e:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007660:	4639      	mov	r1, r7
 8007662:	4620      	mov	r0, r4
 8007664:	f7ff fdf8 	bl	8007258 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007668:	462a      	mov	r2, r5
 800766a:	4641      	mov	r1, r8
 800766c:	4620      	mov	r0, r4
 800766e:	f7ff fe89 	bl	8007384 <I2C_WaitOnTXISFlagUntilTimeout>
 8007672:	2800      	cmp	r0, #0
 8007674:	d191      	bne.n	800759a <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007676:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007678:	6822      	ldr	r2, [r4, #0]
 800767a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800767e:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8007680:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007682:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007684:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007686:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007688:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800768a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800768c:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800768e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007690:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007692:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007694:	b29b      	uxth	r3, r3
 8007696:	b1b3      	cbz	r3, 80076c6 <HAL_I2C_Mem_Write+0x15a>
 8007698:	b9aa      	cbnz	r2, 80076c6 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800769a:	4643      	mov	r3, r8
 800769c:	2180      	movs	r1, #128	@ 0x80
 800769e:	4620      	mov	r0, r4
 80076a0:	9500      	str	r5, [sp, #0]
 80076a2:	f7ff fe9a 	bl	80073da <I2C_WaitOnFlagUntilTimeout>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	f47f af77 	bne.w	800759a <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	2bff      	cmp	r3, #255	@ 0xff
 80076b2:	d928      	bls.n	8007706 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076b4:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076ba:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076bc:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076be:	4639      	mov	r1, r7
 80076c0:	4620      	mov	r0, r4
 80076c2:	f7ff fdc9 	bl	8007258 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80076c6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1cc      	bne.n	8007668 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076ce:	462a      	mov	r2, r5
 80076d0:	4641      	mov	r1, r8
 80076d2:	4620      	mov	r0, r4
 80076d4:	f7ff feb4 	bl	8007440 <I2C_WaitOnSTOPFlagUntilTimeout>
 80076d8:	2800      	cmp	r0, #0
 80076da:	f47f af5e 	bne.w	800759a <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	2120      	movs	r1, #32
 80076e2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80076ea:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80076ee:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80076f2:	f022 0201 	bic.w	r2, r2, #1
 80076f6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80076f8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80076fc:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007700:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8007704:	e74a      	b.n	800759c <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8007706:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007708:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800770c:	b292      	uxth	r2, r2
 800770e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007710:	b2d2      	uxtb	r2, r2
 8007712:	9000      	str	r0, [sp, #0]
 8007714:	e7d3      	b.n	80076be <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8007716:	2002      	movs	r0, #2
 8007718:	e740      	b.n	800759c <HAL_I2C_Mem_Write+0x30>
 800771a:	bf00      	nop
 800771c:	80002000 	.word	0x80002000

08007720 <HAL_I2C_Mem_Read>:
{
 8007720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007726:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800772a:	4604      	mov	r4, r0
 800772c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800772e:	2b20      	cmp	r3, #32
{
 8007730:	4616      	mov	r6, r2
 8007732:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8007736:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800773a:	f040 80c9 	bne.w	80078d0 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800773e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007740:	b113      	cbz	r3, 8007748 <HAL_I2C_Mem_Read+0x28>
 8007742:	f1ba 0f00 	cmp.w	sl, #0
 8007746:	d106      	bne.n	8007756 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007748:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800774c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800774e:	2001      	movs	r0, #1
}
 8007750:	b003      	add	sp, #12
 8007752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007756:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800775a:	2b01      	cmp	r3, #1
 800775c:	f000 80b8 	beq.w	80078d0 <HAL_I2C_Mem_Read+0x1b0>
 8007760:	f04f 0b01 	mov.w	fp, #1
 8007764:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8007768:	f7fe fd74 	bl	8006254 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800776c:	2319      	movs	r3, #25
 800776e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8007770:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007772:	465a      	mov	r2, fp
 8007774:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007778:	4620      	mov	r0, r4
 800777a:	f7ff fe2e 	bl	80073da <I2C_WaitOnFlagUntilTimeout>
 800777e:	4603      	mov	r3, r0
 8007780:	2800      	cmp	r0, #0
 8007782:	d1e4      	bne.n	800774e <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007784:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8007786:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007788:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800778a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800778e:	2240      	movs	r2, #64	@ 0x40
 8007790:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8007794:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007796:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007798:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800779a:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800779c:	4a4d      	ldr	r2, [pc, #308]	@ (80078d4 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800779e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80077a2:	9200      	str	r2, [sp, #0]
 80077a4:	fa5f f289 	uxtb.w	r2, r9
 80077a8:	f7ff fd56 	bl	8007258 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077ac:	462a      	mov	r2, r5
 80077ae:	4641      	mov	r1, r8
 80077b0:	4620      	mov	r0, r4
 80077b2:	f7ff fde7 	bl	8007384 <I2C_WaitOnTXISFlagUntilTimeout>
 80077b6:	bb20      	cbnz	r0, 8007802 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077b8:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077bc:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077be:	d116      	bne.n	80077ee <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077c0:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80077c2:	2200      	movs	r2, #0
 80077c4:	2140      	movs	r1, #64	@ 0x40
 80077c6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077c8:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80077ca:	4643      	mov	r3, r8
 80077cc:	9500      	str	r5, [sp, #0]
 80077ce:	f7ff fe04 	bl	80073da <I2C_WaitOnFlagUntilTimeout>
 80077d2:	b9b0      	cbnz	r0, 8007802 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077d4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	2bff      	cmp	r3, #255	@ 0xff
 80077da:	4b3f      	ldr	r3, [pc, #252]	@ (80078d8 <HAL_I2C_Mem_Read+0x1b8>)
 80077dc:	d815      	bhi.n	800780a <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80077de:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80077e0:	b292      	uxth	r2, r2
 80077e2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077e4:	b2d2      	uxtb	r2, r2
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80077ec:	e012      	b.n	8007814 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80077ee:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077f0:	4641      	mov	r1, r8
 80077f2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80077f4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077f6:	462a      	mov	r2, r5
 80077f8:	f7ff fdc4 	bl	8007384 <I2C_WaitOnTXISFlagUntilTimeout>
 80077fc:	b908      	cbnz	r0, 8007802 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	e7de      	b.n	80077c0 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8007802:	2300      	movs	r3, #0
 8007804:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007808:	e7a1      	b.n	800774e <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800780a:	22ff      	movs	r2, #255	@ 0xff
 800780c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007814:	4639      	mov	r1, r7
 8007816:	4620      	mov	r0, r4
 8007818:	f7ff fd1e 	bl	8007258 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800781c:	4643      	mov	r3, r8
 800781e:	2200      	movs	r2, #0
 8007820:	2104      	movs	r1, #4
 8007822:	4620      	mov	r0, r4
 8007824:	9500      	str	r5, [sp, #0]
 8007826:	f7ff fdd8 	bl	80073da <I2C_WaitOnFlagUntilTimeout>
 800782a:	2800      	cmp	r0, #0
 800782c:	d18f      	bne.n	800774e <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007832:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007834:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007836:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8007838:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800783a:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800783c:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800783e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007840:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007842:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007844:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007846:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007848:	b29b      	uxth	r3, r3
 800784a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800784c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800784e:	b29b      	uxth	r3, r3
 8007850:	b1b3      	cbz	r3, 8007880 <HAL_I2C_Mem_Read+0x160>
 8007852:	b9aa      	cbnz	r2, 8007880 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007854:	4643      	mov	r3, r8
 8007856:	2180      	movs	r1, #128	@ 0x80
 8007858:	4620      	mov	r0, r4
 800785a:	9500      	str	r5, [sp, #0]
 800785c:	f7ff fdbd 	bl	80073da <I2C_WaitOnFlagUntilTimeout>
 8007860:	2800      	cmp	r0, #0
 8007862:	f47f af74 	bne.w	800774e <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007866:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007868:	b29b      	uxth	r3, r3
 800786a:	2bff      	cmp	r3, #255	@ 0xff
 800786c:	d928      	bls.n	80078c0 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800786e:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007870:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007874:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007876:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007878:	4639      	mov	r1, r7
 800787a:	4620      	mov	r0, r4
 800787c:	f7ff fcec 	bl	8007258 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007880:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007882:	b29b      	uxth	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1c9      	bne.n	800781c <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007888:	462a      	mov	r2, r5
 800788a:	4641      	mov	r1, r8
 800788c:	4620      	mov	r0, r4
 800788e:	f7ff fdd7 	bl	8007440 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007892:	2800      	cmp	r0, #0
 8007894:	f47f af5b 	bne.w	800774e <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	2120      	movs	r1, #32
 800789c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80078a4:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80078a8:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80078ac:	f022 0201 	bic.w	r2, r2, #1
 80078b0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80078b2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80078b6:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078ba:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80078be:	e747      	b.n	8007750 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80078c0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 80078c6:	b292      	uxth	r2, r2
 80078c8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078ca:	b2d2      	uxtb	r2, r2
 80078cc:	9000      	str	r0, [sp, #0]
 80078ce:	e7d3      	b.n	8007878 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 80078d0:	2002      	movs	r0, #2
 80078d2:	e73d      	b.n	8007750 <HAL_I2C_Mem_Read+0x30>
 80078d4:	80002000 	.word	0x80002000
 80078d8:	80002400 	.word	0x80002400

080078dc <HAL_I2C_GetState>:
  return hi2c->State;
 80078dc:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 80078e0:	4770      	bx	lr

080078e2 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80078e2:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 80078e4:	4770      	bx	lr

080078e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078e6:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078e8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80078ec:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80078ee:	2a20      	cmp	r2, #32
 80078f0:	b2d4      	uxtb	r4, r2
 80078f2:	d11c      	bne.n	800792e <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078f4:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80078f8:	2a01      	cmp	r2, #1
 80078fa:	d018      	beq.n	800792e <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078fc:	2224      	movs	r2, #36	@ 0x24
 80078fe:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007902:	6802      	ldr	r2, [r0, #0]
 8007904:	6810      	ldr	r0, [r2, #0]
 8007906:	f020 0001 	bic.w	r0, r0, #1
 800790a:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800790c:	6810      	ldr	r0, [r2, #0]
 800790e:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8007912:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007914:	6810      	ldr	r0, [r2, #0]
 8007916:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007918:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800791a:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800791c:	6811      	ldr	r1, [r2, #0]
 800791e:	f041 0101 	orr.w	r1, r1, #1
 8007922:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007924:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007928:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800792c:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800792e:	2002      	movs	r0, #2
 8007930:	e7fc      	b.n	800792c <HAL_I2CEx_ConfigAnalogFilter+0x46>

08007932 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007932:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007934:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8007938:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800793a:	2a20      	cmp	r2, #32
 800793c:	b2d4      	uxtb	r4, r2
 800793e:	d11b      	bne.n	8007978 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007940:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8007944:	2a01      	cmp	r2, #1
 8007946:	d017      	beq.n	8007978 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007948:	2224      	movs	r2, #36	@ 0x24
 800794a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800794e:	6802      	ldr	r2, [r0, #0]
 8007950:	6810      	ldr	r0, [r2, #0]
 8007952:	f020 0001 	bic.w	r0, r0, #1
 8007956:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007958:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800795a:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800795e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007962:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8007964:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007966:	6811      	ldr	r1, [r2, #0]
 8007968:	f041 0101 	orr.w	r1, r1, #1
 800796c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800796e:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007972:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007976:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8007978:	2002      	movs	r0, #2
 800797a:	e7fc      	b.n	8007976 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800797c <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800797c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800797e:	2401      	movs	r4, #1
 8007980:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 8007982:	2500      	movs	r5, #0
 8007984:	194e      	adds	r6, r1, r5
 8007986:	443d      	add	r5, r7
 8007988:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800798a:	42be      	cmp	r6, r7
 800798c:	d112      	bne.n	80079b4 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 800798e:	2c10      	cmp	r4, #16
 8007990:	d108      	bne.n	80079a4 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 8007992:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8007994:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 8007996:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 8007998:	601d      	str	r5, [r3, #0]
  p = 0;
 800799a:	4623      	mov	r3, r4
  si = Huffsize[0];
 800799c:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 800799e:	5cc8      	ldrb	r0, [r1, r3]
 80079a0:	b9d8      	cbnz	r0, 80079da <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 80079a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 80079a4:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 80079a6:	3401      	adds	r4, #1
 80079a8:	19ee      	adds	r6, r5, r7
 80079aa:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80079ae:	d9e9      	bls.n	8007984 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 80079b0:	2001      	movs	r0, #1
 80079b2:	e7f6      	b.n	80079a2 <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 80079b4:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 80079b8:	e7e7      	b.n	800798a <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 80079ba:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 80079be:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 80079c0:	5cc8      	ldrb	r0, [r1, r3]
 80079c2:	19dc      	adds	r4, r3, r7
 80079c4:	42a8      	cmp	r0, r5
 80079c6:	d0f8      	beq.n	80079ba <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 80079c8:	2d1f      	cmp	r5, #31
 80079ca:	d8f1      	bhi.n	80079b0 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80079cc:	fa06 f005 	lsl.w	r0, r6, r5
 80079d0:	42a0      	cmp	r0, r4
 80079d2:	d9ed      	bls.n	80079b0 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 80079d4:	0064      	lsls	r4, r4, #1
    si++;
 80079d6:	3501      	adds	r5, #1
 80079d8:	e7e1      	b.n	800799e <JPEG_Bits_To_SizeCodes+0x22>
 80079da:	1ae7      	subs	r7, r4, r3
 80079dc:	e7f0      	b.n	80079c0 <JPEG_Bits_To_SizeCodes+0x44>

080079de <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80079de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079e0:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 80079e4:	460d      	mov	r5, r1
 80079e6:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80079e8:	ab01      	add	r3, sp, #4
 80079ea:	aa43      	add	r2, sp, #268	@ 0x10c
 80079ec:	a902      	add	r1, sp, #8
 80079ee:	f7ff ffc5 	bl	800797c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80079f2:	b938      	cbnz	r0, 8007a04 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 80079f4:	9e01      	ldr	r6, [sp, #4]
 80079f6:	460b      	mov	r3, r1
 80079f8:	f104 010f 	add.w	r1, r4, #15
 80079fc:	360f      	adds	r6, #15
 80079fe:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8007a00:	42a1      	cmp	r1, r4
 8007a02:	d102      	bne.n	8007a0a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007a04:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8007a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 8007a0a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8007a0e:	2e0b      	cmp	r6, #11
 8007a10:	d80a      	bhi.n	8007a28 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007a12:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8007a16:	f852 cb04 	ldr.w	ip, [r2], #4
 8007a1a:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007a1e:	f813 7b01 	ldrb.w	r7, [r3], #1
 8007a22:	3f01      	subs	r7, #1
 8007a24:	55af      	strb	r7, [r5, r6]
      k++;
 8007a26:	e7eb      	b.n	8007a00 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8007a28:	2001      	movs	r0, #1
 8007a2a:	e7eb      	b.n	8007a04 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

08007a2c <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	4608      	mov	r0, r1
 8007a30:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8007a32:	681c      	ldr	r4, [r3, #0]
{
 8007a34:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8007a36:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d125      	bne.n	8007a8a <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8007a3e:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8007a42:	a901      	add	r1, sp, #4
 8007a44:	f7ff ffcb 	bl	80079de <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8007a48:	b9e8      	cbnz	r0, 8007a86 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 8007a4a:	aa01      	add	r2, sp, #4
 8007a4c:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8007a50:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 8007a54:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 8007a56:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 8007a58:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007a5a:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 8007a5c:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007a5e:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 8007a62:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007a64:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007a66:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007a6a:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8007a6e:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007a70:	7b13      	ldrb	r3, [r2, #12]
 8007a72:	021b      	lsls	r3, r3, #8
 8007a74:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007a78:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8007a7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007a7e:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8007a82:	42b4      	cmp	r4, r6
 8007a84:	d1e9      	bne.n	8007a5a <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007a86:	b011      	add	sp, #68	@ 0x44
 8007a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8007a8a:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d102      	bne.n	8007a98 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8007a92:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 8007a96:	e7d4      	b.n	8007a42 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 8007a98:	2001      	movs	r0, #1
 8007a9a:	e7f4      	b.n	8007a86 <JPEG_Set_HuffDC_Mem+0x5a>

08007a9c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8007a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8007aa0:	6804      	ldr	r4, [r0, #0]
{
 8007aa2:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 8007aa6:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8007aa8:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d149      	bne.n	8007b44 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8007ab0:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8007ab4:	466b      	mov	r3, sp
 8007ab6:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 8007aba:	a901      	add	r1, sp, #4
 8007abc:	4630      	mov	r0, r6
 8007abe:	f7ff ff5d 	bl	800797c <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	d13a      	bne.n	8007b3c <JPEG_Set_HuffAC_Mem+0xa0>
 8007ac6:	9b00      	ldr	r3, [sp, #0]
 8007ac8:	460d      	mov	r5, r1
 8007aca:	f106 0c0f 	add.w	ip, r6, #15
 8007ace:	4617      	mov	r7, r2
 8007ad0:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8007ad2:	f04f 0e0a 	mov.w	lr, #10
 8007ad6:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007ad8:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 8007ada:	4561      	cmp	r1, ip
 8007adc:	d139      	bne.n	8007b52 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8007ade:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8007ae2:	a942      	add	r1, sp, #264	@ 0x108
 8007ae4:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 8007ae8:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8007aea:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8007aec:	6063      	str	r3, [r4, #4]
 8007aee:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8007af0:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 8007af4:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 8007af8:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8007afa:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007afe:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8007b00:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007b04:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8007b06:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007b0a:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007b0c:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 8007b10:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007b12:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 8007b16:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007b18:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007b1a:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007b1e:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8007b22:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007b24:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 8007b28:	021b      	lsls	r3, r3, #8
 8007b2a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007b2e:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8007b30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b34:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8007b38:	42b4      	cmp	r4, r6
 8007b3a:	d1e7      	bne.n	8007b0c <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007b3c:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 8007b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8007b44:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d10f      	bne.n	8007b6c <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8007b4c:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 8007b50:	e7b0      	b.n	8007ab4 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 8007b52:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 8007b56:	b15b      	cbz	r3, 8007b70 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8007b58:	2bf0      	cmp	r3, #240	@ 0xf0
 8007b5a:	d015      	beq.n	8007b88 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 8007b5c:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 8007b5e:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8007b62:	3b01      	subs	r3, #1
 8007b64:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8007b68:	2ba1      	cmp	r3, #161	@ 0xa1
 8007b6a:	d902      	bls.n	8007b72 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 8007b6c:	2001      	movs	r0, #1
 8007b6e:	e7e5      	b.n	8007b3c <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 8007b70:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007b72:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8007b76:	f857 8b04 	ldr.w	r8, [r7], #4
 8007b7a:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007b7e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8007b82:	3a01      	subs	r2, #1
 8007b84:	54f2      	strb	r2, [r6, r3]
      k++;
 8007b86:	e7a8      	b.n	8007ada <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 8007b88:	23a1      	movs	r3, #161	@ 0xa1
 8007b8a:	e7f2      	b.n	8007b72 <JPEG_Set_HuffAC_Mem+0xd6>

08007b8c <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8007b8c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007b8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007b92:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007b94:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8007b96:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007b98:	f002 0203 	and.w	r2, r2, #3
 8007b9c:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	bf0c      	ite	eq
 8007ba2:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8007ba6:	f022 0208 	bicne.w	r2, r2, #8
 8007baa:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	f022 0201 	bic.w	r2, r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007bb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bb6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007bba:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8007bbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bbe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007bc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8007bc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007bca:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007bcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bce:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007bd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	f042 0201 	orr.w	r2, r2, #1
 8007bda:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007bdc:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007bde:	f002 020c 	and.w	r2, r2, #12
 8007be2:	2a08      	cmp	r2, #8
 8007be4:	d104      	bne.n	8007bf0 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8007be6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007be8:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007bec:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8007bee:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8007bf0:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007bf2:	f002 020c 	and.w	r2, r2, #12
 8007bf6:	2a0c      	cmp	r2, #12
 8007bf8:	d1f9      	bne.n	8007bee <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007bfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bfc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007c00:	e7f4      	b.n	8007bec <JPEG_Init_Process+0x60>
	...

08007c04 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8007c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007c06:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 8007c08:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007c0a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007c0c:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007c0e:	42aa      	cmp	r2, r5
 8007c10:	d313      	bcc.n	8007c3a <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8007c12:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007c14:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8007c16:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007c18:	428b      	cmp	r3, r1
 8007c1a:	d30e      	bcc.n	8007c3a <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8007c1c:	4f18      	ldr	r7, [pc, #96]	@ (8007c80 <JPEG_DMA_StartProcess+0x7c>)
 8007c1e:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007c20:	4f18      	ldr	r7, [pc, #96]	@ (8007c84 <JPEG_DMA_StartProcess+0x80>)
 8007c22:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8007c24:	4e18      	ldr	r6, [pc, #96]	@ (8007c88 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007c26:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8007c28:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8007c2a:	4e18      	ldr	r6, [pc, #96]	@ (8007c8c <JPEG_DMA_StartProcess+0x88>)
 8007c2c:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8007c2e:	b105      	cbz	r5, 8007c32 <JPEG_DMA_StartProcess+0x2e>
 8007c30:	b931      	cbnz	r1, 8007c40 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007c32:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007c34:	f043 0304 	orr.w	r3, r3, #4
 8007c38:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8007c3a:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8007c3c:	b003      	add	sp, #12
 8007c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007c40:	fbb2 f6f5 	udiv	r6, r2, r5
 8007c44:	fb05 2516 	mls	r5, r5, r6, r2
 8007c48:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007c4a:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007c4c:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007c4e:	fbb3 f2f1 	udiv	r2, r3, r1
 8007c52:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007c56:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007c58:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007c5a:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007c5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007c5e:	9500      	str	r5, [sp, #0]
 8007c60:	69e2      	ldr	r2, [r4, #28]
 8007c62:	f001 f848 	bl	8008cf6 <HAL_MDMA_Start_IT>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d1e3      	bne.n	8007c32 <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007c6a:	6822      	ldr	r2, [r4, #0]
 8007c6c:	9500      	str	r5, [sp, #0]
 8007c6e:	3240      	adds	r2, #64	@ 0x40
 8007c70:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007c72:	69a1      	ldr	r1, [r4, #24]
 8007c74:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007c76:	f001 f83e 	bl	8008cf6 <HAL_MDMA_Start_IT>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	d0de      	beq.n	8007c3c <JPEG_DMA_StartProcess+0x38>
 8007c7e:	e7d8      	b.n	8007c32 <JPEG_DMA_StartProcess+0x2e>
 8007c80:	080081c7 	.word	0x080081c7
 8007c84:	080080bf 	.word	0x080080bf
 8007c88:	08008685 	.word	0x08008685
 8007c8c:	08008677 	.word	0x08008677

08007c90 <HAL_JPEG_Init>:
{
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 8007c92:	4605      	mov	r5, r0
 8007c94:	2800      	cmp	r0, #0
 8007c96:	f000 80f2 	beq.w	8007e7e <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8007c9a:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8007c9e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007ca2:	b91b      	cbnz	r3, 8007cac <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8007ca4:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8007ca8:	f7f9 f9f2 	bl	8001090 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8007cac:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8007cae:	2302      	movs	r3, #2
 8007cb0:	4a86      	ldr	r2, [pc, #536]	@ (8007ecc <HAL_JPEG_Init+0x23c>)
 8007cb2:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 8007cb6:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 8007cba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007cbc:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 8007cc0:	f043 0301 	orr.w	r3, r3, #1
 8007cc4:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	f023 0301 	bic.w	r3, r3, #1
 8007ccc:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007cce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007cd0:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8007cd4:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8007cd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007cd8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007cdc:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8007cde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007ce4:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007ce6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007ce8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007cec:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8007cee:	4b78      	ldr	r3, [pc, #480]	@ (8007ed0 <HAL_JPEG_Init+0x240>)
 8007cf0:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8007cf2:	4b78      	ldr	r3, [pc, #480]	@ (8007ed4 <HAL_JPEG_Init+0x244>)
 8007cf4:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8007cf6:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8007cf8:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007cfc:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 8007cfe:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007d00:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007d02:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007d04:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8007d08:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8007d0a:	4333      	orrs	r3, r6
 8007d0c:	7c56      	ldrb	r6, [r2, #17]
 8007d0e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007d12:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8007d16:	4281      	cmp	r1, r0
 8007d18:	d1f0      	bne.n	8007cfc <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8007ed8 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8007d1c:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 8007d20:	4a6e      	ldr	r2, [pc, #440]	@ (8007edc <HAL_JPEG_Init+0x24c>)
 8007d22:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007d26:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 8007d2a:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8007d2e:	4610      	mov	r0, r2
 8007d30:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007d32:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 8007d36:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8007d3a:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007d3e:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 8007d40:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007d42:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007d46:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007d48:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8007d4c:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8007d50:	ea43 030c 	orr.w	r3, r3, ip
 8007d54:	f890 c011 	ldrb.w	ip, [r0, #17]
 8007d58:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007d5c:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 8007d60:	42be      	cmp	r6, r7
 8007d62:	d1ec      	bne.n	8007d3e <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 8007d64:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8007d68:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 8007d6c:	0c1b      	lsrs	r3, r3, #16
 8007d6e:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8007d70:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 8007d74:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 8007d78:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007d7c:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8007d80:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007d82:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007d86:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007d88:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8007d8c:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8007d90:	4333      	orrs	r3, r6
 8007d92:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 8007d96:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007d9a:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8007d9e:	4281      	cmp	r1, r0
 8007da0:	d1ec      	bne.n	8007d7c <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 8007da2:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 8007da6:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 8007daa:	4a4d      	ldr	r2, [pc, #308]	@ (8007ee0 <HAL_JPEG_Init+0x250>)
 8007dac:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 8007db0:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8007db2:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8007db6:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8007dba:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8007dbe:	4013      	ands	r3, r2
  *address = value;
 8007dc0:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 8007dca:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8007dce:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 8007dd2:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 8007dd6:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8007dda:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8007ddc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8007de0:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8007de4:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8007de8:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8007dea:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8007dee:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 8007df2:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007df6:	4b3b      	ldr	r3, [pc, #236]	@ (8007ee4 <HAL_JPEG_Init+0x254>)
 8007df8:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8007dfc:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8007e00:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8007e04:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8007e08:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8007e0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8007e0e:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 8007e12:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8007e16:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8007e18:	4a33      	ldr	r2, [pc, #204]	@ (8007ee8 <HAL_JPEG_Init+0x258>)
 8007e1a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8007e1e:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 8007e22:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007e26:	4b31      	ldr	r3, [pc, #196]	@ (8007eec <HAL_JPEG_Init+0x25c>)
 8007e28:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 8007e2c:	4b30      	ldr	r3, [pc, #192]	@ (8007ef0 <HAL_JPEG_Init+0x260>)
 8007e2e:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 8007e32:	4b30      	ldr	r3, [pc, #192]	@ (8007ef4 <HAL_JPEG_Init+0x264>)
 8007e34:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8007e38:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8007e3c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8007e3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8007e42:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007e46:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 8007e4a:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007e4c:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007e50:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007e52:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8007e56:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007e5a:	4333      	orrs	r3, r6
 8007e5c:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 8007e60:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007e64:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8007e68:	4281      	cmp	r1, r0
 8007e6a:	d1ec      	bne.n	8007e46 <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8007e6c:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8007e70:	491a      	ldr	r1, [pc, #104]	@ (8007edc <HAL_JPEG_Init+0x24c>)
 8007e72:	4628      	mov	r0, r5
 8007e74:	f7ff fe12 	bl	8007a9c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8007e78:	b118      	cbz	r0, 8007e82 <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 8007e7e:	2001      	movs	r0, #1
}
 8007e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8007e82:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8007e86:	4918      	ldr	r1, [pc, #96]	@ (8007ee8 <HAL_JPEG_Init+0x258>)
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f7ff fe07 	bl	8007a9c <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d1f3      	bne.n	8007e7a <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8007e92:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8007e96:	490d      	ldr	r1, [pc, #52]	@ (8007ecc <HAL_JPEG_Init+0x23c>)
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f7ff fdc7 	bl	8007a2c <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d1eb      	bne.n	8007e7a <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8007ea2:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8007ea6:	4914      	ldr	r1, [pc, #80]	@ (8007ef8 <HAL_JPEG_Init+0x268>)
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f7ff fdbf 	bl	8007a2c <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d1e3      	bne.n	8007e7a <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8007eb2:	6863      	ldr	r3, [r4, #4]
 8007eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007eb8:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007eba:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8007ebc:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8007ebe:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007ec0:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8007ec4:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8007ec6:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 8007ec8:	e7da      	b.n	8007e80 <HAL_JPEG_Init+0x1f0>
 8007eca:	bf00      	nop
 8007ecc:	08023b48 	.word	0x08023b48
 8007ed0:	08023948 	.word	0x08023948
 8007ed4:	08023908 	.word	0x08023908
 8007ed8:	0b0a0908 	.word	0x0b0a0908
 8007edc:	08023a7a 	.word	0x08023a7a
 8007ee0:	ffff0000 	.word	0xffff0000
 8007ee4:	09080706 	.word	0x09080706
 8007ee8:	080239c8 	.word	0x080239c8
 8007eec:	01000404 	.word	0x01000404
 8007ef0:	05070403 	.word	0x05070403
 8007ef4:	04040201 	.word	0x04040201
 8007ef8:	08023b2c 	.word	0x08023b2c

08007efc <HAL_JPEG_GetInfo>:
{
 8007efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d06f      	beq.n	8007fe4 <HAL_JPEG_GetInfo+0xe8>
 8007f04:	2900      	cmp	r1, #0
 8007f06:	d06d      	beq.n	8007fe4 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8007f08:	6804      	ldr	r4, [r0, #0]
 8007f0a:	6863      	ldr	r3, [r4, #4]
 8007f0c:	f003 0303 	and.w	r3, r3, #3
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d047      	beq.n	8007fa4 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8007f14:	6863      	ldr	r3, [r4, #4]
 8007f16:	f013 0303 	ands.w	r3, r3, #3
 8007f1a:	d005      	beq.n	8007f28 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8007f1c:	6863      	ldr	r3, [r4, #4]
 8007f1e:	f003 0303 	and.w	r3, r3, #3
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d15e      	bne.n	8007fe4 <HAL_JPEG_GetInfo+0xe8>
 8007f26:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007f28:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8007f2a:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007f2c:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007f30:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007f32:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007f34:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8007f36:	68e2      	ldr	r2, [r4, #12]
 8007f38:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007f3c:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007f3e:	d13c      	bne.n	8007fba <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007f40:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007f42:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007f44:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007f48:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007f4a:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007f4c:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007f4e:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007f52:	d129      	bne.n	8007fa8 <HAL_JPEG_GetInfo+0xac>
 8007f54:	4313      	orrs	r3, r2
 8007f56:	f013 0f0f 	tst.w	r3, #15
 8007f5a:	bf0c      	ite	eq
 8007f5c:	2301      	moveq	r3, #1
 8007f5e:	2300      	movne	r3, #0
 8007f60:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8007f62:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	3450      	adds	r4, #80	@ 0x50
 8007f68:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8007fe8 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 8007f6c:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007f6e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 8007f72:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 8007f76:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 8007f7a:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 8007f7e:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8007f80:	fa29 f206 	lsr.w	r2, r9, r6
 8007f84:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 8007f86:	2a01      	cmp	r2, #1
 8007f88:	d119      	bne.n	8007fbe <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 8007f8a:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 8007f8c:	3608      	adds	r6, #8
 8007f8e:	3701      	adds	r7, #1
 8007f90:	2e20      	cmp	r6, #32
 8007f92:	d1f5      	bne.n	8007f80 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 8007f94:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007f96:	2d40      	cmp	r5, #64	@ 0x40
 8007f98:	d1ed      	bne.n	8007f76 <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 8007f9a:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8007f9c:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8007f9e:	610b      	str	r3, [r1, #16]
}
 8007fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa4:	2310      	movs	r3, #16
 8007fa6:	e7bf      	b.n	8007f28 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007fa8:	2d03      	cmp	r5, #3
 8007faa:	d106      	bne.n	8007fba <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007fac:	4313      	orrs	r3, r2
 8007fae:	f013 0f0f 	tst.w	r3, #15
 8007fb2:	bf0c      	ite	eq
 8007fb4:	2301      	moveq	r3, #1
 8007fb6:	2300      	movne	r3, #0
 8007fb8:	e7d3      	b.n	8007f62 <HAL_JPEG_GetInfo+0x66>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	e7d1      	b.n	8007f62 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007fbe:	fb0e fb02 	mul.w	fp, lr, r2
 8007fc2:	f897 a000 	ldrb.w	sl, [r7]
 8007fc6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007fc8:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8007fcc:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8007fd0:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 8007fd2:	bf8b      	itete	hi
 8007fd4:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 8007fd8:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8007fdc:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8007fde:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8007fe2:	e7d3      	b.n	8007f8c <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 8007fe4:	2001      	movs	r0, #1
 8007fe6:	e7db      	b.n	8007fa0 <HAL_JPEG_GetInfo+0xa4>
 8007fe8:	08023988 	.word	0x08023988

08007fec <HAL_JPEG_Decode_DMA>:
{
 8007fec:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8007fee:	4604      	mov	r4, r0
 8007ff0:	b348      	cbz	r0, 8008046 <HAL_JPEG_Decode_DMA+0x5a>
 8007ff2:	b341      	cbz	r1, 8008046 <HAL_JPEG_Decode_DMA+0x5a>
 8007ff4:	b33b      	cbz	r3, 8008046 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 8007ff6:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 8007ffa:	2d01      	cmp	r5, #1
 8007ffc:	d028      	beq.n	8008050 <HAL_JPEG_Decode_DMA+0x64>
 8007ffe:	2501      	movs	r5, #1
 8008000:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8008004:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 8008008:	2d01      	cmp	r5, #1
 800800a:	d11e      	bne.n	800804a <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800800c:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800800e:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8008010:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8008014:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8008016:	f025 050f 	bic.w	r5, r5, #15
 800801a:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800801c:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800801e:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8008022:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8008026:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8008028:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 800802a:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 800802c:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800802e:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 8008030:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 8008032:	f7ff fdab 	bl	8007b8c <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8008036:	f7ff fde5 	bl	8007c04 <JPEG_DMA_StartProcess>
 800803a:	b128      	cbz	r0, 8008048 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800803c:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800803e:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008042:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8008046:	2001      	movs	r0, #1
}
 8008048:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 800804a:	2300      	movs	r3, #0
 800804c:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 8008050:	2002      	movs	r0, #2
 8008052:	e7f9      	b.n	8008048 <HAL_JPEG_Decode_DMA+0x5c>

08008054 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008054:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008056:	f003 030c 	and.w	r3, r3, #12
 800805a:	2b0c      	cmp	r3, #12
 800805c:	d10d      	bne.n	800807a <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800805e:	07cb      	lsls	r3, r1, #31
 8008060:	d503      	bpl.n	800806a <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8008062:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008064:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008068:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800806a:	0789      	lsls	r1, r1, #30
 800806c:	d503      	bpl.n	8008076 <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800806e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008070:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008074:	6543      	str	r3, [r0, #84]	@ 0x54
}
 8008076:	2000      	movs	r0, #0
 8008078:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800807a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800807c:	f003 030c 	and.w	r3, r3, #12
 8008080:	2b08      	cmp	r3, #8
 8008082:	d1f8      	bne.n	8008076 <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008084:	f011 0301 	ands.w	r3, r1, #1
 8008088:	d004      	beq.n	8008094 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800808a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800808c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008090:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008092:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008094:	078a      	lsls	r2, r1, #30
 8008096:	d505      	bpl.n	80080a4 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008098:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800809a:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800809e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80080a2:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80080a4:	6801      	ldr	r1, [r0, #0]
 80080a6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80080a8:	ea22 0303 	bic.w	r3, r2, r3
 80080ac:	630b      	str	r3, [r1, #48]	@ 0x30
 80080ae:	e7e2      	b.n	8008076 <HAL_JPEG_Pause+0x22>

080080b0 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 80080b0:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 80080b2:	6282      	str	r2, [r0, #40]	@ 0x28
}
 80080b4:	4770      	bx	lr

080080b6 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 80080b6:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 80080b8:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 80080ba:	4770      	bx	lr

080080bc <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 80080bc:	4770      	bx	lr

080080be <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80080be:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 80080c0:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80080c2:	6803      	ldr	r3, [r0, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	f022 0201 	bic.w	r2, r2, #1
 80080ca:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80080cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080ce:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80080d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 80080d4:	2301      	movs	r3, #1
 80080d6:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80080da:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80080dc:	f043 0304 	orr.w	r3, r3, #4
 80080e0:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 80080e2:	f7fa fac5 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 80080e6:	bd08      	pop	{r3, pc}

080080e8 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80080e8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 80080ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ec:	4604      	mov	r4, r0
 80080ee:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 80080f0:	b922      	cbnz	r2, 80080fc <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 80080f2:	2101      	movs	r1, #1
 80080f4:	f7ff ffae 	bl	8008054 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 80080f8:	2200      	movs	r2, #0
 80080fa:	e004      	b.n	8008106 <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 80080fc:	6a03      	ldr	r3, [r0, #32]
 80080fe:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008100:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008102:	d924      	bls.n	800814e <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008104:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8008106:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008108:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 800810c:	d11e      	bne.n	800814c <JPEG_ReadInputData+0x64>
 800810e:	b1ea      	cbz	r2, 800814c <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 8008110:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 8008114:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 8008116:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 800811a:	d827      	bhi.n	800816c <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800811c:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800811e:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8008120:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008122:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008124:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 8008126:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008128:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800812a:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800812e:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008132:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008134:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8008138:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800813c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008140:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8008142:	6a22      	ldr	r2, [r4, #32]
 8008144:	f102 0204 	add.w	r2, r2, #4
 8008148:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800814a:	d1e8      	bne.n	800811e <JPEG_ReadInputData+0x36>
}
 800814c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800814e:	429a      	cmp	r2, r3
 8008150:	d1d2      	bne.n	80080f8 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008152:	6a01      	ldr	r1, [r0, #32]
 8008154:	f7fa fa1e 	bl	8002594 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8008158:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800815a:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800815c:	bf84      	itt	hi
 800815e:	f023 0303 	bichi.w	r3, r3, #3
 8008162:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8008164:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 8008166:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8008168:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 800816a:	e7cc      	b.n	8008106 <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 800816c:	2a03      	cmp	r2, #3
 800816e:	d918      	bls.n	80081a2 <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008170:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 8008172:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008174:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008176:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008178:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 800817a:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800817c:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800817e:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008182:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008186:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008188:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 800818c:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008190:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008194:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8008196:	6a22      	ldr	r2, [r4, #32]
 8008198:	f102 0204 	add.w	r2, r2, #4
 800819c:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 800819e:	d1e8      	bne.n	8008172 <JPEG_ReadInputData+0x8a>
 80081a0:	e7d4      	b.n	800814c <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 80081a2:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80081a4:	6a25      	ldr	r5, [r4, #32]
 80081a6:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 80081a8:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80081aa:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 80081ac:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80081ae:	fa05 f506 	lsl.w	r5, r5, r6
 80081b2:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 80081b6:	6a25      	ldr	r5, [r4, #32]
 80081b8:	f105 0501 	add.w	r5, r5, #1
 80081bc:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80081be:	d1f1      	bne.n	80081a4 <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 80081c0:	6822      	ldr	r2, [r4, #0]
 80081c2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80081c4:	e7c2      	b.n	800814c <JPEG_ReadInputData+0x64>

080081c6 <JPEG_MDMAInCpltCallback>:
{
 80081c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80081c8:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80081ca:	6822      	ldr	r2, [r4, #0]
 80081cc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80081ce:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 80081d2:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 80081d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80081d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80081da:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 80081de:	041b      	lsls	r3, r3, #16
 80081e0:	0c1b      	lsrs	r3, r3, #16
 80081e2:	2b0c      	cmp	r3, #12
 80081e4:	d11a      	bne.n	800821c <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80081e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80081e8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80081ea:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80081ec:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80081ee:	695a      	ldr	r2, [r3, #20]
 80081f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80081f2:	f3c2 0210 	ubfx	r2, r2, #0, #17
 80081f6:	1a9b      	subs	r3, r3, r2
 80081f8:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80081fa:	6a21      	ldr	r1, [r4, #32]
 80081fc:	f7fa f9ca 	bl	8002594 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8008200:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008202:	42ab      	cmp	r3, r5
 8008204:	d327      	bcc.n	8008256 <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 8008206:	b95d      	cbnz	r5, 8008220 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008208:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 800820a:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800820c:	f043 0304 	orr.w	r3, r3, #4
 8008210:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008212:	2306      	movs	r3, #6
 8008214:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8008218:	f7fa fa2a 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 800821c:	b003      	add	sp, #12
 800821e:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8008220:	fbb3 f2f5 	udiv	r2, r3, r5
 8008224:	fb05 3212 	mls	r2, r5, r2, r3
 8008228:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800822a:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800822c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800822e:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8008230:	04db      	lsls	r3, r3, #19
 8008232:	d40a      	bmi.n	800824a <JPEG_MDMAInCpltCallback+0x84>
 8008234:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008236:	b143      	cbz	r3, 800824a <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008238:	2101      	movs	r1, #1
 800823a:	3240      	adds	r2, #64	@ 0x40
 800823c:	9100      	str	r1, [sp, #0]
 800823e:	69a1      	ldr	r1, [r4, #24]
 8008240:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008242:	f000 fd58 	bl	8008cf6 <HAL_MDMA_Start_IT>
 8008246:	2800      	cmp	r0, #0
 8008248:	d1de      	bne.n	8008208 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800824a:	6822      	ldr	r2, [r4, #0]
 800824c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800824e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008252:	6313      	str	r3, [r2, #48]	@ 0x30
 8008254:	e7e2      	b.n	800821c <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0e8      	beq.n	800822c <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800825a:	079a      	lsls	r2, r3, #30
 800825c:	d0e6      	beq.n	800822c <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800825e:	f023 0303 	bic.w	r3, r3, #3
 8008262:	3304      	adds	r3, #4
 8008264:	e7e1      	b.n	800822a <JPEG_MDMAInCpltCallback+0x64>

08008266 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008266:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800826a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800826e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 8008270:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008272:	4293      	cmp	r3, r2
 8008274:	d32a      	bcc.n	80082cc <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 8008276:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8008278:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 800827a:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800827c:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800827e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 8008280:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008282:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008284:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008286:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008288:	69e0      	ldr	r0, [r4, #28]
 800828a:	4428      	add	r0, r5
 800828c:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8008290:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008292:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008294:	69e0      	ldr	r0, [r4, #28]
 8008296:	4428      	add	r0, r5
 8008298:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800829c:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80082a0:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80082a2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80082a4:	69e0      	ldr	r0, [r4, #28]
 80082a6:	4428      	add	r0, r5
 80082a8:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 80082aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80082ac:	f103 0304 	add.w	r3, r3, #4
 80082b0:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 80082b2:	d1e1      	bne.n	8008278 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80082b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80082b6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d106      	bne.n	80082ca <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80082bc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80082be:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80082c0:	4620      	mov	r0, r4
 80082c2:	f7fa f985 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	6263      	str	r3, [r4, #36]	@ 0x24
}
 80082ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80082cc:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d9fb      	bls.n	80082ca <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80082d2:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 80082d4:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80082d6:	1a9b      	subs	r3, r3, r2
 80082d8:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 80082da:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80082dc:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 80082de:	d105      	bne.n	80082ec <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80082e0:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80082e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80082e4:	429f      	cmp	r7, r3
 80082e6:	d119      	bne.n	800831c <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80082e8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80082ea:	e7e9      	b.n	80082c0 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 80082ec:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 80082ee:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 80082f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80082f2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80082f4:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80082f6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80082f8:	69e1      	ldr	r1, [r4, #28]
 80082fa:	4429      	add	r1, r5
 80082fc:	0a1d      	lsrs	r5, r3, #8
 80082fe:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008300:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008302:	69e1      	ldr	r1, [r4, #28]
 8008304:	4429      	add	r1, r5
 8008306:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008308:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800830a:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800830c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800830e:	69e1      	ldr	r1, [r4, #28]
 8008310:	4429      	add	r1, r5
 8008312:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 8008314:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008316:	3304      	adds	r3, #4
 8008318:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800831a:	e7de      	b.n	80082da <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800831c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800831e:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8008320:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8008322:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 8008324:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 8008326:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008328:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 800832a:	d114      	bne.n	8008356 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800832c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800832e:	4620      	mov	r0, r4
 8008330:	f7fa f94e 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008334:	2300      	movs	r3, #0
 8008336:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8008338:	1d2b      	adds	r3, r5, #4
 800833a:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 800833c:	2b03      	cmp	r3, #3
 800833e:	d8c4      	bhi.n	80082ca <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008340:	00da      	lsls	r2, r3, #3
 8008342:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008344:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 8008346:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008348:	fa26 f202 	lsr.w	r2, r6, r2
 800834c:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800834e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008350:	3201      	adds	r2, #1
 8008352:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8008354:	e7f2      	b.n	800833c <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008356:	f002 0303 	and.w	r3, r2, #3
 800835a:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800835e:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008360:	00db      	lsls	r3, r3, #3
 8008362:	fa26 f303 	lsr.w	r3, r6, r3
 8008366:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 800836a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800836c:	3301      	adds	r3, #1
 800836e:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008370:	e7d9      	b.n	8008326 <JPEG_StoreOutputData+0xc0>

08008372 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008372:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008374:	f003 0303 	and.w	r3, r3, #3
 8008378:	2b02      	cmp	r3, #2
{
 800837a:	b510      	push	{r4, lr}
 800837c:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800837e:	d114      	bne.n	80083aa <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8008380:	6803      	ldr	r3, [r0, #0]
 8008382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008384:	065b      	lsls	r3, r3, #25
 8008386:	d510      	bpl.n	80083aa <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8008388:	1d01      	adds	r1, r0, #4
 800838a:	f7ff fdb7 	bl	8007efc <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800838e:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008390:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8008392:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008394:	f7fa f8c8 	bl	8002528 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8008398:	6823      	ldr	r3, [r4, #0]
 800839a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800839c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083a0:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80083a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083a8:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 80083aa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80083ac:	04d9      	lsls	r1, r3, #19
 80083ae:	d407      	bmi.n	80083c0 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083b4:	0792      	lsls	r2, r2, #30
 80083b6:	d544      	bpl.n	8008442 <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80083b8:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 80083ba:	4620      	mov	r0, r4
 80083bc:	f7ff fe94 	bl	80080e8 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80083c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80083c2:	0499      	lsls	r1, r3, #18
 80083c4:	d407      	bmi.n	80083d6 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083ca:	0712      	lsls	r2, r2, #28
 80083cc:	d53e      	bpl.n	800844c <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80083ce:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 80083d0:	4620      	mov	r0, r4
 80083d2:	f7ff ff48 	bl	8008266 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083da:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80083de:	2a20      	cmp	r2, #32
 80083e0:	d13c      	bne.n	800845c <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	f022 0201 	bic.w	r2, r2, #1
 80083e8:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80083ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083ec:	f002 020c 	and.w	r2, r2, #12
 80083f0:	2a08      	cmp	r2, #8
 80083f2:	d103      	bne.n	80083fc <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80083f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083f6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80083fa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80083fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083fe:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008402:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8008404:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008406:	b133      	cbz	r3, 8008416 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008408:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800840a:	4620      	mov	r0, r4
 800840c:	69e1      	ldr	r1, [r4, #28]
 800840e:	f7fa f8df 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008412:	2300      	movs	r3, #0
 8008414:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8008416:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008418:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800841a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800841c:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008420:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008424:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008426:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008428:	f04f 0200 	mov.w	r2, #0
 800842c:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008430:	f04f 0201 	mov.w	r2, #1
 8008434:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008438:	d10d      	bne.n	8008456 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800843a:	f7fa f91b 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800843e:	2001      	movs	r0, #1
}
 8008440:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8008442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008444:	0758      	lsls	r0, r3, #29
 8008446:	d5bb      	bpl.n	80083c0 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 8008448:	2101      	movs	r1, #1
 800844a:	e7b6      	b.n	80083ba <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800844c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800844e:	06db      	lsls	r3, r3, #27
 8008450:	d5c1      	bpl.n	80083d6 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 8008452:	2101      	movs	r1, #1
 8008454:	e7bc      	b.n	80083d0 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008456:	f7ff fe31 	bl	80080bc <HAL_JPEG_EncodeCpltCallback>
 800845a:	e7f0      	b.n	800843e <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 800845c:	2000      	movs	r0, #0
 800845e:	e7ef      	b.n	8008440 <JPEG_Process+0xce>

08008460 <JPEG_DMA_PollResidualData>:
{
 8008460:	b570      	push	{r4, r5, r6, lr}
 8008462:	4604      	mov	r4, r0
 8008464:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008466:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8008468:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800846a:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800846e:	d122      	bne.n	80084b6 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8008470:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008472:	06d0      	lsls	r0, r2, #27
 8008474:	d51f      	bpl.n	80084b6 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 8008476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8008478:	69e1      	ldr	r1, [r4, #28]
 800847a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800847c:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800847e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008480:	69e2      	ldr	r2, [r4, #28]
 8008482:	440a      	add	r2, r1
 8008484:	0a19      	lsrs	r1, r3, #8
 8008486:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8008488:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800848a:	69e2      	ldr	r2, [r4, #28]
 800848c:	440a      	add	r2, r1
 800848e:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8008490:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8008492:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8008494:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008496:	69e2      	ldr	r2, [r4, #28]
 8008498:	440a      	add	r2, r1
 800849a:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 800849c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800849e:	3304      	adds	r3, #4
 80084a0:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80084a2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80084a4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d105      	bne.n	80084b6 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80084aa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80084ac:	4620      	mov	r0, r4
 80084ae:	69e1      	ldr	r1, [r4, #28]
 80084b0:	f7fa f88e 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 80084b4:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80084b6:	3e01      	subs	r6, #1
 80084b8:	d1d5      	bne.n	8008466 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80084ba:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 80084bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80084be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80084c0:	06c9      	lsls	r1, r1, #27
 80084c2:	d501      	bpl.n	80084c8 <JPEG_DMA_PollResidualData+0x68>
 80084c4:	0492      	lsls	r2, r2, #18
 80084c6:	d420      	bmi.n	800850a <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	f022 0201 	bic.w	r2, r2, #1
 80084ce:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 80084d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80084d2:	b133      	cbz	r3, 80084e2 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80084d4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80084d6:	4620      	mov	r0, r4
 80084d8:	69e1      	ldr	r1, [r4, #28]
 80084da:	f7fa f879 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 80084e2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80084e4:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80084e6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80084e8:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80084ec:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80084f0:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80084f2:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80084fc:	f04f 0201 	mov.w	r2, #1
 8008500:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008504:	d102      	bne.n	800850c <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008506:	f7fa f8b5 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
}
 800850a:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800850c:	f7ff fdd6 	bl	80080bc <HAL_JPEG_EncodeCpltCallback>
}
 8008510:	e7fb      	b.n	800850a <JPEG_DMA_PollResidualData+0xaa>

08008512 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8008512:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008514:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 8008518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800851a:	4604      	mov	r4, r0
 800851c:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800851e:	d014      	beq.n	800854a <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008520:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008522:	f003 030c 	and.w	r3, r3, #12
 8008526:	2b0c      	cmp	r3, #12
 8008528:	d146      	bne.n	80085b8 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800852a:	07cb      	lsls	r3, r1, #31
 800852c:	d520      	bpl.n	8008570 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800852e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008530:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008534:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008536:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8008538:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 800853a:	b941      	cbnz	r1, 800854e <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800853c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800853e:	f043 0304 	orr.w	r3, r3, #4
 8008542:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008544:	2306      	movs	r3, #6
 8008546:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800854a:	2001      	movs	r0, #1
 800854c:	e01d      	b.n	800858a <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800854e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008550:	fbb3 f2f1 	udiv	r2, r3, r1
 8008554:	fb01 3212 	mls	r2, r1, r2, r3
 8008558:	1a9b      	subs	r3, r3, r2
 800855a:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 800855c:	b143      	cbz	r3, 8008570 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800855e:	6822      	ldr	r2, [r4, #0]
 8008560:	2101      	movs	r1, #1
 8008562:	3240      	adds	r2, #64	@ 0x40
 8008564:	9100      	str	r1, [sp, #0]
 8008566:	69a1      	ldr	r1, [r4, #24]
 8008568:	f000 fbc5 	bl	8008cf6 <HAL_MDMA_Start_IT>
 800856c:	2800      	cmp	r0, #0
 800856e:	d1e5      	bne.n	800853c <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008570:	07a8      	lsls	r0, r5, #30
 8008572:	d509      	bpl.n	8008588 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008574:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008576:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800857a:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800857c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800857e:	0419      	lsls	r1, r3, #16
 8008580:	d505      	bpl.n	800858e <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 8008582:	4620      	mov	r0, r4
 8008584:	f7ff ff6c 	bl	8008460 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 8008588:	2000      	movs	r0, #0
}
 800858a:	b003      	add	sp, #12
 800858c:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800858e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008590:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 8008592:	2900      	cmp	r1, #0
 8008594:	d0d2      	beq.n	800853c <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8008596:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008598:	fbb3 f2f1 	udiv	r2, r3, r1
 800859c:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80085a0:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 80085a2:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80085a4:	2201      	movs	r2, #1
 80085a6:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 80085a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80085aa:	9200      	str	r2, [sp, #0]
 80085ac:	69e2      	ldr	r2, [r4, #28]
 80085ae:	f000 fba2 	bl	8008cf6 <HAL_MDMA_Start_IT>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d0e8      	beq.n	8008588 <HAL_JPEG_Resume+0x76>
 80085b6:	e7c1      	b.n	800853c <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80085b8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80085ba:	f003 030c 	and.w	r3, r3, #12
 80085be:	2b08      	cmp	r3, #8
 80085c0:	d1e2      	bne.n	8008588 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80085c2:	f011 0301 	ands.w	r3, r1, #1
 80085c6:	d004      	beq.n	80085d2 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 80085c8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80085ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085ce:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80085d0:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80085d2:	07aa      	lsls	r2, r5, #30
 80085d4:	d505      	bpl.n	80085e2 <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80085d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80085d8:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80085dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085e0:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 80085e2:	6821      	ldr	r1, [r4, #0]
 80085e4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80085e6:	4313      	orrs	r3, r2
 80085e8:	630b      	str	r3, [r1, #48]	@ 0x30
 80085ea:	e7cd      	b.n	8008588 <HAL_JPEG_Resume+0x76>

080085ec <JPEG_DMA_EndProcess>:
{
 80085ec:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80085ee:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 80085f0:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80085f2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	f3c3 0310 	ubfx	r3, r3, #0, #17
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8008600:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008602:	429a      	cmp	r2, r3
 8008604:	d105      	bne.n	8008612 <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008606:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8008608:	69c1      	ldr	r1, [r0, #28]
 800860a:	f7f9 ffe1 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800860e:	2300      	movs	r3, #0
 8008610:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 8008616:	f015 0510 	ands.w	r5, r5, #16
 800861a:	d124      	bne.n	8008666 <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 800861c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800861e:	b12b      	cbz	r3, 800862c <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008620:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008622:	4620      	mov	r0, r4
 8008624:	69e1      	ldr	r1, [r4, #28]
 8008626:	f7f9 ffd3 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800862a:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800862c:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800862e:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008630:	6813      	ldr	r3, [r2, #0]
 8008632:	f023 0301 	bic.w	r3, r3, #1
 8008636:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8008638:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800863a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800863c:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008640:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008644:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008646:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008648:	f04f 0200 	mov.w	r2, #0
 800864c:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008650:	f04f 0201 	mov.w	r2, #1
 8008654:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008658:	d102      	bne.n	8008660 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800865a:	f7fa f80b 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
}
 800865e:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008660:	f7ff fd2c 	bl	80080bc <HAL_JPEG_EncodeCpltCallback>
 8008664:	e7fb      	b.n	800865e <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008666:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008668:	049b      	lsls	r3, r3, #18
 800866a:	d4f8      	bmi.n	800865e <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 800866c:	4620      	mov	r0, r4
}
 800866e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 8008672:	f7ff bef5 	b.w	8008460 <JPEG_DMA_PollResidualData>

08008676 <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008676:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8008678:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800867a:	041b      	lsls	r3, r3, #16
 800867c:	d501      	bpl.n	8008682 <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800867e:	f7ff bfb5 	b.w	80085ec <JPEG_DMA_EndProcess>
}
 8008682:	4770      	bx	lr

08008684 <JPEG_MDMAOutCpltCallback>:
{
 8008684:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008686:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800868c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008690:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8008692:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008694:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 8008698:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800869c:	0412      	lsls	r2, r2, #16
 800869e:	0c12      	lsrs	r2, r2, #16
 80086a0:	2a0c      	cmp	r2, #12
 80086a2:	d125      	bne.n	80086f0 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 80086a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086a6:	069a      	lsls	r2, r3, #26
 80086a8:	d424      	bmi.n	80086f4 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80086aa:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80086ac:	4620      	mov	r0, r4
 80086ae:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80086b0:	695a      	ldr	r2, [r3, #20]
 80086b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80086b4:	f3c2 0210 	ubfx	r2, r2, #0, #17
 80086b8:	1a9b      	subs	r3, r3, r2
 80086ba:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80086bc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80086be:	f7f9 ff87 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80086c2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80086c4:	049b      	lsls	r3, r3, #18
 80086c6:	d415      	bmi.n	80086f4 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80086c8:	6821      	ldr	r1, [r4, #0]
 80086ca:	2301      	movs	r3, #1
 80086cc:	3144      	adds	r1, #68	@ 0x44
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80086d2:	69e2      	ldr	r2, [r4, #28]
 80086d4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80086d6:	f000 fb0e 	bl	8008cf6 <HAL_MDMA_Start_IT>
 80086da:	b158      	cbz	r0, 80086f4 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80086dc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 80086de:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80086e0:	f043 0304 	orr.w	r3, r3, #4
 80086e4:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80086e6:	2306      	movs	r3, #6
 80086e8:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 80086ec:	f7f9 ffc0 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 80086f0:	b002      	add	sp, #8
 80086f2:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80086f4:	6822      	ldr	r2, [r4, #0]
 80086f6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80086f8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80086fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80086fe:	e7f7      	b.n	80086f0 <JPEG_MDMAOutCpltCallback+0x6c>

08008700 <HAL_JPEG_IRQHandler>:
{
 8008700:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 8008702:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 8008706:	4604      	mov	r4, r0
  switch (hjpeg->State)
 8008708:	3b03      	subs	r3, #3
 800870a:	2b01      	cmp	r3, #1
 800870c:	d850      	bhi.n	80087b0 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800870e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008710:	f003 030c 	and.w	r3, r3, #12
 8008714:	2b08      	cmp	r3, #8
 8008716:	d103      	bne.n	8008720 <HAL_JPEG_IRQHandler+0x20>
}
 8008718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800871c:	f7ff be29 	b.w	8008372 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008720:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008722:	f003 030c 	and.w	r3, r3, #12
 8008726:	2b0c      	cmp	r3, #12
 8008728:	d142      	bne.n	80087b0 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800872a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800872c:	f003 0303 	and.w	r3, r3, #3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d114      	bne.n	800875e <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8008734:	6803      	ldr	r3, [r0, #0]
 8008736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008738:	0659      	lsls	r1, r3, #25
 800873a:	d510      	bpl.n	800875e <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800873c:	1d01      	adds	r1, r0, #4
 800873e:	f7ff fbdd 	bl	8007efc <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8008742:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008744:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8008746:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008748:	f7f9 feee 	bl	8002528 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008750:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008754:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8008756:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008758:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800875c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008762:	0692      	lsls	r2, r2, #26
 8008764:	d524      	bpl.n	80087b0 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8008766:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8008768:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800876a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800876e:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	f022 0201 	bic.w	r2, r2, #1
 8008776:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008778:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800877a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800877e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008782:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008786:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8008788:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800878c:	2b02      	cmp	r3, #2
 800878e:	d101      	bne.n	8008794 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8008790:	f000 fafa 	bl	8008d88 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8008794:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008796:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800879a:	2b02      	cmp	r3, #2
 800879c:	d103      	bne.n	80087a6 <HAL_JPEG_IRQHandler+0xa6>
}
 800879e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 80087a2:	f000 baf1 	b.w	8008d88 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 80087a6:	4620      	mov	r0, r4
}
 80087a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 80087ac:	f7ff bf1e 	b.w	80085ec <JPEG_DMA_EndProcess>
}
 80087b0:	bd10      	pop	{r4, pc}

080087b2 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80087b2:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80087b4:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80087b6:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80087ba:	3284      	adds	r2, #132	@ 0x84
 80087bc:	1883      	adds	r3, r0, r2
{
 80087be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80087c2:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80087c4:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80087c8:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80087ca:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80087ce:	684c      	ldr	r4, [r1, #4]
 80087d0:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80087d4:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80087d8:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80087dc:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80087de:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80087e0:	68c5      	ldr	r5, [r0, #12]
 80087e2:	f3c5 450b 	ubfx	r5, r5, #16, #12
 80087e6:	443d      	add	r5, r7
 80087e8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80087ec:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80087ee:	68c6      	ldr	r6, [r0, #12]
 80087f0:	68cd      	ldr	r5, [r1, #12]
 80087f2:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80087f6:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80087f8:	689d      	ldr	r5, [r3, #8]
 80087fa:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 80087fe:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008800:	688d      	ldr	r5, [r1, #8]
 8008802:	68c7      	ldr	r7, [r0, #12]
 8008804:	3501      	adds	r5, #1
 8008806:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800880a:	443d      	add	r5, r7
 800880c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008810:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008812:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008814:	691d      	ldr	r5, [r3, #16]
 8008816:	f025 0507 	bic.w	r5, r5, #7
 800881a:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800881c:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800881e:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008820:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008824:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008828:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800882c:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8008830:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8008834:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8008838:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800883c:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800883e:	695d      	ldr	r5, [r3, #20]
 8008840:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8008844:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008846:	694d      	ldr	r5, [r1, #20]
 8008848:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800884a:	69dd      	ldr	r5, [r3, #28]
 800884c:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8008850:	f025 0507 	bic.w	r5, r5, #7
 8008854:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008856:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800885a:	433d      	orrs	r5, r7
 800885c:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800885e:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008860:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008862:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008866:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008868:	b31e      	cbz	r6, 80088b2 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800886a:	2e01      	cmp	r6, #1
 800886c:	d023      	beq.n	80088b6 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800886e:	1eb5      	subs	r5, r6, #2
 8008870:	2d02      	cmp	r5, #2
 8008872:	d922      	bls.n	80088ba <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8008874:	2e07      	cmp	r6, #7
 8008876:	bf14      	ite	ne
 8008878:	2501      	movne	r5, #1
 800887a:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800887c:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800887e:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008882:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008886:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008888:	62de      	str	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800888a:	3407      	adds	r4, #7
 800888c:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800888e:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008890:	436e      	muls	r6, r5
 8008892:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8008896:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008898:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800889a:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800889e:	f024 0407 	bic.w	r4, r4, #7
 80088a2:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80088a4:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80088a6:	5883      	ldr	r3, [r0, r2]
 80088a8:	f043 0301 	orr.w	r3, r3, #1
 80088ac:	5083      	str	r3, [r0, r2]
}
 80088ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80088b2:	2504      	movs	r5, #4
 80088b4:	e7e2      	b.n	800887c <LTDC_SetConfig+0xca>
    tmp = 3U;
 80088b6:	2503      	movs	r5, #3
 80088b8:	e7e0      	b.n	800887c <LTDC_SetConfig+0xca>
    tmp = 2U;
 80088ba:	2502      	movs	r5, #2
 80088bc:	e7de      	b.n	800887c <LTDC_SetConfig+0xca>
	...

080088c0 <HAL_LTDC_Init>:
{
 80088c0:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80088c2:	4604      	mov	r4, r0
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d063      	beq.n	8008990 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80088c8:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 80088cc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80088d0:	b91b      	cbnz	r3, 80088da <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80088d2:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 80088d6:	f7f8 fc61 	bl	800119c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80088da:	2302      	movs	r3, #2
 80088dc:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	699a      	ldr	r2, [r3, #24]
 80088e4:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80088e8:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088ea:	6999      	ldr	r1, [r3, #24]
 80088ec:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80088f0:	4302      	orrs	r2, r0
 80088f2:	68e0      	ldr	r0, [r4, #12]
 80088f4:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80088f6:	6920      	ldr	r0, [r4, #16]
 80088f8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80088fa:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80088fc:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80088fe:	4925      	ldr	r1, [pc, #148]	@ (8008994 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008900:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008902:	689a      	ldr	r2, [r3, #8]
 8008904:	400a      	ands	r2, r1
 8008906:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008908:	689a      	ldr	r2, [r3, #8]
 800890a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800890e:	69a0      	ldr	r0, [r4, #24]
 8008910:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008912:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008914:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008916:	68da      	ldr	r2, [r3, #12]
 8008918:	400a      	ands	r2, r1
 800891a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800891c:	68da      	ldr	r2, [r3, #12]
 800891e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008922:	6a20      	ldr	r0, [r4, #32]
 8008924:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008926:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008928:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800892a:	691a      	ldr	r2, [r3, #16]
 800892c:	400a      	ands	r2, r1
 800892e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008930:	691a      	ldr	r2, [r3, #16]
 8008932:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008936:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008938:	4302      	orrs	r2, r0
 800893a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800893c:	695a      	ldr	r2, [r3, #20]
 800893e:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008940:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008942:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008944:	695a      	ldr	r2, [r3, #20]
 8008946:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800894a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800894c:	430a      	orrs	r2, r1
 800894e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008952:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008956:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800895a:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800895e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008960:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8008962:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8008966:	432a      	orrs	r2, r5
 8008968:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800896c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800896e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008972:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008976:	f042 0206 	orr.w	r2, r2, #6
 800897a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800897c:	699a      	ldr	r2, [r3, #24]
 800897e:	f042 0201 	orr.w	r2, r2, #1
 8008982:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8008984:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008986:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800898a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800898e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008990:	2001      	movs	r0, #1
 8008992:	e7fc      	b.n	800898e <HAL_LTDC_Init+0xce>
 8008994:	f000f800 	.word	0xf000f800

08008998 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8008998:	4770      	bx	lr

0800899a <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800899a:	4770      	bx	lr

0800899c <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800899c:	4770      	bx	lr

0800899e <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800899e:	6803      	ldr	r3, [r0, #0]
{
 80089a0:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80089a2:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 80089a4:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80089a6:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80089a8:	0772      	lsls	r2, r6, #29
 80089aa:	d514      	bpl.n	80089d6 <HAL_LTDC_IRQHandler+0x38>
 80089ac:	0769      	lsls	r1, r5, #29
 80089ae:	d512      	bpl.n	80089d6 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80089b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089b2:	f022 0204 	bic.w	r2, r2, #4
 80089b6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80089b8:	2204      	movs	r2, #4
 80089ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80089bc:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80089c0:	f043 0301 	orr.w	r3, r3, #1
 80089c4:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 80089c8:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80089ca:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80089ce:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80089d2:	f7ff ffe1 	bl	8008998 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80089d6:	07b2      	lsls	r2, r6, #30
 80089d8:	d516      	bpl.n	8008a08 <HAL_LTDC_IRQHandler+0x6a>
 80089da:	07ab      	lsls	r3, r5, #30
 80089dc:	d514      	bpl.n	8008a08 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80089de:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80089e0:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80089e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089e4:	f022 0202 	bic.w	r2, r2, #2
 80089e8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80089ea:	2202      	movs	r2, #2
 80089ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80089ee:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80089f2:	4313      	orrs	r3, r2
 80089f4:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80089f8:	2304      	movs	r3, #4
 80089fa:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80089fe:	2300      	movs	r3, #0
 8008a00:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008a04:	f7ff ffc8 	bl	8008998 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008a08:	07f0      	lsls	r0, r6, #31
 8008a0a:	d510      	bpl.n	8008a2e <HAL_LTDC_IRQHandler+0x90>
 8008a0c:	07e9      	lsls	r1, r5, #31
 8008a0e:	d50e      	bpl.n	8008a2e <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008a10:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8008a12:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a16:	f022 0201 	bic.w	r2, r2, #1
 8008a1a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8008a20:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8008a22:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008a26:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8008a2a:	f7ff ffb6 	bl	800899a <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008a2e:	0732      	lsls	r2, r6, #28
 8008a30:	d511      	bpl.n	8008a56 <HAL_LTDC_IRQHandler+0xb8>
 8008a32:	072b      	lsls	r3, r5, #28
 8008a34:	d50f      	bpl.n	8008a56 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008a36:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008a38:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a3c:	f022 0208 	bic.w	r2, r2, #8
 8008a40:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008a42:	2208      	movs	r2, #8
 8008a44:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8008a46:	2301      	movs	r3, #1
 8008a48:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008a52:	f7ff ffa3 	bl	800899c <HAL_LTDC_ReloadEventCallback>
}
 8008a56:	bd70      	pop	{r4, r5, r6, pc}

08008a58 <HAL_LTDC_ConfigLayer>:
{
 8008a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8008a5c:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 8008a60:	4606      	mov	r6, r0
 8008a62:	460f      	mov	r7, r1
 8008a64:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	f04f 0002 	mov.w	r0, #2
 8008a6c:	d01f      	beq.n	8008aae <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a6e:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 8008a70:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a74:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008a76:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a7a:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8008a7e:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a82:	3438      	adds	r4, #56	@ 0x38
 8008a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a90:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008a92:	4630      	mov	r0, r6
 8008a94:	4662      	mov	r2, ip
 8008a96:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a98:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008a9a:	f7ff fe8a 	bl	80087b2 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008a9e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8008aa0:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008aa2:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008aa6:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8008aaa:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8008aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008ab4 <HAL_LTDC_SetPitch>:
{
 8008ab4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8008ab6:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	f04f 0302 	mov.w	r3, #2
 8008ac0:	d02c      	beq.n	8008b1c <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8008ac2:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008ac4:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8008ac8:	fb04 0402 	mla	r4, r4, r2, r0
 8008acc:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008ace:	b33c      	cbz	r4, 8008b20 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008ad0:	2c01      	cmp	r4, #1
 8008ad2:	d027      	beq.n	8008b24 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008ad4:	1ea5      	subs	r5, r4, #2
 8008ad6:	429d      	cmp	r5, r3
 8008ad8:	d902      	bls.n	8008ae0 <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 8008ada:	2c07      	cmp	r4, #7
 8008adc:	bf18      	it	ne
 8008ade:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008ae0:	01d2      	lsls	r2, r2, #7
 8008ae2:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8008ae4:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008ae6:	3284      	adds	r2, #132	@ 0x84
 8008ae8:	4422      	add	r2, r4
 8008aea:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 8008aec:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 8008af0:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 8008af4:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8008af6:	4c0c      	ldr	r4, [pc, #48]	@ (8008b28 <HAL_LTDC_SetPitch+0x74>)
 8008af8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008afa:	f045 0501 	orr.w	r5, r5, #1
 8008afe:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8008b00:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8008b02:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8008b06:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8008b08:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008b0a:	f043 0301 	orr.w	r3, r3, #1
 8008b0e:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8008b10:	2301      	movs	r3, #1
 8008b12:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8008b16:	2300      	movs	r3, #0
 8008b18:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8008b20:	2304      	movs	r3, #4
 8008b22:	e7dd      	b.n	8008ae0 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e7db      	b.n	8008ae0 <HAL_LTDC_SetPitch+0x2c>
 8008b28:	50001000 	.word	0x50001000

08008b2c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8008b2c:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008b2e:	6804      	ldr	r4, [r0, #0]
 8008b30:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008b34:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008b38:	6965      	ldr	r5, [r4, #20]
 8008b3a:	ea4f 4555 	mov.w	r5, r5, lsr #17
 8008b3e:	ea4f 4545 	mov.w	r5, r5, lsl #17
 8008b42:	ea45 0503 	orr.w	r5, r5, r3
 8008b46:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8008b48:	9d03      	ldr	r5, [sp, #12]
 8008b4a:	6963      	ldr	r3, [r4, #20]
 8008b4c:	f105 35ff 	add.w	r5, r5, #4294967295
 8008b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b54:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8008b58:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8008b5a:	f04f 031f 	mov.w	r3, #31
 8008b5e:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 8008b60:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 8008b62:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8008b64:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008b66:	bf0c      	ite	eq
 8008b68:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8008b6c:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008b70:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8008b74:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8008b76:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008b78:	bf0c      	ite	eq
 8008b7a:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8008b7e:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 8008b82:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8008b84:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8008b86:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8008b88:	bd30      	pop	{r4, r5, pc}

08008b8a <HAL_MDMA_Init>:
{
 8008b8a:	b538      	push	{r3, r4, r5, lr}
 8008b8c:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008b8e:	f7fd fb61 	bl	8006254 <HAL_GetTick>
 8008b92:	4605      	mov	r5, r0
  if(hmdma == NULL)
 8008b94:	2c00      	cmp	r4, #0
 8008b96:	d061      	beq.n	8008c5c <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 8008b98:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 8008b9a:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8008b9c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8008ba6:	68d3      	ldr	r3, [r2, #12]
 8008ba8:	f023 0301 	bic.w	r3, r3, #1
 8008bac:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	68da      	ldr	r2, [r3, #12]
 8008bb2:	07d2      	lsls	r2, r2, #31
 8008bb4:	d448      	bmi.n	8008c48 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008bb6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008bbe:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	69e1      	ldr	r1, [r4, #28]
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	6a21      	ldr	r1, [r4, #32]
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008bd2:	430a      	orrs	r2, r1
 8008bd4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008bd6:	430a      	orrs	r2, r1
 8008bd8:	68a1      	ldr	r1, [r4, #8]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8008bde:	3901      	subs	r1, #1
 8008be0:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008be4:	6861      	ldr	r1, [r4, #4]
 8008be6:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008bea:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008bec:	d103      	bne.n	8008bf6 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008bee:	691a      	ldr	r2, [r3, #16]
 8008bf0:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8008bf4:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008bfa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008bfc:	2a00      	cmp	r2, #0
 8008bfe:	da04      	bge.n	8008c0a <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008c00:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008c02:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008c04:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8008c08:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8008c0a:	b292      	uxth	r2, r2
 8008c0c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008c0e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008c10:	2a00      	cmp	r2, #0
 8008c12:	da25      	bge.n	8008c60 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008c14:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008c16:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008c18:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 8008c1c:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008c1e:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008c20:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008c24:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008c28:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008c2a:	f04f 0200 	mov.w	r2, #0
 8008c2e:	d019      	beq.n	8008c64 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008c30:	b2c9      	uxtb	r1, r1
 8008c32:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8008c34:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 8008c36:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008c38:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 8008c3a:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 8008c3c:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8008c3e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8008c42:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 8008c46:	e00a      	b.n	8008c5e <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8008c48:	f7fd fb04 	bl	8006254 <HAL_GetTick>
 8008c4c:	1b40      	subs	r0, r0, r5
 8008c4e:	2805      	cmp	r0, #5
 8008c50:	d9ad      	bls.n	8008bae <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008c52:	2340      	movs	r3, #64	@ 0x40
 8008c54:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008c56:	2303      	movs	r3, #3
 8008c58:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8008c5c:	2001      	movs	r0, #1
}
 8008c5e:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008c60:	6a18      	ldr	r0, [r3, #32]
 8008c62:	e7dd      	b.n	8008c20 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8008c64:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c66:	e7e5      	b.n	8008c34 <HAL_MDMA_Init+0xaa>

08008c68 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8008c68:	b1d8      	cbz	r0, 8008ca2 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 8008c6a:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008c6c:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 8008c6e:	68d3      	ldr	r3, [r2, #12]
 8008c70:	f023 0301 	bic.w	r3, r3, #1
 8008c74:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8008c7a:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8008c7c:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8008c7e:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8008c80:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8008c82:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8008c84:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8008c86:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8008c88:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8008c8a:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008c8c:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008c8e:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8008c90:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8008c92:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 8008c96:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 8008c9a:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	4770      	bx	lr
    return HAL_ERROR;
 8008ca2:	2001      	movs	r0, #1
}
 8008ca4:	4770      	bx	lr

08008ca6 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 8008ca6:	4603      	mov	r3, r0
{
 8008ca8:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 8008caa:	b300      	cbz	r0, 8008cee <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 8008cac:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8008cb0:	2801      	cmp	r0, #1
 8008cb2:	d01e      	beq.n	8008cf2 <HAL_MDMA_ConfigPostRequestMask+0x4c>
 8008cb4:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008cb6:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 8008cba:	42a5      	cmp	r5, r4
 8008cbc:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 8008cbe:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008cc2:	d112      	bne.n	8008cea <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8008cc4:	681c      	ldr	r4, [r3, #0]
 8008cc6:	6925      	ldr	r5, [r4, #16]
 8008cc8:	006d      	lsls	r5, r5, #1
 8008cca:	d407      	bmi.n	8008cdc <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 8008ccc:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 8008cce:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008cd0:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 8008cd2:	b939      	cbnz	r1, 8008ce4 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008cd4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 8008cd8:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008cda:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008ce2:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8008ce4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008ce8:	e7f6      	b.n	8008cd8 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 8008cea:	4620      	mov	r0, r4
 8008cec:	e7f6      	b.n	8008cdc <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 8008cee:	2001      	movs	r0, #1
 8008cf0:	e7f7      	b.n	8008ce2 <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 8008cf2:	2002      	movs	r0, #2
 8008cf4:	e7f5      	b.n	8008ce2 <HAL_MDMA_ConfigPostRequestMask+0x3c>

08008cf6 <HAL_MDMA_Start_IT>:
{
 8008cf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d042      	beq.n	8008d84 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 8008cfe:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 8008d02:	2d01      	cmp	r5, #1
 8008d04:	d03c      	beq.n	8008d80 <HAL_MDMA_Start_IT+0x8a>
 8008d06:	2501      	movs	r5, #1
 8008d08:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008d0c:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 8008d10:	2d01      	cmp	r5, #1
 8008d12:	f04f 0500 	mov.w	r5, #0
 8008d16:	d131      	bne.n	8008d7c <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8008d18:	2602      	movs	r6, #2
 8008d1a:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008d1e:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8008d20:	6805      	ldr	r5, [r0, #0]
 8008d22:	68ee      	ldr	r6, [r5, #12]
 8008d24:	f026 0601 	bic.w	r6, r6, #1
 8008d28:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8008d2a:	9e06      	ldr	r6, [sp, #24]
 8008d2c:	9600      	str	r6, [sp, #0]
 8008d2e:	f7ff fefd 	bl	8008b2c <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8008d32:	68eb      	ldr	r3, [r5, #12]
 8008d34:	f043 0306 	orr.w	r3, r3, #6
 8008d38:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 8008d3a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8008d3c:	b11b      	cbz	r3, 8008d46 <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8008d3e:	68eb      	ldr	r3, [r5, #12]
 8008d40:	f043 0310 	orr.w	r3, r3, #16
 8008d44:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008d46:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008d48:	b11b      	cbz	r3, 8008d52 <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8008d4a:	68eb      	ldr	r3, [r5, #12]
 8008d4c:	f043 0308 	orr.w	r3, r3, #8
 8008d50:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 8008d52:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008d54:	b11b      	cbz	r3, 8008d5e <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8008d56:	68eb      	ldr	r3, [r5, #12]
 8008d58:	f043 0320 	orr.w	r3, r3, #32
 8008d5c:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 8008d5e:	68eb      	ldr	r3, [r5, #12]
 8008d60:	f043 0301 	orr.w	r3, r3, #1
 8008d64:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008d66:	6863      	ldr	r3, [r4, #4]
 8008d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d6c:	d103      	bne.n	8008d76 <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8008d6e:	68eb      	ldr	r3, [r5, #12]
 8008d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d74:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8008d76:	2000      	movs	r0, #0
}
 8008d78:	b002      	add	sp, #8
 8008d7a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 8008d7c:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 8008d80:	2002      	movs	r0, #2
 8008d82:	e7f9      	b.n	8008d78 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 8008d84:	2001      	movs	r0, #1
 8008d86:	e7f7      	b.n	8008d78 <HAL_MDMA_Start_IT+0x82>

08008d88 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 8008d88:	b128      	cbz	r0, 8008d96 <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8008d8a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d003      	beq.n	8008d9a <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8008d92:	2380      	movs	r3, #128	@ 0x80
 8008d94:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 8008d96:	2001      	movs	r0, #1
 8008d98:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 8008d9a:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008d9c:	2304      	movs	r3, #4
 8008d9e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 8008da2:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 8008da4:	68d3      	ldr	r3, [r2, #12]
 8008da6:	f023 0301 	bic.w	r3, r3, #1
 8008daa:	60d3      	str	r3, [r2, #12]
}
 8008dac:	4770      	bx	lr
	...

08008db0 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 8008db0:	2300      	movs	r3, #0
{
 8008db2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 8008db4:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008db6:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 8008dba:	4b58      	ldr	r3, [pc, #352]	@ (8008f1c <HAL_MDMA_IRQHandler+0x16c>)
{
 8008dbc:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008dbe:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8008dc0:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008dc2:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008dc4:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008dc6:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 8008dca:	3a40      	subs	r2, #64	@ 0x40
 8008dcc:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8008dd0:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008dd4:	4202      	tst	r2, r0
 8008dd6:	f000 809e 	beq.w	8008f16 <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	07d1      	lsls	r1, r2, #31
 8008dde:	d529      	bpl.n	8008e34 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8008de0:	68da      	ldr	r2, [r3, #12]
 8008de2:	0792      	lsls	r2, r2, #30
 8008de4:	d526      	bpl.n	8008e34 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8008de6:	68da      	ldr	r2, [r3, #12]
 8008de8:	f022 0202 	bic.w	r2, r2, #2
 8008dec:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 8008dee:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008df0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8008df2:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008df4:	bf54      	ite	pl
 8008df6:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8008dfa:	f041 0102 	orrmi.w	r1, r1, #2
 8008dfe:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8008e00:	0591      	lsls	r1, r2, #22
 8008e02:	d503      	bpl.n	8008e0c <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8008e04:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008e06:	f041 0104 	orr.w	r1, r1, #4
 8008e0a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8008e0c:	05d0      	lsls	r0, r2, #23
 8008e0e:	d503      	bpl.n	8008e18 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8008e10:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008e12:	f041 0108 	orr.w	r1, r1, #8
 8008e16:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8008e18:	0551      	lsls	r1, r2, #21
 8008e1a:	d503      	bpl.n	8008e24 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8008e1c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008e1e:	f041 0110 	orr.w	r1, r1, #16
 8008e22:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8008e24:	0512      	lsls	r2, r2, #20
 8008e26:	d503      	bpl.n	8008e30 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8008e28:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8008e2a:	f042 0220 	orr.w	r2, r2, #32
 8008e2e:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8008e30:	2201      	movs	r2, #1
 8008e32:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	06d0      	lsls	r0, r2, #27
 8008e38:	d508      	bpl.n	8008e4c <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8008e3a:	68da      	ldr	r2, [r3, #12]
 8008e3c:	0691      	lsls	r1, r2, #26
 8008e3e:	d505      	bpl.n	8008e4c <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8008e40:	2210      	movs	r2, #16
 8008e42:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8008e44:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008e46:	b10b      	cbz	r3, 8008e4c <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 8008e48:	4620      	mov	r0, r4
 8008e4a:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8008e4c:	6823      	ldr	r3, [r4, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	0712      	lsls	r2, r2, #28
 8008e52:	d508      	bpl.n	8008e66 <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8008e54:	68da      	ldr	r2, [r3, #12]
 8008e56:	06d0      	lsls	r0, r2, #27
 8008e58:	d505      	bpl.n	8008e66 <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8008e5a:	2208      	movs	r2, #8
 8008e5c:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 8008e5e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008e60:	b10b      	cbz	r3, 8008e66 <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 8008e62:	4620      	mov	r0, r4
 8008e64:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	0751      	lsls	r1, r2, #29
 8008e6c:	d508      	bpl.n	8008e80 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8008e6e:	68da      	ldr	r2, [r3, #12]
 8008e70:	0712      	lsls	r2, r2, #28
 8008e72:	d505      	bpl.n	8008e80 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8008e74:	2204      	movs	r2, #4
 8008e76:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008e78:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008e7a:	b10b      	cbz	r3, 8008e80 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	0790      	lsls	r0, r2, #30
 8008e86:	d524      	bpl.n	8008ed2 <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8008e88:	68da      	ldr	r2, [r3, #12]
 8008e8a:	0751      	lsls	r1, r2, #29
 8008e8c:	d521      	bpl.n	8008ed2 <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8008e8e:	68da      	ldr	r2, [r3, #12]
 8008e90:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8008e94:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8008e96:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8008e9a:	2a04      	cmp	r2, #4
 8008e9c:	f04f 0200 	mov.w	r2, #0
 8008ea0:	d10c      	bne.n	8008ebc <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 8008ea2:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 8008ea4:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8008ea8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8008eac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d031      	beq.n	8008f16 <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 8008eb2:	4620      	mov	r0, r4
}
 8008eb4:	b003      	add	sp, #12
 8008eb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 8008eba:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8008ebc:	2102      	movs	r1, #2
 8008ebe:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 8008ec0:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 8008ec2:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8008ec6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8008eca:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008ecc:	b10b      	cbz	r3, 8008ed2 <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 8008ece:	4620      	mov	r0, r4
 8008ed0:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8008ed2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8008ed4:	b1fb      	cbz	r3, 8008f16 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 8008ed6:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8008eda:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008ede:	2304      	movs	r3, #4
 8008ee0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	68da      	ldr	r2, [r3, #12]
 8008ee8:	f022 0201 	bic.w	r2, r2, #1
 8008eec:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 8008eee:	9a01      	ldr	r2, [sp, #4]
 8008ef0:	3201      	adds	r2, #1
 8008ef2:	42aa      	cmp	r2, r5
 8008ef4:	9201      	str	r2, [sp, #4]
 8008ef6:	d802      	bhi.n	8008efe <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8008ef8:	68da      	ldr	r2, [r3, #12]
 8008efa:	07d2      	lsls	r2, r2, #31
 8008efc:	d4f7      	bmi.n	8008eee <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 8008efe:	2200      	movs	r2, #0
 8008f00:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008f08:	bf4c      	ite	mi
 8008f0a:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8008f0c:	2301      	movpl	r3, #1
 8008f0e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8008f12:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008f14:	e7cb      	b.n	8008eae <HAL_MDMA_IRQHandler+0xfe>
}
 8008f16:	b003      	add	sp, #12
 8008f18:	bd30      	pop	{r4, r5, pc}
 8008f1a:	bf00      	nop
 8008f1c:	2400006c 	.word	0x2400006c

08008f20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008f20:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008f22:	4d1c      	ldr	r5, [pc, #112]	@ (8008f94 <HAL_PWREx_ConfigSupply+0x74>)
{
 8008f24:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008f26:	68eb      	ldr	r3, [r5, #12]
 8008f28:	f003 0307 	and.w	r3, r3, #7
 8008f2c:	2b06      	cmp	r3, #6
 8008f2e:	d006      	beq.n	8008f3e <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008f30:	68e8      	ldr	r0, [r5, #12]
 8008f32:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8008f36:	1b00      	subs	r0, r0, r4
 8008f38:	bf18      	it	ne
 8008f3a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008f3c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008f3e:	68eb      	ldr	r3, [r5, #12]
 8008f40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008f44:	4303      	orrs	r3, r0
 8008f46:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8008f48:	f7fd f984 	bl	8006254 <HAL_GetTick>
 8008f4c:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008f4e:	686b      	ldr	r3, [r5, #4]
 8008f50:	049a      	lsls	r2, r3, #18
 8008f52:	d508      	bpl.n	8008f66 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008f54:	f1a4 031d 	sub.w	r3, r4, #29
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d90c      	bls.n	8008f76 <HAL_PWREx_ConfigSupply+0x56>
 8008f5c:	3c2d      	subs	r4, #45	@ 0x2d
 8008f5e:	2c01      	cmp	r4, #1
 8008f60:	d909      	bls.n	8008f76 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 8008f62:	2000      	movs	r0, #0
 8008f64:	e7ea      	b.n	8008f3c <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008f66:	f7fd f975 	bl	8006254 <HAL_GetTick>
 8008f6a:	1b80      	subs	r0, r0, r6
 8008f6c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008f70:	d9ed      	bls.n	8008f4e <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8008f72:	2001      	movs	r0, #1
 8008f74:	e7e2      	b.n	8008f3c <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8008f76:	f7fd f96d 	bl	8006254 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008f7a:	4d06      	ldr	r5, [pc, #24]	@ (8008f94 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8008f7c:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008f7e:	68eb      	ldr	r3, [r5, #12]
 8008f80:	03db      	lsls	r3, r3, #15
 8008f82:	d4ee      	bmi.n	8008f62 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008f84:	f7fd f966 	bl	8006254 <HAL_GetTick>
 8008f88:	1b00      	subs	r0, r0, r4
 8008f8a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008f8e:	d9f6      	bls.n	8008f7e <HAL_PWREx_ConfigSupply+0x5e>
 8008f90:	e7ef      	b.n	8008f72 <HAL_PWREx_ConfigSupply+0x52>
 8008f92:	bf00      	nop
 8008f94:	58024800 	.word	0x58024800

08008f98 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8008f9c:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 8008f9e:	b136      	cbz	r6, 8008fae <QSPI_Config+0x16>
 8008fa0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8008fa4:	d003      	beq.n	8008fae <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008fa6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8008fa8:	6804      	ldr	r4, [r0, #0]
 8008faa:	3b01      	subs	r3, #1
 8008fac:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008fae:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008fb2:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008fb6:	f1ba 0f00 	cmp.w	sl, #0
 8008fba:	d04c      	beq.n	8009056 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008fbc:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008fbe:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008fc0:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 8008fc4:	ea4a 0406 	orr.w	r4, sl, r6
 8008fc8:	680b      	ldr	r3, [r1, #0]
 8008fca:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 8008fce:	ea44 0a02 	orr.w	sl, r4, r2
 8008fd2:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008fd6:	f1be 0f00 	cmp.w	lr, #0
 8008fda:	d024      	beq.n	8009026 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008fdc:	688e      	ldr	r6, [r1, #8]
 8008fde:	ea4a 040e 	orr.w	r4, sl, lr
 8008fe2:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008fe4:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008fe6:	b19f      	cbz	r7, 8009010 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008fe8:	433b      	orrs	r3, r7
 8008fea:	4303      	orrs	r3, r0
 8008fec:	68c8      	ldr	r0, [r1, #12]
 8008fee:	ea43 0309 	orr.w	r3, r3, r9
 8008ff2:	ea43 0308 	orr.w	r3, r3, r8
 8008ff6:	4333      	orrs	r3, r6
 8008ff8:	4303      	orrs	r3, r0
 8008ffa:	ea43 030c 	orr.w	r3, r3, ip
 8008ffe:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009000:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009004:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009006:	d001      	beq.n	800900c <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009008:	684b      	ldr	r3, [r1, #4]
 800900a:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800900c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009010:	4303      	orrs	r3, r0
 8009012:	ea43 0309 	orr.w	r3, r3, r9
 8009016:	ea43 0308 	orr.w	r3, r3, r8
 800901a:	4333      	orrs	r3, r6
 800901c:	ea43 030c 	orr.w	r3, r3, ip
 8009020:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009022:	616b      	str	r3, [r5, #20]
 8009024:	e7f2      	b.n	800900c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009026:	b167      	cbz	r7, 8009042 <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009028:	433b      	orrs	r3, r7
 800902a:	4303      	orrs	r3, r0
 800902c:	68c8      	ldr	r0, [r1, #12]
 800902e:	ea43 0309 	orr.w	r3, r3, r9
 8009032:	ea43 0308 	orr.w	r3, r3, r8
 8009036:	4303      	orrs	r3, r0
 8009038:	ea43 030c 	orr.w	r3, r3, ip
 800903c:	ea43 030a 	orr.w	r3, r3, sl
 8009040:	e7de      	b.n	8009000 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009042:	4303      	orrs	r3, r0
 8009044:	ea43 0309 	orr.w	r3, r3, r9
 8009048:	ea43 0408 	orr.w	r4, r3, r8
 800904c:	ea44 030c 	orr.w	r3, r4, ip
 8009050:	ea43 030a 	orr.w	r3, r3, sl
 8009054:	e7e5      	b.n	8009022 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009056:	f1be 0f00 	cmp.w	lr, #0
 800905a:	d02c      	beq.n	80090b6 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800905c:	ea46 050e 	orr.w	r5, r6, lr
 8009060:	688b      	ldr	r3, [r1, #8]
 8009062:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009064:	694e      	ldr	r6, [r1, #20]
 8009066:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009068:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800906a:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800906e:	04b6      	lsls	r6, r6, #18
 8009070:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009072:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009076:	b1a7      	cbz	r7, 80090a2 <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009078:	433b      	orrs	r3, r7
 800907a:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800907c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009080:	ea43 0308 	orr.w	r3, r3, r8
 8009084:	ea43 030e 	orr.w	r3, r3, lr
 8009088:	ea43 030c 	orr.w	r3, r3, ip
 800908c:	ea43 0300 	orr.w	r3, r3, r0
 8009090:	ea43 0306 	orr.w	r3, r3, r6
 8009094:	ea43 0305 	orr.w	r3, r3, r5
 8009098:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800909a:	d0b7      	beq.n	800900c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800909c:	684b      	ldr	r3, [r1, #4]
 800909e:	61a3      	str	r3, [r4, #24]
 80090a0:	e7b4      	b.n	800900c <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80090a2:	ea43 0308 	orr.w	r3, r3, r8
 80090a6:	ea43 030e 	orr.w	r3, r3, lr
 80090aa:	ea43 030c 	orr.w	r3, r3, ip
 80090ae:	4333      	orrs	r3, r6
 80090b0:	432b      	orrs	r3, r5
 80090b2:	6163      	str	r3, [r4, #20]
 80090b4:	e7aa      	b.n	800900c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80090b6:	b1d7      	cbz	r7, 80090ee <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80090b8:	ea46 0307 	orr.w	r3, r6, r7
 80090bc:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 80090be:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80090c0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80090c4:	ea43 0302 	orr.w	r3, r3, r2
 80090c8:	ea43 0304 	orr.w	r3, r3, r4
 80090cc:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 80090ce:	ea43 0304 	orr.w	r3, r3, r4
 80090d2:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 80090d4:	ea43 0304 	orr.w	r3, r3, r4
 80090d8:	68cc      	ldr	r4, [r1, #12]
 80090da:	ea43 0304 	orr.w	r3, r3, r4
 80090de:	694c      	ldr	r4, [r1, #20]
 80090e0:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80090e4:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80090e6:	d091      	beq.n	800900c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80090e8:	684b      	ldr	r3, [r1, #4]
 80090ea:	6183      	str	r3, [r0, #24]
 80090ec:	e78e      	b.n	800900c <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80090ee:	2e00      	cmp	r6, #0
 80090f0:	d08c      	beq.n	800900c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80090f2:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80090f4:	6800      	ldr	r0, [r0, #0]
 80090f6:	4333      	orrs	r3, r6
 80090f8:	4313      	orrs	r3, r2
 80090fa:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80090fc:	4313      	orrs	r3, r2
 80090fe:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8009100:	4313      	orrs	r3, r2
 8009102:	694a      	ldr	r2, [r1, #20]
 8009104:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8009108:	6143      	str	r3, [r0, #20]
}
 800910a:	e77f      	b.n	800900c <QSPI_Config+0x74>

0800910c <QSPI_WaitFlagStateUntilTimeout>:
{
 800910c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009110:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009114:	4604      	mov	r4, r0
 8009116:	460e      	mov	r6, r1
 8009118:	4615      	mov	r5, r2
 800911a:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800911c:	6822      	ldr	r2, [r4, #0]
 800911e:	6893      	ldr	r3, [r2, #8]
 8009120:	4233      	tst	r3, r6
 8009122:	bf14      	ite	ne
 8009124:	2301      	movne	r3, #1
 8009126:	2300      	moveq	r3, #0
 8009128:	42ab      	cmp	r3, r5
 800912a:	d101      	bne.n	8009130 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800912c:	2000      	movs	r0, #0
 800912e:	e012      	b.n	8009156 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8009130:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009134:	d0f3      	beq.n	800911e <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009136:	f7fd f88d 	bl	8006254 <HAL_GetTick>
 800913a:	1bc0      	subs	r0, r0, r7
 800913c:	4540      	cmp	r0, r8
 800913e:	d802      	bhi.n	8009146 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8009140:	f1b8 0f00 	cmp.w	r8, #0
 8009144:	d1ea      	bne.n	800911c <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009146:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009148:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800914a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800914e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009150:	f043 0301 	orr.w	r3, r3, #1
 8009154:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8009156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800915c <HAL_QSPI_Init>:
{
 800915c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800915e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009160:	f7fd f878 	bl	8006254 <HAL_GetTick>
 8009164:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8009166:	2c00      	cmp	r4, #0
 8009168:	d03f      	beq.n	80091ea <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800916a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800916e:	b92b      	cbnz	r3, 800917c <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 8009170:	4620      	mov	r0, r4
 8009172:	f7f8 f851 	bl	8001218 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8009176:	f241 3388 	movw	r3, #5000	@ 0x1388
 800917a:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800917c:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800917e:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009180:	68a3      	ldr	r3, [r4, #8]
 8009182:	680a      	ldr	r2, [r1, #0]
 8009184:	3b01      	subs	r3, #1
 8009186:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800918a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800918e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009190:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009192:	2200      	movs	r2, #0
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	2120      	movs	r1, #32
 8009198:	462b      	mov	r3, r5
 800919a:	f7ff ffb7 	bl	800910c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800919e:	bb10      	cbnz	r0, 80091e6 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80091a0:	6822      	ldr	r2, [r4, #0]
 80091a2:	69e5      	ldr	r5, [r4, #28]
 80091a4:	68e3      	ldr	r3, [r4, #12]
 80091a6:	6811      	ldr	r1, [r2, #0]
 80091a8:	432b      	orrs	r3, r5
 80091aa:	6a25      	ldr	r5, [r4, #32]
 80091ac:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80091b0:	432b      	orrs	r3, r5
 80091b2:	6865      	ldr	r5, [r4, #4]
 80091b4:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 80091b8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80091bc:	430b      	orrs	r3, r1
 80091be:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80091c0:	6855      	ldr	r5, [r2, #4]
 80091c2:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80091c6:	430b      	orrs	r3, r1
 80091c8:	6921      	ldr	r1, [r4, #16]
 80091ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80091ce:	4908      	ldr	r1, [pc, #32]	@ (80091f0 <HAL_QSPI_Init+0x94>)
 80091d0:	4029      	ands	r1, r5
 80091d2:	430b      	orrs	r3, r1
 80091d4:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80091d6:	6813      	ldr	r3, [r2, #0]
 80091d8:	f043 0301 	orr.w	r3, r3, #1
 80091dc:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80091de:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80091e0:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80091e2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 80091e6:	b003      	add	sp, #12
 80091e8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80091ea:	2001      	movs	r0, #1
 80091ec:	e7fb      	b.n	80091e6 <HAL_QSPI_Init+0x8a>
 80091ee:	bf00      	nop
 80091f0:	ffe0f8fe 	.word	0xffe0f8fe

080091f4 <HAL_QSPI_Command>:
{
 80091f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80091f8:	4604      	mov	r4, r0
 80091fa:	468a      	mov	sl, r1
 80091fc:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80091fe:	f7fd f829 	bl	8006254 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009202:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009206:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 8009208:	2b01      	cmp	r3, #1
 800920a:	d036      	beq.n	800927a <HAL_QSPI_Command+0x86>
 800920c:	2301      	movs	r3, #1
 800920e:	2602      	movs	r6, #2
 8009210:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009214:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009218:	2b01      	cmp	r3, #1
 800921a:	fa5f f983 	uxtb.w	r9, r3
 800921e:	d128      	bne.n	8009272 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009220:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009222:	4603      	mov	r3, r0
 8009224:	2120      	movs	r1, #32
 8009226:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009228:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800922a:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800922e:	f8cd 8000 	str.w	r8, [sp]
 8009232:	f7ff ff6b 	bl	800910c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009236:	4605      	mov	r5, r0
 8009238:	b9a0      	cbnz	r0, 8009264 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800923a:	4602      	mov	r2, r0
 800923c:	4651      	mov	r1, sl
 800923e:	4620      	mov	r0, r4
 8009240:	f7ff feaa 	bl	8008f98 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8009244:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8009248:	b953      	cbnz	r3, 8009260 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800924a:	463b      	mov	r3, r7
 800924c:	464a      	mov	r2, r9
 800924e:	4631      	mov	r1, r6
 8009250:	4620      	mov	r0, r4
 8009252:	f8cd 8000 	str.w	r8, [sp]
 8009256:	f7ff ff59 	bl	800910c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800925a:	b960      	cbnz	r0, 8009276 <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009260:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009264:	2300      	movs	r3, #0
 8009266:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800926a:	4628      	mov	r0, r5
 800926c:	b002      	add	sp, #8
 800926e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 8009272:	4635      	mov	r5, r6
 8009274:	e7f6      	b.n	8009264 <HAL_QSPI_Command+0x70>
 8009276:	4605      	mov	r5, r0
 8009278:	e7f4      	b.n	8009264 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800927a:	2502      	movs	r5, #2
 800927c:	e7f5      	b.n	800926a <HAL_QSPI_Command+0x76>

0800927e <HAL_QSPI_Transmit>:
{
 800927e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009282:	4604      	mov	r4, r0
 8009284:	4688      	mov	r8, r1
 8009286:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8009288:	f7fc ffe4 	bl	8006254 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800928c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009290:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8009292:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8009294:	2b01      	cmp	r3, #1
 8009296:	d04c      	beq.n	8009332 <HAL_QSPI_Transmit+0xb4>
 8009298:	2301      	movs	r3, #1
 800929a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800929e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	b2d8      	uxtb	r0, r3
 80092a6:	d142      	bne.n	800932e <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80092a8:	2300      	movs	r3, #0
 80092aa:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 80092ac:	f1b8 0f00 	cmp.w	r8, #0
 80092b0:	d038      	beq.n	8009324 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80092b2:	2312      	movs	r3, #18
 80092b4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80092b8:	692b      	ldr	r3, [r5, #16]
 80092ba:	3301      	adds	r3, #1
 80092bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80092be:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80092c0:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80092c4:	3301      	adds	r3, #1
 80092c6:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80092c8:	696b      	ldr	r3, [r5, #20]
 80092ca:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80092ce:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80092d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80092d2:	b99b      	cbnz	r3, 80092fc <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80092d4:	4633      	mov	r3, r6
 80092d6:	2201      	movs	r2, #1
 80092d8:	2102      	movs	r1, #2
 80092da:	4620      	mov	r0, r4
 80092dc:	9700      	str	r7, [sp, #0]
 80092de:	f7ff ff15 	bl	800910c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80092e2:	b910      	cbnz	r0, 80092ea <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	2202      	movs	r2, #2
 80092e8:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 80092ea:	2301      	movs	r3, #1
 80092ec:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80092f0:	2300      	movs	r3, #0
 80092f2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80092f6:	b002      	add	sp, #8
 80092f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80092fc:	4633      	mov	r3, r6
 80092fe:	2201      	movs	r2, #1
 8009300:	2104      	movs	r1, #4
 8009302:	4620      	mov	r0, r4
 8009304:	9700      	str	r7, [sp, #0]
 8009306:	f7ff ff01 	bl	800910c <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800930a:	2800      	cmp	r0, #0
 800930c:	d1ed      	bne.n	80092ea <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800930e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 8009316:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009318:	3301      	adds	r3, #1
 800931a:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800931c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800931e:	3b01      	subs	r3, #1
 8009320:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009322:	e7d5      	b.n	80092d0 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009324:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009326:	f043 0308 	orr.w	r3, r3, #8
 800932a:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800932c:	e7e0      	b.n	80092f0 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800932e:	2002      	movs	r0, #2
 8009330:	e7de      	b.n	80092f0 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8009332:	2002      	movs	r0, #2
 8009334:	e7df      	b.n	80092f6 <HAL_QSPI_Transmit+0x78>

08009336 <HAL_QSPI_Receive>:
{
 8009336:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800933a:	4604      	mov	r4, r0
 800933c:	4617      	mov	r7, r2
 800933e:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8009340:	f7fc ff88 	bl	8006254 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009344:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8009346:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009348:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800934a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800934e:	2b01      	cmp	r3, #1
 8009350:	d04f      	beq.n	80093f2 <HAL_QSPI_Receive+0xbc>
 8009352:	2301      	movs	r3, #1
 8009354:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009358:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800935c:	2b01      	cmp	r3, #1
 800935e:	b2d8      	uxtb	r0, r3
 8009360:	d145      	bne.n	80093ee <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009362:	2300      	movs	r3, #0
 8009364:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8009366:	f1b8 0f00 	cmp.w	r8, #0
 800936a:	d03b      	beq.n	80093e4 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800936c:	2322      	movs	r3, #34	@ 0x22
 800936e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009372:	692b      	ldr	r3, [r5, #16]
 8009374:	3301      	adds	r3, #1
 8009376:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009378:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800937a:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800937e:	3301      	adds	r3, #1
 8009380:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8009382:	6969      	ldr	r1, [r5, #20]
 8009384:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 8009388:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800938c:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800938e:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8009390:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009392:	b99b      	cbnz	r3, 80093bc <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009394:	4633      	mov	r3, r6
 8009396:	2201      	movs	r2, #1
 8009398:	2102      	movs	r1, #2
 800939a:	4620      	mov	r0, r4
 800939c:	9700      	str	r7, [sp, #0]
 800939e:	f7ff feb5 	bl	800910c <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80093a2:	b910      	cbnz	r0, 80093aa <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	2202      	movs	r2, #2
 80093a8:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 80093aa:	2301      	movs	r3, #1
 80093ac:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80093b0:	2300      	movs	r3, #0
 80093b2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80093b6:	b002      	add	sp, #8
 80093b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80093bc:	4633      	mov	r3, r6
 80093be:	2201      	movs	r2, #1
 80093c0:	2106      	movs	r1, #6
 80093c2:	4620      	mov	r0, r4
 80093c4:	9700      	str	r7, [sp, #0]
 80093c6:	f7ff fea1 	bl	800910c <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80093ca:	2800      	cmp	r0, #0
 80093cc:	d1ed      	bne.n	80093aa <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80093ce:	f895 2020 	ldrb.w	r2, [r5, #32]
 80093d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80093d4:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80093d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80093d8:	3301      	adds	r3, #1
 80093da:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 80093dc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80093de:	3b01      	subs	r3, #1
 80093e0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80093e2:	e7d5      	b.n	8009390 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80093e4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80093e6:	f043 0308 	orr.w	r3, r3, #8
 80093ea:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 80093ec:	e7e0      	b.n	80093b0 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 80093ee:	2002      	movs	r0, #2
 80093f0:	e7de      	b.n	80093b0 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 80093f2:	2002      	movs	r0, #2
 80093f4:	e7df      	b.n	80093b6 <HAL_QSPI_Receive+0x80>

080093f6 <HAL_QSPI_AutoPolling>:
{
 80093f6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093fa:	4604      	mov	r4, r0
 80093fc:	461f      	mov	r7, r3
 80093fe:	4689      	mov	r9, r1
 8009400:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8009402:	f7fc ff27 	bl	8006254 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009406:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800940a:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800940c:	2b01      	cmp	r3, #1
 800940e:	d041      	beq.n	8009494 <HAL_QSPI_AutoPolling+0x9e>
 8009410:	2301      	movs	r3, #1
 8009412:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009416:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800941a:	2b01      	cmp	r3, #1
 800941c:	fa5f f883 	uxtb.w	r8, r3
 8009420:	d136      	bne.n	8009490 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009422:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009424:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009426:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009428:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800942a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800942e:	4603      	mov	r3, r0
 8009430:	9700      	str	r7, [sp, #0]
 8009432:	4620      	mov	r0, r4
 8009434:	f7ff fe6a 	bl	800910c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009438:	bb20      	cbnz	r0, 8009484 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800943a:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800943c:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800943e:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009440:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009442:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8009444:	686b      	ldr	r3, [r5, #4]
 8009446:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8009448:	68ab      	ldr	r3, [r5, #8]
 800944a:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800944c:	6813      	ldr	r3, [r2, #0]
 800944e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8009452:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009454:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009456:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800945a:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800945c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 8009460:	68eb      	ldr	r3, [r5, #12]
 8009462:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009466:	f7ff fd97 	bl	8008f98 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800946a:	4633      	mov	r3, r6
 800946c:	4642      	mov	r2, r8
 800946e:	2108      	movs	r1, #8
 8009470:	4620      	mov	r0, r4
 8009472:	9700      	str	r7, [sp, #0]
 8009474:	f7ff fe4a 	bl	800910c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8009478:	b920      	cbnz	r0, 8009484 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	2208      	movs	r2, #8
 800947e:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009480:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009484:	2300      	movs	r3, #0
 8009486:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800948a:	b003      	add	sp, #12
 800948c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8009490:	2002      	movs	r0, #2
 8009492:	e7f7      	b.n	8009484 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 8009494:	2002      	movs	r0, #2
 8009496:	e7f8      	b.n	800948a <HAL_QSPI_AutoPolling+0x94>

08009498 <HAL_QSPI_MemoryMapped>:
{
 8009498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800949a:	4604      	mov	r4, r0
 800949c:	4616      	mov	r6, r2
 800949e:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80094a0:	f7fc fed8 	bl	8006254 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80094a4:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80094a8:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80094aa:	2a01      	cmp	r2, #1
 80094ac:	d033      	beq.n	8009516 <HAL_QSPI_MemoryMapped+0x7e>
 80094ae:	2201      	movs	r2, #1
 80094b0:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80094b4:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 80094b8:	2a01      	cmp	r2, #1
 80094ba:	d12a      	bne.n	8009512 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80094bc:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80094be:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80094c0:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80094c2:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80094c4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80094c8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80094ca:	9100      	str	r1, [sp, #0]
 80094cc:	2120      	movs	r1, #32
 80094ce:	f7ff fe1d 	bl	800910c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80094d2:	4605      	mov	r5, r0
 80094d4:	b9b8      	cbnz	r0, 8009506 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	6872      	ldr	r2, [r6, #4]
 80094da:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80094dc:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80094de:	f020 0008 	bic.w	r0, r0, #8
 80094e2:	ea40 0002 	orr.w	r0, r0, r2
 80094e6:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80094e8:	d107      	bne.n	80094fa <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80094ea:	6832      	ldr	r2, [r6, #0]
 80094ec:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80094ee:	2210      	movs	r2, #16
 80094f0:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80094f8:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80094fa:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80094fe:	4639      	mov	r1, r7
 8009500:	4620      	mov	r0, r4
 8009502:	f7ff fd49 	bl	8008f98 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8009506:	2300      	movs	r3, #0
 8009508:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800950c:	4628      	mov	r0, r5
 800950e:	b003      	add	sp, #12
 8009510:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8009512:	2502      	movs	r5, #2
 8009514:	e7f7      	b.n	8009506 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8009516:	2502      	movs	r5, #2
 8009518:	e7f8      	b.n	800950c <HAL_QSPI_MemoryMapped+0x74>
	...

0800951c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800951c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800951e:	4604      	mov	r4, r0
 8009520:	2800      	cmp	r0, #0
 8009522:	d074      	beq.n	800960e <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009524:	6803      	ldr	r3, [r0, #0]
 8009526:	07d8      	lsls	r0, r3, #31
 8009528:	d45e      	bmi.n	80095e8 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	0799      	lsls	r1, r3, #30
 800952e:	f100 80ad 	bmi.w	800968c <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	06da      	lsls	r2, r3, #27
 8009536:	d527      	bpl.n	8009588 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009538:	4a9c      	ldr	r2, [pc, #624]	@ (80097ac <HAL_RCC_OscConfig+0x290>)
 800953a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800953c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800953e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009542:	2b08      	cmp	r3, #8
 8009544:	d007      	beq.n	8009556 <HAL_RCC_OscConfig+0x3a>
 8009546:	2b18      	cmp	r3, #24
 8009548:	f040 8103 	bne.w	8009752 <HAL_RCC_OscConfig+0x236>
 800954c:	f001 0303 	and.w	r3, r1, #3
 8009550:	2b01      	cmp	r3, #1
 8009552:	f040 80fe 	bne.w	8009752 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009556:	6813      	ldr	r3, [r2, #0]
 8009558:	05db      	lsls	r3, r3, #23
 800955a:	d502      	bpl.n	8009562 <HAL_RCC_OscConfig+0x46>
 800955c:	69e3      	ldr	r3, [r4, #28]
 800955e:	2b80      	cmp	r3, #128	@ 0x80
 8009560:	d155      	bne.n	800960e <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009562:	f7fc fe8f 	bl	8006284 <HAL_GetREVID>
 8009566:	f241 0303 	movw	r3, #4099	@ 0x1003
 800956a:	6a21      	ldr	r1, [r4, #32]
 800956c:	4298      	cmp	r0, r3
 800956e:	4b8f      	ldr	r3, [pc, #572]	@ (80097ac <HAL_RCC_OscConfig+0x290>)
 8009570:	f200 80e8 	bhi.w	8009744 <HAL_RCC_OscConfig+0x228>
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	2920      	cmp	r1, #32
 8009578:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800957c:	bf0c      	ite	eq
 800957e:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 8009582:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8009586:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	0719      	lsls	r1, r3, #28
 800958c:	f100 8123 	bmi.w	80097d6 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	069a      	lsls	r2, r3, #26
 8009594:	f100 8144 	bmi.w	8009820 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	075d      	lsls	r5, r3, #29
 800959c:	d51e      	bpl.n	80095dc <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800959e:	4d84      	ldr	r5, [pc, #528]	@ (80097b0 <HAL_RCC_OscConfig+0x294>)
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095a6:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80095a8:	f7fc fe54 	bl	8006254 <HAL_GetTick>
 80095ac:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095ae:	682b      	ldr	r3, [r5, #0]
 80095b0:	05da      	lsls	r2, r3, #23
 80095b2:	f140 815a 	bpl.w	800986a <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095b6:	68a3      	ldr	r3, [r4, #8]
 80095b8:	4d7c      	ldr	r5, [pc, #496]	@ (80097ac <HAL_RCC_OscConfig+0x290>)
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	f040 815c 	bne.w	8009878 <HAL_RCC_OscConfig+0x35c>
 80095c0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80095c2:	f043 0301 	orr.w	r3, r3, #1
 80095c6:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095c8:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80095cc:	f7fc fe42 	bl	8006254 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095d0:	4e76      	ldr	r6, [pc, #472]	@ (80097ac <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80095d2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095d4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80095d6:	079b      	lsls	r3, r3, #30
 80095d8:	f140 8174 	bpl.w	80098c4 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095dc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80095de:	2900      	cmp	r1, #0
 80095e0:	f040 8177 	bne.w	80098d2 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 80095e4:	2000      	movs	r0, #0
 80095e6:	e02b      	b.n	8009640 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095e8:	4a70      	ldr	r2, [pc, #448]	@ (80097ac <HAL_RCC_OscConfig+0x290>)
 80095ea:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80095ec:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80095f2:	2b10      	cmp	r3, #16
 80095f4:	d005      	beq.n	8009602 <HAL_RCC_OscConfig+0xe6>
 80095f6:	2b18      	cmp	r3, #24
 80095f8:	d10b      	bne.n	8009612 <HAL_RCC_OscConfig+0xf6>
 80095fa:	f001 0303 	and.w	r3, r1, #3
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d107      	bne.n	8009612 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009602:	6813      	ldr	r3, [r2, #0]
 8009604:	039a      	lsls	r2, r3, #14
 8009606:	d590      	bpl.n	800952a <HAL_RCC_OscConfig+0xe>
 8009608:	6863      	ldr	r3, [r4, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d18d      	bne.n	800952a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800960e:	2001      	movs	r0, #1
 8009610:	e016      	b.n	8009640 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009612:	6863      	ldr	r3, [r4, #4]
 8009614:	4d65      	ldr	r5, [pc, #404]	@ (80097ac <HAL_RCC_OscConfig+0x290>)
 8009616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800961a:	d112      	bne.n	8009642 <HAL_RCC_OscConfig+0x126>
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009622:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009624:	f7fc fe16 	bl	8006254 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009628:	4e60      	ldr	r6, [pc, #384]	@ (80097ac <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800962a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800962c:	6833      	ldr	r3, [r6, #0]
 800962e:	039b      	lsls	r3, r3, #14
 8009630:	f53f af7b 	bmi.w	800952a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009634:	f7fc fe0e 	bl	8006254 <HAL_GetTick>
 8009638:	1b40      	subs	r0, r0, r5
 800963a:	2864      	cmp	r0, #100	@ 0x64
 800963c:	d9f6      	bls.n	800962c <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800963e:	2003      	movs	r0, #3
}
 8009640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009642:	b9a3      	cbnz	r3, 800966e <HAL_RCC_OscConfig+0x152>
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800964a:	602b      	str	r3, [r5, #0]
 800964c:	682b      	ldr	r3, [r5, #0]
 800964e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009652:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009654:	f7fc fdfe 	bl	8006254 <HAL_GetTick>
 8009658:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800965a:	682b      	ldr	r3, [r5, #0]
 800965c:	039f      	lsls	r7, r3, #14
 800965e:	f57f af64 	bpl.w	800952a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009662:	f7fc fdf7 	bl	8006254 <HAL_GetTick>
 8009666:	1b80      	subs	r0, r0, r6
 8009668:	2864      	cmp	r0, #100	@ 0x64
 800966a:	d9f6      	bls.n	800965a <HAL_RCC_OscConfig+0x13e>
 800966c:	e7e7      	b.n	800963e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800966e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009672:	682b      	ldr	r3, [r5, #0]
 8009674:	d103      	bne.n	800967e <HAL_RCC_OscConfig+0x162>
 8009676:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800967a:	602b      	str	r3, [r5, #0]
 800967c:	e7ce      	b.n	800961c <HAL_RCC_OscConfig+0x100>
 800967e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009682:	602b      	str	r3, [r5, #0]
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800968a:	e7ca      	b.n	8009622 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800968c:	4947      	ldr	r1, [pc, #284]	@ (80097ac <HAL_RCC_OscConfig+0x290>)
 800968e:	68e2      	ldr	r2, [r4, #12]
 8009690:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009692:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009694:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8009698:	d003      	beq.n	80096a2 <HAL_RCC_OscConfig+0x186>
 800969a:	2b18      	cmp	r3, #24
 800969c:	d12a      	bne.n	80096f4 <HAL_RCC_OscConfig+0x1d8>
 800969e:	0780      	lsls	r0, r0, #30
 80096a0:	d128      	bne.n	80096f4 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80096a2:	680b      	ldr	r3, [r1, #0]
 80096a4:	075b      	lsls	r3, r3, #29
 80096a6:	d501      	bpl.n	80096ac <HAL_RCC_OscConfig+0x190>
 80096a8:	2a00      	cmp	r2, #0
 80096aa:	d0b0      	beq.n	800960e <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80096ac:	4d3f      	ldr	r5, [pc, #252]	@ (80097ac <HAL_RCC_OscConfig+0x290>)
 80096ae:	682b      	ldr	r3, [r5, #0]
 80096b0:	f023 0319 	bic.w	r3, r3, #25
 80096b4:	4313      	orrs	r3, r2
 80096b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80096b8:	f7fc fdcc 	bl	8006254 <HAL_GetTick>
 80096bc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096be:	682b      	ldr	r3, [r5, #0]
 80096c0:	075f      	lsls	r7, r3, #29
 80096c2:	d511      	bpl.n	80096e8 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80096c4:	f7fc fdde 	bl	8006284 <HAL_GetREVID>
 80096c8:	f241 0303 	movw	r3, #4099	@ 0x1003
 80096cc:	6922      	ldr	r2, [r4, #16]
 80096ce:	4298      	cmp	r0, r3
 80096d0:	686b      	ldr	r3, [r5, #4]
 80096d2:	d822      	bhi.n	800971a <HAL_RCC_OscConfig+0x1fe>
 80096d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80096d8:	2a40      	cmp	r2, #64	@ 0x40
 80096da:	bf0c      	ite	eq
 80096dc:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 80096e0:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80096e4:	606b      	str	r3, [r5, #4]
 80096e6:	e724      	b.n	8009532 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80096e8:	f7fc fdb4 	bl	8006254 <HAL_GetTick>
 80096ec:	1b80      	subs	r0, r0, r6
 80096ee:	2802      	cmp	r0, #2
 80096f0:	d9e5      	bls.n	80096be <HAL_RCC_OscConfig+0x1a2>
 80096f2:	e7a4      	b.n	800963e <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80096f4:	4d2d      	ldr	r5, [pc, #180]	@ (80097ac <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80096f6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80096f8:	b1a2      	cbz	r2, 8009724 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80096fa:	f023 0319 	bic.w	r3, r3, #25
 80096fe:	4313      	orrs	r3, r2
 8009700:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009702:	f7fc fda7 	bl	8006254 <HAL_GetTick>
 8009706:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009708:	682b      	ldr	r3, [r5, #0]
 800970a:	0758      	lsls	r0, r3, #29
 800970c:	d4da      	bmi.n	80096c4 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800970e:	f7fc fda1 	bl	8006254 <HAL_GetTick>
 8009712:	1b80      	subs	r0, r0, r6
 8009714:	2802      	cmp	r0, #2
 8009716:	d9f7      	bls.n	8009708 <HAL_RCC_OscConfig+0x1ec>
 8009718:	e791      	b.n	800963e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800971a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800971e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009722:	e7df      	b.n	80096e4 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 8009724:	f023 0301 	bic.w	r3, r3, #1
 8009728:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800972a:	f7fc fd93 	bl	8006254 <HAL_GetTick>
 800972e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	0759      	lsls	r1, r3, #29
 8009734:	f57f aefd 	bpl.w	8009532 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009738:	f7fc fd8c 	bl	8006254 <HAL_GetTick>
 800973c:	1b80      	subs	r0, r0, r6
 800973e:	2802      	cmp	r0, #2
 8009740:	d9f6      	bls.n	8009730 <HAL_RCC_OscConfig+0x214>
 8009742:	e77c      	b.n	800963e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009744:	68da      	ldr	r2, [r3, #12]
 8009746:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800974a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800974e:	60da      	str	r2, [r3, #12]
 8009750:	e71a      	b.n	8009588 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009752:	69e3      	ldr	r3, [r4, #28]
 8009754:	4d15      	ldr	r5, [pc, #84]	@ (80097ac <HAL_RCC_OscConfig+0x290>)
 8009756:	b36b      	cbz	r3, 80097b4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800975e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009760:	f7fc fd78 	bl	8006254 <HAL_GetTick>
 8009764:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009766:	682b      	ldr	r3, [r5, #0]
 8009768:	05df      	lsls	r7, r3, #23
 800976a:	d511      	bpl.n	8009790 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800976c:	f7fc fd8a 	bl	8006284 <HAL_GetREVID>
 8009770:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009774:	6a22      	ldr	r2, [r4, #32]
 8009776:	4298      	cmp	r0, r3
 8009778:	d810      	bhi.n	800979c <HAL_RCC_OscConfig+0x280>
 800977a:	686b      	ldr	r3, [r5, #4]
 800977c:	2a20      	cmp	r2, #32
 800977e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009782:	bf0c      	ite	eq
 8009784:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8009788:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800978c:	606b      	str	r3, [r5, #4]
 800978e:	e6fb      	b.n	8009588 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009790:	f7fc fd60 	bl	8006254 <HAL_GetTick>
 8009794:	1b80      	subs	r0, r0, r6
 8009796:	2802      	cmp	r0, #2
 8009798:	d9e5      	bls.n	8009766 <HAL_RCC_OscConfig+0x24a>
 800979a:	e750      	b.n	800963e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800979c:	68eb      	ldr	r3, [r5, #12]
 800979e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80097a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80097a6:	60eb      	str	r3, [r5, #12]
 80097a8:	e6ee      	b.n	8009588 <HAL_RCC_OscConfig+0x6c>
 80097aa:	bf00      	nop
 80097ac:	58024400 	.word	0x58024400
 80097b0:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80097bc:	f7fc fd4a 	bl	8006254 <HAL_GetTick>
 80097c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80097c2:	682b      	ldr	r3, [r5, #0]
 80097c4:	05d8      	lsls	r0, r3, #23
 80097c6:	f57f aedf 	bpl.w	8009588 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80097ca:	f7fc fd43 	bl	8006254 <HAL_GetTick>
 80097ce:	1b80      	subs	r0, r0, r6
 80097d0:	2802      	cmp	r0, #2
 80097d2:	d9f6      	bls.n	80097c2 <HAL_RCC_OscConfig+0x2a6>
 80097d4:	e733      	b.n	800963e <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80097d6:	6963      	ldr	r3, [r4, #20]
 80097d8:	4da5      	ldr	r5, [pc, #660]	@ (8009a70 <HAL_RCC_OscConfig+0x554>)
 80097da:	b183      	cbz	r3, 80097fe <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 80097dc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80097de:	f043 0301 	orr.w	r3, r3, #1
 80097e2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80097e4:	f7fc fd36 	bl	8006254 <HAL_GetTick>
 80097e8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80097ea:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80097ec:	079b      	lsls	r3, r3, #30
 80097ee:	f53f aecf 	bmi.w	8009590 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80097f2:	f7fc fd2f 	bl	8006254 <HAL_GetTick>
 80097f6:	1b80      	subs	r0, r0, r6
 80097f8:	2802      	cmp	r0, #2
 80097fa:	d9f6      	bls.n	80097ea <HAL_RCC_OscConfig+0x2ce>
 80097fc:	e71f      	b.n	800963e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 80097fe:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009800:	f023 0301 	bic.w	r3, r3, #1
 8009804:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8009806:	f7fc fd25 	bl	8006254 <HAL_GetTick>
 800980a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800980c:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800980e:	079f      	lsls	r7, r3, #30
 8009810:	f57f aebe 	bpl.w	8009590 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009814:	f7fc fd1e 	bl	8006254 <HAL_GetTick>
 8009818:	1b80      	subs	r0, r0, r6
 800981a:	2802      	cmp	r0, #2
 800981c:	d9f6      	bls.n	800980c <HAL_RCC_OscConfig+0x2f0>
 800981e:	e70e      	b.n	800963e <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009820:	69a3      	ldr	r3, [r4, #24]
 8009822:	4d93      	ldr	r5, [pc, #588]	@ (8009a70 <HAL_RCC_OscConfig+0x554>)
 8009824:	b183      	cbz	r3, 8009848 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 8009826:	682b      	ldr	r3, [r5, #0]
 8009828:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800982c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800982e:	f7fc fd11 	bl	8006254 <HAL_GetTick>
 8009832:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	0498      	lsls	r0, r3, #18
 8009838:	f53f aeae 	bmi.w	8009598 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800983c:	f7fc fd0a 	bl	8006254 <HAL_GetTick>
 8009840:	1b80      	subs	r0, r0, r6
 8009842:	2802      	cmp	r0, #2
 8009844:	d9f6      	bls.n	8009834 <HAL_RCC_OscConfig+0x318>
 8009846:	e6fa      	b.n	800963e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800984e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009850:	f7fc fd00 	bl	8006254 <HAL_GetTick>
 8009854:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009856:	682b      	ldr	r3, [r5, #0]
 8009858:	0499      	lsls	r1, r3, #18
 800985a:	f57f ae9d 	bpl.w	8009598 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800985e:	f7fc fcf9 	bl	8006254 <HAL_GetTick>
 8009862:	1b80      	subs	r0, r0, r6
 8009864:	2802      	cmp	r0, #2
 8009866:	d9f6      	bls.n	8009856 <HAL_RCC_OscConfig+0x33a>
 8009868:	e6e9      	b.n	800963e <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800986a:	f7fc fcf3 	bl	8006254 <HAL_GetTick>
 800986e:	1b80      	subs	r0, r0, r6
 8009870:	2864      	cmp	r0, #100	@ 0x64
 8009872:	f67f ae9c 	bls.w	80095ae <HAL_RCC_OscConfig+0x92>
 8009876:	e6e2      	b.n	800963e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009878:	b9b3      	cbnz	r3, 80098a8 <HAL_RCC_OscConfig+0x38c>
 800987a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800987c:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009880:	f023 0301 	bic.w	r3, r3, #1
 8009884:	672b      	str	r3, [r5, #112]	@ 0x70
 8009886:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009888:	f023 0304 	bic.w	r3, r3, #4
 800988c:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800988e:	f7fc fce1 	bl	8006254 <HAL_GetTick>
 8009892:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009894:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009896:	0798      	lsls	r0, r3, #30
 8009898:	f57f aea0 	bpl.w	80095dc <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800989c:	f7fc fcda 	bl	8006254 <HAL_GetTick>
 80098a0:	1b80      	subs	r0, r0, r6
 80098a2:	42b8      	cmp	r0, r7
 80098a4:	d9f6      	bls.n	8009894 <HAL_RCC_OscConfig+0x378>
 80098a6:	e6ca      	b.n	800963e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098a8:	2b05      	cmp	r3, #5
 80098aa:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80098ac:	d103      	bne.n	80098b6 <HAL_RCC_OscConfig+0x39a>
 80098ae:	f043 0304 	orr.w	r3, r3, #4
 80098b2:	672b      	str	r3, [r5, #112]	@ 0x70
 80098b4:	e684      	b.n	80095c0 <HAL_RCC_OscConfig+0xa4>
 80098b6:	f023 0301 	bic.w	r3, r3, #1
 80098ba:	672b      	str	r3, [r5, #112]	@ 0x70
 80098bc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80098be:	f023 0304 	bic.w	r3, r3, #4
 80098c2:	e680      	b.n	80095c6 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098c4:	f7fc fcc6 	bl	8006254 <HAL_GetTick>
 80098c8:	1b40      	subs	r0, r0, r5
 80098ca:	42b8      	cmp	r0, r7
 80098cc:	f67f ae82 	bls.w	80095d4 <HAL_RCC_OscConfig+0xb8>
 80098d0:	e6b5      	b.n	800963e <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80098d2:	4d67      	ldr	r5, [pc, #412]	@ (8009a70 <HAL_RCC_OscConfig+0x554>)
 80098d4:	692b      	ldr	r3, [r5, #16]
 80098d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80098da:	2b18      	cmp	r3, #24
 80098dc:	d07a      	beq.n	80099d4 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 80098de:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098e0:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 80098e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098e6:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80098e8:	d167      	bne.n	80099ba <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 80098ea:	f7fc fcb3 	bl	8006254 <HAL_GetTick>
 80098ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	0199      	lsls	r1, r3, #6
 80098f4:	d45b      	bmi.n	80099ae <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098f6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80098f8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80098fa:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 80098fe:	f023 0303 	bic.w	r3, r3, #3
 8009902:	4313      	orrs	r3, r2
 8009904:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009906:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800990a:	62ab      	str	r3, [r5, #40]	@ 0x28
 800990c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800990e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009910:	3b01      	subs	r3, #1
 8009912:	3a01      	subs	r2, #1
 8009914:	025b      	lsls	r3, r3, #9
 8009916:	0412      	lsls	r2, r2, #16
 8009918:	b29b      	uxth	r3, r3
 800991a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800991e:	4313      	orrs	r3, r2
 8009920:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009922:	3a01      	subs	r2, #1
 8009924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009928:	4313      	orrs	r3, r2
 800992a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800992c:	3a01      	subs	r2, #1
 800992e:	0612      	lsls	r2, r2, #24
 8009930:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009934:	4313      	orrs	r3, r2
 8009936:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8009938:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800993a:	f023 0301 	bic.w	r3, r3, #1
 800993e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009940:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009942:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8009944:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009948:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800994c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009950:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009952:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009954:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009956:	f023 030c 	bic.w	r3, r3, #12
 800995a:	4313      	orrs	r3, r2
 800995c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800995e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009960:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009962:	f023 0302 	bic.w	r3, r3, #2
 8009966:	4313      	orrs	r3, r2
 8009968:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800996a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800996c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009970:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009972:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009978:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800997a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800997c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009980:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8009982:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009984:	f043 0301 	orr.w	r3, r3, #1
 8009988:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800998a:	682b      	ldr	r3, [r5, #0]
 800998c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009990:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009992:	f7fc fc5f 	bl	8006254 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009996:	4d36      	ldr	r5, [pc, #216]	@ (8009a70 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 8009998:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800999a:	682b      	ldr	r3, [r5, #0]
 800999c:	019a      	lsls	r2, r3, #6
 800999e:	f53f ae21 	bmi.w	80095e4 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099a2:	f7fc fc57 	bl	8006254 <HAL_GetTick>
 80099a6:	1b00      	subs	r0, r0, r4
 80099a8:	2802      	cmp	r0, #2
 80099aa:	d9f6      	bls.n	800999a <HAL_RCC_OscConfig+0x47e>
 80099ac:	e647      	b.n	800963e <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099ae:	f7fc fc51 	bl	8006254 <HAL_GetTick>
 80099b2:	1b80      	subs	r0, r0, r6
 80099b4:	2802      	cmp	r0, #2
 80099b6:	d99b      	bls.n	80098f0 <HAL_RCC_OscConfig+0x3d4>
 80099b8:	e641      	b.n	800963e <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 80099ba:	f7fc fc4b 	bl	8006254 <HAL_GetTick>
 80099be:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099c0:	682b      	ldr	r3, [r5, #0]
 80099c2:	019b      	lsls	r3, r3, #6
 80099c4:	f57f ae0e 	bpl.w	80095e4 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099c8:	f7fc fc44 	bl	8006254 <HAL_GetTick>
 80099cc:	1b00      	subs	r0, r0, r4
 80099ce:	2802      	cmp	r0, #2
 80099d0:	d9f6      	bls.n	80099c0 <HAL_RCC_OscConfig+0x4a4>
 80099d2:	e634      	b.n	800963e <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099d4:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80099d6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80099d8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099da:	f43f ae18 	beq.w	800960e <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099de:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80099e2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80099e4:	4281      	cmp	r1, r0
 80099e6:	f47f ae12 	bne.w	800960e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80099ea:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80099ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80099f0:	428a      	cmp	r2, r1
 80099f2:	f47f ae0c 	bne.w	800960e <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80099f6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80099f8:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80099fc:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80099fe:	4291      	cmp	r1, r2
 8009a00:	f47f ae05 	bne.w	800960e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a04:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009a06:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8009a0a:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a0c:	4291      	cmp	r1, r2
 8009a0e:	f47f adfe 	bne.w	800960e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a12:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009a14:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8009a18:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a1a:	4291      	cmp	r1, r2
 8009a1c:	f47f adf7 	bne.w	800960e <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009a20:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009a22:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009a26:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	f47f adf0 	bne.w	800960e <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009a2e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009a30:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009a32:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009a36:	429a      	cmp	r2, r3
 8009a38:	f43f add4 	beq.w	80095e4 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 8009a3c:	4d0c      	ldr	r5, [pc, #48]	@ (8009a70 <HAL_RCC_OscConfig+0x554>)
 8009a3e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009a40:	f023 0301 	bic.w	r3, r3, #1
 8009a44:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8009a46:	f7fc fc05 	bl	8006254 <HAL_GetTick>
 8009a4a:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009a4c:	f7fc fc02 	bl	8006254 <HAL_GetTick>
 8009a50:	42b0      	cmp	r0, r6
 8009a52:	d0fb      	beq.n	8009a4c <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009a54:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009a56:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8009a58:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a5c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009a60:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009a64:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8009a66:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009a68:	f043 0301 	orr.w	r3, r3, #1
 8009a6c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8009a6e:	e5b9      	b.n	80095e4 <HAL_RCC_OscConfig+0xc8>
 8009a70:	58024400 	.word	0x58024400

08009a74 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009a74:	b570      	push	{r4, r5, r6, lr}
 8009a76:	4c23      	ldr	r4, [pc, #140]	@ (8009b04 <HAL_RCC_MCOConfig+0x90>)
 8009a78:	b088      	sub	sp, #32
 8009a7a:	460e      	mov	r6, r1
 8009a7c:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009a7e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 8009a82:	b9f8      	cbnz	r0, 8009ac4 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 8009a84:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a88:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009a8c:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8009a8e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8009a92:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009a96:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 8009a98:	f003 0301 	and.w	r3, r3, #1
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009aa6:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aa8:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009aac:	4816      	ldr	r0, [pc, #88]	@ (8009b08 <HAL_RCC_MCOConfig+0x94>)
 8009aae:	f7fd fa17 	bl	8006ee0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009ab2:	6923      	ldr	r3, [r4, #16]
 8009ab4:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8009ab8:	ea43 0106 	orr.w	r1, r3, r6
 8009abc:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009abe:	6121      	str	r1, [r4, #16]
  }
}
 8009ac0:	b008      	add	sp, #32
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8009ac4:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009acc:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009ace:	480f      	ldr	r0, [pc, #60]	@ (8009b0c <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 8009ad0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8009ad4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8009ad8:	f003 0304 	and.w	r3, r3, #4
 8009adc:	9302      	str	r3, [sp, #8]
 8009ade:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009aec:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009aee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009af0:	f7fd f9f6 	bl	8006ee0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009af4:	6923      	ldr	r3, [r4, #16]
 8009af6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8009afa:	ea43 0106 	orr.w	r1, r3, r6
 8009afe:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8009b02:	e7dc      	b.n	8009abe <HAL_RCC_MCOConfig+0x4a>
 8009b04:	58024400 	.word	0x58024400
 8009b08:	58020000 	.word	0x58020000
 8009b0c:	58020800 	.word	0x58020800

08009b10 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b10:	4b49      	ldr	r3, [pc, #292]	@ (8009c38 <HAL_RCC_GetSysClockFreq+0x128>)
 8009b12:	691a      	ldr	r2, [r3, #16]
 8009b14:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8009b18:	2a10      	cmp	r2, #16
{
 8009b1a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b1c:	f000 8088 	beq.w	8009c30 <HAL_RCC_GetSysClockFreq+0x120>
 8009b20:	2a18      	cmp	r2, #24
 8009b22:	d00c      	beq.n	8009b3e <HAL_RCC_GetSysClockFreq+0x2e>
 8009b24:	2a00      	cmp	r2, #0
 8009b26:	f040 8085 	bne.w	8009c34 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	4843      	ldr	r0, [pc, #268]	@ (8009c3c <HAL_RCC_GetSysClockFreq+0x12c>)
 8009b2e:	f012 0f20 	tst.w	r2, #32
 8009b32:	d003      	beq.n	8009b3c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009b3a:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8009b3c:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b3e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009b40:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009b42:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 8009b44:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009b48:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009b4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 8009b4e:	d0f5      	beq.n	8009b3c <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009b50:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009b54:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b58:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b5c:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009b60:	4362      	muls	r2, r4
 8009b62:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8009b66:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b6c:	ee06 2a90 	vmov	s13, r2
 8009b70:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8009b74:	d04e      	beq.n	8009c14 <HAL_RCC_GetSysClockFreq+0x104>
 8009b76:	2902      	cmp	r1, #2
 8009b78:	d03e      	beq.n	8009bf8 <HAL_RCC_GetSysClockFreq+0xe8>
 8009b7a:	2900      	cmp	r1, #0
 8009b7c:	d14a      	bne.n	8009c14 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	0692      	lsls	r2, r2, #26
 8009b82:	d527      	bpl.n	8009bd4 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b84:	6819      	ldr	r1, [r3, #0]
 8009b86:	4a2d      	ldr	r2, [pc, #180]	@ (8009c3c <HAL_RCC_GetSysClockFreq+0x12c>)
 8009b88:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b8e:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b94:	ee07 2a90 	vmov	s15, r2
 8009b98:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8009b9c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8009ba0:	ee07 3a10 	vmov	s14, r3
 8009ba4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009ba8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009bac:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009bb4:	4b20      	ldr	r3, [pc, #128]	@ (8009c38 <HAL_RCC_GetSysClockFreq+0x128>)
 8009bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bb8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009bbc:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009bbe:	ee07 3a10 	vmov	s14, r3
 8009bc2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009bc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009bca:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8009bce:	ee17 0a90 	vmov	r0, s15
 8009bd2:	e7b3      	b.n	8009b3c <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bda:	ee07 3a90 	vmov	s15, r3
 8009bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009be6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009bea:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8009c40 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bee:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8009bf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 8009bf6:	e7dd      	b.n	8009bb4 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c0a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009c0e:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8009c44 <HAL_RCC_GetSysClockFreq+0x134>
 8009c12:	e7ec      	b.n	8009bee <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1a:	ee07 3a90 	vmov	s15, r3
 8009c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c26:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009c2a:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8009c48 <HAL_RCC_GetSysClockFreq+0x138>
 8009c2e:	e7de      	b.n	8009bee <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009c30:	4806      	ldr	r0, [pc, #24]	@ (8009c4c <HAL_RCC_GetSysClockFreq+0x13c>)
 8009c32:	e783      	b.n	8009b3c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8009c34:	4806      	ldr	r0, [pc, #24]	@ (8009c50 <HAL_RCC_GetSysClockFreq+0x140>)
 8009c36:	e781      	b.n	8009b3c <HAL_RCC_GetSysClockFreq+0x2c>
 8009c38:	58024400 	.word	0x58024400
 8009c3c:	03d09000 	.word	0x03d09000
 8009c40:	4c742400 	.word	0x4c742400
 8009c44:	4bbebc20 	.word	0x4bbebc20
 8009c48:	4a742400 	.word	0x4a742400
 8009c4c:	017d7840 	.word	0x017d7840
 8009c50:	003d0900 	.word	0x003d0900

08009c54 <HAL_RCC_ClockConfig>:
{
 8009c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c58:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	b910      	cbnz	r0, 8009c64 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8009c5e:	2001      	movs	r0, #1
}
 8009c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009c64:	4a88      	ldr	r2, [pc, #544]	@ (8009e88 <HAL_RCC_ClockConfig+0x234>)
 8009c66:	6813      	ldr	r3, [r2, #0]
 8009c68:	f003 030f 	and.w	r3, r3, #15
 8009c6c:	428b      	cmp	r3, r1
 8009c6e:	f0c0 8093 	bcc.w	8009d98 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	075f      	lsls	r7, r3, #29
 8009c76:	f100 809b 	bmi.w	8009db0 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c7a:	071e      	lsls	r6, r3, #28
 8009c7c:	d50b      	bpl.n	8009c96 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c7e:	4983      	ldr	r1, [pc, #524]	@ (8009e8c <HAL_RCC_ClockConfig+0x238>)
 8009c80:	6960      	ldr	r0, [r4, #20]
 8009c82:	69ca      	ldr	r2, [r1, #28]
 8009c84:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009c88:	4290      	cmp	r0, r2
 8009c8a:	d904      	bls.n	8009c96 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c8c:	69ca      	ldr	r2, [r1, #28]
 8009c8e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009c92:	4302      	orrs	r2, r0
 8009c94:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c96:	06d8      	lsls	r0, r3, #27
 8009c98:	d50b      	bpl.n	8009cb2 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009c9a:	497c      	ldr	r1, [pc, #496]	@ (8009e8c <HAL_RCC_ClockConfig+0x238>)
 8009c9c:	69a0      	ldr	r0, [r4, #24]
 8009c9e:	69ca      	ldr	r2, [r1, #28]
 8009ca0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009ca4:	4290      	cmp	r0, r2
 8009ca6:	d904      	bls.n	8009cb2 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009ca8:	69ca      	ldr	r2, [r1, #28]
 8009caa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009cae:	4302      	orrs	r2, r0
 8009cb0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009cb2:	0699      	lsls	r1, r3, #26
 8009cb4:	d50b      	bpl.n	8009cce <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009cb6:	4975      	ldr	r1, [pc, #468]	@ (8009e8c <HAL_RCC_ClockConfig+0x238>)
 8009cb8:	69e0      	ldr	r0, [r4, #28]
 8009cba:	6a0a      	ldr	r2, [r1, #32]
 8009cbc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009cc0:	4290      	cmp	r0, r2
 8009cc2:	d904      	bls.n	8009cce <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009cc4:	6a0a      	ldr	r2, [r1, #32]
 8009cc6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009cca:	4302      	orrs	r2, r0
 8009ccc:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cce:	079a      	lsls	r2, r3, #30
 8009cd0:	d50b      	bpl.n	8009cea <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009cd2:	496e      	ldr	r1, [pc, #440]	@ (8009e8c <HAL_RCC_ClockConfig+0x238>)
 8009cd4:	68e0      	ldr	r0, [r4, #12]
 8009cd6:	698a      	ldr	r2, [r1, #24]
 8009cd8:	f002 020f 	and.w	r2, r2, #15
 8009cdc:	4290      	cmp	r0, r2
 8009cde:	d904      	bls.n	8009cea <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ce0:	698a      	ldr	r2, [r1, #24]
 8009ce2:	f022 020f 	bic.w	r2, r2, #15
 8009ce6:	4302      	orrs	r2, r0
 8009ce8:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009cea:	07df      	lsls	r7, r3, #31
 8009cec:	d46e      	bmi.n	8009dcc <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cee:	6823      	ldr	r3, [r4, #0]
 8009cf0:	079e      	lsls	r6, r3, #30
 8009cf2:	f100 80a1 	bmi.w	8009e38 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009cf6:	4964      	ldr	r1, [pc, #400]	@ (8009e88 <HAL_RCC_ClockConfig+0x234>)
 8009cf8:	680a      	ldr	r2, [r1, #0]
 8009cfa:	f002 020f 	and.w	r2, r2, #15
 8009cfe:	42aa      	cmp	r2, r5
 8009d00:	f200 80a8 	bhi.w	8009e54 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009d04:	0758      	lsls	r0, r3, #29
 8009d06:	f100 80b1 	bmi.w	8009e6c <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d0a:	0719      	lsls	r1, r3, #28
 8009d0c:	d50b      	bpl.n	8009d26 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009d0e:	495f      	ldr	r1, [pc, #380]	@ (8009e8c <HAL_RCC_ClockConfig+0x238>)
 8009d10:	6960      	ldr	r0, [r4, #20]
 8009d12:	69ca      	ldr	r2, [r1, #28]
 8009d14:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009d18:	4290      	cmp	r0, r2
 8009d1a:	d204      	bcs.n	8009d26 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009d1c:	69ca      	ldr	r2, [r1, #28]
 8009d1e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009d22:	4302      	orrs	r2, r0
 8009d24:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d26:	06da      	lsls	r2, r3, #27
 8009d28:	d50b      	bpl.n	8009d42 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009d2a:	4958      	ldr	r1, [pc, #352]	@ (8009e8c <HAL_RCC_ClockConfig+0x238>)
 8009d2c:	69a0      	ldr	r0, [r4, #24]
 8009d2e:	69ca      	ldr	r2, [r1, #28]
 8009d30:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009d34:	4290      	cmp	r0, r2
 8009d36:	d204      	bcs.n	8009d42 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009d38:	69ca      	ldr	r2, [r1, #28]
 8009d3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009d3e:	4302      	orrs	r2, r0
 8009d40:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009d42:	069b      	lsls	r3, r3, #26
 8009d44:	d50b      	bpl.n	8009d5e <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009d46:	4a51      	ldr	r2, [pc, #324]	@ (8009e8c <HAL_RCC_ClockConfig+0x238>)
 8009d48:	69e1      	ldr	r1, [r4, #28]
 8009d4a:	6a13      	ldr	r3, [r2, #32]
 8009d4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d50:	4299      	cmp	r1, r3
 8009d52:	d204      	bcs.n	8009d5e <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009d54:	6a13      	ldr	r3, [r2, #32]
 8009d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d5a:	430b      	orrs	r3, r1
 8009d5c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009d5e:	f7ff fed7 	bl	8009b10 <HAL_RCC_GetSysClockFreq>
 8009d62:	494a      	ldr	r1, [pc, #296]	@ (8009e8c <HAL_RCC_ClockConfig+0x238>)
 8009d64:	4a4a      	ldr	r2, [pc, #296]	@ (8009e90 <HAL_RCC_ClockConfig+0x23c>)
 8009d66:	698b      	ldr	r3, [r1, #24]
 8009d68:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009d6c:	5cd3      	ldrb	r3, [r2, r3]
 8009d6e:	f003 031f 	and.w	r3, r3, #31
 8009d72:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d74:	698b      	ldr	r3, [r1, #24]
 8009d76:	f003 030f 	and.w	r3, r3, #15
 8009d7a:	5cd3      	ldrb	r3, [r2, r3]
 8009d7c:	4a45      	ldr	r2, [pc, #276]	@ (8009e94 <HAL_RCC_ClockConfig+0x240>)
 8009d7e:	f003 031f 	and.w	r3, r3, #31
 8009d82:	fa20 f303 	lsr.w	r3, r0, r3
 8009d86:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8009d88:	4b43      	ldr	r3, [pc, #268]	@ (8009e98 <HAL_RCC_ClockConfig+0x244>)
 8009d8a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8009d8c:	4b43      	ldr	r3, [pc, #268]	@ (8009e9c <HAL_RCC_ClockConfig+0x248>)
}
 8009d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8009d92:	6818      	ldr	r0, [r3, #0]
 8009d94:	f7f7 bbe8 	b.w	8001568 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d98:	6813      	ldr	r3, [r2, #0]
 8009d9a:	f023 030f 	bic.w	r3, r3, #15
 8009d9e:	430b      	orrs	r3, r1
 8009da0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009da2:	6813      	ldr	r3, [r2, #0]
 8009da4:	f003 030f 	and.w	r3, r3, #15
 8009da8:	428b      	cmp	r3, r1
 8009daa:	f47f af58 	bne.w	8009c5e <HAL_RCC_ClockConfig+0xa>
 8009dae:	e760      	b.n	8009c72 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009db0:	4936      	ldr	r1, [pc, #216]	@ (8009e8c <HAL_RCC_ClockConfig+0x238>)
 8009db2:	6920      	ldr	r0, [r4, #16]
 8009db4:	698a      	ldr	r2, [r1, #24]
 8009db6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009dba:	4290      	cmp	r0, r2
 8009dbc:	f67f af5d 	bls.w	8009c7a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009dc0:	698a      	ldr	r2, [r1, #24]
 8009dc2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009dc6:	4302      	orrs	r2, r0
 8009dc8:	618a      	str	r2, [r1, #24]
 8009dca:	e756      	b.n	8009c7a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8009e8c <HAL_RCC_ClockConfig+0x238>)
 8009dce:	68a1      	ldr	r1, [r4, #8]
 8009dd0:	699a      	ldr	r2, [r3, #24]
 8009dd2:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dda:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ddc:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dde:	2902      	cmp	r1, #2
 8009de0:	d11d      	bne.n	8009e1e <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009de2:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009de6:	f43f af3a 	beq.w	8009c5e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009dea:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009dec:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009df0:	4f26      	ldr	r7, [pc, #152]	@ (8009e8c <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009df2:	f022 0207 	bic.w	r2, r2, #7
 8009df6:	430a      	orrs	r2, r1
 8009df8:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 8009dfa:	f7fc fa2b 	bl	8006254 <HAL_GetTick>
 8009dfe:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	6862      	ldr	r2, [r4, #4]
 8009e04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e08:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8009e0c:	f43f af6f 	beq.w	8009cee <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e10:	f7fc fa20 	bl	8006254 <HAL_GetTick>
 8009e14:	1b80      	subs	r0, r0, r6
 8009e16:	4540      	cmp	r0, r8
 8009e18:	d9f2      	bls.n	8009e00 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 8009e1a:	2003      	movs	r0, #3
 8009e1c:	e720      	b.n	8009c60 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e1e:	2903      	cmp	r1, #3
 8009e20:	d102      	bne.n	8009e28 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e22:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8009e26:	e7de      	b.n	8009de6 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009e28:	2901      	cmp	r1, #1
 8009e2a:	d102      	bne.n	8009e32 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e2c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009e30:	e7d9      	b.n	8009de6 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e32:	f012 0f04 	tst.w	r2, #4
 8009e36:	e7d6      	b.n	8009de6 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009e38:	4914      	ldr	r1, [pc, #80]	@ (8009e8c <HAL_RCC_ClockConfig+0x238>)
 8009e3a:	68e0      	ldr	r0, [r4, #12]
 8009e3c:	698a      	ldr	r2, [r1, #24]
 8009e3e:	f002 020f 	and.w	r2, r2, #15
 8009e42:	4290      	cmp	r0, r2
 8009e44:	f4bf af57 	bcs.w	8009cf6 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e48:	698a      	ldr	r2, [r1, #24]
 8009e4a:	f022 020f 	bic.w	r2, r2, #15
 8009e4e:	4302      	orrs	r2, r0
 8009e50:	618a      	str	r2, [r1, #24]
 8009e52:	e750      	b.n	8009cf6 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e54:	680a      	ldr	r2, [r1, #0]
 8009e56:	f022 020f 	bic.w	r2, r2, #15
 8009e5a:	432a      	orrs	r2, r5
 8009e5c:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e5e:	680a      	ldr	r2, [r1, #0]
 8009e60:	f002 020f 	and.w	r2, r2, #15
 8009e64:	42aa      	cmp	r2, r5
 8009e66:	f47f aefa 	bne.w	8009c5e <HAL_RCC_ClockConfig+0xa>
 8009e6a:	e74b      	b.n	8009d04 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009e6c:	4907      	ldr	r1, [pc, #28]	@ (8009e8c <HAL_RCC_ClockConfig+0x238>)
 8009e6e:	6920      	ldr	r0, [r4, #16]
 8009e70:	698a      	ldr	r2, [r1, #24]
 8009e72:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009e76:	4290      	cmp	r0, r2
 8009e78:	f4bf af47 	bcs.w	8009d0a <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009e7c:	698a      	ldr	r2, [r1, #24]
 8009e7e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009e82:	4302      	orrs	r2, r0
 8009e84:	618a      	str	r2, [r1, #24]
 8009e86:	e740      	b.n	8009d0a <HAL_RCC_ClockConfig+0xb6>
 8009e88:	52002000 	.word	0x52002000
 8009e8c:	58024400 	.word	0x58024400
 8009e90:	080238f8 	.word	0x080238f8
 8009e94:	24000068 	.word	0x24000068
 8009e98:	2400006c 	.word	0x2400006c
 8009e9c:	24000074 	.word	0x24000074

08009ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ea0:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009ea2:	f7ff fe35 	bl	8009b10 <HAL_RCC_GetSysClockFreq>
 8009ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8009ed4 <HAL_RCC_GetHCLKFreq+0x34>)
 8009ea8:	490b      	ldr	r1, [pc, #44]	@ (8009ed8 <HAL_RCC_GetHCLKFreq+0x38>)
 8009eaa:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009eac:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009eae:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009eb2:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009eb6:	5ccb      	ldrb	r3, [r1, r3]
 8009eb8:	f003 031f 	and.w	r3, r3, #31
 8009ebc:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ec0:	5c88      	ldrb	r0, [r1, r2]
 8009ec2:	4a06      	ldr	r2, [pc, #24]	@ (8009edc <HAL_RCC_GetHCLKFreq+0x3c>)
 8009ec4:	f000 001f 	and.w	r0, r0, #31
 8009ec8:	fa23 f000 	lsr.w	r0, r3, r0
 8009ecc:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009ece:	4a04      	ldr	r2, [pc, #16]	@ (8009ee0 <HAL_RCC_GetHCLKFreq+0x40>)
 8009ed0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8009ed2:	bd08      	pop	{r3, pc}
 8009ed4:	58024400 	.word	0x58024400
 8009ed8:	080238f8 	.word	0x080238f8
 8009edc:	24000068 	.word	0x24000068
 8009ee0:	2400006c 	.word	0x2400006c

08009ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ee4:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009ee6:	f7ff ffdb 	bl	8009ea0 <HAL_RCC_GetHCLKFreq>
 8009eea:	4b05      	ldr	r3, [pc, #20]	@ (8009f00 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009eec:	4a05      	ldr	r2, [pc, #20]	@ (8009f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009ef4:	5cd3      	ldrb	r3, [r2, r3]
 8009ef6:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009efa:	40d8      	lsrs	r0, r3
 8009efc:	bd08      	pop	{r3, pc}
 8009efe:	bf00      	nop
 8009f00:	58024400 	.word	0x58024400
 8009f04:	080238f8 	.word	0x080238f8

08009f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f08:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009f0a:	f7ff ffc9 	bl	8009ea0 <HAL_RCC_GetHCLKFreq>
 8009f0e:	4b05      	ldr	r3, [pc, #20]	@ (8009f24 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009f10:	4a05      	ldr	r2, [pc, #20]	@ (8009f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009f12:	69db      	ldr	r3, [r3, #28]
 8009f14:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009f18:	5cd3      	ldrb	r3, [r2, r3]
 8009f1a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009f1e:	40d8      	lsrs	r0, r3
 8009f20:	bd08      	pop	{r3, pc}
 8009f22:	bf00      	nop
 8009f24:	58024400 	.word	0x58024400
 8009f28:	080238f8 	.word	0x080238f8

08009f2c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009f2c:	233f      	movs	r3, #63	@ 0x3f
 8009f2e:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009f30:	4b11      	ldr	r3, [pc, #68]	@ (8009f78 <HAL_RCC_GetClockConfig+0x4c>)
 8009f32:	691a      	ldr	r2, [r3, #16]
 8009f34:	f002 0207 	and.w	r2, r2, #7
 8009f38:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009f3a:	699a      	ldr	r2, [r3, #24]
 8009f3c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8009f40:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009f42:	699a      	ldr	r2, [r3, #24]
 8009f44:	f002 020f 	and.w	r2, r2, #15
 8009f48:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009f4a:	699a      	ldr	r2, [r3, #24]
 8009f4c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009f50:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009f52:	69da      	ldr	r2, [r3, #28]
 8009f54:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009f58:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009f5a:	69da      	ldr	r2, [r3, #28]
 8009f5c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009f60:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009f62:	6a1b      	ldr	r3, [r3, #32]
 8009f64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009f68:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009f6a:	4b04      	ldr	r3, [pc, #16]	@ (8009f7c <HAL_RCC_GetClockConfig+0x50>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 030f 	and.w	r3, r3, #15
 8009f72:	600b      	str	r3, [r1, #0]
}
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	58024400 	.word	0x58024400
 8009f7c:	52002000 	.word	0x52002000

08009f80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f82:	4c3a      	ldr	r4, [pc, #232]	@ (800a06c <RCCEx_PLL2_Config+0xec>)
{
 8009f84:	4606      	mov	r6, r0
 8009f86:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f88:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009f8a:	f003 0303 	and.w	r3, r3, #3
 8009f8e:	2b03      	cmp	r3, #3
 8009f90:	d069      	beq.n	800a066 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f98:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f9a:	f7fc f95b 	bl	8006254 <HAL_GetTick>
 8009f9e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fa0:	6823      	ldr	r3, [r4, #0]
 8009fa2:	011a      	lsls	r2, r3, #4
 8009fa4:	d44b      	bmi.n	800a03e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009fa6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009fa8:	6832      	ldr	r2, [r6, #0]
 8009faa:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009fae:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8009fb2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009fb4:	68b3      	ldr	r3, [r6, #8]
 8009fb6:	68f2      	ldr	r2, [r6, #12]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	3a01      	subs	r2, #1
 8009fbc:	025b      	lsls	r3, r3, #9
 8009fbe:	0412      	lsls	r2, r2, #16
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	6872      	ldr	r2, [r6, #4]
 8009fca:	3a01      	subs	r2, #1
 8009fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	6932      	ldr	r2, [r6, #16]
 8009fd4:	3a01      	subs	r2, #1
 8009fd6:	0612      	lsls	r2, r2, #24
 8009fd8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009fe0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009fe2:	6972      	ldr	r2, [r6, #20]
 8009fe4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009fec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009fee:	69b2      	ldr	r2, [r6, #24]
 8009ff0:	f023 0320 	bic.w	r3, r3, #32
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009ff8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009ffa:	f023 0310 	bic.w	r3, r3, #16
 8009ffe:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a000:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a002:	69f2      	ldr	r2, [r6, #28]
 800a004:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a008:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a00c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a010:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a012:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a014:	f043 0310 	orr.w	r3, r3, #16
 800a018:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a01a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a01c:	b9b5      	cbnz	r5, 800a04c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a01e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a022:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a024:	4c11      	ldr	r4, [pc, #68]	@ (800a06c <RCCEx_PLL2_Config+0xec>)
 800a026:	6823      	ldr	r3, [r4, #0]
 800a028:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a02c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a02e:	f7fc f911 	bl	8006254 <HAL_GetTick>
 800a032:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a034:	6823      	ldr	r3, [r4, #0]
 800a036:	011b      	lsls	r3, r3, #4
 800a038:	d50f      	bpl.n	800a05a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800a03a:	2000      	movs	r0, #0
 800a03c:	e005      	b.n	800a04a <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a03e:	f7fc f909 	bl	8006254 <HAL_GetTick>
 800a042:	1bc0      	subs	r0, r0, r7
 800a044:	2802      	cmp	r0, #2
 800a046:	d9ab      	bls.n	8009fa0 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800a048:	2003      	movs	r0, #3
}
 800a04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800a04c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a04e:	bf0c      	ite	eq
 800a050:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a054:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800a058:	e7e3      	b.n	800a022 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a05a:	f7fc f8fb 	bl	8006254 <HAL_GetTick>
 800a05e:	1b40      	subs	r0, r0, r5
 800a060:	2802      	cmp	r0, #2
 800a062:	d9e7      	bls.n	800a034 <RCCEx_PLL2_Config+0xb4>
 800a064:	e7f0      	b.n	800a048 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800a066:	2001      	movs	r0, #1
 800a068:	e7ef      	b.n	800a04a <RCCEx_PLL2_Config+0xca>
 800a06a:	bf00      	nop
 800a06c:	58024400 	.word	0x58024400

0800a070 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a072:	4c3a      	ldr	r4, [pc, #232]	@ (800a15c <RCCEx_PLL3_Config+0xec>)
{
 800a074:	4606      	mov	r6, r0
 800a076:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a078:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a07a:	f003 0303 	and.w	r3, r3, #3
 800a07e:	2b03      	cmp	r3, #3
 800a080:	d069      	beq.n	800a156 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a082:	6823      	ldr	r3, [r4, #0]
 800a084:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a088:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a08a:	f7fc f8e3 	bl	8006254 <HAL_GetTick>
 800a08e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	009a      	lsls	r2, r3, #2
 800a094:	d44b      	bmi.n	800a12e <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a096:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a098:	6832      	ldr	r2, [r6, #0]
 800a09a:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800a09e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800a0a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a0a4:	68b3      	ldr	r3, [r6, #8]
 800a0a6:	68f2      	ldr	r2, [r6, #12]
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	3a01      	subs	r2, #1
 800a0ac:	025b      	lsls	r3, r3, #9
 800a0ae:	0412      	lsls	r2, r2, #16
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	6872      	ldr	r2, [r6, #4]
 800a0ba:	3a01      	subs	r2, #1
 800a0bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	6932      	ldr	r2, [r6, #16]
 800a0c4:	3a01      	subs	r2, #1
 800a0c6:	0612      	lsls	r2, r2, #24
 800a0c8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a0d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a0d2:	6972      	ldr	r2, [r6, #20]
 800a0d4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a0dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a0de:	69b2      	ldr	r2, [r6, #24]
 800a0e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a0e8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a0ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0ee:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a0f0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a0f2:	69f2      	ldr	r2, [r6, #28]
 800a0f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a0f8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a0fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a100:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a102:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a108:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a10a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a10c:	b9b5      	cbnz	r5, 800a13c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a10e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a112:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a114:	4c11      	ldr	r4, [pc, #68]	@ (800a15c <RCCEx_PLL3_Config+0xec>)
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a11c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a11e:	f7fc f899 	bl	8006254 <HAL_GetTick>
 800a122:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a124:	6823      	ldr	r3, [r4, #0]
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	d50f      	bpl.n	800a14a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800a12a:	2000      	movs	r0, #0
 800a12c:	e005      	b.n	800a13a <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a12e:	f7fc f891 	bl	8006254 <HAL_GetTick>
 800a132:	1bc0      	subs	r0, r0, r7
 800a134:	2802      	cmp	r0, #2
 800a136:	d9ab      	bls.n	800a090 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800a138:	2003      	movs	r0, #3
}
 800a13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800a13c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a13e:	bf0c      	ite	eq
 800a140:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a144:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800a148:	e7e3      	b.n	800a112 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a14a:	f7fc f883 	bl	8006254 <HAL_GetTick>
 800a14e:	1b40      	subs	r0, r0, r5
 800a150:	2802      	cmp	r0, #2
 800a152:	d9e7      	bls.n	800a124 <RCCEx_PLL3_Config+0xb4>
 800a154:	e7f0      	b.n	800a138 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800a156:	2001      	movs	r0, #1
 800a158:	e7ef      	b.n	800a13a <RCCEx_PLL3_Config+0xca>
 800a15a:	bf00      	nop
 800a15c:	58024400 	.word	0x58024400

0800a160 <HAL_RCCEx_PeriphCLKConfig>:
{
 800a160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a164:	6803      	ldr	r3, [r0, #0]
{
 800a166:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a168:	011c      	lsls	r4, r3, #4
 800a16a:	d51e      	bpl.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a16c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800a16e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a172:	d02a      	beq.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a174:	d80f      	bhi.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800a176:	b1d3      	cbz	r3, 800a1ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800a178:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a17c:	d01d      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800a17e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a180:	682b      	ldr	r3, [r5, #0]
 800a182:	05d8      	lsls	r0, r3, #23
 800a184:	d54f      	bpl.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a186:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800a188:	2b04      	cmp	r3, #4
 800a18a:	d84b      	bhi.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800a18c:	e8df f003 	tbb	[pc, r3]
 800a190:	27443d22 	.word	0x27443d22
 800a194:	27          	.byte	0x27
 800a195:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a196:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a19a:	d1f0      	bne.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a19c:	4a86      	ldr	r2, [pc, #536]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a19e:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800a1a0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a1a2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a1a6:	430b      	orrs	r3, r1
 800a1a8:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a1aa:	2600      	movs	r6, #0
 800a1ac:	e7e8      	b.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1ae:	4a82      	ldr	r2, [pc, #520]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a1b0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a1b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a1b8:	e7f0      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a1ba:	2102      	movs	r1, #2
 800a1bc:	3008      	adds	r0, #8
 800a1be:	f7ff fedf 	bl	8009f80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1c2:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d1db      	bne.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800a1c8:	e7e8      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1ca:	2102      	movs	r1, #2
 800a1cc:	3028      	adds	r0, #40	@ 0x28
 800a1ce:	f7ff ff4f 	bl	800a070 <RCCEx_PLL3_Config>
 800a1d2:	e7f6      	b.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1d4:	4a78      	ldr	r2, [pc, #480]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a1d6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a1d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a1de:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800a1e0:	bb1c      	cbnz	r4, 800a22a <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a1e2:	4a75      	ldr	r2, [pc, #468]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a1e4:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800a1e6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a1e8:	f023 0307 	bic.w	r3, r3, #7
 800a1ec:	430b      	orrs	r3, r1
 800a1ee:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a1f0:	682b      	ldr	r3, [r5, #0]
 800a1f2:	0599      	lsls	r1, r3, #22
 800a1f4:	d528      	bpl.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a1f6:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800a1f8:	2b80      	cmp	r3, #128	@ 0x80
 800a1fa:	d043      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800a1fc:	d817      	bhi.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800a1fe:	b3a3      	cbz	r3, 800a26a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800a200:	2b40      	cmp	r3, #64	@ 0x40
 800a202:	d038      	beq.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a204:	2601      	movs	r6, #1
 800a206:	4634      	mov	r4, r6
 800a208:	e01e      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a20a:	2100      	movs	r1, #0
 800a20c:	f105 0008 	add.w	r0, r5, #8
 800a210:	f7ff feb6 	bl	8009f80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a214:	4604      	mov	r4, r0
        break;
 800a216:	e7e3      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a218:	2100      	movs	r1, #0
 800a21a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a21e:	f7ff ff27 	bl	800a070 <RCCEx_PLL3_Config>
 800a222:	e7f7      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a224:	2601      	movs	r6, #1
 800a226:	4634      	mov	r4, r6
 800a228:	e7e2      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a22a:	4626      	mov	r6, r4
 800a22c:	e7e0      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a22e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a230:	d002      	beq.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800a232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a236:	d1e5      	bne.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800a238:	bb54      	cbnz	r4, 800a290 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a23a:	4a5f      	ldr	r2, [pc, #380]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a23c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a23e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a240:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800a244:	430b      	orrs	r3, r1
 800a246:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a248:	682b      	ldr	r3, [r5, #0]
 800a24a:	055a      	lsls	r2, r3, #21
 800a24c:	d531      	bpl.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a24e:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800a252:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a256:	d049      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a258:	d81c      	bhi.n	800a294 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d039      	beq.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800a25e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a262:	d03c      	beq.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800a264:	2601      	movs	r6, #1
 800a266:	4634      	mov	r4, r6
 800a268:	e023      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a26a:	4a53      	ldr	r2, [pc, #332]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a26c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a26e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a272:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a274:	e7e0      	b.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a276:	2100      	movs	r1, #0
 800a278:	f105 0008 	add.w	r0, r5, #8
 800a27c:	f7ff fe80 	bl	8009f80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a280:	4604      	mov	r4, r0
        break;
 800a282:	e7d9      	b.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a284:	2100      	movs	r1, #0
 800a286:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a28a:	f7ff fef1 	bl	800a070 <RCCEx_PLL3_Config>
 800a28e:	e7f7      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800a290:	4626      	mov	r6, r4
 800a292:	e7d9      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a294:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a298:	d002      	beq.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800a29a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a29e:	d1e1      	bne.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800a2a0:	bb54      	cbnz	r4, 800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a2a2:	4a45      	ldr	r2, [pc, #276]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a2a4:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800a2a8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a2aa:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800a2ae:	430b      	orrs	r3, r1
 800a2b0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a2b2:	682b      	ldr	r3, [r5, #0]
 800a2b4:	051b      	lsls	r3, r3, #20
 800a2b6:	d530      	bpl.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a2b8:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800a2bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2c0:	d045      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a2c2:	d81b      	bhi.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800a2c4:	b3b3      	cbz	r3, 800a334 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a2c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2ca:	d039      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800a2cc:	2601      	movs	r6, #1
 800a2ce:	4634      	mov	r4, r6
 800a2d0:	e023      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2d2:	4a39      	ldr	r2, [pc, #228]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a2d4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a2d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2da:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a2dc:	e7e0      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2de:	2100      	movs	r1, #0
 800a2e0:	f105 0008 	add.w	r0, r5, #8
 800a2e4:	f7ff fe4c 	bl	8009f80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a2e8:	4604      	mov	r4, r0
        break;
 800a2ea:	e7d9      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a2f2:	f7ff febd 	bl	800a070 <RCCEx_PLL3_Config>
 800a2f6:	e7f7      	b.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800a2f8:	4626      	mov	r6, r4
 800a2fa:	e7da      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a2fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a300:	d002      	beq.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a302:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a306:	d1e1      	bne.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800a308:	bb3c      	cbnz	r4, 800a35a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a30a:	4a2b      	ldr	r2, [pc, #172]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a30c:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800a310:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a312:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800a316:	430b      	orrs	r3, r1
 800a318:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a31a:	682b      	ldr	r3, [r5, #0]
 800a31c:	019f      	lsls	r7, r3, #6
 800a31e:	d528      	bpl.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800a320:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800a322:	2b20      	cmp	r3, #32
 800a324:	d03e      	beq.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800a326:	d81a      	bhi.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a328:	b1db      	cbz	r3, 800a362 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a32a:	2b10      	cmp	r3, #16
 800a32c:	d034      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800a32e:	2601      	movs	r6, #1
 800a330:	4634      	mov	r4, r6
 800a332:	e01e      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a334:	4a20      	ldr	r2, [pc, #128]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a336:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a33c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a33e:	e7e3      	b.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a340:	2100      	movs	r1, #0
 800a342:	f105 0008 	add.w	r0, r5, #8
 800a346:	f7ff fe1b 	bl	8009f80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a34a:	4604      	mov	r4, r0
        break;
 800a34c:	e7dc      	b.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a34e:	2100      	movs	r1, #0
 800a350:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a354:	f7ff fe8c 	bl	800a070 <RCCEx_PLL3_Config>
 800a358:	e7f7      	b.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a35a:	4626      	mov	r6, r4
 800a35c:	e7dd      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800a35e:	2b30      	cmp	r3, #48	@ 0x30
 800a360:	d1e5      	bne.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800a362:	bb34      	cbnz	r4, 800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a364:	4a14      	ldr	r2, [pc, #80]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a366:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a368:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a36a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a36e:	430b      	orrs	r3, r1
 800a370:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a372:	682b      	ldr	r3, [r5, #0]
 800a374:	04d8      	lsls	r0, r3, #19
 800a376:	d530      	bpl.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800a378:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a37a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a37e:	f000 8097 	beq.w	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800a382:	d81b      	bhi.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 8086 	beq.w	800a496 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800a38a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a38e:	f000 8088 	beq.w	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a392:	2601      	movs	r6, #1
 800a394:	4634      	mov	r4, r6
 800a396:	e020      	b.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a398:	4a07      	ldr	r2, [pc, #28]	@ (800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a39a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a39c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a3a2:	e7de      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3a4:	2102      	movs	r1, #2
 800a3a6:	f105 0008 	add.w	r0, r5, #8
 800a3aa:	f7ff fde9 	bl	8009f80 <RCCEx_PLL2_Config>
 800a3ae:	4604      	mov	r4, r0
        break;
 800a3b0:	e7d7      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a3b2:	4626      	mov	r6, r4
 800a3b4:	e7dd      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800a3b6:	bf00      	nop
 800a3b8:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800a3bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a3c0:	d002      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800a3c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3c6:	d1e4      	bne.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800a3c8:	2c00      	cmp	r4, #0
 800a3ca:	d177      	bne.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a3cc:	4a9e      	ldr	r2, [pc, #632]	@ (800a648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a3ce:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800a3d0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a3d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3d6:	430b      	orrs	r3, r1
 800a3d8:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a3da:	682b      	ldr	r3, [r5, #0]
 800a3dc:	0499      	lsls	r1, r3, #18
 800a3de:	d50c      	bpl.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a3e0:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800a3e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3e6:	f000 8083 	beq.w	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800a3ea:	d869      	bhi.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d06f      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800a3f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3f4:	d075      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a3f6:	2601      	movs	r6, #1
 800a3f8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a3fa:	682b      	ldr	r3, [r5, #0]
 800a3fc:	045a      	lsls	r2, r3, #17
 800a3fe:	d50e      	bpl.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a400:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800a404:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a408:	f000 8093 	beq.w	800a532 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800a40c:	d878      	bhi.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d07e      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800a412:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a416:	f000 8085 	beq.w	800a524 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800a41a:	2601      	movs	r6, #1
 800a41c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a41e:	682b      	ldr	r3, [r5, #0]
 800a420:	015b      	lsls	r3, r3, #5
 800a422:	d515      	bpl.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800a424:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a426:	b14b      	cbz	r3, 800a43c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800a428:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a42c:	f040 8089 	bne.w	800a542 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a430:	2101      	movs	r1, #1
 800a432:	f105 0008 	add.w	r0, r5, #8
 800a436:	f7ff fda3 	bl	8009f80 <RCCEx_PLL2_Config>
 800a43a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a43c:	2c00      	cmp	r4, #0
 800a43e:	f040 8083 	bne.w	800a548 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800a442:	4a81      	ldr	r2, [pc, #516]	@ (800a648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a444:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800a446:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a44c:	430b      	orrs	r3, r1
 800a44e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a450:	682b      	ldr	r3, [r5, #0]
 800a452:	041f      	lsls	r7, r3, #16
 800a454:	d511      	bpl.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800a456:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a458:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a45c:	d076      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a45e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a462:	d079      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a464:	2b00      	cmp	r3, #0
 800a466:	d17e      	bne.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800a468:	2c00      	cmp	r4, #0
 800a46a:	d17f      	bne.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a46c:	4a76      	ldr	r2, [pc, #472]	@ (800a648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a46e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800a470:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a472:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800a476:	430b      	orrs	r3, r1
 800a478:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a47a:	682b      	ldr	r3, [r5, #0]
 800a47c:	01d8      	lsls	r0, r3, #7
 800a47e:	f140 8085 	bpl.w	800a58c <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800a482:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800a484:	2b03      	cmp	r3, #3
 800a486:	f200 80e5 	bhi.w	800a654 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800a48a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a48e:	0076      	.short	0x0076
 800a490:	00d50071 	.word	0x00d50071
 800a494:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a496:	4a6c      	ldr	r2, [pc, #432]	@ (800a648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a498:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a49a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a49e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a4a0:	e792      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	f105 0008 	add.w	r0, r5, #8
 800a4a8:	f7ff fd6a 	bl	8009f80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a4ac:	4604      	mov	r4, r0
        break;
 800a4ae:	e78b      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a4b6:	f7ff fddb 	bl	800a070 <RCCEx_PLL3_Config>
 800a4ba:	e7f7      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a4bc:	4626      	mov	r6, r4
 800a4be:	e78c      	b.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a4c0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a4c4:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800a4c8:	d002      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800a4ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a4ce:	d192      	bne.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800a4d0:	b9a4      	cbnz	r4, 800a4fc <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a4d2:	4a5d      	ldr	r2, [pc, #372]	@ (800a648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a4d4:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800a4d6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a4d8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a4dc:	430b      	orrs	r3, r1
 800a4de:	6513      	str	r3, [r2, #80]	@ 0x50
 800a4e0:	e78b      	b.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4e2:	2101      	movs	r1, #1
 800a4e4:	f105 0008 	add.w	r0, r5, #8
 800a4e8:	f7ff fd4a 	bl	8009f80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4ec:	4604      	mov	r4, r0
        break;
 800a4ee:	e7ef      	b.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4f0:	2101      	movs	r1, #1
 800a4f2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a4f6:	f7ff fdbb 	bl	800a070 <RCCEx_PLL3_Config>
 800a4fa:	e7f7      	b.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800a4fc:	4626      	mov	r6, r4
 800a4fe:	e77c      	b.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a500:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a504:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800a508:	d002      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800a50a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a50e:	d184      	bne.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800a510:	b9ac      	cbnz	r4, 800a53e <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a512:	4a4d      	ldr	r2, [pc, #308]	@ (800a648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a514:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800a518:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a51a:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800a51e:	430b      	orrs	r3, r1
 800a520:	6593      	str	r3, [r2, #88]	@ 0x58
 800a522:	e77c      	b.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a524:	2101      	movs	r1, #1
 800a526:	f105 0008 	add.w	r0, r5, #8
 800a52a:	f7ff fd29 	bl	8009f80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a52e:	4604      	mov	r4, r0
        break;
 800a530:	e7ee      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a532:	2101      	movs	r1, #1
 800a534:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a538:	f7ff fd9a 	bl	800a070 <RCCEx_PLL3_Config>
 800a53c:	e7f7      	b.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a53e:	4626      	mov	r6, r4
 800a540:	e76d      	b.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800a542:	2601      	movs	r6, #1
 800a544:	4634      	mov	r4, r6
 800a546:	e783      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800a548:	4626      	mov	r6, r4
 800a54a:	e781      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a54c:	4a3e      	ldr	r2, [pc, #248]	@ (800a648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a54e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a554:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a556:	e787      	b.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a558:	2101      	movs	r1, #1
 800a55a:	f105 0008 	add.w	r0, r5, #8
 800a55e:	f7ff fd0f 	bl	8009f80 <RCCEx_PLL2_Config>
 800a562:	4604      	mov	r4, r0
        break;
 800a564:	e780      	b.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800a566:	2601      	movs	r6, #1
 800a568:	4634      	mov	r4, r6
 800a56a:	e786      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800a56c:	4626      	mov	r6, r4
 800a56e:	e784      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a570:	4a35      	ldr	r2, [pc, #212]	@ (800a648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a572:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a578:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a57a:	2c00      	cmp	r4, #0
 800a57c:	d16d      	bne.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a57e:	4a32      	ldr	r2, [pc, #200]	@ (800a648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a580:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800a582:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a584:	f023 0303 	bic.w	r3, r3, #3
 800a588:	430b      	orrs	r3, r1
 800a58a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a58c:	682b      	ldr	r3, [r5, #0]
 800a58e:	0259      	lsls	r1, r3, #9
 800a590:	d539      	bpl.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a592:	4f2e      	ldr	r7, [pc, #184]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a59a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a59c:	f7fb fe5a 	bl	8006254 <HAL_GetTick>
 800a5a0:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	05da      	lsls	r2, r3, #23
 800a5a6:	d55a      	bpl.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800a5a8:	2c00      	cmp	r4, #0
 800a5aa:	d176      	bne.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a5ac:	4b26      	ldr	r3, [pc, #152]	@ (800a648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a5ae:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800a5b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a5b4:	4042      	eors	r2, r0
 800a5b6:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800a5ba:	d00b      	beq.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a5bc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800a5be:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a5c0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800a5c4:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800a5c8:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a5ca:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a5cc:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800a5d0:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800a5d2:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a5d4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a5d8:	d04a      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a5da:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800a5de:	491a      	ldr	r1, [pc, #104]	@ (800a648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a5e0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800a5e4:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800a5e8:	d153      	bne.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0x532>
 800a5ea:	6908      	ldr	r0, [r1, #16]
 800a5ec:	4a18      	ldr	r2, [pc, #96]	@ (800a650 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800a5ee:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800a5f2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800a5f6:	4302      	orrs	r2, r0
 800a5f8:	610a      	str	r2, [r1, #16]
 800a5fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5fe:	4a12      	ldr	r2, [pc, #72]	@ (800a648 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a600:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800a602:	430b      	orrs	r3, r1
 800a604:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a606:	682b      	ldr	r3, [r5, #0]
 800a608:	07d8      	lsls	r0, r3, #31
 800a60a:	d50a      	bpl.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a60c:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800a610:	2b10      	cmp	r3, #16
 800a612:	d05b      	beq.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800a614:	d843      	bhi.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800a616:	2b00      	cmp	r3, #0
 800a618:	d047      	beq.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800a61a:	2b08      	cmp	r3, #8
 800a61c:	d04f      	beq.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800a61e:	2601      	movs	r6, #1
 800a620:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a622:	682b      	ldr	r3, [r5, #0]
 800a624:	0799      	lsls	r1, r3, #30
 800a626:	d567      	bpl.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a628:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800a62a:	2b05      	cmp	r3, #5
 800a62c:	d87a      	bhi.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800a62e:	e8df f003 	tbb	[pc, r3]
 800a632:	555b      	.short	0x555b
 800a634:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a638:	2102      	movs	r1, #2
 800a63a:	f105 0008 	add.w	r0, r5, #8
 800a63e:	f7ff fc9f 	bl	8009f80 <RCCEx_PLL2_Config>
 800a642:	4604      	mov	r4, r0
        break;
 800a644:	e799      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a646:	bf00      	nop
 800a648:	58024400 	.word	0x58024400
 800a64c:	58024800 	.word	0x58024800
 800a650:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800a654:	2601      	movs	r6, #1
 800a656:	4634      	mov	r4, r6
 800a658:	e798      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800a65a:	4626      	mov	r6, r4
 800a65c:	e796      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a65e:	f7fb fdf9 	bl	8006254 <HAL_GetTick>
 800a662:	eba0 0008 	sub.w	r0, r0, r8
 800a666:	2864      	cmp	r0, #100	@ 0x64
 800a668:	d99b      	bls.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800a66a:	2603      	movs	r6, #3
 800a66c:	4634      	mov	r4, r6
 800a66e:	e7ca      	b.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800a670:	f7fb fdf0 	bl	8006254 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a674:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800a730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800a678:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a67a:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a67e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800a682:	079b      	lsls	r3, r3, #30
 800a684:	d4a9      	bmi.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a686:	f7fb fde5 	bl	8006254 <HAL_GetTick>
 800a68a:	1bc0      	subs	r0, r0, r7
 800a68c:	4548      	cmp	r0, r9
 800a68e:	d9f6      	bls.n	800a67e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800a690:	e7eb      	b.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a692:	690a      	ldr	r2, [r1, #16]
 800a694:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800a698:	e7ae      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a69a:	4626      	mov	r6, r4
 800a69c:	e7b3      	b.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a69e:	f023 0208 	bic.w	r2, r3, #8
 800a6a2:	2a20      	cmp	r2, #32
 800a6a4:	d001      	beq.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800a6a6:	2b18      	cmp	r3, #24
 800a6a8:	d1b9      	bne.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800a6aa:	b9ac      	cbnz	r4, 800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a6ac:	4a20      	ldr	r2, [pc, #128]	@ (800a730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a6ae:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800a6b2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a6b4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800a6b8:	430b      	orrs	r3, r1
 800a6ba:	6553      	str	r3, [r2, #84]	@ 0x54
 800a6bc:	e7b1      	b.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6be:	2101      	movs	r1, #1
 800a6c0:	f105 0008 	add.w	r0, r5, #8
 800a6c4:	f7ff fc5c 	bl	8009f80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6c8:	4604      	mov	r4, r0
        break;
 800a6ca:	e7ee      	b.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6cc:	2101      	movs	r1, #1
 800a6ce:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a6d2:	f7ff fccd 	bl	800a070 <RCCEx_PLL3_Config>
 800a6d6:	e7f7      	b.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800a6d8:	4626      	mov	r6, r4
 800a6da:	e7a2      	b.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6dc:	2101      	movs	r1, #1
 800a6de:	f105 0008 	add.w	r0, r5, #8
 800a6e2:	f7ff fc4d 	bl	8009f80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6e6:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a6e8:	b9fc      	cbnz	r4, 800a72a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a6ea:	4a11      	ldr	r2, [pc, #68]	@ (800a730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a6ec:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800a6ee:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a6f0:	f023 0307 	bic.w	r3, r3, #7
 800a6f4:	430b      	orrs	r3, r1
 800a6f6:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	075a      	lsls	r2, r3, #29
 800a6fc:	d52b      	bpl.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a6fe:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800a702:	2b05      	cmp	r3, #5
 800a704:	f200 816e 	bhi.w	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x884>
 800a708:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a70c:	0014001a 	.word	0x0014001a
 800a710:	001a0166 	.word	0x001a0166
 800a714:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a718:	2101      	movs	r1, #1
 800a71a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a71e:	f7ff fca7 	bl	800a070 <RCCEx_PLL3_Config>
 800a722:	e7e0      	b.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a724:	2601      	movs	r6, #1
 800a726:	4634      	mov	r4, r6
 800a728:	e7e6      	b.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a72a:	4626      	mov	r6, r4
 800a72c:	e7e4      	b.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a72e:	bf00      	nop
 800a730:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a734:	2101      	movs	r1, #1
 800a736:	f105 0008 	add.w	r0, r5, #8
 800a73a:	f7ff fc21 	bl	8009f80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a73e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a740:	2c00      	cmp	r4, #0
 800a742:	f040 8152 	bne.w	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a746:	4aaa      	ldr	r2, [pc, #680]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a748:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800a74c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a74e:	f023 0307 	bic.w	r3, r3, #7
 800a752:	430b      	orrs	r3, r1
 800a754:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a756:	682b      	ldr	r3, [r5, #0]
 800a758:	069b      	lsls	r3, r3, #26
 800a75a:	d510      	bpl.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a75c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800a760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a764:	f000 8160 	beq.w	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800a768:	f200 8144 	bhi.w	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f000 814a 	beq.w	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800a772:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a776:	f000 8150 	beq.w	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800a77a:	2601      	movs	r6, #1
 800a77c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a77e:	682b      	ldr	r3, [r5, #0]
 800a780:	065f      	lsls	r7, r3, #25
 800a782:	d510      	bpl.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a784:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800a788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a78c:	f000 816e 	beq.w	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800a790:	f200 8152 	bhi.w	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800a794:	2b00      	cmp	r3, #0
 800a796:	f000 8158 	beq.w	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800a79a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a79e:	f000 815e 	beq.w	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a7a2:	2601      	movs	r6, #1
 800a7a4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a7a6:	682b      	ldr	r3, [r5, #0]
 800a7a8:	0618      	lsls	r0, r3, #24
 800a7aa:	d510      	bpl.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a7ac:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800a7b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a7b4:	f000 817c 	beq.w	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800a7b8:	f200 8160 	bhi.w	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f000 8166 	beq.w	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800a7c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7c6:	f000 816c 	beq.w	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x942>
 800a7ca:	2601      	movs	r6, #1
 800a7cc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a7ce:	682b      	ldr	r3, [r5, #0]
 800a7d0:	0719      	lsls	r1, r3, #28
 800a7d2:	d514      	bpl.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a7d4:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800a7d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7dc:	d107      	bne.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a7de:	2102      	movs	r1, #2
 800a7e0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a7e4:	f7ff fc44 	bl	800a070 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	bf18      	it	ne
 800a7ec:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a7ee:	4a80      	ldr	r2, [pc, #512]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a7f0:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800a7f4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a7f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a7fa:	430b      	orrs	r3, r1
 800a7fc:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a7fe:	682b      	ldr	r3, [r5, #0]
 800a800:	06da      	lsls	r2, r3, #27
 800a802:	d514      	bpl.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a804:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800a808:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a80c:	d107      	bne.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a80e:	2102      	movs	r1, #2
 800a810:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a814:	f7ff fc2c 	bl	800a070 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a818:	2800      	cmp	r0, #0
 800a81a:	bf18      	it	ne
 800a81c:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a81e:	4a74      	ldr	r2, [pc, #464]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a820:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800a824:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a82a:	430b      	orrs	r3, r1
 800a82c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a82e:	682b      	ldr	r3, [r5, #0]
 800a830:	031b      	lsls	r3, r3, #12
 800a832:	d51b      	bpl.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800a834:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800a838:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800a83c:	f000 8140 	beq.w	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a840:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800a844:	d007      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800a846:	2900      	cmp	r1, #0
 800a848:	f040 8140 	bne.w	800aacc <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a84c:	f105 0008 	add.w	r0, r5, #8
 800a850:	f7ff fb96 	bl	8009f80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a854:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a856:	2c00      	cmp	r4, #0
 800a858:	f040 813b 	bne.w	800aad2 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a85c:	4a64      	ldr	r2, [pc, #400]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a85e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800a862:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a864:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a868:	430b      	orrs	r3, r1
 800a86a:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a86c:	682b      	ldr	r3, [r5, #0]
 800a86e:	035f      	lsls	r7, r3, #13
 800a870:	d50f      	bpl.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800a872:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800a876:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a87a:	f000 813b 	beq.w	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800a87e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a882:	f000 812d 	beq.w	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800a886:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a88a:	f000 8124 	beq.w	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800a88e:	2601      	movs	r6, #1
 800a890:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a892:	682b      	ldr	r3, [r5, #0]
 800a894:	03d8      	lsls	r0, r3, #15
 800a896:	d509      	bpl.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800a898:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f000 8133 	beq.w	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800a8a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8a4:	f000 813d 	beq.w	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800a8a8:	2601      	movs	r6, #1
 800a8aa:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a8ac:	682b      	ldr	r3, [r5, #0]
 800a8ae:	0099      	lsls	r1, r3, #2
 800a8b0:	d507      	bpl.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a8b2:	2102      	movs	r1, #2
 800a8b4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a8b8:	f7ff fbda 	bl	800a070 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	bf18      	it	ne
 800a8c0:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a8c2:	e9d5 3100 	ldrd	r3, r1, [r5]
 800a8c6:	039a      	lsls	r2, r3, #14
 800a8c8:	f140 8143 	bpl.w	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800a8cc:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800a8d0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a8d4:	f000 813f 	beq.w	800ab56 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800a8d8:	f200 812c 	bhi.w	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	f000 812f 	beq.w	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800a8e2:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a8e4:	02df      	lsls	r7, r3, #11
 800a8e6:	d506      	bpl.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a8e8:	4841      	ldr	r0, [pc, #260]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a8ea:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800a8ec:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a8ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a8f2:	4332      	orrs	r2, r6
 800a8f4:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a8f6:	00de      	lsls	r6, r3, #3
 800a8f8:	d507      	bpl.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a8fa:	483d      	ldr	r0, [pc, #244]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a8fc:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800a900:	6902      	ldr	r2, [r0, #16]
 800a902:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a906:	4332      	orrs	r2, r6
 800a908:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a90a:	0298      	lsls	r0, r3, #10
 800a90c:	d506      	bpl.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a90e:	4838      	ldr	r0, [pc, #224]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a910:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800a912:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a914:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a918:	4332      	orrs	r2, r6
 800a91a:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a91c:	005a      	lsls	r2, r3, #1
 800a91e:	d509      	bpl.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a920:	4a33      	ldr	r2, [pc, #204]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a922:	6910      	ldr	r0, [r2, #16]
 800a924:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800a928:	6110      	str	r0, [r2, #16]
 800a92a:	6910      	ldr	r0, [r2, #16]
 800a92c:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800a930:	4330      	orrs	r0, r6
 800a932:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a934:	2b00      	cmp	r3, #0
 800a936:	da06      	bge.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a938:	482d      	ldr	r0, [pc, #180]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a93a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a93c:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800a93e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a942:	4332      	orrs	r2, r6
 800a944:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a946:	021f      	lsls	r7, r3, #8
 800a948:	d507      	bpl.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a94a:	4a29      	ldr	r2, [pc, #164]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a94c:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800a950:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a952:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a956:	4303      	orrs	r3, r0
 800a958:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a95a:	07ce      	lsls	r6, r1, #31
 800a95c:	d506      	bpl.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a95e:	2100      	movs	r1, #0
 800a960:	f105 0008 	add.w	r0, r5, #8
 800a964:	f7ff fb0c 	bl	8009f80 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a968:	4607      	mov	r7, r0
 800a96a:	b900      	cbnz	r0, 800a96e <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800a96c:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a96e:	686b      	ldr	r3, [r5, #4]
 800a970:	079c      	lsls	r4, r3, #30
 800a972:	d506      	bpl.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a974:	2101      	movs	r1, #1
 800a976:	f105 0008 	add.w	r0, r5, #8
 800a97a:	f7ff fb01 	bl	8009f80 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a97e:	4606      	mov	r6, r0
 800a980:	b900      	cbnz	r0, 800a984 <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800a982:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a984:	686b      	ldr	r3, [r5, #4]
 800a986:	0758      	lsls	r0, r3, #29
 800a988:	d506      	bpl.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a98a:	2102      	movs	r1, #2
 800a98c:	f105 0008 	add.w	r0, r5, #8
 800a990:	f7ff faf6 	bl	8009f80 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a994:	4604      	mov	r4, r0
 800a996:	b900      	cbnz	r0, 800a99a <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800a998:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a99a:	686b      	ldr	r3, [r5, #4]
 800a99c:	0719      	lsls	r1, r3, #28
 800a99e:	d506      	bpl.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a9a6:	f7ff fb63 	bl	800a070 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	b900      	cbnz	r0, 800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800a9ae:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a9b0:	686b      	ldr	r3, [r5, #4]
 800a9b2:	06da      	lsls	r2, r3, #27
 800a9b4:	d506      	bpl.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9b6:	2101      	movs	r1, #1
 800a9b8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a9bc:	f7ff fb58 	bl	800a070 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	b900      	cbnz	r0, 800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800a9c4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a9c6:	686b      	ldr	r3, [r5, #4]
 800a9c8:	069b      	lsls	r3, r3, #26
 800a9ca:	f100 80ca 	bmi.w	800ab62 <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800a9ce:	1e20      	subs	r0, r4, #0
 800a9d0:	bf18      	it	ne
 800a9d2:	2001      	movne	r0, #1
}
 800a9d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9d8:	2101      	movs	r1, #1
 800a9da:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a9de:	f7ff fb47 	bl	800a070 <RCCEx_PLL3_Config>
 800a9e2:	e6ac      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a9e4:	2601      	movs	r6, #1
 800a9e6:	4634      	mov	r4, r6
 800a9e8:	e6b5      	b.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800a9ea:	4626      	mov	r6, r4
 800a9ec:	e6b3      	b.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800a9ee:	bf00      	nop
 800a9f0:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a9f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a9f8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800a9fc:	d003      	beq.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800a9fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa02:	f47f aeba 	bne.w	800a77a <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800aa06:	b9ac      	cbnz	r4, 800aa34 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa08:	4a5b      	ldr	r2, [pc, #364]	@ (800ab78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800aa0a:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800aa0e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800aa10:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800aa14:	430b      	orrs	r3, r1
 800aa16:	6553      	str	r3, [r2, #84]	@ 0x54
 800aa18:	e6b1      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	f105 0008 	add.w	r0, r5, #8
 800aa20:	f7ff faae 	bl	8009f80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa24:	4604      	mov	r4, r0
        break;
 800aa26:	e7ee      	b.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa28:	2102      	movs	r1, #2
 800aa2a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aa2e:	f7ff fb1f 	bl	800a070 <RCCEx_PLL3_Config>
 800aa32:	e7f7      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800aa34:	4626      	mov	r6, r4
 800aa36:	e6a2      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aa38:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800aa3c:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800aa40:	d003      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800aa42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa46:	f47f aeac 	bne.w	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800aa4a:	b9ac      	cbnz	r4, 800aa78 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aa4c:	4a4a      	ldr	r2, [pc, #296]	@ (800ab78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800aa4e:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800aa52:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800aa54:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800aa58:	430b      	orrs	r3, r1
 800aa5a:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa5c:	e6a3      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa5e:	2100      	movs	r1, #0
 800aa60:	f105 0008 	add.w	r0, r5, #8
 800aa64:	f7ff fa8c 	bl	8009f80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa68:	4604      	mov	r4, r0
        break;
 800aa6a:	e7ee      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa6c:	2102      	movs	r1, #2
 800aa6e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aa72:	f7ff fafd 	bl	800a070 <RCCEx_PLL3_Config>
 800aa76:	e7f7      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800aa78:	4626      	mov	r6, r4
 800aa7a:	e694      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800aa7c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800aa80:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800aa84:	d003      	beq.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800aa86:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aa8a:	f47f ae9e 	bne.w	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800aa8e:	b9ac      	cbnz	r4, 800aabc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aa90:	4a39      	ldr	r2, [pc, #228]	@ (800ab78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800aa92:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800aa96:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800aa98:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800aa9c:	430b      	orrs	r3, r1
 800aa9e:	6593      	str	r3, [r2, #88]	@ 0x58
 800aaa0:	e695      	b.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	f105 0008 	add.w	r0, r5, #8
 800aaa8:	f7ff fa6a 	bl	8009f80 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aaac:	4604      	mov	r4, r0
        break;
 800aaae:	e7ee      	b.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aab0:	2102      	movs	r1, #2
 800aab2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aab6:	f7ff fadb 	bl	800a070 <RCCEx_PLL3_Config>
 800aaba:	e7f7      	b.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800aabc:	4626      	mov	r6, r4
 800aabe:	e686      	b.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aac0:	2102      	movs	r1, #2
 800aac2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aac6:	f7ff fad3 	bl	800a070 <RCCEx_PLL3_Config>
 800aaca:	e6c3      	b.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800aacc:	2601      	movs	r6, #1
 800aace:	4634      	mov	r4, r6
 800aad0:	e6cc      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800aad2:	4626      	mov	r6, r4
 800aad4:	e6ca      	b.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aad6:	4a28      	ldr	r2, [pc, #160]	@ (800ab78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800aad8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800aada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aade:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800aae0:	b97c      	cbnz	r4, 800ab02 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aae2:	4a25      	ldr	r2, [pc, #148]	@ (800ab78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800aae4:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800aae8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800aaea:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800aaee:	430b      	orrs	r3, r1
 800aaf0:	6553      	str	r3, [r2, #84]	@ 0x54
 800aaf2:	e6ce      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aafa:	f7ff fab9 	bl	800a070 <RCCEx_PLL3_Config>
 800aafe:	4604      	mov	r4, r0
        break;
 800ab00:	e7ee      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800ab02:	4626      	mov	r6, r4
 800ab04:	e6c5      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab06:	4a1c      	ldr	r2, [pc, #112]	@ (800ab78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800ab08:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ab0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800ab10:	b974      	cbnz	r4, 800ab30 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ab12:	4a19      	ldr	r2, [pc, #100]	@ (800ab78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800ab14:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800ab16:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ab18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab1c:	430b      	orrs	r3, r1
 800ab1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ab20:	e6c4      	b.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab22:	2102      	movs	r1, #2
 800ab24:	f105 0008 	add.w	r0, r5, #8
 800ab28:	f7ff fa2a 	bl	8009f80 <RCCEx_PLL2_Config>
 800ab2c:	4604      	mov	r4, r0
        break;
 800ab2e:	e7ef      	b.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800ab30:	4626      	mov	r6, r4
 800ab32:	e6bb      	b.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800ab34:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800ab38:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800ab3c:	f47f aed1 	bne.w	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800ab40:	2c00      	cmp	r4, #0
 800ab42:	f47f aecf 	bne.w	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ab46:	4c0c      	ldr	r4, [pc, #48]	@ (800ab78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800ab48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab4a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800ab4e:	4302      	orrs	r2, r0
 800ab50:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800ab52:	4634      	mov	r4, r6
 800ab54:	e6c6      	b.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab56:	4f08      	ldr	r7, [pc, #32]	@ (800ab78 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800ab58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab5a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ab5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800ab60:	e7ee      	b.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab62:	2102      	movs	r1, #2
 800ab64:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ab68:	f7ff fa82 	bl	800a070 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	f43f af2e 	beq.w	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800ab72:	2001      	movs	r0, #1
 800ab74:	e72e      	b.n	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800ab76:	bf00      	nop
 800ab78:	58024400 	.word	0x58024400

0800ab7c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ab7c:	b538      	push	{r3, r4, r5, lr}
 800ab7e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ab80:	4604      	mov	r4, r0
 800ab82:	b1f0      	cbz	r0, 800abc2 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ab84:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800ab88:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800ab8c:	b91b      	cbnz	r3, 800ab96 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ab8e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ab92:	f7f6 fc05 	bl	80013a0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab96:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ab98:	1d21      	adds	r1, r4, #4
 800ab9a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab9c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aba0:	f000 fa1f 	bl	800afe2 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800aba4:	6862      	ldr	r2, [r4, #4]
 800aba6:	4629      	mov	r1, r5
 800aba8:	6820      	ldr	r0, [r4, #0]
 800abaa:	f000 fa52 	bl	800b052 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800abae:	4a06      	ldr	r2, [pc, #24]	@ (800abc8 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800abb0:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800abb2:	6813      	ldr	r3, [r2, #0]
 800abb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800abb8:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800abba:	2301      	movs	r3, #1
 800abbc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800abc0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800abc2:	2001      	movs	r0, #1
 800abc4:	e7fc      	b.n	800abc0 <HAL_SDRAM_Init+0x44>
 800abc6:	bf00      	nop
 800abc8:	52004000 	.word	0x52004000

0800abcc <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800abcc:	b510      	push	{r4, lr}
 800abce:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800abd0:	f7f6 fc80 	bl	80014d4 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800abd4:	e9d4 0100 	ldrd	r0, r1, [r4]
 800abd8:	f000 fa71 	bl	800b0be <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800abdc:	2000      	movs	r0, #0
 800abde:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800abe2:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800abe6:	bd10      	pop	{r4, pc}

0800abe8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800abe8:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800abea:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800abee:	4605      	mov	r5, r0
 800abf0:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800abf2:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800abf4:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800abf6:	d010      	beq.n	800ac1a <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800abf8:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800abfc:	2c01      	cmp	r4, #1
 800abfe:	d110      	bne.n	800ac22 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ac00:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ac02:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ac04:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ac08:	f000 fa68 	bl	800b0dc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ac0c:	6833      	ldr	r3, [r6, #0]
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d104      	bne.n	800ac1c <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ac12:	2305      	movs	r3, #5
 800ac14:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ac18:	2000      	movs	r0, #0
}
 800ac1a:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800ac1c:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800ac20:	e7fa      	b.n	800ac18 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800ac22:	2001      	movs	r0, #1
 800ac24:	e7f9      	b.n	800ac1a <HAL_SDRAM_SendCommand+0x32>

0800ac26 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ac26:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ac28:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800ac2c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	b2d8      	uxtb	r0, r3
 800ac32:	d00d      	beq.n	800ac50 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800ac34:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	b2dd      	uxtb	r5, r3
 800ac3c:	d109      	bne.n	800ac52 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ac3e:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ac40:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ac42:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ac46:	f000 fa5b 	bl	800b100 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ac4a:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ac4c:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800ac50:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ac52:	2001      	movs	r0, #1
 800ac54:	e7fc      	b.n	800ac50 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800ac56 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ac56:	4770      	bx	lr

0800ac58 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac58:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d12f      	bne.n	800acc0 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac60:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac62:	4a18      	ldr	r2, [pc, #96]	@ (800acc4 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ac64:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac68:	6803      	ldr	r3, [r0, #0]
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d01a      	beq.n	800aca4 <HAL_TIM_Base_Start+0x4c>
 800ac6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac72:	d017      	beq.n	800aca4 <HAL_TIM_Base_Start+0x4c>
 800ac74:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d013      	beq.n	800aca4 <HAL_TIM_Base_Start+0x4c>
 800ac7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d00f      	beq.n	800aca4 <HAL_TIM_Base_Start+0x4c>
 800ac84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d00b      	beq.n	800aca4 <HAL_TIM_Base_Start+0x4c>
 800ac8c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d007      	beq.n	800aca4 <HAL_TIM_Base_Start+0x4c>
 800ac94:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d003      	beq.n	800aca4 <HAL_TIM_Base_Start+0x4c>
 800ac9c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d107      	bne.n	800acb4 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aca4:	6899      	ldr	r1, [r3, #8]
 800aca6:	4a08      	ldr	r2, [pc, #32]	@ (800acc8 <HAL_TIM_Base_Start+0x70>)
 800aca8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acaa:	2a06      	cmp	r2, #6
 800acac:	d006      	beq.n	800acbc <HAL_TIM_Base_Start+0x64>
 800acae:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800acb2:	d003      	beq.n	800acbc <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	f042 0201 	orr.w	r2, r2, #1
 800acba:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800acbc:	2000      	movs	r0, #0
 800acbe:	4770      	bx	lr
    return HAL_ERROR;
 800acc0:	2001      	movs	r0, #1
}
 800acc2:	4770      	bx	lr
 800acc4:	40010000 	.word	0x40010000
 800acc8:	00010007 	.word	0x00010007

0800accc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800accc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d133      	bne.n	800ad3c <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acd4:	2302      	movs	r3, #2
 800acd6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800acda:	6803      	ldr	r3, [r0, #0]
 800acdc:	68da      	ldr	r2, [r3, #12]
 800acde:	f042 0201 	orr.w	r2, r2, #1
 800ace2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ace4:	4a16      	ldr	r2, [pc, #88]	@ (800ad40 <HAL_TIM_Base_Start_IT+0x74>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d01a      	beq.n	800ad20 <HAL_TIM_Base_Start_IT+0x54>
 800acea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acee:	d017      	beq.n	800ad20 <HAL_TIM_Base_Start_IT+0x54>
 800acf0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d013      	beq.n	800ad20 <HAL_TIM_Base_Start_IT+0x54>
 800acf8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d00f      	beq.n	800ad20 <HAL_TIM_Base_Start_IT+0x54>
 800ad00:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d00b      	beq.n	800ad20 <HAL_TIM_Base_Start_IT+0x54>
 800ad08:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d007      	beq.n	800ad20 <HAL_TIM_Base_Start_IT+0x54>
 800ad10:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d003      	beq.n	800ad20 <HAL_TIM_Base_Start_IT+0x54>
 800ad18:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d107      	bne.n	800ad30 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad20:	6899      	ldr	r1, [r3, #8]
 800ad22:	4a08      	ldr	r2, [pc, #32]	@ (800ad44 <HAL_TIM_Base_Start_IT+0x78>)
 800ad24:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad26:	2a06      	cmp	r2, #6
 800ad28:	d006      	beq.n	800ad38 <HAL_TIM_Base_Start_IT+0x6c>
 800ad2a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800ad2e:	d003      	beq.n	800ad38 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	f042 0201 	orr.w	r2, r2, #1
 800ad36:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800ad38:	2000      	movs	r0, #0
 800ad3a:	4770      	bx	lr
    return HAL_ERROR;
 800ad3c:	2001      	movs	r0, #1
}
 800ad3e:	4770      	bx	lr
 800ad40:	40010000 	.word	0x40010000
 800ad44:	00010007 	.word	0x00010007

0800ad48 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800ad48:	4770      	bx	lr

0800ad4a <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800ad4a:	4770      	bx	lr

0800ad4c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800ad4c:	4770      	bx	lr

0800ad4e <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800ad4e:	4770      	bx	lr

0800ad50 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad50:	6803      	ldr	r3, [r0, #0]
 800ad52:	691a      	ldr	r2, [r3, #16]
 800ad54:	0791      	lsls	r1, r2, #30
{
 800ad56:	b510      	push	{r4, lr}
 800ad58:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad5a:	d50f      	bpl.n	800ad7c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad5c:	68da      	ldr	r2, [r3, #12]
 800ad5e:	0792      	lsls	r2, r2, #30
 800ad60:	d50c      	bpl.n	800ad7c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad62:	f06f 0202 	mvn.w	r2, #2
 800ad66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad68:	2201      	movs	r2, #1
 800ad6a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad6c:	699b      	ldr	r3, [r3, #24]
 800ad6e:	0799      	lsls	r1, r3, #30
 800ad70:	f000 8085 	beq.w	800ae7e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800ad74:	f7ff ffe9 	bl	800ad4a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad7c:	6823      	ldr	r3, [r4, #0]
 800ad7e:	691a      	ldr	r2, [r3, #16]
 800ad80:	0752      	lsls	r2, r2, #29
 800ad82:	d510      	bpl.n	800ada6 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad84:	68da      	ldr	r2, [r3, #12]
 800ad86:	0750      	lsls	r0, r2, #29
 800ad88:	d50d      	bpl.n	800ada6 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad8a:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800ad8e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad92:	2202      	movs	r2, #2
 800ad94:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800ad9c:	d075      	beq.n	800ae8a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800ad9e:	f7ff ffd4 	bl	800ad4a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ada2:	2300      	movs	r3, #0
 800ada4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ada6:	6823      	ldr	r3, [r4, #0]
 800ada8:	691a      	ldr	r2, [r3, #16]
 800adaa:	0711      	lsls	r1, r2, #28
 800adac:	d50f      	bpl.n	800adce <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800adae:	68da      	ldr	r2, [r3, #12]
 800adb0:	0712      	lsls	r2, r2, #28
 800adb2:	d50c      	bpl.n	800adce <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800adb4:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800adb8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800adba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800adbc:	2204      	movs	r2, #4
 800adbe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800adc0:	69db      	ldr	r3, [r3, #28]
 800adc2:	079b      	lsls	r3, r3, #30
 800adc4:	d067      	beq.n	800ae96 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800adc6:	f7ff ffc0 	bl	800ad4a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adca:	2300      	movs	r3, #0
 800adcc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	691a      	ldr	r2, [r3, #16]
 800add2:	06d0      	lsls	r0, r2, #27
 800add4:	d510      	bpl.n	800adf8 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800add6:	68da      	ldr	r2, [r3, #12]
 800add8:	06d1      	lsls	r1, r2, #27
 800adda:	d50d      	bpl.n	800adf8 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800addc:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800ade0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ade2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ade4:	2208      	movs	r2, #8
 800ade6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ade8:	69db      	ldr	r3, [r3, #28]
 800adea:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800adee:	d058      	beq.n	800aea2 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800adf0:	f7ff ffab 	bl	800ad4a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adf4:	2300      	movs	r3, #0
 800adf6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	691a      	ldr	r2, [r3, #16]
 800adfc:	07d2      	lsls	r2, r2, #31
 800adfe:	d508      	bpl.n	800ae12 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae00:	68da      	ldr	r2, [r3, #12]
 800ae02:	07d0      	lsls	r0, r2, #31
 800ae04:	d505      	bpl.n	800ae12 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae06:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae0a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae0c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae0e:	f7f6 f88f 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ae12:	6823      	ldr	r3, [r4, #0]
 800ae14:	691a      	ldr	r2, [r3, #16]
 800ae16:	0611      	lsls	r1, r2, #24
 800ae18:	d508      	bpl.n	800ae2c <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae1a:	68da      	ldr	r2, [r3, #12]
 800ae1c:	0612      	lsls	r2, r2, #24
 800ae1e:	d505      	bpl.n	800ae2c <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ae20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 800ae24:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ae26:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ae28:	f000 f8d9 	bl	800afde <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ae2c:	6823      	ldr	r3, [r4, #0]
 800ae2e:	691a      	ldr	r2, [r3, #16]
 800ae30:	05d0      	lsls	r0, r2, #23
 800ae32:	d508      	bpl.n	800ae46 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae34:	68da      	ldr	r2, [r3, #12]
 800ae36:	0611      	lsls	r1, r2, #24
 800ae38:	d505      	bpl.n	800ae46 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800ae3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae40:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ae42:	f000 f8cd 	bl	800afe0 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	691a      	ldr	r2, [r3, #16]
 800ae4a:	0652      	lsls	r2, r2, #25
 800ae4c:	d508      	bpl.n	800ae60 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae4e:	68da      	ldr	r2, [r3, #12]
 800ae50:	0650      	lsls	r0, r2, #25
 800ae52:	d505      	bpl.n	800ae60 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800ae58:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae5a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ae5c:	f7ff ff77 	bl	800ad4e <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae60:	6823      	ldr	r3, [r4, #0]
 800ae62:	691a      	ldr	r2, [r3, #16]
 800ae64:	0691      	lsls	r1, r2, #26
 800ae66:	d522      	bpl.n	800aeae <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae68:	68da      	ldr	r2, [r3, #12]
 800ae6a:	0692      	lsls	r2, r2, #26
 800ae6c:	d51f      	bpl.n	800aeae <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae6e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800ae72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae74:	611a      	str	r2, [r3, #16]
}
 800ae76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800ae7a:	f000 b8af 	b.w	800afdc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae7e:	f7ff ff63 	bl	800ad48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae82:	4620      	mov	r0, r4
 800ae84:	f7ff ff62 	bl	800ad4c <HAL_TIM_PWM_PulseFinishedCallback>
 800ae88:	e776      	b.n	800ad78 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae8a:	f7ff ff5d 	bl	800ad48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f7ff ff5c 	bl	800ad4c <HAL_TIM_PWM_PulseFinishedCallback>
 800ae94:	e785      	b.n	800ada2 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae96:	f7ff ff57 	bl	800ad48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f7ff ff56 	bl	800ad4c <HAL_TIM_PWM_PulseFinishedCallback>
 800aea0:	e793      	b.n	800adca <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aea2:	f7ff ff51 	bl	800ad48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aea6:	4620      	mov	r0, r4
 800aea8:	f7ff ff50 	bl	800ad4c <HAL_TIM_PWM_PulseFinishedCallback>
 800aeac:	e7a2      	b.n	800adf4 <HAL_TIM_IRQHandler+0xa4>
}
 800aeae:	bd10      	pop	{r4, pc}

0800aeb0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aeb0:	4a30      	ldr	r2, [pc, #192]	@ (800af74 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800aeb2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aeb4:	4290      	cmp	r0, r2
 800aeb6:	d012      	beq.n	800aede <TIM_Base_SetConfig+0x2e>
 800aeb8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800aebc:	d00f      	beq.n	800aede <TIM_Base_SetConfig+0x2e>
 800aebe:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800aec2:	4290      	cmp	r0, r2
 800aec4:	d00b      	beq.n	800aede <TIM_Base_SetConfig+0x2e>
 800aec6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aeca:	4290      	cmp	r0, r2
 800aecc:	d007      	beq.n	800aede <TIM_Base_SetConfig+0x2e>
 800aece:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aed2:	4290      	cmp	r0, r2
 800aed4:	d003      	beq.n	800aede <TIM_Base_SetConfig+0x2e>
 800aed6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800aeda:	4290      	cmp	r0, r2
 800aedc:	d119      	bne.n	800af12 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800aede:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800aee4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aee6:	4a23      	ldr	r2, [pc, #140]	@ (800af74 <TIM_Base_SetConfig+0xc4>)
 800aee8:	4290      	cmp	r0, r2
 800aeea:	d01d      	beq.n	800af28 <TIM_Base_SetConfig+0x78>
 800aeec:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800aef0:	d01a      	beq.n	800af28 <TIM_Base_SetConfig+0x78>
 800aef2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800aef6:	4290      	cmp	r0, r2
 800aef8:	d016      	beq.n	800af28 <TIM_Base_SetConfig+0x78>
 800aefa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aefe:	4290      	cmp	r0, r2
 800af00:	d012      	beq.n	800af28 <TIM_Base_SetConfig+0x78>
 800af02:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800af06:	4290      	cmp	r0, r2
 800af08:	d00e      	beq.n	800af28 <TIM_Base_SetConfig+0x78>
 800af0a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800af0e:	4290      	cmp	r0, r2
 800af10:	d00a      	beq.n	800af28 <TIM_Base_SetConfig+0x78>
 800af12:	4a19      	ldr	r2, [pc, #100]	@ (800af78 <TIM_Base_SetConfig+0xc8>)
 800af14:	4290      	cmp	r0, r2
 800af16:	d007      	beq.n	800af28 <TIM_Base_SetConfig+0x78>
 800af18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800af1c:	4290      	cmp	r0, r2
 800af1e:	d003      	beq.n	800af28 <TIM_Base_SetConfig+0x78>
 800af20:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800af24:	4290      	cmp	r0, r2
 800af26:	d103      	bne.n	800af30 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af2c:	68ca      	ldr	r2, [r1, #12]
 800af2e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af30:	694a      	ldr	r2, [r1, #20]
 800af32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af36:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800af38:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af3a:	688b      	ldr	r3, [r1, #8]
 800af3c:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af3e:	680b      	ldr	r3, [r1, #0]
 800af40:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af42:	4b0c      	ldr	r3, [pc, #48]	@ (800af74 <TIM_Base_SetConfig+0xc4>)
 800af44:	4298      	cmp	r0, r3
 800af46:	d00f      	beq.n	800af68 <TIM_Base_SetConfig+0xb8>
 800af48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af4c:	4298      	cmp	r0, r3
 800af4e:	d00b      	beq.n	800af68 <TIM_Base_SetConfig+0xb8>
 800af50:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 800af54:	4298      	cmp	r0, r3
 800af56:	d007      	beq.n	800af68 <TIM_Base_SetConfig+0xb8>
 800af58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af5c:	4298      	cmp	r0, r3
 800af5e:	d003      	beq.n	800af68 <TIM_Base_SetConfig+0xb8>
 800af60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af64:	4298      	cmp	r0, r3
 800af66:	d101      	bne.n	800af6c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af68:	690b      	ldr	r3, [r1, #16]
 800af6a:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af6c:	2301      	movs	r3, #1
 800af6e:	6143      	str	r3, [r0, #20]
}
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	40010000 	.word	0x40010000
 800af78:	40014000 	.word	0x40014000

0800af7c <HAL_TIM_Base_Init>:
{
 800af7c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800af7e:	4604      	mov	r4, r0
 800af80:	b350      	cbz	r0, 800afd8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800af82:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800af86:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800af8a:	b91b      	cbnz	r3, 800af94 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800af8c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800af90:	f7ff fe61 	bl	800ac56 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800af94:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af96:	6820      	ldr	r0, [r4, #0]
 800af98:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800af9a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af9e:	f7ff ff87 	bl	800aeb0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afa2:	2301      	movs	r3, #1
  return HAL_OK;
 800afa4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afa6:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afaa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800afae:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800afb2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800afb6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800afba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800afbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afc2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800afc6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800afca:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800afce:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800afd2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800afd6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800afd8:	2001      	movs	r0, #1
 800afda:	e7fc      	b.n	800afd6 <HAL_TIM_Base_Init+0x5a>

0800afdc <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800afdc:	4770      	bx	lr

0800afde <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800afde:	4770      	bx	lr

0800afe0 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800afe0:	4770      	bx	lr

0800afe2 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800afe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800afe6:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800afea:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800afee:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800aff2:	ea43 0308 	orr.w	r3, r3, r8
 800aff6:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800affa:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800affe:	6809      	ldr	r1, [r1, #0]
 800b000:	b991      	cbnz	r1, 800b028 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b002:	ea43 030e 	orr.w	r3, r3, lr
 800b006:	6801      	ldr	r1, [r0, #0]
 800b008:	4313      	orrs	r3, r2
 800b00a:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800b00e:	ea43 030c 	orr.w	r3, r3, ip
 800b012:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800b016:	433b      	orrs	r3, r7
 800b018:	4333      	orrs	r3, r6
 800b01a:	432b      	orrs	r3, r5
 800b01c:	4323      	orrs	r3, r4
 800b01e:	430b      	orrs	r3, r1
 800b020:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800b022:	2000      	movs	r0, #0
 800b024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b028:	6801      	ldr	r1, [r0, #0]
 800b02a:	ea43 030e 	orr.w	r3, r3, lr
 800b02e:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800b032:	430b      	orrs	r3, r1
 800b034:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b036:	ea42 030c 	orr.w	r3, r2, ip
 800b03a:	6841      	ldr	r1, [r0, #4]
 800b03c:	433b      	orrs	r3, r7
 800b03e:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800b042:	4333      	orrs	r3, r6
 800b044:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800b048:	432b      	orrs	r3, r5
 800b04a:	4323      	orrs	r3, r4
 800b04c:	4313      	orrs	r3, r2
 800b04e:	6043      	str	r3, [r0, #4]
 800b050:	e7e7      	b.n	800b022 <FMC_SDRAM_Init+0x40>

0800b052 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b052:	68cb      	ldr	r3, [r1, #12]
 800b054:	f103 3cff 	add.w	ip, r3, #4294967295
 800b058:	694b      	ldr	r3, [r1, #20]
{
 800b05a:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b05c:	3b01      	subs	r3, #1
 800b05e:	680f      	ldr	r7, [r1, #0]
 800b060:	684c      	ldr	r4, [r1, #4]
 800b062:	688e      	ldr	r6, [r1, #8]
 800b064:	051b      	lsls	r3, r3, #20
 800b066:	690d      	ldr	r5, [r1, #16]
 800b068:	3c01      	subs	r4, #1
 800b06a:	6989      	ldr	r1, [r1, #24]
 800b06c:	3e01      	subs	r6, #1
 800b06e:	3d01      	subs	r5, #1
 800b070:	3f01      	subs	r7, #1
 800b072:	3901      	subs	r1, #1
 800b074:	0124      	lsls	r4, r4, #4
 800b076:	0236      	lsls	r6, r6, #8
 800b078:	042d      	lsls	r5, r5, #16
 800b07a:	0609      	lsls	r1, r1, #24
 800b07c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800b080:	b95a      	cbnz	r2, 800b09a <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b082:	433b      	orrs	r3, r7
 800b084:	6882      	ldr	r2, [r0, #8]
 800b086:	4323      	orrs	r3, r4
 800b088:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800b08c:	4333      	orrs	r3, r6
 800b08e:	432b      	orrs	r3, r5
 800b090:	430b      	orrs	r3, r1
 800b092:	4313      	orrs	r3, r2
 800b094:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800b096:	2000      	movs	r0, #0
 800b098:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b09a:	6882      	ldr	r2, [r0, #8]
 800b09c:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800b0a0:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800b0a4:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b0a6:	ea44 0306 	orr.w	r3, r4, r6
 800b0aa:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b0ac:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b0ae:	68c2      	ldr	r2, [r0, #12]
 800b0b0:	432b      	orrs	r3, r5
 800b0b2:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800b0b6:	430b      	orrs	r3, r1
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	60c3      	str	r3, [r0, #12]
 800b0bc:	e7eb      	b.n	800b096 <FMC_SDRAM_Timing_Init+0x44>

0800b0be <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800b0be:	4603      	mov	r3, r0
 800b0c0:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800b0c4:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800b0c8:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800b0cc:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800b0ce:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800b0d2:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800b0d4:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800b0d6:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800b0d8:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800b0da:	4770      	bx	lr

0800b0dc <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b0dc:	6902      	ldr	r2, [r0, #16]
{
 800b0de:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b0e0:	e9d1 3400 	ldrd	r3, r4, [r1]
 800b0e4:	0d92      	lsrs	r2, r2, #22
 800b0e6:	4323      	orrs	r3, r4
 800b0e8:	68cc      	ldr	r4, [r1, #12]
 800b0ea:	0592      	lsls	r2, r2, #22
 800b0ec:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	688a      	ldr	r2, [r1, #8]
 800b0f4:	3a01      	subs	r2, #1
 800b0f6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800b0fa:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	bd10      	pop	{r4, pc}

0800b100 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b100:	6943      	ldr	r3, [r0, #20]
 800b102:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800b106:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800b10a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800b10e:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800b110:	2000      	movs	r0, #0
 800b112:	4770      	bx	lr

0800b114 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b114:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800b116:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b11a:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b11c:	f001 fee4 	bl	800cee8 <xTaskGetSchedulerState>
 800b120:	2801      	cmp	r0, #1
 800b122:	d003      	beq.n	800b12c <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800b124:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800b128:	f000 bc4c 	b.w	800b9c4 <xPortSysTickHandler>
}
 800b12c:	bd08      	pop	{r3, pc}
	...

0800b130 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b130:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800b134:	b92b      	cbnz	r3, 800b142 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800b136:	4b06      	ldr	r3, [pc, #24]	@ (800b150 <osKernelInitialize+0x20>)
 800b138:	6818      	ldr	r0, [r3, #0]
 800b13a:	b928      	cbnz	r0, 800b148 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b13c:	2201      	movs	r2, #1
 800b13e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b140:	4770      	bx	lr
    stat = osErrorISR;
 800b142:	f06f 0005 	mvn.w	r0, #5
 800b146:	4770      	bx	lr
    } else {
      stat = osError;
 800b148:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	2400c400 	.word	0x2400c400

0800b154 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b154:	b510      	push	{r4, lr}
 800b156:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800b15a:	b95c      	cbnz	r4, 800b174 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800b15c:	4b08      	ldr	r3, [pc, #32]	@ (800b180 <osKernelStart+0x2c>)
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	2a01      	cmp	r2, #1
 800b162:	d10a      	bne.n	800b17a <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b164:	4a07      	ldr	r2, [pc, #28]	@ (800b184 <osKernelStart+0x30>)
 800b166:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b168:	2202      	movs	r2, #2
 800b16a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b16c:	f001 fd5c 	bl	800cc28 <vTaskStartScheduler>
      stat = osOK;
 800b170:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800b172:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800b174:	f06f 0005 	mvn.w	r0, #5
 800b178:	e7fb      	b.n	800b172 <osKernelStart+0x1e>
      stat = osError;
 800b17a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800b17e:	e7f8      	b.n	800b172 <osKernelStart+0x1e>
 800b180:	2400c400 	.word	0x2400c400
 800b184:	e000ed00 	.word	0xe000ed00

0800b188 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b18a:	4614      	mov	r4, r2
 800b18c:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b18e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b190:	460b      	mov	r3, r1
  hTask = NULL;
 800b192:	9205      	str	r2, [sp, #20]
 800b194:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800b198:	b9ca      	cbnz	r2, 800b1ce <osThreadNew+0x46>
 800b19a:	b1c0      	cbz	r0, 800b1ce <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800b19c:	b36c      	cbz	r4, 800b1fa <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800b19e:	69a5      	ldr	r5, [r4, #24]
 800b1a0:	2d00      	cmp	r5, #0
 800b1a2:	bf08      	it	eq
 800b1a4:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b1a6:	1e69      	subs	r1, r5, #1
 800b1a8:	46ac      	mov	ip, r5
 800b1aa:	2937      	cmp	r1, #55	@ 0x37
 800b1ac:	d82a      	bhi.n	800b204 <osThreadNew+0x7c>
 800b1ae:	6861      	ldr	r1, [r4, #4]
 800b1b0:	07c9      	lsls	r1, r1, #31
 800b1b2:	d427      	bmi.n	800b204 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800b1b4:	6966      	ldr	r6, [r4, #20]
 800b1b6:	b16e      	cbz	r6, 800b1d4 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b1b8:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800b1ba:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b1bc:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800b1c0:	b157      	cbz	r7, 800b1d8 <osThreadNew+0x50>
 800b1c2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800b1c6:	d902      	bls.n	800b1ce <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b1c8:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b1ca:	b104      	cbz	r4, 800b1ce <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b1cc:	b9e6      	cbnz	r6, 800b208 <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b1ce:	9805      	ldr	r0, [sp, #20]
}
 800b1d0:	b007      	add	sp, #28
 800b1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800b1d4:	2280      	movs	r2, #128	@ 0x80
 800b1d6:	e7f0      	b.n	800b1ba <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b1d8:	f1be 0f00 	cmp.w	lr, #0
 800b1dc:	d1f7      	bne.n	800b1ce <osThreadNew+0x46>
      if (mem == 0) {
 800b1de:	6924      	ldr	r4, [r4, #16]
 800b1e0:	2c00      	cmp	r4, #0
 800b1e2:	d1f4      	bne.n	800b1ce <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b1e4:	ac05      	add	r4, sp, #20
 800b1e6:	b292      	uxth	r2, r2
 800b1e8:	e9cd c400 	strd	ip, r4, [sp]
 800b1ec:	f001 fbb9 	bl	800c962 <xTaskCreate>
 800b1f0:	2801      	cmp	r0, #1
            hTask = NULL;
 800b1f2:	bf1c      	itt	ne
 800b1f4:	2300      	movne	r3, #0
 800b1f6:	9305      	strne	r3, [sp, #20]
 800b1f8:	e7e9      	b.n	800b1ce <osThreadNew+0x46>
    name = NULL;
 800b1fa:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800b1fc:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800b200:	2280      	movs	r2, #128	@ 0x80
 800b202:	e7ef      	b.n	800b1e4 <osThreadNew+0x5c>
        return (NULL);
 800b204:	4610      	mov	r0, r2
 800b206:	e7e3      	b.n	800b1d0 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b208:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800b20c:	9500      	str	r5, [sp, #0]
 800b20e:	f001 fb70 	bl	800c8f2 <xTaskCreateStatic>
 800b212:	9005      	str	r0, [sp, #20]
 800b214:	e7db      	b.n	800b1ce <osThreadNew+0x46>

0800b216 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b216:	b570      	push	{r4, r5, r6, lr}
 800b218:	4605      	mov	r5, r0
 800b21a:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800b21e:	b116      	cbz	r6, 800b226 <osMutexNew+0x10>
  hMutex = NULL;
 800b220:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800b222:	4620      	mov	r0, r4
 800b224:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800b226:	b110      	cbz	r0, 800b22e <osMutexNew+0x18>
      type = attr->attr_bits;
 800b228:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800b22a:	0733      	lsls	r3, r6, #28
 800b22c:	d4f8      	bmi.n	800b220 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b22e:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800b232:	b17d      	cbz	r5, 800b254 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b234:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800b238:	b151      	cbz	r1, 800b250 <osMutexNew+0x3a>
 800b23a:	2b4f      	cmp	r3, #79	@ 0x4f
 800b23c:	d9f0      	bls.n	800b220 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800b23e:	b1de      	cbz	r6, 800b278 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b240:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b242:	f000 fec8 	bl	800bfd6 <xQueueCreateMutexStatic>
 800b246:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800b248:	2800      	cmp	r0, #0
 800b24a:	d0e9      	beq.n	800b220 <osMutexNew+0xa>
          name = attr->name;
 800b24c:	682d      	ldr	r5, [r5, #0]
 800b24e:	e00a      	b.n	800b266 <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1e5      	bne.n	800b220 <osMutexNew+0xa>
            if (rmtx != 0U) {
 800b254:	b196      	cbz	r6, 800b27c <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b256:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800b258:	f000 fef1 	bl	800c03e <xQueueCreateMutex>
 800b25c:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800b25e:	2800      	cmp	r0, #0
 800b260:	d0de      	beq.n	800b220 <osMutexNew+0xa>
        if (attr != NULL) {
 800b262:	2d00      	cmp	r5, #0
 800b264:	d1f2      	bne.n	800b24c <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800b266:	4629      	mov	r1, r5
 800b268:	4620      	mov	r0, r4
 800b26a:	f001 f97d 	bl	800c568 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b26e:	2e00      	cmp	r6, #0
 800b270:	d0d7      	beq.n	800b222 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b272:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800b276:	e7d4      	b.n	800b222 <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b278:	2001      	movs	r0, #1
 800b27a:	e7e2      	b.n	800b242 <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800b27c:	2001      	movs	r0, #1
 800b27e:	e7eb      	b.n	800b258 <osMutexNew+0x42>

0800b280 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b280:	b538      	push	{r3, r4, r5, lr}
 800b282:	4603      	mov	r3, r0
 800b284:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b286:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800b28a:	f003 0201 	and.w	r2, r3, #1
 800b28e:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800b292:	b995      	cbnz	r5, 800b2ba <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800b294:	2b01      	cmp	r3, #1
 800b296:	d913      	bls.n	800b2c0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800b298:	b162      	cbz	r2, 800b2b4 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b29a:	f001 f8f6 	bl	800c48a <xQueueTakeMutexRecursive>
 800b29e:	2801      	cmp	r0, #1
 800b2a0:	d101      	bne.n	800b2a6 <osMutexAcquire+0x26>
  stat = osOK;
 800b2a2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800b2a4:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800b2a6:	2c00      	cmp	r4, #0
 800b2a8:	bf14      	ite	ne
 800b2aa:	f06f 0001 	mvnne.w	r0, #1
 800b2ae:	f06f 0002 	mvneq.w	r0, #2
 800b2b2:	e7f7      	b.n	800b2a4 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b2b4:	f001 f82c 	bl	800c310 <xQueueSemaphoreTake>
 800b2b8:	e7f1      	b.n	800b29e <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800b2ba:	f06f 0005 	mvn.w	r0, #5
 800b2be:	e7f1      	b.n	800b2a4 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800b2c0:	f06f 0003 	mvn.w	r0, #3
 800b2c4:	e7ee      	b.n	800b2a4 <osMutexAcquire+0x24>

0800b2c6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b2c6:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b2c8:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b2cc:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800b2ce:	f002 0301 	and.w	r3, r2, #1
 800b2d2:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800b2d6:	b979      	cbnz	r1, 800b2f8 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800b2d8:	2a01      	cmp	r2, #1
 800b2da:	d910      	bls.n	800b2fe <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800b2dc:	b13b      	cbz	r3, 800b2ee <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b2de:	f000 fe8f 	bl	800c000 <xQueueGiveMutexRecursive>
 800b2e2:	2801      	cmp	r0, #1
  stat = osOK;
 800b2e4:	bf0c      	ite	eq
 800b2e6:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800b2e8:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b2ec:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	f000 fdbe 	bl	800be72 <xQueueGenericSend>
 800b2f6:	e7f4      	b.n	800b2e2 <osMutexRelease+0x1c>
    stat = osErrorISR;
 800b2f8:	f06f 0005 	mvn.w	r0, #5
 800b2fc:	e7f6      	b.n	800b2ec <osMutexRelease+0x26>
    stat = osErrorParameter;
 800b2fe:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b302:	e7f3      	b.n	800b2ec <osMutexRelease+0x26>

0800b304 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b306:	4604      	mov	r4, r0
 800b308:	460e      	mov	r6, r1
 800b30a:	4615      	mov	r5, r2
 800b30c:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b310:	b942      	cbnz	r2, 800b324 <osSemaphoreNew+0x20>
 800b312:	b138      	cbz	r0, 800b324 <osSemaphoreNew+0x20>
 800b314:	4288      	cmp	r0, r1
 800b316:	d305      	bcc.n	800b324 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800b318:	b155      	cbz	r5, 800b330 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b31a:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800b31e:	b12b      	cbz	r3, 800b32c <osSemaphoreNew+0x28>
 800b320:	2f4f      	cmp	r7, #79	@ 0x4f
 800b322:	d822      	bhi.n	800b36a <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800b324:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800b326:	4620      	mov	r0, r4
 800b328:	b003      	add	sp, #12
 800b32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b32c:	2f00      	cmp	r7, #0
 800b32e:	d1f9      	bne.n	800b324 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800b330:	2c01      	cmp	r4, #1
 800b332:	d00c      	beq.n	800b34e <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b334:	4620      	mov	r0, r4
 800b336:	4631      	mov	r1, r6
 800b338:	f000 fd7d 	bl	800be36 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800b33c:	4604      	mov	r4, r0
 800b33e:	2800      	cmp	r0, #0
 800b340:	d0f0      	beq.n	800b324 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800b342:	b985      	cbnz	r5, 800b366 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800b344:	4629      	mov	r1, r5
 800b346:	4620      	mov	r0, r4
 800b348:	f001 f90e 	bl	800c568 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800b34c:	e7eb      	b.n	800b326 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800b34e:	2203      	movs	r2, #3
 800b350:	2100      	movs	r1, #0
 800b352:	2001      	movs	r0, #1
 800b354:	f000 fd26 	bl	800bda4 <xQueueGenericCreate>
 800b358:	e00e      	b.n	800b378 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b35a:	461a      	mov	r2, r3
 800b35c:	f000 fd49 	bl	800bdf2 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800b360:	4604      	mov	r4, r0
 800b362:	2800      	cmp	r0, #0
 800b364:	d0de      	beq.n	800b324 <osSemaphoreNew+0x20>
          name = attr->name;
 800b366:	682d      	ldr	r5, [r5, #0]
 800b368:	e7ec      	b.n	800b344 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800b36a:	2801      	cmp	r0, #1
 800b36c:	d1f5      	bne.n	800b35a <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b36e:	2103      	movs	r1, #3
 800b370:	9100      	str	r1, [sp, #0]
 800b372:	4611      	mov	r1, r2
 800b374:	f000 fcc8 	bl	800bd08 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800b378:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d0d2      	beq.n	800b324 <osSemaphoreNew+0x20>
 800b37e:	2e00      	cmp	r6, #0
 800b380:	d0df      	beq.n	800b342 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b382:	2300      	movs	r3, #0
 800b384:	461a      	mov	r2, r3
 800b386:	4619      	mov	r1, r3
 800b388:	f000 fd73 	bl	800be72 <xQueueGenericSend>
 800b38c:	2801      	cmp	r0, #1
 800b38e:	d0d8      	beq.n	800b342 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800b390:	4620      	mov	r0, r4
 800b392:	f001 f913 	bl	800c5bc <vQueueDelete>
      if (hSemaphore != NULL) {
 800b396:	e7c5      	b.n	800b324 <osSemaphoreNew+0x20>

0800b398 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b398:	b513      	push	{r0, r1, r4, lr}
 800b39a:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b39c:	b328      	cbz	r0, 800b3ea <osSemaphoreAcquire+0x52>
 800b39e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b3a2:	b1cb      	cbz	r3, 800b3d8 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800b3a4:	bb09      	cbnz	r1, 800b3ea <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b3a6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b3a8:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b3aa:	f001 f88f 	bl	800c4cc <xQueueReceiveFromISR>
 800b3ae:	2801      	cmp	r0, #1
 800b3b0:	d003      	beq.n	800b3ba <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800b3b2:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b3b6:	b002      	add	sp, #8
 800b3b8:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800b3ba:	9b01      	ldr	r3, [sp, #4]
 800b3bc:	b90b      	cbnz	r3, 800b3c2 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800b3be:	2000      	movs	r0, #0
 800b3c0:	e7f9      	b.n	800b3b6 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800b3c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b3c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	e7f2      	b.n	800b3be <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b3d8:	f000 ff9a 	bl	800c310 <xQueueSemaphoreTake>
 800b3dc:	2801      	cmp	r0, #1
 800b3de:	d0ee      	beq.n	800b3be <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800b3e0:	2c00      	cmp	r4, #0
 800b3e2:	d0e6      	beq.n	800b3b2 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800b3e4:	f06f 0001 	mvn.w	r0, #1
 800b3e8:	e7e5      	b.n	800b3b6 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800b3ea:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b3ee:	e7e2      	b.n	800b3b6 <osSemaphoreAcquire+0x1e>

0800b3f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b3f0:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b3f2:	b318      	cbz	r0, 800b43c <osSemaphoreRelease+0x4c>
 800b3f4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b3f8:	b1cb      	cbz	r3, 800b42e <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800b3fa:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b3fc:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800b3fe:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b400:	f000 fe97 	bl	800c132 <xQueueGiveFromISR>
 800b404:	2801      	cmp	r0, #1
 800b406:	d004      	beq.n	800b412 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800b408:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800b40c:	b003      	add	sp, #12
 800b40e:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800b412:	9b01      	ldr	r3, [sp, #4]
 800b414:	b14b      	cbz	r3, 800b42a <osSemaphoreRelease+0x3a>
 800b416:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b41a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b41e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b422:	f3bf 8f4f 	dsb	sy
 800b426:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800b42a:	2000      	movs	r0, #0
 800b42c:	e7ee      	b.n	800b40c <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b42e:	461a      	mov	r2, r3
 800b430:	4619      	mov	r1, r3
 800b432:	f000 fd1e 	bl	800be72 <xQueueGenericSend>
 800b436:	2801      	cmp	r0, #1
 800b438:	d0f7      	beq.n	800b42a <osSemaphoreRelease+0x3a>
 800b43a:	e7e5      	b.n	800b408 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800b43c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b440:	e7e4      	b.n	800b40c <osSemaphoreRelease+0x1c>

0800b442 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b442:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b444:	4605      	mov	r5, r0
 800b446:	460e      	mov	r6, r1
 800b448:	4614      	mov	r4, r2
 800b44a:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b44e:	b11f      	cbz	r7, 800b458 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800b450:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800b452:	4628      	mov	r0, r5
 800b454:	b003      	add	sp, #12
 800b456:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b458:	2800      	cmp	r0, #0
 800b45a:	d0f9      	beq.n	800b450 <osMessageQueueNew+0xe>
 800b45c:	2900      	cmp	r1, #0
 800b45e:	d0f7      	beq.n	800b450 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800b460:	b1da      	cbz	r2, 800b49a <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b462:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800b466:	b183      	cbz	r3, 800b48a <osMessageQueueNew+0x48>
 800b468:	2a4f      	cmp	r2, #79	@ 0x4f
 800b46a:	d9f1      	bls.n	800b450 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b46c:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b46e:	2a00      	cmp	r2, #0
 800b470:	d0ee      	beq.n	800b450 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b472:	434d      	muls	r5, r1
 800b474:	6966      	ldr	r6, [r4, #20]
 800b476:	42ae      	cmp	r6, r5
 800b478:	d3ea      	bcc.n	800b450 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b47a:	9700      	str	r7, [sp, #0]
 800b47c:	f000 fc44 	bl	800bd08 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800b480:	4605      	mov	r5, r0
 800b482:	2800      	cmp	r0, #0
 800b484:	d0e4      	beq.n	800b450 <osMessageQueueNew+0xe>
        name = attr->name;
 800b486:	6824      	ldr	r4, [r4, #0]
 800b488:	e011      	b.n	800b4ae <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b48a:	2a00      	cmp	r2, #0
 800b48c:	d1e0      	bne.n	800b450 <osMessageQueueNew+0xe>
 800b48e:	6923      	ldr	r3, [r4, #16]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1dd      	bne.n	800b450 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b494:	6963      	ldr	r3, [r4, #20]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d1da      	bne.n	800b450 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800b49a:	4628      	mov	r0, r5
 800b49c:	2200      	movs	r2, #0
 800b49e:	4631      	mov	r1, r6
 800b4a0:	f000 fc80 	bl	800bda4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800b4a4:	4605      	mov	r5, r0
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d0d2      	beq.n	800b450 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800b4aa:	2c00      	cmp	r4, #0
 800b4ac:	d1eb      	bne.n	800b486 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800b4ae:	4621      	mov	r1, r4
 800b4b0:	4628      	mov	r0, r5
 800b4b2:	f001 f859 	bl	800c568 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800b4b6:	e7cc      	b.n	800b452 <osMessageQueueNew+0x10>

0800b4b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b4b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4ba:	461c      	mov	r4, r3
 800b4bc:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b4c0:	b1de      	cbz	r6, 800b4fa <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b4c2:	b338      	cbz	r0, 800b514 <osMessageQueuePut+0x5c>
 800b4c4:	b331      	cbz	r1, 800b514 <osMessageQueuePut+0x5c>
 800b4c6:	bb2b      	cbnz	r3, 800b514 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b4c8:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b4ca:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b4cc:	f000 fdd4 	bl	800c078 <xQueueGenericSendFromISR>
 800b4d0:	2801      	cmp	r0, #1
 800b4d2:	d003      	beq.n	800b4dc <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800b4d4:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b4d8:	b002      	add	sp, #8
 800b4da:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800b4dc:	9b01      	ldr	r3, [sp, #4]
 800b4de:	b90b      	cbnz	r3, 800b4e4 <osMessageQueuePut+0x2c>
  stat = osOK;
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	e7f9      	b.n	800b4d8 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800b4e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b4e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	e7f2      	b.n	800b4e0 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b4fa:	b158      	cbz	r0, 800b514 <osMessageQueuePut+0x5c>
 800b4fc:	b151      	cbz	r1, 800b514 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b4fe:	4633      	mov	r3, r6
 800b500:	4622      	mov	r2, r4
 800b502:	f000 fcb6 	bl	800be72 <xQueueGenericSend>
 800b506:	2801      	cmp	r0, #1
 800b508:	d0ea      	beq.n	800b4e0 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800b50a:	2c00      	cmp	r4, #0
 800b50c:	d0e2      	beq.n	800b4d4 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800b50e:	f06f 0001 	mvn.w	r0, #1
 800b512:	e7e1      	b.n	800b4d8 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800b514:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b518:	e7de      	b.n	800b4d8 <osMessageQueuePut+0x20>

0800b51a <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b51a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b51c:	461c      	mov	r4, r3
 800b51e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b522:	b1db      	cbz	r3, 800b55c <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b524:	b330      	cbz	r0, 800b574 <osMessageQueueGet+0x5a>
 800b526:	b329      	cbz	r1, 800b574 <osMessageQueueGet+0x5a>
 800b528:	bb24      	cbnz	r4, 800b574 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b52a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b52c:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b52e:	f000 ffcd 	bl	800c4cc <xQueueReceiveFromISR>
 800b532:	2801      	cmp	r0, #1
 800b534:	d003      	beq.n	800b53e <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800b536:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b53a:	b003      	add	sp, #12
 800b53c:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800b53e:	9b01      	ldr	r3, [sp, #4]
 800b540:	b90b      	cbnz	r3, 800b546 <osMessageQueueGet+0x2c>
  stat = osOK;
 800b542:	2000      	movs	r0, #0
 800b544:	e7f9      	b.n	800b53a <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800b546:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b54a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b54e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	e7f2      	b.n	800b542 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b55c:	b150      	cbz	r0, 800b574 <osMessageQueueGet+0x5a>
 800b55e:	b149      	cbz	r1, 800b574 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b560:	4622      	mov	r2, r4
 800b562:	f000 fe37 	bl	800c1d4 <xQueueReceive>
 800b566:	2801      	cmp	r0, #1
 800b568:	d0eb      	beq.n	800b542 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800b56a:	2c00      	cmp	r4, #0
 800b56c:	d0e3      	beq.n	800b536 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800b56e:	f06f 0001 	mvn.w	r0, #1
 800b572:	e7e2      	b.n	800b53a <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800b574:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b578:	e7df      	b.n	800b53a <osMessageQueueGet+0x20>
	...

0800b57c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b57c:	4b03      	ldr	r3, [pc, #12]	@ (800b58c <vApplicationGetIdleTaskMemory+0x10>)
 800b57e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b580:	4b03      	ldr	r3, [pc, #12]	@ (800b590 <vApplicationGetIdleTaskMemory+0x14>)
 800b582:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b584:	2380      	movs	r3, #128	@ 0x80
 800b586:	6013      	str	r3, [r2, #0]
}
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	2400c3a0 	.word	0x2400c3a0
 800b590:	2400c1a0 	.word	0x2400c1a0

0800b594 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b594:	4b03      	ldr	r3, [pc, #12]	@ (800b5a4 <vApplicationGetTimerTaskMemory+0x10>)
 800b596:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b598:	4b03      	ldr	r3, [pc, #12]	@ (800b5a8 <vApplicationGetTimerTaskMemory+0x14>)
 800b59a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b59c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b5a0:	6013      	str	r3, [r2, #0]
}
 800b5a2:	4770      	bx	lr
 800b5a4:	2400c140 	.word	0x2400c140
 800b5a8:	2400bd40 	.word	0x2400bd40

0800b5ac <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b5ac:	4b10      	ldr	r3, [pc, #64]	@ (800b5f0 <prvInsertBlockIntoFreeList+0x44>)
{
 800b5ae:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4283      	cmp	r3, r0
 800b5b6:	d3fb      	bcc.n	800b5b0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b5b8:	6854      	ldr	r4, [r2, #4]
 800b5ba:	1911      	adds	r1, r2, r4
 800b5bc:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b5be:	bf01      	itttt	eq
 800b5c0:	6841      	ldreq	r1, [r0, #4]
 800b5c2:	4610      	moveq	r0, r2
 800b5c4:	1909      	addeq	r1, r1, r4
 800b5c6:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b5c8:	6844      	ldr	r4, [r0, #4]
 800b5ca:	1901      	adds	r1, r0, r4
 800b5cc:	428b      	cmp	r3, r1
 800b5ce:	d10c      	bne.n	800b5ea <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b5d0:	4908      	ldr	r1, [pc, #32]	@ (800b5f4 <prvInsertBlockIntoFreeList+0x48>)
 800b5d2:	6809      	ldr	r1, [r1, #0]
 800b5d4:	428b      	cmp	r3, r1
 800b5d6:	d003      	beq.n	800b5e0 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b5d8:	6859      	ldr	r1, [r3, #4]
 800b5da:	4421      	add	r1, r4
 800b5dc:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b5de:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b5e0:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b5e2:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b5e4:	bf18      	it	ne
 800b5e6:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5e8:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	e7f8      	b.n	800b5e0 <prvInsertBlockIntoFreeList+0x34>
 800b5ee:	bf00      	nop
 800b5f0:	2400c41c 	.word	0x2400c41c
 800b5f4:	2400c418 	.word	0x2400c418

0800b5f8 <pvPortMalloc>:
{
 800b5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b5fe:	f001 f9df 	bl	800c9c0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b602:	4940      	ldr	r1, [pc, #256]	@ (800b704 <pvPortMalloc+0x10c>)
 800b604:	4d40      	ldr	r5, [pc, #256]	@ (800b708 <pvPortMalloc+0x110>)
 800b606:	680b      	ldr	r3, [r1, #0]
 800b608:	b9f3      	cbnz	r3, 800b648 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800b60a:	4a40      	ldr	r2, [pc, #256]	@ (800b70c <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800b60c:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b60e:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b610:	4e3f      	ldr	r6, [pc, #252]	@ (800b710 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b612:	bf1b      	ittet	ne
 800b614:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b616:	4b3f      	ldrne	r3, [pc, #252]	@ (800b714 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b618:	4b3f      	ldreq	r3, [pc, #252]	@ (800b718 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b61a:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800b61e:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b620:	bf18      	it	ne
 800b622:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b624:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b626:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800b628:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b62a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800b62e:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b632:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800b634:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b636:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b63a:	4b38      	ldr	r3, [pc, #224]	@ (800b71c <pvPortMalloc+0x124>)
 800b63c:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b63e:	4b38      	ldr	r3, [pc, #224]	@ (800b720 <pvPortMalloc+0x128>)
 800b640:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b642:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b646:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b648:	682e      	ldr	r6, [r5, #0]
 800b64a:	4226      	tst	r6, r4
 800b64c:	d155      	bne.n	800b6fa <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800b64e:	2c00      	cmp	r4, #0
 800b650:	d046      	beq.n	800b6e0 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800b652:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b656:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b658:	bf1c      	itt	ne
 800b65a:	f023 0307 	bicne.w	r3, r3, #7
 800b65e:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b660:	2b00      	cmp	r3, #0
 800b662:	d04a      	beq.n	800b6fa <pvPortMalloc+0x102>
 800b664:	4f2e      	ldr	r7, [pc, #184]	@ (800b720 <pvPortMalloc+0x128>)
 800b666:	683c      	ldr	r4, [r7, #0]
 800b668:	429c      	cmp	r4, r3
 800b66a:	d346      	bcc.n	800b6fa <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800b66c:	4a28      	ldr	r2, [pc, #160]	@ (800b710 <pvPortMalloc+0x118>)
 800b66e:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b670:	6868      	ldr	r0, [r5, #4]
 800b672:	4298      	cmp	r0, r3
 800b674:	d204      	bcs.n	800b680 <pvPortMalloc+0x88>
 800b676:	f8d5 c000 	ldr.w	ip, [r5]
 800b67a:	f1bc 0f00 	cmp.w	ip, #0
 800b67e:	d115      	bne.n	800b6ac <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800b680:	6809      	ldr	r1, [r1, #0]
 800b682:	42a9      	cmp	r1, r5
 800b684:	d039      	beq.n	800b6fa <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b686:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b688:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b68c:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b68e:	1ac2      	subs	r2, r0, r3
 800b690:	2a10      	cmp	r2, #16
 800b692:	d912      	bls.n	800b6ba <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b694:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b696:	0741      	lsls	r1, r0, #29
 800b698:	d00b      	beq.n	800b6b2 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b69e:	f383 8811 	msr	BASEPRI, r3
 800b6a2:	f3bf 8f6f 	isb	sy
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	e7fe      	b.n	800b6aa <pvPortMalloc+0xb2>
 800b6ac:	462a      	mov	r2, r5
 800b6ae:	4665      	mov	r5, ip
 800b6b0:	e7de      	b.n	800b670 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6b2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6b4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6b6:	f7ff ff79 	bl	800b5ac <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6ba:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b6bc:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6be:	4917      	ldr	r1, [pc, #92]	@ (800b71c <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6c0:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b6c2:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6c4:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800b6c6:	4a17      	ldr	r2, [pc, #92]	@ (800b724 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6c8:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800b6ca:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800b6cc:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6ce:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800b6d0:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b6d4:	bf38      	it	cc
 800b6d6:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b6d8:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b6dc:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800b6de:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800b6e0:	f001 fa12 	bl	800cb08 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6e4:	0763      	lsls	r3, r4, #29
 800b6e6:	d00a      	beq.n	800b6fe <pvPortMalloc+0x106>
 800b6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	e7fe      	b.n	800b6f8 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800b6fa:	2400      	movs	r4, #0
 800b6fc:	e7f0      	b.n	800b6e0 <pvPortMalloc+0xe8>
}
 800b6fe:	4620      	mov	r0, r4
 800b700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b704:	2400c418 	.word	0x2400c418
 800b708:	2400c404 	.word	0x2400c404
 800b70c:	2400c424 	.word	0x2400c424
 800b710:	2400c41c 	.word	0x2400c41c
 800b714:	24024ac4 	.word	0x24024ac4
 800b718:	000186a0 	.word	0x000186a0
 800b71c:	2400c410 	.word	0x2400c410
 800b720:	2400c414 	.word	0x2400c414
 800b724:	2400c40c 	.word	0x2400c40c

0800b728 <vPortFree>:
{
 800b728:	b510      	push	{r4, lr}
	if( pv != NULL )
 800b72a:	4604      	mov	r4, r0
 800b72c:	b390      	cbz	r0, 800b794 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b72e:	4a1a      	ldr	r2, [pc, #104]	@ (800b798 <vPortFree+0x70>)
 800b730:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b734:	6812      	ldr	r2, [r2, #0]
 800b736:	4213      	tst	r3, r2
 800b738:	d108      	bne.n	800b74c <vPortFree+0x24>
 800b73a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	e7fe      	b.n	800b74a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b74c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b750:	b141      	cbz	r1, 800b764 <vPortFree+0x3c>
 800b752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	e7fe      	b.n	800b762 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b764:	ea23 0302 	bic.w	r3, r3, r2
 800b768:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b76c:	f001 f928 	bl	800c9c0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b770:	4a0a      	ldr	r2, [pc, #40]	@ (800b79c <vPortFree+0x74>)
 800b772:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b776:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b77a:	6811      	ldr	r1, [r2, #0]
 800b77c:	440b      	add	r3, r1
 800b77e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b780:	f7ff ff14 	bl	800b5ac <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b784:	4a06      	ldr	r2, [pc, #24]	@ (800b7a0 <vPortFree+0x78>)
 800b786:	6813      	ldr	r3, [r2, #0]
 800b788:	3301      	adds	r3, #1
}
 800b78a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800b78e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800b790:	f001 b9ba 	b.w	800cb08 <xTaskResumeAll>
}
 800b794:	bd10      	pop	{r4, pc}
 800b796:	bf00      	nop
 800b798:	2400c404 	.word	0x2400c404
 800b79c:	2400c414 	.word	0x2400c414
 800b7a0:	2400c408 	.word	0x2400c408

0800b7a4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7a4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b7a8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7ac:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7ae:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b7b0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b7b8:	4770      	bx	lr

0800b7ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b7be:	4770      	bx	lr

0800b7c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800b7c0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b7c2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800b7c4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b7c6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b7c8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b7ca:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b7cc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b7ce:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	6003      	str	r3, [r0, #0]
}
 800b7d4:	4770      	bx	lr

0800b7d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7d6:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b7d8:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b7da:	1c63      	adds	r3, r4, #1
 800b7dc:	d10a      	bne.n	800b7f4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b7de:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b7e0:	685a      	ldr	r2, [r3, #4]
 800b7e2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b7e4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b7e6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800b7e8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b7ea:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b7ec:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	6003      	str	r3, [r0, #0]
}
 800b7f2:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b7f4:	f100 0208 	add.w	r2, r0, #8
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	6852      	ldr	r2, [r2, #4]
 800b7fc:	6815      	ldr	r5, [r2, #0]
 800b7fe:	42a5      	cmp	r5, r4
 800b800:	d9fa      	bls.n	800b7f8 <vListInsert+0x22>
 800b802:	e7ed      	b.n	800b7e0 <vListInsert+0xa>

0800b804 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b804:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b806:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800b80a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b80c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b80e:	6859      	ldr	r1, [r3, #4]
 800b810:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b812:	bf08      	it	eq
 800b814:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b816:	2200      	movs	r2, #0
 800b818:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	3a01      	subs	r2, #1
 800b81e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b820:	6818      	ldr	r0, [r3, #0]
}
 800b822:	4770      	bx	lr

0800b824 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b824:	4808      	ldr	r0, [pc, #32]	@ (800b848 <prvPortStartFirstTask+0x24>)
 800b826:	6800      	ldr	r0, [r0, #0]
 800b828:	6800      	ldr	r0, [r0, #0]
 800b82a:	f380 8808 	msr	MSP, r0
 800b82e:	f04f 0000 	mov.w	r0, #0
 800b832:	f380 8814 	msr	CONTROL, r0
 800b836:	b662      	cpsie	i
 800b838:	b661      	cpsie	f
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	f3bf 8f6f 	isb	sy
 800b842:	df00      	svc	0
 800b844:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b846:	0000      	.short	0x0000
 800b848:	e000ed08 	.word	0xe000ed08

0800b84c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b84c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b85c <vPortEnableVFP+0x10>
 800b850:	6801      	ldr	r1, [r0, #0]
 800b852:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b856:	6001      	str	r1, [r0, #0]
 800b858:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b85a:	0000      	.short	0x0000
 800b85c:	e000ed88 	.word	0xe000ed88

0800b860 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800b860:	2300      	movs	r3, #0
{
 800b862:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b864:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800b866:	4b0d      	ldr	r3, [pc, #52]	@ (800b89c <prvTaskExitError+0x3c>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	3301      	adds	r3, #1
 800b86c:	d008      	beq.n	800b880 <prvTaskExitError+0x20>
 800b86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	e7fe      	b.n	800b87e <prvTaskExitError+0x1e>
 800b880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b884:	f383 8811 	msr	BASEPRI, r3
 800b888:	f3bf 8f6f 	isb	sy
 800b88c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800b890:	9b01      	ldr	r3, [sp, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d0fc      	beq.n	800b890 <prvTaskExitError+0x30>
}
 800b896:	b002      	add	sp, #8
 800b898:	4770      	bx	lr
 800b89a:	bf00      	nop
 800b89c:	24000078 	.word	0x24000078

0800b8a0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b8a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b8a4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b8a8:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800b8ac:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b8ae:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b8b0:	4b03      	ldr	r3, [pc, #12]	@ (800b8c0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b8b2:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b8b4:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b8b6:	f06f 0302 	mvn.w	r3, #2
 800b8ba:	6203      	str	r3, [r0, #32]
}
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop
 800b8c0:	0800b861 	.word	0x0800b861
	...

0800b8d0 <SVC_Handler>:
	__asm volatile (
 800b8d0:	4b07      	ldr	r3, [pc, #28]	@ (800b8f0 <pxCurrentTCBConst2>)
 800b8d2:	6819      	ldr	r1, [r3, #0]
 800b8d4:	6808      	ldr	r0, [r1, #0]
 800b8d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8da:	f380 8809 	msr	PSP, r0
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f04f 0000 	mov.w	r0, #0
 800b8e6:	f380 8811 	msr	BASEPRI, r0
 800b8ea:	4770      	bx	lr
 800b8ec:	f3af 8000 	nop.w

0800b8f0 <pxCurrentTCBConst2>:
 800b8f0:	24025004 	.word	0x24025004

0800b8f4 <vPortEnterCritical>:
 800b8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b904:	4a0a      	ldr	r2, [pc, #40]	@ (800b930 <vPortEnterCritical+0x3c>)
 800b906:	6813      	ldr	r3, [r2, #0]
 800b908:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800b90a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b90c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b90e:	d10e      	bne.n	800b92e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b910:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b914:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	b143      	cbz	r3, 800b92e <vPortEnterCritical+0x3a>
 800b91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b920:	f383 8811 	msr	BASEPRI, r3
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	e7fe      	b.n	800b92c <vPortEnterCritical+0x38>
}
 800b92e:	4770      	bx	lr
 800b930:	24000078 	.word	0x24000078

0800b934 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b934:	4a08      	ldr	r2, [pc, #32]	@ (800b958 <vPortExitCritical+0x24>)
 800b936:	6813      	ldr	r3, [r2, #0]
 800b938:	b943      	cbnz	r3, 800b94c <vPortExitCritical+0x18>
 800b93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b93e:	f383 8811 	msr	BASEPRI, r3
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	e7fe      	b.n	800b94a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b94c:	3b01      	subs	r3, #1
 800b94e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b950:	b90b      	cbnz	r3, 800b956 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b952:	f383 8811 	msr	BASEPRI, r3
}
 800b956:	4770      	bx	lr
 800b958:	24000078 	.word	0x24000078
 800b95c:	00000000 	.word	0x00000000

0800b960 <PendSV_Handler>:
	__asm volatile
 800b960:	f3ef 8009 	mrs	r0, PSP
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	4b15      	ldr	r3, [pc, #84]	@ (800b9c0 <pxCurrentTCBConst>)
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	f01e 0f10 	tst.w	lr, #16
 800b970:	bf08      	it	eq
 800b972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97a:	6010      	str	r0, [r2, #0]
 800b97c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b980:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b984:	f380 8811 	msr	BASEPRI, r0
 800b988:	f3bf 8f4f 	dsb	sy
 800b98c:	f3bf 8f6f 	isb	sy
 800b990:	f001 f998 	bl	800ccc4 <vTaskSwitchContext>
 800b994:	f04f 0000 	mov.w	r0, #0
 800b998:	f380 8811 	msr	BASEPRI, r0
 800b99c:	bc09      	pop	{r0, r3}
 800b99e:	6819      	ldr	r1, [r3, #0]
 800b9a0:	6808      	ldr	r0, [r1, #0]
 800b9a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a6:	f01e 0f10 	tst.w	lr, #16
 800b9aa:	bf08      	it	eq
 800b9ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b9b0:	f380 8809 	msr	PSP, r0
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	f3af 8000 	nop.w

0800b9c0 <pxCurrentTCBConst>:
 800b9c0:	24025004 	.word	0x24025004

0800b9c4 <xPortSysTickHandler>:
{
 800b9c4:	b508      	push	{r3, lr}
	__asm volatile
 800b9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ca:	f383 8811 	msr	BASEPRI, r3
 800b9ce:	f3bf 8f6f 	isb	sy
 800b9d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b9d6:	f001 f801 	bl	800c9dc <xTaskIncrementTick>
 800b9da:	b128      	cbz	r0, 800b9e8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b9dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b9e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	f383 8811 	msr	BASEPRI, r3
}
 800b9ee:	bd08      	pop	{r3, pc}

0800b9f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9f0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800b9f4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b9f6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9fa:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b9fc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b9fe:	4b04      	ldr	r3, [pc, #16]	@ (800ba10 <vPortSetupTimerInterrupt+0x20>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba06:	3b01      	subs	r3, #1
 800ba08:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba0a:	2307      	movs	r3, #7
 800ba0c:	6113      	str	r3, [r2, #16]
}
 800ba0e:	4770      	bx	lr
 800ba10:	2400006c 	.word	0x2400006c

0800ba14 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba14:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800ba18:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba1a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800ba1e:	4a38      	ldr	r2, [pc, #224]	@ (800bb00 <xPortStartScheduler+0xec>)
 800ba20:	4291      	cmp	r1, r2
 800ba22:	d108      	bne.n	800ba36 <xPortStartScheduler+0x22>
	__asm volatile
 800ba24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba28:	f383 8811 	msr	BASEPRI, r3
 800ba2c:	f3bf 8f6f 	isb	sy
 800ba30:	f3bf 8f4f 	dsb	sy
 800ba34:	e7fe      	b.n	800ba34 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba36:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800ba3a:	4b32      	ldr	r3, [pc, #200]	@ (800bb04 <xPortStartScheduler+0xf0>)
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d108      	bne.n	800ba52 <xPortStartScheduler+0x3e>
 800ba40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	e7fe      	b.n	800ba50 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba52:	4b2d      	ldr	r3, [pc, #180]	@ (800bb08 <xPortStartScheduler+0xf4>)
 800ba54:	781a      	ldrb	r2, [r3, #0]
 800ba56:	b2d2      	uxtb	r2, r2
 800ba58:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba5a:	22ff      	movs	r2, #255	@ 0xff
 800ba5c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba5e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba60:	4a2a      	ldr	r2, [pc, #168]	@ (800bb0c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba68:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ba6c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ba70:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba72:	2307      	movs	r3, #7
 800ba74:	4a26      	ldr	r2, [pc, #152]	@ (800bb10 <xPortStartScheduler+0xfc>)
 800ba76:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba78:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800ba7c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba7e:	0609      	lsls	r1, r1, #24
 800ba80:	d40a      	bmi.n	800ba98 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ba82:	2b03      	cmp	r3, #3
 800ba84:	d011      	beq.n	800baaa <xPortStartScheduler+0x96>
 800ba86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	e7fe      	b.n	800ba96 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800baa0:	005b      	lsls	r3, r3, #1
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	f88d 3003 	strb.w	r3, [sp, #3]
 800baa8:	e7e6      	b.n	800ba78 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800baaa:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800baae:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800bab2:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bab4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bab6:	9b01      	ldr	r3, [sp, #4]
 800bab8:	4a13      	ldr	r2, [pc, #76]	@ (800bb08 <xPortStartScheduler+0xf4>)
 800baba:	b2db      	uxtb	r3, r3
 800babc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800babe:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800bac2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bac6:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800baca:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800bace:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bad2:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800bad6:	f7ff ff8b 	bl	800b9f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800bada:	4b0e      	ldr	r3, [pc, #56]	@ (800bb14 <xPortStartScheduler+0x100>)
 800badc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800bade:	f7ff feb5 	bl	800b84c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bae2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800bae6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800baea:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800baee:	f7ff fe99 	bl	800b824 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800baf2:	f001 f8e7 	bl	800ccc4 <vTaskSwitchContext>
}
 800baf6:	4628      	mov	r0, r5
	prvTaskExitError();
 800baf8:	f7ff feb2 	bl	800b860 <prvTaskExitError>
}
 800bafc:	b003      	add	sp, #12
 800bafe:	bd30      	pop	{r4, r5, pc}
 800bb00:	410fc271 	.word	0x410fc271
 800bb04:	410fc270 	.word	0x410fc270
 800bb08:	e000e400 	.word	0xe000e400
 800bb0c:	24024ac8 	.word	0x24024ac8
 800bb10:	24024ac4 	.word	0x24024ac4
 800bb14:	24000078 	.word	0x24000078

0800bb18 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb18:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bb1c:	2b0f      	cmp	r3, #15
 800bb1e:	d90e      	bls.n	800bb3e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb20:	4a11      	ldr	r2, [pc, #68]	@ (800bb68 <vPortValidateInterruptPriority+0x50>)
 800bb22:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bb24:	4a11      	ldr	r2, [pc, #68]	@ (800bb6c <vPortValidateInterruptPriority+0x54>)
 800bb26:	7812      	ldrb	r2, [r2, #0]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d908      	bls.n	800bb3e <vPortValidateInterruptPriority+0x26>
 800bb2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb30:	f383 8811 	msr	BASEPRI, r3
 800bb34:	f3bf 8f6f 	isb	sy
 800bb38:	f3bf 8f4f 	dsb	sy
 800bb3c:	e7fe      	b.n	800bb3c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bb3e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bb42:	4a0b      	ldr	r2, [pc, #44]	@ (800bb70 <vPortValidateInterruptPriority+0x58>)
 800bb44:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800bb48:	6812      	ldr	r2, [r2, #0]
 800bb4a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d908      	bls.n	800bb64 <vPortValidateInterruptPriority+0x4c>
 800bb52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	e7fe      	b.n	800bb62 <vPortValidateInterruptPriority+0x4a>
	}
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop
 800bb68:	e000e3f0 	.word	0xe000e3f0
 800bb6c:	24024ac8 	.word	0x24024ac8
 800bb70:	24024ac4 	.word	0x24024ac4

0800bb74 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bb74:	b510      	push	{r4, lr}
 800bb76:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb78:	f7ff febc 	bl	800b8f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bb7c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800bb7e:	f7ff fed9 	bl	800b934 <vPortExitCritical>

	return xReturn;
}
 800bb82:	fab4 f084 	clz	r0, r4
 800bb86:	0940      	lsrs	r0, r0, #5
 800bb88:	bd10      	pop	{r4, pc}

0800bb8a <prvCopyDataToQueue>:
{
 800bb8a:	b570      	push	{r4, r5, r6, lr}
 800bb8c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb8e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800bb90:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb92:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb94:	b942      	cbnz	r2, 800bba8 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb96:	6806      	ldr	r6, [r0, #0]
 800bb98:	b99e      	cbnz	r6, 800bbc2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb9a:	6880      	ldr	r0, [r0, #8]
 800bb9c:	f001 f9f2 	bl	800cf84 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bba0:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bba2:	3501      	adds	r5, #1
 800bba4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800bba6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800bba8:	b96e      	cbnz	r6, 800bbc6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bbaa:	6840      	ldr	r0, [r0, #4]
 800bbac:	f014 ff15 	bl	80209da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbb0:	6863      	ldr	r3, [r4, #4]
 800bbb2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800bbb4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbb6:	68a2      	ldr	r2, [r4, #8]
 800bbb8:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbba:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bbbc:	bf24      	itt	cs
 800bbbe:	6823      	ldrcs	r3, [r4, #0]
 800bbc0:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	e7ed      	b.n	800bba2 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bbc6:	68c0      	ldr	r0, [r0, #12]
 800bbc8:	f014 ff07 	bl	80209da <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bbcc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800bbce:	68e3      	ldr	r3, [r4, #12]
 800bbd0:	4251      	negs	r1, r2
 800bbd2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbd4:	6822      	ldr	r2, [r4, #0]
 800bbd6:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bbd8:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bbda:	bf3e      	ittt	cc
 800bbdc:	68a3      	ldrcc	r3, [r4, #8]
 800bbde:	185b      	addcc	r3, r3, r1
 800bbe0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800bbe2:	2e02      	cmp	r6, #2
 800bbe4:	d1ed      	bne.n	800bbc2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bbe6:	b10d      	cbz	r5, 800bbec <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800bbe8:	3d01      	subs	r5, #1
 800bbea:	e7ea      	b.n	800bbc2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800bbec:	4628      	mov	r0, r5
 800bbee:	e7d8      	b.n	800bba2 <prvCopyDataToQueue+0x18>

0800bbf0 <prvCopyDataFromQueue>:
{
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bbf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800bbf6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bbf8:	b162      	cbz	r2, 800bc14 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbfa:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bbfc:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbfe:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc00:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc02:	60dc      	str	r4, [r3, #12]
}
 800bc04:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bc08:	bf24      	itt	cs
 800bc0a:	6819      	ldrcs	r1, [r3, #0]
 800bc0c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc0e:	68d9      	ldr	r1, [r3, #12]
 800bc10:	f014 bee3 	b.w	80209da <memcpy>
}
 800bc14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc18:	4770      	bx	lr

0800bc1a <prvUnlockQueue>:
{
 800bc1a:	b570      	push	{r4, r5, r6, lr}
 800bc1c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800bc1e:	f7ff fe69 	bl	800b8f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800bc22:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc26:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800bc2a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc2c:	2d00      	cmp	r5, #0
 800bc2e:	dc14      	bgt.n	800bc5a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800bc30:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc32:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800bc36:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800bc3a:	f7ff fe7b 	bl	800b934 <vPortExitCritical>
	taskENTER_CRITICAL();
 800bc3e:	f7ff fe59 	bl	800b8f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800bc42:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800bc46:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc48:	2d00      	cmp	r5, #0
 800bc4a:	dc12      	bgt.n	800bc72 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800bc4c:	23ff      	movs	r3, #255	@ 0xff
 800bc4e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800bc52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800bc56:	f7ff be6d 	b.w	800b934 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc5a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d0e7      	beq.n	800bc30 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc60:	4630      	mov	r0, r6
 800bc62:	f001 f8ab 	bl	800cdbc <xTaskRemoveFromEventList>
 800bc66:	b108      	cbz	r0, 800bc6c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800bc68:	f001 f932 	bl	800ced0 <vTaskMissedYield>
			--cTxLock;
 800bc6c:	3d01      	subs	r5, #1
 800bc6e:	b26d      	sxtb	r5, r5
 800bc70:	e7dc      	b.n	800bc2c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc72:	6923      	ldr	r3, [r4, #16]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d0e9      	beq.n	800bc4c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc78:	4630      	mov	r0, r6
 800bc7a:	f001 f89f 	bl	800cdbc <xTaskRemoveFromEventList>
 800bc7e:	b108      	cbz	r0, 800bc84 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800bc80:	f001 f926 	bl	800ced0 <vTaskMissedYield>
				--cRxLock;
 800bc84:	3d01      	subs	r5, #1
 800bc86:	b26d      	sxtb	r5, r5
 800bc88:	e7de      	b.n	800bc48 <prvUnlockQueue+0x2e>

0800bc8a <xQueueGenericReset>:
{
 800bc8a:	b538      	push	{r3, r4, r5, lr}
 800bc8c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800bc8e:	4604      	mov	r4, r0
 800bc90:	b940      	cbnz	r0, 800bca4 <xQueueGenericReset+0x1a>
 800bc92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc96:	f383 8811 	msr	BASEPRI, r3
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	e7fe      	b.n	800bca2 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800bca4:	f7ff fe26 	bl	800b8f4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bca8:	6822      	ldr	r2, [r4, #0]
 800bcaa:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcae:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcb0:	434b      	muls	r3, r1
 800bcb2:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcb4:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcb6:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcb8:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bcba:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800bcbc:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcbe:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bcc0:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800bcc2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bcc6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800bcca:	b9a5      	cbnz	r5, 800bcf6 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bccc:	6923      	ldr	r3, [r4, #16]
 800bcce:	b173      	cbz	r3, 800bcee <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcd0:	f104 0010 	add.w	r0, r4, #16
 800bcd4:	f001 f872 	bl	800cdbc <xTaskRemoveFromEventList>
 800bcd8:	b148      	cbz	r0, 800bcee <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800bcda:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bcde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bce2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bce6:	f3bf 8f4f 	dsb	sy
 800bcea:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800bcee:	f7ff fe21 	bl	800b934 <vPortExitCritical>
}
 800bcf2:	2001      	movs	r0, #1
 800bcf4:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bcf6:	f104 0010 	add.w	r0, r4, #16
 800bcfa:	f7ff fd53 	bl	800b7a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bcfe:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800bd02:	f7ff fd4f 	bl	800b7a4 <vListInitialise>
 800bd06:	e7f2      	b.n	800bcee <xQueueGenericReset+0x64>

0800bd08 <xQueueGenericCreateStatic>:
	{
 800bd08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd0a:	460d      	mov	r5, r1
 800bd0c:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd0e:	b940      	cbnz	r0, 800bd22 <xQueueGenericCreateStatic+0x1a>
 800bd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd14:	f383 8811 	msr	BASEPRI, r3
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	e7fe      	b.n	800bd20 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800bd22:	b943      	cbnz	r3, 800bd36 <xQueueGenericCreateStatic+0x2e>
 800bd24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd28:	f383 8811 	msr	BASEPRI, r3
 800bd2c:	f3bf 8f6f 	isb	sy
 800bd30:	f3bf 8f4f 	dsb	sy
 800bd34:	e7fe      	b.n	800bd34 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bd36:	b14a      	cbz	r2, 800bd4c <xQueueGenericCreateStatic+0x44>
 800bd38:	b991      	cbnz	r1, 800bd60 <xQueueGenericCreateStatic+0x58>
 800bd3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	e7fe      	b.n	800bd4a <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd4c:	b141      	cbz	r1, 800bd60 <xQueueGenericCreateStatic+0x58>
 800bd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	e7fe      	b.n	800bd5e <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd60:	2350      	movs	r3, #80	@ 0x50
 800bd62:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd64:	9b01      	ldr	r3, [sp, #4]
 800bd66:	2b50      	cmp	r3, #80	@ 0x50
 800bd68:	d008      	beq.n	800bd7c <xQueueGenericCreateStatic+0x74>
 800bd6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	e7fe      	b.n	800bd7a <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd7c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bd7e:	2d00      	cmp	r5, #0
 800bd80:	bf08      	it	eq
 800bd82:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd84:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd86:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800bd8a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800bd8c:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bd90:	4620      	mov	r0, r4
 800bd92:	f7ff ff7a 	bl	800bc8a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800bd96:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800bd9a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800bd9c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800bda0:	b003      	add	sp, #12
 800bda2:	bd30      	pop	{r4, r5, pc}

0800bda4 <xQueueGenericCreate>:
	{
 800bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda6:	460d      	mov	r5, r1
 800bda8:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bdaa:	4606      	mov	r6, r0
 800bdac:	b940      	cbnz	r0, 800bdc0 <xQueueGenericCreate+0x1c>
 800bdae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdb2:	f383 8811 	msr	BASEPRI, r3
 800bdb6:	f3bf 8f6f 	isb	sy
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	e7fe      	b.n	800bdbe <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdc0:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bdc2:	3050      	adds	r0, #80	@ 0x50
 800bdc4:	f7ff fc18 	bl	800b5f8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800bdc8:	4604      	mov	r4, r0
 800bdca:	b170      	cbz	r0, 800bdea <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800bdd2:	b165      	cbz	r5, 800bdee <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdd4:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bdd8:	2101      	movs	r1, #1
 800bdda:	4620      	mov	r0, r4
 800bddc:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800bdde:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bde2:	f7ff ff52 	bl	800bc8a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800bde6:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800bdea:	4620      	mov	r0, r4
 800bdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bdee:	4603      	mov	r3, r0
 800bdf0:	e7f2      	b.n	800bdd8 <xQueueGenericCreate+0x34>

0800bdf2 <xQueueCreateCountingSemaphoreStatic>:
	{
 800bdf2:	b513      	push	{r0, r1, r4, lr}
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800bdf8:	b940      	cbnz	r0, 800be0c <xQueueCreateCountingSemaphoreStatic+0x1a>
 800bdfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdfe:	f383 8811 	msr	BASEPRI, r3
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	e7fe      	b.n	800be0a <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800be0c:	4288      	cmp	r0, r1
 800be0e:	d208      	bcs.n	800be22 <xQueueCreateCountingSemaphoreStatic+0x30>
 800be10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be14:	f383 8811 	msr	BASEPRI, r3
 800be18:	f3bf 8f6f 	isb	sy
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	e7fe      	b.n	800be20 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800be22:	2202      	movs	r2, #2
 800be24:	9200      	str	r2, [sp, #0]
 800be26:	2200      	movs	r2, #0
 800be28:	4611      	mov	r1, r2
 800be2a:	f7ff ff6d 	bl	800bd08 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800be2e:	b100      	cbz	r0, 800be32 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800be30:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800be32:	b002      	add	sp, #8
 800be34:	bd10      	pop	{r4, pc}

0800be36 <xQueueCreateCountingSemaphore>:
	{
 800be36:	b510      	push	{r4, lr}
 800be38:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800be3a:	b940      	cbnz	r0, 800be4e <xQueueCreateCountingSemaphore+0x18>
 800be3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be40:	f383 8811 	msr	BASEPRI, r3
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	f3bf 8f4f 	dsb	sy
 800be4c:	e7fe      	b.n	800be4c <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800be4e:	4288      	cmp	r0, r1
 800be50:	d208      	bcs.n	800be64 <xQueueCreateCountingSemaphore+0x2e>
 800be52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be56:	f383 8811 	msr	BASEPRI, r3
 800be5a:	f3bf 8f6f 	isb	sy
 800be5e:	f3bf 8f4f 	dsb	sy
 800be62:	e7fe      	b.n	800be62 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800be64:	2202      	movs	r2, #2
 800be66:	2100      	movs	r1, #0
 800be68:	f7ff ff9c 	bl	800bda4 <xQueueGenericCreate>
		if( xHandle != NULL )
 800be6c:	b100      	cbz	r0, 800be70 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800be6e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800be70:	bd10      	pop	{r4, pc}

0800be72 <xQueueGenericSend>:
{
 800be72:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800be76:	460f      	mov	r7, r1
 800be78:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800be7a:	4604      	mov	r4, r0
{
 800be7c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800be7e:	b940      	cbnz	r0, 800be92 <xQueueGenericSend+0x20>
 800be80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be84:	f383 8811 	msr	BASEPRI, r3
 800be88:	f3bf 8f6f 	isb	sy
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	e7fe      	b.n	800be90 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be92:	b951      	cbnz	r1, 800beaa <xQueueGenericSend+0x38>
 800be94:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800be96:	b143      	cbz	r3, 800beaa <xQueueGenericSend+0x38>
 800be98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	e7fe      	b.n	800bea8 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800beaa:	2e02      	cmp	r6, #2
 800beac:	d10b      	bne.n	800bec6 <xQueueGenericSend+0x54>
 800beae:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d008      	beq.n	800bec6 <xQueueGenericSend+0x54>
 800beb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb8:	f383 8811 	msr	BASEPRI, r3
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	e7fe      	b.n	800bec4 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bec6:	f001 f80f 	bl	800cee8 <xTaskGetSchedulerState>
 800beca:	4605      	mov	r5, r0
 800becc:	b330      	cbz	r0, 800bf1c <xQueueGenericSend+0xaa>
 800bece:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800bed0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800bed4:	f7ff fd0e 	bl	800b8f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bed8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800beda:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bedc:	429a      	cmp	r2, r3
 800bede:	d301      	bcc.n	800bee4 <xQueueGenericSend+0x72>
 800bee0:	2e02      	cmp	r6, #2
 800bee2:	d127      	bne.n	800bf34 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bee4:	4632      	mov	r2, r6
 800bee6:	4639      	mov	r1, r7
 800bee8:	4620      	mov	r0, r4
 800beea:	f7ff fe4e 	bl	800bb8a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800beee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bef0:	b11b      	cbz	r3, 800befa <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bef2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800bef6:	f000 ff61 	bl	800cdbc <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800befa:	b148      	cbz	r0, 800bf10 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800befc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bf00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf04:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800bf10:	f7ff fd10 	bl	800b934 <vPortExitCritical>
				return pdPASS;
 800bf14:	2001      	movs	r0, #1
}
 800bf16:	b004      	add	sp, #16
 800bf18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf1c:	9b01      	ldr	r3, [sp, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d0d6      	beq.n	800bed0 <xQueueGenericSend+0x5e>
 800bf22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf26:	f383 8811 	msr	BASEPRI, r3
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	f3bf 8f4f 	dsb	sy
 800bf32:	e7fe      	b.n	800bf32 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf34:	9b01      	ldr	r3, [sp, #4]
 800bf36:	b91b      	cbnz	r3, 800bf40 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800bf38:	f7ff fcfc 	bl	800b934 <vPortExitCritical>
					return errQUEUE_FULL;
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	e7ea      	b.n	800bf16 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800bf40:	b915      	cbnz	r5, 800bf48 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf42:	a802      	add	r0, sp, #8
 800bf44:	f000 ff7c 	bl	800ce40 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800bf48:	f7ff fcf4 	bl	800b934 <vPortExitCritical>
		vTaskSuspendAll();
 800bf4c:	f000 fd38 	bl	800c9c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf50:	f7ff fcd0 	bl	800b8f4 <vPortEnterCritical>
 800bf54:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bf58:	2bff      	cmp	r3, #255	@ 0xff
 800bf5a:	d101      	bne.n	800bf60 <xQueueGenericSend+0xee>
 800bf5c:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800bf60:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bf64:	2bff      	cmp	r3, #255	@ 0xff
 800bf66:	d101      	bne.n	800bf6c <xQueueGenericSend+0xfa>
 800bf68:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800bf6c:	f7ff fce2 	bl	800b934 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf70:	a901      	add	r1, sp, #4
 800bf72:	a802      	add	r0, sp, #8
 800bf74:	f000 ff70 	bl	800ce58 <xTaskCheckForTimeOut>
 800bf78:	bb38      	cbnz	r0, 800bfca <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf7a:	f7ff fcbb 	bl	800b8f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bf7e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bf80:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d10e      	bne.n	800bfa4 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800bf86:	f7ff fcd5 	bl	800b934 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bf8a:	9901      	ldr	r1, [sp, #4]
 800bf8c:	f104 0010 	add.w	r0, r4, #16
 800bf90:	f000 fedc 	bl	800cd4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf94:	4620      	mov	r0, r4
 800bf96:	f7ff fe40 	bl	800bc1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf9a:	f000 fdb5 	bl	800cb08 <xTaskResumeAll>
 800bf9e:	b148      	cbz	r0, 800bfb4 <xQueueGenericSend+0x142>
 800bfa0:	2501      	movs	r5, #1
 800bfa2:	e797      	b.n	800bed4 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800bfa4:	f7ff fcc6 	bl	800b934 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f7ff fe36 	bl	800bc1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfae:	f000 fdab 	bl	800cb08 <xTaskResumeAll>
 800bfb2:	e7f5      	b.n	800bfa0 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800bfb4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bfb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfbc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	e7ea      	b.n	800bfa0 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800bfca:	4620      	mov	r0, r4
 800bfcc:	f7ff fe25 	bl	800bc1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfd0:	f000 fd9a 	bl	800cb08 <xTaskResumeAll>
			return errQUEUE_FULL;
 800bfd4:	e7b2      	b.n	800bf3c <xQueueGenericSend+0xca>

0800bfd6 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bfd6:	2200      	movs	r2, #0
	{
 800bfd8:	460b      	mov	r3, r1
 800bfda:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bfdc:	4611      	mov	r1, r2
 800bfde:	9000      	str	r0, [sp, #0]
 800bfe0:	2001      	movs	r0, #1
 800bfe2:	f7ff fe91 	bl	800bd08 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	b138      	cbz	r0, 800bffa <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bfea:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bfec:	461a      	mov	r2, r3
 800bfee:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bff0:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bff2:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bff4:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bff6:	f7ff ff3c 	bl	800be72 <xQueueGenericSend>
	}
 800bffa:	4620      	mov	r0, r4
 800bffc:	b002      	add	sp, #8
 800bffe:	bd10      	pop	{r4, pc}

0800c000 <xQueueGiveMutexRecursive>:
	{
 800c000:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800c002:	4604      	mov	r4, r0
 800c004:	b940      	cbnz	r0, 800c018 <xQueueGiveMutexRecursive+0x18>
 800c006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c00a:	f383 8811 	msr	BASEPRI, r3
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	e7fe      	b.n	800c016 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c018:	6885      	ldr	r5, [r0, #8]
 800c01a:	f000 ff5f 	bl	800cedc <xTaskGetCurrentTaskHandle>
 800c01e:	4285      	cmp	r5, r0
 800c020:	d10b      	bne.n	800c03a <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c022:	68e3      	ldr	r3, [r4, #12]
 800c024:	3b01      	subs	r3, #1
 800c026:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c028:	b10b      	cbz	r3, 800c02e <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800c02a:	2001      	movs	r0, #1
	}
 800c02c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c02e:	461a      	mov	r2, r3
 800c030:	4619      	mov	r1, r3
 800c032:	4620      	mov	r0, r4
 800c034:	f7ff ff1d 	bl	800be72 <xQueueGenericSend>
 800c038:	e7f7      	b.n	800c02a <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800c03a:	2000      	movs	r0, #0
		return xReturn;
 800c03c:	e7f6      	b.n	800c02c <xQueueGiveMutexRecursive+0x2c>

0800c03e <xQueueCreateMutex>:
	{
 800c03e:	b570      	push	{r4, r5, r6, lr}
 800c040:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c042:	2050      	movs	r0, #80	@ 0x50
 800c044:	f7ff fad8 	bl	800b5f8 <pvPortMalloc>
 800c048:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800c04a:	b198      	cbz	r0, 800c074 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c04c:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800c04e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c050:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c052:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800c056:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c05a:	f7ff fe16 	bl	800bc8a <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c05e:	462b      	mov	r3, r5
 800c060:	462a      	mov	r2, r5
 800c062:	4629      	mov	r1, r5
 800c064:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800c066:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c06a:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c06c:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c06e:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c070:	f7ff feff 	bl	800be72 <xQueueGenericSend>
	}
 800c074:	4620      	mov	r0, r4
 800c076:	bd70      	pop	{r4, r5, r6, pc}

0800c078 <xQueueGenericSendFromISR>:
{
 800c078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c07c:	4689      	mov	r9, r1
 800c07e:	4617      	mov	r7, r2
 800c080:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800c082:	4604      	mov	r4, r0
 800c084:	b940      	cbnz	r0, 800c098 <xQueueGenericSendFromISR+0x20>
 800c086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	e7fe      	b.n	800c096 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c098:	b951      	cbnz	r1, 800c0b0 <xQueueGenericSendFromISR+0x38>
 800c09a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c09c:	b143      	cbz	r3, 800c0b0 <xQueueGenericSendFromISR+0x38>
 800c09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a2:	f383 8811 	msr	BASEPRI, r3
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	e7fe      	b.n	800c0ae <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0b0:	2e02      	cmp	r6, #2
 800c0b2:	d10b      	bne.n	800c0cc <xQueueGenericSendFromISR+0x54>
 800c0b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d008      	beq.n	800c0cc <xQueueGenericSendFromISR+0x54>
 800c0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	e7fe      	b.n	800c0ca <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0cc:	f7ff fd24 	bl	800bb18 <vPortValidateInterruptPriority>
	__asm volatile
 800c0d0:	f3ef 8811 	mrs	r8, BASEPRI
 800c0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d8:	f383 8811 	msr	BASEPRI, r3
 800c0dc:	f3bf 8f6f 	isb	sy
 800c0e0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c0e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d301      	bcc.n	800c0f0 <xQueueGenericSendFromISR+0x78>
 800c0ec:	2e02      	cmp	r6, #2
 800c0ee:	d11e      	bne.n	800c12e <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0f0:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0f4:	4632      	mov	r2, r6
 800c0f6:	4649      	mov	r1, r9
 800c0f8:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0fa:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0fc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0fe:	f7ff fd44 	bl	800bb8a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800c102:	1c6b      	adds	r3, r5, #1
 800c104:	d10e      	bne.n	800c124 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c106:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c108:	b13b      	cbz	r3, 800c11a <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c10a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c10e:	f000 fe55 	bl	800cdbc <xTaskRemoveFromEventList>
 800c112:	b110      	cbz	r0, 800c11a <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800c114:	b10f      	cbz	r7, 800c11a <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c116:	2301      	movs	r3, #1
 800c118:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800c11a:	2001      	movs	r0, #1
	__asm volatile
 800c11c:	f388 8811 	msr	BASEPRI, r8
}
 800c120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c124:	3501      	adds	r5, #1
 800c126:	b26d      	sxtb	r5, r5
 800c128:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800c12c:	e7f5      	b.n	800c11a <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800c12e:	2000      	movs	r0, #0
 800c130:	e7f4      	b.n	800c11c <xQueueGenericSendFromISR+0xa4>

0800c132 <xQueueGiveFromISR>:
{
 800c132:	b570      	push	{r4, r5, r6, lr}
 800c134:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800c136:	4604      	mov	r4, r0
 800c138:	b940      	cbnz	r0, 800c14c <xQueueGiveFromISR+0x1a>
	__asm volatile
 800c13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c13e:	f383 8811 	msr	BASEPRI, r3
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	e7fe      	b.n	800c14a <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c14c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c14e:	b143      	cbz	r3, 800c162 <xQueueGiveFromISR+0x30>
 800c150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c154:	f383 8811 	msr	BASEPRI, r3
 800c158:	f3bf 8f6f 	isb	sy
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	e7fe      	b.n	800c160 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c162:	6803      	ldr	r3, [r0, #0]
 800c164:	b953      	cbnz	r3, 800c17c <xQueueGiveFromISR+0x4a>
 800c166:	6883      	ldr	r3, [r0, #8]
 800c168:	b143      	cbz	r3, 800c17c <xQueueGiveFromISR+0x4a>
 800c16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c16e:	f383 8811 	msr	BASEPRI, r3
 800c172:	f3bf 8f6f 	isb	sy
 800c176:	f3bf 8f4f 	dsb	sy
 800c17a:	e7fe      	b.n	800c17a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c17c:	f7ff fccc 	bl	800bb18 <vPortValidateInterruptPriority>
	__asm volatile
 800c180:	f3ef 8611 	mrs	r6, BASEPRI
 800c184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c188:	f383 8811 	msr	BASEPRI, r3
 800c18c:	f3bf 8f6f 	isb	sy
 800c190:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c194:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c196:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c198:	4293      	cmp	r3, r2
 800c19a:	d919      	bls.n	800c1d0 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c19c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c1a0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800c1a2:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800c1a4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c1a6:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800c1a8:	d10d      	bne.n	800c1c6 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c1ac:	b13b      	cbz	r3, 800c1be <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1ae:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c1b2:	f000 fe03 	bl	800cdbc <xTaskRemoveFromEventList>
 800c1b6:	b110      	cbz	r0, 800c1be <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800c1b8:	b10d      	cbz	r5, 800c1be <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800c1be:	2001      	movs	r0, #1
	__asm volatile
 800c1c0:	f386 8811 	msr	BASEPRI, r6
}
 800c1c4:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	b25b      	sxtb	r3, r3
 800c1ca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c1ce:	e7f6      	b.n	800c1be <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800c1d0:	2000      	movs	r0, #0
 800c1d2:	e7f5      	b.n	800c1c0 <xQueueGiveFromISR+0x8e>

0800c1d4 <xQueueReceive>:
{
 800c1d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c1d8:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800c1da:	4604      	mov	r4, r0
{
 800c1dc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c1de:	b940      	cbnz	r0, 800c1f2 <xQueueReceive+0x1e>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	e7fe      	b.n	800c1f0 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1f2:	b951      	cbnz	r1, 800c20a <xQueueReceive+0x36>
 800c1f4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c1f6:	b143      	cbz	r3, 800c20a <xQueueReceive+0x36>
 800c1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	e7fe      	b.n	800c208 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c20a:	f000 fe6d 	bl	800cee8 <xTaskGetSchedulerState>
 800c20e:	4605      	mov	r5, r0
 800c210:	b318      	cbz	r0, 800c25a <xQueueReceive+0x86>
 800c212:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800c214:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800c218:	f7ff fb6c 	bl	800b8f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c21c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c21e:	b347      	cbz	r7, 800c272 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c220:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c222:	4631      	mov	r1, r6
 800c224:	4620      	mov	r0, r4
 800c226:	f7ff fce3 	bl	800bbf0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c22a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c22c:	6923      	ldr	r3, [r4, #16]
 800c22e:	b173      	cbz	r3, 800c24e <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c230:	f104 0010 	add.w	r0, r4, #16
 800c234:	f000 fdc2 	bl	800cdbc <xTaskRemoveFromEventList>
 800c238:	b148      	cbz	r0, 800c24e <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800c23a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c23e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c242:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c246:	f3bf 8f4f 	dsb	sy
 800c24a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c24e:	f7ff fb71 	bl	800b934 <vPortExitCritical>
				return pdPASS;
 800c252:	2001      	movs	r0, #1
}
 800c254:	b004      	add	sp, #16
 800c256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c25a:	9b01      	ldr	r3, [sp, #4]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d0d9      	beq.n	800c214 <xQueueReceive+0x40>
 800c260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c264:	f383 8811 	msr	BASEPRI, r3
 800c268:	f3bf 8f6f 	isb	sy
 800c26c:	f3bf 8f4f 	dsb	sy
 800c270:	e7fe      	b.n	800c270 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c272:	9b01      	ldr	r3, [sp, #4]
 800c274:	b91b      	cbnz	r3, 800c27e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800c276:	f7ff fb5d 	bl	800b934 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c27a:	2000      	movs	r0, #0
 800c27c:	e7ea      	b.n	800c254 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800c27e:	b915      	cbnz	r5, 800c286 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c280:	a802      	add	r0, sp, #8
 800c282:	f000 fddd 	bl	800ce40 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c286:	f7ff fb55 	bl	800b934 <vPortExitCritical>
		vTaskSuspendAll();
 800c28a:	f000 fb99 	bl	800c9c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c28e:	f7ff fb31 	bl	800b8f4 <vPortEnterCritical>
 800c292:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c296:	2bff      	cmp	r3, #255	@ 0xff
 800c298:	d101      	bne.n	800c29e <xQueueReceive+0xca>
 800c29a:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800c29e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c2a2:	2bff      	cmp	r3, #255	@ 0xff
 800c2a4:	d101      	bne.n	800c2aa <xQueueReceive+0xd6>
 800c2a6:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800c2aa:	f7ff fb43 	bl	800b934 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2ae:	a901      	add	r1, sp, #4
 800c2b0:	a802      	add	r0, sp, #8
 800c2b2:	f000 fdd1 	bl	800ce58 <xTaskCheckForTimeOut>
 800c2b6:	bb00      	cbnz	r0, 800c2fa <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f7ff fc5b 	bl	800bb74 <prvIsQueueEmpty>
 800c2be:	b1b0      	cbz	r0, 800c2ee <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2c0:	9901      	ldr	r1, [sp, #4]
 800c2c2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c2c6:	f000 fd41 	bl	800cd4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f7ff fca5 	bl	800bc1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2d0:	f000 fc1a 	bl	800cb08 <xTaskResumeAll>
 800c2d4:	b948      	cbnz	r0, 800c2ea <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800c2d6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c2da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2de:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c2e2:	f3bf 8f4f 	dsb	sy
 800c2e6:	f3bf 8f6f 	isb	sy
 800c2ea:	2501      	movs	r5, #1
 800c2ec:	e794      	b.n	800c218 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	f7ff fc93 	bl	800bc1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2f4:	f000 fc08 	bl	800cb08 <xTaskResumeAll>
 800c2f8:	e7f7      	b.n	800c2ea <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f7ff fc8d 	bl	800bc1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c300:	f000 fc02 	bl	800cb08 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c304:	4620      	mov	r0, r4
 800c306:	f7ff fc35 	bl	800bb74 <prvIsQueueEmpty>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d0ed      	beq.n	800c2ea <xQueueReceive+0x116>
 800c30e:	e7b4      	b.n	800c27a <xQueueReceive+0xa6>

0800c310 <xQueueSemaphoreTake>:
{
 800c310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c312:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800c314:	4604      	mov	r4, r0
{
 800c316:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c318:	b940      	cbnz	r0, 800c32c <xQueueSemaphoreTake+0x1c>
 800c31a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c31e:	f383 8811 	msr	BASEPRI, r3
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	f3bf 8f4f 	dsb	sy
 800c32a:	e7fe      	b.n	800c32a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c32c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800c32e:	b145      	cbz	r5, 800c342 <xQueueSemaphoreTake+0x32>
 800c330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c334:	f383 8811 	msr	BASEPRI, r3
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	e7fe      	b.n	800c340 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c342:	f000 fdd1 	bl	800cee8 <xTaskGetSchedulerState>
 800c346:	4606      	mov	r6, r0
 800c348:	b320      	cbz	r0, 800c394 <xQueueSemaphoreTake+0x84>
 800c34a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800c34c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800c34e:	f7ff fad1 	bl	800b8f4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c352:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c354:	b353      	cbz	r3, 800c3ac <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c356:	3b01      	subs	r3, #1
 800c358:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c35a:	6823      	ldr	r3, [r4, #0]
 800c35c:	b913      	cbnz	r3, 800c364 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c35e:	f000 fea1 	bl	800d0a4 <pvTaskIncrementMutexHeldCount>
 800c362:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c364:	6923      	ldr	r3, [r4, #16]
 800c366:	b173      	cbz	r3, 800c386 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c368:	f104 0010 	add.w	r0, r4, #16
 800c36c:	f000 fd26 	bl	800cdbc <xTaskRemoveFromEventList>
 800c370:	b148      	cbz	r0, 800c386 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800c372:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c37a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c386:	f7ff fad5 	bl	800b934 <vPortExitCritical>
				return pdPASS;
 800c38a:	2001      	movs	r0, #1
}
 800c38c:	b005      	add	sp, #20
 800c38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c390:	4635      	mov	r5, r6
 800c392:	e7db      	b.n	800c34c <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c394:	9b01      	ldr	r3, [sp, #4]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d0fa      	beq.n	800c390 <xQueueSemaphoreTake+0x80>
 800c39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39e:	f383 8811 	msr	BASEPRI, r3
 800c3a2:	f3bf 8f6f 	isb	sy
 800c3a6:	f3bf 8f4f 	dsb	sy
 800c3aa:	e7fe      	b.n	800c3aa <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3ac:	9b01      	ldr	r3, [sp, #4]
 800c3ae:	b953      	cbnz	r3, 800c3c6 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c3b0:	2d00      	cmp	r5, #0
 800c3b2:	d066      	beq.n	800c482 <xQueueSemaphoreTake+0x172>
 800c3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b8:	f383 8811 	msr	BASEPRI, r3
 800c3bc:	f3bf 8f6f 	isb	sy
 800c3c0:	f3bf 8f4f 	dsb	sy
 800c3c4:	e7fe      	b.n	800c3c4 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800c3c6:	b916      	cbnz	r6, 800c3ce <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3c8:	a802      	add	r0, sp, #8
 800c3ca:	f000 fd39 	bl	800ce40 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c3ce:	f7ff fab1 	bl	800b934 <vPortExitCritical>
		vTaskSuspendAll();
 800c3d2:	f000 faf5 	bl	800c9c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3d6:	f7ff fa8d 	bl	800b8f4 <vPortEnterCritical>
 800c3da:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c3de:	2bff      	cmp	r3, #255	@ 0xff
 800c3e0:	d101      	bne.n	800c3e6 <xQueueSemaphoreTake+0xd6>
 800c3e2:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800c3e6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c3ea:	2bff      	cmp	r3, #255	@ 0xff
 800c3ec:	d101      	bne.n	800c3f2 <xQueueSemaphoreTake+0xe2>
 800c3ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c3f2:	f7ff fa9f 	bl	800b934 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3f6:	a901      	add	r1, sp, #4
 800c3f8:	a802      	add	r0, sp, #8
 800c3fa:	f000 fd2d 	bl	800ce58 <xTaskCheckForTimeOut>
 800c3fe:	bb50      	cbnz	r0, 800c456 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c400:	4620      	mov	r0, r4
 800c402:	f7ff fbb7 	bl	800bb74 <prvIsQueueEmpty>
 800c406:	b300      	cbz	r0, 800c44a <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c408:	6823      	ldr	r3, [r4, #0]
 800c40a:	b93b      	cbnz	r3, 800c41c <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800c40c:	f7ff fa72 	bl	800b8f4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c410:	68a0      	ldr	r0, [r4, #8]
 800c412:	f000 fd79 	bl	800cf08 <xTaskPriorityInherit>
 800c416:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800c418:	f7ff fa8c 	bl	800b934 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c41c:	9901      	ldr	r1, [sp, #4]
 800c41e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c422:	f000 fc93 	bl	800cd4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c426:	4620      	mov	r0, r4
 800c428:	f7ff fbf7 	bl	800bc1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c42c:	f000 fb6c 	bl	800cb08 <xTaskResumeAll>
 800c430:	b948      	cbnz	r0, 800c446 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800c432:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c43a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	f3bf 8f6f 	isb	sy
 800c446:	2601      	movs	r6, #1
 800c448:	e781      	b.n	800c34e <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800c44a:	4620      	mov	r0, r4
 800c44c:	f7ff fbe5 	bl	800bc1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c450:	f000 fb5a 	bl	800cb08 <xTaskResumeAll>
 800c454:	e7f7      	b.n	800c446 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800c456:	4620      	mov	r0, r4
 800c458:	f7ff fbdf 	bl	800bc1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c45c:	f000 fb54 	bl	800cb08 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c460:	4620      	mov	r0, r4
 800c462:	f7ff fb87 	bl	800bb74 <prvIsQueueEmpty>
 800c466:	2800      	cmp	r0, #0
 800c468:	d0ed      	beq.n	800c446 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800c46a:	b165      	cbz	r5, 800c486 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800c46c:	f7ff fa42 	bl	800b8f4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c470:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c472:	b119      	cbz	r1, 800c47c <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c474:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c476:	6819      	ldr	r1, [r3, #0]
 800c478:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c47c:	68a0      	ldr	r0, [r4, #8]
 800c47e:	f000 fdc3 	bl	800d008 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800c482:	f7ff fa57 	bl	800b934 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c486:	2000      	movs	r0, #0
 800c488:	e780      	b.n	800c38c <xQueueSemaphoreTake+0x7c>

0800c48a <xQueueTakeMutexRecursive>:
	{
 800c48a:	b570      	push	{r4, r5, r6, lr}
 800c48c:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800c48e:	4604      	mov	r4, r0
 800c490:	b940      	cbnz	r0, 800c4a4 <xQueueTakeMutexRecursive+0x1a>
 800c492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	e7fe      	b.n	800c4a2 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c4a4:	6886      	ldr	r6, [r0, #8]
 800c4a6:	f000 fd19 	bl	800cedc <xTaskGetCurrentTaskHandle>
 800c4aa:	4286      	cmp	r6, r0
 800c4ac:	d104      	bne.n	800c4b8 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c4ae:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800c4b0:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	60e3      	str	r3, [r4, #12]
	}
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c4b8:	4629      	mov	r1, r5
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	f7ff ff28 	bl	800c310 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	d0f8      	beq.n	800c4b6 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c4c4:	68e3      	ldr	r3, [r4, #12]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	60e3      	str	r3, [r4, #12]
 800c4ca:	e7f4      	b.n	800c4b6 <xQueueTakeMutexRecursive+0x2c>

0800c4cc <xQueueReceiveFromISR>:
{
 800c4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4d0:	4689      	mov	r9, r1
 800c4d2:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	b940      	cbnz	r0, 800c4ea <xQueueReceiveFromISR+0x1e>
 800c4d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4dc:	f383 8811 	msr	BASEPRI, r3
 800c4e0:	f3bf 8f6f 	isb	sy
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	e7fe      	b.n	800c4e8 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c4ea:	b951      	cbnz	r1, 800c502 <xQueueReceiveFromISR+0x36>
 800c4ec:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c4ee:	b143      	cbz	r3, 800c502 <xQueueReceiveFromISR+0x36>
 800c4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f4:	f383 8811 	msr	BASEPRI, r3
 800c4f8:	f3bf 8f6f 	isb	sy
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	e7fe      	b.n	800c500 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c502:	f7ff fb09 	bl	800bb18 <vPortValidateInterruptPriority>
	__asm volatile
 800c506:	f3ef 8711 	mrs	r7, BASEPRI
 800c50a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c50e:	f383 8811 	msr	BASEPRI, r3
 800c512:	f3bf 8f6f 	isb	sy
 800c516:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c51a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c51c:	b30d      	cbz	r5, 800c562 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800c51e:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c522:	4649      	mov	r1, r9
 800c524:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c526:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800c528:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c52a:	f7ff fb61 	bl	800bbf0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c52e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800c530:	1c73      	adds	r3, r6, #1
 800c532:	d111      	bne.n	800c558 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c534:	6923      	ldr	r3, [r4, #16]
 800c536:	b153      	cbz	r3, 800c54e <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c538:	f104 0010 	add.w	r0, r4, #16
 800c53c:	f000 fc3e 	bl	800cdbc <xTaskRemoveFromEventList>
 800c540:	b128      	cbz	r0, 800c54e <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800c542:	f1b8 0f00 	cmp.w	r8, #0
 800c546:	d002      	beq.n	800c54e <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c548:	2301      	movs	r3, #1
 800c54a:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800c54e:	2001      	movs	r0, #1
	__asm volatile
 800c550:	f387 8811 	msr	BASEPRI, r7
}
 800c554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c558:	3601      	adds	r6, #1
 800c55a:	b276      	sxtb	r6, r6
 800c55c:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800c560:	e7f5      	b.n	800c54e <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800c562:	4628      	mov	r0, r5
 800c564:	e7f4      	b.n	800c550 <xQueueReceiveFromISR+0x84>
	...

0800c568 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c568:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c56a:	4a07      	ldr	r2, [pc, #28]	@ (800c588 <vQueueAddToRegistry+0x20>)
	{
 800c56c:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c56e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800c572:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800c576:	b91d      	cbnz	r5, 800c580 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c578:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c57c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c57e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c580:	3301      	adds	r3, #1
 800c582:	2b08      	cmp	r3, #8
 800c584:	d1f3      	bne.n	800c56e <vQueueAddToRegistry+0x6>
 800c586:	e7fa      	b.n	800c57e <vQueueAddToRegistry+0x16>
 800c588:	24024acc 	.word	0x24024acc

0800c58c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c58c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c58e:	4a09      	ldr	r2, [pc, #36]	@ (800c5b4 <vQueueUnregisterQueue+0x28>)
	{
 800c590:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c592:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c596:	00dc      	lsls	r4, r3, #3
 800c598:	4281      	cmp	r1, r0
 800c59a:	d106      	bne.n	800c5aa <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c59c:	4a06      	ldr	r2, [pc, #24]	@ (800c5b8 <vQueueUnregisterQueue+0x2c>)
 800c59e:	2100      	movs	r1, #0
 800c5a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c5a4:	4422      	add	r2, r4
 800c5a6:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c5a8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	2b08      	cmp	r3, #8
 800c5ae:	d1f0      	bne.n	800c592 <vQueueUnregisterQueue+0x6>
 800c5b0:	e7fa      	b.n	800c5a8 <vQueueUnregisterQueue+0x1c>
 800c5b2:	bf00      	nop
 800c5b4:	24024ad0 	.word	0x24024ad0
 800c5b8:	24024acc 	.word	0x24024acc

0800c5bc <vQueueDelete>:
{
 800c5bc:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800c5be:	b940      	cbnz	r0, 800c5d2 <vQueueDelete+0x16>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	e7fe      	b.n	800c5d0 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800c5d2:	f7ff ffdb 	bl	800c58c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c5d6:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800c5da:	b91b      	cbnz	r3, 800c5e4 <vQueueDelete+0x28>
}
 800c5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800c5e0:	f7ff b8a2 	b.w	800b728 <vPortFree>
}
 800c5e4:	bd10      	pop	{r4, pc}

0800c5e6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c5e6:	b570      	push	{r4, r5, r6, lr}
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	460d      	mov	r5, r1
 800c5ec:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c5ee:	f7ff f981 	bl	800b8f4 <vPortEnterCritical>
 800c5f2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c5f6:	2bff      	cmp	r3, #255	@ 0xff
 800c5f8:	d102      	bne.n	800c600 <vQueueWaitForMessageRestricted+0x1a>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c600:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c604:	2bff      	cmp	r3, #255	@ 0xff
 800c606:	d102      	bne.n	800c60e <vQueueWaitForMessageRestricted+0x28>
 800c608:	2300      	movs	r3, #0
 800c60a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c60e:	f7ff f991 	bl	800b934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c612:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c614:	b92b      	cbnz	r3, 800c622 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c616:	4632      	mov	r2, r6
 800c618:	4629      	mov	r1, r5
 800c61a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c61e:	f000 fbaf 	bl	800cd80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c622:	4620      	mov	r0, r4
	}
 800c624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800c628:	f7ff baf7 	b.w	800bc1a <prvUnlockQueue>

0800c62c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c630:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c632:	f7ff f95f 	bl	800b8f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c636:	4b2f      	ldr	r3, [pc, #188]	@ (800c6f4 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800c638:	4e2f      	ldr	r6, [pc, #188]	@ (800c6f8 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	4f2f      	ldr	r7, [pc, #188]	@ (800c6fc <prvAddNewTaskToReadyList+0xd0>)
 800c63e:	3201      	adds	r2, #1
 800c640:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800c642:	6835      	ldr	r5, [r6, #0]
 800c644:	2d00      	cmp	r5, #0
 800c646:	d14a      	bne.n	800c6de <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c648:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d11f      	bne.n	800c690 <prvAddNewTaskToReadyList+0x64>
 800c650:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c652:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c654:	4640      	mov	r0, r8
 800c656:	f7ff f8a5 	bl	800b7a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c65a:	f108 0814 	add.w	r8, r8, #20
 800c65e:	2d38      	cmp	r5, #56	@ 0x38
 800c660:	d1f7      	bne.n	800c652 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c662:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800c724 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800c666:	4d26      	ldr	r5, [pc, #152]	@ (800c700 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800c668:	4640      	mov	r0, r8
 800c66a:	f7ff f89b 	bl	800b7a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c66e:	4628      	mov	r0, r5
 800c670:	f7ff f898 	bl	800b7a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c674:	4823      	ldr	r0, [pc, #140]	@ (800c704 <prvAddNewTaskToReadyList+0xd8>)
 800c676:	f7ff f895 	bl	800b7a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c67a:	4823      	ldr	r0, [pc, #140]	@ (800c708 <prvAddNewTaskToReadyList+0xdc>)
 800c67c:	f7ff f892 	bl	800b7a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c680:	4822      	ldr	r0, [pc, #136]	@ (800c70c <prvAddNewTaskToReadyList+0xe0>)
 800c682:	f7ff f88f 	bl	800b7a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c686:	4b22      	ldr	r3, [pc, #136]	@ (800c710 <prvAddNewTaskToReadyList+0xe4>)
 800c688:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c68c:	4b21      	ldr	r3, [pc, #132]	@ (800c714 <prvAddNewTaskToReadyList+0xe8>)
 800c68e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800c690:	4a21      	ldr	r2, [pc, #132]	@ (800c718 <prvAddNewTaskToReadyList+0xec>)
 800c692:	6813      	ldr	r3, [r2, #0]
 800c694:	3301      	adds	r3, #1
 800c696:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800c698:	4a20      	ldr	r2, [pc, #128]	@ (800c71c <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c69a:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800c69c:	6811      	ldr	r1, [r2, #0]
 800c69e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c6a0:	428b      	cmp	r3, r1
 800c6a2:	d900      	bls.n	800c6a6 <prvAddNewTaskToReadyList+0x7a>
 800c6a4:	6013      	str	r3, [r2, #0]
 800c6a6:	2014      	movs	r0, #20
 800c6a8:	1d21      	adds	r1, r4, #4
 800c6aa:	fb00 7003 	mla	r0, r0, r3, r7
 800c6ae:	f7ff f887 	bl	800b7c0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800c6b2:	f7ff f93f 	bl	800b934 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800c6b6:	4b1a      	ldr	r3, [pc, #104]	@ (800c720 <prvAddNewTaskToReadyList+0xf4>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	b173      	cbz	r3, 800c6da <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c6bc:	6833      	ldr	r3, [r6, #0]
 800c6be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d209      	bcs.n	800c6da <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800c6c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c6ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c6d2:	f3bf 8f4f 	dsb	sy
 800c6d6:	f3bf 8f6f 	isb	sy
}
 800c6da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800c6de:	4b10      	ldr	r3, [pc, #64]	@ (800c720 <prvAddNewTaskToReadyList+0xf4>)
 800c6e0:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c6e2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800c6e4:	2a00      	cmp	r2, #0
 800c6e6:	d1d3      	bne.n	800c690 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c6e8:	6832      	ldr	r2, [r6, #0]
 800c6ea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d8cf      	bhi.n	800c690 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800c6f0:	6034      	str	r4, [r6, #0]
 800c6f2:	e7cd      	b.n	800c690 <prvAddNewTaskToReadyList+0x64>
 800c6f4:	24024b30 	.word	0x24024b30
 800c6f8:	24025004 	.word	0x24025004
 800c6fc:	24024ba4 	.word	0x24024ba4
 800c700:	24024b7c 	.word	0x24024b7c
 800c704:	24024b60 	.word	0x24024b60
 800c708:	24024b4c 	.word	0x24024b4c
 800c70c:	24024b34 	.word	0x24024b34
 800c710:	24024b78 	.word	0x24024b78
 800c714:	24024b74 	.word	0x24024b74
 800c718:	24024b14 	.word	0x24024b14
 800c71c:	24024b28 	.word	0x24024b28
 800c720:	24024b24 	.word	0x24024b24
 800c724:	24024b90 	.word	0x24024b90

0800c728 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c72a:	4b15      	ldr	r3, [pc, #84]	@ (800c780 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800c72c:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c72e:	4d15      	ldr	r5, [pc, #84]	@ (800c784 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800c730:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800c732:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c734:	6828      	ldr	r0, [r5, #0]
 800c736:	3004      	adds	r0, #4
 800c738:	f7ff f864 	bl	800b804 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c73c:	1c73      	adds	r3, r6, #1
 800c73e:	d107      	bne.n	800c750 <prvAddCurrentTaskToDelayedList+0x28>
 800c740:	b137      	cbz	r7, 800c750 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c742:	6829      	ldr	r1, [r5, #0]
 800c744:	4810      	ldr	r0, [pc, #64]	@ (800c788 <prvAddCurrentTaskToDelayedList+0x60>)
 800c746:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c748:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c74c:	f7ff b838 	b.w	800b7c0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c750:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c752:	682b      	ldr	r3, [r5, #0]
 800c754:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c756:	d307      	bcc.n	800c768 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c758:	4b0c      	ldr	r3, [pc, #48]	@ (800c78c <prvAddCurrentTaskToDelayedList+0x64>)
 800c75a:	6818      	ldr	r0, [r3, #0]
 800c75c:	6829      	ldr	r1, [r5, #0]
}
 800c75e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c762:	3104      	adds	r1, #4
 800c764:	f7ff b837 	b.w	800b7d6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c768:	4b09      	ldr	r3, [pc, #36]	@ (800c790 <prvAddCurrentTaskToDelayedList+0x68>)
 800c76a:	6818      	ldr	r0, [r3, #0]
 800c76c:	6829      	ldr	r1, [r5, #0]
 800c76e:	3104      	adds	r1, #4
 800c770:	f7ff f831 	bl	800b7d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c774:	4b07      	ldr	r3, [pc, #28]	@ (800c794 <prvAddCurrentTaskToDelayedList+0x6c>)
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	42a2      	cmp	r2, r4
 800c77a:	d900      	bls.n	800c77e <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800c77c:	601c      	str	r4, [r3, #0]
}
 800c77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c780:	24024b2c 	.word	0x24024b2c
 800c784:	24025004 	.word	0x24025004
 800c788:	24024b34 	.word	0x24024b34
 800c78c:	24024b74 	.word	0x24024b74
 800c790:	24024b78 	.word	0x24024b78
 800c794:	24024b10 	.word	0x24024b10

0800c798 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c798:	4a06      	ldr	r2, [pc, #24]	@ (800c7b4 <prvResetNextTaskUnblockTime+0x1c>)
 800c79a:	6813      	ldr	r3, [r2, #0]
 800c79c:	6819      	ldr	r1, [r3, #0]
 800c79e:	4b06      	ldr	r3, [pc, #24]	@ (800c7b8 <prvResetNextTaskUnblockTime+0x20>)
 800c7a0:	b919      	cbnz	r1, 800c7aa <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800c7a2:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c7a6:	601a      	str	r2, [r3, #0]
}
 800c7a8:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7aa:	6812      	ldr	r2, [r2, #0]
 800c7ac:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c7ae:	68d2      	ldr	r2, [r2, #12]
 800c7b0:	6852      	ldr	r2, [r2, #4]
 800c7b2:	e7f8      	b.n	800c7a6 <prvResetNextTaskUnblockTime+0xe>
 800c7b4:	24024b78 	.word	0x24024b78
 800c7b8:	24024b10 	.word	0x24024b10

0800c7bc <prvDeleteTCB>:
	{
 800c7bc:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c7be:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800c7c2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c7c4:	b93b      	cbnz	r3, 800c7d6 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800c7c6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800c7c8:	f7fe ffae 	bl	800b728 <vPortFree>
				vPortFree( pxTCB );
 800c7cc:	4620      	mov	r0, r4
	}
 800c7ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800c7d2:	f7fe bfa9 	b.w	800b728 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d0f9      	beq.n	800c7ce <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d008      	beq.n	800c7f0 <prvDeleteTCB+0x34>
 800c7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	e7fe      	b.n	800c7ee <prvDeleteTCB+0x32>
	}
 800c7f0:	bd10      	pop	{r4, pc}
	...

0800c7f4 <prvIdleTask>:
{
 800c7f4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c7f6:	4c14      	ldr	r4, [pc, #80]	@ (800c848 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7f8:	4f14      	ldr	r7, [pc, #80]	@ (800c84c <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800c7fa:	4d15      	ldr	r5, [pc, #84]	@ (800c850 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c7fc:	6823      	ldr	r3, [r4, #0]
 800c7fe:	b983      	cbnz	r3, 800c822 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c800:	4b14      	ldr	r3, [pc, #80]	@ (800c854 <prvIdleTask+0x60>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2b01      	cmp	r3, #1
 800c806:	d909      	bls.n	800c81c <prvIdleTask+0x28>
				taskYIELD();
 800c808:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c80c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c810:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c814:	f3bf 8f4f 	dsb	sy
 800c818:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800c81c:	f7f3 ff6c 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c820:	e7eb      	b.n	800c7fa <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800c822:	f7ff f867 	bl	800b8f4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c82a:	1d30      	adds	r0, r6, #4
 800c82c:	f7fe ffea 	bl	800b804 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c830:	682b      	ldr	r3, [r5, #0]
 800c832:	3b01      	subs	r3, #1
 800c834:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c836:	6823      	ldr	r3, [r4, #0]
 800c838:	3b01      	subs	r3, #1
 800c83a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800c83c:	f7ff f87a 	bl	800b934 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800c840:	4630      	mov	r0, r6
 800c842:	f7ff ffbb 	bl	800c7bc <prvDeleteTCB>
 800c846:	e7d9      	b.n	800c7fc <prvIdleTask+0x8>
 800c848:	24024b48 	.word	0x24024b48
 800c84c:	24024b4c 	.word	0x24024b4c
 800c850:	24024b30 	.word	0x24024b30
 800c854:	24024ba4 	.word	0x24024ba4

0800c858 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c85c:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c85e:	4607      	mov	r7, r0
 800c860:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c862:	21a5      	movs	r1, #165	@ 0xa5
 800c864:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c866:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c868:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c86a:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c86e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c870:	f013 ffd2 	bl	8020818 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c874:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c876:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c878:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800c87c:	b3b5      	cbz	r5, 800c8ec <prvInitialiseNewTask.constprop.0+0x94>
 800c87e:	1e6b      	subs	r3, r5, #1
 800c880:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800c884:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c886:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800c88a:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800c88e:	b109      	cbz	r1, 800c894 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c890:	42ab      	cmp	r3, r5
 800c892:	d1f8      	bne.n	800c886 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c894:	2300      	movs	r3, #0
 800c896:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c89a:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800c89c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c8a0:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c8a2:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800c8a4:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c8a8:	bf28      	it	cs
 800c8aa:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800c8ac:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800c8ae:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8b0:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c8b4:	f7fe ff81 	bl	800b7ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c8b8:	f104 0018 	add.w	r0, r4, #24
 800c8bc:	f7fe ff7d 	bl	800b7ba <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800c8c0:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c8c4:	4642      	mov	r2, r8
 800c8c6:	4639      	mov	r1, r7
 800c8c8:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c8ca:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8cc:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c8ce:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800c8d0:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c8d4:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c8d8:	f7fe ffe2 	bl	800b8a0 <pxPortInitialiseStack>
 800c8dc:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800c8de:	f1b9 0f00 	cmp.w	r9, #0
 800c8e2:	d001      	beq.n	800c8e8 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c8e4:	f8c9 4000 	str.w	r4, [r9]
}
 800c8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c8ec:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800c8f0:	e7d3      	b.n	800c89a <prvInitialiseNewTask.constprop.0+0x42>

0800c8f2 <xTaskCreateStatic>:
	{
 800c8f2:	b570      	push	{r4, r5, r6, lr}
 800c8f4:	b086      	sub	sp, #24
 800c8f6:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800c8fa:	b945      	cbnz	r5, 800c90e <xTaskCreateStatic+0x1c>
 800c8fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c900:	f383 8811 	msr	BASEPRI, r3
 800c904:	f3bf 8f6f 	isb	sy
 800c908:	f3bf 8f4f 	dsb	sy
 800c90c:	e7fe      	b.n	800c90c <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800c90e:	b944      	cbnz	r4, 800c922 <xTaskCreateStatic+0x30>
 800c910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c914:	f383 8811 	msr	BASEPRI, r3
 800c918:	f3bf 8f6f 	isb	sy
 800c91c:	f3bf 8f4f 	dsb	sy
 800c920:	e7fe      	b.n	800c920 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800c922:	2660      	movs	r6, #96	@ 0x60
 800c924:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c926:	9e05      	ldr	r6, [sp, #20]
 800c928:	2e60      	cmp	r6, #96	@ 0x60
 800c92a:	d008      	beq.n	800c93e <xTaskCreateStatic+0x4c>
 800c92c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	e7fe      	b.n	800c93c <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c93e:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c940:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c942:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c944:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c948:	ad04      	add	r5, sp, #16
 800c94a:	9402      	str	r4, [sp, #8]
 800c94c:	9501      	str	r5, [sp, #4]
 800c94e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c950:	9500      	str	r5, [sp, #0]
 800c952:	f7ff ff81 	bl	800c858 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c956:	4620      	mov	r0, r4
 800c958:	f7ff fe68 	bl	800c62c <prvAddNewTaskToReadyList>
	}
 800c95c:	9804      	ldr	r0, [sp, #16]
 800c95e:	b006      	add	sp, #24
 800c960:	bd70      	pop	{r4, r5, r6, pc}

0800c962 <xTaskCreate>:
	{
 800c962:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c966:	4607      	mov	r7, r0
 800c968:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c96a:	0090      	lsls	r0, r2, #2
	{
 800c96c:	4688      	mov	r8, r1
 800c96e:	4616      	mov	r6, r2
 800c970:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c972:	f7fe fe41 	bl	800b5f8 <pvPortMalloc>
			if( pxStack != NULL )
 800c976:	4605      	mov	r5, r0
 800c978:	b920      	cbnz	r0, 800c984 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c97a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800c97e:	b005      	add	sp, #20
 800c980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c984:	2060      	movs	r0, #96	@ 0x60
 800c986:	f7fe fe37 	bl	800b5f8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800c98a:	4604      	mov	r4, r0
 800c98c:	b198      	cbz	r0, 800c9b6 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c98e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800c990:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c992:	4632      	mov	r2, r6
 800c994:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c996:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c99a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c99c:	9002      	str	r0, [sp, #8]
 800c99e:	4638      	mov	r0, r7
 800c9a0:	9301      	str	r3, [sp, #4]
 800c9a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	464b      	mov	r3, r9
 800c9a8:	f7ff ff56 	bl	800c858 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f7ff fe3d 	bl	800c62c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c9b2:	2001      	movs	r0, #1
 800c9b4:	e7e3      	b.n	800c97e <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800c9b6:	4628      	mov	r0, r5
 800c9b8:	f7fe feb6 	bl	800b728 <vPortFree>
		if( pxNewTCB != NULL )
 800c9bc:	e7dd      	b.n	800c97a <xTaskCreate+0x18>
	...

0800c9c0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800c9c0:	4a02      	ldr	r2, [pc, #8]	@ (800c9cc <vTaskSuspendAll+0xc>)
 800c9c2:	6813      	ldr	r3, [r2, #0]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	6013      	str	r3, [r2, #0]
}
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	24024b0c 	.word	0x24024b0c

0800c9d0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800c9d0:	4b01      	ldr	r3, [pc, #4]	@ (800c9d8 <xTaskGetTickCount+0x8>)
 800c9d2:	6818      	ldr	r0, [r3, #0]
}
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	24024b2c 	.word	0x24024b2c

0800c9dc <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9dc:	4b3f      	ldr	r3, [pc, #252]	@ (800cadc <xTaskIncrementTick+0x100>)
 800c9de:	681b      	ldr	r3, [r3, #0]
{
 800c9e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d172      	bne.n	800cace <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c9e8:	4b3d      	ldr	r3, [pc, #244]	@ (800cae0 <xTaskIncrementTick+0x104>)
 800c9ea:	681c      	ldr	r4, [r3, #0]
 800c9ec:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800c9ee:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c9f0:	b9bc      	cbnz	r4, 800ca22 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800c9f2:	4b3c      	ldr	r3, [pc, #240]	@ (800cae4 <xTaskIncrementTick+0x108>)
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	6812      	ldr	r2, [r2, #0]
 800c9f8:	b142      	cbz	r2, 800ca0c <xTaskIncrementTick+0x30>
 800c9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9fe:	f383 8811 	msr	BASEPRI, r3
 800ca02:	f3bf 8f6f 	isb	sy
 800ca06:	f3bf 8f4f 	dsb	sy
 800ca0a:	e7fe      	b.n	800ca0a <xTaskIncrementTick+0x2e>
 800ca0c:	4a36      	ldr	r2, [pc, #216]	@ (800cae8 <xTaskIncrementTick+0x10c>)
 800ca0e:	6819      	ldr	r1, [r3, #0]
 800ca10:	6810      	ldr	r0, [r2, #0]
 800ca12:	6018      	str	r0, [r3, #0]
 800ca14:	6011      	str	r1, [r2, #0]
 800ca16:	4a35      	ldr	r2, [pc, #212]	@ (800caec <xTaskIncrementTick+0x110>)
 800ca18:	6813      	ldr	r3, [r2, #0]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	6013      	str	r3, [r2, #0]
 800ca1e:	f7ff febb 	bl	800c798 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ca22:	4d33      	ldr	r5, [pc, #204]	@ (800caf0 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800ca24:	f04f 0b00 	mov.w	fp, #0
 800ca28:	4e32      	ldr	r6, [pc, #200]	@ (800caf4 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ca2a:	682b      	ldr	r3, [r5, #0]
 800ca2c:	4f32      	ldr	r7, [pc, #200]	@ (800caf8 <xTaskIncrementTick+0x11c>)
 800ca2e:	429c      	cmp	r4, r3
 800ca30:	d212      	bcs.n	800ca58 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca32:	683a      	ldr	r2, [r7, #0]
 800ca34:	2114      	movs	r1, #20
 800ca36:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ca38:	434a      	muls	r2, r1
 800ca3a:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800ca3c:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800ca3e:	4a2f      	ldr	r2, [pc, #188]	@ (800cafc <xTaskIncrementTick+0x120>)
 800ca40:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800ca42:	bf28      	it	cs
 800ca44:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800ca48:	2a00      	cmp	r2, #0
 800ca4a:	bf18      	it	ne
 800ca4c:	f04f 0b01 	movne.w	fp, #1
}
 800ca50:	4658      	mov	r0, fp
 800ca52:	b003      	add	sp, #12
 800ca54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca58:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800cae4 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800ca5c:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800cb04 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca60:	f8d9 2000 	ldr.w	r2, [r9]
 800ca64:	6812      	ldr	r2, [r2, #0]
 800ca66:	b91a      	cbnz	r2, 800ca70 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca68:	f04f 32ff 	mov.w	r2, #4294967295
 800ca6c:	602a      	str	r2, [r5, #0]
					break;
 800ca6e:	e7e0      	b.n	800ca32 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca70:	f8d9 2000 	ldr.w	r2, [r9]
 800ca74:	68d2      	ldr	r2, [r2, #12]
 800ca76:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ca7a:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800ca7e:	428c      	cmp	r4, r1
 800ca80:	d201      	bcs.n	800ca86 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800ca82:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ca84:	e7d5      	b.n	800ca32 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca86:	f108 0304 	add.w	r3, r8, #4
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	9301      	str	r3, [sp, #4]
 800ca8e:	f7fe feb9 	bl	800b804 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca92:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800ca96:	b119      	cbz	r1, 800caa0 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca98:	f108 0018 	add.w	r0, r8, #24
 800ca9c:	f7fe feb2 	bl	800b804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800caa0:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800caa4:	f8da 1000 	ldr.w	r1, [sl]
 800caa8:	4288      	cmp	r0, r1
 800caaa:	d901      	bls.n	800cab0 <xTaskIncrementTick+0xd4>
 800caac:	f8ca 0000 	str.w	r0, [sl]
 800cab0:	2314      	movs	r3, #20
 800cab2:	9901      	ldr	r1, [sp, #4]
 800cab4:	fb03 6000 	mla	r0, r3, r0, r6
 800cab8:	f7fe fe82 	bl	800b7c0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cabc:	6838      	ldr	r0, [r7, #0]
 800cabe:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800cac2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800cac4:	4291      	cmp	r1, r2
 800cac6:	bf28      	it	cs
 800cac8:	f04f 0b01 	movcs.w	fp, #1
 800cacc:	e7c8      	b.n	800ca60 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800cace:	4a0c      	ldr	r2, [pc, #48]	@ (800cb00 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800cad0:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800cad4:	6813      	ldr	r3, [r2, #0]
 800cad6:	3301      	adds	r3, #1
 800cad8:	6013      	str	r3, [r2, #0]
 800cada:	e7b9      	b.n	800ca50 <xTaskIncrementTick+0x74>
 800cadc:	24024b0c 	.word	0x24024b0c
 800cae0:	24024b2c 	.word	0x24024b2c
 800cae4:	24024b78 	.word	0x24024b78
 800cae8:	24024b74 	.word	0x24024b74
 800caec:	24024b18 	.word	0x24024b18
 800caf0:	24024b10 	.word	0x24024b10
 800caf4:	24024ba4 	.word	0x24024ba4
 800caf8:	24025004 	.word	0x24025004
 800cafc:	24024b1c 	.word	0x24024b1c
 800cb00:	24024b20 	.word	0x24024b20
 800cb04:	24024b28 	.word	0x24024b28

0800cb08 <xTaskResumeAll>:
{
 800cb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800cb0c:	4c30      	ldr	r4, [pc, #192]	@ (800cbd0 <xTaskResumeAll+0xc8>)
 800cb0e:	6823      	ldr	r3, [r4, #0]
 800cb10:	b943      	cbnz	r3, 800cb24 <xTaskResumeAll+0x1c>
 800cb12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb16:	f383 8811 	msr	BASEPRI, r3
 800cb1a:	f3bf 8f6f 	isb	sy
 800cb1e:	f3bf 8f4f 	dsb	sy
 800cb22:	e7fe      	b.n	800cb22 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800cb24:	f7fe fee6 	bl	800b8f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800cb28:	6823      	ldr	r3, [r4, #0]
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb2e:	6824      	ldr	r4, [r4, #0]
 800cb30:	b12c      	cbz	r4, 800cb3e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800cb32:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800cb34:	f7fe fefe 	bl	800b934 <vPortExitCritical>
}
 800cb38:	4620      	mov	r0, r4
 800cb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cb3e:	4b25      	ldr	r3, [pc, #148]	@ (800cbd4 <xTaskResumeAll+0xcc>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d0f5      	beq.n	800cb32 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb46:	4d24      	ldr	r5, [pc, #144]	@ (800cbd8 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800cb48:	4e24      	ldr	r6, [pc, #144]	@ (800cbdc <xTaskResumeAll+0xd4>)
 800cb4a:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800cbec <xTaskResumeAll+0xe4>
 800cb4e:	e01d      	b.n	800cb8c <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb50:	68eb      	ldr	r3, [r5, #12]
 800cb52:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb54:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb56:	f104 0018 	add.w	r0, r4, #24
 800cb5a:	f7fe fe53 	bl	800b804 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb5e:	4638      	mov	r0, r7
 800cb60:	f7fe fe50 	bl	800b804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb64:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cb66:	6832      	ldr	r2, [r6, #0]
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d900      	bls.n	800cb6e <xTaskResumeAll+0x66>
 800cb6c:	6033      	str	r3, [r6, #0]
 800cb6e:	2014      	movs	r0, #20
 800cb70:	4639      	mov	r1, r7
 800cb72:	fb00 8003 	mla	r0, r0, r3, r8
 800cb76:	f7fe fe23 	bl	800b7c0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb7a:	4b19      	ldr	r3, [pc, #100]	@ (800cbe0 <xTaskResumeAll+0xd8>)
 800cb7c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d302      	bcc.n	800cb8c <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800cb86:	4b17      	ldr	r3, [pc, #92]	@ (800cbe4 <xTaskResumeAll+0xdc>)
 800cb88:	2201      	movs	r2, #1
 800cb8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb8c:	682b      	ldr	r3, [r5, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d1de      	bne.n	800cb50 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800cb92:	b10c      	cbz	r4, 800cb98 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800cb94:	f7ff fe00 	bl	800c798 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cb98:	4d13      	ldr	r5, [pc, #76]	@ (800cbe8 <xTaskResumeAll+0xe0>)
 800cb9a:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800cb9c:	b144      	cbz	r4, 800cbb0 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800cb9e:	4e11      	ldr	r6, [pc, #68]	@ (800cbe4 <xTaskResumeAll+0xdc>)
 800cba0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800cba2:	f7ff ff1b 	bl	800c9dc <xTaskIncrementTick>
 800cba6:	b100      	cbz	r0, 800cbaa <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800cba8:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cbaa:	3c01      	subs	r4, #1
 800cbac:	d1f9      	bne.n	800cba2 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800cbae:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800cbb0:	4b0c      	ldr	r3, [pc, #48]	@ (800cbe4 <xTaskResumeAll+0xdc>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d0bc      	beq.n	800cb32 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800cbb8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cbbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbc0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cbc4:	f3bf 8f4f 	dsb	sy
 800cbc8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800cbcc:	2401      	movs	r4, #1
 800cbce:	e7b1      	b.n	800cb34 <xTaskResumeAll+0x2c>
 800cbd0:	24024b0c 	.word	0x24024b0c
 800cbd4:	24024b30 	.word	0x24024b30
 800cbd8:	24024b60 	.word	0x24024b60
 800cbdc:	24024b28 	.word	0x24024b28
 800cbe0:	24025004 	.word	0x24025004
 800cbe4:	24024b1c 	.word	0x24024b1c
 800cbe8:	24024b20 	.word	0x24024b20
 800cbec:	24024ba4 	.word	0x24024ba4

0800cbf0 <vTaskSetApplicationTaskTag>:
	{
 800cbf0:	b538      	push	{r3, r4, r5, lr}
 800cbf2:	460d      	mov	r5, r1
		if( xTask == NULL )
 800cbf4:	4604      	mov	r4, r0
 800cbf6:	b908      	cbnz	r0, 800cbfc <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800cbf8:	4b04      	ldr	r3, [pc, #16]	@ (800cc0c <vTaskSetApplicationTaskTag+0x1c>)
 800cbfa:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800cbfc:	f7fe fe7a 	bl	800b8f4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800cc00:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800cc02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800cc06:	f7fe be95 	b.w	800b934 <vPortExitCritical>
 800cc0a:	bf00      	nop
 800cc0c:	24025004 	.word	0x24025004

0800cc10 <xTaskCallApplicationTaskHook>:
	{
 800cc10:	4603      	mov	r3, r0
 800cc12:	4608      	mov	r0, r1
		if( xTask == NULL )
 800cc14:	b90b      	cbnz	r3, 800cc1a <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800cc16:	4b03      	ldr	r3, [pc, #12]	@ (800cc24 <xTaskCallApplicationTaskHook+0x14>)
 800cc18:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800cc1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc1c:	b103      	cbz	r3, 800cc20 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800cc1e:	4718      	bx	r3
	}
 800cc20:	4618      	mov	r0, r3
 800cc22:	4770      	bx	lr
 800cc24:	24025004 	.word	0x24025004

0800cc28 <vTaskStartScheduler>:
{
 800cc28:	b510      	push	{r4, lr}
 800cc2a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc2c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc2e:	aa07      	add	r2, sp, #28
 800cc30:	a906      	add	r1, sp, #24
 800cc32:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc34:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc38:	f7fe fca0 	bl	800b57c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc3c:	9b05      	ldr	r3, [sp, #20]
 800cc3e:	9a07      	ldr	r2, [sp, #28]
 800cc40:	9302      	str	r3, [sp, #8]
 800cc42:	9b06      	ldr	r3, [sp, #24]
 800cc44:	4919      	ldr	r1, [pc, #100]	@ (800ccac <vTaskStartScheduler+0x84>)
 800cc46:	481a      	ldr	r0, [pc, #104]	@ (800ccb0 <vTaskStartScheduler+0x88>)
 800cc48:	e9cd 4300 	strd	r4, r3, [sp]
 800cc4c:	4623      	mov	r3, r4
 800cc4e:	f7ff fe50 	bl	800c8f2 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800cc52:	b340      	cbz	r0, 800cca6 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800cc54:	f000 fa84 	bl	800d160 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800cc58:	2801      	cmp	r0, #1
 800cc5a:	d119      	bne.n	800cc90 <vTaskStartScheduler+0x68>
 800cc5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc60:	f383 8811 	msr	BASEPRI, r3
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc6c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc70:	4b10      	ldr	r3, [pc, #64]	@ (800ccb4 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800cc72:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cc76:	4b10      	ldr	r3, [pc, #64]	@ (800ccb8 <vTaskStartScheduler+0x90>)
 800cc78:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cc7a:	4b10      	ldr	r3, [pc, #64]	@ (800ccbc <vTaskStartScheduler+0x94>)
 800cc7c:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800cc7e:	4b10      	ldr	r3, [pc, #64]	@ (800ccc0 <vTaskStartScheduler+0x98>)
 800cc80:	6818      	ldr	r0, [r3, #0]
 800cc82:	f7ff ffc5 	bl	800cc10 <xTaskCallApplicationTaskHook>
}
 800cc86:	b008      	add	sp, #32
 800cc88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800cc8c:	f7fe bec2 	b.w	800ba14 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cc90:	3001      	adds	r0, #1
 800cc92:	d108      	bne.n	800cca6 <vTaskStartScheduler+0x7e>
 800cc94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	e7fe      	b.n	800cca4 <vTaskStartScheduler+0x7c>
}
 800cca6:	b008      	add	sp, #32
 800cca8:	bd10      	pop	{r4, pc}
 800ccaa:	bf00      	nop
 800ccac:	08023b64 	.word	0x08023b64
 800ccb0:	0800c7f5 	.word	0x0800c7f5
 800ccb4:	24024b10 	.word	0x24024b10
 800ccb8:	24024b24 	.word	0x24024b24
 800ccbc:	24024b2c 	.word	0x24024b2c
 800ccc0:	24025004 	.word	0x24025004

0800ccc4 <vTaskSwitchContext>:
{
 800ccc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ccc6:	4b1c      	ldr	r3, [pc, #112]	@ (800cd38 <vTaskSwitchContext+0x74>)
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	4b1c      	ldr	r3, [pc, #112]	@ (800cd3c <vTaskSwitchContext+0x78>)
 800cccc:	b112      	cbz	r2, 800ccd4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800ccce:	2201      	movs	r2, #1
 800ccd0:	601a      	str	r2, [r3, #0]
}
 800ccd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800ccd4:	4c1a      	ldr	r4, [pc, #104]	@ (800cd40 <vTaskSwitchContext+0x7c>)
 800ccd6:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccd8:	4e1a      	ldr	r6, [pc, #104]	@ (800cd44 <vTaskSwitchContext+0x80>)
 800ccda:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800ccdc:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800ccde:	6820      	ldr	r0, [r4, #0]
 800cce0:	f7ff ff96 	bl	800cc10 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cce4:	6832      	ldr	r2, [r6, #0]
 800cce6:	4918      	ldr	r1, [pc, #96]	@ (800cd48 <vTaskSwitchContext+0x84>)
 800cce8:	fb07 f302 	mul.w	r3, r7, r2
 800ccec:	58cd      	ldr	r5, [r1, r3]
 800ccee:	18c8      	adds	r0, r1, r3
 800ccf0:	b1ad      	cbz	r5, 800cd1e <vTaskSwitchContext+0x5a>
 800ccf2:	6845      	ldr	r5, [r0, #4]
 800ccf4:	3308      	adds	r3, #8
 800ccf6:	686d      	ldr	r5, [r5, #4]
 800ccf8:	440b      	add	r3, r1
 800ccfa:	429d      	cmp	r5, r3
 800ccfc:	6045      	str	r5, [r0, #4]
 800ccfe:	bf04      	itt	eq
 800cd00:	686b      	ldreq	r3, [r5, #4]
 800cd02:	6043      	streq	r3, [r0, #4]
 800cd04:	2314      	movs	r3, #20
 800cd06:	fb03 1102 	mla	r1, r3, r2, r1
 800cd0a:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800cd0c:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800cd14:	6820      	ldr	r0, [r4, #0]
}
 800cd16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800cd1a:	f7ff bf79 	b.w	800cc10 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd1e:	b942      	cbnz	r2, 800cd32 <vTaskSwitchContext+0x6e>
 800cd20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd24:	f383 8811 	msr	BASEPRI, r3
 800cd28:	f3bf 8f6f 	isb	sy
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	e7fe      	b.n	800cd30 <vTaskSwitchContext+0x6c>
 800cd32:	3a01      	subs	r2, #1
 800cd34:	e7d8      	b.n	800cce8 <vTaskSwitchContext+0x24>
 800cd36:	bf00      	nop
 800cd38:	24024b0c 	.word	0x24024b0c
 800cd3c:	24024b1c 	.word	0x24024b1c
 800cd40:	24025004 	.word	0x24025004
 800cd44:	24024b28 	.word	0x24024b28
 800cd48:	24024ba4 	.word	0x24024ba4

0800cd4c <vTaskPlaceOnEventList>:
{
 800cd4c:	b510      	push	{r4, lr}
 800cd4e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800cd50:	b940      	cbnz	r0, 800cd64 <vTaskPlaceOnEventList+0x18>
 800cd52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	e7fe      	b.n	800cd62 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd64:	4b05      	ldr	r3, [pc, #20]	@ (800cd7c <vTaskPlaceOnEventList+0x30>)
 800cd66:	6819      	ldr	r1, [r3, #0]
 800cd68:	3118      	adds	r1, #24
 800cd6a:	f7fe fd34 	bl	800b7d6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd6e:	4620      	mov	r0, r4
 800cd70:	2101      	movs	r1, #1
}
 800cd72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd76:	f7ff bcd7 	b.w	800c728 <prvAddCurrentTaskToDelayedList>
 800cd7a:	bf00      	nop
 800cd7c:	24025004 	.word	0x24025004

0800cd80 <vTaskPlaceOnEventListRestricted>:
	{
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	460d      	mov	r5, r1
 800cd84:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800cd86:	b940      	cbnz	r0, 800cd9a <vTaskPlaceOnEventListRestricted+0x1a>
 800cd88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd8c:	f383 8811 	msr	BASEPRI, r3
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	e7fe      	b.n	800cd98 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd9a:	4b07      	ldr	r3, [pc, #28]	@ (800cdb8 <vTaskPlaceOnEventListRestricted+0x38>)
 800cd9c:	6819      	ldr	r1, [r3, #0]
 800cd9e:	3118      	adds	r1, #24
 800cda0:	f7fe fd0e 	bl	800b7c0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800cda4:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cda6:	4621      	mov	r1, r4
 800cda8:	bf0c      	ite	eq
 800cdaa:	4628      	moveq	r0, r5
 800cdac:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800cdb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cdb4:	f7ff bcb8 	b.w	800c728 <prvAddCurrentTaskToDelayedList>
 800cdb8:	24025004 	.word	0x24025004

0800cdbc <xTaskRemoveFromEventList>:
{
 800cdbc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdbe:	68c3      	ldr	r3, [r0, #12]
 800cdc0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800cdc2:	b944      	cbnz	r4, 800cdd6 <xTaskRemoveFromEventList+0x1a>
 800cdc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdc8:	f383 8811 	msr	BASEPRI, r3
 800cdcc:	f3bf 8f6f 	isb	sy
 800cdd0:	f3bf 8f4f 	dsb	sy
 800cdd4:	e7fe      	b.n	800cdd4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cdd6:	f104 0518 	add.w	r5, r4, #24
 800cdda:	4628      	mov	r0, r5
 800cddc:	f7fe fd12 	bl	800b804 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cde0:	4b11      	ldr	r3, [pc, #68]	@ (800ce28 <xTaskRemoveFromEventList+0x6c>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	b9d3      	cbnz	r3, 800ce1c <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cde6:	1d25      	adds	r5, r4, #4
 800cde8:	4628      	mov	r0, r5
 800cdea:	f7fe fd0b 	bl	800b804 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cdee:	4a0f      	ldr	r2, [pc, #60]	@ (800ce2c <xTaskRemoveFromEventList+0x70>)
 800cdf0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cdf2:	6811      	ldr	r1, [r2, #0]
 800cdf4:	428b      	cmp	r3, r1
 800cdf6:	d900      	bls.n	800cdfa <xTaskRemoveFromEventList+0x3e>
 800cdf8:	6013      	str	r3, [r2, #0]
 800cdfa:	2014      	movs	r0, #20
 800cdfc:	4a0c      	ldr	r2, [pc, #48]	@ (800ce30 <xTaskRemoveFromEventList+0x74>)
 800cdfe:	4629      	mov	r1, r5
 800ce00:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce04:	f7fe fcdc 	bl	800b7c0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce08:	4b0a      	ldr	r3, [pc, #40]	@ (800ce34 <xTaskRemoveFromEventList+0x78>)
 800ce0a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d906      	bls.n	800ce22 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800ce14:	2001      	movs	r0, #1
 800ce16:	4b08      	ldr	r3, [pc, #32]	@ (800ce38 <xTaskRemoveFromEventList+0x7c>)
 800ce18:	6018      	str	r0, [r3, #0]
}
 800ce1a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	4807      	ldr	r0, [pc, #28]	@ (800ce3c <xTaskRemoveFromEventList+0x80>)
 800ce20:	e7f0      	b.n	800ce04 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800ce22:	2000      	movs	r0, #0
	return xReturn;
 800ce24:	e7f9      	b.n	800ce1a <xTaskRemoveFromEventList+0x5e>
 800ce26:	bf00      	nop
 800ce28:	24024b0c 	.word	0x24024b0c
 800ce2c:	24024b28 	.word	0x24024b28
 800ce30:	24024ba4 	.word	0x24024ba4
 800ce34:	24025004 	.word	0x24025004
 800ce38:	24024b1c 	.word	0x24024b1c
 800ce3c:	24024b60 	.word	0x24024b60

0800ce40 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ce40:	4b03      	ldr	r3, [pc, #12]	@ (800ce50 <vTaskInternalSetTimeOutState+0x10>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ce46:	4b03      	ldr	r3, [pc, #12]	@ (800ce54 <vTaskInternalSetTimeOutState+0x14>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	6043      	str	r3, [r0, #4]
}
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	24024b18 	.word	0x24024b18
 800ce54:	24024b2c 	.word	0x24024b2c

0800ce58 <xTaskCheckForTimeOut>:
{
 800ce58:	b570      	push	{r4, r5, r6, lr}
 800ce5a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800ce5c:	4605      	mov	r5, r0
 800ce5e:	b940      	cbnz	r0, 800ce72 <xTaskCheckForTimeOut+0x1a>
 800ce60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce64:	f383 8811 	msr	BASEPRI, r3
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	e7fe      	b.n	800ce70 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800ce72:	b941      	cbnz	r1, 800ce86 <xTaskCheckForTimeOut+0x2e>
 800ce74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce78:	f383 8811 	msr	BASEPRI, r3
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	f3bf 8f4f 	dsb	sy
 800ce84:	e7fe      	b.n	800ce84 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800ce86:	f7fe fd35 	bl	800b8f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ce8a:	4b0f      	ldr	r3, [pc, #60]	@ (800cec8 <xTaskCheckForTimeOut+0x70>)
 800ce8c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ce8e:	6823      	ldr	r3, [r4, #0]
 800ce90:	1c5a      	adds	r2, r3, #1
 800ce92:	d010      	beq.n	800ceb6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce94:	480d      	ldr	r0, [pc, #52]	@ (800cecc <xTaskCheckForTimeOut+0x74>)
 800ce96:	682e      	ldr	r6, [r5, #0]
 800ce98:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ce9a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ce9c:	4286      	cmp	r6, r0
 800ce9e:	d001      	beq.n	800cea4 <xTaskCheckForTimeOut+0x4c>
 800cea0:	428a      	cmp	r2, r1
 800cea2:	d90f      	bls.n	800cec4 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cea4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cea6:	4283      	cmp	r3, r0
 800cea8:	d90a      	bls.n	800cec0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800ceaa:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ceac:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800ceae:	4413      	add	r3, r2
 800ceb0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ceb2:	f7ff ffc5 	bl	800ce40 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800ceb6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ceb8:	f7fe fd3c 	bl	800b934 <vPortExitCritical>
}
 800cebc:	4620      	mov	r0, r4
 800cebe:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800cec0:	2300      	movs	r3, #0
 800cec2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800cec4:	2401      	movs	r4, #1
 800cec6:	e7f7      	b.n	800ceb8 <xTaskCheckForTimeOut+0x60>
 800cec8:	24024b2c 	.word	0x24024b2c
 800cecc:	24024b18 	.word	0x24024b18

0800ced0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ced0:	4b01      	ldr	r3, [pc, #4]	@ (800ced8 <vTaskMissedYield+0x8>)
 800ced2:	2201      	movs	r2, #1
 800ced4:	601a      	str	r2, [r3, #0]
}
 800ced6:	4770      	bx	lr
 800ced8:	24024b1c 	.word	0x24024b1c

0800cedc <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800cedc:	4b01      	ldr	r3, [pc, #4]	@ (800cee4 <xTaskGetCurrentTaskHandle+0x8>)
 800cede:	6818      	ldr	r0, [r3, #0]
	}
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	24025004 	.word	0x24025004

0800cee8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800cee8:	4b05      	ldr	r3, [pc, #20]	@ (800cf00 <xTaskGetSchedulerState+0x18>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	b133      	cbz	r3, 800cefc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ceee:	4b05      	ldr	r3, [pc, #20]	@ (800cf04 <xTaskGetSchedulerState+0x1c>)
 800cef0:	6818      	ldr	r0, [r3, #0]
 800cef2:	fab0 f080 	clz	r0, r0
 800cef6:	0940      	lsrs	r0, r0, #5
 800cef8:	0040      	lsls	r0, r0, #1
 800cefa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cefc:	2001      	movs	r0, #1
	}
 800cefe:	4770      	bx	lr
 800cf00:	24024b24 	.word	0x24024b24
 800cf04:	24024b0c 	.word	0x24024b0c

0800cf08 <xTaskPriorityInherit>:
	{
 800cf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	b338      	cbz	r0, 800cf5e <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cf0e:	4d1a      	ldr	r5, [pc, #104]	@ (800cf78 <xTaskPriorityInherit+0x70>)
 800cf10:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800cf12:	682a      	ldr	r2, [r5, #0]
 800cf14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d226      	bcs.n	800cf68 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf1a:	6982      	ldr	r2, [r0, #24]
 800cf1c:	2a00      	cmp	r2, #0
 800cf1e:	db04      	blt.n	800cf2a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf20:	682a      	ldr	r2, [r5, #0]
 800cf22:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cf24:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800cf28:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cf2a:	2214      	movs	r2, #20
 800cf2c:	4e13      	ldr	r6, [pc, #76]	@ (800cf7c <xTaskPriorityInherit+0x74>)
 800cf2e:	fb02 6303 	mla	r3, r2, r3, r6
 800cf32:	6962      	ldr	r2, [r4, #20]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d113      	bne.n	800cf60 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf38:	1d27      	adds	r7, r4, #4
 800cf3a:	4638      	mov	r0, r7
 800cf3c:	f7fe fc62 	bl	800b804 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cf40:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cf42:	4a0f      	ldr	r2, [pc, #60]	@ (800cf80 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cf44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cf46:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cf48:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cf4a:	428b      	cmp	r3, r1
 800cf4c:	d900      	bls.n	800cf50 <xTaskPriorityInherit+0x48>
 800cf4e:	6013      	str	r3, [r2, #0]
 800cf50:	2014      	movs	r0, #20
 800cf52:	4639      	mov	r1, r7
 800cf54:	fb00 6003 	mla	r0, r0, r3, r6
 800cf58:	f7fe fc32 	bl	800b7c0 <vListInsertEnd>
				xReturn = pdTRUE;
 800cf5c:	2001      	movs	r0, #1
	}
 800cf5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cf60:	682b      	ldr	r3, [r5, #0]
 800cf62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cf66:	e7f9      	b.n	800cf5c <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cf68:	682b      	ldr	r3, [r5, #0]
 800cf6a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800cf6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf6e:	4298      	cmp	r0, r3
 800cf70:	bf2c      	ite	cs
 800cf72:	2000      	movcs	r0, #0
 800cf74:	2001      	movcc	r0, #1
 800cf76:	e7f2      	b.n	800cf5e <xTaskPriorityInherit+0x56>
 800cf78:	24025004 	.word	0x24025004
 800cf7c:	24024ba4 	.word	0x24024ba4
 800cf80:	24024b28 	.word	0x24024b28

0800cf84 <xTaskPriorityDisinherit>:
	{
 800cf84:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800cf86:	b908      	cbnz	r0, 800cf8c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800cf88:	2000      	movs	r0, #0
	}
 800cf8a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800cf8c:	4b1b      	ldr	r3, [pc, #108]	@ (800cffc <xTaskPriorityDisinherit+0x78>)
 800cf8e:	681c      	ldr	r4, [r3, #0]
 800cf90:	4284      	cmp	r4, r0
 800cf92:	d008      	beq.n	800cfa6 <xTaskPriorityDisinherit+0x22>
 800cf94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf98:	f383 8811 	msr	BASEPRI, r3
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	e7fe      	b.n	800cfa4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800cfa6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800cfa8:	b943      	cbnz	r3, 800cfbc <xTaskPriorityDisinherit+0x38>
 800cfaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfae:	f383 8811 	msr	BASEPRI, r3
 800cfb2:	f3bf 8f6f 	isb	sy
 800cfb6:	f3bf 8f4f 	dsb	sy
 800cfba:	e7fe      	b.n	800cfba <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cfbc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800cfbe:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cfc0:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800cfc2:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cfc4:	4291      	cmp	r1, r2
 800cfc6:	d0df      	beq.n	800cf88 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d1dd      	bne.n	800cf88 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfcc:	1d25      	adds	r5, r4, #4
 800cfce:	4628      	mov	r0, r5
 800cfd0:	f7fe fc18 	bl	800b804 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cfd4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfd6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cfda:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfdc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800cfde:	4a08      	ldr	r2, [pc, #32]	@ (800d000 <xTaskPriorityDisinherit+0x7c>)
 800cfe0:	6811      	ldr	r1, [r2, #0]
 800cfe2:	428b      	cmp	r3, r1
 800cfe4:	d900      	bls.n	800cfe8 <xTaskPriorityDisinherit+0x64>
 800cfe6:	6013      	str	r3, [r2, #0]
 800cfe8:	4a06      	ldr	r2, [pc, #24]	@ (800d004 <xTaskPriorityDisinherit+0x80>)
 800cfea:	2014      	movs	r0, #20
 800cfec:	4629      	mov	r1, r5
 800cfee:	fb00 2003 	mla	r0, r0, r3, r2
 800cff2:	f7fe fbe5 	bl	800b7c0 <vListInsertEnd>
					xReturn = pdTRUE;
 800cff6:	2001      	movs	r0, #1
		return xReturn;
 800cff8:	e7c7      	b.n	800cf8a <xTaskPriorityDisinherit+0x6>
 800cffa:	bf00      	nop
 800cffc:	24025004 	.word	0x24025004
 800d000:	24024b28 	.word	0x24024b28
 800d004:	24024ba4 	.word	0x24024ba4

0800d008 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800d008:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800d00a:	4604      	mov	r4, r0
 800d00c:	2800      	cmp	r0, #0
 800d00e:	d042      	beq.n	800d096 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800d010:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800d012:	b942      	cbnz	r2, 800d026 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800d014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d018:	f383 8811 	msr	BASEPRI, r3
 800d01c:	f3bf 8f6f 	isb	sy
 800d020:	f3bf 8f4f 	dsb	sy
 800d024:	e7fe      	b.n	800d024 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d026:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800d028:	4299      	cmp	r1, r3
 800d02a:	bf38      	it	cc
 800d02c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d02e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800d030:	428b      	cmp	r3, r1
 800d032:	d030      	beq.n	800d096 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d034:	2a01      	cmp	r2, #1
 800d036:	d12e      	bne.n	800d096 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800d038:	4a17      	ldr	r2, [pc, #92]	@ (800d098 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800d03a:	6812      	ldr	r2, [r2, #0]
 800d03c:	4282      	cmp	r2, r0
 800d03e:	d108      	bne.n	800d052 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800d040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d044:	f383 8811 	msr	BASEPRI, r3
 800d048:	f3bf 8f6f 	isb	sy
 800d04c:	f3bf 8f4f 	dsb	sy
 800d050:	e7fe      	b.n	800d050 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d052:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d054:	4d11      	ldr	r5, [pc, #68]	@ (800d09c <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d056:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d058:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800d05c:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d05e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d062:	bfa8      	it	ge
 800d064:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d068:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d06a:	bfa8      	it	ge
 800d06c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d06e:	429a      	cmp	r2, r3
 800d070:	d111      	bne.n	800d096 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d072:	1d06      	adds	r6, r0, #4
 800d074:	4630      	mov	r0, r6
 800d076:	f7fe fbc5 	bl	800b804 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800d07a:	4a09      	ldr	r2, [pc, #36]	@ (800d0a0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800d07c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d07e:	6811      	ldr	r1, [r2, #0]
 800d080:	428b      	cmp	r3, r1
 800d082:	d900      	bls.n	800d086 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800d084:	6013      	str	r3, [r2, #0]
 800d086:	2014      	movs	r0, #20
 800d088:	4631      	mov	r1, r6
 800d08a:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800d08e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800d092:	f7fe bb95 	b.w	800b7c0 <vListInsertEnd>
	}
 800d096:	bd70      	pop	{r4, r5, r6, pc}
 800d098:	24025004 	.word	0x24025004
 800d09c:	24024ba4 	.word	0x24024ba4
 800d0a0:	24024b28 	.word	0x24024b28

0800d0a4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800d0a4:	4b04      	ldr	r3, [pc, #16]	@ (800d0b8 <pvTaskIncrementMutexHeldCount+0x14>)
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	b11a      	cbz	r2, 800d0b2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800d0aa:	6819      	ldr	r1, [r3, #0]
 800d0ac:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800d0ae:	3201      	adds	r2, #1
 800d0b0:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800d0b2:	6818      	ldr	r0, [r3, #0]
	}
 800d0b4:	4770      	bx	lr
 800d0b6:	bf00      	nop
 800d0b8:	24025004 	.word	0x24025004

0800d0bc <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800d0bc:	4291      	cmp	r1, r2
{
 800d0be:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d0c0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d0c2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800d0c4:	d80a      	bhi.n	800d0dc <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0c6:	1ad2      	subs	r2, r2, r3
 800d0c8:	6983      	ldr	r3, [r0, #24]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d20d      	bcs.n	800d0ea <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d0ce:	1d01      	adds	r1, r0, #4
 800d0d0:	4b07      	ldr	r3, [pc, #28]	@ (800d0f0 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d0d2:	6818      	ldr	r0, [r3, #0]
 800d0d4:	f7fe fb7f 	bl	800b7d6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d0d8:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800d0da:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d201      	bcs.n	800d0e4 <prvInsertTimerInActiveList+0x28>
 800d0e0:	4299      	cmp	r1, r3
 800d0e2:	d202      	bcs.n	800d0ea <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d0e4:	1d01      	adds	r1, r0, #4
 800d0e6:	4b03      	ldr	r3, [pc, #12]	@ (800d0f4 <prvInsertTimerInActiveList+0x38>)
 800d0e8:	e7f3      	b.n	800d0d2 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800d0ea:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800d0ec:	e7f5      	b.n	800d0da <prvInsertTimerInActiveList+0x1e>
 800d0ee:	bf00      	nop
 800d0f0:	24025104 	.word	0x24025104
 800d0f4:	24025108 	.word	0x24025108

0800d0f8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d0f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800d0fa:	4c11      	ldr	r4, [pc, #68]	@ (800d140 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800d0fc:	f7fe fbfa 	bl	800b8f4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800d100:	6825      	ldr	r5, [r4, #0]
 800d102:	b9bd      	cbnz	r5, 800d134 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800d104:	4f0f      	ldr	r7, [pc, #60]	@ (800d144 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800d106:	4e10      	ldr	r6, [pc, #64]	@ (800d148 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800d108:	4638      	mov	r0, r7
 800d10a:	f7fe fb4b 	bl	800b7a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d10e:	4630      	mov	r0, r6
 800d110:	f7fe fb48 	bl	800b7a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d114:	4b0d      	ldr	r3, [pc, #52]	@ (800d14c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d116:	4a0e      	ldr	r2, [pc, #56]	@ (800d150 <prvCheckForValidListAndQueue+0x58>)
 800d118:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800d11a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d11c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800d11e:	4b0d      	ldr	r3, [pc, #52]	@ (800d154 <prvCheckForValidListAndQueue+0x5c>)
 800d120:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d122:	4b0d      	ldr	r3, [pc, #52]	@ (800d158 <prvCheckForValidListAndQueue+0x60>)
 800d124:	9500      	str	r5, [sp, #0]
 800d126:	f7fe fdef 	bl	800bd08 <xQueueGenericCreateStatic>
 800d12a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d12c:	b110      	cbz	r0, 800d134 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d12e:	490b      	ldr	r1, [pc, #44]	@ (800d15c <prvCheckForValidListAndQueue+0x64>)
 800d130:	f7ff fa1a 	bl	800c568 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800d134:	b003      	add	sp, #12
 800d136:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800d13a:	f7fe bbfb 	b.w	800b934 <vPortExitCritical>
 800d13e:	bf00      	nop
 800d140:	24025100 	.word	0x24025100
 800d144:	24025120 	.word	0x24025120
 800d148:	2402510c 	.word	0x2402510c
 800d14c:	24025108 	.word	0x24025108
 800d150:	24025058 	.word	0x24025058
 800d154:	24025104 	.word	0x24025104
 800d158:	24025008 	.word	0x24025008
 800d15c:	08023b69 	.word	0x08023b69

0800d160 <xTimerCreateTimerTask>:
{
 800d160:	b510      	push	{r4, lr}
 800d162:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800d164:	f7ff ffc8 	bl	800d0f8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800d168:	4b12      	ldr	r3, [pc, #72]	@ (800d1b4 <xTimerCreateTimerTask+0x54>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	b1b3      	cbz	r3, 800d19c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d16e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d170:	aa07      	add	r2, sp, #28
 800d172:	a906      	add	r1, sp, #24
 800d174:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d176:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d17a:	f7fe fa0b 	bl	800b594 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d17e:	9b05      	ldr	r3, [sp, #20]
 800d180:	9a07      	ldr	r2, [sp, #28]
 800d182:	9302      	str	r3, [sp, #8]
 800d184:	9b06      	ldr	r3, [sp, #24]
 800d186:	490c      	ldr	r1, [pc, #48]	@ (800d1b8 <xTimerCreateTimerTask+0x58>)
 800d188:	9301      	str	r3, [sp, #4]
 800d18a:	2302      	movs	r3, #2
 800d18c:	480b      	ldr	r0, [pc, #44]	@ (800d1bc <xTimerCreateTimerTask+0x5c>)
 800d18e:	9300      	str	r3, [sp, #0]
 800d190:	4623      	mov	r3, r4
 800d192:	f7ff fbae 	bl	800c8f2 <xTaskCreateStatic>
 800d196:	4b0a      	ldr	r3, [pc, #40]	@ (800d1c0 <xTimerCreateTimerTask+0x60>)
 800d198:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800d19a:	b940      	cbnz	r0, 800d1ae <xTimerCreateTimerTask+0x4e>
 800d19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a0:	f383 8811 	msr	BASEPRI, r3
 800d1a4:	f3bf 8f6f 	isb	sy
 800d1a8:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800d1ac:	e7fe      	b.n	800d1ac <xTimerCreateTimerTask+0x4c>
}
 800d1ae:	2001      	movs	r0, #1
 800d1b0:	b008      	add	sp, #32
 800d1b2:	bd10      	pop	{r4, pc}
 800d1b4:	24025100 	.word	0x24025100
 800d1b8:	08023b6e 	.word	0x08023b6e
 800d1bc:	0800d2bd 	.word	0x0800d2bd
 800d1c0:	240250fc 	.word	0x240250fc

0800d1c4 <xTimerGenericCommand>:
{
 800d1c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d1c6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800d1c8:	4604      	mov	r4, r0
{
 800d1ca:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800d1cc:	b940      	cbnz	r0, 800d1e0 <xTimerGenericCommand+0x1c>
 800d1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d2:	f383 8811 	msr	BASEPRI, r3
 800d1d6:	f3bf 8f6f 	isb	sy
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	e7fe      	b.n	800d1de <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800d1e0:	4d0c      	ldr	r5, [pc, #48]	@ (800d214 <xTimerGenericCommand+0x50>)
 800d1e2:	6828      	ldr	r0, [r5, #0]
 800d1e4:	b178      	cbz	r0, 800d206 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d1e6:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d1e8:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d1ea:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d1ee:	dc0c      	bgt.n	800d20a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d1f0:	f7ff fe7a 	bl	800cee8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d1f4:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d1f6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d1f8:	4669      	mov	r1, sp
 800d1fa:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d1fc:	bf0c      	ite	eq
 800d1fe:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d200:	461a      	movne	r2, r3
 800d202:	f7fe fe36 	bl	800be72 <xQueueGenericSend>
}
 800d206:	b004      	add	sp, #16
 800d208:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d20a:	2300      	movs	r3, #0
 800d20c:	4669      	mov	r1, sp
 800d20e:	f7fe ff33 	bl	800c078 <xQueueGenericSendFromISR>
 800d212:	e7f8      	b.n	800d206 <xTimerGenericCommand+0x42>
 800d214:	24025100 	.word	0x24025100

0800d218 <prvSampleTimeNow>:
{
 800d218:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800d21c:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800d2b8 <prvSampleTimeNow+0xa0>
{
 800d220:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800d222:	f7ff fbd5 	bl	800c9d0 <xTaskGetTickCount>
 800d226:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800d228:	f8d8 3000 	ldr.w	r3, [r8]
 800d22c:	4283      	cmp	r3, r0
 800d22e:	d909      	bls.n	800d244 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d230:	4f1f      	ldr	r7, [pc, #124]	@ (800d2b0 <prvSampleTimeNow+0x98>)
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	b96a      	cbnz	r2, 800d254 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800d238:	4a1e      	ldr	r2, [pc, #120]	@ (800d2b4 <prvSampleTimeNow+0x9c>)
 800d23a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d23c:	6013      	str	r3, [r2, #0]
 800d23e:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800d240:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800d242:	e000      	b.n	800d246 <prvSampleTimeNow+0x2e>
 800d244:	2300      	movs	r3, #0
}
 800d246:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800d248:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800d24a:	f8c8 5000 	str.w	r5, [r8]
}
 800d24e:	b002      	add	sp, #8
 800d250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d254:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d256:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d258:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d25c:	f104 0a04 	add.w	sl, r4, #4
 800d260:	4650      	mov	r0, sl
 800d262:	f7fe facf 	bl	800b804 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d266:	6a23      	ldr	r3, [r4, #32]
 800d268:	4620      	mov	r0, r4
 800d26a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d26c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d270:	075b      	lsls	r3, r3, #29
 800d272:	d5de      	bpl.n	800d232 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d274:	69a3      	ldr	r3, [r4, #24]
 800d276:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800d278:	4599      	cmp	r9, r3
 800d27a:	d206      	bcs.n	800d28a <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d27c:	4651      	mov	r1, sl
 800d27e:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d280:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d282:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d284:	f7fe faa7 	bl	800b7d6 <vListInsert>
 800d288:	e7d3      	b.n	800d232 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d28a:	2300      	movs	r3, #0
 800d28c:	464a      	mov	r2, r9
 800d28e:	4620      	mov	r0, r4
 800d290:	4619      	mov	r1, r3
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	f7ff ff96 	bl	800d1c4 <xTimerGenericCommand>
				configASSERT( xResult );
 800d298:	2800      	cmp	r0, #0
 800d29a:	d1ca      	bne.n	800d232 <prvSampleTimeNow+0x1a>
 800d29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a0:	f383 8811 	msr	BASEPRI, r3
 800d2a4:	f3bf 8f6f 	isb	sy
 800d2a8:	f3bf 8f4f 	dsb	sy
 800d2ac:	e7fe      	b.n	800d2ac <prvSampleTimeNow+0x94>
 800d2ae:	bf00      	nop
 800d2b0:	24025108 	.word	0x24025108
 800d2b4:	24025104 	.word	0x24025104
 800d2b8:	240250f8 	.word	0x240250f8

0800d2bc <prvTimerTask>:
{
 800d2bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d2c0:	4d6e      	ldr	r5, [pc, #440]	@ (800d47c <prvTimerTask+0x1c0>)
{
 800d2c2:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d2c4:	4e6e      	ldr	r6, [pc, #440]	@ (800d480 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d2c6:	682b      	ldr	r3, [r5, #0]
 800d2c8:	f8d3 8000 	ldr.w	r8, [r3]
 800d2cc:	f1b8 0f00 	cmp.w	r8, #0
 800d2d0:	d035      	beq.n	800d33e <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2d2:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d2d4:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2d6:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800d2da:	f7ff fb71 	bl	800c9c0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d2de:	a804      	add	r0, sp, #16
 800d2e0:	f7ff ff9a 	bl	800d218 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800d2e4:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d2e6:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d169      	bne.n	800d3c0 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d2ec:	2c00      	cmp	r4, #0
 800d2ee:	d14c      	bne.n	800d38a <prvTimerTask+0xce>
 800d2f0:	4540      	cmp	r0, r8
 800d2f2:	d350      	bcc.n	800d396 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800d2f4:	f7ff fc08 	bl	800cb08 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2f8:	682b      	ldr	r3, [r5, #0]
 800d2fa:	68db      	ldr	r3, [r3, #12]
 800d2fc:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2fe:	1d38      	adds	r0, r7, #4
 800d300:	f7fe fa80 	bl	800b804 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d304:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d308:	0758      	lsls	r0, r3, #29
 800d30a:	d51a      	bpl.n	800d342 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d30c:	69b9      	ldr	r1, [r7, #24]
 800d30e:	4643      	mov	r3, r8
 800d310:	464a      	mov	r2, r9
 800d312:	4638      	mov	r0, r7
 800d314:	4441      	add	r1, r8
 800d316:	f7ff fed1 	bl	800d0bc <prvInsertTimerInActiveList>
 800d31a:	b1b0      	cbz	r0, 800d34a <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d31c:	4623      	mov	r3, r4
 800d31e:	4642      	mov	r2, r8
 800d320:	4621      	mov	r1, r4
 800d322:	4638      	mov	r0, r7
 800d324:	9400      	str	r4, [sp, #0]
 800d326:	f7ff ff4d 	bl	800d1c4 <xTimerGenericCommand>
			configASSERT( xResult );
 800d32a:	b970      	cbnz	r0, 800d34a <prvTimerTask+0x8e>
 800d32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	e7fe      	b.n	800d33c <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d33e:	2401      	movs	r4, #1
 800d340:	e7cb      	b.n	800d2da <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d342:	f023 0301 	bic.w	r3, r3, #1
 800d346:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d34a:	6a3b      	ldr	r3, [r7, #32]
 800d34c:	4638      	mov	r0, r7
 800d34e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d350:	2200      	movs	r2, #0
 800d352:	a904      	add	r1, sp, #16
 800d354:	6830      	ldr	r0, [r6, #0]
 800d356:	f7fe ff3d 	bl	800c1d4 <xQueueReceive>
 800d35a:	2800      	cmp	r0, #0
 800d35c:	d0b3      	beq.n	800d2c6 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d35e:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d360:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d362:	2b00      	cmp	r3, #0
 800d364:	db2f      	blt.n	800d3c6 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d366:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d368:	6963      	ldr	r3, [r4, #20]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d132      	bne.n	800d3d4 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d36e:	a803      	add	r0, sp, #12
 800d370:	f7ff ff52 	bl	800d218 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800d374:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d376:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800d378:	2b09      	cmp	r3, #9
 800d37a:	d8e9      	bhi.n	800d350 <prvTimerTask+0x94>
 800d37c:	e8df f003 	tbb	[pc, r3]
 800d380:	572e2e2e 	.word	0x572e2e2e
 800d384:	2e2e765e 	.word	0x2e2e765e
 800d388:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d38a:	4b3e      	ldr	r3, [pc, #248]	@ (800d484 <prvTimerTask+0x1c8>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	681c      	ldr	r4, [r3, #0]
 800d390:	fab4 f484 	clz	r4, r4
 800d394:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d396:	4622      	mov	r2, r4
 800d398:	eba8 0109 	sub.w	r1, r8, r9
 800d39c:	6830      	ldr	r0, [r6, #0]
 800d39e:	f7ff f922 	bl	800c5e6 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d3a2:	f7ff fbb1 	bl	800cb08 <xTaskResumeAll>
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	d1d2      	bne.n	800d350 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800d3aa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d3ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d3b6:	f3bf 8f4f 	dsb	sy
 800d3ba:	f3bf 8f6f 	isb	sy
 800d3be:	e7c7      	b.n	800d350 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800d3c0:	f7ff fba2 	bl	800cb08 <xTaskResumeAll>
}
 800d3c4:	e7c4      	b.n	800d350 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d3c6:	9b05      	ldr	r3, [sp, #20]
 800d3c8:	9907      	ldr	r1, [sp, #28]
 800d3ca:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d3cc:	9b04      	ldr	r3, [sp, #16]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	dbbe      	blt.n	800d350 <prvTimerTask+0x94>
 800d3d2:	e7c8      	b.n	800d366 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3d4:	1d20      	adds	r0, r4, #4
 800d3d6:	f7fe fa15 	bl	800b804 <uxListRemove>
 800d3da:	e7c8      	b.n	800d36e <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d3dc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d3e4:	f043 0301 	orr.w	r3, r3, #1
 800d3e8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d3ec:	9b05      	ldr	r3, [sp, #20]
 800d3ee:	4419      	add	r1, r3
 800d3f0:	f7ff fe64 	bl	800d0bc <prvInsertTimerInActiveList>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d0ab      	beq.n	800d350 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3f8:	6a23      	ldr	r3, [r4, #32]
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3fe:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d402:	0759      	lsls	r1, r3, #29
 800d404:	d5a4      	bpl.n	800d350 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d406:	69a2      	ldr	r2, [r4, #24]
 800d408:	2300      	movs	r3, #0
 800d40a:	9905      	ldr	r1, [sp, #20]
 800d40c:	4620      	mov	r0, r4
 800d40e:	9300      	str	r3, [sp, #0]
 800d410:	440a      	add	r2, r1
 800d412:	4619      	mov	r1, r3
 800d414:	f7ff fed6 	bl	800d1c4 <xTimerGenericCommand>
							configASSERT( xResult );
 800d418:	2800      	cmp	r0, #0
 800d41a:	d199      	bne.n	800d350 <prvTimerTask+0x94>
 800d41c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d420:	f383 8811 	msr	BASEPRI, r3
 800d424:	f3bf 8f6f 	isb	sy
 800d428:	f3bf 8f4f 	dsb	sy
 800d42c:	e7fe      	b.n	800d42c <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d42e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d432:	f023 0301 	bic.w	r3, r3, #1
 800d436:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800d43a:	e789      	b.n	800d350 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d43c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d440:	f043 0301 	orr.w	r3, r3, #1
 800d444:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d448:	9905      	ldr	r1, [sp, #20]
 800d44a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d44c:	b941      	cbnz	r1, 800d460 <prvTimerTask+0x1a4>
 800d44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d452:	f383 8811 	msr	BASEPRI, r3
 800d456:	f3bf 8f6f 	isb	sy
 800d45a:	f3bf 8f4f 	dsb	sy
 800d45e:	e7fe      	b.n	800d45e <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d460:	4603      	mov	r3, r0
 800d462:	4401      	add	r1, r0
 800d464:	4620      	mov	r0, r4
 800d466:	f7ff fe29 	bl	800d0bc <prvInsertTimerInActiveList>
					break;
 800d46a:	e771      	b.n	800d350 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d46c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d470:	079a      	lsls	r2, r3, #30
 800d472:	d4de      	bmi.n	800d432 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800d474:	4620      	mov	r0, r4
 800d476:	f7fe f957 	bl	800b728 <vPortFree>
 800d47a:	e769      	b.n	800d350 <prvTimerTask+0x94>
 800d47c:	24025108 	.word	0x24025108
 800d480:	24025100 	.word	0x24025100
 800d484:	24025104 	.word	0x24025104

0800d488 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800d488:	8880      	ldrh	r0, [r0, #4]
 800d48a:	4770      	bx	lr

0800d48c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800d48c:	b570      	push	{r4, r5, r6, lr}
 800d48e:	6803      	ldr	r3, [r0, #0]
 800d490:	460c      	mov	r4, r1
 800d492:	2100      	movs	r1, #0
 800d494:	4605      	mov	r5, r0
 800d496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d498:	4798      	blx	r3
 800d49a:	4606      	mov	r6, r0
 800d49c:	682b      	ldr	r3, [r5, #0]
 800d49e:	4628      	mov	r0, r5
 800d4a0:	1ba4      	subs	r4, r4, r6
 800d4a2:	6a1b      	ldr	r3, [r3, #32]
 800d4a4:	b2a4      	uxth	r4, r4
 800d4a6:	4798      	blx	r3
 800d4a8:	fbb4 f0f0 	udiv	r0, r4, r0
 800d4ac:	bd70      	pop	{r4, r5, r6, pc}

0800d4ae <_ZN8touchgfx17AbstractPartition5clearEv>:
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	8083      	strh	r3, [r0, #4]
 800d4b2:	4770      	bx	lr

0800d4b4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800d4b4:	b510      	push	{r4, lr}
 800d4b6:	6803      	ldr	r3, [r0, #0]
 800d4b8:	4604      	mov	r4, r0
 800d4ba:	8881      	ldrh	r1, [r0, #4]
 800d4bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4be:	4798      	blx	r3
 800d4c0:	88a3      	ldrh	r3, [r4, #4]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	80a3      	strh	r3, [r4, #4]
 800d4c6:	bd10      	pop	{r4, pc}

0800d4c8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800d4c8:	6803      	ldr	r3, [r0, #0]
 800d4ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4cc:	4718      	bx	r3

0800d4ce <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800d4ce:	4770      	bx	lr

0800d4d0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800d4d0:	4a02      	ldr	r2, [pc, #8]	@ (800d4dc <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800d4d2:	6002      	str	r2, [r0, #0]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	8082      	strh	r2, [r0, #4]
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	08023b80 	.word	0x08023b80

0800d4e0 <_ZN8touchgfx9Container13getFirstChildEv>:
 800d4e0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800d4e2:	4770      	bx	lr

0800d4e4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800d4e4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d4e6:	2000      	movs	r0, #0
 800d4e8:	b12b      	cbz	r3, 800d4f6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d4ea:	b920      	cbnz	r0, 800d4f6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d4ec:	1a5a      	subs	r2, r3, r1
 800d4ee:	699b      	ldr	r3, [r3, #24]
 800d4f0:	4250      	negs	r0, r2
 800d4f2:	4150      	adcs	r0, r2
 800d4f4:	e7f8      	b.n	800d4e8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800d4f6:	4770      	bx	lr

0800d4f8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	6148      	str	r0, [r1, #20]
 800d4fc:	618b      	str	r3, [r1, #24]
 800d4fe:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d500:	b913      	cbnz	r3, 800d508 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800d502:	6281      	str	r1, [r0, #40]	@ 0x28
 800d504:	4770      	bx	lr
 800d506:	4613      	mov	r3, r2
 800d508:	699a      	ldr	r2, [r3, #24]
 800d50a:	2a00      	cmp	r2, #0
 800d50c:	d1fb      	bne.n	800d506 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800d50e:	6199      	str	r1, [r3, #24]
 800d510:	4770      	bx	lr

0800d512 <_ZN8touchgfx9Container9removeAllEv>:
 800d512:	2200      	movs	r2, #0
 800d514:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d516:	b123      	cbz	r3, 800d522 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800d518:	6999      	ldr	r1, [r3, #24]
 800d51a:	6281      	str	r1, [r0, #40]	@ 0x28
 800d51c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800d520:	e7f8      	b.n	800d514 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800d522:	4770      	bx	lr

0800d524 <_ZN8touchgfx9Container6unlinkEv>:
 800d524:	2300      	movs	r3, #0
 800d526:	6283      	str	r3, [r0, #40]	@ 0x28
 800d528:	4770      	bx	lr

0800d52a <_ZNK8touchgfx9Container12getSolidRectEv>:
 800d52a:	2200      	movs	r2, #0
 800d52c:	8002      	strh	r2, [r0, #0]
 800d52e:	8042      	strh	r2, [r0, #2]
 800d530:	8082      	strh	r2, [r0, #4]
 800d532:	80c2      	strh	r2, [r0, #6]
 800d534:	4770      	bx	lr

0800d536 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800d536:	b570      	push	{r4, r5, r6, lr}
 800d538:	460d      	mov	r5, r1
 800d53a:	4616      	mov	r6, r2
 800d53c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d53e:	b13c      	cbz	r4, 800d550 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800d540:	6823      	ldr	r3, [r4, #0]
 800d542:	4620      	mov	r0, r4
 800d544:	4632      	mov	r2, r6
 800d546:	4629      	mov	r1, r5
 800d548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d54a:	4798      	blx	r3
 800d54c:	69a4      	ldr	r4, [r4, #24]
 800d54e:	e7f6      	b.n	800d53e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800d550:	bd70      	pop	{r4, r5, r6, pc}

0800d552 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800d552:	b538      	push	{r3, r4, r5, lr}
 800d554:	460d      	mov	r5, r1
 800d556:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d558:	b134      	cbz	r4, 800d568 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800d55a:	682b      	ldr	r3, [r5, #0]
 800d55c:	4621      	mov	r1, r4
 800d55e:	4628      	mov	r0, r5
 800d560:	689b      	ldr	r3, [r3, #8]
 800d562:	4798      	blx	r3
 800d564:	69a4      	ldr	r4, [r4, #24]
 800d566:	e7f7      	b.n	800d558 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800d568:	bd38      	pop	{r3, r4, r5, pc}

0800d56a <_ZN8touchgfx9ContainerD1Ev>:
 800d56a:	4770      	bx	lr

0800d56c <_ZN8touchgfx9ContainerD0Ev>:
 800d56c:	b510      	push	{r4, lr}
 800d56e:	4604      	mov	r4, r0
 800d570:	212c      	movs	r1, #44	@ 0x2c
 800d572:	f012 fac5 	bl	801fb00 <_ZdlPvj>
 800d576:	4620      	mov	r0, r4
 800d578:	bd10      	pop	{r4, pc}

0800d57a <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800d57a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d57c:	b19b      	cbz	r3, 800d5a6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d57e:	428b      	cmp	r3, r1
 800d580:	d109      	bne.n	800d596 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800d582:	699a      	ldr	r2, [r3, #24]
 800d584:	2100      	movs	r1, #0
 800d586:	6159      	str	r1, [r3, #20]
 800d588:	6282      	str	r2, [r0, #40]	@ 0x28
 800d58a:	b902      	cbnz	r2, 800d58e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800d58c:	4770      	bx	lr
 800d58e:	6199      	str	r1, [r3, #24]
 800d590:	4770      	bx	lr
 800d592:	4613      	mov	r3, r2
 800d594:	b13a      	cbz	r2, 800d5a6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d596:	699a      	ldr	r2, [r3, #24]
 800d598:	428a      	cmp	r2, r1
 800d59a:	d1fa      	bne.n	800d592 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800d59c:	698a      	ldr	r2, [r1, #24]
 800d59e:	619a      	str	r2, [r3, #24]
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800d5a6:	4770      	bx	lr

0800d5a8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800d5a8:	b410      	push	{r4}
 800d5aa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	b92b      	cbnz	r3, 800d5bc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800d5b0:	6803      	ldr	r3, [r0, #0]
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d5ba:	4718      	bx	r3
 800d5bc:	b941      	cbnz	r1, 800d5d0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800d5be:	6193      	str	r3, [r2, #24]
 800d5c0:	6282      	str	r2, [r0, #40]	@ 0x28
 800d5c2:	6154      	str	r4, [r2, #20]
 800d5c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5c8:	4770      	bx	lr
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	d0f9      	beq.n	800d5c4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800d5d0:	4299      	cmp	r1, r3
 800d5d2:	6998      	ldr	r0, [r3, #24]
 800d5d4:	d1f9      	bne.n	800d5ca <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800d5d6:	6190      	str	r0, [r2, #24]
 800d5d8:	618a      	str	r2, [r1, #24]
 800d5da:	e7f2      	b.n	800d5c2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800d5dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800d5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e0:	461f      	mov	r7, r3
 800d5e2:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d5e6:	460d      	mov	r5, r1
 800d5e8:	4616      	mov	r6, r2
 800d5ea:	b103      	cbz	r3, 800d5ee <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800d5ec:	6038      	str	r0, [r7, #0]
 800d5ee:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d5f0:	b314      	cbz	r4, 800d638 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800d5f2:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800d5f6:	b1eb      	cbz	r3, 800d634 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d5f8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d5fc:	428d      	cmp	r5, r1
 800d5fe:	db19      	blt.n	800d634 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d600:	b289      	uxth	r1, r1
 800d602:	8923      	ldrh	r3, [r4, #8]
 800d604:	440b      	add	r3, r1
 800d606:	b21b      	sxth	r3, r3
 800d608:	429d      	cmp	r5, r3
 800d60a:	da13      	bge.n	800d634 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d60c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d610:	4296      	cmp	r6, r2
 800d612:	db0f      	blt.n	800d634 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d614:	b292      	uxth	r2, r2
 800d616:	8963      	ldrh	r3, [r4, #10]
 800d618:	4413      	add	r3, r2
 800d61a:	b21b      	sxth	r3, r3
 800d61c:	429e      	cmp	r6, r3
 800d61e:	da09      	bge.n	800d634 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d620:	6823      	ldr	r3, [r4, #0]
 800d622:	1ab2      	subs	r2, r6, r2
 800d624:	1a69      	subs	r1, r5, r1
 800d626:	4620      	mov	r0, r4
 800d628:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800d62c:	b212      	sxth	r2, r2
 800d62e:	463b      	mov	r3, r7
 800d630:	b209      	sxth	r1, r1
 800d632:	47c0      	blx	r8
 800d634:	69a4      	ldr	r4, [r4, #24]
 800d636:	e7db      	b.n	800d5f0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800d638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d63c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800d63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d640:	4c6d      	ldr	r4, [pc, #436]	@ (800d7f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800d642:	b0a1      	sub	sp, #132	@ 0x84
 800d644:	4606      	mov	r6, r0
 800d646:	6824      	ldr	r4, [r4, #0]
 800d648:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800d64a:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800d64e:	2400      	movs	r4, #0
 800d650:	9303      	str	r3, [sp, #12]
 800d652:	802c      	strh	r4, [r5, #0]
 800d654:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800d656:	802c      	strh	r4, [r5, #0]
 800d658:	601c      	str	r4, [r3, #0]
 800d65a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800d65e:	f7ff ffbd 	bl	800d5dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d662:	f1b9 0f03 	cmp.w	r9, #3
 800d666:	f340 80c1 	ble.w	800d7ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800d66a:	4631      	mov	r1, r6
 800d66c:	a80c      	add	r0, sp, #48	@ 0x30
 800d66e:	f006 fac1 	bl	8013bf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d672:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800d676:	9306      	str	r3, [sp, #24]
 800d678:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800d67c:	9307      	str	r3, [sp, #28]
 800d67e:	9b03      	ldr	r3, [sp, #12]
 800d680:	f8d3 a000 	ldr.w	sl, [r3]
 800d684:	f1ba 0f00 	cmp.w	sl, #0
 800d688:	f000 80b3 	beq.w	800d7f2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800d68c:	4651      	mov	r1, sl
 800d68e:	a810      	add	r0, sp, #64	@ 0x40
 800d690:	f006 fab0 	bl	8013bf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d694:	2002      	movs	r0, #2
 800d696:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800d69a:	9b01      	ldr	r3, [sp, #4]
 800d69c:	9a06      	ldr	r2, [sp, #24]
 800d69e:	fb91 f1f0 	sdiv	r1, r1, r0
 800d6a2:	189d      	adds	r5, r3, r2
 800d6a4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800d6a8:	9a07      	ldr	r2, [sp, #28]
 800d6aa:	4419      	add	r1, r3
 800d6ac:	9b02      	ldr	r3, [sp, #8]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800d6b4:	1a6d      	subs	r5, r5, r1
 800d6b6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800d6ba:	fb92 f2f0 	sdiv	r2, r2, r0
 800d6be:	440a      	add	r2, r1
 800d6c0:	1a9b      	subs	r3, r3, r2
 800d6c2:	435b      	muls	r3, r3
 800d6c4:	fb05 3505 	mla	r5, r5, r5, r3
 800d6c8:	4f4c      	ldr	r7, [pc, #304]	@ (800d7fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800d6ca:	ac10      	add	r4, sp, #64	@ 0x40
 800d6cc:	f1b9 0f0c 	cmp.w	r9, #12
 800d6d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d6d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6d4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d6d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d6da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d6dc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800d6e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d6e4:	f04f 0303 	mov.w	r3, #3
 800d6e8:	bfd8      	it	le
 800d6ea:	f109 32ff 	addle.w	r2, r9, #4294967295
 800d6ee:	f04f 0400 	mov.w	r4, #0
 800d6f2:	f8cd 9000 	str.w	r9, [sp]
 800d6f6:	bfcc      	ite	gt
 800d6f8:	4698      	movgt	r8, r3
 800d6fa:	fb92 f8f3 	sdivle	r8, r2, r3
 800d6fe:	1c63      	adds	r3, r4, #1
 800d700:	aa10      	add	r2, sp, #64	@ 0x40
 800d702:	f004 0401 	and.w	r4, r4, #1
 800d706:	f04f 0b00 	mov.w	fp, #0
 800d70a:	9308      	str	r3, [sp, #32]
 800d70c:	9b00      	ldr	r3, [sp, #0]
 800d70e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800d712:	fb93 f3f8 	sdiv	r3, r3, r8
 800d716:	3404      	adds	r4, #4
 800d718:	b29b      	uxth	r3, r3
 800d71a:	9304      	str	r3, [sp, #16]
 800d71c:	9a04      	ldr	r2, [sp, #16]
 800d71e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d722:	fb13 f302 	smulbb	r3, r3, r2
 800d726:	9a01      	ldr	r2, [sp, #4]
 800d728:	b29b      	uxth	r3, r3
 800d72a:	1899      	adds	r1, r3, r2
 800d72c:	9305      	str	r3, [sp, #20]
 800d72e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d732:	b209      	sxth	r1, r1
 800d734:	4299      	cmp	r1, r3
 800d736:	db4d      	blt.n	800d7d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d738:	8932      	ldrh	r2, [r6, #8]
 800d73a:	4413      	add	r3, r2
 800d73c:	b21b      	sxth	r3, r3
 800d73e:	4299      	cmp	r1, r3
 800d740:	da48      	bge.n	800d7d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d742:	9b04      	ldr	r3, [sp, #16]
 800d744:	6827      	ldr	r7, [r4, #0]
 800d746:	fb17 f703 	smulbb	r7, r7, r3
 800d74a:	9b02      	ldr	r3, [sp, #8]
 800d74c:	b2bf      	uxth	r7, r7
 800d74e:	18fa      	adds	r2, r7, r3
 800d750:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d754:	b212      	sxth	r2, r2
 800d756:	429a      	cmp	r2, r3
 800d758:	db3c      	blt.n	800d7d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d75a:	8970      	ldrh	r0, [r6, #10]
 800d75c:	4403      	add	r3, r0
 800d75e:	b21b      	sxth	r3, r3
 800d760:	429a      	cmp	r2, r3
 800d762:	da37      	bge.n	800d7d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d764:	2300      	movs	r3, #0
 800d766:	4630      	mov	r0, r6
 800d768:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d76a:	ab0b      	add	r3, sp, #44	@ 0x2c
 800d76c:	f7ff ff36 	bl	800d5dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d770:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d772:	b37a      	cbz	r2, 800d7d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d774:	4552      	cmp	r2, sl
 800d776:	d02d      	beq.n	800d7d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d778:	4611      	mov	r1, r2
 800d77a:	a80e      	add	r0, sp, #56	@ 0x38
 800d77c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d77e:	f006 fa39 	bl	8013bf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d782:	f04f 0e02 	mov.w	lr, #2
 800d786:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800d78a:	9a06      	ldr	r2, [sp, #24]
 800d78c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800d790:	9b01      	ldr	r3, [sp, #4]
 800d792:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800d796:	4413      	add	r3, r2
 800d798:	9a07      	ldr	r2, [sp, #28]
 800d79a:	fb91 f1fe 	sdiv	r1, r1, lr
 800d79e:	fb9c fcfe 	sdiv	ip, ip, lr
 800d7a2:	4401      	add	r1, r0
 800d7a4:	1a58      	subs	r0, r3, r1
 800d7a6:	9b02      	ldr	r3, [sp, #8]
 800d7a8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800d7ac:	4413      	add	r3, r2
 800d7ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7b0:	448c      	add	ip, r1
 800d7b2:	eba3 030c 	sub.w	r3, r3, ip
 800d7b6:	435b      	muls	r3, r3
 800d7b8:	fb00 3300 	mla	r3, r0, r0, r3
 800d7bc:	42ab      	cmp	r3, r5
 800d7be:	d208      	bcs.n	800d7d2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800d7c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d7c2:	461d      	mov	r5, r3
 800d7c4:	9803      	ldr	r0, [sp, #12]
 800d7c6:	6001      	str	r1, [r0, #0]
 800d7c8:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800d7ca:	9805      	ldr	r0, [sp, #20]
 800d7cc:	8008      	strh	r0, [r1, #0]
 800d7ce:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800d7d0:	800f      	strh	r7, [r1, #0]
 800d7d2:	4692      	mov	sl, r2
 800d7d4:	f10b 0b01 	add.w	fp, fp, #1
 800d7d8:	3408      	adds	r4, #8
 800d7da:	f1bb 0f04 	cmp.w	fp, #4
 800d7de:	d19d      	bne.n	800d71c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800d7e0:	9b00      	ldr	r3, [sp, #0]
 800d7e2:	9c08      	ldr	r4, [sp, #32]
 800d7e4:	444b      	add	r3, r9
 800d7e6:	4544      	cmp	r4, r8
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	d188      	bne.n	800d6fe <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800d7ec:	b021      	add	sp, #132	@ 0x84
 800d7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f2:	f04f 35ff 	mov.w	r5, #4294967295
 800d7f6:	e767      	b.n	800d6c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800d7f8:	24025140 	.word	0x24025140
 800d7fc:	0802136c 	.word	0x0802136c

0800d800 <_ZN8touchgfx4RectaNERKS0_>:
 800d800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d804:	f9b1 7000 	ldrsh.w	r7, [r1]
 800d808:	888c      	ldrh	r4, [r1, #4]
 800d80a:	f9b0 9000 	ldrsh.w	r9, [r0]
 800d80e:	443c      	add	r4, r7
 800d810:	b2a4      	uxth	r4, r4
 800d812:	fa0f f884 	sxth.w	r8, r4
 800d816:	45c1      	cmp	r9, r8
 800d818:	da2f      	bge.n	800d87a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d81a:	8882      	ldrh	r2, [r0, #4]
 800d81c:	444a      	add	r2, r9
 800d81e:	b292      	uxth	r2, r2
 800d820:	fa0f fe82 	sxth.w	lr, r2
 800d824:	4577      	cmp	r7, lr
 800d826:	da28      	bge.n	800d87a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d828:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800d82c:	88cb      	ldrh	r3, [r1, #6]
 800d82e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800d832:	442b      	add	r3, r5
 800d834:	b21b      	sxth	r3, r3
 800d836:	429e      	cmp	r6, r3
 800d838:	da1f      	bge.n	800d87a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d83a:	88c3      	ldrh	r3, [r0, #6]
 800d83c:	4433      	add	r3, r6
 800d83e:	b29b      	uxth	r3, r3
 800d840:	fa0f fc83 	sxth.w	ip, r3
 800d844:	4565      	cmp	r5, ip
 800d846:	da18      	bge.n	800d87a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d848:	454f      	cmp	r7, r9
 800d84a:	bfb8      	it	lt
 800d84c:	464f      	movlt	r7, r9
 800d84e:	42b5      	cmp	r5, r6
 800d850:	bfb8      	it	lt
 800d852:	4635      	movlt	r5, r6
 800d854:	45f0      	cmp	r8, lr
 800d856:	bfd8      	it	le
 800d858:	4622      	movle	r2, r4
 800d85a:	1bd2      	subs	r2, r2, r7
 800d85c:	8082      	strh	r2, [r0, #4]
 800d85e:	884a      	ldrh	r2, [r1, #2]
 800d860:	88c9      	ldrh	r1, [r1, #6]
 800d862:	8007      	strh	r7, [r0, #0]
 800d864:	440a      	add	r2, r1
 800d866:	8045      	strh	r5, [r0, #2]
 800d868:	b292      	uxth	r2, r2
 800d86a:	b211      	sxth	r1, r2
 800d86c:	458c      	cmp	ip, r1
 800d86e:	bfa8      	it	ge
 800d870:	4613      	movge	r3, r2
 800d872:	1b5b      	subs	r3, r3, r5
 800d874:	80c3      	strh	r3, [r0, #6]
 800d876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d87a:	2300      	movs	r3, #0
 800d87c:	8003      	strh	r3, [r0, #0]
 800d87e:	8043      	strh	r3, [r0, #2]
 800d880:	8083      	strh	r3, [r0, #4]
 800d882:	80c3      	strh	r3, [r0, #6]
 800d884:	e7f7      	b.n	800d876 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800d886 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800d886:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	dd06      	ble.n	800d89c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800d88e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d892:	2800      	cmp	r0, #0
 800d894:	bfcc      	ite	gt
 800d896:	2000      	movgt	r0, #0
 800d898:	2001      	movle	r0, #1
 800d89a:	4770      	bx	lr
 800d89c:	2001      	movs	r0, #1
 800d89e:	4770      	bx	lr

0800d8a0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800d8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	4604      	mov	r4, r0
 800d8a8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800d8aa:	8003      	strh	r3, [r0, #0]
 800d8ac:	8043      	strh	r3, [r0, #2]
 800d8ae:	8083      	strh	r3, [r0, #4]
 800d8b0:	80c3      	strh	r3, [r0, #6]
 800d8b2:	2d00      	cmp	r5, #0
 800d8b4:	d040      	beq.n	800d938 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800d8b6:	1d28      	adds	r0, r5, #4
 800d8b8:	f7ff ffe5 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d8bc:	b988      	cbnz	r0, 800d8e2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d8be:	4620      	mov	r0, r4
 800d8c0:	f7ff ffe1 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d8c4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800d8c8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d8cc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800d8d0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800d8d4:	b138      	cbz	r0, 800d8e6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800d8d6:	8022      	strh	r2, [r4, #0]
 800d8d8:	8063      	strh	r3, [r4, #2]
 800d8da:	f8a4 e004 	strh.w	lr, [r4, #4]
 800d8de:	f8a4 c006 	strh.w	ip, [r4, #6]
 800d8e2:	69ad      	ldr	r5, [r5, #24]
 800d8e4:	e7e5      	b.n	800d8b2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800d8e6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800d8ea:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800d8ee:	4290      	cmp	r0, r2
 800d8f0:	4607      	mov	r7, r0
 800d8f2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800d8f6:	460e      	mov	r6, r1
 800d8f8:	bfa8      	it	ge
 800d8fa:	4617      	movge	r7, r2
 800d8fc:	4299      	cmp	r1, r3
 800d8fe:	4472      	add	r2, lr
 800d900:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800d904:	bfa8      	it	ge
 800d906:	461e      	movge	r6, r3
 800d908:	4440      	add	r0, r8
 800d90a:	4471      	add	r1, lr
 800d90c:	4463      	add	r3, ip
 800d90e:	b200      	sxth	r0, r0
 800d910:	8027      	strh	r7, [r4, #0]
 800d912:	b212      	sxth	r2, r2
 800d914:	8066      	strh	r6, [r4, #2]
 800d916:	b209      	sxth	r1, r1
 800d918:	b21b      	sxth	r3, r3
 800d91a:	4290      	cmp	r0, r2
 800d91c:	bfac      	ite	ge
 800d91e:	ebc7 0200 	rsbge	r2, r7, r0
 800d922:	ebc7 0202 	rsblt	r2, r7, r2
 800d926:	4299      	cmp	r1, r3
 800d928:	bfac      	ite	ge
 800d92a:	ebc6 0301 	rsbge	r3, r6, r1
 800d92e:	ebc6 0303 	rsblt	r3, r6, r3
 800d932:	80a2      	strh	r2, [r4, #4]
 800d934:	80e3      	strh	r3, [r4, #6]
 800d936:	e7d4      	b.n	800d8e2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d938:	4620      	mov	r0, r4
 800d93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d93e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800d93e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d942:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800d946:	b383      	cbz	r3, 800d9aa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d948:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d94a:	b374      	cbz	r4, 800d9aa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d94c:	f9b1 5000 	ldrsh.w	r5, [r1]
 800d950:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800d954:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800d958:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800d95c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800d960:	b303      	cbz	r3, 800d9a4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d962:	4668      	mov	r0, sp
 800d964:	1d21      	adds	r1, r4, #4
 800d966:	f8ad 5000 	strh.w	r5, [sp]
 800d96a:	f8ad 6002 	strh.w	r6, [sp, #2]
 800d96e:	f8ad 7004 	strh.w	r7, [sp, #4]
 800d972:	f8ad 8006 	strh.w	r8, [sp, #6]
 800d976:	f7ff ff43 	bl	800d800 <_ZN8touchgfx4RectaNERKS0_>
 800d97a:	4668      	mov	r0, sp
 800d97c:	f7ff ff83 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d980:	b980      	cbnz	r0, 800d9a4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d982:	f8bd 3000 	ldrh.w	r3, [sp]
 800d986:	4669      	mov	r1, sp
 800d988:	88a2      	ldrh	r2, [r4, #4]
 800d98a:	4620      	mov	r0, r4
 800d98c:	1a9b      	subs	r3, r3, r2
 800d98e:	88e2      	ldrh	r2, [r4, #6]
 800d990:	f8ad 3000 	strh.w	r3, [sp]
 800d994:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d998:	1a9b      	subs	r3, r3, r2
 800d99a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d99e:	6823      	ldr	r3, [r4, #0]
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	4798      	blx	r3
 800d9a4:	69a4      	ldr	r4, [r4, #24]
 800d9a6:	2c00      	cmp	r4, #0
 800d9a8:	d1d8      	bne.n	800d95c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800d9aa:	b002      	add	sp, #8
 800d9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d9b0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800d9b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9b2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800d9b6:	460d      	mov	r5, r1
 800d9b8:	4616      	mov	r6, r2
 800d9ba:	b323      	cbz	r3, 800da06 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d9bc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d9be:	b314      	cbz	r4, 800da06 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d9c0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800d9c4:	b1eb      	cbz	r3, 800da02 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800d9c6:	6828      	ldr	r0, [r5, #0]
 800d9c8:	466b      	mov	r3, sp
 800d9ca:	6869      	ldr	r1, [r5, #4]
 800d9cc:	c303      	stmia	r3!, {r0, r1}
 800d9ce:	4668      	mov	r0, sp
 800d9d0:	1d21      	adds	r1, r4, #4
 800d9d2:	f7ff ff15 	bl	800d800 <_ZN8touchgfx4RectaNERKS0_>
 800d9d6:	4668      	mov	r0, sp
 800d9d8:	f7ff ff55 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d9dc:	b988      	cbnz	r0, 800da02 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800d9de:	f8bd 3000 	ldrh.w	r3, [sp]
 800d9e2:	4669      	mov	r1, sp
 800d9e4:	88a2      	ldrh	r2, [r4, #4]
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	1a9b      	subs	r3, r3, r2
 800d9ea:	88e2      	ldrh	r2, [r4, #6]
 800d9ec:	f8ad 3000 	strh.w	r3, [sp]
 800d9f0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d9f4:	1a9b      	subs	r3, r3, r2
 800d9f6:	4632      	mov	r2, r6
 800d9f8:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d9fc:	6823      	ldr	r3, [r4, #0]
 800d9fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800da00:	4798      	blx	r3
 800da02:	69a4      	ldr	r4, [r4, #24]
 800da04:	e7db      	b.n	800d9be <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800da06:	b002      	add	sp, #8
 800da08:	bd70      	pop	{r4, r5, r6, pc}

0800da0a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800da0a:	6803      	ldr	r3, [r0, #0]
 800da0c:	b513      	push	{r0, r1, r4, lr}
 800da0e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800da12:	2300      	movs	r3, #0
 800da14:	e9cd 3300 	strd	r3, r3, [sp]
 800da18:	466b      	mov	r3, sp
 800da1a:	47a0      	blx	r4
 800da1c:	b002      	add	sp, #8
 800da1e:	bd10      	pop	{r4, pc}

0800da20 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800da20:	2301      	movs	r3, #1
 800da22:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800da26:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800da2a:	4770      	bx	lr

0800da2c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800da2c:	2301      	movs	r3, #1
 800da2e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800da32:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800da36:	4770      	bx	lr

0800da38 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800da38:	6843      	ldr	r3, [r0, #4]
 800da3a:	2201      	movs	r2, #1
 800da3c:	725a      	strb	r2, [r3, #9]
 800da3e:	6840      	ldr	r0, [r0, #4]
 800da40:	6803      	ldr	r3, [r0, #0]
 800da42:	691b      	ldr	r3, [r3, #16]
 800da44:	4718      	bx	r3

0800da46 <_ZN8touchgfx3HAL8flushDMAEv>:
 800da46:	6840      	ldr	r0, [r0, #4]
 800da48:	6803      	ldr	r3, [r0, #0]
 800da4a:	689b      	ldr	r3, [r3, #8]
 800da4c:	4718      	bx	r3

0800da4e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800da4e:	b530      	push	{r4, r5, lr}
 800da50:	b08b      	sub	sp, #44	@ 0x2c
 800da52:	6804      	ldr	r4, [r0, #0]
 800da54:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800da58:	9509      	str	r5, [sp, #36]	@ 0x24
 800da5a:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800da5e:	9508      	str	r5, [sp, #32]
 800da60:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800da64:	9507      	str	r5, [sp, #28]
 800da66:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800da6a:	9506      	str	r5, [sp, #24]
 800da6c:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800da70:	9505      	str	r5, [sp, #20]
 800da72:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800da76:	9504      	str	r5, [sp, #16]
 800da78:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800da7c:	9503      	str	r5, [sp, #12]
 800da7e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800da82:	9502      	str	r5, [sp, #8]
 800da84:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800da88:	e9cd 3500 	strd	r3, r5, [sp]
 800da8c:	4613      	mov	r3, r2
 800da8e:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 800da90:	2200      	movs	r2, #0
 800da92:	47a0      	blx	r4
 800da94:	b00b      	add	sp, #44	@ 0x2c
 800da96:	bd30      	pop	{r4, r5, pc}

0800da98 <_ZN8touchgfx3HAL10beginFrameEv>:
 800da98:	4b04      	ldr	r3, [pc, #16]	@ (800daac <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	b123      	cbz	r3, 800daa8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800da9e:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800daa2:	f080 0001 	eor.w	r0, r0, #1
 800daa6:	4770      	bx	lr
 800daa8:	2001      	movs	r0, #1
 800daaa:	4770      	bx	lr
 800daac:	2402513e 	.word	0x2402513e

0800dab0 <_ZN8touchgfx3HAL8endFrameEv>:
 800dab0:	b510      	push	{r4, lr}
 800dab2:	4604      	mov	r4, r0
 800dab4:	6840      	ldr	r0, [r0, #4]
 800dab6:	6803      	ldr	r3, [r0, #0]
 800dab8:	689b      	ldr	r3, [r3, #8]
 800daba:	4798      	blx	r3
 800dabc:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800dac0:	b113      	cbz	r3, 800dac8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800dac2:	2301      	movs	r3, #1
 800dac4:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800dac8:	bd10      	pop	{r4, pc}

0800daca <_ZN8touchgfx3HAL10initializeEv>:
 800daca:	b510      	push	{r4, lr}
 800dacc:	4604      	mov	r4, r0
 800dace:	f7f4 ff51 	bl	8002974 <_ZN8touchgfx10OSWrappers10initializeEv>
 800dad2:	f7f3 ffa7 	bl	8001a24 <_ZN8touchgfx4GPIO4initEv>
 800dad6:	6860      	ldr	r0, [r4, #4]
 800dad8:	6803      	ldr	r3, [r0, #0]
 800dada:	68db      	ldr	r3, [r3, #12]
 800dadc:	4798      	blx	r3
 800dade:	68e0      	ldr	r0, [r4, #12]
 800dae0:	6803      	ldr	r3, [r0, #0]
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	4798      	blx	r3
 800dae6:	6823      	ldr	r3, [r4, #0]
 800dae8:	4620      	mov	r0, r4
 800daea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800daec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daf0:	4718      	bx	r3
	...

0800daf4 <_ZN8touchgfx3HAL4tickEv>:
 800daf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800daf6:	6803      	ldr	r3, [r0, #0]
 800daf8:	4604      	mov	r4, r0
 800dafa:	4d5b      	ldr	r5, [pc, #364]	@ (800dc68 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800dafc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800db00:	4798      	blx	r3
 800db02:	2800      	cmp	r0, #0
 800db04:	f000 8095 	beq.w	800dc32 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800db08:	2001      	movs	r0, #1
 800db0a:	2600      	movs	r6, #0
 800db0c:	f7f3 fef0 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800db10:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800db14:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800db18:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800db1c:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800db20:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800db24:	b133      	cbz	r3, 800db34 <_ZN8touchgfx3HAL4tickEv+0x40>
 800db26:	6823      	ldr	r3, [r4, #0]
 800db28:	4620      	mov	r0, r4
 800db2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800db2e:	4798      	blx	r3
 800db30:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800db34:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800db38:	2601      	movs	r6, #1
 800db3a:	6862      	ldr	r2, [r4, #4]
 800db3c:	f083 0301 	eor.w	r3, r3, #1
 800db40:	702e      	strb	r6, [r5, #0]
 800db42:	7253      	strb	r3, [r2, #9]
 800db44:	f004 ff42 	bl	80129cc <_ZN8touchgfx11Application11getInstanceEv>
 800db48:	6803      	ldr	r3, [r0, #0]
 800db4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db4c:	4798      	blx	r3
 800db4e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800db52:	b90b      	cbnz	r3, 800db58 <_ZN8touchgfx3HAL4tickEv+0x64>
 800db54:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800db58:	f004 ff38 	bl	80129cc <_ZN8touchgfx11Application11getInstanceEv>
 800db5c:	6803      	ldr	r3, [r0, #0]
 800db5e:	695b      	ldr	r3, [r3, #20]
 800db60:	4798      	blx	r3
 800db62:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800db64:	6803      	ldr	r3, [r0, #0]
 800db66:	691b      	ldr	r3, [r3, #16]
 800db68:	4798      	blx	r3
 800db6a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800db6e:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800db72:	3b01      	subs	r3, #1
 800db74:	b2db      	uxtb	r3, r3
 800db76:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800db7a:	b10a      	cbz	r2, 800db80 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d1eb      	bne.n	800db58 <_ZN8touchgfx3HAL4tickEv+0x64>
 800db80:	4a3a      	ldr	r2, [pc, #232]	@ (800dc6c <_ZN8touchgfx3HAL4tickEv+0x178>)
 800db82:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800db86:	7813      	ldrb	r3, [r2, #0]
 800db88:	3301      	adds	r3, #1
 800db8a:	b25b      	sxtb	r3, r3
 800db8c:	4299      	cmp	r1, r3
 800db8e:	7013      	strb	r3, [r2, #0]
 800db90:	dc10      	bgt.n	800dbb4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800db92:	2300      	movs	r3, #0
 800db94:	68e0      	ldr	r0, [r4, #12]
 800db96:	a902      	add	r1, sp, #8
 800db98:	7013      	strb	r3, [r2, #0]
 800db9a:	aa03      	add	r2, sp, #12
 800db9c:	6803      	ldr	r3, [r0, #0]
 800db9e:	68db      	ldr	r3, [r3, #12]
 800dba0:	4798      	blx	r3
 800dba2:	6823      	ldr	r3, [r4, #0]
 800dba4:	2800      	cmp	r0, #0
 800dba6:	d050      	beq.n	800dc4a <_ZN8touchgfx3HAL4tickEv+0x156>
 800dba8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800dbac:	4620      	mov	r0, r4
 800dbae:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800dbb2:	4798      	blx	r3
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	6960      	ldr	r0, [r4, #20]
 800dbb8:	f88d 3007 	strb.w	r3, [sp, #7]
 800dbbc:	b158      	cbz	r0, 800dbd6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800dbbe:	6803      	ldr	r3, [r0, #0]
 800dbc0:	f10d 0107 	add.w	r1, sp, #7
 800dbc4:	68db      	ldr	r3, [r3, #12]
 800dbc6:	4798      	blx	r3
 800dbc8:	b128      	cbz	r0, 800dbd6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800dbca:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800dbcc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800dbd0:	6803      	ldr	r3, [r0, #0]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	4798      	blx	r3
 800dbd6:	f104 001c 	add.w	r0, r4, #28
 800dbda:	f011 f975 	bl	801eec8 <_ZN8touchgfx8Gestures4tickEv>
 800dbde:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800dbe2:	b30b      	cbz	r3, 800dc28 <_ZN8touchgfx3HAL4tickEv+0x134>
 800dbe4:	6920      	ldr	r0, [r4, #16]
 800dbe6:	6803      	ldr	r3, [r0, #0]
 800dbe8:	691b      	ldr	r3, [r3, #16]
 800dbea:	4798      	blx	r3
 800dbec:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800dbee:	4606      	mov	r6, r0
 800dbf0:	b903      	cbnz	r3, 800dbf4 <_ZN8touchgfx3HAL4tickEv+0x100>
 800dbf2:	6760      	str	r0, [r4, #116]	@ 0x74
 800dbf4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800dbf6:	4a1e      	ldr	r2, [pc, #120]	@ (800dc70 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800dbf8:	1af3      	subs	r3, r6, r3
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d914      	bls.n	800dc28 <_ZN8touchgfx3HAL4tickEv+0x134>
 800dbfe:	6920      	ldr	r0, [r4, #16]
 800dc00:	6803      	ldr	r3, [r0, #0]
 800dc02:	699b      	ldr	r3, [r3, #24]
 800dc04:	4798      	blx	r3
 800dc06:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800dc08:	2264      	movs	r2, #100	@ 0x64
 800dc0a:	1af3      	subs	r3, r6, r3
 800dc0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc10:	fbb0 f0f3 	udiv	r0, r0, r3
 800dc14:	2800      	cmp	r0, #0
 800dc16:	dc1d      	bgt.n	800dc54 <_ZN8touchgfx3HAL4tickEv+0x160>
 800dc18:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800dc1c:	6920      	ldr	r0, [r4, #16]
 800dc1e:	2100      	movs	r1, #0
 800dc20:	6803      	ldr	r3, [r0, #0]
 800dc22:	69db      	ldr	r3, [r3, #28]
 800dc24:	4798      	blx	r3
 800dc26:	6766      	str	r6, [r4, #116]	@ 0x74
 800dc28:	f004 fed0 	bl	80129cc <_ZN8touchgfx11Application11getInstanceEv>
 800dc2c:	6803      	ldr	r3, [r0, #0]
 800dc2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc30:	4798      	blx	r3
 800dc32:	6823      	ldr	r3, [r4, #0]
 800dc34:	4620      	mov	r0, r4
 800dc36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dc3a:	4798      	blx	r3
 800dc3c:	2001      	movs	r0, #1
 800dc3e:	f7f3 fe87 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800dc42:	2300      	movs	r3, #0
 800dc44:	702b      	strb	r3, [r5, #0]
 800dc46:	b004      	add	sp, #16
 800dc48:	bd70      	pop	{r4, r5, r6, pc}
 800dc4a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dc4e:	4620      	mov	r0, r4
 800dc50:	4798      	blx	r3
 800dc52:	e7af      	b.n	800dbb4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800dc54:	2863      	cmp	r0, #99	@ 0x63
 800dc56:	bfcb      	itete	gt
 800dc58:	2300      	movgt	r3, #0
 800dc5a:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800dc5e:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800dc62:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800dc66:	e7d9      	b.n	800dc1c <_ZN8touchgfx3HAL4tickEv+0x128>
 800dc68:	24025144 	.word	0x24025144
 800dc6c:	24025145 	.word	0x24025145
 800dc70:	05f5e100 	.word	0x05f5e100

0800dc74 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800dc74:	b510      	push	{r4, lr}
 800dc76:	4604      	mov	r4, r0
 800dc78:	f7f4 feac 	bl	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	6863      	ldr	r3, [r4, #4]
 800dc80:	729a      	strb	r2, [r3, #10]
 800dc82:	bd10      	pop	{r4, pc}

0800dc84 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800dc84:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800dc86:	301c      	adds	r0, #28
 800dc88:	f011 b91c 	b.w	801eec4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800dc8c <_ZN8touchgfx3HAL5touchEll>:
 800dc8c:	b530      	push	{r4, r5, lr}
 800dc8e:	b087      	sub	sp, #28
 800dc90:	4604      	mov	r4, r0
 800dc92:	a804      	add	r0, sp, #16
 800dc94:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800dc98:	f004 fc80 	bl	801259c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800dc9c:	9b04      	ldr	r3, [sp, #16]
 800dc9e:	a906      	add	r1, sp, #24
 800dca0:	a803      	add	r0, sp, #12
 800dca2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dca6:	9b05      	ldr	r3, [sp, #20]
 800dca8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800dcac:	f004 fcc8 	bl	8012640 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800dcb0:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800dcb4:	f104 001c 	add.w	r0, r4, #28
 800dcb8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800dcbc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800dcc0:	b189      	cbz	r1, 800dce6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800dcc2:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	4613      	mov	r3, r2
 800dcca:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800dcce:	462a      	mov	r2, r5
 800dcd0:	f011 f908 	bl	801eee4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800dcd4:	b128      	cbz	r0, 800dce2 <_ZN8touchgfx3HAL5touchEll+0x56>
 800dcd6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800dcda:	6623      	str	r3, [r4, #96]	@ 0x60
 800dcdc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800dce0:	6663      	str	r3, [r4, #100]	@ 0x64
 800dce2:	b007      	add	sp, #28
 800dce4:	bd30      	pop	{r4, r5, pc}
 800dce6:	f011 f93d 	bl	801ef64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800dcea:	2301      	movs	r3, #1
 800dcec:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800dcf0:	e7f1      	b.n	800dcd6 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800dcf2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800dcf2:	b510      	push	{r4, lr}
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d046      	beq.n	800dd86 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800dcf8:	ea81 0002 	eor.w	r0, r1, r2
 800dcfc:	07c4      	lsls	r4, r0, #31
 800dcfe:	d508      	bpl.n	800dd12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800dd00:	440b      	add	r3, r1
 800dd02:	3a01      	subs	r2, #1
 800dd04:	428b      	cmp	r3, r1
 800dd06:	d93e      	bls.n	800dd86 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800dd08:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800dd0c:	f801 0b01 	strb.w	r0, [r1], #1
 800dd10:	e7f8      	b.n	800dd04 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800dd12:	07d0      	lsls	r0, r2, #31
 800dd14:	bf42      	ittt	mi
 800dd16:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800dd1a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800dd1e:	f801 0b01 	strbmi.w	r0, [r1], #1
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d911      	bls.n	800dd4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800dd26:	ea81 0402 	eor.w	r4, r1, r2
 800dd2a:	4610      	mov	r0, r2
 800dd2c:	07a4      	lsls	r4, r4, #30
 800dd2e:	d022      	beq.n	800dd76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800dd30:	f023 0401 	bic.w	r4, r3, #1
 800dd34:	440c      	add	r4, r1
 800dd36:	428c      	cmp	r4, r1
 800dd38:	4602      	mov	r2, r0
 800dd3a:	d904      	bls.n	800dd46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800dd3c:	8812      	ldrh	r2, [r2, #0]
 800dd3e:	3002      	adds	r0, #2
 800dd40:	f821 2b02 	strh.w	r2, [r1], #2
 800dd44:	e7f7      	b.n	800dd36 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800dd46:	f003 0301 	and.w	r3, r3, #1
 800dd4a:	f023 0003 	bic.w	r0, r3, #3
 800dd4e:	4408      	add	r0, r1
 800dd50:	4288      	cmp	r0, r1
 800dd52:	4614      	mov	r4, r2
 800dd54:	d904      	bls.n	800dd60 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800dd56:	6824      	ldr	r4, [r4, #0]
 800dd58:	3204      	adds	r2, #4
 800dd5a:	f841 4b04 	str.w	r4, [r1], #4
 800dd5e:	e7f7      	b.n	800dd50 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800dd60:	f003 0303 	and.w	r3, r3, #3
 800dd64:	3a01      	subs	r2, #1
 800dd66:	440b      	add	r3, r1
 800dd68:	428b      	cmp	r3, r1
 800dd6a:	d90c      	bls.n	800dd86 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800dd6c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800dd70:	f801 0b01 	strb.w	r0, [r1], #1
 800dd74:	e7f8      	b.n	800dd68 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800dd76:	0790      	lsls	r0, r2, #30
 800dd78:	d0e7      	beq.n	800dd4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800dd7a:	f832 0b02 	ldrh.w	r0, [r2], #2
 800dd7e:	3b02      	subs	r3, #2
 800dd80:	f821 0b02 	strh.w	r0, [r1], #2
 800dd84:	e7e1      	b.n	800dd4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800dd86:	2001      	movs	r0, #1
 800dd88:	bd10      	pop	{r4, pc}

0800dd8a <_ZN8touchgfx3HAL7noTouchEv>:
 800dd8a:	b510      	push	{r4, lr}
 800dd8c:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800dd90:	4604      	mov	r4, r0
 800dd92:	b153      	cbz	r3, 800ddaa <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800dd94:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800dd98:	2101      	movs	r1, #1
 800dd9a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800dd9e:	301c      	adds	r0, #28
 800dda0:	f011 f8e0 	bl	801ef64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800dda4:	2300      	movs	r3, #0
 800dda6:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800ddaa:	bd10      	pop	{r4, pc}

0800ddac <_ZN8touchgfx8Drawable5setXYEss>:
 800ddac:	b570      	push	{r4, r5, r6, lr}
 800ddae:	6803      	ldr	r3, [r0, #0]
 800ddb0:	4604      	mov	r4, r0
 800ddb2:	4615      	mov	r5, r2
 800ddb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddb6:	4798      	blx	r3
 800ddb8:	6823      	ldr	r3, [r4, #0]
 800ddba:	4629      	mov	r1, r5
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ddc4:	4718      	bx	r3
	...

0800ddc8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800ddc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddcc:	b085      	sub	sp, #20
 800ddce:	4604      	mov	r4, r0
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	4699      	mov	r9, r3
 800ddd4:	ad04      	add	r5, sp, #16
 800ddd6:	460f      	mov	r7, r1
 800ddd8:	4690      	mov	r8, r2
 800ddda:	f845 0d04 	str.w	r0, [r5, #-4]!
 800ddde:	69a0      	ldr	r0, [r4, #24]
 800dde0:	6806      	ldr	r6, [r0, #0]
 800dde2:	9501      	str	r5, [sp, #4]
 800dde4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800dde8:	9500      	str	r5, [sp, #0]
 800ddea:	6835      	ldr	r5, [r6, #0]
 800ddec:	47a8      	blx	r5
 800ddee:	4d10      	ldr	r5, [pc, #64]	@ (800de30 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800ddf0:	4606      	mov	r6, r0
 800ddf2:	f8a5 9000 	strh.w	r9, [r5]
 800ddf6:	f7f5 fe95 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800ddfa:	6803      	ldr	r3, [r0, #0]
 800ddfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddfe:	4798      	blx	r3
 800de00:	b128      	cbz	r0, 800de0e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800de02:	2801      	cmp	r0, #1
 800de04:	d00b      	beq.n	800de1e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800de06:	4630      	mov	r0, r6
 800de08:	b005      	add	sp, #20
 800de0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de0e:	882b      	ldrh	r3, [r5, #0]
 800de10:	fb08 7203 	mla	r2, r8, r3, r7
 800de14:	9b03      	ldr	r3, [sp, #12]
 800de16:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800de1a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800de1c:	e7f3      	b.n	800de06 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800de1e:	882a      	ldrh	r2, [r5, #0]
 800de20:	9b03      	ldr	r3, [sp, #12]
 800de22:	fb08 7202 	mla	r2, r8, r2, r7
 800de26:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800de2a:	1a9a      	subs	r2, r3, r2
 800de2c:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800de2e:	e7ea      	b.n	800de06 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800de30:	2402513a 	.word	0x2402513a

0800de34 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800de34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de36:	b08b      	sub	sp, #44	@ 0x2c
 800de38:	4617      	mov	r7, r2
 800de3a:	4604      	mov	r4, r0
 800de3c:	460e      	mov	r6, r1
 800de3e:	461d      	mov	r5, r3
 800de40:	f7f5 fe70 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800de44:	6803      	ldr	r3, [r0, #0]
 800de46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de48:	4798      	blx	r3
 800de4a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800de4e:	9007      	str	r0, [sp, #28]
 800de50:	4631      	mov	r1, r6
 800de52:	6822      	ldr	r2, [r4, #0]
 800de54:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800de58:	4b0c      	ldr	r3, [pc, #48]	@ (800de8c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800de5a:	4620      	mov	r0, r4
 800de5c:	881b      	ldrh	r3, [r3, #0]
 800de5e:	9306      	str	r3, [sp, #24]
 800de60:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800de64:	9305      	str	r3, [sp, #20]
 800de66:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800de6a:	9304      	str	r3, [sp, #16]
 800de6c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800de70:	9303      	str	r3, [sp, #12]
 800de72:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800de76:	9302      	str	r3, [sp, #8]
 800de78:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800de7c:	e9cd 5300 	strd	r5, r3, [sp]
 800de80:	463b      	mov	r3, r7
 800de82:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 800de84:	2200      	movs	r2, #0
 800de86:	47a8      	blx	r5
 800de88:	b00b      	add	sp, #44	@ 0x2c
 800de8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de8c:	2402513a 	.word	0x2402513a

0800de90 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800de90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de94:	4698      	mov	r8, r3
 800de96:	6803      	ldr	r3, [r0, #0]
 800de98:	b08b      	sub	sp, #44	@ 0x2c
 800de9a:	4617      	mov	r7, r2
 800de9c:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 800de9e:	460e      	mov	r6, r1
 800dea0:	4b13      	ldr	r3, [pc, #76]	@ (800def0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800dea2:	4604      	mov	r4, r0
 800dea4:	f8b3 9000 	ldrh.w	r9, [r3]
 800dea8:	f7f5 fe3c 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800deac:	6803      	ldr	r3, [r0, #0]
 800deae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deb0:	4798      	blx	r3
 800deb2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800deb6:	2200      	movs	r2, #0
 800deb8:	4631      	mov	r1, r6
 800deba:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800debe:	2302      	movs	r3, #2
 800dec0:	4620      	mov	r0, r4
 800dec2:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800dec6:	2301      	movs	r3, #1
 800dec8:	9305      	str	r3, [sp, #20]
 800deca:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800dece:	9304      	str	r3, [sp, #16]
 800ded0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800ded4:	9303      	str	r3, [sp, #12]
 800ded6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800deda:	9302      	str	r3, [sp, #8]
 800dedc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800dee0:	e9cd 8300 	strd	r8, r3, [sp]
 800dee4:	463b      	mov	r3, r7
 800dee6:	47a8      	blx	r5
 800dee8:	b00b      	add	sp, #44	@ 0x2c
 800deea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800deee:	bf00      	nop
 800def0:	2402513a 	.word	0x2402513a

0800def4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800def4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800def8:	4698      	mov	r8, r3
 800defa:	6803      	ldr	r3, [r0, #0]
 800defc:	b087      	sub	sp, #28
 800defe:	460e      	mov	r6, r1
 800df00:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 800df02:	4617      	mov	r7, r2
 800df04:	4b0f      	ldr	r3, [pc, #60]	@ (800df44 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800df06:	4604      	mov	r4, r0
 800df08:	f8b3 9000 	ldrh.w	r9, [r3]
 800df0c:	f7f5 fe0a 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800df10:	6803      	ldr	r3, [r0, #0]
 800df12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df14:	4798      	blx	r3
 800df16:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800df1a:	463a      	mov	r2, r7
 800df1c:	4631      	mov	r1, r6
 800df1e:	f8cd 900c 	str.w	r9, [sp, #12]
 800df22:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800df26:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800df2a:	4620      	mov	r0, r4
 800df2c:	9302      	str	r3, [sp, #8]
 800df2e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800df32:	9301      	str	r3, [sp, #4]
 800df34:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800df38:	9300      	str	r3, [sp, #0]
 800df3a:	4643      	mov	r3, r8
 800df3c:	47a8      	blx	r5
 800df3e:	b007      	add	sp, #28
 800df40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df44:	2402513a 	.word	0x2402513a

0800df48 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800df48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df4c:	4604      	mov	r4, r0
 800df4e:	b08f      	sub	sp, #60	@ 0x3c
 800df50:	4610      	mov	r0, r2
 800df52:	460d      	mov	r5, r1
 800df54:	4691      	mov	r9, r2
 800df56:	461e      	mov	r6, r3
 800df58:	f007 fc94 	bl	8015884 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800df5c:	2800      	cmp	r0, #0
 800df5e:	f000 809d 	beq.w	800e09c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800df62:	6823      	ldr	r3, [r4, #0]
 800df64:	4620      	mov	r0, r4
 800df66:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800e100 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800df6a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800df6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df70:	4798      	blx	r3
 800df72:	6823      	ldr	r3, [r4, #0]
 800df74:	4620      	mov	r0, r4
 800df76:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800e104 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800df7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df7c:	4798      	blx	r3
 800df7e:	f8bb 3000 	ldrh.w	r3, [fp]
 800df82:	4f5c      	ldr	r7, [pc, #368]	@ (800e0f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800df84:	9301      	str	r3, [sp, #4]
 800df86:	f8ba 3000 	ldrh.w	r3, [sl]
 800df8a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800df8e:	4640      	mov	r0, r8
 800df90:	9302      	str	r3, [sp, #8]
 800df92:	883b      	ldrh	r3, [r7, #0]
 800df94:	9303      	str	r3, [sp, #12]
 800df96:	4b58      	ldr	r3, [pc, #352]	@ (800e0f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800df98:	881a      	ldrh	r2, [r3, #0]
 800df9a:	9305      	str	r3, [sp, #20]
 800df9c:	9204      	str	r2, [sp, #16]
 800df9e:	f007 fdc1 	bl	8015b24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800dfa2:	8038      	strh	r0, [r7, #0]
 800dfa4:	4640      	mov	r0, r8
 800dfa6:	f007 fdf1 	bl	8015b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800dfaa:	9b05      	ldr	r3, [sp, #20]
 800dfac:	b280      	uxth	r0, r0
 800dfae:	8018      	strh	r0, [r3, #0]
 800dfb0:	4b52      	ldr	r3, [pc, #328]	@ (800e0fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d174      	bne.n	800e0a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800dfb8:	883b      	ldrh	r3, [r7, #0]
 800dfba:	f8aa 0000 	strh.w	r0, [sl]
 800dfbe:	f8ab 3000 	strh.w	r3, [fp]
 800dfc2:	4648      	mov	r0, r9
 800dfc4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800dfc8:	f007 fc5c 	bl	8015884 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800dfcc:	2200      	movs	r2, #0
 800dfce:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800dfd2:	4611      	mov	r1, r2
 800dfd4:	4628      	mov	r0, r5
 800dfd6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800dfda:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800dfde:	f7ff fee5 	bl	800ddac <_ZN8touchgfx8Drawable5setXYEss>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800dfe8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800dfec:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	dd5c      	ble.n	800e0ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800dff4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	dd58      	ble.n	800e0ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800dffc:	462a      	mov	r2, r5
 800dffe:	ab0a      	add	r3, sp, #40	@ 0x28
 800e000:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e004:	6851      	ldr	r1, [r2, #4]
 800e006:	c303      	stmia	r3!, {r0, r1}
 800e008:	4631      	mov	r1, r6
 800e00a:	a80a      	add	r0, sp, #40	@ 0x28
 800e00c:	f7ff fbf8 	bl	800d800 <_ZN8touchgfx4RectaNERKS0_>
 800e010:	4b38      	ldr	r3, [pc, #224]	@ (800e0f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e012:	2100      	movs	r1, #0
 800e014:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e018:	4b37      	ldr	r3, [pc, #220]	@ (800e0f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e01a:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800e01e:	aa0a      	add	r2, sp, #40	@ 0x28
 800e020:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e024:	910c      	str	r1, [sp, #48]	@ 0x30
 800e026:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800e02a:	ab08      	add	r3, sp, #32
 800e02c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e030:	e883 0003 	stmia.w	r3, {r0, r1}
 800e034:	4618      	mov	r0, r3
 800e036:	a90c      	add	r1, sp, #48	@ 0x30
 800e038:	f7ff fbe2 	bl	800d800 <_ZN8touchgfx4RectaNERKS0_>
 800e03c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d13c      	bne.n	800e0bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800e042:	2000      	movs	r0, #0
 800e044:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800e048:	2600      	movs	r6, #0
 800e04a:	696b      	ldr	r3, [r5, #20]
 800e04c:	a908      	add	r1, sp, #32
 800e04e:	682a      	ldr	r2, [r5, #0]
 800e050:	4628      	mov	r0, r5
 800e052:	9305      	str	r3, [sp, #20]
 800e054:	616e      	str	r6, [r5, #20]
 800e056:	6892      	ldr	r2, [r2, #8]
 800e058:	4790      	blx	r2
 800e05a:	9b05      	ldr	r3, [sp, #20]
 800e05c:	4652      	mov	r2, sl
 800e05e:	4649      	mov	r1, r9
 800e060:	616b      	str	r3, [r5, #20]
 800e062:	4628      	mov	r0, r5
 800e064:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800e068:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800e06c:	f7ff fe9e 	bl	800ddac <_ZN8touchgfx8Drawable5setXYEss>
 800e070:	9a01      	ldr	r2, [sp, #4]
 800e072:	4b23      	ldr	r3, [pc, #140]	@ (800e100 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800e074:	4620      	mov	r0, r4
 800e076:	801a      	strh	r2, [r3, #0]
 800e078:	9a02      	ldr	r2, [sp, #8]
 800e07a:	4b22      	ldr	r3, [pc, #136]	@ (800e104 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800e07c:	801a      	strh	r2, [r3, #0]
 800e07e:	9a03      	ldr	r2, [sp, #12]
 800e080:	4b1c      	ldr	r3, [pc, #112]	@ (800e0f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e082:	801a      	strh	r2, [r3, #0]
 800e084:	4b1c      	ldr	r3, [pc, #112]	@ (800e0f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e086:	9a04      	ldr	r2, [sp, #16]
 800e088:	801a      	strh	r2, [r3, #0]
 800e08a:	6823      	ldr	r3, [r4, #0]
 800e08c:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800e090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e092:	4798      	blx	r3
 800e094:	6823      	ldr	r3, [r4, #0]
 800e096:	4620      	mov	r0, r4
 800e098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e09a:	4798      	blx	r3
 800e09c:	b00f      	add	sp, #60	@ 0x3c
 800e09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a2:	883b      	ldrh	r3, [r7, #0]
 800e0a4:	f8ab 0000 	strh.w	r0, [fp]
 800e0a8:	f8aa 3000 	strh.w	r3, [sl]
 800e0ac:	e789      	b.n	800dfc2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800e0ae:	462a      	mov	r2, r5
 800e0b0:	ab0a      	add	r3, sp, #40	@ 0x28
 800e0b2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e0b6:	6851      	ldr	r1, [r2, #4]
 800e0b8:	c303      	stmia	r3!, {r0, r1}
 800e0ba:	e7a9      	b.n	800e010 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800e0bc:	a807      	add	r0, sp, #28
 800e0be:	f007 fe6f 	bl	8015da0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e0c2:	4606      	mov	r6, r0
 800e0c4:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800e0c6:	6803      	ldr	r3, [r0, #0]
 800e0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ca:	4798      	blx	r3
 800e0cc:	4286      	cmp	r6, r0
 800e0ce:	d1b8      	bne.n	800e042 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800e0d0:	f7f5 fd28 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800e0d4:	6803      	ldr	r3, [r0, #0]
 800e0d6:	4606      	mov	r6, r0
 800e0d8:	a807      	add	r0, sp, #28
 800e0da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e0dc:	9305      	str	r3, [sp, #20]
 800e0de:	f007 fe5f 	bl	8015da0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e0e2:	9b05      	ldr	r3, [sp, #20]
 800e0e4:	4601      	mov	r1, r0
 800e0e6:	4630      	mov	r0, r6
 800e0e8:	4798      	blx	r3
 800e0ea:	f080 0001 	eor.w	r0, r0, #1
 800e0ee:	b2c0      	uxtb	r0, r0
 800e0f0:	e7a8      	b.n	800e044 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800e0f2:	bf00      	nop
 800e0f4:	24025134 	.word	0x24025134
 800e0f8:	24025136 	.word	0x24025136
 800e0fc:	24025138 	.word	0x24025138
 800e100:	2402513a 	.word	0x2402513a
 800e104:	2402513c 	.word	0x2402513c

0800e108 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800e108:	4b07      	ldr	r3, [pc, #28]	@ (800e128 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800e10a:	b510      	push	{r4, lr}
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	4604      	mov	r4, r0
 800e110:	b13b      	cbz	r3, 800e122 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e112:	6803      	ldr	r3, [r0, #0]
 800e114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e116:	4798      	blx	r3
 800e118:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e11a:	4283      	cmp	r3, r0
 800e11c:	d101      	bne.n	800e122 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e11e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800e120:	bd10      	pop	{r4, pc}
 800e122:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800e124:	e7fc      	b.n	800e120 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800e126:	bf00      	nop
 800e128:	2402513e 	.word	0x2402513e

0800e12c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800e12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e130:	461d      	mov	r5, r3
 800e132:	b08a      	sub	sp, #40	@ 0x28
 800e134:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e138:	4690      	mov	r8, r2
 800e13a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800e13e:	2400      	movs	r4, #0
 800e140:	4607      	mov	r7, r0
 800e142:	fb06 8505 	mla	r5, r6, r5, r8
 800e146:	9404      	str	r4, [sp, #16]
 800e148:	f88d 4020 	strb.w	r4, [sp, #32]
 800e14c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e150:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e154:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e158:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e15c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e160:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e164:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e168:	f7ff ffce 	bl	800e108 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e16c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e176:	a901      	add	r1, sp, #4
 800e178:	9505      	str	r5, [sp, #20]
 800e17a:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e17e:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800e182:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800e186:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800e18a:	6803      	ldr	r3, [r0, #0]
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	4798      	blx	r3
 800e190:	b00a      	add	sp, #40	@ 0x28
 800e192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e196 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800e196:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e19a:	b08b      	sub	sp, #44	@ 0x2c
 800e19c:	2400      	movs	r4, #0
 800e19e:	4691      	mov	r9, r2
 800e1a0:	461d      	mov	r5, r3
 800e1a2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800e1a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e1aa:	4688      	mov	r8, r1
 800e1ac:	4607      	mov	r7, r0
 800e1ae:	9404      	str	r4, [sp, #16]
 800e1b0:	fb06 9505 	mla	r5, r6, r5, r9
 800e1b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1b8:	f7ff ffa6 	bl	800e108 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e1bc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e1c0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e1ca:	a901      	add	r1, sp, #4
 800e1cc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e1d0:	9505      	str	r5, [sp, #20]
 800e1d2:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e1d6:	f8ad 401c 	strh.w	r4, [sp, #28]
 800e1da:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e1de:	f8cd 8010 	str.w	r8, [sp, #16]
 800e1e2:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e1e6:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e1ea:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800e1ee:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800e1f2:	6803      	ldr	r3, [r0, #0]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	4798      	blx	r3
 800e1f8:	b00b      	add	sp, #44	@ 0x2c
 800e1fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800e200 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800e200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e204:	b08a      	sub	sp, #40	@ 0x28
 800e206:	4698      	mov	r8, r3
 800e208:	2300      	movs	r3, #0
 800e20a:	4606      	mov	r6, r0
 800e20c:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800e210:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800e214:	2d0b      	cmp	r5, #11
 800e216:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800e21a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800e21e:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800e222:	9304      	str	r3, [sp, #16]
 800e224:	d137      	bne.n	800e296 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800e226:	2380      	movs	r3, #128	@ 0x80
 800e228:	f88d 0020 	strb.w	r0, [sp, #32]
 800e22c:	4630      	mov	r0, r6
 800e22e:	9203      	str	r2, [sp, #12]
 800e230:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e234:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e238:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e23c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e240:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e244:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e248:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e24c:	f7ff ff5c 	bl	800e108 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e250:	2c0b      	cmp	r4, #11
 800e252:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800e256:	f8ad 701e 	strh.w	r7, [sp, #30]
 800e25a:	bf94      	ite	ls
 800e25c:	4b19      	ldrls	r3, [pc, #100]	@ (800e2c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800e25e:	2100      	movhi	r1, #0
 800e260:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800e264:	bf98      	it	ls
 800e266:	5d19      	ldrbls	r1, [r3, r4]
 800e268:	fb02 8307 	mla	r3, r2, r7, r8
 800e26c:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e270:	10c9      	asrs	r1, r1, #3
 800e272:	fb01 0003 	mla	r0, r1, r3, r0
 800e276:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800e27a:	a901      	add	r1, sp, #4
 800e27c:	9005      	str	r0, [sp, #20]
 800e27e:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800e282:	2300      	movs	r3, #0
 800e284:	6870      	ldr	r0, [r6, #4]
 800e286:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e28a:	6803      	ldr	r3, [r0, #0]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	4798      	blx	r3
 800e290:	b00a      	add	sp, #40	@ 0x28
 800e292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e296:	2d02      	cmp	r5, #2
 800e298:	d109      	bne.n	800e2ae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800e29a:	28ff      	cmp	r0, #255	@ 0xff
 800e29c:	d105      	bne.n	800e2aa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800e29e:	f1bc 0f00 	cmp.w	ip, #0
 800e2a2:	bf14      	ite	ne
 800e2a4:	2340      	movne	r3, #64	@ 0x40
 800e2a6:	2320      	moveq	r3, #32
 800e2a8:	e7be      	b.n	800e228 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e2aa:	2340      	movs	r3, #64	@ 0x40
 800e2ac:	e7bc      	b.n	800e228 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e2ae:	28ff      	cmp	r0, #255	@ 0xff
 800e2b0:	d105      	bne.n	800e2be <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800e2b2:	f1bc 0f00 	cmp.w	ip, #0
 800e2b6:	bf14      	ite	ne
 800e2b8:	2304      	movne	r3, #4
 800e2ba:	2301      	moveq	r3, #1
 800e2bc:	e7b4      	b.n	800e228 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e2be:	2304      	movs	r3, #4
 800e2c0:	e7b2      	b.n	800e228 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e2c2:	bf00      	nop
 800e2c4:	08023c3c 	.word	0x08023c3c

0800e2c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2cc:	b08b      	sub	sp, #44	@ 0x2c
 800e2ce:	461d      	mov	r5, r3
 800e2d0:	2400      	movs	r4, #0
 800e2d2:	4688      	mov	r8, r1
 800e2d4:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800e2d8:	4693      	mov	fp, r2
 800e2da:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800e2de:	4607      	mov	r7, r0
 800e2e0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800e2e4:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800e2e8:	9404      	str	r4, [sp, #16]
 800e2ea:	bf14      	ite	ne
 800e2ec:	2308      	movne	r3, #8
 800e2ee:	2302      	moveq	r3, #2
 800e2f0:	fb05 b50a 	mla	r5, r5, sl, fp
 800e2f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2f8:	f7ff ff06 	bl	800e108 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e2fc:	2e0b      	cmp	r6, #11
 800e2fe:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800e302:	a901      	add	r1, sp, #4
 800e304:	bf98      	it	ls
 800e306:	4b13      	ldrls	r3, [pc, #76]	@ (800e354 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800e308:	f8ad a01e 	strh.w	sl, [sp, #30]
 800e30c:	bf98      	it	ls
 800e30e:	5d9c      	ldrbls	r4, [r3, r6]
 800e310:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800e314:	10e4      	asrs	r4, r4, #3
 800e316:	f8cd 8010 	str.w	r8, [sp, #16]
 800e31a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e31e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e322:	fb04 0405 	mla	r4, r4, r5, r0
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e32c:	2300      	movs	r3, #0
 800e32e:	9405      	str	r4, [sp, #20]
 800e330:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e334:	f88d 9020 	strb.w	r9, [sp, #32]
 800e338:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800e33c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e340:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800e344:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800e348:	6803      	ldr	r3, [r0, #0]
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	4798      	blx	r3
 800e34e:	b00b      	add	sp, #44	@ 0x2c
 800e350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e354:	08023c3c 	.word	0x08023c3c

0800e358 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800e358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e35c:	461e      	mov	r6, r3
 800e35e:	4b0a      	ldr	r3, [pc, #40]	@ (800e388 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800e360:	460f      	mov	r7, r1
 800e362:	4690      	mov	r8, r2
 800e364:	881d      	ldrh	r5, [r3, #0]
 800e366:	f7f5 fbdd 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800e36a:	6803      	ldr	r3, [r0, #0]
 800e36c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e36e:	4798      	blx	r3
 800e370:	280b      	cmp	r0, #11
 800e372:	bf96      	itet	ls
 800e374:	4b05      	ldrls	r3, [pc, #20]	@ (800e38c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800e376:	2400      	movhi	r4, #0
 800e378:	5c1c      	ldrbls	r4, [r3, r0]
 800e37a:	fb08 7005 	mla	r0, r8, r5, r7
 800e37e:	10e4      	asrs	r4, r4, #3
 800e380:	fb04 6000 	mla	r0, r4, r0, r6
 800e384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e388:	2402513a 	.word	0x2402513a
 800e38c:	08023c3c 	.word	0x08023c3c

0800e390 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800e390:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e392:	b08b      	sub	sp, #44	@ 0x2c
 800e394:	461f      	mov	r7, r3
 800e396:	4604      	mov	r4, r0
 800e398:	4616      	mov	r6, r2
 800e39a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e39e:	2500      	movs	r5, #0
 800e3a0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e3a4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e3a8:	9504      	str	r5, [sp, #16]
 800e3aa:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e3ae:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e3b2:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e3b6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e3ba:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e3be:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800e3c2:	f88d 3020 	strb.w	r3, [sp, #32]
 800e3c6:	f7ff fe9f 	bl	800e108 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e3ca:	463a      	mov	r2, r7
 800e3cc:	4631      	mov	r1, r6
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	f7ff ffc1 	bl	800e358 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e3d6:	4b0e      	ldr	r3, [pc, #56]	@ (800e410 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800e3d8:	9005      	str	r0, [sp, #20]
 800e3da:	881b      	ldrh	r3, [r3, #0]
 800e3dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e3e0:	f7f5 fba0 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800e3e4:	6803      	ldr	r3, [r0, #0]
 800e3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3e8:	4798      	blx	r3
 800e3ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e3ec:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800e3f0:	a901      	add	r1, sp, #4
 800e3f2:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800e3f6:	9304      	str	r3, [sp, #16]
 800e3f8:	6860      	ldr	r0, [r4, #4]
 800e3fa:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800e3fe:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800e402:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800e406:	6803      	ldr	r3, [r0, #0]
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	4798      	blx	r3
 800e40c:	b00b      	add	sp, #44	@ 0x2c
 800e40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e410:	2402513a 	.word	0x2402513a

0800e414 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800e414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e416:	b08d      	sub	sp, #52	@ 0x34
 800e418:	2501      	movs	r5, #1
 800e41a:	4604      	mov	r4, r0
 800e41c:	466b      	mov	r3, sp
 800e41e:	9503      	str	r5, [sp, #12]
 800e420:	e883 0006 	stmia.w	r3, {r1, r2}
 800e424:	2300      	movs	r3, #0
 800e426:	f8bd 6000 	ldrh.w	r6, [sp]
 800e42a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800e42e:	9306      	str	r3, [sp, #24]
 800e430:	6803      	ldr	r3, [r0, #0]
 800e432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e434:	4798      	blx	r3
 800e436:	463a      	mov	r2, r7
 800e438:	4631      	mov	r1, r6
 800e43a:	4603      	mov	r3, r0
 800e43c:	4620      	mov	r0, r4
 800e43e:	f7ff ff8b 	bl	800e358 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e442:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e444:	9004      	str	r0, [sp, #16]
 800e446:	9307      	str	r3, [sp, #28]
 800e448:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e44c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e450:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e454:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800e458:	4b0e      	ldr	r3, [pc, #56]	@ (800e494 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800e45a:	881b      	ldrh	r3, [r3, #0]
 800e45c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800e460:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800e464:	f7f5 fb5e 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800e468:	6803      	ldr	r3, [r0, #0]
 800e46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e46c:	4798      	blx	r3
 800e46e:	23ff      	movs	r3, #255	@ 0xff
 800e470:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800e474:	a903      	add	r1, sp, #12
 800e476:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800e47a:	6860      	ldr	r0, [r4, #4]
 800e47c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800e480:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800e484:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800e488:	6803      	ldr	r3, [r0, #0]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	4798      	blx	r3
 800e48e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800e490:	b00d      	add	sp, #52	@ 0x34
 800e492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e494:	2402513a 	.word	0x2402513a

0800e498 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800e498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e49c:	b08c      	sub	sp, #48	@ 0x30
 800e49e:	461e      	mov	r6, r3
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	4604      	mov	r4, r0
 800e4a4:	466d      	mov	r5, sp
 800e4a6:	9306      	str	r3, [sp, #24]
 800e4a8:	6803      	ldr	r3, [r0, #0]
 800e4aa:	e885 0006 	stmia.w	r5, {r1, r2}
 800e4ae:	2501      	movs	r5, #1
 800e4b0:	f8bd 7000 	ldrh.w	r7, [sp]
 800e4b4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800e4b8:	9503      	str	r5, [sp, #12]
 800e4ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4bc:	4798      	blx	r3
 800e4be:	4642      	mov	r2, r8
 800e4c0:	4639      	mov	r1, r7
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	4620      	mov	r0, r4
 800e4c6:	f7ff ff47 	bl	800e358 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e4ca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e4ce:	9004      	str	r0, [sp, #16]
 800e4d0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e4d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e4d8:	9607      	str	r6, [sp, #28]
 800e4da:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800e4de:	4b10      	ldr	r3, [pc, #64]	@ (800e520 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800e4e0:	881b      	ldrh	r3, [r3, #0]
 800e4e2:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800e4e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e4e8:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800e4ec:	f7f5 fb1a 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800e4f0:	6803      	ldr	r3, [r0, #0]
 800e4f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f4:	4798      	blx	r3
 800e4f6:	23ff      	movs	r3, #255	@ 0xff
 800e4f8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800e4fc:	a903      	add	r1, sp, #12
 800e4fe:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800e502:	6860      	ldr	r0, [r4, #4]
 800e504:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800e508:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800e50c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800e510:	6803      	ldr	r3, [r0, #0]
 800e512:	685b      	ldr	r3, [r3, #4]
 800e514:	4798      	blx	r3
 800e516:	4630      	mov	r0, r6
 800e518:	b00c      	add	sp, #48	@ 0x30
 800e51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e51e:	bf00      	nop
 800e520:	2402513a 	.word	0x2402513a

0800e524 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800e524:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e526:	b085      	sub	sp, #20
 800e528:	4605      	mov	r5, r0
 800e52a:	ac02      	add	r4, sp, #8
 800e52c:	e884 0006 	stmia.w	r4, {r1, r2}
 800e530:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800e534:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800e538:	f7ff fde6 	bl	800e108 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e53c:	4631      	mov	r1, r6
 800e53e:	4603      	mov	r3, r0
 800e540:	463a      	mov	r2, r7
 800e542:	4628      	mov	r0, r5
 800e544:	f7ff ff08 	bl	800e358 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e548:	4a05      	ldr	r2, [pc, #20]	@ (800e560 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800e54a:	682b      	ldr	r3, [r5, #0]
 800e54c:	8812      	ldrh	r2, [r2, #0]
 800e54e:	9200      	str	r2, [sp, #0]
 800e550:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800e552:	4603      	mov	r3, r0
 800e554:	4628      	mov	r0, r5
 800e556:	e894 0006 	ldmia.w	r4, {r1, r2}
 800e55a:	47b0      	blx	r6
 800e55c:	b005      	add	sp, #20
 800e55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e560:	2402513a 	.word	0x2402513a

0800e564 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800e564:	b570      	push	{r4, r5, r6, lr}
 800e566:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800e56a:	4604      	mov	r4, r0
 800e56c:	b19b      	cbz	r3, 800e596 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800e56e:	2002      	movs	r0, #2
 800e570:	f7f3 fa1e 	bl	80019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800e574:	2300      	movs	r3, #0
 800e576:	4620      	mov	r0, r4
 800e578:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800e57c:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800e580:	6823      	ldr	r3, [r4, #0]
 800e582:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800e586:	f7ff fdbf 	bl	800e108 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e58a:	4601      	mov	r1, r0
 800e58c:	4620      	mov	r0, r4
 800e58e:	462b      	mov	r3, r5
 800e590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e594:	4718      	bx	r3
 800e596:	bd70      	pop	{r4, r5, r6, pc}

0800e598 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800e598:	b570      	push	{r4, r5, r6, lr}
 800e59a:	4605      	mov	r5, r0
 800e59c:	460c      	mov	r4, r1
 800e59e:	2003      	movs	r0, #3
 800e5a0:	b149      	cbz	r1, 800e5b6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800e5a2:	f7f3 f9a5 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800e5a6:	6928      	ldr	r0, [r5, #16]
 800e5a8:	b168      	cbz	r0, 800e5c6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e5aa:	6803      	ldr	r3, [r0, #0]
 800e5ac:	2101      	movs	r1, #1
 800e5ae:	695b      	ldr	r3, [r3, #20]
 800e5b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e5b4:	4718      	bx	r3
 800e5b6:	f7f3 f9cb 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e5ba:	6928      	ldr	r0, [r5, #16]
 800e5bc:	b118      	cbz	r0, 800e5c6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e5be:	6803      	ldr	r3, [r0, #0]
 800e5c0:	4621      	mov	r1, r4
 800e5c2:	695b      	ldr	r3, [r3, #20]
 800e5c4:	e7f4      	b.n	800e5b0 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800e5c6:	bd70      	pop	{r4, r5, r6, pc}

0800e5c8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800e5c8:	b538      	push	{r3, r4, r5, lr}
 800e5ca:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800e5ce:	4604      	mov	r4, r0
 800e5d0:	460d      	mov	r5, r1
 800e5d2:	428b      	cmp	r3, r1
 800e5d4:	d006      	beq.n	800e5e4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800e5d6:	6803      	ldr	r3, [r0, #0]
 800e5d8:	b929      	cbnz	r1, 800e5e6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800e5da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e5de:	4798      	blx	r3
 800e5e0:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800e5e4:	bd38      	pop	{r3, r4, r5, pc}
 800e5e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e5ea:	e7f8      	b.n	800e5de <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800e5ec <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800e5ec:	4b0d      	ldr	r3, [pc, #52]	@ (800e624 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800e5ee:	b510      	push	{r4, lr}
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	b95b      	cbnz	r3, 800e60e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e5f6:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800e5fa:	2b02      	cmp	r3, #2
 800e5fc:	d007      	beq.n	800e60e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e5fe:	6840      	ldr	r0, [r0, #4]
 800e600:	f000 f91a 	bl	800e838 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800e604:	b118      	cbz	r0, 800e60e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e606:	6862      	ldr	r2, [r4, #4]
 800e608:	7a53      	ldrb	r3, [r2, #9]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d0fc      	beq.n	800e608 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800e60e:	f7f4 f9d9 	bl	80029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e612:	4620      	mov	r0, r4
 800e614:	2100      	movs	r1, #0
 800e616:	f7ff ffd7 	bl	800e5c8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e61a:	4620      	mov	r0, r4
 800e61c:	f7ff fd74 	bl	800e108 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e620:	bd10      	pop	{r4, pc}
 800e622:	bf00      	nop
 800e624:	2402513e 	.word	0x2402513e

0800e628 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800e628:	b570      	push	{r4, r5, r6, lr}
 800e62a:	4604      	mov	r4, r0
 800e62c:	6803      	ldr	r3, [r0, #0]
 800e62e:	b919      	cbnz	r1, 800e638 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800e630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e636:	4718      	bx	r3
 800e638:	2200      	movs	r2, #0
 800e63a:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 800e63e:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 800e642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e644:	4798      	blx	r3
 800e646:	6863      	ldr	r3, [r4, #4]
 800e648:	2101      	movs	r1, #1
 800e64a:	4605      	mov	r5, r0
 800e64c:	4620      	mov	r0, r4
 800e64e:	7299      	strb	r1, [r3, #10]
 800e650:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 800e654:	f7ff ffb8 	bl	800e5c8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e658:	4628      	mov	r0, r5
 800e65a:	bd70      	pop	{r4, r5, r6, pc}

0800e65c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800e65c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800e660:	1a13      	subs	r3, r2, r0
 800e662:	4258      	negs	r0, r3
 800e664:	4158      	adcs	r0, r3
 800e666:	4770      	bx	lr

0800e668 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800e668:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800e66c:	1a9b      	subs	r3, r3, r2
 800e66e:	2b00      	cmp	r3, #0
 800e670:	bfdc      	itt	le
 800e672:	6882      	ldrle	r2, [r0, #8]
 800e674:	189b      	addle	r3, r3, r2
 800e676:	2b01      	cmp	r3, #1
 800e678:	bfcc      	ite	gt
 800e67a:	2000      	movgt	r0, #0
 800e67c:	2001      	movle	r0, #1
 800e67e:	4770      	bx	lr

0800e680 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800e680:	6902      	ldr	r2, [r0, #16]
 800e682:	6843      	ldr	r3, [r0, #4]
 800e684:	2024      	movs	r0, #36	@ 0x24
 800e686:	fb00 3002 	mla	r0, r0, r2, r3
 800e68a:	4770      	bx	lr

0800e68c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800e68c:	6803      	ldr	r3, [r0, #0]
 800e68e:	691b      	ldr	r3, [r3, #16]
 800e690:	4718      	bx	r3

0800e692 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800e692:	2301      	movs	r3, #1
 800e694:	b570      	push	{r4, r5, r6, lr}
 800e696:	7203      	strb	r3, [r0, #8]
 800e698:	4604      	mov	r4, r0
 800e69a:	6840      	ldr	r0, [r0, #4]
 800e69c:	6803      	ldr	r3, [r0, #0]
 800e69e:	699b      	ldr	r3, [r3, #24]
 800e6a0:	4798      	blx	r3
 800e6a2:	6803      	ldr	r3, [r0, #0]
 800e6a4:	4605      	mov	r5, r0
 800e6a6:	2b40      	cmp	r3, #64	@ 0x40
 800e6a8:	d00c      	beq.n	800e6c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e6aa:	d810      	bhi.n	800e6ce <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800e6ac:	2b04      	cmp	r3, #4
 800e6ae:	d01d      	beq.n	800e6ec <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800e6b0:	d804      	bhi.n	800e6bc <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d006      	beq.n	800e6c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e6b6:	2b02      	cmp	r3, #2
 800e6b8:	d02c      	beq.n	800e714 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800e6ba:	bd70      	pop	{r4, r5, r6, pc}
 800e6bc:	2b08      	cmp	r3, #8
 800e6be:	d01d      	beq.n	800e6fc <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800e6c0:	2b20      	cmp	r3, #32
 800e6c2:	d1fa      	bne.n	800e6ba <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800e6c4:	6823      	ldr	r3, [r4, #0]
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6ca:	4798      	blx	r3
 800e6cc:	e013      	b.n	800e6f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800e6ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e6d2:	d0f7      	beq.n	800e6c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e6d4:	d804      	bhi.n	800e6e0 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800e6d6:	2b80      	cmp	r3, #128	@ 0x80
 800e6d8:	d0f4      	beq.n	800e6c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e6da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e6de:	e7f0      	b.n	800e6c2 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800e6e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e6e4:	d0ee      	beq.n	800e6c4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e6e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e6ea:	e7e5      	b.n	800e6b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800e6ec:	6823      	ldr	r3, [r4, #0]
 800e6ee:	7f01      	ldrb	r1, [r0, #28]
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6f4:	4798      	blx	r3
 800e6f6:	6823      	ldr	r3, [r4, #0]
 800e6f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6fa:	e006      	b.n	800e70a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800e6fc:	6823      	ldr	r3, [r4, #0]
 800e6fe:	7f01      	ldrb	r1, [r0, #28]
 800e700:	4620      	mov	r0, r4
 800e702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e704:	4798      	blx	r3
 800e706:	6823      	ldr	r3, [r4, #0]
 800e708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e70a:	4629      	mov	r1, r5
 800e70c:	4620      	mov	r0, r4
 800e70e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e712:	4718      	bx	r3
 800e714:	6823      	ldr	r3, [r4, #0]
 800e716:	4620      	mov	r0, r4
 800e718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e71a:	4798      	blx	r3
 800e71c:	e7f3      	b.n	800e706 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800e71e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800e71e:	4770      	bx	lr

0800e720 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800e720:	4770      	bx	lr

0800e722 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800e722:	4770      	bx	lr

0800e724 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800e724:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800e728:	b510      	push	{r4, lr}
 800e72a:	1ad2      	subs	r2, r2, r3
 800e72c:	2a00      	cmp	r2, #0
 800e72e:	bfdc      	itt	le
 800e730:	6884      	ldrle	r4, [r0, #8]
 800e732:	1912      	addle	r2, r2, r4
 800e734:	2a01      	cmp	r2, #1
 800e736:	dd16      	ble.n	800e766 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800e738:	6842      	ldr	r2, [r0, #4]
 800e73a:	2424      	movs	r4, #36	@ 0x24
 800e73c:	fb04 2303 	mla	r3, r4, r3, r2
 800e740:	f101 0220 	add.w	r2, r1, #32
 800e744:	f851 4b04 	ldr.w	r4, [r1], #4
 800e748:	4291      	cmp	r1, r2
 800e74a:	f843 4b04 	str.w	r4, [r3], #4
 800e74e:	d1f9      	bne.n	800e744 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800e750:	780a      	ldrb	r2, [r1, #0]
 800e752:	701a      	strb	r2, [r3, #0]
 800e754:	68c3      	ldr	r3, [r0, #12]
 800e756:	6882      	ldr	r2, [r0, #8]
 800e758:	f3bf 8f5b 	dmb	ish
 800e75c:	3301      	adds	r3, #1
 800e75e:	429a      	cmp	r2, r3
 800e760:	bfd8      	it	le
 800e762:	1a9b      	suble	r3, r3, r2
 800e764:	60c3      	str	r3, [r0, #12]
 800e766:	bd10      	pop	{r4, pc}

0800e768 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800e768:	6903      	ldr	r3, [r0, #16]
 800e76a:	6882      	ldr	r2, [r0, #8]
 800e76c:	f3bf 8f5b 	dmb	ish
 800e770:	3301      	adds	r3, #1
 800e772:	429a      	cmp	r2, r3
 800e774:	bfd8      	it	le
 800e776:	1a9b      	suble	r3, r3, r2
 800e778:	6103      	str	r3, [r0, #16]
 800e77a:	4770      	bx	lr

0800e77c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800e77c:	b570      	push	{r4, r5, r6, lr}
 800e77e:	4604      	mov	r4, r0
 800e780:	460e      	mov	r6, r1
 800e782:	6860      	ldr	r0, [r4, #4]
 800e784:	6803      	ldr	r3, [r0, #0]
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	4798      	blx	r3
 800e78a:	2800      	cmp	r0, #0
 800e78c:	d1f9      	bne.n	800e782 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800e78e:	4d0d      	ldr	r5, [pc, #52]	@ (800e7c4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800e790:	6828      	ldr	r0, [r5, #0]
 800e792:	6803      	ldr	r3, [r0, #0]
 800e794:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e796:	4798      	blx	r3
 800e798:	f7f4 f922 	bl	80029e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800e79c:	6828      	ldr	r0, [r5, #0]
 800e79e:	2101      	movs	r1, #1
 800e7a0:	f7ff ff12 	bl	800e5c8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e7a4:	6860      	ldr	r0, [r4, #4]
 800e7a6:	4631      	mov	r1, r6
 800e7a8:	6803      	ldr	r3, [r0, #0]
 800e7aa:	689b      	ldr	r3, [r3, #8]
 800e7ac:	4798      	blx	r3
 800e7ae:	6823      	ldr	r3, [r4, #0]
 800e7b0:	4620      	mov	r0, r4
 800e7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7b4:	4798      	blx	r3
 800e7b6:	6828      	ldr	r0, [r5, #0]
 800e7b8:	6803      	ldr	r3, [r0, #0]
 800e7ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e7c0:	4718      	bx	r3
 800e7c2:	bf00      	nop
 800e7c4:	24025140 	.word	0x24025140

0800e7c8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800e7c8:	b508      	push	{r3, lr}
 800e7ca:	f7f4 f8fb 	bl	80029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e7ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e7d2:	f7f4 b8ff 	b.w	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800e7d6 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800e7d6:	b510      	push	{r4, lr}
 800e7d8:	4604      	mov	r4, r0
 800e7da:	2114      	movs	r1, #20
 800e7dc:	f011 f990 	bl	801fb00 <_ZdlPvj>
 800e7e0:	4620      	mov	r0, r4
 800e7e2:	bd10      	pop	{r4, pc}

0800e7e4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800e7e4:	b570      	push	{r4, r5, r6, lr}
 800e7e6:	4604      	mov	r4, r0
 800e7e8:	6840      	ldr	r0, [r0, #4]
 800e7ea:	6803      	ldr	r3, [r0, #0]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	4798      	blx	r3
 800e7f0:	4605      	mov	r5, r0
 800e7f2:	b930      	cbnz	r0, 800e802 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e7f4:	7a23      	ldrb	r3, [r4, #8]
 800e7f6:	b123      	cbz	r3, 800e802 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e7f8:	6860      	ldr	r0, [r4, #4]
 800e7fa:	6803      	ldr	r3, [r0, #0]
 800e7fc:	695b      	ldr	r3, [r3, #20]
 800e7fe:	4798      	blx	r3
 800e800:	7225      	strb	r5, [r4, #8]
 800e802:	6860      	ldr	r0, [r4, #4]
 800e804:	6803      	ldr	r3, [r0, #0]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	4798      	blx	r3
 800e80a:	b928      	cbnz	r0, 800e818 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800e80c:	6823      	ldr	r3, [r4, #0]
 800e80e:	4620      	mov	r0, r4
 800e810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e816:	4718      	bx	r3
 800e818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e81c:	f7f4 b8e8 	b.w	80029f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800e820 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800e820:	b510      	push	{r4, lr}
 800e822:	6082      	str	r2, [r0, #8]
 800e824:	2200      	movs	r2, #0
 800e826:	4c03      	ldr	r4, [pc, #12]	@ (800e834 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800e828:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800e82c:	e9c0 4100 	strd	r4, r1, [r0]
 800e830:	bd10      	pop	{r4, pc}
 800e832:	bf00      	nop
 800e834:	08023c50 	.word	0x08023c50

0800e838 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800e838:	6840      	ldr	r0, [r0, #4]
 800e83a:	6803      	ldr	r3, [r0, #0]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4718      	bx	r3

0800e840 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 800e840:	2300      	movs	r3, #0
 800e842:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800e844:	8503      	strh	r3, [r0, #40]	@ 0x28
 800e846:	8543      	strh	r3, [r0, #42]	@ 0x2a
 800e848:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800e84a:	6980      	ldr	r0, [r0, #24]
 800e84c:	b110      	cbz	r0, 800e854 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 800e84e:	6803      	ldr	r3, [r0, #0]
 800e850:	691b      	ldr	r3, [r3, #16]
 800e852:	4718      	bx	r3
 800e854:	4770      	bx	lr

0800e856 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 800e856:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 800e85a:	4770      	bx	lr

0800e85c <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 800e85c:	b538      	push	{r3, r4, r5, lr}
 800e85e:	0e0b      	lsrs	r3, r1, #24
 800e860:	4604      	mov	r4, r0
 800e862:	460d      	mov	r5, r1
 800e864:	7783      	strb	r3, [r0, #30]
 800e866:	6803      	ldr	r3, [r0, #0]
 800e868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e86a:	4798      	blx	r3
 800e86c:	6803      	ldr	r3, [r0, #0]
 800e86e:	4629      	mov	r1, r5
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	4798      	blx	r3
 800e874:	6823      	ldr	r3, [r4, #0]
 800e876:	4620      	mov	r0, r4
 800e878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e87a:	4798      	blx	r3
 800e87c:	61a0      	str	r0, [r4, #24]
 800e87e:	bd38      	pop	{r3, r4, r5, pc}

0800e880 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 800e880:	7741      	strb	r1, [r0, #29]
 800e882:	4770      	bx	lr

0800e884 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 800e884:	b530      	push	{r4, r5, lr}
 800e886:	460d      	mov	r5, r1
 800e888:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800e88c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e88e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e894:	682b      	ldr	r3, [r5, #0]
 800e896:	6023      	str	r3, [r4, #0]
 800e898:	bd30      	pop	{r4, r5, pc}

0800e89a <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 800e89a:	b538      	push	{r3, r4, r5, lr}
 800e89c:	4604      	mov	r4, r0
 800e89e:	1d03      	adds	r3, r0, #4
 800e8a0:	6808      	ldr	r0, [r1, #0]
 800e8a2:	2500      	movs	r5, #0
 800e8a4:	6849      	ldr	r1, [r1, #4]
 800e8a6:	c303      	stmia	r3!, {r0, r1}
 800e8a8:	6813      	ldr	r3, [r2, #0]
 800e8aa:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800e8ae:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 800e8b2:	6853      	ldr	r3, [r2, #4]
 800e8b4:	61a5      	str	r5, [r4, #24]
 800e8b6:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 800e8ba:	f005 fc07 	bl	80140cc <_ZN8touchgfx9Matrix3x35resetEv>
 800e8be:	23ff      	movs	r3, #255	@ 0xff
 800e8c0:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 800e8c4:	7763      	strb	r3, [r4, #29]
 800e8c6:	77a3      	strb	r3, [r4, #30]
 800e8c8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800e8cc:	6323      	str	r3, [r4, #48]	@ 0x30
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800e8d4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e8d8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 800e8d8:	ee70 7a41 	vsub.f32	s15, s0, s2
 800e8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e8e4:	4605      	mov	r5, r0
 800e8e6:	ed2d 8b0a 	vpush	{d8-d12}
 800e8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ee:	b086      	sub	sp, #24
 800e8f0:	eeb0 ba40 	vmov.f32	s22, s0
 800e8f4:	6802      	ldr	r2, [r0, #0]
 800e8f6:	eef0 ba60 	vmov.f32	s23, s1
 800e8fa:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 800e8fe:	eef0 aa41 	vmov.f32	s21, s2
 800e902:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800e904:	eeb0 aa61 	vmov.f32	s20, s3
 800e908:	eeb0 ca42 	vmov.f32	s24, s4
 800e90c:	eef0 ca62 	vmov.f32	s25, s5
 800e910:	d112      	bne.n	800e938 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800e912:	ee70 7ae1 	vsub.f32	s15, s1, s3
 800e916:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e91e:	d10b      	bne.n	800e938 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800e920:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800e924:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800e926:	3901      	subs	r1, #1
 800e928:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800e92c:	b006      	add	sp, #24
 800e92e:	ecbd 8b0a 	vpop	{d8-d12}
 800e932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e936:	4710      	bx	r2
 800e938:	23ff      	movs	r3, #255	@ 0xff
 800e93a:	4628      	mov	r0, r5
 800e93c:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 800e940:	77ab      	strb	r3, [r5, #30]
 800e942:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800e944:	4798      	blx	r3
 800e946:	eeb0 0a4b 	vmov.f32	s0, s22
 800e94a:	eef0 0a6b 	vmov.f32	s1, s23
 800e94e:	4604      	mov	r4, r0
 800e950:	4640      	mov	r0, r8
 800e952:	f005 fc6a 	bl	801422a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800e956:	eef0 8a40 	vmov.f32	s17, s0
 800e95a:	ed8d 0a00 	vstr	s0, [sp]
 800e95e:	eeb0 0a6a 	vmov.f32	s0, s21
 800e962:	eef0 9a60 	vmov.f32	s19, s1
 800e966:	edcd 0a01 	vstr	s1, [sp, #4]
 800e96a:	4640      	mov	r0, r8
 800e96c:	eef0 0a4a 	vmov.f32	s1, s20
 800e970:	f005 fc5b 	bl	801422a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800e974:	eef4 8a40 	vcmp.f32	s17, s0
 800e978:	eeb0 8a40 	vmov.f32	s16, s0
 800e97c:	ed8d 0a02 	vstr	s0, [sp, #8]
 800e980:	eeb0 9a60 	vmov.f32	s18, s1
 800e984:	edcd 0a03 	vstr	s1, [sp, #12]
 800e988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e98c:	eef4 9a60 	vcmp.f32	s19, s1
 800e990:	bf0c      	ite	eq
 800e992:	2301      	moveq	r3, #1
 800e994:	2300      	movne	r3, #0
 800e996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e99a:	eef4 8a40 	vcmp.f32	s17, s0
 800e99e:	7463      	strb	r3, [r4, #17]
 800e9a0:	bf0c      	ite	eq
 800e9a2:	2301      	moveq	r3, #1
 800e9a4:	2300      	movne	r3, #0
 800e9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9aa:	74a3      	strb	r3, [r4, #18]
 800e9ac:	d024      	beq.n	800e9f8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800e9ae:	eef4 9a60 	vcmp.f32	s19, s1
 800e9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b6:	d01f      	beq.n	800e9f8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800e9b8:	ee3a aa6b 	vsub.f32	s20, s20, s23
 800e9bc:	4640      	mov	r0, r8
 800e9be:	ee7a aacb 	vsub.f32	s21, s21, s22
 800e9c2:	eeb0 0a4b 	vmov.f32	s0, s22
 800e9c6:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 800e9ca:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 800e9ce:	eef0 0a6b 	vmov.f32	s1, s23
 800e9d2:	eea7 0acc 	vfms.f32	s0, s15, s24
 800e9d6:	eeec 0a87 	vfma.f32	s1, s25, s14
 800e9da:	f005 fc26 	bl	801422a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800e9de:	ed8d 0a04 	vstr	s0, [sp, #16]
 800e9e2:	ee30 0a68 	vsub.f32	s0, s0, s17
 800e9e6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e9ea:	edcd 0a05 	vstr	s1, [sp, #20]
 800e9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f2:	d121      	bne.n	800ea38 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	74a3      	strb	r3, [r4, #18]
 800e9f8:	7c63      	ldrb	r3, [r4, #17]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d051      	beq.n	800eaa2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 800e9fe:	ee39 7a69 	vsub.f32	s14, s18, s19
 800ea02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800eaf8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 800ea06:	eef4 9ac9 	vcmpe.f32	s19, s18
 800ea0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea12:	edc4 7a08 	vstr	s15, [r4, #32]
 800ea16:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 800ea1a:	ee17 3a90 	vmov	r3, s15
 800ea1e:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 800ea22:	b21a      	sxth	r2, r3
 800ea24:	ee17 3a90 	vmov	r3, s15
 800ea28:	bf48      	it	mi
 800ea2a:	8122      	strhmi	r2, [r4, #8]
 800ea2c:	b21b      	sxth	r3, r3
 800ea2e:	bf56      	itet	pl
 800ea30:	80e2      	strhpl	r2, [r4, #6]
 800ea32:	80e3      	strhmi	r3, [r4, #6]
 800ea34:	8123      	strhpl	r3, [r4, #8]
 800ea36:	e02c      	b.n	800ea92 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800ea38:	ee70 0ae9 	vsub.f32	s1, s1, s19
 800ea3c:	eec0 7a80 	vdiv.f32	s15, s1, s0
 800ea40:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ea44:	edc4 7a05 	vstr	s15, [r4, #20]
 800ea48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea4c:	d102      	bne.n	800ea54 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 800ea4e:	2301      	movs	r3, #1
 800ea50:	7463      	strb	r3, [r4, #17]
 800ea52:	e7d1      	b.n	800e9f8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800ea54:	eeb0 7a69 	vmov.f32	s14, s19
 800ea58:	ee39 9a69 	vsub.f32	s18, s18, s19
 800ea5c:	ee38 8a68 	vsub.f32	s16, s16, s17
 800ea60:	eea8 7ae7 	vfms.f32	s14, s17, s15
 800ea64:	ed84 7a06 	vstr	s14, [r4, #24]
 800ea68:	ee89 7a27 	vdiv.f32	s14, s18, s15
 800ea6c:	ee38 8a47 	vsub.f32	s16, s16, s14
 800ea70:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800eafc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 800ea74:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800ea78:	ed84 8a07 	vstr	s16, [r4, #28]
 800ea7c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ea80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea84:	edc4 7a08 	vstr	s15, [r4, #32]
 800ea88:	d503      	bpl.n	800ea92 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800ea8a:	eeb1 8a48 	vneg.f32	s16, s16
 800ea8e:	ed84 8a07 	vstr	s16, [r4, #28]
 800ea92:	60e7      	str	r7, [r4, #12]
 800ea94:	7426      	strb	r6, [r4, #16]
 800ea96:	61ac      	str	r4, [r5, #24]
 800ea98:	b006      	add	sp, #24
 800ea9a:	ecbd 8b0a 	vpop	{d8-d12}
 800ea9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaa2:	7ca3      	ldrb	r3, [r4, #18]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d0f4      	beq.n	800ea92 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800eaa8:	ee38 7a68 	vsub.f32	s14, s16, s17
 800eaac:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800eaf8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 800eab0:	eef4 8ac8 	vcmpe.f32	s17, s16
 800eab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eabc:	edc4 7a08 	vstr	s15, [r4, #32]
 800eac0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800eac4:	ee17 3a90 	vmov	r3, s15
 800eac8:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 800eacc:	b21a      	sxth	r2, r3
 800eace:	ee17 3a90 	vmov	r3, s15
 800ead2:	bf48      	it	mi
 800ead4:	8122      	strhmi	r2, [r4, #8]
 800ead6:	b21b      	sxth	r3, r3
 800ead8:	bf56      	itet	pl
 800eada:	80e2      	strhpl	r2, [r4, #6]
 800eadc:	80e3      	strhmi	r3, [r4, #6]
 800eade:	8123      	strhpl	r3, [r4, #8]
 800eae0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800eae4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800eae8:	1a9b      	subs	r3, r3, r2
 800eaea:	ee07 3a90 	vmov	s15, r3
 800eaee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eaf2:	edc4 7a07 	vstr	s15, [r4, #28]
 800eaf6:	e7cc      	b.n	800ea92 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800eaf8:	447ffffe 	.word	0x447ffffe
 800eafc:	44800000 	.word	0x44800000

0800eb00 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 800eb00:	b510      	push	{r4, lr}
 800eb02:	ed2d 8b02 	vpush	{d8}
 800eb06:	eef0 8a62 	vmov.f32	s17, s5
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	4604      	mov	r4, r0
 800eb0e:	eeb0 8a42 	vmov.f32	s16, s4
 800eb12:	f010 fd67 	bl	801f5e4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 800eb16:	eef0 7a68 	vmov.f32	s15, s17
 800eb1a:	6823      	ldr	r3, [r4, #0]
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	689b      	ldr	r3, [r3, #8]
 800eb20:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eb24:	ee17 2a90 	vmov	r2, s15
 800eb28:	eef0 7a48 	vmov.f32	s15, s16
 800eb2c:	ecbd 8b02 	vpop	{d8}
 800eb30:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eb34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb38:	ee17 1a90 	vmov	r1, s15
 800eb3c:	4718      	bx	r3

0800eb3e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 800eb3e:	b510      	push	{r4, lr}
 800eb40:	ed2d 8b02 	vpush	{d8}
 800eb44:	eef0 8a63 	vmov.f32	s17, s7
 800eb48:	2100      	movs	r1, #0
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	eeb0 8a43 	vmov.f32	s16, s6
 800eb50:	f010 fe0a 	bl	801f768 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 800eb54:	eef0 7a68 	vmov.f32	s15, s17
 800eb58:	6823      	ldr	r3, [r4, #0]
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	689b      	ldr	r3, [r3, #8]
 800eb5e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eb62:	ee17 2a90 	vmov	r2, s15
 800eb66:	eef0 7a48 	vmov.f32	s15, s16
 800eb6a:	ecbd 8b02 	vpop	{d8}
 800eb6e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eb72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb76:	ee17 1a90 	vmov	r1, s15
 800eb7a:	4718      	bx	r3

0800eb7c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 800eb7c:	b513      	push	{r0, r1, r4, lr}
 800eb7e:	4604      	mov	r4, r0
 800eb80:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800eb82:	f005 fb52 	bl	801422a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800eb86:	eef0 7a60 	vmov.f32	s15, s1
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eb90:	ee17 2a90 	vmov	r2, s15
 800eb94:	eef0 7a40 	vmov.f32	s15, s0
 800eb98:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eb9c:	ee17 1a90 	vmov	r1, s15
 800eba0:	b002      	add	sp, #8
 800eba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eba6:	f010 bc77 	b.w	801f498 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 800ebaa:	b513      	push	{r0, r1, r4, lr}
 800ebac:	4604      	mov	r4, r0
 800ebae:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800ebb0:	f005 fb3b 	bl	801422a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ebb4:	eef0 7a60 	vmov.f32	s15, s1
 800ebb8:	4620      	mov	r0, r4
 800ebba:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ebbe:	ee17 2a90 	vmov	r2, s15
 800ebc2:	eef0 7a40 	vmov.f32	s15, s0
 800ebc6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ebca:	ee17 1a90 	vmov	r1, s15
 800ebce:	b002      	add	sp, #8
 800ebd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebd4:	f010 bcad 	b.w	801f532 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

0800ebd8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 800ebd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebda:	2400      	movs	r4, #0
 800ebdc:	9f07      	ldr	r7, [sp, #28]
 800ebde:	f04f 0e01 	mov.w	lr, #1
 800ebe2:	4626      	mov	r6, r4
 800ebe4:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 800ebe8:	4463      	add	r3, ip
 800ebea:	4563      	cmp	r3, ip
 800ebec:	d02d      	beq.n	800ec4a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 800ebee:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 800ebf2:	2d06      	cmp	r5, #6
 800ebf4:	d8f9      	bhi.n	800ebea <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800ebf6:	fa0e f505 	lsl.w	r5, lr, r5
 800ebfa:	f015 0f66 	tst.w	r5, #102	@ 0x66
 800ebfe:	d10d      	bne.n	800ec1c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 800ec00:	f015 0f10 	tst.w	r5, #16
 800ec04:	d117      	bne.n	800ec36 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 800ec06:	072d      	lsls	r5, r5, #28
 800ec08:	d5ef      	bpl.n	800ebea <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800ec0a:	3801      	subs	r0, #1
 800ec0c:	b91e      	cbnz	r6, 800ec16 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 800ec0e:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 800ec12:	682d      	ldr	r5, [r5, #0]
 800ec14:	600d      	str	r5, [r1, #0]
 800ec16:	b96c      	cbnz	r4, 800ec34 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800ec18:	2601      	movs	r6, #1
 800ec1a:	e7e6      	b.n	800ebea <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800ec1c:	b926      	cbnz	r6, 800ec28 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 800ec1e:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800ec22:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800ec26:	600b      	str	r3, [r1, #0]
 800ec28:	b924      	cbnz	r4, 800ec34 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800ec2a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800ec2e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ec32:	6013      	str	r3, [r2, #0]
 800ec34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec36:	3801      	subs	r0, #1
 800ec38:	b91c      	cbnz	r4, 800ec42 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 800ec3a:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 800ec3e:	6824      	ldr	r4, [r4, #0]
 800ec40:	6014      	str	r4, [r2, #0]
 800ec42:	2e00      	cmp	r6, #0
 800ec44:	d1f6      	bne.n	800ec34 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800ec46:	2401      	movs	r4, #1
 800ec48:	e7cf      	b.n	800ebea <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800ec4a:	b90e      	cbnz	r6, 800ec50 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	600b      	str	r3, [r1, #0]
 800ec50:	2c00      	cmp	r4, #0
 800ec52:	d1ef      	bne.n	800ec34 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800ec54:	2300      	movs	r3, #0
 800ec56:	e7ec      	b.n	800ec32 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0800ec58 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 800ec58:	b538      	push	{r3, r4, r5, lr}
 800ec5a:	ed2d 8b0a 	vpush	{d8-d12}
 800ec5e:	eef0 ba40 	vmov.f32	s23, s0
 800ec62:	4604      	mov	r4, r0
 800ec64:	eeb0 ca60 	vmov.f32	s24, s1
 800ec68:	460d      	mov	r5, r1
 800ec6a:	eef0 aa41 	vmov.f32	s21, s2
 800ec6e:	eeb0 ba61 	vmov.f32	s22, s3
 800ec72:	eeb0 9a42 	vmov.f32	s18, s4
 800ec76:	eef0 9a62 	vmov.f32	s19, s5
 800ec7a:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 800ec7e:	ee7b 8a29 	vadd.f32	s17, s22, s19
 800ec82:	ee3a 8a89 	vadd.f32	s16, s21, s18
 800ec86:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800ec8a:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800ec8e:	ee3c 0a68 	vsub.f32	s0, s24, s17
 800ec92:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 800ec96:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ec9a:	eea7 0aa7 	vfma.f32	s0, s15, s15
 800ec9e:	f010 ff79 	bl	801fb94 <sqrtf>
 800eca2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800eca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecaa:	d12e      	bne.n	800ed0a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 800ecac:	ee79 7a6a 	vsub.f32	s15, s18, s21
 800ecb0:	ee39 7acb 	vsub.f32	s14, s19, s22
 800ecb4:	eeb0 8a6a 	vmov.f32	s16, s21
 800ecb8:	eef0 8a4b 	vmov.f32	s17, s22
 800ecbc:	eea7 8a8a 	vfma.f32	s16, s15, s20
 800ecc0:	eee7 8a0a 	vfma.f32	s17, s14, s20
 800ecc4:	eea7 8a0a 	vfma.f32	s16, s14, s20
 800ecc8:	eee7 8aca 	vfms.f32	s17, s15, s20
 800eccc:	2d02      	cmp	r5, #2
 800ecce:	dc2f      	bgt.n	800ed30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 800ecd0:	3501      	adds	r5, #1
 800ecd2:	eef0 1a4b 	vmov.f32	s3, s22
 800ecd6:	eeb0 1a6a 	vmov.f32	s2, s21
 800ecda:	4620      	mov	r0, r4
 800ecdc:	4629      	mov	r1, r5
 800ecde:	eef0 2a68 	vmov.f32	s5, s17
 800ece2:	eeb0 2a48 	vmov.f32	s4, s16
 800ece6:	eef0 0a4c 	vmov.f32	s1, s24
 800ecea:	eeb0 0a6b 	vmov.f32	s0, s23
 800ecee:	f7ff ffb3 	bl	800ec58 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800ecf2:	eef0 0a68 	vmov.f32	s1, s17
 800ecf6:	eeb0 0a48 	vmov.f32	s0, s16
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	f7ff ff55 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ed00:	eeb0 ba68 	vmov.f32	s22, s17
 800ed04:	eef0 aa48 	vmov.f32	s21, s16
 800ed08:	e7b9      	b.n	800ec7e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 800ed0a:	ee38 8a6b 	vsub.f32	s16, s16, s23
 800ed0e:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800ed12:	ee78 8acc 	vsub.f32	s17, s17, s24
 800ed16:	ee28 7a27 	vmul.f32	s14, s16, s15
 800ed1a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800ed1e:	ee87 8a00 	vdiv.f32	s16, s14, s0
 800ed22:	eec7 8a80 	vdiv.f32	s17, s15, s0
 800ed26:	ee3b 8a88 	vadd.f32	s16, s23, s16
 800ed2a:	ee7c 8a28 	vadd.f32	s17, s24, s17
 800ed2e:	e7cd      	b.n	800eccc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 800ed30:	eef0 0a68 	vmov.f32	s1, s17
 800ed34:	4620      	mov	r0, r4
 800ed36:	eeb0 0a48 	vmov.f32	s0, s16
 800ed3a:	f7ff ff36 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ed3e:	ecbd 8b0a 	vpop	{d8-d12}
 800ed42:	bd38      	pop	{r3, r4, r5, pc}

0800ed44 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 800ed44:	b510      	push	{r4, lr}
 800ed46:	ed2d 8b0a 	vpush	{d8-d12}
 800ed4a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800ed4e:	4604      	mov	r4, r0
 800ed50:	eeb0 ca40 	vmov.f32	s24, s0
 800ed54:	2b02      	cmp	r3, #2
 800ed56:	eeb0 9a60 	vmov.f32	s18, s1
 800ed5a:	eef0 9a41 	vmov.f32	s19, s2
 800ed5e:	eef0 8a61 	vmov.f32	s17, s3
 800ed62:	eeb0 ba42 	vmov.f32	s22, s4
 800ed66:	eef0 ba62 	vmov.f32	s23, s5
 800ed6a:	eeb0 aa43 	vmov.f32	s20, s6
 800ed6e:	eef0 aa63 	vmov.f32	s21, s7
 800ed72:	eeb0 8a44 	vmov.f32	s16, s8
 800ed76:	eef0 ca64 	vmov.f32	s25, s9
 800ed7a:	d12c      	bne.n	800edd6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 800ed7c:	eef0 0a62 	vmov.f32	s1, s5
 800ed80:	eeb0 0a42 	vmov.f32	s0, s4
 800ed84:	f7ff ff11 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ed88:	ee79 9acb 	vsub.f32	s19, s19, s22
 800ed8c:	ee7a caec 	vsub.f32	s25, s21, s25
 800ed90:	ee78 8aeb 	vsub.f32	s17, s17, s23
 800ed94:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800ed98:	ee69 9aac 	vmul.f32	s19, s19, s25
 800ed9c:	ee28 8a88 	vmul.f32	s16, s17, s16
 800eda0:	eef4 9ac8 	vcmpe.f32	s19, s16
 800eda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eda8:	db0f      	blt.n	800edca <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 800edaa:	2101      	movs	r1, #1
 800edac:	eef0 2a6a 	vmov.f32	s5, s21
 800edb0:	eeb0 2a4a 	vmov.f32	s4, s20
 800edb4:	4620      	mov	r0, r4
 800edb6:	eef0 1a6b 	vmov.f32	s3, s23
 800edba:	eeb0 1a4b 	vmov.f32	s2, s22
 800edbe:	eef0 0a49 	vmov.f32	s1, s18
 800edc2:	eeb0 0a4c 	vmov.f32	s0, s24
 800edc6:	f7ff ff47 	bl	800ec58 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800edca:	eef0 0a6a 	vmov.f32	s1, s21
 800edce:	4620      	mov	r0, r4
 800edd0:	eeb0 0a4a 	vmov.f32	s0, s20
 800edd4:	e035      	b.n	800ee42 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d138      	bne.n	800ee4c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800edda:	ee31 4ae2 	vsub.f32	s8, s3, s5
 800edde:	ee33 6a48 	vsub.f32	s12, s6, s16
 800ede2:	ee71 7a42 	vsub.f32	s15, s2, s4
 800ede6:	ee73 6ae4 	vsub.f32	s13, s7, s9
 800edea:	ee26 7a44 	vnmul.f32	s14, s12, s8
 800edee:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800edf2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800edf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edfa:	d027      	beq.n	800ee4c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800edfc:	ee28 8a63 	vnmul.f32	s16, s16, s7
 800ee00:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 800ee04:	eea4 8a83 	vfma.f32	s16, s9, s6
 800ee08:	eee1 8a22 	vfma.f32	s17, s2, s5
 800ee0c:	ee68 7a67 	vnmul.f32	s15, s16, s15
 800ee10:	ee28 8a44 	vnmul.f32	s16, s16, s8
 800ee14:	eee6 7a28 	vfma.f32	s15, s12, s17
 800ee18:	eea6 8aa8 	vfma.f32	s16, s13, s17
 800ee1c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800ee20:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 800ee24:	eec8 0a07 	vdiv.f32	s1, s16, s14
 800ee28:	ee3c ca40 	vsub.f32	s24, s24, s0
 800ee2c:	ee39 9a60 	vsub.f32	s18, s18, s1
 800ee30:	ee29 9a09 	vmul.f32	s18, s18, s18
 800ee34:	eeac 9a0c 	vfma.f32	s18, s24, s24
 800ee38:	eef4 7ac9 	vcmpe.f32	s15, s18
 800ee3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee40:	db04      	blt.n	800ee4c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800ee42:	f7ff feb2 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ee46:	ecbd 8b0a 	vpop	{d8-d12}
 800ee4a:	bd10      	pop	{r4, pc}
 800ee4c:	eef0 0a6b 	vmov.f32	s1, s23
 800ee50:	4620      	mov	r0, r4
 800ee52:	eeb0 0a4b 	vmov.f32	s0, s22
 800ee56:	f7ff fea8 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ee5a:	e7b6      	b.n	800edca <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

0800ee5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 800ee5c:	b510      	push	{r4, lr}
 800ee5e:	ed2d 8b0c 	vpush	{d8-d13}
 800ee62:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 800ee66:	4604      	mov	r4, r0
 800ee68:	eeb0 9a40 	vmov.f32	s18, s0
 800ee6c:	eef0 9a60 	vmov.f32	s19, s1
 800ee70:	eef0 aa41 	vmov.f32	s21, s2
 800ee74:	eeb0 ba61 	vmov.f32	s22, s3
 800ee78:	b933      	cbnz	r3, 800ee88 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 800ee7a:	f7ff fe96 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ee7e:	eef0 0a4b 	vmov.f32	s1, s22
 800ee82:	eeb0 0a6a 	vmov.f32	s0, s21
 800ee86:	e015      	b.n	800eeb4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 800ee88:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ee8c:	2b02      	cmp	r3, #2
 800ee8e:	ee71 8a40 	vsub.f32	s17, s2, s0
 800ee92:	ee31 8ae0 	vsub.f32	s16, s3, s1
 800ee96:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800ee9a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ee9e:	d10f      	bne.n	800eec0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 800eea0:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800eea4:	ee30 0a08 	vadd.f32	s0, s0, s16
 800eea8:	f7ff fe7f 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800eeac:	ee7b 0a68 	vsub.f32	s1, s22, s17
 800eeb0:	ee3a 0a88 	vadd.f32	s0, s21, s16
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f7ff fe78 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800eeba:	ecbd 8b0c 	vpop	{d8-d13}
 800eebe:	bd10      	pop	{r4, pc}
 800eec0:	f7ff fe73 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800eec4:	eef0 0a69 	vmov.f32	s1, s19
 800eec8:	eeb0 0a49 	vmov.f32	s0, s18
 800eecc:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800effc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 800eed0:	eeb1 aa68 	vneg.f32	s20, s17
 800eed4:	eddf ba4a 	vldr	s23, [pc, #296]	@ 800f000 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 800eed8:	eee8 0a27 	vfma.f32	s1, s16, s15
 800eedc:	4620      	mov	r0, r4
 800eede:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800eee2:	ed9f ca48 	vldr	s24, [pc, #288]	@ 800f004 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 800eee6:	eddf ca48 	vldr	s25, [pc, #288]	@ 800f008 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 800eeea:	ed9f da48 	vldr	s26, [pc, #288]	@ 800f00c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 800eeee:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800eef2:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800eef6:	f7ff fe58 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800eefa:	eef0 0a69 	vmov.f32	s1, s19
 800eefe:	eeb0 0a49 	vmov.f32	s0, s18
 800ef02:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800f010 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 800ef06:	4620      	mov	r0, r4
 800ef08:	eee8 0a27 	vfma.f32	s1, s16, s15
 800ef0c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800ef10:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800ef14:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800ef18:	f7ff fe47 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ef1c:	eef0 0a69 	vmov.f32	s1, s19
 800ef20:	eeb0 0a49 	vmov.f32	s0, s18
 800ef24:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800f014 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 800ef28:	4620      	mov	r0, r4
 800ef2a:	eee8 0a27 	vfma.f32	s1, s16, s15
 800ef2e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800ef32:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800ef36:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800ef3a:	f7ff fe36 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ef3e:	eef0 0a69 	vmov.f32	s1, s19
 800ef42:	eeb0 0a49 	vmov.f32	s0, s18
 800ef46:	eddf 7a34 	vldr	s15, [pc, #208]	@ 800f018 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	eee8 0a27 	vfma.f32	s1, s16, s15
 800ef50:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800ef54:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800ef58:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800ef5c:	f7ff fe25 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ef60:	ee79 0a88 	vadd.f32	s1, s19, s16
 800ef64:	ee39 0a28 	vadd.f32	s0, s18, s17
 800ef68:	4620      	mov	r0, r4
 800ef6a:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800ef6e:	ee30 0a08 	vadd.f32	s0, s0, s16
 800ef72:	f7ff fe1a 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ef76:	eef0 0a69 	vmov.f32	s1, s19
 800ef7a:	eeb0 0a49 	vmov.f32	s0, s18
 800ef7e:	eddf 7a27 	vldr	s15, [pc, #156]	@ 800f01c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 800ef82:	4620      	mov	r0, r4
 800ef84:	eee8 0a27 	vfma.f32	s1, s16, s15
 800ef88:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800ef8c:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800ef90:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800ef94:	f7ff fe09 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ef98:	eef0 0a69 	vmov.f32	s1, s19
 800ef9c:	eeb0 0a49 	vmov.f32	s0, s18
 800efa0:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800f020 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 800efa4:	4620      	mov	r0, r4
 800efa6:	eee8 0a27 	vfma.f32	s1, s16, s15
 800efaa:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800efae:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800efb2:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800efb6:	f7ff fdf8 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800efba:	eef0 0a69 	vmov.f32	s1, s19
 800efbe:	eeb0 0a49 	vmov.f32	s0, s18
 800efc2:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800f024 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 800efc6:	4620      	mov	r0, r4
 800efc8:	eee8 0a27 	vfma.f32	s1, s16, s15
 800efcc:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800efd0:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800efd4:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800efd8:	f7ff fde7 	bl	800ebaa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800efdc:	eef0 0a69 	vmov.f32	s1, s19
 800efe0:	eeb0 0a49 	vmov.f32	s0, s18
 800efe4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800f028 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 800efe8:	4620      	mov	r0, r4
 800efea:	eee8 0a27 	vfma.f32	s1, s16, s15
 800efee:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800eff2:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800eff6:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800effa:	e73e      	b.n	800ee7a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 800effc:	3d23d70a 	.word	0x3d23d70a
 800f000:	3e8f5c29 	.word	0x3e8f5c29
 800f004:	3f19999a 	.word	0x3f19999a
 800f008:	3f4ccccd 	.word	0x3f4ccccd
 800f00c:	3f75c28f 	.word	0x3f75c28f
 800f010:	3e4ccccd 	.word	0x3e4ccccd
 800f014:	3ecccccd 	.word	0x3ecccccd
 800f018:	3f3851ec 	.word	0x3f3851ec
 800f01c:	3fa3d70a 	.word	0x3fa3d70a
 800f020:	3fcccccd 	.word	0x3fcccccd
 800f024:	3fe66666 	.word	0x3fe66666
 800f028:	3ffae148 	.word	0x3ffae148

0800f02c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 800f02c:	b570      	push	{r4, r5, r6, lr}
 800f02e:	ed2d 8b06 	vpush	{d8-d10}
 800f032:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800f036:	eef0 aa40 	vmov.f32	s21, s0
 800f03a:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 800f03e:	4604      	mov	r4, r0
 800f040:	ee30 8ac8 	vsub.f32	s16, s1, s16
 800f044:	ee30 9a49 	vsub.f32	s18, s0, s18
 800f048:	eeb0 aa60 	vmov.f32	s20, s1
 800f04c:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f050:	eea9 0a09 	vfma.f32	s0, s18, s18
 800f054:	f010 fd9e 	bl	801fb94 <sqrtf>
 800f058:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f060:	dd36      	ble.n	800f0d0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 800f062:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800f066:	2600      	movs	r6, #0
 800f068:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 800f06c:	eec0 6a27 	vdiv.f32	s13, s0, s15
 800f070:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 800f074:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 800f078:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800f07c:	eec8 8a26 	vdiv.f32	s17, s16, s13
 800f080:	ee89 8a26 	vdiv.f32	s16, s18, s13
 800f084:	ee70 9a28 	vadd.f32	s19, s0, s17
 800f088:	ee78 8aaa 	vadd.f32	s17, s17, s21
 800f08c:	ee30 9ac8 	vsub.f32	s18, s1, s16
 800f090:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800f094:	b1fd      	cbz	r5, 800f0d6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 800f096:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 800f09a:	eef0 0a49 	vmov.f32	s1, s18
 800f09e:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 800f0a2:	eeb0 0a69 	vmov.f32	s0, s19
 800f0a6:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 800f0b0:	f7ff fd64 	bl	800eb7c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800f0b4:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 800f0b8:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 800f0bc:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 800f0c0:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 800f0c4:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 800f0c8:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 800f0cc:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 800f0d0:	ecbd 8b06 	vpop	{d8-d10}
 800f0d4:	bd70      	pop	{r4, r5, r6, pc}
 800f0d6:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 800f0da:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800f0de:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800f0e2:	b16b      	cbz	r3, 800f100 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 800f0e4:	eef0 1a49 	vmov.f32	s3, s18
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	eeb0 1a69 	vmov.f32	s2, s19
 800f0ee:	eef0 0a62 	vmov.f32	s1, s5
 800f0f2:	eeb0 0a42 	vmov.f32	s0, s4
 800f0f6:	f7ff feb1 	bl	800ee5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f0fa:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 800f0fe:	e7db      	b.n	800f0b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 800f100:	eef0 4a48 	vmov.f32	s9, s16
 800f104:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800f108:	eeb0 4a68 	vmov.f32	s8, s17
 800f10c:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800f110:	eef0 3a49 	vmov.f32	s7, s18
 800f114:	4620      	mov	r0, r4
 800f116:	eeb0 3a69 	vmov.f32	s6, s19
 800f11a:	f7ff fe13 	bl	800ed44 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800f11e:	e7cb      	b.n	800f0b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

0800f120 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 800f120:	ee07 2a90 	vmov	s15, r2
 800f124:	ee07 1a10 	vmov	s14, r1
 800f128:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800f12c:	eddf 7a04 	vldr	s15, [pc, #16]	@ 800f140 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 800f130:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800f134:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f138:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f13c:	f7ff bf76 	b.w	800f02c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f140:	3d000000 	.word	0x3d000000

0800f144 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 800f144:	b538      	push	{r3, r4, r5, lr}
 800f146:	ed2d 8b02 	vpush	{d8}
 800f14a:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 800f14e:	4604      	mov	r4, r0
 800f150:	b31d      	cbz	r5, 800f19a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 800f152:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 800f156:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800f15a:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 800f15e:	ee78 8a67 	vsub.f32	s17, s16, s15
 800f162:	ee38 8a27 	vadd.f32	s16, s16, s15
 800f166:	eef0 0a68 	vmov.f32	s1, s17
 800f16a:	f7ff fd07 	bl	800eb7c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800f16e:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800f172:	eef0 1a48 	vmov.f32	s3, s16
 800f176:	4620      	mov	r0, r4
 800f178:	eeb0 0a41 	vmov.f32	s0, s2
 800f17c:	eef0 0a68 	vmov.f32	s1, s17
 800f180:	f7ff fe6c 	bl	800ee5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f184:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800f188:	eef0 1a68 	vmov.f32	s3, s17
 800f18c:	4620      	mov	r0, r4
 800f18e:	eef0 0a48 	vmov.f32	s1, s16
 800f192:	eeb0 0a41 	vmov.f32	s0, s2
 800f196:	f7ff fe61 	bl	800ee5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f19a:	4628      	mov	r0, r5
 800f19c:	ecbd 8b02 	vpop	{d8}
 800f1a0:	bd38      	pop	{r3, r4, r5, pc}

0800f1a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 800f1a2:	b510      	push	{r4, lr}
 800f1a4:	ed2d 8b02 	vpush	{d8}
 800f1a8:	4604      	mov	r4, r0
 800f1aa:	eeb0 8a40 	vmov.f32	s16, s0
 800f1ae:	eef0 8a60 	vmov.f32	s17, s1
 800f1b2:	f7ff ffc7 	bl	800f144 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f1b6:	b9d0      	cbnz	r0, 800f1ee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 800f1be:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 800f1c2:	eef0 0a68 	vmov.f32	s1, s17
 800f1c6:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 800f1ca:	eeb0 0a48 	vmov.f32	s0, s16
 800f1ce:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 800f1d2:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800f1d6:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800f1da:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800f1de:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800f1e2:	f7ff fdaf 	bl	800ed44 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800f1e6:	2001      	movs	r0, #1
 800f1e8:	ecbd 8b02 	vpop	{d8}
 800f1ec:	bd10      	pop	{r4, pc}
 800f1ee:	2000      	movs	r0, #0
 800f1f0:	e7fa      	b.n	800f1e8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

0800f1f2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 800f1f2:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 800f1f6:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 800f1fa:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 800f1fe:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 800f202:	f7ff be2b 	b.w	800ee5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

0800f208 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 800f208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f20c:	b089      	sub	sp, #36	@ 0x24
 800f20e:	461c      	mov	r4, r3
 800f210:	4682      	mov	sl, r0
 800f212:	4615      	mov	r5, r2
 800f214:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800f218:	f10d 0820 	add.w	r8, sp, #32
 800f21c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f21e:	9304      	str	r3, [sp, #16]
 800f220:	2300      	movs	r3, #0
 800f222:	9105      	str	r1, [sp, #20]
 800f224:	9306      	str	r3, [sp, #24]
 800f226:	f848 3d04 	str.w	r3, [r8, #-4]!
 800f22a:	9b04      	ldr	r3, [sp, #16]
 800f22c:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 800f230:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 800f234:	9b05      	ldr	r3, [sp, #20]
 800f236:	429d      	cmp	r5, r3
 800f238:	d96d      	bls.n	800f316 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 800f23a:	3d01      	subs	r5, #1
 800f23c:	f819 3005 	ldrb.w	r3, [r9, r5]
 800f240:	2b06      	cmp	r3, #6
 800f242:	d8f7      	bhi.n	800f234 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f244:	a201      	add	r2, pc, #4	@ (adr r2, 800f24c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 800f246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f24a:	bf00      	nop
 800f24c:	0800f26b 	.word	0x0800f26b
 800f250:	0800f235 	.word	0x0800f235
 800f254:	0800f269 	.word	0x0800f269
 800f258:	0800f28d 	.word	0x0800f28d
 800f25c:	0800f28d 	.word	0x0800f28d
 800f260:	0800f291 	.word	0x0800f291
 800f264:	0800f2d1 	.word	0x0800f2d1
 800f268:	3c02      	subs	r4, #2
 800f26a:	4650      	mov	r0, sl
 800f26c:	9400      	str	r4, [sp, #0]
 800f26e:	462b      	mov	r3, r5
 800f270:	4642      	mov	r2, r8
 800f272:	a906      	add	r1, sp, #24
 800f274:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f278:	f7ff fcae 	bl	800ebd8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f27c:	eddd 0a07 	vldr	s1, [sp, #28]
 800f280:	ed9d 0a06 	vldr	s0, [sp, #24]
 800f284:	4630      	mov	r0, r6
 800f286:	f7ff fed1 	bl	800f02c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f28a:	e7d3      	b.n	800f234 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f28c:	3c01      	subs	r4, #1
 800f28e:	e7ec      	b.n	800f26a <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 800f290:	f1a4 0b04 	sub.w	fp, r4, #4
 800f294:	3c02      	subs	r4, #2
 800f296:	4650      	mov	r0, sl
 800f298:	462b      	mov	r3, r5
 800f29a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f29e:	f8cd b000 	str.w	fp, [sp]
 800f2a2:	4642      	mov	r2, r8
 800f2a4:	a906      	add	r1, sp, #24
 800f2a6:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f2aa:	f7ff fc95 	bl	800ebd8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f2ae:	eddd 2a07 	vldr	s5, [sp, #28]
 800f2b2:	ed9d 2a06 	vldr	s4, [sp, #24]
 800f2b6:	4630      	mov	r0, r6
 800f2b8:	ed54 1a01 	vldr	s3, [r4, #-4]
 800f2bc:	ed14 1a02 	vldr	s2, [r4, #-8]
 800f2c0:	edd4 0a01 	vldr	s1, [r4, #4]
 800f2c4:	ed94 0a00 	vldr	s0, [r4]
 800f2c8:	f7ff fc1a 	bl	800eb00 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f2cc:	465c      	mov	r4, fp
 800f2ce:	e7b1      	b.n	800f234 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f2d0:	f1a4 0b06 	sub.w	fp, r4, #6
 800f2d4:	3c02      	subs	r4, #2
 800f2d6:	4650      	mov	r0, sl
 800f2d8:	462b      	mov	r3, r5
 800f2da:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f2de:	f8cd b000 	str.w	fp, [sp]
 800f2e2:	4642      	mov	r2, r8
 800f2e4:	a906      	add	r1, sp, #24
 800f2e6:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f2ea:	f7ff fc75 	bl	800ebd8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f2ee:	eddd 3a07 	vldr	s7, [sp, #28]
 800f2f2:	ed9d 3a06 	vldr	s6, [sp, #24]
 800f2f6:	4630      	mov	r0, r6
 800f2f8:	ed54 2a03 	vldr	s5, [r4, #-12]
 800f2fc:	ed14 2a04 	vldr	s4, [r4, #-16]
 800f300:	ed54 1a01 	vldr	s3, [r4, #-4]
 800f304:	ed14 1a02 	vldr	s2, [r4, #-8]
 800f308:	edd4 0a01 	vldr	s1, [r4, #4]
 800f30c:	ed94 0a00 	vldr	s0, [r4]
 800f310:	f7ff fc15 	bl	800eb3e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f314:	e7da      	b.n	800f2cc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 800f316:	9b04      	ldr	r3, [sp, #16]
 800f318:	b113      	cbz	r3, 800f320 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 800f31a:	4630      	mov	r0, r6
 800f31c:	f7ff ff69 	bl	800f1f2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 800f320:	b009      	add	sp, #36	@ 0x24
 800f322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f326:	bf00      	nop

0800f328 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 800f328:	eef0 7a60 	vmov.f32	s15, s1
 800f32c:	6803      	ldr	r3, [r0, #0]
 800f32e:	689b      	ldr	r3, [r3, #8]
 800f330:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f334:	ee17 2a90 	vmov	r2, s15
 800f338:	eef0 7a40 	vmov.f32	s15, s0
 800f33c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f340:	ee17 1a90 	vmov	r1, s15
 800f344:	4718      	bx	r3
	...

0800f348 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 800f348:	4b04      	ldr	r3, [pc, #16]	@ (800f35c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 800f34a:	b510      	push	{r4, lr}
 800f34c:	4604      	mov	r4, r0
 800f34e:	f840 3b14 	str.w	r3, [r0], #20
 800f352:	f000 ffff 	bl	8010354 <_ZN8touchgfx7OutlineD1Ev>
 800f356:	4620      	mov	r0, r4
 800f358:	bd10      	pop	{r4, pc}
 800f35a:	bf00      	nop
 800f35c:	08024200 	.word	0x08024200

0800f360 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 800f360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f364:	ed2d 8b04 	vpush	{d8-d9}
 800f368:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 800f36c:	b0b5      	sub	sp, #212	@ 0xd4
 800f36e:	4605      	mov	r5, r0
 800f370:	468b      	mov	fp, r1
 800f372:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f376:	9206      	str	r2, [sp, #24]
 800f378:	461e      	mov	r6, r3
 800f37a:	2400      	movs	r4, #0
 800f37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f380:	f240 814f 	bls.w	800f622 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 800f384:	23ff      	movs	r3, #255	@ 0xff
 800f386:	1d02      	adds	r2, r0, #4
 800f388:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 800f628 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 800f38c:	f04f 0800 	mov.w	r8, #0
 800f390:	9300      	str	r3, [sp, #0]
 800f392:	af08      	add	r7, sp, #32
 800f394:	6981      	ldr	r1, [r0, #24]
 800f396:	a808      	add	r0, sp, #32
 800f398:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f39a:	eef0 9a49 	vmov.f32	s19, s18
 800f39e:	f00f ff2f 	bl	801f200 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800f3a2:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 800f3a6:	4ba1      	ldr	r3, [pc, #644]	@ (800f62c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 800f3a8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f3ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	9308      	str	r3, [sp, #32]
 800f3b4:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 800f3b8:	edd5 6a08 	vldr	s13, [r5, #32]
 800f3bc:	eeb0 8a49 	vmov.f32	s16, s18
 800f3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c4:	9325      	str	r3, [sp, #148]	@ 0x94
 800f3c6:	f04f 0300 	mov.w	r3, #0
 800f3ca:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 800f3ce:	7f6a      	ldrb	r2, [r5, #29]
 800f3d0:	eef0 8a49 	vmov.f32	s17, s18
 800f3d4:	bf48      	it	mi
 800f3d6:	eef1 7a67 	vnegmi.f32	s15, s15
 800f3da:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 800f3de:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 800f3e2:	46c1      	mov	r9, r8
 800f3e4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f3e8:	f04f 0a01 	mov.w	sl, #1
 800f3ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f3f0:	7fab      	ldrb	r3, [r5, #30]
 800f3f2:	942a      	str	r4, [sp, #168]	@ 0xa8
 800f3f4:	435a      	muls	r2, r3
 800f3f6:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 800f3fa:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800f3fe:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 800f402:	1c53      	adds	r3, r2, #1
 800f404:	942b      	str	r4, [sp, #172]	@ 0xac
 800f406:	942c      	str	r4, [sp, #176]	@ 0xb0
 800f408:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f40c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 800f410:	942d      	str	r4, [sp, #180]	@ 0xb4
 800f412:	942e      	str	r4, [sp, #184]	@ 0xb8
 800f414:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f41c:	942f      	str	r4, [sp, #188]	@ 0xbc
 800f41e:	9430      	str	r4, [sp, #192]	@ 0xc0
 800f420:	9431      	str	r4, [sp, #196]	@ 0xc4
 800f422:	9432      	str	r4, [sp, #200]	@ 0xc8
 800f424:	9433      	str	r4, [sp, #204]	@ 0xcc
 800f426:	4644      	mov	r4, r8
 800f428:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800f42c:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 800f430:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 800f434:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 800f438:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 800f43c:	9b06      	ldr	r3, [sp, #24]
 800f43e:	454b      	cmp	r3, r9
 800f440:	f000 80cc 	beq.w	800f5dc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 800f444:	f109 0301 	add.w	r3, r9, #1
 800f448:	9305      	str	r3, [sp, #20]
 800f44a:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800f44e:	2b06      	cmp	r3, #6
 800f450:	d839      	bhi.n	800f4c6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f452:	e8df f003 	tbb	[pc, r3]
 800f456:	3b04      	.short	0x3b04
 800f458:	817c6f60 	.word	0x817c6f60
 800f45c:	a0          	.byte	0xa0
 800f45d:	00          	.byte	0x00
 800f45e:	45c1      	cmp	r9, r8
 800f460:	d92b      	bls.n	800f4ba <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 800f462:	eef0 0a49 	vmov.f32	s1, s18
 800f466:	4638      	mov	r0, r7
 800f468:	eeb0 0a69 	vmov.f32	s0, s19
 800f46c:	f7ff fdde 	bl	800f02c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f470:	4638      	mov	r0, r7
 800f472:	f7ff fe67 	bl	800f144 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f476:	4681      	mov	r9, r0
 800f478:	b9f8      	cbnz	r0, 800f4ba <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 800f47a:	eef0 0a49 	vmov.f32	s1, s18
 800f47e:	4638      	mov	r0, r7
 800f480:	eeb0 0a69 	vmov.f32	s0, s19
 800f484:	f7ff fe8d 	bl	800f1a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 800f488:	4628      	mov	r0, r5
 800f48a:	4623      	mov	r3, r4
 800f48c:	9a05      	ldr	r2, [sp, #20]
 800f48e:	4641      	mov	r1, r8
 800f490:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 800f494:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 800f498:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 800f49c:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 800f4a0:	e9cd 9702 	strd	r9, r7, [sp, #8]
 800f4a4:	e9cd b600 	strd	fp, r6, [sp]
 800f4a8:	f7ff feae 	bl	800f208 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f4ac:	eef0 0a49 	vmov.f32	s1, s18
 800f4b0:	eeb0 0a69 	vmov.f32	s0, s19
 800f4b4:	4638      	mov	r0, r7
 800f4b6:	f7ff fe74 	bl	800f1a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 800f4ba:	eeb0 8a49 	vmov.f32	s16, s18
 800f4be:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f4c2:	eef0 8a69 	vmov.f32	s17, s19
 800f4c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f4ca:	e7b7      	b.n	800f43c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 800f4cc:	45c1      	cmp	r9, r8
 800f4ce:	d90d      	bls.n	800f4ec <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 800f4d0:	4638      	mov	r0, r7
 800f4d2:	f7ff fe37 	bl	800f144 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f4d6:	b948      	cbnz	r0, 800f4ec <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 800f4d8:	4623      	mov	r3, r4
 800f4da:	464a      	mov	r2, r9
 800f4dc:	4641      	mov	r1, r8
 800f4de:	4628      	mov	r0, r5
 800f4e0:	e9cd a702 	strd	sl, r7, [sp, #8]
 800f4e4:	e9cd b600 	strd	fp, r6, [sp]
 800f4e8:	f7ff fe8e 	bl	800f208 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f4ec:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f4f0:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 800f4f4:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 800f4f8:	3402      	adds	r4, #2
 800f4fa:	edd3 8a00 	vldr	s17, [r3]
 800f4fe:	46c8      	mov	r8, r9
 800f500:	ed93 8a01 	vldr	s16, [r3, #4]
 800f504:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 800f508:	eef0 9a68 	vmov.f32	s19, s17
 800f50c:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 800f510:	eeb0 9a48 	vmov.f32	s18, s16
 800f514:	e7d7      	b.n	800f4c6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f516:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f51a:	4638      	mov	r0, r7
 800f51c:	3402      	adds	r4, #2
 800f51e:	edd3 8a00 	vldr	s17, [r3]
 800f522:	ed93 8a01 	vldr	s16, [r3, #4]
 800f526:	eeb0 0a68 	vmov.f32	s0, s17
 800f52a:	eef0 0a48 	vmov.f32	s1, s16
 800f52e:	f7ff fd7d 	bl	800f02c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f532:	e7c8      	b.n	800f4c6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f534:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f538:	edd3 8a00 	vldr	s17, [r3]
 800f53c:	eef0 0a48 	vmov.f32	s1, s16
 800f540:	4638      	mov	r0, r7
 800f542:	eeb0 0a68 	vmov.f32	s0, s17
 800f546:	3401      	adds	r4, #1
 800f548:	f7ff fd70 	bl	800f02c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f54c:	e7bb      	b.n	800f4c6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f54e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f552:	ed93 8a00 	vldr	s16, [r3]
 800f556:	e7f1      	b.n	800f53c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 800f558:	00a3      	lsls	r3, r4, #2
 800f55a:	eef0 0a48 	vmov.f32	s1, s16
 800f55e:	eeb0 0a68 	vmov.f32	s0, s17
 800f562:	4638      	mov	r0, r7
 800f564:	f103 0208 	add.w	r2, r3, #8
 800f568:	f103 090c 	add.w	r9, r3, #12
 800f56c:	4433      	add	r3, r6
 800f56e:	3404      	adds	r4, #4
 800f570:	4432      	add	r2, r6
 800f572:	44b1      	add	r9, r6
 800f574:	edd3 1a01 	vldr	s3, [r3, #4]
 800f578:	ed92 2a00 	vldr	s4, [r2]
 800f57c:	edd9 2a00 	vldr	s5, [r9]
 800f580:	ed93 1a00 	vldr	s2, [r3]
 800f584:	9207      	str	r2, [sp, #28]
 800f586:	f7ff fabb 	bl	800eb00 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f58a:	9a07      	ldr	r2, [sp, #28]
 800f58c:	ed99 8a00 	vldr	s16, [r9]
 800f590:	edd2 8a00 	vldr	s17, [r2]
 800f594:	e797      	b.n	800f4c6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f596:	00a3      	lsls	r3, r4, #2
 800f598:	eef0 0a48 	vmov.f32	s1, s16
 800f59c:	eeb0 0a68 	vmov.f32	s0, s17
 800f5a0:	4638      	mov	r0, r7
 800f5a2:	f103 0210 	add.w	r2, r3, #16
 800f5a6:	f103 0914 	add.w	r9, r3, #20
 800f5aa:	4433      	add	r3, r6
 800f5ac:	3406      	adds	r4, #6
 800f5ae:	4432      	add	r2, r6
 800f5b0:	44b1      	add	r9, r6
 800f5b2:	edd3 2a03 	vldr	s5, [r3, #12]
 800f5b6:	ed92 3a00 	vldr	s6, [r2]
 800f5ba:	edd9 3a00 	vldr	s7, [r9]
 800f5be:	ed93 2a02 	vldr	s4, [r3, #8]
 800f5c2:	edd3 1a01 	vldr	s3, [r3, #4]
 800f5c6:	ed93 1a00 	vldr	s2, [r3]
 800f5ca:	9207      	str	r2, [sp, #28]
 800f5cc:	f7ff fab7 	bl	800eb3e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f5d0:	9a07      	ldr	r2, [sp, #28]
 800f5d2:	ed99 8a00 	vldr	s16, [r9]
 800f5d6:	edd2 8a00 	vldr	s17, [r2]
 800f5da:	e774      	b.n	800f4c6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f5dc:	9b06      	ldr	r3, [sp, #24]
 800f5de:	af08      	add	r7, sp, #32
 800f5e0:	4543      	cmp	r3, r8
 800f5e2:	d90f      	bls.n	800f604 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 800f5e4:	4638      	mov	r0, r7
 800f5e6:	f7ff fdad 	bl	800f144 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f5ea:	b958      	cbnz	r0, 800f604 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	9703      	str	r7, [sp, #12]
 800f5f0:	f8cd b000 	str.w	fp, [sp]
 800f5f4:	4641      	mov	r1, r8
 800f5f6:	9a06      	ldr	r2, [sp, #24]
 800f5f8:	4628      	mov	r0, r5
 800f5fa:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800f5fe:	4623      	mov	r3, r4
 800f600:	f7ff fe02 	bl	800f208 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f604:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 800f608:	4638      	mov	r0, r7
 800f60a:	f00f fe8d 	bl	801f328 <_ZN8touchgfx6Canvas6renderEh>
 800f60e:	4604      	mov	r4, r0
 800f610:	4638      	mov	r0, r7
 800f612:	f7ff fe99 	bl	800f348 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 800f616:	4620      	mov	r0, r4
 800f618:	b035      	add	sp, #212	@ 0xd4
 800f61a:	ecbd 8b04 	vpop	{d8-d9}
 800f61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f622:	2401      	movs	r4, #1
 800f624:	e7f7      	b.n	800f616 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 800f626:	bf00      	nop
 800f628:	00000000 	.word	0x00000000
 800f62c:	08023c74 	.word	0x08023c74

0800f630 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 800f630:	b510      	push	{r4, lr}
 800f632:	4604      	mov	r4, r0
 800f634:	f7ff fe88 	bl	800f348 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 800f638:	21b0      	movs	r1, #176	@ 0xb0
 800f63a:	4620      	mov	r0, r4
 800f63c:	f010 fa60 	bl	801fb00 <_ZdlPvj>
 800f640:	4620      	mov	r0, r4
 800f642:	bd10      	pop	{r4, pc}

0800f644 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 800f644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f648:	4698      	mov	r8, r3
 800f64a:	23ff      	movs	r3, #255	@ 0xff
 800f64c:	4607      	mov	r7, r0
 800f64e:	4689      	mov	r9, r1
 800f650:	4692      	mov	sl, r2
 800f652:	1d02      	adds	r2, r0, #4
 800f654:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 800f658:	2400      	movs	r4, #0
 800f65a:	44ca      	add	sl, r9
 800f65c:	ed2d 8b06 	vpush	{d8-d10}
 800f660:	b0aa      	sub	sp, #168	@ 0xa8
 800f662:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 800f868 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 800f666:	9300      	str	r3, [sp, #0]
 800f668:	eef0 8a48 	vmov.f32	s17, s16
 800f66c:	6981      	ldr	r1, [r0, #24]
 800f66e:	a80d      	add	r0, sp, #52	@ 0x34
 800f670:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800f672:	f00f fdc5 	bl	801f200 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800f676:	7f3b      	ldrb	r3, [r7, #28]
 800f678:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 800f868 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 800f67c:	4628      	mov	r0, r5
 800f67e:	1e5a      	subs	r2, r3, #1
 800f680:	eeb0 0a60 	vmov.f32	s0, s1
 800f684:	4253      	negs	r3, r2
 800f686:	4153      	adcs	r3, r2
 800f688:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 800f68c:	f004 fdcd 	bl	801422a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f690:	eeb0 9a40 	vmov.f32	s18, s0
 800f694:	eef0 9a60 	vmov.f32	s19, s1
 800f698:	45ca      	cmp	sl, r9
 800f69a:	f000 80cd 	beq.w	800f838 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 800f69e:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f6a2:	2b06      	cmp	r3, #6
 800f6a4:	d8f8      	bhi.n	800f698 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f6a6:	e8df f003 	tbb	[pc, r3]
 800f6aa:	0804      	.short	0x0804
 800f6ac:	58533f2a 	.word	0x58533f2a
 800f6b0:	8a          	.byte	0x8a
 800f6b1:	00          	.byte	0x00
 800f6b2:	a80d      	add	r0, sp, #52	@ 0x34
 800f6b4:	f00f fe16 	bl	801f2e4 <_ZN8touchgfx6Canvas5closeEv>
 800f6b8:	e7ee      	b.n	800f698 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f6ba:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f6be:	4628      	mov	r0, r5
 800f6c0:	ed93 8a01 	vldr	s16, [r3, #4]
 800f6c4:	edd3 8a00 	vldr	s17, [r3]
 800f6c8:	eef0 0a48 	vmov.f32	s1, s16
 800f6cc:	eeb0 0a68 	vmov.f32	s0, s17
 800f6d0:	f004 fdab 	bl	801422a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f6d4:	a80d      	add	r0, sp, #52	@ 0x34
 800f6d6:	eef0 7a60 	vmov.f32	s15, s1
 800f6da:	eeb0 9a40 	vmov.f32	s18, s0
 800f6de:	eef0 9a60 	vmov.f32	s19, s1
 800f6e2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f6e6:	ee17 2a90 	vmov	r2, s15
 800f6ea:	eef0 7a40 	vmov.f32	s15, s0
 800f6ee:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f6f2:	ee17 1a90 	vmov	r1, s15
 800f6f6:	f00f fecf 	bl	801f498 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 800f6fa:	3402      	adds	r4, #2
 800f6fc:	e7cc      	b.n	800f698 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f6fe:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f702:	4628      	mov	r0, r5
 800f704:	edd3 8a00 	vldr	s17, [r3]
 800f708:	ed93 8a01 	vldr	s16, [r3, #4]
 800f70c:	eeb0 0a68 	vmov.f32	s0, s17
 800f710:	eef0 0a48 	vmov.f32	s1, s16
 800f714:	f004 fd89 	bl	801422a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f718:	a80d      	add	r0, sp, #52	@ 0x34
 800f71a:	eeb0 9a40 	vmov.f32	s18, s0
 800f71e:	eef0 9a60 	vmov.f32	s19, s1
 800f722:	f7ff fe01 	bl	800f328 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 800f726:	e7e8      	b.n	800f6fa <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 800f728:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f72c:	edd3 8a00 	vldr	s17, [r3]
 800f730:	eef0 0a48 	vmov.f32	s1, s16
 800f734:	4628      	mov	r0, r5
 800f736:	eeb0 0a68 	vmov.f32	s0, s17
 800f73a:	3401      	adds	r4, #1
 800f73c:	f004 fd75 	bl	801422a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f740:	a80d      	add	r0, sp, #52	@ 0x34
 800f742:	eef0 9a60 	vmov.f32	s19, s1
 800f746:	eeb0 9a40 	vmov.f32	s18, s0
 800f74a:	f7ff fded 	bl	800f328 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 800f74e:	e7a3      	b.n	800f698 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f750:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f754:	ed93 8a00 	vldr	s16, [r3]
 800f758:	e7ea      	b.n	800f730 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 800f75a:	1ca3      	adds	r3, r4, #2
 800f75c:	4628      	mov	r0, r5
 800f75e:	3404      	adds	r4, #4
 800f760:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800f764:	ed53 0a01 	vldr	s1, [r3, #-4]
 800f768:	ed13 0a02 	vldr	s0, [r3, #-8]
 800f76c:	edd3 8a00 	vldr	s17, [r3]
 800f770:	ed93 8a01 	vldr	s16, [r3, #4]
 800f774:	f004 fd59 	bl	801422a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f778:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 800f77c:	eeb0 0a68 	vmov.f32	s0, s17
 800f780:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 800f784:	eef0 0a48 	vmov.f32	s1, s16
 800f788:	4628      	mov	r0, r5
 800f78a:	f004 fd4e 	bl	801422a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f78e:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 800f792:	eef0 2a60 	vmov.f32	s5, s1
 800f796:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 800f79a:	eeb0 2a40 	vmov.f32	s4, s0
 800f79e:	a80d      	add	r0, sp, #52	@ 0x34
 800f7a0:	eeb0 aa40 	vmov.f32	s20, s0
 800f7a4:	eef0 aa60 	vmov.f32	s21, s1
 800f7a8:	eeb0 0a49 	vmov.f32	s0, s18
 800f7ac:	eef0 0a69 	vmov.f32	s1, s19
 800f7b0:	f7ff f9a6 	bl	800eb00 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f7b4:	eef0 9a6a 	vmov.f32	s19, s21
 800f7b8:	eeb0 9a4a 	vmov.f32	s18, s20
 800f7bc:	e76c      	b.n	800f698 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f7be:	1d26      	adds	r6, r4, #4
 800f7c0:	4628      	mov	r0, r5
 800f7c2:	3406      	adds	r4, #6
 800f7c4:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f7c8:	ed56 0a03 	vldr	s1, [r6, #-12]
 800f7cc:	ed16 0a04 	vldr	s0, [r6, #-16]
 800f7d0:	edd6 8a00 	vldr	s17, [r6]
 800f7d4:	ed96 8a01 	vldr	s16, [r6, #4]
 800f7d8:	f004 fd27 	bl	801422a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f7dc:	ed8d 0a07 	vstr	s0, [sp, #28]
 800f7e0:	4628      	mov	r0, r5
 800f7e2:	ed16 0a02 	vldr	s0, [r6, #-8]
 800f7e6:	edcd 0a08 	vstr	s1, [sp, #32]
 800f7ea:	ed56 0a01 	vldr	s1, [r6, #-4]
 800f7ee:	f004 fd1c 	bl	801422a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f7f2:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 800f7f6:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 800f7fa:	eeb0 0a68 	vmov.f32	s0, s17
 800f7fe:	eef0 0a48 	vmov.f32	s1, s16
 800f802:	4628      	mov	r0, r5
 800f804:	f004 fd11 	bl	801422a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f808:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 800f80c:	eeb0 3a40 	vmov.f32	s6, s0
 800f810:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 800f814:	eef0 3a60 	vmov.f32	s7, s1
 800f818:	eddd 1a08 	vldr	s3, [sp, #32]
 800f81c:	eeb0 aa40 	vmov.f32	s20, s0
 800f820:	ed9d 1a07 	vldr	s2, [sp, #28]
 800f824:	eef0 aa60 	vmov.f32	s21, s1
 800f828:	a80d      	add	r0, sp, #52	@ 0x34
 800f82a:	eef0 0a69 	vmov.f32	s1, s19
 800f82e:	eeb0 0a49 	vmov.f32	s0, s18
 800f832:	f7ff f984 	bl	800eb3e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f836:	e7bd      	b.n	800f7b4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 800f838:	7f7b      	ldrb	r3, [r7, #29]
 800f83a:	a80d      	add	r0, sp, #52	@ 0x34
 800f83c:	7fb9      	ldrb	r1, [r7, #30]
 800f83e:	4359      	muls	r1, r3
 800f840:	1c4b      	adds	r3, r1, #1
 800f842:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 800f846:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f84a:	f00f fd6d 	bl	801f328 <_ZN8touchgfx6Canvas6renderEh>
 800f84e:	4b07      	ldr	r3, [pc, #28]	@ (800f86c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 800f850:	4604      	mov	r4, r0
 800f852:	a812      	add	r0, sp, #72	@ 0x48
 800f854:	930d      	str	r3, [sp, #52]	@ 0x34
 800f856:	f000 fd7d 	bl	8010354 <_ZN8touchgfx7OutlineD1Ev>
 800f85a:	4620      	mov	r0, r4
 800f85c:	b02a      	add	sp, #168	@ 0xa8
 800f85e:	ecbd 8b06 	vpop	{d8-d10}
 800f862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f866:	bf00      	nop
 800f868:	00000000 	.word	0x00000000
 800f86c:	08024200 	.word	0x08024200

0800f870 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 800f870:	b410      	push	{r4}
 800f872:	7f04      	ldrb	r4, [r0, #28]
 800f874:	b11c      	cbz	r4, 800f87e <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 800f876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f87a:	f7ff bee3 	b.w	800f644 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 800f87e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f882:	f7ff bd6d 	b.w	800f360 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

0800f886 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 800f886:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f88a:	4691      	mov	r9, r2
 800f88c:	4602      	mov	r2, r0
 800f88e:	4606      	mov	r6, r0
 800f890:	4688      	mov	r8, r1
 800f892:	f852 0f26 	ldr.w	r0, [r2, #38]!
 800f896:	469a      	mov	sl, r3
 800f898:	ab02      	add	r3, sp, #8
 800f89a:	af02      	add	r7, sp, #8
 800f89c:	6851      	ldr	r1, [r2, #4]
 800f89e:	c303      	stmia	r3!, {r0, r1}
 800f8a0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	dd2f      	ble.n	800f908 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 800f8a8:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 800f8ac:	2c00      	cmp	r4, #0
 800f8ae:	dd2b      	ble.n	800f908 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 800f8b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f8b4:	441c      	add	r4, r3
 800f8b6:	b2a4      	uxth	r4, r4
 800f8b8:	b225      	sxth	r5, r4
 800f8ba:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800f8be:	42ab      	cmp	r3, r5
 800f8c0:	da22      	bge.n	800f908 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 800f8c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f8c4:	464a      	mov	r2, r9
 800f8c6:	9701      	str	r7, [sp, #4]
 800f8c8:	4641      	mov	r1, r8
 800f8ca:	9300      	str	r3, [sp, #0]
 800f8cc:	4630      	mov	r0, r6
 800f8ce:	4653      	mov	r3, sl
 800f8d0:	f7ff ffce 	bl	800f870 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 800f8d4:	b940      	cbnz	r0, 800f8e8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 800f8d6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d004      	beq.n	800f8e8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 800f8de:	3301      	adds	r3, #1
 800f8e0:	105b      	asrs	r3, r3, #1
 800f8e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f8e6:	e7ec      	b.n	800f8c2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 800f8e8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800f8ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	b29b      	uxth	r3, r3
 800f8f4:	441a      	add	r2, r3
 800f8f6:	f8ad 300a 	strh.w	r3, [sp, #10]
 800f8fa:	b212      	sxth	r2, r2
 800f8fc:	4295      	cmp	r5, r2
 800f8fe:	dadc      	bge.n	800f8ba <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 800f900:	1ae3      	subs	r3, r4, r3
 800f902:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f906:	e7d8      	b.n	800f8ba <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 800f908:	b004      	add	sp, #16
 800f90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f90e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800f90e:	0c0b      	lsrs	r3, r1, #16
 800f910:	60c1      	str	r1, [r0, #12]
 800f912:	7481      	strb	r1, [r0, #18]
 800f914:	7403      	strb	r3, [r0, #16]
 800f916:	0a0b      	lsrs	r3, r1, #8
 800f918:	7443      	strb	r3, [r0, #17]
 800f91a:	4770      	bx	lr

0800f91c <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800f91c:	f1a0 0008 	sub.w	r0, r0, #8
 800f920:	e7f5      	b.n	800f90e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

0800f924 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 800f924:	b508      	push	{r3, lr}
 800f926:	4b05      	ldr	r3, [pc, #20]	@ (800f93c <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 800f928:	6818      	ldr	r0, [r3, #0]
 800f92a:	6803      	ldr	r3, [r0, #0]
 800f92c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f930:	4798      	blx	r3
 800f932:	1e43      	subs	r3, r0, #1
 800f934:	4258      	negs	r0, r3
 800f936:	4158      	adcs	r0, r3
 800f938:	bd08      	pop	{r3, pc}
 800f93a:	bf00      	nop
 800f93c:	24025140 	.word	0x24025140

0800f940 <_ZN8touchgfx13PainterRGB888D1Ev>:
 800f940:	4770      	bx	lr

0800f942 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 800f942:	3808      	subs	r0, #8
 800f944:	4770      	bx	lr

0800f946 <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 800f946:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f94a:	b410      	push	{r4}
 800f94c:	188c      	adds	r4, r1, r2
 800f94e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f952:	68c2      	ldr	r2, [r0, #12]
 800f954:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800f958:	4620      	mov	r0, r4
 800f95a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f95e:	f7f3 ba85 	b.w	8002e6c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0800f962 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 800f962:	f7f3 ba79 	b.w	8002e58 <_ZN8touchgfx5paint8tearDownEv>

0800f966 <_ZN8touchgfx13PainterRGB888D0Ev>:
 800f966:	b510      	push	{r4, lr}
 800f968:	4604      	mov	r4, r0
 800f96a:	2114      	movs	r1, #20
 800f96c:	f010 f8c8 	bl	801fb00 <_ZdlPvj>
 800f970:	4620      	mov	r0, r4
 800f972:	bd10      	pop	{r4, pc}

0800f974 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 800f974:	f1a0 0008 	sub.w	r0, r0, #8
 800f978:	e7f5      	b.n	800f966 <_ZN8touchgfx13PainterRGB888D0Ev>
	...

0800f97c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 800f97c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f984:	4411      	add	r1, r2
 800f986:	7c42      	ldrb	r2, [r0, #17]
 800f988:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 800f98c:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 800f990:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 800f994:	2a00      	cmp	r2, #0
 800f996:	f000 8084 	beq.w	800faa2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 800f99a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800f99e:	ed90 7a08 	vldr	s14, [r0, #32]
 800f9a2:	42a2      	cmp	r2, r4
 800f9a4:	68c3      	ldr	r3, [r0, #12]
 800f9a6:	db20      	blt.n	800f9ea <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 800f9a8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f9ac:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800f9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9b4:	bfc8      	it	gt
 800f9b6:	2200      	movgt	r2, #0
 800f9b8:	589a      	ldr	r2, [r3, r2]
 800f9ba:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800f9be:	7c03      	ldrb	r3, [r0, #16]
 800f9c0:	fa5f fc82 	uxtb.w	ip, r2
 800f9c4:	f3c2 2707 	ubfx	r7, r2, #8, #8
 800f9c8:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800f9cc:	440e      	add	r6, r1
 800f9ce:	b36b      	cbz	r3, 800fa2c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 800f9d0:	2dff      	cmp	r5, #255	@ 0xff
 800f9d2:	d12b      	bne.n	800fa2c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 800f9d4:	42b1      	cmp	r1, r6
 800f9d6:	f080 8204 	bcs.w	800fde2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800f9da:	f881 c000 	strb.w	ip, [r1]
 800f9de:	3103      	adds	r1, #3
 800f9e0:	f801 7c02 	strb.w	r7, [r1, #-2]
 800f9e4:	f801 4c01 	strb.w	r4, [r1, #-1]
 800f9e8:	e7f4      	b.n	800f9d4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 800f9ea:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800f9ee:	42a7      	cmp	r7, r4
 800f9f0:	dc08      	bgt.n	800fa04 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 800f9f2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f9f6:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800f9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9fe:	bfd8      	it	le
 800fa00:	2200      	movle	r2, #0
 800fa02:	e7d9      	b.n	800f9b8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 800fa04:	1aa2      	subs	r2, r4, r2
 800fa06:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fa0a:	ee07 2a90 	vmov	s15, r2
 800fa0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa16:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa1e:	ee17 2a90 	vmov	r2, s15
 800fa22:	bfd8      	it	le
 800fa24:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 800fa28:	0092      	lsls	r2, r2, #2
 800fa2a:	e7c5      	b.n	800f9b8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 800fa2c:	0e12      	lsrs	r2, r2, #24
 800fa2e:	4355      	muls	r5, r2
 800fa30:	1c6a      	adds	r2, r5, #1
 800fa32:	eb02 2525 	add.w	r5, r2, r5, asr #8
 800fa36:	122d      	asrs	r5, r5, #8
 800fa38:	43e8      	mvns	r0, r5
 800fa3a:	b2ad      	uxth	r5, r5
 800fa3c:	fb1c fc05 	smulbb	ip, ip, r5
 800fa40:	b2c0      	uxtb	r0, r0
 800fa42:	fb17 f705 	smulbb	r7, r7, r5
 800fa46:	fb14 f505 	smulbb	r5, r4, r5
 800fa4a:	fa1f fc8c 	uxth.w	ip, ip
 800fa4e:	b2bf      	uxth	r7, r7
 800fa50:	b2ad      	uxth	r5, r5
 800fa52:	428e      	cmp	r6, r1
 800fa54:	f101 0303 	add.w	r3, r1, #3
 800fa58:	f240 81c3 	bls.w	800fde2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fa5c:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 800fa60:	fb02 c200 	mla	r2, r2, r0, ip
 800fa64:	b292      	uxth	r2, r2
 800fa66:	1c51      	adds	r1, r2, #1
 800fa68:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800fa6c:	1212      	asrs	r2, r2, #8
 800fa6e:	f803 2c03 	strb.w	r2, [r3, #-3]
 800fa72:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 800fa76:	fb02 7200 	mla	r2, r2, r0, r7
 800fa7a:	b292      	uxth	r2, r2
 800fa7c:	1c51      	adds	r1, r2, #1
 800fa7e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800fa82:	1212      	asrs	r2, r2, #8
 800fa84:	f803 2c02 	strb.w	r2, [r3, #-2]
 800fa88:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800fa8c:	fb02 5200 	mla	r2, r2, r0, r5
 800fa90:	b292      	uxth	r2, r2
 800fa92:	1c51      	adds	r1, r2, #1
 800fa94:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800fa98:	4619      	mov	r1, r3
 800fa9a:	1212      	asrs	r2, r2, #8
 800fa9c:	f803 2c01 	strb.w	r2, [r3, #-1]
 800faa0:	e7d7      	b.n	800fa52 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 800faa2:	7c82      	ldrb	r2, [r0, #18]
 800faa4:	2a00      	cmp	r2, #0
 800faa6:	d047      	beq.n	800fb38 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 800faa8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800faac:	ee07 2a10 	vmov	s14, r2
 800fab0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fab4:	ee07 3a90 	vmov	s15, r3
 800fab8:	461a      	mov	r2, r3
 800faba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fabe:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac6:	f200 808e 	bhi.w	800fbe6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 800faca:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800face:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800fad2:	68c7      	ldr	r7, [r0, #12]
 800fad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fad8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fadc:	ee06 6a90 	vmov	s13, r6
 800fae0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fae4:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faec:	bf4a      	itet	mi
 800faee:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 800faf2:	4634      	movpl	r4, r6
 800faf4:	ee17 4a90 	vmovmi	r4, s15
 800faf8:	edd0 7a08 	vldr	s15, [r0, #32]
 800fafc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fb00:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 800fb04:	448e      	add	lr, r1
 800fb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb0a:	bfc8      	it	gt
 800fb0c:	2200      	movgt	r2, #0
 800fb0e:	58bf      	ldr	r7, [r7, r2]
 800fb10:	7c02      	ldrb	r2, [r0, #16]
 800fb12:	fa5f f987 	uxtb.w	r9, r7
 800fb16:	f3c7 2807 	ubfx	r8, r7, #8, #8
 800fb1a:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 800fb1e:	b31a      	cbz	r2, 800fb68 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 800fb20:	2dff      	cmp	r5, #255	@ 0xff
 800fb22:	d121      	bne.n	800fb68 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 800fb24:	4571      	cmp	r1, lr
 800fb26:	d25d      	bcs.n	800fbe4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 800fb28:	f881 9000 	strb.w	r9, [r1]
 800fb2c:	3103      	adds	r1, #3
 800fb2e:	f801 8c02 	strb.w	r8, [r1, #-2]
 800fb32:	f801 cc01 	strb.w	ip, [r1, #-1]
 800fb36:	e7f5      	b.n	800fb24 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 800fb38:	ee07 4a90 	vmov	s15, r4
 800fb3c:	ed90 7a06 	vldr	s14, [r0, #24]
 800fb40:	edd0 6a05 	vldr	s13, [r0, #20]
 800fb44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb4c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fb50:	edd0 7a08 	vldr	s15, [r0, #32]
 800fb54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb5c:	bf44      	itt	mi
 800fb5e:	edd0 7a07 	vldrmi	s15, [r0, #28]
 800fb62:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 800fb66:	e7a5      	b.n	800fab4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 800fb68:	0e3f      	lsrs	r7, r7, #24
 800fb6a:	436f      	muls	r7, r5
 800fb6c:	1c7a      	adds	r2, r7, #1
 800fb6e:	eb02 2227 	add.w	r2, r2, r7, asr #8
 800fb72:	1212      	asrs	r2, r2, #8
 800fb74:	ea6f 0a02 	mvn.w	sl, r2
 800fb78:	b292      	uxth	r2, r2
 800fb7a:	fb19 f902 	smulbb	r9, r9, r2
 800fb7e:	fa5f fa8a 	uxtb.w	sl, sl
 800fb82:	fb18 f802 	smulbb	r8, r8, r2
 800fb86:	fb1c fc02 	smulbb	ip, ip, r2
 800fb8a:	fa1f f989 	uxth.w	r9, r9
 800fb8e:	fa1f f888 	uxth.w	r8, r8
 800fb92:	fa1f fc8c 	uxth.w	ip, ip
 800fb96:	458e      	cmp	lr, r1
 800fb98:	f101 0203 	add.w	r2, r1, #3
 800fb9c:	d922      	bls.n	800fbe4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 800fb9e:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800fba2:	fb01 910a 	mla	r1, r1, sl, r9
 800fba6:	b289      	uxth	r1, r1
 800fba8:	1c4f      	adds	r7, r1, #1
 800fbaa:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fbae:	1209      	asrs	r1, r1, #8
 800fbb0:	f802 1c03 	strb.w	r1, [r2, #-3]
 800fbb4:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800fbb8:	fb01 810a 	mla	r1, r1, sl, r8
 800fbbc:	b289      	uxth	r1, r1
 800fbbe:	1c4f      	adds	r7, r1, #1
 800fbc0:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fbc4:	1209      	asrs	r1, r1, #8
 800fbc6:	f802 1c02 	strb.w	r1, [r2, #-2]
 800fbca:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800fbce:	fb01 c10a 	mla	r1, r1, sl, ip
 800fbd2:	b289      	uxth	r1, r1
 800fbd4:	1c4f      	adds	r7, r1, #1
 800fbd6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fbda:	1209      	asrs	r1, r1, #8
 800fbdc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fbe0:	4611      	mov	r1, r2
 800fbe2:	e7d8      	b.n	800fb96 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 800fbe4:	191a      	adds	r2, r3, r4
 800fbe6:	4433      	add	r3, r6
 800fbe8:	b21b      	sxth	r3, r3
 800fbea:	4293      	cmp	r3, r2
 800fbec:	f340 80f9 	ble.w	800fde2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fbf0:	edd0 7a07 	vldr	s15, [r0, #28]
 800fbf4:	ee06 2a90 	vmov	s13, r2
 800fbf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbfc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fc00:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fc04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc08:	f340 80b0 	ble.w	800fd6c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 800fc0c:	ee06 3a10 	vmov	s12, r3
 800fc10:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800fc14:	eddf 5a74 	vldr	s11, [pc, #464]	@ 800fde8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 800fc18:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800fc1c:	eef4 7ac6 	vcmpe.f32	s15, s12
 800fc20:	ed90 6a08 	vldr	s12, [r0, #32]
 800fc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc28:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800fc2c:	bfd6      	itet	le
 800fc2e:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 800fc32:	469c      	movgt	ip, r3
 800fc34:	ee17 ca90 	vmovle	ip, s15
 800fc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc3c:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 800fdec <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 800fc40:	ebac 0202 	sub.w	r2, ip, r2
 800fc44:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 800fc48:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fc4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fc50:	188c      	adds	r4, r1, r2
 800fc52:	7c02      	ldrb	r2, [r0, #16]
 800fc54:	b1d2      	cbz	r2, 800fc8c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 800fc56:	2dff      	cmp	r5, #255	@ 0xff
 800fc58:	d118      	bne.n	800fc8c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 800fc5a:	42a1      	cmp	r1, r4
 800fc5c:	d261      	bcs.n	800fd22 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 800fc5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fc62:	68c6      	ldr	r6, [r0, #12]
 800fc64:	3103      	adds	r1, #3
 800fc66:	ee17 7a10 	vmov	r7, s14
 800fc6a:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 800fc6e:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 800fc72:	f801 6c03 	strb.w	r6, [r1, #-3]
 800fc76:	7856      	ldrb	r6, [r2, #1]
 800fc78:	f801 6c02 	strb.w	r6, [r1, #-2]
 800fc7c:	7892      	ldrb	r2, [r2, #2]
 800fc7e:	f801 2c01 	strb.w	r2, [r1, #-1]
 800fc82:	ed90 7a08 	vldr	s14, [r0, #32]
 800fc86:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fc8a:	e7e6      	b.n	800fc5a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 800fc8c:	68c2      	ldr	r2, [r0, #12]
 800fc8e:	428c      	cmp	r4, r1
 800fc90:	f101 0e03 	add.w	lr, r1, #3
 800fc94:	d945      	bls.n	800fd22 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 800fc96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fc9a:	ee17 9a10 	vmov	r9, s14
 800fc9e:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 800fca2:	f898 7003 	ldrb.w	r7, [r8, #3]
 800fca6:	fb07 f605 	mul.w	r6, r7, r5
 800fcaa:	1c77      	adds	r7, r6, #1
 800fcac:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 800fcb0:	123f      	asrs	r7, r7, #8
 800fcb2:	b2b9      	uxth	r1, r7
 800fcb4:	43ff      	mvns	r7, r7
 800fcb6:	b2fe      	uxtb	r6, r7
 800fcb8:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 800fcbc:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 800fcc0:	fb19 f906 	smulbb	r9, r9, r6
 800fcc4:	fb07 9701 	mla	r7, r7, r1, r9
 800fcc8:	b2bf      	uxth	r7, r7
 800fcca:	f107 0901 	add.w	r9, r7, #1
 800fcce:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 800fcd2:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 800fcd6:	fb19 f906 	smulbb	r9, r9, r6
 800fcda:	123f      	asrs	r7, r7, #8
 800fcdc:	f80e 7c03 	strb.w	r7, [lr, #-3]
 800fce0:	f898 7001 	ldrb.w	r7, [r8, #1]
 800fce4:	fb07 9701 	mla	r7, r7, r1, r9
 800fce8:	b2bf      	uxth	r7, r7
 800fcea:	f107 0901 	add.w	r9, r7, #1
 800fcee:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 800fcf2:	123f      	asrs	r7, r7, #8
 800fcf4:	f80e 7c02 	strb.w	r7, [lr, #-2]
 800fcf8:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 800fcfc:	f898 8002 	ldrb.w	r8, [r8, #2]
 800fd00:	fb17 f606 	smulbb	r6, r7, r6
 800fd04:	fb08 6601 	mla	r6, r8, r1, r6
 800fd08:	b2b6      	uxth	r6, r6
 800fd0a:	1c71      	adds	r1, r6, #1
 800fd0c:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 800fd10:	4671      	mov	r1, lr
 800fd12:	1236      	asrs	r6, r6, #8
 800fd14:	f80e 6c01 	strb.w	r6, [lr, #-1]
 800fd18:	ed90 7a08 	vldr	s14, [r0, #32]
 800fd1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd20:	e7b5      	b.n	800fc8e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 800fd22:	4563      	cmp	r3, ip
 800fd24:	dd5d      	ble.n	800fde2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fd26:	edd0 7a08 	vldr	s15, [r0, #32]
 800fd2a:	eba3 030c 	sub.w	r3, r3, ip
 800fd2e:	68c4      	ldr	r4, [r0, #12]
 800fd30:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800fd34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fd38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fd3c:	7c00      	ldrb	r0, [r0, #16]
 800fd3e:	440b      	add	r3, r1
 800fd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd44:	bfd8      	it	le
 800fd46:	2200      	movle	r2, #0
 800fd48:	58a2      	ldr	r2, [r4, r2]
 800fd4a:	b2d4      	uxtb	r4, r2
 800fd4c:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 800fd50:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800fd54:	b160      	cbz	r0, 800fd70 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 800fd56:	2dff      	cmp	r5, #255	@ 0xff
 800fd58:	d10a      	bne.n	800fd70 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 800fd5a:	4299      	cmp	r1, r3
 800fd5c:	d241      	bcs.n	800fde2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fd5e:	700c      	strb	r4, [r1, #0]
 800fd60:	3103      	adds	r1, #3
 800fd62:	f801 cc02 	strb.w	ip, [r1, #-2]
 800fd66:	f801 7c01 	strb.w	r7, [r1, #-1]
 800fd6a:	e7f6      	b.n	800fd5a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 800fd6c:	4694      	mov	ip, r2
 800fd6e:	e7da      	b.n	800fd26 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 800fd70:	0e12      	lsrs	r2, r2, #24
 800fd72:	436a      	muls	r2, r5
 800fd74:	1c55      	adds	r5, r2, #1
 800fd76:	eb05 2522 	add.w	r5, r5, r2, asr #8
 800fd7a:	122d      	asrs	r5, r5, #8
 800fd7c:	43ee      	mvns	r6, r5
 800fd7e:	b2ad      	uxth	r5, r5
 800fd80:	fb14 f405 	smulbb	r4, r4, r5
 800fd84:	b2f6      	uxtb	r6, r6
 800fd86:	fb1c f005 	smulbb	r0, ip, r5
 800fd8a:	fb17 f505 	smulbb	r5, r7, r5
 800fd8e:	b2a4      	uxth	r4, r4
 800fd90:	b280      	uxth	r0, r0
 800fd92:	b2ad      	uxth	r5, r5
 800fd94:	428b      	cmp	r3, r1
 800fd96:	f101 0203 	add.w	r2, r1, #3
 800fd9a:	d922      	bls.n	800fde2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fd9c:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800fda0:	fb01 4106 	mla	r1, r1, r6, r4
 800fda4:	b289      	uxth	r1, r1
 800fda6:	1c4f      	adds	r7, r1, #1
 800fda8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fdac:	1209      	asrs	r1, r1, #8
 800fdae:	f802 1c03 	strb.w	r1, [r2, #-3]
 800fdb2:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800fdb6:	fb01 0106 	mla	r1, r1, r6, r0
 800fdba:	b289      	uxth	r1, r1
 800fdbc:	1c4f      	adds	r7, r1, #1
 800fdbe:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fdc2:	1209      	asrs	r1, r1, #8
 800fdc4:	f802 1c02 	strb.w	r1, [r2, #-2]
 800fdc8:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800fdcc:	fb01 5106 	mla	r1, r1, r6, r5
 800fdd0:	b289      	uxth	r1, r1
 800fdd2:	1c4f      	adds	r7, r1, #1
 800fdd4:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fdd8:	1209      	asrs	r1, r1, #8
 800fdda:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fdde:	4611      	mov	r1, r2
 800fde0:	e7d8      	b.n	800fd94 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 800fde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fde6:	bf00      	nop
 800fde8:	447ffffe 	.word	0x447ffffe
 800fdec:	00000000 	.word	0x00000000

0800fdf0 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 800fdf0:	4770      	bx	lr

0800fdf2 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 800fdf2:	4770      	bx	lr

0800fdf4 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 800fdf4:	b510      	push	{r4, lr}
 800fdf6:	4604      	mov	r4, r0
 800fdf8:	2124      	movs	r1, #36	@ 0x24
 800fdfa:	f00f fe81 	bl	801fb00 <_ZdlPvj>
 800fdfe:	4620      	mov	r0, r4
 800fe00:	bd10      	pop	{r4, pc}
	...

0800fe04 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 800fe04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fe06:	6803      	ldr	r3, [r0, #0]
 800fe08:	460d      	mov	r5, r1
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	4601      	mov	r1, r0
 800fe0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fe10:	a802      	add	r0, sp, #8
 800fe12:	4798      	blx	r3
 800fe14:	6828      	ldr	r0, [r5, #0]
 800fe16:	6869      	ldr	r1, [r5, #4]
 800fe18:	466b      	mov	r3, sp
 800fe1a:	c303      	stmia	r3!, {r0, r1}
 800fe1c:	4668      	mov	r0, sp
 800fe1e:	4619      	mov	r1, r3
 800fe20:	f7fd fcee 	bl	800d800 <_ZN8touchgfx4RectaNERKS0_>
 800fe24:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800fe26:	b188      	cbz	r0, 800fe4c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fe28:	6803      	ldr	r3, [r0, #0]
 800fe2a:	1d21      	adds	r1, r4, #4
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	4798      	blx	r3
 800fe30:	b160      	cbz	r0, 800fe4c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fe32:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	dd08      	ble.n	800fe4c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fe3a:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 800fe3e:	2d00      	cmp	r5, #0
 800fe40:	dd04      	ble.n	800fe4c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fe42:	4a2b      	ldr	r2, [pc, #172]	@ (800fef0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 800fe44:	7812      	ldrb	r2, [r2, #0]
 800fe46:	b11a      	cbz	r2, 800fe50 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 800fe48:	2a01      	cmp	r2, #1
 800fe4a:	d029      	beq.n	800fea0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 800fe4c:	b004      	add	sp, #16
 800fe4e:	bd70      	pop	{r4, r5, r6, pc}
 800fe50:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800fe54:	441d      	add	r5, r3
 800fe56:	b2ad      	uxth	r5, r5
 800fe58:	b22e      	sxth	r6, r5
 800fe5a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800fe5e:	42b3      	cmp	r3, r6
 800fe60:	daf4      	bge.n	800fe4c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fe62:	6823      	ldr	r3, [r4, #0]
 800fe64:	4669      	mov	r1, sp
 800fe66:	4620      	mov	r0, r4
 800fe68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe6a:	4798      	blx	r3
 800fe6c:	b940      	cbnz	r0, 800fe80 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 800fe6e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800fe72:	2b01      	cmp	r3, #1
 800fe74:	d004      	beq.n	800fe80 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 800fe76:	3301      	adds	r3, #1
 800fe78:	105b      	asrs	r3, r3, #1
 800fe7a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fe7e:	e7f0      	b.n	800fe62 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 800fe80:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fe84:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800fe88:	4413      	add	r3, r2
 800fe8a:	b29b      	uxth	r3, r3
 800fe8c:	441a      	add	r2, r3
 800fe8e:	f8ad 3002 	strh.w	r3, [sp, #2]
 800fe92:	b212      	sxth	r2, r2
 800fe94:	4296      	cmp	r6, r2
 800fe96:	dae0      	bge.n	800fe5a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 800fe98:	1aeb      	subs	r3, r5, r3
 800fe9a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fe9e:	e7dc      	b.n	800fe5a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 800fea0:	f8bd 5000 	ldrh.w	r5, [sp]
 800fea4:	441d      	add	r5, r3
 800fea6:	b2ad      	uxth	r5, r5
 800fea8:	b22e      	sxth	r6, r5
 800feaa:	f9bd 3000 	ldrsh.w	r3, [sp]
 800feae:	42b3      	cmp	r3, r6
 800feb0:	dacc      	bge.n	800fe4c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800feb2:	6823      	ldr	r3, [r4, #0]
 800feb4:	4669      	mov	r1, sp
 800feb6:	4620      	mov	r0, r4
 800feb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800feba:	4798      	blx	r3
 800febc:	b940      	cbnz	r0, 800fed0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 800febe:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d004      	beq.n	800fed0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 800fec6:	3301      	adds	r3, #1
 800fec8:	105b      	asrs	r3, r3, #1
 800feca:	f8ad 3004 	strh.w	r3, [sp, #4]
 800fece:	e7f0      	b.n	800feb2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 800fed0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800fed4:	f8bd 3000 	ldrh.w	r3, [sp]
 800fed8:	4413      	add	r3, r2
 800feda:	b29b      	uxth	r3, r3
 800fedc:	441a      	add	r2, r3
 800fede:	f8ad 3000 	strh.w	r3, [sp]
 800fee2:	b212      	sxth	r2, r2
 800fee4:	4296      	cmp	r6, r2
 800fee6:	dae0      	bge.n	800feaa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 800fee8:	1aeb      	subs	r3, r5, r3
 800feea:	f8ad 3004 	strh.w	r3, [sp, #4]
 800feee:	e7dc      	b.n	800feaa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 800fef0:	24025138 	.word	0x24025138

0800fef4 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 800fef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fef6:	6803      	ldr	r3, [r0, #0]
 800fef8:	4604      	mov	r4, r0
 800fefa:	4601      	mov	r1, r0
 800fefc:	4668      	mov	r0, sp
 800fefe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff00:	4798      	blx	r3
 800ff02:	2100      	movs	r1, #0
 800ff04:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800ff08:	4668      	mov	r0, sp
 800ff0a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800ff0e:	9102      	str	r1, [sp, #8]
 800ff10:	a902      	add	r1, sp, #8
 800ff12:	f8ad 200c 	strh.w	r2, [sp, #12]
 800ff16:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ff1a:	f7fd fc71 	bl	800d800 <_ZN8touchgfx4RectaNERKS0_>
 800ff1e:	6823      	ldr	r3, [r4, #0]
 800ff20:	4669      	mov	r1, sp
 800ff22:	4620      	mov	r0, r4
 800ff24:	691b      	ldr	r3, [r3, #16]
 800ff26:	4798      	blx	r3
 800ff28:	b004      	add	sp, #16
 800ff2a:	bd10      	pop	{r4, pc}

0800ff2c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 800ff2c:	2101      	movs	r1, #1
 800ff2e:	2200      	movs	r2, #0
 800ff30:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 800ff34:	490a      	ldr	r1, [pc, #40]	@ (800ff60 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 800ff36:	8082      	strh	r2, [r0, #4]
 800ff38:	6001      	str	r1, [r0, #0]
 800ff3a:	21ff      	movs	r1, #255	@ 0xff
 800ff3c:	80c2      	strh	r2, [r0, #6]
 800ff3e:	8102      	strh	r2, [r0, #8]
 800ff40:	8142      	strh	r2, [r0, #10]
 800ff42:	8182      	strh	r2, [r0, #12]
 800ff44:	81c2      	strh	r2, [r0, #14]
 800ff46:	8202      	strh	r2, [r0, #16]
 800ff48:	8242      	strh	r2, [r0, #18]
 800ff4a:	61c2      	str	r2, [r0, #28]
 800ff4c:	8402      	strh	r2, [r0, #32]
 800ff4e:	8442      	strh	r2, [r0, #34]	@ 0x22
 800ff50:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 800ff54:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 800ff58:	6282      	str	r2, [r0, #40]	@ 0x28
 800ff5a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800ff5e:	4770      	bx	lr
 800ff60:	08023d2c 	.word	0x08023d2c

0800ff64 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800ff64:	2300      	movs	r3, #0
 800ff66:	8083      	strh	r3, [r0, #4]
 800ff68:	80c3      	strh	r3, [r0, #6]
 800ff6a:	8003      	strh	r3, [r0, #0]
 800ff6c:	8043      	strh	r3, [r0, #2]
 800ff6e:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 800ff72:	2bff      	cmp	r3, #255	@ 0xff
 800ff74:	bf01      	itttt	eq
 800ff76:	890b      	ldrheq	r3, [r1, #8]
 800ff78:	8083      	strheq	r3, [r0, #4]
 800ff7a:	894b      	ldrheq	r3, [r1, #10]
 800ff7c:	80c3      	strheq	r3, [r0, #6]
 800ff7e:	4770      	bx	lr

0800ff80 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800ff80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff82:	4604      	mov	r4, r0
 800ff84:	466b      	mov	r3, sp
 800ff86:	6808      	ldr	r0, [r1, #0]
 800ff88:	6849      	ldr	r1, [r1, #4]
 800ff8a:	c303      	stmia	r3!, {r0, r1}
 800ff8c:	6823      	ldr	r3, [r4, #0]
 800ff8e:	4669      	mov	r1, sp
 800ff90:	4620      	mov	r0, r4
 800ff92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff94:	4798      	blx	r3
 800ff96:	4b08      	ldr	r3, [pc, #32]	@ (800ffb8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800ff9e:	b10a      	cbz	r2, 800ffa4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800ffa0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800ffa2:	b900      	cbnz	r0, 800ffa6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800ffa4:	6898      	ldr	r0, [r3, #8]
 800ffa6:	6803      	ldr	r3, [r0, #0]
 800ffa8:	4669      	mov	r1, sp
 800ffaa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ffac:	6a1d      	ldr	r5, [r3, #32]
 800ffae:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800ffb2:	47a8      	blx	r5
 800ffb4:	b003      	add	sp, #12
 800ffb6:	bd30      	pop	{r4, r5, pc}
 800ffb8:	24025140 	.word	0x24025140

0800ffbc <_ZN8touchgfx3BoxD1Ev>:
 800ffbc:	4770      	bx	lr

0800ffbe <_ZN8touchgfx3BoxD0Ev>:
 800ffbe:	b510      	push	{r4, lr}
 800ffc0:	4604      	mov	r4, r0
 800ffc2:	212c      	movs	r1, #44	@ 0x2c
 800ffc4:	f00f fd9c 	bl	801fb00 <_ZdlPvj>
 800ffc8:	4620      	mov	r0, r4
 800ffca:	bd10      	pop	{r4, pc}

0800ffcc <_ZNK8touchgfx3Box17invalidateContentEv>:
 800ffcc:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 800ffd0:	b12a      	cbz	r2, 800ffde <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800ffd2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800ffd6:	b112      	cbz	r2, 800ffde <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800ffd8:	6803      	ldr	r3, [r0, #0]
 800ffda:	695b      	ldr	r3, [r3, #20]
 800ffdc:	4718      	bx	r3
 800ffde:	4770      	bx	lr

0800ffe0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800ffe0:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800ffe4:	4770      	bx	lr

0800ffe6 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800ffe6:	b570      	push	{r4, r5, r6, lr}
 800ffe8:	880b      	ldrh	r3, [r1, #0]
 800ffea:	4605      	mov	r5, r0
 800ffec:	4604      	mov	r4, r0
 800ffee:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800fff0:	8813      	ldrh	r3, [r2, #0]
 800fff2:	f825 3f30 	strh.w	r3, [r5, #48]!
 800fff6:	4628      	mov	r0, r5
 800fff8:	f005 fd94 	bl	8015b24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fffc:	4606      	mov	r6, r0
 800fffe:	4628      	mov	r0, r5
 8010000:	f005 fdc4 	bl	8015b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010004:	6823      	ldr	r3, [r4, #0]
 8010006:	4605      	mov	r5, r0
 8010008:	4631      	mov	r1, r6
 801000a:	4620      	mov	r0, r4
 801000c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801000e:	4798      	blx	r3
 8010010:	6823      	ldr	r3, [r4, #0]
 8010012:	4629      	mov	r1, r5
 8010014:	4620      	mov	r0, r4
 8010016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801001c:	4718      	bx	r3

0801001e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801001e:	b510      	push	{r4, lr}
 8010020:	4604      	mov	r4, r0
 8010022:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8010024:	b150      	cbz	r0, 801003c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8010026:	6803      	ldr	r3, [r0, #0]
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	4798      	blx	r3
 801002c:	b130      	cbz	r0, 801003c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801002e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8010030:	4621      	mov	r1, r4
 8010032:	6803      	ldr	r3, [r0, #0]
 8010034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010038:	689b      	ldr	r3, [r3, #8]
 801003a:	4718      	bx	r3
 801003c:	bd10      	pop	{r4, pc}

0801003e <_ZNK8touchgfx6Button12getSolidRectEv>:
 801003e:	b510      	push	{r4, lr}
 8010040:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8010044:	4604      	mov	r4, r0
 8010046:	2bff      	cmp	r3, #255	@ 0xff
 8010048:	d006      	beq.n	8010058 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801004a:	2300      	movs	r3, #0
 801004c:	8003      	strh	r3, [r0, #0]
 801004e:	8043      	strh	r3, [r0, #2]
 8010050:	8083      	strh	r3, [r0, #4]
 8010052:	80c3      	strh	r3, [r0, #6]
 8010054:	4620      	mov	r0, r4
 8010056:	bd10      	pop	{r4, pc}
 8010058:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 801005c:	b11b      	cbz	r3, 8010066 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801005e:	3130      	adds	r1, #48	@ 0x30
 8010060:	f005 fdc8 	bl	8015bf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010064:	e7f6      	b.n	8010054 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8010066:	312e      	adds	r1, #46	@ 0x2e
 8010068:	e7fa      	b.n	8010060 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0801006c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 801006c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010070:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8010074:	b08a      	sub	sp, #40	@ 0x28
 8010076:	4604      	mov	r4, r0
 8010078:	4688      	mov	r8, r1
 801007a:	2b00      	cmp	r3, #0
 801007c:	d066      	beq.n	801014c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801007e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8010080:	a805      	add	r0, sp, #20
 8010082:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010086:	f005 fd4d 	bl	8015b24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801008a:	4607      	mov	r7, r0
 801008c:	a805      	add	r0, sp, #20
 801008e:	f005 fd7d 	bl	8015b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010092:	f9b8 6000 	ldrsh.w	r6, [r8]
 8010096:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 801009a:	2300      	movs	r3, #0
 801009c:	4432      	add	r2, r6
 801009e:	9306      	str	r3, [sp, #24]
 80100a0:	b292      	uxth	r2, r2
 80100a2:	fa0f fc82 	sxth.w	ip, r2
 80100a6:	459c      	cmp	ip, r3
 80100a8:	dd52      	ble.n	8010150 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80100aa:	42b7      	cmp	r7, r6
 80100ac:	dd50      	ble.n	8010150 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80100ae:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80100b2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80100b6:	442b      	add	r3, r5
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	b219      	sxth	r1, r3
 80100bc:	2900      	cmp	r1, #0
 80100be:	dd47      	ble.n	8010150 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80100c0:	42a8      	cmp	r0, r5
 80100c2:	dd45      	ble.n	8010150 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80100c4:	4567      	cmp	r7, ip
 80100c6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80100ca:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80100ce:	bfb8      	it	lt
 80100d0:	b2ba      	uxthlt	r2, r7
 80100d2:	4288      	cmp	r0, r1
 80100d4:	f8ad 6018 	strh.w	r6, [sp, #24]
 80100d8:	bfb8      	it	lt
 80100da:	b283      	uxthlt	r3, r0
 80100dc:	1b92      	subs	r2, r2, r6
 80100de:	f8ad 501a 	strh.w	r5, [sp, #26]
 80100e2:	1b5b      	subs	r3, r3, r5
 80100e4:	f8ad 201c 	strh.w	r2, [sp, #28]
 80100e8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80100ec:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80100f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d026      	beq.n	8010146 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80100f8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	dd22      	ble.n	8010146 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8010100:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8010104:	2b00      	cmp	r3, #0
 8010106:	dd1e      	ble.n	8010146 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8010108:	2300      	movs	r3, #0
 801010a:	a908      	add	r1, sp, #32
 801010c:	4620      	mov	r0, r4
 801010e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8010112:	6823      	ldr	r3, [r4, #0]
 8010114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010116:	4798      	blx	r3
 8010118:	4b0f      	ldr	r3, [pc, #60]	@ (8010158 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8010120:	b10a      	cbz	r2, 8010126 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8010122:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8010124:	b900      	cbnz	r0, 8010128 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8010126:	6898      	ldr	r0, [r3, #8]
 8010128:	2501      	movs	r5, #1
 801012a:	6801      	ldr	r1, [r0, #0]
 801012c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8010130:	9502      	str	r5, [sp, #8]
 8010132:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8010136:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801013a:	9401      	str	r4, [sp, #4]
 801013c:	ac06      	add	r4, sp, #24
 801013e:	9400      	str	r4, [sp, #0]
 8010140:	688c      	ldr	r4, [r1, #8]
 8010142:	a905      	add	r1, sp, #20
 8010144:	47a0      	blx	r4
 8010146:	b00a      	add	sp, #40	@ 0x28
 8010148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801014c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 801014e:	e797      	b.n	8010080 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8010150:	2300      	movs	r3, #0
 8010152:	9307      	str	r3, [sp, #28]
 8010154:	e7ca      	b.n	80100ec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8010156:	bf00      	nop
 8010158:	24025140 	.word	0x24025140

0801015c <_ZNK8touchgfx6Button17invalidateContentEv>:
 801015c:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8010160:	b12a      	cbz	r2, 801016e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8010162:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8010166:	b112      	cbz	r2, 801016e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8010168:	6803      	ldr	r3, [r0, #0]
 801016a:	695b      	ldr	r3, [r3, #20]
 801016c:	4718      	bx	r3
 801016e:	4770      	bx	lr

08010170 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8010170:	4770      	bx	lr

08010172 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8010172:	b510      	push	{r4, lr}
 8010174:	4604      	mov	r4, r0
 8010176:	2148      	movs	r1, #72	@ 0x48
 8010178:	f00f fcc2 	bl	801fb00 <_ZdlPvj>
 801017c:	4620      	mov	r0, r4
 801017e:	bd10      	pop	{r4, pc}

08010180 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8010180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010184:	b08d      	sub	sp, #52	@ 0x34
 8010186:	4604      	mov	r4, r0
 8010188:	460f      	mov	r7, r1
 801018a:	f7ff ff6f 	bl	801006c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801018e:	4a55      	ldr	r2, [pc, #340]	@ (80102e4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 8010190:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8010192:	8812      	ldrh	r2, [r2, #0]
 8010194:	429a      	cmp	r2, r3
 8010196:	f240 8082 	bls.w	801029e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 801019a:	4d53      	ldr	r5, [pc, #332]	@ (80102e8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 801019c:	682a      	ldr	r2, [r5, #0]
 801019e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80101a2:	4b52      	ldr	r3, [pc, #328]	@ (80102ec <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80101aa:	2200      	movs	r2, #0
 80101ac:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 80101b0:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80101b4:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80101b8:	2a03      	cmp	r2, #3
 80101ba:	d811      	bhi.n	80101e0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80101bc:	e8df f002 	tbb	[pc, r2]
 80101c0:	89727902 	.word	0x89727902
 80101c4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80101c8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80101cc:	1ad2      	subs	r2, r2, r3
 80101ce:	2002      	movs	r0, #2
 80101d0:	f8ad 1010 	strh.w	r1, [sp, #16]
 80101d4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80101d8:	fb92 f2f0 	sdiv	r2, r2, r0
 80101dc:	f8ad 200e 	strh.w	r2, [sp, #14]
 80101e0:	f10d 080c 	add.w	r8, sp, #12
 80101e4:	f10d 0914 	add.w	r9, sp, #20
 80101e8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80101ec:	e889 0003 	stmia.w	r9, {r0, r1}
 80101f0:	4639      	mov	r1, r7
 80101f2:	4648      	mov	r0, r9
 80101f4:	f7fd fb04 	bl	800d800 <_ZN8touchgfx4RectaNERKS0_>
 80101f8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	dd4e      	ble.n	801029e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8010200:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8010204:	2b00      	cmp	r3, #0
 8010206:	dd4a      	ble.n	801029e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8010208:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801020c:	4641      	mov	r1, r8
 801020e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010212:	4620      	mov	r0, r4
 8010214:	1a9b      	subs	r3, r3, r2
 8010216:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801021a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801021e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8010222:	1a9b      	subs	r3, r3, r2
 8010224:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010228:	6823      	ldr	r3, [r4, #0]
 801022a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801022c:	4798      	blx	r3
 801022e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010232:	2b00      	cmp	r3, #0
 8010234:	d053      	beq.n	80102de <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 8010236:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8010238:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 801023a:	682b      	ldr	r3, [r5, #0]
 801023c:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8010240:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8010244:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 8010248:	785b      	ldrb	r3, [r3, #1]
 801024a:	9209      	str	r2, [sp, #36]	@ 0x24
 801024c:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8010250:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8010254:	9607      	str	r6, [sp, #28]
 8010256:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 801025a:	2300      	movs	r3, #0
 801025c:	f88d 5020 	strb.w	r5, [sp, #32]
 8010260:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8010264:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8010268:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801026c:	4b20      	ldr	r3, [pc, #128]	@ (80102f0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801026e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8010278:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801027c:	b10a      	cbz	r2, 8010282 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 801027e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010280:	b904      	cbnz	r4, 8010284 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 8010282:	689c      	ldr	r4, [r3, #8]
 8010284:	4b1b      	ldr	r3, [pc, #108]	@ (80102f4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8010286:	6818      	ldr	r0, [r3, #0]
 8010288:	f7f3 fed0 	bl	800402c <_ZNK8touchgfx5Texts7getTextEt>
 801028c:	ab07      	add	r3, sp, #28
 801028e:	9001      	str	r0, [sp, #4]
 8010290:	4620      	mov	r0, r4
 8010292:	9300      	str	r3, [sp, #0]
 8010294:	464b      	mov	r3, r9
 8010296:	e898 0006 	ldmia.w	r8, {r1, r2}
 801029a:	f7f3 fe79 	bl	8003f90 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801029e:	b00d      	add	sp, #52	@ 0x34
 80102a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102a4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80102a8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80102ac:	1ad2      	subs	r2, r2, r3
 80102ae:	3201      	adds	r2, #1
 80102b0:	e78d      	b.n	80101ce <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 80102b2:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80102b6:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80102ba:	1ad2      	subs	r2, r2, r3
 80102bc:	3201      	adds	r2, #1
 80102be:	2002      	movs	r0, #2
 80102c0:	f8ad 3010 	strh.w	r3, [sp, #16]
 80102c4:	f8ad 1012 	strh.w	r1, [sp, #18]
 80102c8:	fb92 f2f0 	sdiv	r2, r2, r0
 80102cc:	f8ad 200c 	strh.w	r2, [sp, #12]
 80102d0:	e786      	b.n	80101e0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80102d2:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80102d6:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80102da:	1ad2      	subs	r2, r2, r3
 80102dc:	e7ef      	b.n	80102be <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 80102de:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80102e0:	e7aa      	b.n	8010238 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 80102e2:	bf00      	nop
 80102e4:	2402519c 	.word	0x2402519c
 80102e8:	24025198 	.word	0x24025198
 80102ec:	240251a0 	.word	0x240251a0
 80102f0:	24025140 	.word	0x24025140
 80102f4:	240251a4 	.word	0x240251a4

080102f8 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 80102f8:	2101      	movs	r1, #1
 80102fa:	2200      	movs	r2, #0
 80102fc:	b510      	push	{r4, lr}
 80102fe:	4c13      	ldr	r4, [pc, #76]	@ (801034c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8010300:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8010304:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8010308:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801030c:	6004      	str	r4, [r0, #0]
 801030e:	4c10      	ldr	r4, [pc, #64]	@ (8010350 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8010310:	8082      	strh	r2, [r0, #4]
 8010312:	80c2      	strh	r2, [r0, #6]
 8010314:	8102      	strh	r2, [r0, #8]
 8010316:	8142      	strh	r2, [r0, #10]
 8010318:	8182      	strh	r2, [r0, #12]
 801031a:	81c2      	strh	r2, [r0, #14]
 801031c:	8202      	strh	r2, [r0, #16]
 801031e:	8242      	strh	r2, [r0, #18]
 8010320:	61c2      	str	r2, [r0, #28]
 8010322:	8402      	strh	r2, [r0, #32]
 8010324:	8442      	strh	r2, [r0, #34]	@ 0x22
 8010326:	6282      	str	r2, [r0, #40]	@ 0x28
 8010328:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 801032c:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 801032e:	8601      	strh	r1, [r0, #48]	@ 0x30
 8010330:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 8010334:	6344      	str	r4, [r0, #52]	@ 0x34
 8010336:	8701      	strh	r1, [r0, #56]	@ 0x38
 8010338:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801033c:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 8010340:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8010344:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8010348:	bd10      	pop	{r4, pc}
 801034a:	bf00      	nop
 801034c:	08023e0c 	.word	0x08023e0c
 8010350:	08022fa4 	.word	0x08022fa4

08010354 <_ZN8touchgfx7OutlineD1Ev>:
 8010354:	4770      	bx	lr

08010356 <_ZN8touchgfx7OutlineD0Ev>:
 8010356:	b510      	push	{r4, lr}
 8010358:	4604      	mov	r4, r0
 801035a:	2130      	movs	r1, #48	@ 0x30
 801035c:	f00f fbd0 	bl	801fb00 <_ZdlPvj>
 8010360:	4620      	mov	r0, r4
 8010362:	bd10      	pop	{r4, pc}

08010364 <_ZN8touchgfx7Outline5resetEv>:
 8010364:	b510      	push	{r4, lr}
 8010366:	4604      	mov	r4, r0
 8010368:	f000 fe72 	bl	8011050 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801036c:	60e0      	str	r0, [r4, #12]
 801036e:	f000 fe75 	bl	801105c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8010372:	68e3      	ldr	r3, [r4, #12]
 8010374:	08c0      	lsrs	r0, r0, #3
 8010376:	2200      	movs	r2, #0
 8010378:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 801037c:	6123      	str	r3, [r4, #16]
 801037e:	3801      	subs	r0, #1
 8010380:	60a2      	str	r2, [r4, #8]
 8010382:	6060      	str	r0, [r4, #4]
 8010384:	8019      	strh	r1, [r3, #0]
 8010386:	8059      	strh	r1, [r3, #2]
 8010388:	809a      	strh	r2, [r3, #4]
 801038a:	80da      	strh	r2, [r3, #6]
 801038c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801038e:	f023 0301 	bic.w	r3, r3, #1
 8010392:	f043 0302 	orr.w	r3, r3, #2
 8010396:	6263      	str	r3, [r4, #36]	@ 0x24
 8010398:	bd10      	pop	{r4, pc}
	...

0801039c <_ZN8touchgfx7OutlineC1Ev>:
 801039c:	4b0a      	ldr	r3, [pc, #40]	@ (80103c8 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801039e:	b510      	push	{r4, lr}
 80103a0:	6003      	str	r3, [r0, #0]
 80103a2:	2300      	movs	r3, #0
 80103a4:	4604      	mov	r4, r0
 80103a6:	6243      	str	r3, [r0, #36]	@ 0x24
 80103a8:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80103ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80103b0:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80103b4:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80103b8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80103bc:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 80103c0:	f7ff ffd0 	bl	8010364 <_ZN8touchgfx7Outline5resetEv>
 80103c4:	4620      	mov	r0, r4
 80103c6:	bd10      	pop	{r4, pc}
 80103c8:	08023e80 	.word	0x08023e80

080103cc <_ZN8touchgfx7Outline10renderLineEiiii>:
 80103cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d0:	b093      	sub	sp, #76	@ 0x4c
 80103d2:	1156      	asrs	r6, r2, #5
 80103d4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80103d6:	9305      	str	r3, [sp, #20]
 80103d8:	1153      	asrs	r3, r2, #5
 80103da:	f004 051f 	and.w	r5, r4, #31
 80103de:	9303      	str	r3, [sp, #12]
 80103e0:	1163      	asrs	r3, r4, #5
 80103e2:	9504      	str	r5, [sp, #16]
 80103e4:	1165      	asrs	r5, r4, #5
 80103e6:	9306      	str	r3, [sp, #24]
 80103e8:	f002 031f 	and.w	r3, r2, #31
 80103ec:	42ae      	cmp	r6, r5
 80103ee:	f040 80f4 	bne.w	80105da <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 80103f2:	9c04      	ldr	r4, [sp, #16]
 80103f4:	9a05      	ldr	r2, [sp, #20]
 80103f6:	42a3      	cmp	r3, r4
 80103f8:	ea4f 1e62 	mov.w	lr, r2, asr #5
 80103fc:	6902      	ldr	r2, [r0, #16]
 80103fe:	d125      	bne.n	801044c <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8010400:	f9b2 3000 	ldrsh.w	r3, [r2]
 8010404:	459e      	cmp	lr, r3
 8010406:	d103      	bne.n	8010410 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8010408:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801040c:	429e      	cmp	r6, r3
 801040e:	d035      	beq.n	801047c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010410:	88d1      	ldrh	r1, [r2, #6]
 8010412:	8893      	ldrh	r3, [r2, #4]
 8010414:	430b      	orrs	r3, r1
 8010416:	d010      	beq.n	801043a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8010418:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801041c:	2b00      	cmp	r3, #0
 801041e:	db0c      	blt.n	801043a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8010420:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010422:	428b      	cmp	r3, r1
 8010424:	da09      	bge.n	801043a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8010426:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801042a:	428b      	cmp	r3, r1
 801042c:	f103 0301 	add.w	r3, r3, #1
 8010430:	bf38      	it	cc
 8010432:	3208      	addcc	r2, #8
 8010434:	6083      	str	r3, [r0, #8]
 8010436:	bf38      	it	cc
 8010438:	6102      	strcc	r2, [r0, #16]
 801043a:	6903      	ldr	r3, [r0, #16]
 801043c:	9a03      	ldr	r2, [sp, #12]
 801043e:	f8a3 e000 	strh.w	lr, [r3]
 8010442:	805a      	strh	r2, [r3, #2]
 8010444:	2200      	movs	r2, #0
 8010446:	809a      	strh	r2, [r3, #4]
 8010448:	80da      	strh	r2, [r3, #6]
 801044a:	e017      	b.n	801047c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801044c:	9c05      	ldr	r4, [sp, #20]
 801044e:	114e      	asrs	r6, r1, #5
 8010450:	f001 0c1f 	and.w	ip, r1, #31
 8010454:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010458:	f004 041f 	and.w	r4, r4, #31
 801045c:	4576      	cmp	r6, lr
 801045e:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8010462:	9402      	str	r4, [sp, #8]
 8010464:	9c04      	ldr	r4, [sp, #16]
 8010466:	eba4 0403 	sub.w	r4, r4, r3
 801046a:	d10a      	bne.n	8010482 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 801046c:	9b02      	ldr	r3, [sp, #8]
 801046e:	44a0      	add	r8, r4
 8010470:	449c      	add	ip, r3
 8010472:	f8a2 8004 	strh.w	r8, [r2, #4]
 8010476:	fb04 a40c 	mla	r4, r4, ip, sl
 801047a:	80d4      	strh	r4, [r2, #6]
 801047c:	b013      	add	sp, #76	@ 0x4c
 801047e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010482:	9d05      	ldr	r5, [sp, #20]
 8010484:	1a69      	subs	r1, r5, r1
 8010486:	bf51      	iteee	pl
 8010488:	f1cc 0520 	rsbpl	r5, ip, #32
 801048c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8010490:	4249      	negmi	r1, r1
 8010492:	2500      	movmi	r5, #0
 8010494:	bf5d      	ittte	pl
 8010496:	436c      	mulpl	r4, r5
 8010498:	2520      	movpl	r5, #32
 801049a:	f04f 0901 	movpl.w	r9, #1
 801049e:	f04f 39ff 	movmi.w	r9, #4294967295
 80104a2:	9501      	str	r5, [sp, #4]
 80104a4:	9f01      	ldr	r7, [sp, #4]
 80104a6:	444e      	add	r6, r9
 80104a8:	fb94 f5f1 	sdiv	r5, r4, r1
 80104ac:	fb01 4415 	mls	r4, r1, r5, r4
 80104b0:	44bc      	add	ip, r7
 80104b2:	2c00      	cmp	r4, #0
 80104b4:	bfbc      	itt	lt
 80104b6:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80104ba:	1864      	addlt	r4, r4, r1
 80104bc:	44a8      	add	r8, r5
 80104be:	fb05 ac0c 	mla	ip, r5, ip, sl
 80104c2:	f8a2 8004 	strh.w	r8, [r2, #4]
 80104c6:	f8a2 c006 	strh.w	ip, [r2, #6]
 80104ca:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80104ce:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80104d2:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80104d6:	ea58 0202 	orrs.w	r2, r8, r2
 80104da:	d011      	beq.n	8010500 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80104dc:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80104e0:	f1b8 0f00 	cmp.w	r8, #0
 80104e4:	db0c      	blt.n	8010500 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80104e6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80104e8:	4590      	cmp	r8, r2
 80104ea:	da09      	bge.n	8010500 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80104ec:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80104f0:	4590      	cmp	r8, r2
 80104f2:	bf3c      	itt	cc
 80104f4:	f10c 0208 	addcc.w	r2, ip, #8
 80104f8:	6102      	strcc	r2, [r0, #16]
 80104fa:	f108 0201 	add.w	r2, r8, #1
 80104fe:	6082      	str	r2, [r0, #8]
 8010500:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010504:	2700      	movs	r7, #0
 8010506:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801050a:	45b6      	cmp	lr, r6
 801050c:	f8ac 6000 	strh.w	r6, [ip]
 8010510:	442b      	add	r3, r5
 8010512:	f8ac 2002 	strh.w	r2, [ip, #2]
 8010516:	f8ac 7004 	strh.w	r7, [ip, #4]
 801051a:	f8ac 7006 	strh.w	r7, [ip, #6]
 801051e:	d04b      	beq.n	80105b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8010520:	9f04      	ldr	r7, [sp, #16]
 8010522:	1a64      	subs	r4, r4, r1
 8010524:	f04f 0a00 	mov.w	sl, #0
 8010528:	1aff      	subs	r7, r7, r3
 801052a:	443d      	add	r5, r7
 801052c:	016d      	lsls	r5, r5, #5
 801052e:	fb95 f8f1 	sdiv	r8, r5, r1
 8010532:	fb01 5518 	mls	r5, r1, r8, r5
 8010536:	2d00      	cmp	r5, #0
 8010538:	bfbc      	itt	lt
 801053a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801053e:	186d      	addlt	r5, r5, r1
 8010540:	f108 0701 	add.w	r7, r8, #1
 8010544:	9703      	str	r7, [sp, #12]
 8010546:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801054a:	1964      	adds	r4, r4, r5
 801054c:	444e      	add	r6, r9
 801054e:	bf54      	ite	pl
 8010550:	9f03      	ldrpl	r7, [sp, #12]
 8010552:	4647      	movmi	r7, r8
 8010554:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8010558:	bf58      	it	pl
 801055a:	1a64      	subpl	r4, r4, r1
 801055c:	443b      	add	r3, r7
 801055e:	44bb      	add	fp, r7
 8010560:	f8ac b004 	strh.w	fp, [ip, #4]
 8010564:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010568:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801056c:	f8ac b006 	strh.w	fp, [ip, #6]
 8010570:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010574:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010578:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801057c:	ea5b 0707 	orrs.w	r7, fp, r7
 8010580:	d011      	beq.n	80105a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8010582:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8010586:	f1bb 0f00 	cmp.w	fp, #0
 801058a:	db0c      	blt.n	80105a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801058c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801058e:	45bb      	cmp	fp, r7
 8010590:	da09      	bge.n	80105a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8010592:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8010596:	45bb      	cmp	fp, r7
 8010598:	bf3c      	itt	cc
 801059a:	f10c 0708 	addcc.w	r7, ip, #8
 801059e:	6107      	strcc	r7, [r0, #16]
 80105a0:	f10b 0701 	add.w	r7, fp, #1
 80105a4:	6087      	str	r7, [r0, #8]
 80105a6:	6907      	ldr	r7, [r0, #16]
 80105a8:	45b6      	cmp	lr, r6
 80105aa:	803e      	strh	r6, [r7, #0]
 80105ac:	807a      	strh	r2, [r7, #2]
 80105ae:	f8a7 a004 	strh.w	sl, [r7, #4]
 80105b2:	f8a7 a006 	strh.w	sl, [r7, #6]
 80105b6:	d1c6      	bne.n	8010546 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 80105b8:	9a04      	ldr	r2, [sp, #16]
 80105ba:	1ad3      	subs	r3, r2, r3
 80105bc:	6902      	ldr	r2, [r0, #16]
 80105be:	8891      	ldrh	r1, [r2, #4]
 80105c0:	88d6      	ldrh	r6, [r2, #6]
 80105c2:	4419      	add	r1, r3
 80105c4:	8091      	strh	r1, [r2, #4]
 80105c6:	9902      	ldr	r1, [sp, #8]
 80105c8:	f101 0c20 	add.w	ip, r1, #32
 80105cc:	9901      	ldr	r1, [sp, #4]
 80105ce:	ebac 0c01 	sub.w	ip, ip, r1
 80105d2:	fb03 630c 	mla	r3, r3, ip, r6
 80105d6:	80d3      	strh	r3, [r2, #6]
 80105d8:	e750      	b.n	801047c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80105da:	9d05      	ldr	r5, [sp, #20]
 80105dc:	1aa2      	subs	r2, r4, r2
 80105de:	eba5 0501 	sub.w	r5, r5, r1
 80105e2:	9202      	str	r2, [sp, #8]
 80105e4:	9508      	str	r5, [sp, #32]
 80105e6:	f140 8128 	bpl.w	801083a <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 80105ea:	9a03      	ldr	r2, [sp, #12]
 80105ec:	2a00      	cmp	r2, #0
 80105ee:	f6ff af45 	blt.w	801047c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80105f2:	9a02      	ldr	r2, [sp, #8]
 80105f4:	f04f 34ff 	mov.w	r4, #4294967295
 80105f8:	4252      	negs	r2, r2
 80105fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80105fc:	2400      	movs	r4, #0
 80105fe:	9202      	str	r2, [sp, #8]
 8010600:	9a06      	ldr	r2, [sp, #24]
 8010602:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8010606:	9206      	str	r2, [sp, #24]
 8010608:	462a      	mov	r2, r5
 801060a:	435a      	muls	r2, r3
 801060c:	9401      	str	r4, [sp, #4]
 801060e:	9c02      	ldr	r4, [sp, #8]
 8010610:	9d02      	ldr	r5, [sp, #8]
 8010612:	fb92 f4f4 	sdiv	r4, r2, r4
 8010616:	fb05 2214 	mls	r2, r5, r4, r2
 801061a:	2a00      	cmp	r2, #0
 801061c:	9207      	str	r2, [sp, #28]
 801061e:	bfbc      	itt	lt
 8010620:	1952      	addlt	r2, r2, r5
 8010622:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8010626:	6905      	ldr	r5, [r0, #16]
 8010628:	bfb8      	it	lt
 801062a:	9207      	strlt	r2, [sp, #28]
 801062c:	eb04 0901 	add.w	r9, r4, r1
 8010630:	9a01      	ldr	r2, [sp, #4]
 8010632:	ea4f 1669 	mov.w	r6, r9, asr #5
 8010636:	429a      	cmp	r2, r3
 8010638:	f040 8111 	bne.w	801085e <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 801063c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8010640:	429e      	cmp	r6, r3
 8010642:	d104      	bne.n	801064e <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8010644:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8010648:	9a03      	ldr	r2, [sp, #12]
 801064a:	429a      	cmp	r2, r3
 801064c:	d01b      	beq.n	8010686 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801064e:	88ea      	ldrh	r2, [r5, #6]
 8010650:	88ab      	ldrh	r3, [r5, #4]
 8010652:	4313      	orrs	r3, r2
 8010654:	d010      	beq.n	8010678 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8010656:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801065a:	2a00      	cmp	r2, #0
 801065c:	db0c      	blt.n	8010678 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801065e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010660:	429a      	cmp	r2, r3
 8010662:	da09      	bge.n	8010678 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8010664:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010668:	429a      	cmp	r2, r3
 801066a:	f102 0201 	add.w	r2, r2, #1
 801066e:	bf38      	it	cc
 8010670:	3508      	addcc	r5, #8
 8010672:	6082      	str	r2, [r0, #8]
 8010674:	bf38      	it	cc
 8010676:	6105      	strcc	r5, [r0, #16]
 8010678:	6903      	ldr	r3, [r0, #16]
 801067a:	9a03      	ldr	r2, [sp, #12]
 801067c:	801e      	strh	r6, [r3, #0]
 801067e:	805a      	strh	r2, [r3, #2]
 8010680:	2200      	movs	r2, #0
 8010682:	809a      	strh	r2, [r3, #4]
 8010684:	80da      	strh	r2, [r3, #6]
 8010686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010688:	9a03      	ldr	r2, [sp, #12]
 801068a:	6901      	ldr	r1, [r0, #16]
 801068c:	441a      	add	r2, r3
 801068e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8010692:	42b3      	cmp	r3, r6
 8010694:	d103      	bne.n	801069e <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8010696:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801069a:	429a      	cmp	r2, r3
 801069c:	d01a      	beq.n	80106d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 801069e:	88cc      	ldrh	r4, [r1, #6]
 80106a0:	888b      	ldrh	r3, [r1, #4]
 80106a2:	4323      	orrs	r3, r4
 80106a4:	d010      	beq.n	80106c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80106a6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80106aa:	2c00      	cmp	r4, #0
 80106ac:	db0c      	blt.n	80106c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80106ae:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80106b0:	429c      	cmp	r4, r3
 80106b2:	da09      	bge.n	80106c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80106b4:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80106b8:	429c      	cmp	r4, r3
 80106ba:	f104 0401 	add.w	r4, r4, #1
 80106be:	bf38      	it	cc
 80106c0:	3108      	addcc	r1, #8
 80106c2:	6084      	str	r4, [r0, #8]
 80106c4:	bf38      	it	cc
 80106c6:	6101      	strcc	r1, [r0, #16]
 80106c8:	6903      	ldr	r3, [r0, #16]
 80106ca:	2100      	movs	r1, #0
 80106cc:	801e      	strh	r6, [r3, #0]
 80106ce:	805a      	strh	r2, [r3, #2]
 80106d0:	8099      	strh	r1, [r3, #4]
 80106d2:	80d9      	strh	r1, [r3, #6]
 80106d4:	9b06      	ldr	r3, [sp, #24]
 80106d6:	4293      	cmp	r3, r2
 80106d8:	f000 8082 	beq.w	80107e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 80106dc:	9b08      	ldr	r3, [sp, #32]
 80106de:	9902      	ldr	r1, [sp, #8]
 80106e0:	015b      	lsls	r3, r3, #5
 80106e2:	9c02      	ldr	r4, [sp, #8]
 80106e4:	fb93 f1f1 	sdiv	r1, r3, r1
 80106e8:	fb04 3311 	mls	r3, r4, r1, r3
 80106ec:	9103      	str	r1, [sp, #12]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	9308      	str	r3, [sp, #32]
 80106f2:	da04      	bge.n	80106fe <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 80106f4:	1e4b      	subs	r3, r1, #1
 80106f6:	9303      	str	r3, [sp, #12]
 80106f8:	9b08      	ldr	r3, [sp, #32]
 80106fa:	4423      	add	r3, r4
 80106fc:	9308      	str	r3, [sp, #32]
 80106fe:	9b07      	ldr	r3, [sp, #28]
 8010700:	464f      	mov	r7, r9
 8010702:	9902      	ldr	r1, [sp, #8]
 8010704:	2600      	movs	r6, #0
 8010706:	1a5b      	subs	r3, r3, r1
 8010708:	9307      	str	r3, [sp, #28]
 801070a:	9b01      	ldr	r3, [sp, #4]
 801070c:	f1c3 0320 	rsb	r3, r3, #32
 8010710:	930e      	str	r3, [sp, #56]	@ 0x38
 8010712:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010714:	9b01      	ldr	r3, [sp, #4]
 8010716:	1a5b      	subs	r3, r3, r1
 8010718:	930a      	str	r3, [sp, #40]	@ 0x28
 801071a:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801071e:	185b      	adds	r3, r3, r1
 8010720:	bf58      	it	pl
 8010722:	9902      	ldrpl	r1, [sp, #8]
 8010724:	9307      	str	r3, [sp, #28]
 8010726:	bf57      	itett	pl
 8010728:	1a5b      	subpl	r3, r3, r1
 801072a:	9903      	ldrmi	r1, [sp, #12]
 801072c:	9307      	strpl	r3, [sp, #28]
 801072e:	9b03      	ldrpl	r3, [sp, #12]
 8010730:	bf58      	it	pl
 8010732:	1c59      	addpl	r1, r3, #1
 8010734:	2a00      	cmp	r2, #0
 8010736:	4489      	add	r9, r1
 8010738:	ea4f 1a69 	mov.w	sl, r9, asr #5
 801073c:	db2e      	blt.n	801079c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801073e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010740:	4293      	cmp	r3, r2
 8010742:	dd2b      	ble.n	801079c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010744:	9c01      	ldr	r4, [sp, #4]
 8010746:	6905      	ldr	r5, [r0, #16]
 8010748:	46a0      	mov	r8, r4
 801074a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801074c:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8010750:	45a0      	cmp	r8, r4
 8010752:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8010756:	f040 814c 	bne.w	80109f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801075a:	f9b5 1000 	ldrsh.w	r1, [r5]
 801075e:	4551      	cmp	r1, sl
 8010760:	d103      	bne.n	801076a <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8010762:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8010766:	4291      	cmp	r1, r2
 8010768:	d018      	beq.n	801079c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801076a:	ea5c 010e 	orrs.w	r1, ip, lr
 801076e:	d00f      	beq.n	8010790 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8010770:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8010774:	2900      	cmp	r1, #0
 8010776:	db0b      	blt.n	8010790 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8010778:	428b      	cmp	r3, r1
 801077a:	dd09      	ble.n	8010790 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801077c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8010780:	4299      	cmp	r1, r3
 8010782:	f101 0101 	add.w	r1, r1, #1
 8010786:	bf38      	it	cc
 8010788:	3508      	addcc	r5, #8
 801078a:	6081      	str	r1, [r0, #8]
 801078c:	bf38      	it	cc
 801078e:	6105      	strcc	r5, [r0, #16]
 8010790:	6903      	ldr	r3, [r0, #16]
 8010792:	f8a3 a000 	strh.w	sl, [r3]
 8010796:	805a      	strh	r2, [r3, #2]
 8010798:	809e      	strh	r6, [r3, #4]
 801079a:	80de      	strh	r6, [r3, #6]
 801079c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801079e:	6901      	ldr	r1, [r0, #16]
 80107a0:	441a      	add	r2, r3
 80107a2:	88cc      	ldrh	r4, [r1, #6]
 80107a4:	888b      	ldrh	r3, [r1, #4]
 80107a6:	4323      	orrs	r3, r4
 80107a8:	d010      	beq.n	80107cc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80107aa:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80107ae:	2c00      	cmp	r4, #0
 80107b0:	db0c      	blt.n	80107cc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80107b2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80107b4:	429c      	cmp	r4, r3
 80107b6:	da09      	bge.n	80107cc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80107b8:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80107bc:	429c      	cmp	r4, r3
 80107be:	f104 0401 	add.w	r4, r4, #1
 80107c2:	bf38      	it	cc
 80107c4:	3108      	addcc	r1, #8
 80107c6:	6084      	str	r4, [r0, #8]
 80107c8:	bf38      	it	cc
 80107ca:	6101      	strcc	r1, [r0, #16]
 80107cc:	6903      	ldr	r3, [r0, #16]
 80107ce:	464f      	mov	r7, r9
 80107d0:	f8a3 a000 	strh.w	sl, [r3]
 80107d4:	805a      	strh	r2, [r3, #2]
 80107d6:	809e      	strh	r6, [r3, #4]
 80107d8:	80de      	strh	r6, [r3, #6]
 80107da:	9b06      	ldr	r3, [sp, #24]
 80107dc:	4293      	cmp	r3, r2
 80107de:	d19c      	bne.n	801071a <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 80107e0:	9b01      	ldr	r3, [sp, #4]
 80107e2:	6907      	ldr	r7, [r0, #16]
 80107e4:	f1c3 0620 	rsb	r6, r3, #32
 80107e8:	9b05      	ldr	r3, [sp, #20]
 80107ea:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80107ee:	9b04      	ldr	r3, [sp, #16]
 80107f0:	429e      	cmp	r6, r3
 80107f2:	f040 81c7 	bne.w	8010b84 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 80107f6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80107fa:	459e      	cmp	lr, r3
 80107fc:	d104      	bne.n	8010808 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 80107fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010802:	429a      	cmp	r2, r3
 8010804:	f43f ae3a 	beq.w	801047c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010808:	88f9      	ldrh	r1, [r7, #6]
 801080a:	88bb      	ldrh	r3, [r7, #4]
 801080c:	430b      	orrs	r3, r1
 801080e:	d010      	beq.n	8010832 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8010810:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010814:	2b00      	cmp	r3, #0
 8010816:	db0c      	blt.n	8010832 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8010818:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801081a:	428b      	cmp	r3, r1
 801081c:	da09      	bge.n	8010832 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801081e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8010822:	428b      	cmp	r3, r1
 8010824:	f103 0301 	add.w	r3, r3, #1
 8010828:	bf38      	it	cc
 801082a:	3708      	addcc	r7, #8
 801082c:	6083      	str	r3, [r0, #8]
 801082e:	bf38      	it	cc
 8010830:	6107      	strcc	r7, [r0, #16]
 8010832:	6903      	ldr	r3, [r0, #16]
 8010834:	f8a3 e000 	strh.w	lr, [r3]
 8010838:	e603      	b.n	8010442 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 801083a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801083c:	9c03      	ldr	r4, [sp, #12]
 801083e:	42a2      	cmp	r2, r4
 8010840:	f6ff ae1c 	blt.w	801047c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010844:	9c06      	ldr	r4, [sp, #24]
 8010846:	42a2      	cmp	r2, r4
 8010848:	9c08      	ldr	r4, [sp, #32]
 801084a:	bfbc      	itt	lt
 801084c:	3201      	addlt	r2, #1
 801084e:	9206      	strlt	r2, [sp, #24]
 8010850:	f1c3 0220 	rsb	r2, r3, #32
 8010854:	4362      	muls	r2, r4
 8010856:	2401      	movs	r4, #1
 8010858:	940b      	str	r4, [sp, #44]	@ 0x2c
 801085a:	2420      	movs	r4, #32
 801085c:	e6d6      	b.n	801060c <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 801085e:	ea4f 1861 	mov.w	r8, r1, asr #5
 8010862:	f009 021f 	and.w	r2, r9, #31
 8010866:	f001 011f 	and.w	r1, r1, #31
 801086a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801086e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010870:	45b0      	cmp	r8, r6
 8010872:	9a01      	ldr	r2, [sp, #4]
 8010874:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8010878:	eba2 0203 	sub.w	r2, r2, r3
 801087c:	d108      	bne.n	8010890 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 801087e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010880:	4496      	add	lr, r2
 8010882:	4419      	add	r1, r3
 8010884:	f8a5 e004 	strh.w	lr, [r5, #4]
 8010888:	fb02 a101 	mla	r1, r2, r1, sl
 801088c:	80e9      	strh	r1, [r5, #6]
 801088e:	e6fa      	b.n	8010686 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8010890:	2c00      	cmp	r4, #0
 8010892:	f2c0 80a7 	blt.w	80109e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8010896:	2701      	movs	r7, #1
 8010898:	f1c1 0c20 	rsb	ip, r1, #32
 801089c:	970a      	str	r7, [sp, #40]	@ 0x28
 801089e:	2720      	movs	r7, #32
 80108a0:	fb02 f20c 	mul.w	r2, r2, ip
 80108a4:	9709      	str	r7, [sp, #36]	@ 0x24
 80108a6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80108a8:	fb92 fcf4 	sdiv	ip, r2, r4
 80108ac:	fb04 221c 	mls	r2, r4, ip, r2
 80108b0:	4439      	add	r1, r7
 80108b2:	2a00      	cmp	r2, #0
 80108b4:	bfbc      	itt	lt
 80108b6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80108ba:	1912      	addlt	r2, r2, r4
 80108bc:	fb0c a101 	mla	r1, ip, r1, sl
 80108c0:	44e6      	add	lr, ip
 80108c2:	80e9      	strh	r1, [r5, #6]
 80108c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80108c6:	f8a5 e004 	strh.w	lr, [r5, #4]
 80108ca:	eb08 0501 	add.w	r5, r8, r1
 80108ce:	6901      	ldr	r1, [r0, #16]
 80108d0:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80108d4:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80108d8:	ea58 070e 	orrs.w	r7, r8, lr
 80108dc:	d010      	beq.n	8010900 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80108de:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 80108e2:	f1be 0f00 	cmp.w	lr, #0
 80108e6:	db0b      	blt.n	8010900 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80108e8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80108ea:	45be      	cmp	lr, r7
 80108ec:	da08      	bge.n	8010900 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80108ee:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80108f2:	45be      	cmp	lr, r7
 80108f4:	bf3c      	itt	cc
 80108f6:	3108      	addcc	r1, #8
 80108f8:	6101      	strcc	r1, [r0, #16]
 80108fa:	f10e 0101 	add.w	r1, lr, #1
 80108fe:	6081      	str	r1, [r0, #8]
 8010900:	6901      	ldr	r1, [r0, #16]
 8010902:	f04f 0e00 	mov.w	lr, #0
 8010906:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801090a:	42ae      	cmp	r6, r5
 801090c:	800d      	strh	r5, [r1, #0]
 801090e:	4463      	add	r3, ip
 8010910:	f8a1 8002 	strh.w	r8, [r1, #2]
 8010914:	f8a1 e004 	strh.w	lr, [r1, #4]
 8010918:	f8a1 e006 	strh.w	lr, [r1, #6]
 801091c:	d053      	beq.n	80109c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801091e:	9901      	ldr	r1, [sp, #4]
 8010920:	1b12      	subs	r2, r2, r4
 8010922:	1ac9      	subs	r1, r1, r3
 8010924:	4461      	add	r1, ip
 8010926:	0149      	lsls	r1, r1, #5
 8010928:	fb91 fef4 	sdiv	lr, r1, r4
 801092c:	fb04 111e 	mls	r1, r4, lr, r1
 8010930:	2900      	cmp	r1, #0
 8010932:	bfbc      	itt	lt
 8010934:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8010938:	1909      	addlt	r1, r1, r4
 801093a:	f10e 0701 	add.w	r7, lr, #1
 801093e:	970d      	str	r7, [sp, #52]	@ 0x34
 8010940:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8010944:	1852      	adds	r2, r2, r1
 8010946:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8010948:	bf54      	ite	pl
 801094a:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 801094e:	46f4      	movmi	ip, lr
 8010950:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8010954:	bf58      	it	pl
 8010956:	1b12      	subpl	r2, r2, r4
 8010958:	4463      	add	r3, ip
 801095a:	443d      	add	r5, r7
 801095c:	44e3      	add	fp, ip
 801095e:	f8aa b004 	strh.w	fp, [sl, #4]
 8010962:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8010966:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801096a:	f8aa b006 	strh.w	fp, [sl, #6]
 801096e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010972:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010976:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801097a:	ea5b 070a 	orrs.w	r7, fp, sl
 801097e:	d014      	beq.n	80109aa <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8010980:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8010984:	f1ba 0f00 	cmp.w	sl, #0
 8010988:	db0f      	blt.n	80109aa <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801098a:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801098c:	45ba      	cmp	sl, r7
 801098e:	da0c      	bge.n	80109aa <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8010990:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8010994:	45ba      	cmp	sl, r7
 8010996:	f10a 0a01 	add.w	sl, sl, #1
 801099a:	bf38      	it	cc
 801099c:	f10c 0c08 	addcc.w	ip, ip, #8
 80109a0:	f8c0 a008 	str.w	sl, [r0, #8]
 80109a4:	bf38      	it	cc
 80109a6:	f8c0 c010 	strcc.w	ip, [r0, #16]
 80109aa:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80109ae:	f04f 0700 	mov.w	r7, #0
 80109b2:	42ae      	cmp	r6, r5
 80109b4:	f8ac 5000 	strh.w	r5, [ip]
 80109b8:	f8ac 8002 	strh.w	r8, [ip, #2]
 80109bc:	f8ac 7004 	strh.w	r7, [ip, #4]
 80109c0:	f8ac 7006 	strh.w	r7, [ip, #6]
 80109c4:	d1bc      	bne.n	8010940 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 80109c6:	6904      	ldr	r4, [r0, #16]
 80109c8:	9a01      	ldr	r2, [sp, #4]
 80109ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80109cc:	1ad3      	subs	r3, r2, r3
 80109ce:	88a2      	ldrh	r2, [r4, #4]
 80109d0:	3120      	adds	r1, #32
 80109d2:	441a      	add	r2, r3
 80109d4:	80a2      	strh	r2, [r4, #4]
 80109d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109d8:	1a89      	subs	r1, r1, r2
 80109da:	88e2      	ldrh	r2, [r4, #6]
 80109dc:	fb03 2301 	mla	r3, r3, r1, r2
 80109e0:	80e3      	strh	r3, [r4, #6]
 80109e2:	e650      	b.n	8010686 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80109e4:	f04f 37ff 	mov.w	r7, #4294967295
 80109e8:	434a      	muls	r2, r1
 80109ea:	4264      	negs	r4, r4
 80109ec:	970a      	str	r7, [sp, #40]	@ 0x28
 80109ee:	2700      	movs	r7, #0
 80109f0:	e758      	b.n	80108a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 80109f2:	ea4f 1867 	mov.w	r8, r7, asr #5
 80109f6:	f009 031f 	and.w	r3, r9, #31
 80109fa:	f007 071f 	and.w	r7, r7, #31
 80109fe:	fa1f fc8c 	uxth.w	ip, ip
 8010a02:	45d0      	cmp	r8, sl
 8010a04:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010a06:	fa1f fe8e 	uxth.w	lr, lr
 8010a0a:	d10a      	bne.n	8010a22 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8010a0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a0e:	449c      	add	ip, r3
 8010a10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a12:	441f      	add	r7, r3
 8010a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a16:	f8a5 c004 	strh.w	ip, [r5, #4]
 8010a1a:	fb03 e707 	mla	r7, r3, r7, lr
 8010a1e:	80ef      	strh	r7, [r5, #6]
 8010a20:	e6bc      	b.n	801079c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010a22:	2900      	cmp	r1, #0
 8010a24:	f2c0 80a6 	blt.w	8010b74 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8010a28:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010a2a:	f1c7 0320 	rsb	r3, r7, #32
 8010a2e:	4363      	muls	r3, r4
 8010a30:	2401      	movs	r4, #1
 8010a32:	940d      	str	r4, [sp, #52]	@ 0x34
 8010a34:	2420      	movs	r4, #32
 8010a36:	940c      	str	r4, [sp, #48]	@ 0x30
 8010a38:	fb93 f4f1 	sdiv	r4, r3, r1
 8010a3c:	fb01 3b14 	mls	fp, r1, r4, r3
 8010a40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a42:	f1bb 0f00 	cmp.w	fp, #0
 8010a46:	441f      	add	r7, r3
 8010a48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010a4a:	bfbc      	itt	lt
 8010a4c:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8010a50:	448b      	addlt	fp, r1
 8010a52:	fb04 e707 	mla	r7, r4, r7, lr
 8010a56:	44a4      	add	ip, r4
 8010a58:	80ef      	strh	r7, [r5, #6]
 8010a5a:	f8a5 c004 	strh.w	ip, [r5, #4]
 8010a5e:	eb08 0503 	add.w	r5, r8, r3
 8010a62:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010a66:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8010a6a:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8010a6e:	ea5e 0307 	orrs.w	r3, lr, r7
 8010a72:	d011      	beq.n	8010a98 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8010a74:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8010a78:	f1be 0f00 	cmp.w	lr, #0
 8010a7c:	db0c      	blt.n	8010a98 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8010a7e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010a80:	45be      	cmp	lr, r7
 8010a82:	da09      	bge.n	8010a98 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8010a84:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8010a88:	45be      	cmp	lr, r7
 8010a8a:	bf3c      	itt	cc
 8010a8c:	f10c 0708 	addcc.w	r7, ip, #8
 8010a90:	6107      	strcc	r7, [r0, #16]
 8010a92:	f10e 0701 	add.w	r7, lr, #1
 8010a96:	6087      	str	r7, [r0, #8]
 8010a98:	6907      	ldr	r7, [r0, #16]
 8010a9a:	b213      	sxth	r3, r2
 8010a9c:	4555      	cmp	r5, sl
 8010a9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010aa0:	807b      	strh	r3, [r7, #2]
 8010aa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010aa4:	803d      	strh	r5, [r7, #0]
 8010aa6:	80be      	strh	r6, [r7, #4]
 8010aa8:	eb04 0c03 	add.w	ip, r4, r3
 8010aac:	80fe      	strh	r6, [r7, #6]
 8010aae:	d050      	beq.n	8010b52 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8010ab0:	9b01      	ldr	r3, [sp, #4]
 8010ab2:	eba3 070c 	sub.w	r7, r3, ip
 8010ab6:	ebab 0301 	sub.w	r3, fp, r1
 8010aba:	443c      	add	r4, r7
 8010abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8010abe:	0164      	lsls	r4, r4, #5
 8010ac0:	fb94 f8f1 	sdiv	r8, r4, r1
 8010ac4:	fb01 4418 	mls	r4, r1, r8, r4
 8010ac8:	2c00      	cmp	r4, #0
 8010aca:	bfbc      	itt	lt
 8010acc:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8010ad0:	1864      	addlt	r4, r4, r1
 8010ad2:	f108 0701 	add.w	r7, r8, #1
 8010ad6:	9711      	str	r7, [sp, #68]	@ 0x44
 8010ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ada:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8010ade:	191b      	adds	r3, r3, r4
 8010ae0:	f8be b004 	ldrh.w	fp, [lr, #4]
 8010ae4:	bf54      	ite	pl
 8010ae6:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8010ae8:	4647      	movmi	r7, r8
 8010aea:	9309      	str	r3, [sp, #36]	@ 0x24
 8010aec:	bf58      	it	pl
 8010aee:	1a5b      	subpl	r3, r3, r1
 8010af0:	44bb      	add	fp, r7
 8010af2:	44bc      	add	ip, r7
 8010af4:	bf58      	it	pl
 8010af6:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8010af8:	f8ae b004 	strh.w	fp, [lr, #4]
 8010afc:	f8be b006 	ldrh.w	fp, [lr, #6]
 8010b00:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8010b04:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8010b06:	f8ae b006 	strh.w	fp, [lr, #6]
 8010b0a:	443d      	add	r5, r7
 8010b0c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8010b10:	f8be b006 	ldrh.w	fp, [lr, #6]
 8010b14:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8010b18:	ea5b 0307 	orrs.w	r3, fp, r7
 8010b1c:	d011      	beq.n	8010b42 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010b1e:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8010b22:	f1bb 0f00 	cmp.w	fp, #0
 8010b26:	db0c      	blt.n	8010b42 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010b28:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010b2a:	45bb      	cmp	fp, r7
 8010b2c:	da09      	bge.n	8010b42 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010b2e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8010b32:	45bb      	cmp	fp, r7
 8010b34:	bf3c      	itt	cc
 8010b36:	f10e 0708 	addcc.w	r7, lr, #8
 8010b3a:	6107      	strcc	r7, [r0, #16]
 8010b3c:	f10b 0701 	add.w	r7, fp, #1
 8010b40:	6087      	str	r7, [r0, #8]
 8010b42:	6907      	ldr	r7, [r0, #16]
 8010b44:	4555      	cmp	r5, sl
 8010b46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010b48:	803d      	strh	r5, [r7, #0]
 8010b4a:	807b      	strh	r3, [r7, #2]
 8010b4c:	80be      	strh	r6, [r7, #4]
 8010b4e:	80fe      	strh	r6, [r7, #6]
 8010b50:	d1c2      	bne.n	8010ad8 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8010b52:	9b01      	ldr	r3, [sp, #4]
 8010b54:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8010b56:	eba3 0c0c 	sub.w	ip, r3, ip
 8010b5a:	6903      	ldr	r3, [r0, #16]
 8010b5c:	3720      	adds	r7, #32
 8010b5e:	8899      	ldrh	r1, [r3, #4]
 8010b60:	4461      	add	r1, ip
 8010b62:	8099      	strh	r1, [r3, #4]
 8010b64:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010b66:	1a7f      	subs	r7, r7, r1
 8010b68:	88d9      	ldrh	r1, [r3, #6]
 8010b6a:	fb0c 1c07 	mla	ip, ip, r7, r1
 8010b6e:	f8a3 c006 	strh.w	ip, [r3, #6]
 8010b72:	e613      	b.n	801079c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010b74:	f04f 34ff 	mov.w	r4, #4294967295
 8010b78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b7a:	4249      	negs	r1, r1
 8010b7c:	940d      	str	r4, [sp, #52]	@ 0x34
 8010b7e:	2400      	movs	r4, #0
 8010b80:	437b      	muls	r3, r7
 8010b82:	e758      	b.n	8010a36 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8010b84:	9905      	ldr	r1, [sp, #20]
 8010b86:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8010b8a:	f009 0c1f 	and.w	ip, r9, #31
 8010b8e:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8010b92:	f001 011f 	and.w	r1, r1, #31
 8010b96:	45f3      	cmp	fp, lr
 8010b98:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8010b9c:	9102      	str	r1, [sp, #8]
 8010b9e:	9904      	ldr	r1, [sp, #16]
 8010ba0:	eba1 0406 	sub.w	r4, r1, r6
 8010ba4:	d108      	bne.n	8010bb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8010ba6:	9b02      	ldr	r3, [sp, #8]
 8010ba8:	44a0      	add	r8, r4
 8010baa:	449c      	add	ip, r3
 8010bac:	f8a7 8004 	strh.w	r8, [r7, #4]
 8010bb0:	fb04 a40c 	mla	r4, r4, ip, sl
 8010bb4:	80fc      	strh	r4, [r7, #6]
 8010bb6:	e461      	b.n	801047c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010bb8:	9905      	ldr	r1, [sp, #20]
 8010bba:	ebb1 0109 	subs.w	r1, r1, r9
 8010bbe:	bf51      	iteee	pl
 8010bc0:	f1cc 0520 	rsbpl	r5, ip, #32
 8010bc4:	fb04 f40c 	mulmi.w	r4, r4, ip
 8010bc8:	4249      	negmi	r1, r1
 8010bca:	2500      	movmi	r5, #0
 8010bcc:	bf5d      	ittte	pl
 8010bce:	436c      	mulpl	r4, r5
 8010bd0:	2520      	movpl	r5, #32
 8010bd2:	f04f 0901 	movpl.w	r9, #1
 8010bd6:	f04f 39ff 	movmi.w	r9, #4294967295
 8010bda:	9501      	str	r5, [sp, #4]
 8010bdc:	9b01      	ldr	r3, [sp, #4]
 8010bde:	fb94 f5f1 	sdiv	r5, r4, r1
 8010be2:	fb01 4415 	mls	r4, r1, r5, r4
 8010be6:	449c      	add	ip, r3
 8010be8:	eb0b 0309 	add.w	r3, fp, r9
 8010bec:	2c00      	cmp	r4, #0
 8010bee:	bfbc      	itt	lt
 8010bf0:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8010bf4:	1864      	addlt	r4, r4, r1
 8010bf6:	44a8      	add	r8, r5
 8010bf8:	fb05 ac0c 	mla	ip, r5, ip, sl
 8010bfc:	f8a7 8004 	strh.w	r8, [r7, #4]
 8010c00:	f8a7 c006 	strh.w	ip, [r7, #6]
 8010c04:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010c08:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8010c0c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8010c10:	ea58 0707 	orrs.w	r7, r8, r7
 8010c14:	d011      	beq.n	8010c3a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8010c16:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8010c1a:	f1b8 0f00 	cmp.w	r8, #0
 8010c1e:	db0c      	blt.n	8010c3a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8010c20:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010c22:	45b8      	cmp	r8, r7
 8010c24:	da09      	bge.n	8010c3a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8010c26:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8010c2a:	45b8      	cmp	r8, r7
 8010c2c:	bf3c      	itt	cc
 8010c2e:	f10c 0708 	addcc.w	r7, ip, #8
 8010c32:	6107      	strcc	r7, [r0, #16]
 8010c34:	f108 0701 	add.w	r7, r8, #1
 8010c38:	6087      	str	r7, [r0, #8]
 8010c3a:	6907      	ldr	r7, [r0, #16]
 8010c3c:	f04f 0c00 	mov.w	ip, #0
 8010c40:	b212      	sxth	r2, r2
 8010c42:	459e      	cmp	lr, r3
 8010c44:	803b      	strh	r3, [r7, #0]
 8010c46:	442e      	add	r6, r5
 8010c48:	807a      	strh	r2, [r7, #2]
 8010c4a:	f8a7 c004 	strh.w	ip, [r7, #4]
 8010c4e:	f8a7 c006 	strh.w	ip, [r7, #6]
 8010c52:	d04b      	beq.n	8010cec <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8010c54:	9f04      	ldr	r7, [sp, #16]
 8010c56:	1a64      	subs	r4, r4, r1
 8010c58:	f04f 0a00 	mov.w	sl, #0
 8010c5c:	1bbf      	subs	r7, r7, r6
 8010c5e:	443d      	add	r5, r7
 8010c60:	016d      	lsls	r5, r5, #5
 8010c62:	fb95 f8f1 	sdiv	r8, r5, r1
 8010c66:	fb01 5518 	mls	r5, r1, r8, r5
 8010c6a:	4565      	cmp	r5, ip
 8010c6c:	bfbc      	itt	lt
 8010c6e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8010c72:	186d      	addlt	r5, r5, r1
 8010c74:	f108 0701 	add.w	r7, r8, #1
 8010c78:	9703      	str	r7, [sp, #12]
 8010c7a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010c7e:	1964      	adds	r4, r4, r5
 8010c80:	444b      	add	r3, r9
 8010c82:	bf54      	ite	pl
 8010c84:	9f03      	ldrpl	r7, [sp, #12]
 8010c86:	4647      	movmi	r7, r8
 8010c88:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8010c8c:	bf58      	it	pl
 8010c8e:	1a64      	subpl	r4, r4, r1
 8010c90:	443e      	add	r6, r7
 8010c92:	44bb      	add	fp, r7
 8010c94:	f8ac b004 	strh.w	fp, [ip, #4]
 8010c98:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010c9c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8010ca0:	f8ac b006 	strh.w	fp, [ip, #6]
 8010ca4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010ca8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010cac:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8010cb0:	ea5b 0707 	orrs.w	r7, fp, r7
 8010cb4:	d011      	beq.n	8010cda <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010cb6:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8010cba:	f1bb 0f00 	cmp.w	fp, #0
 8010cbe:	db0c      	blt.n	8010cda <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010cc0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010cc2:	45bb      	cmp	fp, r7
 8010cc4:	da09      	bge.n	8010cda <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010cc6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8010cca:	45bb      	cmp	fp, r7
 8010ccc:	bf3c      	itt	cc
 8010cce:	f10c 0708 	addcc.w	r7, ip, #8
 8010cd2:	6107      	strcc	r7, [r0, #16]
 8010cd4:	f10b 0701 	add.w	r7, fp, #1
 8010cd8:	6087      	str	r7, [r0, #8]
 8010cda:	6907      	ldr	r7, [r0, #16]
 8010cdc:	459e      	cmp	lr, r3
 8010cde:	803b      	strh	r3, [r7, #0]
 8010ce0:	807a      	strh	r2, [r7, #2]
 8010ce2:	f8a7 a004 	strh.w	sl, [r7, #4]
 8010ce6:	f8a7 a006 	strh.w	sl, [r7, #6]
 8010cea:	d1c6      	bne.n	8010c7a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8010cec:	9b04      	ldr	r3, [sp, #16]
 8010cee:	1b9e      	subs	r6, r3, r6
 8010cf0:	6903      	ldr	r3, [r0, #16]
 8010cf2:	889a      	ldrh	r2, [r3, #4]
 8010cf4:	4432      	add	r2, r6
 8010cf6:	809a      	strh	r2, [r3, #4]
 8010cf8:	9a02      	ldr	r2, [sp, #8]
 8010cfa:	f102 0c20 	add.w	ip, r2, #32
 8010cfe:	9a01      	ldr	r2, [sp, #4]
 8010d00:	ebac 0c02 	sub.w	ip, ip, r2
 8010d04:	88da      	ldrh	r2, [r3, #6]
 8010d06:	fb06 260c 	mla	r6, r6, ip, r2
 8010d0a:	80de      	strh	r6, [r3, #6]
 8010d0c:	f7ff bbb6 	b.w	801047c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08010d10 <_ZN8touchgfx7Outline6lineToEii>:
 8010d10:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010d12:	079b      	lsls	r3, r3, #30
 8010d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d16:	460e      	mov	r6, r1
 8010d18:	4615      	mov	r5, r2
 8010d1a:	d511      	bpl.n	8010d40 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8010d1c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8010d20:	ea86 0701 	eor.w	r7, r6, r1
 8010d24:	ea85 0302 	eor.w	r3, r5, r2
 8010d28:	433b      	orrs	r3, r7
 8010d2a:	d009      	beq.n	8010d40 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8010d2c:	4633      	mov	r3, r6
 8010d2e:	9500      	str	r5, [sp, #0]
 8010d30:	f7ff fb4c 	bl	80103cc <_ZN8touchgfx7Outline10renderLineEiiii>
 8010d34:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010d36:	f043 0301 	orr.w	r3, r3, #1
 8010d3a:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8010d3e:	6243      	str	r3, [r0, #36]	@ 0x24
 8010d40:	b003      	add	sp, #12
 8010d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010d44 <_ZN8touchgfx7Outline6moveToEii>:
 8010d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d46:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010d48:	4615      	mov	r5, r2
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	460e      	mov	r6, r1
 8010d4e:	079a      	lsls	r2, r3, #30
 8010d50:	d401      	bmi.n	8010d56 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8010d52:	f7ff fb07 	bl	8010364 <_ZN8touchgfx7Outline5resetEv>
 8010d56:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010d58:	07db      	lsls	r3, r3, #31
 8010d5a:	d504      	bpl.n	8010d66 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8010d62:	f7ff ffd5 	bl	8010d10 <_ZN8touchgfx7Outline6lineToEii>
 8010d66:	6923      	ldr	r3, [r4, #16]
 8010d68:	1170      	asrs	r0, r6, #5
 8010d6a:	1169      	asrs	r1, r5, #5
 8010d6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010d70:	4290      	cmp	r0, r2
 8010d72:	d103      	bne.n	8010d7c <_ZN8touchgfx7Outline6moveToEii+0x38>
 8010d74:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010d78:	4291      	cmp	r1, r2
 8010d7a:	d01a      	beq.n	8010db2 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8010d7c:	88df      	ldrh	r7, [r3, #6]
 8010d7e:	889a      	ldrh	r2, [r3, #4]
 8010d80:	433a      	orrs	r2, r7
 8010d82:	d010      	beq.n	8010da6 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010d84:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010d88:	2a00      	cmp	r2, #0
 8010d8a:	db0c      	blt.n	8010da6 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010d8c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8010d8e:	42ba      	cmp	r2, r7
 8010d90:	da09      	bge.n	8010da6 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010d92:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8010d96:	42ba      	cmp	r2, r7
 8010d98:	f102 0201 	add.w	r2, r2, #1
 8010d9c:	bf38      	it	cc
 8010d9e:	3308      	addcc	r3, #8
 8010da0:	60a2      	str	r2, [r4, #8]
 8010da2:	bf38      	it	cc
 8010da4:	6123      	strcc	r3, [r4, #16]
 8010da6:	6923      	ldr	r3, [r4, #16]
 8010da8:	2200      	movs	r2, #0
 8010daa:	8018      	strh	r0, [r3, #0]
 8010dac:	8059      	strh	r1, [r3, #2]
 8010dae:	809a      	strh	r2, [r3, #4]
 8010db0:	80da      	strh	r2, [r3, #6]
 8010db2:	6166      	str	r6, [r4, #20]
 8010db4:	6225      	str	r5, [r4, #32]
 8010db6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8010dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010dbc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8010dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dc0:	b0d0      	sub	sp, #320	@ 0x140
 8010dc2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010dc6:	466c      	mov	r4, sp
 8010dc8:	4627      	mov	r7, r4
 8010dca:	1a0d      	subs	r5, r1, r0
 8010dcc:	f100 0308 	add.w	r3, r0, #8
 8010dd0:	2d48      	cmp	r5, #72	@ 0x48
 8010dd2:	f340 80d5 	ble.w	8010f80 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8010dd6:	112d      	asrs	r5, r5, #4
 8010dd8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8010ddc:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010de0:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8010de4:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8010de8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8010dec:	6816      	ldr	r6, [r2, #0]
 8010dee:	6006      	str	r6, [r0, #0]
 8010df0:	6856      	ldr	r6, [r2, #4]
 8010df2:	6046      	str	r6, [r0, #4]
 8010df4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8010df8:	f8a2 8002 	strh.w	r8, [r2, #2]
 8010dfc:	f8a2 e004 	strh.w	lr, [r2, #4]
 8010e00:	f8a2 c006 	strh.w	ip, [r2, #6]
 8010e04:	f1a1 0208 	sub.w	r2, r1, #8
 8010e08:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8010e0c:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8010e10:	4565      	cmp	r5, ip
 8010e12:	db06      	blt.n	8010e22 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8010e14:	d119      	bne.n	8010e4a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8010e16:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8010e1a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8010e1e:	42ae      	cmp	r6, r5
 8010e20:	dd13      	ble.n	8010e4a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8010e22:	460e      	mov	r6, r1
 8010e24:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8010e28:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8010e2c:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8010e30:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8010e34:	601d      	str	r5, [r3, #0]
 8010e36:	6875      	ldr	r5, [r6, #4]
 8010e38:	605d      	str	r5, [r3, #4]
 8010e3a:	f821 9c08 	strh.w	r9, [r1, #-8]
 8010e3e:	f821 cc06 	strh.w	ip, [r1, #-6]
 8010e42:	f821 8c04 	strh.w	r8, [r1, #-4]
 8010e46:	f821 ec02 	strh.w	lr, [r1, #-2]
 8010e4a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8010e4e:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8010e52:	42ae      	cmp	r6, r5
 8010e54:	db06      	blt.n	8010e64 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8010e56:	d116      	bne.n	8010e86 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8010e58:	f9b0 c000 	ldrsh.w	ip, [r0]
 8010e5c:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8010e60:	45ac      	cmp	ip, r5
 8010e62:	da10      	bge.n	8010e86 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8010e64:	681d      	ldr	r5, [r3, #0]
 8010e66:	f9b0 8000 	ldrsh.w	r8, [r0]
 8010e6a:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8010e6e:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8010e72:	6005      	str	r5, [r0, #0]
 8010e74:	685d      	ldr	r5, [r3, #4]
 8010e76:	f8a0 8008 	strh.w	r8, [r0, #8]
 8010e7a:	6045      	str	r5, [r0, #4]
 8010e7c:	8146      	strh	r6, [r0, #10]
 8010e7e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8010e82:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8010e86:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8010e8a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8010e8e:	4565      	cmp	r5, ip
 8010e90:	db06      	blt.n	8010ea0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8010e92:	d119      	bne.n	8010ec8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010e94:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8010e98:	f9b0 5000 	ldrsh.w	r5, [r0]
 8010e9c:	42ae      	cmp	r6, r5
 8010e9e:	da13      	bge.n	8010ec8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010ea0:	460e      	mov	r6, r1
 8010ea2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010ea6:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8010eaa:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8010eae:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8010eb2:	6005      	str	r5, [r0, #0]
 8010eb4:	6875      	ldr	r5, [r6, #4]
 8010eb6:	6045      	str	r5, [r0, #4]
 8010eb8:	f821 9c08 	strh.w	r9, [r1, #-8]
 8010ebc:	f821 cc06 	strh.w	ip, [r1, #-6]
 8010ec0:	f821 8c04 	strh.w	r8, [r1, #-4]
 8010ec4:	f821 ec02 	strh.w	lr, [r1, #-2]
 8010ec8:	3308      	adds	r3, #8
 8010eca:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8010ece:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8010ed2:	45e6      	cmp	lr, ip
 8010ed4:	dbf8      	blt.n	8010ec8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010ed6:	d105      	bne.n	8010ee4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8010ed8:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010edc:	f9b0 5000 	ldrsh.w	r5, [r0]
 8010ee0:	42ae      	cmp	r6, r5
 8010ee2:	dbf1      	blt.n	8010ec8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010ee4:	4615      	mov	r5, r2
 8010ee6:	3a08      	subs	r2, #8
 8010ee8:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8010eec:	45b4      	cmp	ip, r6
 8010eee:	dbf9      	blt.n	8010ee4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8010ef0:	d105      	bne.n	8010efe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8010ef2:	f9b0 8000 	ldrsh.w	r8, [r0]
 8010ef6:	f9b2 6000 	ldrsh.w	r6, [r2]
 8010efa:	45b0      	cmp	r8, r6
 8010efc:	dbf2      	blt.n	8010ee4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8010efe:	4293      	cmp	r3, r2
 8010f00:	f1a5 0608 	sub.w	r6, r5, #8
 8010f04:	d816      	bhi.n	8010f34 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8010f06:	f8d6 c000 	ldr.w	ip, [r6]
 8010f0a:	f9b3 a000 	ldrsh.w	sl, [r3]
 8010f0e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8010f12:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8010f16:	f8c3 c000 	str.w	ip, [r3]
 8010f1a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8010f1e:	f8c3 c004 	str.w	ip, [r3, #4]
 8010f22:	f825 ac08 	strh.w	sl, [r5, #-8]
 8010f26:	f825 ec06 	strh.w	lr, [r5, #-6]
 8010f2a:	f825 9c04 	strh.w	r9, [r5, #-4]
 8010f2e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8010f32:	e7c9      	b.n	8010ec8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010f34:	f8d6 e000 	ldr.w	lr, [r6]
 8010f38:	f9b0 a000 	ldrsh.w	sl, [r0]
 8010f3c:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8010f40:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8010f44:	f8c0 e000 	str.w	lr, [r0]
 8010f48:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8010f4c:	1a16      	subs	r6, r2, r0
 8010f4e:	f8c0 e004 	str.w	lr, [r0, #4]
 8010f52:	f825 ac08 	strh.w	sl, [r5, #-8]
 8010f56:	f825 cc06 	strh.w	ip, [r5, #-6]
 8010f5a:	f825 9c04 	strh.w	r9, [r5, #-4]
 8010f5e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8010f62:	1acd      	subs	r5, r1, r3
 8010f64:	10ed      	asrs	r5, r5, #3
 8010f66:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8010f6a:	bfb5      	itete	lt
 8010f6c:	e9c4 0200 	strdlt	r0, r2, [r4]
 8010f70:	e9c4 3100 	strdge	r3, r1, [r4]
 8010f74:	460a      	movlt	r2, r1
 8010f76:	4603      	movge	r3, r0
 8010f78:	3408      	adds	r4, #8
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	4611      	mov	r1, r2
 8010f7e:	e724      	b.n	8010dca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8010f80:	4299      	cmp	r1, r3
 8010f82:	d927      	bls.n	8010fd4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8010f84:	f1a3 0210 	sub.w	r2, r3, #16
 8010f88:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8010f8c:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8010f90:	45ac      	cmp	ip, r5
 8010f92:	db06      	blt.n	8010fa2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8010f94:	d11c      	bne.n	8010fd0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8010f96:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8010f9a:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8010f9e:	42ae      	cmp	r6, r5
 8010fa0:	da16      	bge.n	8010fd0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8010fa2:	4615      	mov	r5, r2
 8010fa4:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8010fa8:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8010fac:	3a08      	subs	r2, #8
 8010fae:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8010fb2:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8010fb6:	6196      	str	r6, [r2, #24]
 8010fb8:	42a8      	cmp	r0, r5
 8010fba:	686e      	ldr	r6, [r5, #4]
 8010fbc:	f8a2 9010 	strh.w	r9, [r2, #16]
 8010fc0:	61d6      	str	r6, [r2, #28]
 8010fc2:	f8a2 c012 	strh.w	ip, [r2, #18]
 8010fc6:	f8a2 8014 	strh.w	r8, [r2, #20]
 8010fca:	f8a2 e016 	strh.w	lr, [r2, #22]
 8010fce:	d1db      	bne.n	8010f88 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8010fd0:	3308      	adds	r3, #8
 8010fd2:	e7d5      	b.n	8010f80 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8010fd4:	42bc      	cmp	r4, r7
 8010fd6:	d903      	bls.n	8010fe0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8010fd8:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8010fdc:	3c08      	subs	r4, #8
 8010fde:	e6f4      	b.n	8010dca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8010fe0:	b050      	add	sp, #320	@ 0x140
 8010fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010fe6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8010fe6:	b510      	push	{r4, lr}
 8010fe8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010fea:	4604      	mov	r4, r0
 8010fec:	07da      	lsls	r2, r3, #31
 8010fee:	d507      	bpl.n	8011000 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8010ff0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8010ff4:	f7ff fe8c 	bl	8010d10 <_ZN8touchgfx7Outline6lineToEii>
 8010ff8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010ffa:	f023 0301 	bic.w	r3, r3, #1
 8010ffe:	6243      	str	r3, [r0, #36]	@ 0x24
 8011000:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011002:	079b      	lsls	r3, r3, #30
 8011004:	d521      	bpl.n	801104a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8011006:	6923      	ldr	r3, [r4, #16]
 8011008:	88d9      	ldrh	r1, [r3, #6]
 801100a:	889a      	ldrh	r2, [r3, #4]
 801100c:	430a      	orrs	r2, r1
 801100e:	d010      	beq.n	8011032 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8011010:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8011014:	2a00      	cmp	r2, #0
 8011016:	db0c      	blt.n	8011032 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8011018:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801101a:	428a      	cmp	r2, r1
 801101c:	da09      	bge.n	8011032 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801101e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8011022:	4291      	cmp	r1, r2
 8011024:	f102 0201 	add.w	r2, r2, #1
 8011028:	bf88      	it	hi
 801102a:	3308      	addhi	r3, #8
 801102c:	60a2      	str	r2, [r4, #8]
 801102e:	bf88      	it	hi
 8011030:	6123      	strhi	r3, [r4, #16]
 8011032:	68a1      	ldr	r1, [r4, #8]
 8011034:	b129      	cbz	r1, 8011042 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8011036:	6863      	ldr	r3, [r4, #4]
 8011038:	4299      	cmp	r1, r3
 801103a:	d802      	bhi.n	8011042 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801103c:	68e0      	ldr	r0, [r4, #12]
 801103e:	f7ff febd 	bl	8010dbc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8011042:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011044:	f023 0302 	bic.w	r3, r3, #2
 8011048:	6263      	str	r3, [r4, #36]	@ 0x24
 801104a:	68e0      	ldr	r0, [r4, #12]
 801104c:	bd10      	pop	{r4, pc}
	...

08011050 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8011050:	4b01      	ldr	r3, [pc, #4]	@ (8011058 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8011052:	6818      	ldr	r0, [r3, #0]
 8011054:	4770      	bx	lr
 8011056:	bf00      	nop
 8011058:	24025148 	.word	0x24025148

0801105c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801105c:	4b01      	ldr	r3, [pc, #4]	@ (8011064 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801105e:	6818      	ldr	r0, [r3, #0]
 8011060:	4770      	bx	lr
 8011062:	bf00      	nop
 8011064:	2402514c 	.word	0x2402514c

08011068 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8011068:	b510      	push	{r4, lr}
 801106a:	6803      	ldr	r3, [r0, #0]
 801106c:	460c      	mov	r4, r1
 801106e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011070:	4798      	blx	r3
 8011072:	1b03      	subs	r3, r0, r4
 8011074:	4258      	negs	r0, r3
 8011076:	4158      	adcs	r0, r3
 8011078:	bd10      	pop	{r4, pc}
	...

0801107c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801107c:	4b01      	ldr	r3, [pc, #4]	@ (8011084 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801107e:	6019      	str	r1, [r3, #0]
 8011080:	4770      	bx	lr
 8011082:	bf00      	nop
 8011084:	24025150 	.word	0x24025150

08011088 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801108c:	4696      	mov	lr, r2
 801108e:	b097      	sub	sp, #92	@ 0x5c
 8011090:	4605      	mov	r5, r0
 8011092:	4614      	mov	r4, r2
 8011094:	460e      	mov	r6, r1
 8011096:	461f      	mov	r7, r3
 8011098:	f10d 0c1c 	add.w	ip, sp, #28
 801109c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 80110a0:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 80110a4:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 80110a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80110ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110b0:	f8de 3000 	ldr.w	r3, [lr]
 80110b4:	f104 0e14 	add.w	lr, r4, #20
 80110b8:	f8cc 3000 	str.w	r3, [ip]
 80110bc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80110c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80110c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110c8:	f8de 3000 	ldr.w	r3, [lr]
 80110cc:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80110d0:	f8cc 3000 	str.w	r3, [ip]
 80110d4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80110d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80110dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110e0:	f8de 3000 	ldr.w	r3, [lr]
 80110e4:	4631      	mov	r1, r6
 80110e6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80110e8:	4628      	mov	r0, r5
 80110ea:	f8cc 3000 	str.w	r3, [ip]
 80110ee:	682b      	ldr	r3, [r5, #0]
 80110f0:	9201      	str	r2, [sp, #4]
 80110f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80110f4:	f8cd 8008 	str.w	r8, [sp, #8]
 80110f8:	9200      	str	r2, [sp, #0]
 80110fa:	aa07      	add	r2, sp, #28
 80110fc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011100:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8011104:	463b      	mov	r3, r7
 8011106:	47d8      	blx	fp
 8011108:	46a6      	mov	lr, r4
 801110a:	f10d 0c1c 	add.w	ip, sp, #28
 801110e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011112:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011116:	f8de 3000 	ldr.w	r3, [lr]
 801111a:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801111e:	343c      	adds	r4, #60	@ 0x3c
 8011120:	f8cc 3000 	str.w	r3, [ip]
 8011124:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8011128:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801112c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011130:	f8de 3000 	ldr.w	r3, [lr]
 8011134:	f8cc 3000 	str.w	r3, [ip]
 8011138:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801113c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801113e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011142:	6823      	ldr	r3, [r4, #0]
 8011144:	4631      	mov	r1, r6
 8011146:	4628      	mov	r0, r5
 8011148:	f8cc 3000 	str.w	r3, [ip]
 801114c:	682b      	ldr	r3, [r5, #0]
 801114e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011152:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011154:	f8cd 8008 	str.w	r8, [sp, #8]
 8011158:	9201      	str	r2, [sp, #4]
 801115a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801115c:	9200      	str	r2, [sp, #0]
 801115e:	aa07      	add	r2, sp, #28
 8011160:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8011162:	463b      	mov	r3, r7
 8011164:	47a0      	blx	r4
 8011166:	b017      	add	sp, #92	@ 0x5c
 8011168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801116c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801116c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011170:	b08d      	sub	sp, #52	@ 0x34
 8011172:	4688      	mov	r8, r1
 8011174:	f8d3 c000 	ldr.w	ip, [r3]
 8011178:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801117a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801117e:	680f      	ldr	r7, [r1, #0]
 8011180:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8011184:	eba7 070c 	sub.w	r7, r7, ip
 8011188:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 801118c:	edd3 6a07 	vldr	s13, [r3, #28]
 8011190:	42bc      	cmp	r4, r7
 8011192:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011194:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8011198:	bfa8      	it	ge
 801119a:	463c      	movge	r4, r7
 801119c:	f9b1 9000 	ldrsh.w	r9, [r1]
 80111a0:	f9ba 1000 	ldrsh.w	r1, [sl]
 80111a4:	ee07 4a90 	vmov	s15, r4
 80111a8:	eb09 0e0c 	add.w	lr, r9, ip
 80111ac:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 80111b0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80111b4:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80111b8:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80111bc:	4571      	cmp	r1, lr
 80111be:	ee25 4a04 	vmul.f32	s8, s10, s8
 80111c2:	ee65 4a24 	vmul.f32	s9, s10, s9
 80111c6:	ee25 5a27 	vmul.f32	s10, s10, s15
 80111ca:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80111ce:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80111d2:	ee32 1a05 	vadd.f32	s2, s4, s10
 80111d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80111da:	ee36 0a84 	vadd.f32	s0, s13, s8
 80111de:	ee61 1a87 	vmul.f32	s3, s3, s14
 80111e2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80111e6:	f340 808c 	ble.w	8011302 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80111ea:	eba1 060e 	sub.w	r6, r1, lr
 80111ee:	fb96 f5f4 	sdiv	r5, r6, r4
 80111f2:	ee07 5a10 	vmov	s14, r5
 80111f6:	2d00      	cmp	r5, #0
 80111f8:	fb04 6615 	mls	r6, r4, r5, r6
 80111fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011200:	eea7 0a04 	vfma.f32	s0, s14, s8
 8011204:	eee7 0a24 	vfma.f32	s1, s14, s9
 8011208:	eea7 1a05 	vfma.f32	s2, s14, s10
 801120c:	dd12      	ble.n	8011234 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801120e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8011212:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8011216:	ee31 2a45 	vsub.f32	s4, s2, s10
 801121a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011222:	bf14      	ite	ne
 8011224:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8011228:	eeb0 7a67 	vmoveq.f32	s14, s15
 801122c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011230:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011234:	fb05 f204 	mul.w	r2, r5, r4
 8011238:	1abf      	subs	r7, r7, r2
 801123a:	4494      	add	ip, r2
 801123c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8011240:	4411      	add	r1, r2
 8011242:	eb09 020c 	add.w	r2, r9, ip
 8011246:	b209      	sxth	r1, r1
 8011248:	443a      	add	r2, r7
 801124a:	428a      	cmp	r2, r1
 801124c:	bfc4      	itt	gt
 801124e:	eba1 0209 	subgt.w	r2, r1, r9
 8011252:	eba2 070c 	subgt.w	r7, r2, ip
 8011256:	2f00      	cmp	r7, #0
 8011258:	dd50      	ble.n	80112fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801125a:	fb97 f1f4 	sdiv	r1, r7, r4
 801125e:	fb04 7211 	mls	r2, r4, r1, r7
 8011262:	b90a      	cbnz	r2, 8011268 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8011264:	3901      	subs	r1, #1
 8011266:	4622      	mov	r2, r4
 8011268:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801126c:	6840      	ldr	r0, [r0, #4]
 801126e:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8011272:	44b6      	add	lr, r6
 8011274:	f8d0 a000 	ldr.w	sl, [r0]
 8011278:	2900      	cmp	r1, #0
 801127a:	bfcc      	ite	gt
 801127c:	46a1      	movgt	r9, r4
 801127e:	4691      	movle	r9, r2
 8011280:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011282:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8011284:	fb04 e505 	mla	r5, r4, r5, lr
 8011288:	eef0 6a42 	vmov.f32	s13, s4
 801128c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8011290:	9008      	str	r0, [sp, #32]
 8011292:	eeb0 7a61 	vmov.f32	s14, s3
 8011296:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8011298:	695b      	ldr	r3, [r3, #20]
 801129a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801129e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80112a2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80112a6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80112a8:	445b      	add	r3, fp
 80112aa:	9307      	str	r3, [sp, #28]
 80112ac:	ee16 3a90 	vmov	r3, s13
 80112b0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80112b4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80112b8:	ee21 3a23 	vmul.f32	s6, s2, s7
 80112bc:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80112c0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80112c4:	ee17 7a90 	vmov	r7, s15
 80112c8:	ee73 7a42 	vsub.f32	s15, s6, s4
 80112cc:	fb97 f7f4 	sdiv	r7, r7, r4
 80112d0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80112d4:	ee17 ca90 	vmov	ip, s15
 80112d8:	fb9c fcf4 	sdiv	ip, ip, r4
 80112dc:	fb0c 3306 	mla	r3, ip, r6, r3
 80112e0:	9302      	str	r3, [sp, #8]
 80112e2:	ee17 3a10 	vmov	r3, s14
 80112e6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80112ea:	fb07 3706 	mla	r7, r7, r6, r3
 80112ee:	eba9 0306 	sub.w	r3, r9, r6
 80112f2:	e9cd 4700 	strd	r4, r7, [sp]
 80112f6:	f8da 4008 	ldr.w	r4, [sl, #8]
 80112fa:	47a0      	blx	r4
 80112fc:	b00d      	add	sp, #52	@ 0x34
 80112fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011302:	2500      	movs	r5, #0
 8011304:	462e      	mov	r6, r5
 8011306:	e799      	b.n	801123c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08011308 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801130c:	b0db      	sub	sp, #364	@ 0x16c
 801130e:	461d      	mov	r5, r3
 8011310:	4614      	mov	r4, r2
 8011312:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8011316:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011318:	4629      	mov	r1, r5
 801131a:	930a      	str	r3, [sp, #40]	@ 0x28
 801131c:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8011320:	9009      	str	r0, [sp, #36]	@ 0x24
 8011322:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011324:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8011328:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 801132c:	9310      	str	r3, [sp, #64]	@ 0x40
 801132e:	6803      	ldr	r3, [r0, #0]
 8011330:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8011332:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8011336:	47b8      	blx	r7
 8011338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801133a:	6058      	str	r0, [r3, #4]
 801133c:	2800      	cmp	r0, #0
 801133e:	f000 83a1 	beq.w	8011a84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011342:	682b      	ldr	r3, [r5, #0]
 8011344:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8011348:	ed94 7a02 	vldr	s14, [r4, #8]
 801134c:	9314      	str	r3, [sp, #80]	@ 0x50
 801134e:	686b      	ldr	r3, [r5, #4]
 8011350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011354:	9315      	str	r3, [sp, #84]	@ 0x54
 8011356:	4bc1      	ldr	r3, [pc, #772]	@ (801165c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8011358:	7819      	ldrb	r1, [r3, #0]
 801135a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801135e:	2900      	cmp	r1, #0
 8011360:	bf16      	itet	ne
 8011362:	4619      	movne	r1, r3
 8011364:	4611      	moveq	r1, r2
 8011366:	4613      	movne	r3, r2
 8011368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801136c:	9116      	str	r1, [sp, #88]	@ 0x58
 801136e:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8011372:	f240 8387 	bls.w	8011a84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011376:	ed94 7a07 	vldr	s14, [r4, #28]
 801137a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011382:	f240 837f 	bls.w	8011a84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011386:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 801138a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011392:	f240 8377 	bls.w	8011a84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011396:	6822      	ldr	r2, [r4, #0]
 8011398:	4bb1      	ldr	r3, [pc, #708]	@ (8011660 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801139a:	429a      	cmp	r2, r3
 801139c:	f2c0 8372 	blt.w	8011a84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80113a0:	49b0      	ldr	r1, [pc, #704]	@ (8011664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80113a2:	6963      	ldr	r3, [r4, #20]
 80113a4:	428a      	cmp	r2, r1
 80113a6:	f300 836d 	bgt.w	8011a84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80113aa:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80113ae:	48ae      	ldr	r0, [pc, #696]	@ (8011668 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80113b0:	33ff      	adds	r3, #255	@ 0xff
 80113b2:	4283      	cmp	r3, r0
 80113b4:	f200 8366 	bhi.w	8011a84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80113b8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80113ba:	4dac      	ldr	r5, [pc, #688]	@ (801166c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80113bc:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80113c0:	33ff      	adds	r3, #255	@ 0xff
 80113c2:	42ab      	cmp	r3, r5
 80113c4:	f200 835e 	bhi.w	8011a84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80113c8:	6862      	ldr	r2, [r4, #4]
 80113ca:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 80113ce:	33ff      	adds	r3, #255	@ 0xff
 80113d0:	4283      	cmp	r3, r0
 80113d2:	f200 8357 	bhi.w	8011a84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80113d6:	69a1      	ldr	r1, [r4, #24]
 80113d8:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 80113dc:	33ff      	adds	r3, #255	@ 0xff
 80113de:	4283      	cmp	r3, r0
 80113e0:	f200 8350 	bhi.w	8011a84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80113e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80113e6:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 80113ea:	30ff      	adds	r0, #255	@ 0xff
 80113ec:	42a8      	cmp	r0, r5
 80113ee:	f200 8349 	bhi.w	8011a84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80113f2:	428a      	cmp	r2, r1
 80113f4:	f280 8110 	bge.w	8011618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80113f8:	429a      	cmp	r2, r3
 80113fa:	f300 8119 	bgt.w	8011630 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80113fe:	4299      	cmp	r1, r3
 8011400:	f280 811d 	bge.w	801163e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8011404:	2502      	movs	r5, #2
 8011406:	2701      	movs	r7, #1
 8011408:	46a9      	mov	r9, r5
 801140a:	46b8      	mov	r8, r7
 801140c:	f04f 0a00 	mov.w	sl, #0
 8011410:	4621      	mov	r1, r4
 8011412:	a849      	add	r0, sp, #292	@ 0x124
 8011414:	f004 f802 	bl	801541c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8011418:	4622      	mov	r2, r4
 801141a:	4653      	mov	r3, sl
 801141c:	a949      	add	r1, sp, #292	@ 0x124
 801141e:	f8cd 9000 	str.w	r9, [sp]
 8011422:	a819      	add	r0, sp, #100	@ 0x64
 8011424:	f004 f92a 	bl	801567c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011428:	4622      	mov	r2, r4
 801142a:	4653      	mov	r3, sl
 801142c:	a949      	add	r1, sp, #292	@ 0x124
 801142e:	f8cd 8000 	str.w	r8, [sp]
 8011432:	a829      	add	r0, sp, #164	@ 0xa4
 8011434:	f004 f922 	bl	801567c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011438:	4643      	mov	r3, r8
 801143a:	4622      	mov	r2, r4
 801143c:	a949      	add	r1, sp, #292	@ 0x124
 801143e:	f8cd 9000 	str.w	r9, [sp]
 8011442:	a839      	add	r0, sp, #228	@ 0xe4
 8011444:	f004 f91a 	bl	801567c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011448:	42af      	cmp	r7, r5
 801144a:	af12      	add	r7, sp, #72	@ 0x48
 801144c:	bfb7      	itett	lt
 801144e:	2300      	movlt	r3, #0
 8011450:	2301      	movge	r3, #1
 8011452:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8011454:	ac19      	addlt	r4, sp, #100	@ 0x64
 8011456:	bfb1      	iteee	lt
 8011458:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801145a:	ad19      	addge	r5, sp, #100	@ 0x64
 801145c:	930e      	strge	r3, [sp, #56]	@ 0x38
 801145e:	ac29      	addge	r4, sp, #164	@ 0xa4
 8011460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011462:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011466:	e887 0003 	stmia.w	r7, {r0, r1}
 801146a:	b928      	cbnz	r0, 8011478 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801146c:	4b80      	ldr	r3, [pc, #512]	@ (8011670 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801146e:	6818      	ldr	r0, [r3, #0]
 8011470:	6803      	ldr	r3, [r0, #0]
 8011472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011474:	4798      	blx	r3
 8011476:	6038      	str	r0, [r7, #0]
 8011478:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801147a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801147e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011482:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8011484:	930c      	str	r3, [sp, #48]	@ 0x30
 8011486:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011488:	6963      	ldr	r3, [r4, #20]
 801148a:	440b      	add	r3, r1
 801148c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8011490:	4408      	add	r0, r1
 8011492:	b200      	sxth	r0, r0
 8011494:	4283      	cmp	r3, r0
 8011496:	900d      	str	r0, [sp, #52]	@ 0x34
 8011498:	f280 80dd 	bge.w	8011656 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801149c:	428b      	cmp	r3, r1
 801149e:	da08      	bge.n	80114b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80114a0:	2a00      	cmp	r2, #0
 80114a2:	dd06      	ble.n	80114b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80114a4:	1acb      	subs	r3, r1, r3
 80114a6:	429a      	cmp	r2, r3
 80114a8:	f2c0 80e4 	blt.w	8011674 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	f300 80e2 	bgt.w	8011676 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80114b2:	6967      	ldr	r7, [r4, #20]
 80114b4:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80114b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80114ba:	443b      	add	r3, r7
 80114bc:	461f      	mov	r7, r3
 80114be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80114c0:	1bdf      	subs	r7, r3, r7
 80114c2:	4297      	cmp	r7, r2
 80114c4:	bfa8      	it	ge
 80114c6:	4617      	movge	r7, r2
 80114c8:	2f00      	cmp	r7, #0
 80114ca:	f340 8166 	ble.w	801179a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80114ce:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80114d0:	6829      	ldr	r1, [r5, #0]
 80114d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80114d6:	f9bb 3000 	ldrsh.w	r3, [fp]
 80114da:	4411      	add	r1, r2
 80114dc:	6820      	ldr	r0, [r4, #0]
 80114de:	4299      	cmp	r1, r3
 80114e0:	dd1a      	ble.n	8011518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80114e2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80114e6:	4402      	add	r2, r0
 80114e8:	440b      	add	r3, r1
 80114ea:	b21b      	sxth	r3, r3
 80114ec:	429a      	cmp	r2, r3
 80114ee:	dc13      	bgt.n	8011518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80114f0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80114f2:	a912      	add	r1, sp, #72	@ 0x48
 80114f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	9206      	str	r2, [sp, #24]
 80114fc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80114fe:	9500      	str	r5, [sp, #0]
 8011500:	9205      	str	r2, [sp, #20]
 8011502:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011504:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011508:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801150a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801150e:	aa49      	add	r2, sp, #292	@ 0x124
 8011510:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8011514:	4623      	mov	r3, r4
 8011516:	47c8      	blx	r9
 8011518:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801151c:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8011520:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8011524:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011528:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801152c:	68a1      	ldr	r1, [r4, #8]
 801152e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011532:	ed94 6a08 	vldr	s12, [r4, #32]
 8011536:	edd4 6a07 	vldr	s13, [r4, #28]
 801153a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801153e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011542:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8011546:	e9d4 2300 	ldrd	r2, r3, [r4]
 801154a:	edc4 6a07 	vstr	s13, [r4, #28]
 801154e:	441a      	add	r2, r3
 8011550:	6963      	ldr	r3, [r4, #20]
 8011552:	3301      	adds	r3, #1
 8011554:	6022      	str	r2, [r4, #0]
 8011556:	6163      	str	r3, [r4, #20]
 8011558:	69a3      	ldr	r3, [r4, #24]
 801155a:	3b01      	subs	r3, #1
 801155c:	61a3      	str	r3, [r4, #24]
 801155e:	6923      	ldr	r3, [r4, #16]
 8011560:	440b      	add	r3, r1
 8011562:	68e1      	ldr	r1, [r4, #12]
 8011564:	428b      	cmp	r3, r1
 8011566:	6123      	str	r3, [r4, #16]
 8011568:	db15      	blt.n	8011596 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801156a:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801156e:	3201      	adds	r2, #1
 8011570:	1a5b      	subs	r3, r3, r1
 8011572:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011576:	6022      	str	r2, [r4, #0]
 8011578:	6123      	str	r3, [r4, #16]
 801157a:	edc4 6a07 	vstr	s13, [r4, #28]
 801157e:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8011582:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011586:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801158a:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801158e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011592:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8011596:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801159a:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801159e:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80115a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80115a6:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80115aa:	68a9      	ldr	r1, [r5, #8]
 80115ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80115b0:	ed95 6a08 	vldr	s12, [r5, #32]
 80115b4:	edd5 6a07 	vldr	s13, [r5, #28]
 80115b8:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80115bc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80115c0:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80115c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80115c8:	edc5 6a07 	vstr	s13, [r5, #28]
 80115cc:	441a      	add	r2, r3
 80115ce:	696b      	ldr	r3, [r5, #20]
 80115d0:	3301      	adds	r3, #1
 80115d2:	602a      	str	r2, [r5, #0]
 80115d4:	616b      	str	r3, [r5, #20]
 80115d6:	69ab      	ldr	r3, [r5, #24]
 80115d8:	3b01      	subs	r3, #1
 80115da:	61ab      	str	r3, [r5, #24]
 80115dc:	692b      	ldr	r3, [r5, #16]
 80115de:	440b      	add	r3, r1
 80115e0:	68e9      	ldr	r1, [r5, #12]
 80115e2:	428b      	cmp	r3, r1
 80115e4:	612b      	str	r3, [r5, #16]
 80115e6:	db15      	blt.n	8011614 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80115e8:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80115ec:	3201      	adds	r2, #1
 80115ee:	1a5b      	subs	r3, r3, r1
 80115f0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80115f4:	602a      	str	r2, [r5, #0]
 80115f6:	612b      	str	r3, [r5, #16]
 80115f8:	edc5 6a07 	vstr	s13, [r5, #28]
 80115fc:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8011600:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011604:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8011608:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801160c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011610:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011614:	3f01      	subs	r7, #1
 8011616:	e757      	b.n	80114c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8011618:	4299      	cmp	r1, r3
 801161a:	dc13      	bgt.n	8011644 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801161c:	429a      	cmp	r2, r3
 801161e:	da14      	bge.n	801164a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8011620:	2502      	movs	r5, #2
 8011622:	2703      	movs	r7, #3
 8011624:	f04f 0800 	mov.w	r8, #0
 8011628:	46a9      	mov	r9, r5
 801162a:	f04f 0a01 	mov.w	sl, #1
 801162e:	e6ef      	b.n	8011410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8011630:	2501      	movs	r5, #1
 8011632:	2700      	movs	r7, #0
 8011634:	46a9      	mov	r9, r5
 8011636:	46b8      	mov	r8, r7
 8011638:	f04f 0a02 	mov.w	sl, #2
 801163c:	e6e8      	b.n	8011410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801163e:	2501      	movs	r5, #1
 8011640:	2702      	movs	r7, #2
 8011642:	e6e1      	b.n	8011408 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8011644:	2500      	movs	r5, #0
 8011646:	2701      	movs	r7, #1
 8011648:	e7f4      	b.n	8011634 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801164a:	2702      	movs	r7, #2
 801164c:	2503      	movs	r5, #3
 801164e:	f04f 0900 	mov.w	r9, #0
 8011652:	46b8      	mov	r8, r7
 8011654:	e7e9      	b.n	801162a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8011656:	4613      	mov	r3, r2
 8011658:	e728      	b.n	80114ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801165a:	bf00      	nop
 801165c:	24025138 	.word	0x24025138
 8011660:	fffd8f01 	.word	0xfffd8f01
 8011664:	00027100 	.word	0x00027100
 8011668:	0004e1ff 	.word	0x0004e1ff
 801166c:	0004e1fe 	.word	0x0004e1fe
 8011670:	24025140 	.word	0x24025140
 8011674:	4613      	mov	r3, r2
 8011676:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8011678:	469e      	mov	lr, r3
 801167a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801167c:	469c      	mov	ip, r3
 801167e:	9111      	str	r1, [sp, #68]	@ 0x44
 8011680:	f04f 0900 	mov.w	r9, #0
 8011684:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8011688:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 801168c:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8011690:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8011694:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8011698:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801169c:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 80116a0:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 80116a4:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 80116a8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 80116ac:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 80116b0:	f1bc 0f00 	cmp.w	ip, #0
 80116b4:	d147      	bne.n	8011746 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80116b6:	eb03 0c07 	add.w	ip, r3, r7
 80116ba:	1ad7      	subs	r7, r2, r3
 80116bc:	f1b9 0f00 	cmp.w	r9, #0
 80116c0:	d009      	beq.n	80116d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80116c2:	9029      	str	r0, [sp, #164]	@ 0xa4
 80116c4:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 80116c8:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 80116cc:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 80116d0:	912d      	str	r1, [sp, #180]	@ 0xb4
 80116d2:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 80116d6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80116d8:	f04f 0800 	mov.w	r8, #0
 80116dc:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80116e0:	9111      	str	r1, [sp, #68]	@ 0x44
 80116e2:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80116e6:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80116ea:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80116ee:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 80116f2:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80116f6:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80116fa:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80116fe:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8011702:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8011706:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801170a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801170e:	f1be 0f00 	cmp.w	lr, #0
 8011712:	d031      	beq.n	8011778 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8011714:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8011716:	4450      	add	r0, sl
 8011718:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801171c:	4431      	add	r1, r6
 801171e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011722:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011726:	4549      	cmp	r1, r9
 8011728:	db08      	blt.n	801173c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801172a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801172e:	3001      	adds	r0, #1
 8011730:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011734:	eba1 0109 	sub.w	r1, r1, r9
 8011738:	ee37 7a06 	vadd.f32	s14, s14, s12
 801173c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011740:	f04f 0801 	mov.w	r8, #1
 8011744:	e7e3      	b.n	801170e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8011746:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8011748:	4450      	add	r0, sl
 801174a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801174e:	4431      	add	r1, r6
 8011750:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011754:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011758:	4541      	cmp	r1, r8
 801175a:	db08      	blt.n	801176e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801175c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011760:	3001      	adds	r0, #1
 8011762:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011766:	eba1 0108 	sub.w	r1, r1, r8
 801176a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801176e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011772:	f04f 0901 	mov.w	r9, #1
 8011776:	e79b      	b.n	80116b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8011778:	449c      	add	ip, r3
 801177a:	1aff      	subs	r7, r7, r3
 801177c:	f1b8 0f00 	cmp.w	r8, #0
 8011780:	d009      	beq.n	8011796 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8011782:	9019      	str	r0, [sp, #100]	@ 0x64
 8011784:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8011788:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801178c:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8011790:	911d      	str	r1, [sp, #116]	@ 0x74
 8011792:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8011796:	1ad2      	subs	r2, r2, r3
 8011798:	e68b      	b.n	80114b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801179a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801179c:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801179e:	2b00      	cmp	r3, #0
 80117a0:	f000 80d1 	beq.w	8011946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80117a4:	ad19      	add	r5, sp, #100	@ 0x64
 80117a6:	ac39      	add	r4, sp, #228	@ 0xe4
 80117a8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80117aa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80117ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80117b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80117b4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80117b6:	6963      	ldr	r3, [r4, #20]
 80117b8:	440b      	add	r3, r1
 80117ba:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80117be:	4408      	add	r0, r1
 80117c0:	b200      	sxth	r0, r0
 80117c2:	4283      	cmp	r3, r0
 80117c4:	900d      	str	r0, [sp, #52]	@ 0x34
 80117c6:	f280 80c1 	bge.w	801194c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80117ca:	428b      	cmp	r3, r1
 80117cc:	da08      	bge.n	80117e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80117ce:	2a00      	cmp	r2, #0
 80117d0:	dd06      	ble.n	80117e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80117d2:	1acb      	subs	r3, r1, r3
 80117d4:	429a      	cmp	r2, r3
 80117d6:	f2c0 80bb 	blt.w	8011950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80117da:	2b00      	cmp	r3, #0
 80117dc:	f300 80b9 	bgt.w	8011952 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80117e0:	6967      	ldr	r7, [r4, #20]
 80117e2:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80117e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80117e8:	443b      	add	r3, r7
 80117ea:	461f      	mov	r7, r3
 80117ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80117ee:	1bdf      	subs	r7, r3, r7
 80117f0:	4297      	cmp	r7, r2
 80117f2:	bfa8      	it	ge
 80117f4:	4617      	movge	r7, r2
 80117f6:	2f00      	cmp	r7, #0
 80117f8:	f340 813c 	ble.w	8011a74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80117fc:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80117fe:	6829      	ldr	r1, [r5, #0]
 8011800:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011804:	f9bb 3000 	ldrsh.w	r3, [fp]
 8011808:	4411      	add	r1, r2
 801180a:	6820      	ldr	r0, [r4, #0]
 801180c:	4299      	cmp	r1, r3
 801180e:	dd1a      	ble.n	8011846 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8011810:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8011814:	4402      	add	r2, r0
 8011816:	440b      	add	r3, r1
 8011818:	b21b      	sxth	r3, r3
 801181a:	429a      	cmp	r2, r3
 801181c:	dc13      	bgt.n	8011846 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801181e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011820:	a912      	add	r1, sp, #72	@ 0x48
 8011822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011824:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	9206      	str	r2, [sp, #24]
 801182a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801182c:	9500      	str	r5, [sp, #0]
 801182e:	9205      	str	r2, [sp, #20]
 8011830:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011832:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011836:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8011838:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801183c:	aa49      	add	r2, sp, #292	@ 0x124
 801183e:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8011842:	4623      	mov	r3, r4
 8011844:	47c8      	blx	r9
 8011846:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801184a:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801184e:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8011852:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011856:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801185a:	68a1      	ldr	r1, [r4, #8]
 801185c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011860:	ed94 6a08 	vldr	s12, [r4, #32]
 8011864:	edd4 6a07 	vldr	s13, [r4, #28]
 8011868:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801186c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011870:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8011874:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011878:	edc4 6a07 	vstr	s13, [r4, #28]
 801187c:	441a      	add	r2, r3
 801187e:	6963      	ldr	r3, [r4, #20]
 8011880:	3301      	adds	r3, #1
 8011882:	6022      	str	r2, [r4, #0]
 8011884:	6163      	str	r3, [r4, #20]
 8011886:	69a3      	ldr	r3, [r4, #24]
 8011888:	3b01      	subs	r3, #1
 801188a:	61a3      	str	r3, [r4, #24]
 801188c:	6923      	ldr	r3, [r4, #16]
 801188e:	440b      	add	r3, r1
 8011890:	68e1      	ldr	r1, [r4, #12]
 8011892:	428b      	cmp	r3, r1
 8011894:	6123      	str	r3, [r4, #16]
 8011896:	db15      	blt.n	80118c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8011898:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801189c:	3201      	adds	r2, #1
 801189e:	1a5b      	subs	r3, r3, r1
 80118a0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80118a4:	6022      	str	r2, [r4, #0]
 80118a6:	6123      	str	r3, [r4, #16]
 80118a8:	edc4 6a07 	vstr	s13, [r4, #28]
 80118ac:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80118b0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80118b4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80118b8:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80118bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80118c0:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80118c4:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80118c8:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80118cc:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80118d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80118d4:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80118d8:	68a9      	ldr	r1, [r5, #8]
 80118da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80118de:	ed95 6a08 	vldr	s12, [r5, #32]
 80118e2:	edd5 6a07 	vldr	s13, [r5, #28]
 80118e6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80118ea:	ee76 6a86 	vadd.f32	s13, s13, s12
 80118ee:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80118f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80118f6:	edc5 6a07 	vstr	s13, [r5, #28]
 80118fa:	441a      	add	r2, r3
 80118fc:	696b      	ldr	r3, [r5, #20]
 80118fe:	3301      	adds	r3, #1
 8011900:	602a      	str	r2, [r5, #0]
 8011902:	616b      	str	r3, [r5, #20]
 8011904:	69ab      	ldr	r3, [r5, #24]
 8011906:	3b01      	subs	r3, #1
 8011908:	61ab      	str	r3, [r5, #24]
 801190a:	692b      	ldr	r3, [r5, #16]
 801190c:	440b      	add	r3, r1
 801190e:	68e9      	ldr	r1, [r5, #12]
 8011910:	428b      	cmp	r3, r1
 8011912:	612b      	str	r3, [r5, #16]
 8011914:	db15      	blt.n	8011942 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8011916:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801191a:	3201      	adds	r2, #1
 801191c:	1a5b      	subs	r3, r3, r1
 801191e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011922:	602a      	str	r2, [r5, #0]
 8011924:	612b      	str	r3, [r5, #16]
 8011926:	edc5 6a07 	vstr	s13, [r5, #28]
 801192a:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801192e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011932:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8011936:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801193a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801193e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011942:	3f01      	subs	r7, #1
 8011944:	e757      	b.n	80117f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8011946:	ad39      	add	r5, sp, #228	@ 0xe4
 8011948:	ac19      	add	r4, sp, #100	@ 0x64
 801194a:	e72d      	b.n	80117a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801194c:	4613      	mov	r3, r2
 801194e:	e744      	b.n	80117da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8011950:	4613      	mov	r3, r2
 8011952:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8011954:	469e      	mov	lr, r3
 8011956:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801195a:	461f      	mov	r7, r3
 801195c:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8011960:	f04f 0900 	mov.w	r9, #0
 8011964:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8011968:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801196c:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8011970:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8011974:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8011978:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801197a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801197e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8011982:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8011986:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801198a:	960e      	str	r6, [sp, #56]	@ 0x38
 801198c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8011990:	2f00      	cmp	r7, #0
 8011992:	d146      	bne.n	8011a22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8011994:	449c      	add	ip, r3
 8011996:	1ad7      	subs	r7, r2, r3
 8011998:	f1b9 0f00 	cmp.w	r9, #0
 801199c:	d009      	beq.n	80119b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801199e:	9039      	str	r0, [sp, #228]	@ 0xe4
 80119a0:	913d      	str	r1, [sp, #244]	@ 0xf4
 80119a2:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 80119a6:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 80119aa:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 80119ae:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 80119b2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80119b4:	f04f 0800 	mov.w	r8, #0
 80119b8:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80119bc:	910e      	str	r1, [sp, #56]	@ 0x38
 80119be:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80119c2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80119c6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80119ca:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 80119ce:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80119d2:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80119d6:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80119da:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80119de:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80119e2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80119e6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80119ea:	f1be 0f00 	cmp.w	lr, #0
 80119ee:	d030      	beq.n	8011a52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80119f0:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80119f2:	4450      	add	r0, sl
 80119f4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80119f8:	4431      	add	r1, r6
 80119fa:	ee37 7a04 	vadd.f32	s14, s14, s8
 80119fe:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011a02:	4549      	cmp	r1, r9
 8011a04:	db08      	blt.n	8011a18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8011a06:	ee77 7a85 	vadd.f32	s15, s15, s10
 8011a0a:	3001      	adds	r0, #1
 8011a0c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011a10:	eba1 0109 	sub.w	r1, r1, r9
 8011a14:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011a18:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011a1c:	f04f 0801 	mov.w	r8, #1
 8011a20:	e7e3      	b.n	80119ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8011a22:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8011a24:	4450      	add	r0, sl
 8011a26:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011a2a:	4431      	add	r1, r6
 8011a2c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011a30:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011a34:	4541      	cmp	r1, r8
 8011a36:	db08      	blt.n	8011a4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8011a38:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011a3c:	3001      	adds	r0, #1
 8011a3e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011a42:	eba1 0108 	sub.w	r1, r1, r8
 8011a46:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011a4a:	3f01      	subs	r7, #1
 8011a4c:	f04f 0901 	mov.w	r9, #1
 8011a50:	e79e      	b.n	8011990 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8011a52:	449c      	add	ip, r3
 8011a54:	1aff      	subs	r7, r7, r3
 8011a56:	f1b8 0f00 	cmp.w	r8, #0
 8011a5a:	d009      	beq.n	8011a70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8011a5c:	9019      	str	r0, [sp, #100]	@ 0x64
 8011a5e:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8011a62:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8011a66:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8011a6a:	911d      	str	r1, [sp, #116]	@ 0x74
 8011a6c:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8011a70:	1ad2      	subs	r2, r2, r3
 8011a72:	e6b5      	b.n	80117e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	b923      	cbnz	r3, 8011a84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011a7a:	4b04      	ldr	r3, [pc, #16]	@ (8011a8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8011a7c:	6818      	ldr	r0, [r3, #0]
 8011a7e:	6803      	ldr	r3, [r0, #0]
 8011a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a82:	4798      	blx	r3
 8011a84:	b05b      	add	sp, #364	@ 0x16c
 8011a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a8a:	bf00      	nop
 8011a8c:	24025140 	.word	0x24025140

08011a90 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8011a90:	b570      	push	{r4, r5, r6, lr}
 8011a92:	4604      	mov	r4, r0
 8011a94:	2500      	movs	r5, #0
 8011a96:	9805      	ldr	r0, [sp, #20]
 8011a98:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8011a9c:	6061      	str	r1, [r4, #4]
 8011a9e:	8263      	strh	r3, [r4, #18]
 8011aa0:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8011aa4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8011aa8:	8025      	strh	r5, [r4, #0]
 8011aaa:	7221      	strb	r1, [r4, #8]
 8011aac:	7266      	strb	r6, [r4, #9]
 8011aae:	60e0      	str	r0, [r4, #12]
 8011ab0:	8222      	strh	r2, [r4, #16]
 8011ab2:	82a3      	strh	r3, [r4, #20]
 8011ab4:	82e5      	strh	r5, [r4, #22]
 8011ab6:	8325      	strh	r5, [r4, #24]
 8011ab8:	8365      	strh	r5, [r4, #26]
 8011aba:	83a5      	strh	r5, [r4, #28]
 8011abc:	83e5      	strh	r5, [r4, #30]
 8011abe:	8425      	strh	r5, [r4, #32]
 8011ac0:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8011ac4:	b32e      	cbz	r6, 8011b12 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8011ac6:	6803      	ldr	r3, [r0, #0]
 8011ac8:	695b      	ldr	r3, [r3, #20]
 8011aca:	4798      	blx	r3
 8011acc:	4606      	mov	r6, r0
 8011ace:	b300      	cbz	r0, 8011b12 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8011ad0:	68e0      	ldr	r0, [r4, #12]
 8011ad2:	4631      	mov	r1, r6
 8011ad4:	6803      	ldr	r3, [r0, #0]
 8011ad6:	68db      	ldr	r3, [r3, #12]
 8011ad8:	4798      	blx	r3
 8011ada:	4605      	mov	r5, r0
 8011adc:	b1c8      	cbz	r0, 8011b12 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8011ade:	7b43      	ldrb	r3, [r0, #13]
 8011ae0:	7a82      	ldrb	r2, [r0, #10]
 8011ae2:	005b      	lsls	r3, r3, #1
 8011ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011ae8:	4313      	orrs	r3, r2
 8011aea:	8423      	strh	r3, [r4, #32]
 8011aec:	7a63      	ldrb	r3, [r4, #9]
 8011aee:	2b06      	cmp	r3, #6
 8011af0:	d10f      	bne.n	8011b12 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8011af2:	68e0      	ldr	r0, [r4, #12]
 8011af4:	462a      	mov	r2, r5
 8011af6:	4631      	mov	r1, r6
 8011af8:	6803      	ldr	r3, [r0, #0]
 8011afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011afc:	4798      	blx	r3
 8011afe:	7b6b      	ldrb	r3, [r5, #13]
 8011b00:	005b      	lsls	r3, r3, #1
 8011b02:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8011b06:	7aab      	ldrb	r3, [r5, #10]
 8011b08:	4313      	orrs	r3, r2
 8011b0a:	4418      	add	r0, r3
 8011b0c:	8c23      	ldrh	r3, [r4, #32]
 8011b0e:	4418      	add	r0, r3
 8011b10:	8420      	strh	r0, [r4, #32]
 8011b12:	4620      	mov	r0, r4
 8011b14:	bd70      	pop	{r4, r5, r6, pc}

08011b16 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8011b16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b1a:	2400      	movs	r4, #0
 8011b1c:	b085      	sub	sp, #20
 8011b1e:	4681      	mov	r9, r0
 8011b20:	4688      	mov	r8, r1
 8011b22:	4692      	mov	sl, r2
 8011b24:	469b      	mov	fp, r3
 8011b26:	4627      	mov	r7, r4
 8011b28:	4625      	mov	r5, r4
 8011b2a:	4626      	mov	r6, r4
 8011b2c:	4554      	cmp	r4, sl
 8011b2e:	da2a      	bge.n	8011b86 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8011b30:	2300      	movs	r3, #0
 8011b32:	9303      	str	r3, [sp, #12]
 8011b34:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8011b38:	429d      	cmp	r5, r3
 8011b3a:	d004      	beq.n	8011b46 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8011b3c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8011b40:	429d      	cmp	r5, r3
 8011b42:	bf18      	it	ne
 8011b44:	462f      	movne	r7, r5
 8011b46:	ab03      	add	r3, sp, #12
 8011b48:	4642      	mov	r2, r8
 8011b4a:	4659      	mov	r1, fp
 8011b4c:	4648      	mov	r0, r9
 8011b4e:	f003 fa7b 	bl	8015048 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011b52:	4605      	mov	r5, r0
 8011b54:	b1b8      	cbz	r0, 8011b86 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8011b56:	280a      	cmp	r0, #10
 8011b58:	d015      	beq.n	8011b86 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8011b5a:	9a03      	ldr	r2, [sp, #12]
 8011b5c:	b18a      	cbz	r2, 8011b82 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8011b5e:	7b50      	ldrb	r0, [r2, #13]
 8011b60:	4639      	mov	r1, r7
 8011b62:	7a93      	ldrb	r3, [r2, #10]
 8011b64:	0040      	lsls	r0, r0, #1
 8011b66:	8895      	ldrh	r5, [r2, #4]
 8011b68:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8011b6c:	4303      	orrs	r3, r0
 8011b6e:	4640      	mov	r0, r8
 8011b70:	9301      	str	r3, [sp, #4]
 8011b72:	f8d8 3000 	ldr.w	r3, [r8]
 8011b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b78:	4798      	blx	r3
 8011b7a:	9b01      	ldr	r3, [sp, #4]
 8011b7c:	4418      	add	r0, r3
 8011b7e:	4406      	add	r6, r0
 8011b80:	b2b6      	uxth	r6, r6
 8011b82:	3401      	adds	r4, #1
 8011b84:	e7d2      	b.n	8011b2c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8011b86:	4630      	mov	r0, r6
 8011b88:	b005      	add	sp, #20
 8011b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b8e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8011b8e:	2a02      	cmp	r2, #2
 8011b90:	b530      	push	{r4, r5, lr}
 8011b92:	d011      	beq.n	8011bb8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8011b94:	2a03      	cmp	r2, #3
 8011b96:	d01c      	beq.n	8011bd2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8011b98:	2a01      	cmp	r2, #1
 8011b9a:	d10c      	bne.n	8011bb6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8011b9c:	888b      	ldrh	r3, [r1, #4]
 8011b9e:	8801      	ldrh	r1, [r0, #0]
 8011ba0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8011ba4:	1a5b      	subs	r3, r3, r1
 8011ba6:	8844      	ldrh	r4, [r0, #2]
 8011ba8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8011bac:	1a9b      	subs	r3, r3, r2
 8011bae:	8004      	strh	r4, [r0, #0]
 8011bb0:	8081      	strh	r1, [r0, #4]
 8011bb2:	8043      	strh	r3, [r0, #2]
 8011bb4:	80c2      	strh	r2, [r0, #6]
 8011bb6:	bd30      	pop	{r4, r5, pc}
 8011bb8:	88cb      	ldrh	r3, [r1, #6]
 8011bba:	8842      	ldrh	r2, [r0, #2]
 8011bbc:	1a9b      	subs	r3, r3, r2
 8011bbe:	88c2      	ldrh	r2, [r0, #6]
 8011bc0:	1a9b      	subs	r3, r3, r2
 8011bc2:	888a      	ldrh	r2, [r1, #4]
 8011bc4:	8801      	ldrh	r1, [r0, #0]
 8011bc6:	8043      	strh	r3, [r0, #2]
 8011bc8:	1a52      	subs	r2, r2, r1
 8011bca:	8881      	ldrh	r1, [r0, #4]
 8011bcc:	1a52      	subs	r2, r2, r1
 8011bce:	8002      	strh	r2, [r0, #0]
 8011bd0:	e7f1      	b.n	8011bb6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8011bd2:	88cb      	ldrh	r3, [r1, #6]
 8011bd4:	8841      	ldrh	r1, [r0, #2]
 8011bd6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8011bda:	1a5b      	subs	r3, r3, r1
 8011bdc:	f9b0 5000 	ldrsh.w	r5, [r0]
 8011be0:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8011be4:	1a9b      	subs	r3, r3, r2
 8011be6:	8045      	strh	r5, [r0, #2]
 8011be8:	8082      	strh	r2, [r0, #4]
 8011bea:	8003      	strh	r3, [r0, #0]
 8011bec:	80c4      	strh	r4, [r0, #6]
 8011bee:	e7e2      	b.n	8011bb6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08011bf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8011bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bf4:	b09f      	sub	sp, #124	@ 0x7c
 8011bf6:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011bf8:	9312      	str	r3, [sp, #72]	@ 0x48
 8011bfa:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8011bfc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8011bfe:	8812      	ldrh	r2, [r2, #0]
 8011c00:	889b      	ldrh	r3, [r3, #4]
 8011c02:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8011c04:	4413      	add	r3, r2
 8011c06:	900e      	str	r0, [sp, #56]	@ 0x38
 8011c08:	6828      	ldr	r0, [r5, #0]
 8011c0a:	b21b      	sxth	r3, r3
 8011c0c:	9117      	str	r1, [sp, #92]	@ 0x5c
 8011c0e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8011c12:	9311      	str	r3, [sp, #68]	@ 0x44
 8011c14:	6803      	ldr	r3, [r0, #0]
 8011c16:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8011c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c1c:	4798      	blx	r3
 8011c1e:	682b      	ldr	r3, [r5, #0]
 8011c20:	9013      	str	r0, [sp, #76]	@ 0x4c
 8011c22:	7b1a      	ldrb	r2, [r3, #12]
 8011c24:	7adb      	ldrb	r3, [r3, #11]
 8011c26:	9215      	str	r2, [sp, #84]	@ 0x54
 8011c28:	9316      	str	r3, [sp, #88]	@ 0x58
 8011c2a:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8011c2e:	2c00      	cmp	r4, #0
 8011c30:	d067      	beq.n	8011d02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8011c32:	7c2b      	ldrb	r3, [r5, #16]
 8011c34:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8011c36:	2b06      	cmp	r3, #6
 8011c38:	bf14      	ite	ne
 8011c3a:	2301      	movne	r3, #1
 8011c3c:	2302      	moveq	r3, #2
 8011c3e:	4413      	add	r3, r2
 8011c40:	f04f 0900 	mov.w	r9, #0
 8011c44:	9310      	str	r3, [sp, #64]	@ 0x40
 8011c46:	464c      	mov	r4, r9
 8011c48:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8011c4c:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8011c50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c52:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011c54:	4293      	cmp	r3, r2
 8011c56:	f280 808b 	bge.w	8011d70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8011c60:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8011c64:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8011c68:	429c      	cmp	r4, r3
 8011c6a:	d006      	beq.n	8011c7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8011c6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c6e:	f242 020b 	movw	r2, #8203	@ 0x200b
 8011c72:	4294      	cmp	r4, r2
 8011c74:	bf18      	it	ne
 8011c76:	4623      	movne	r3, r4
 8011c78:	930c      	str	r3, [sp, #48]	@ 0x30
 8011c7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c7c:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8011c7e:	682a      	ldr	r2, [r5, #0]
 8011c80:	428b      	cmp	r3, r1
 8011c82:	db40      	blt.n	8011d06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8011c84:	6813      	ldr	r3, [r2, #0]
 8011c86:	4610      	mov	r0, r2
 8011c88:	695b      	ldr	r3, [r3, #20]
 8011c8a:	4798      	blx	r3
 8011c8c:	4604      	mov	r4, r0
 8011c8e:	6828      	ldr	r0, [r5, #0]
 8011c90:	aa1d      	add	r2, sp, #116	@ 0x74
 8011c92:	4621      	mov	r1, r4
 8011c94:	6803      	ldr	r3, [r0, #0]
 8011c96:	689f      	ldr	r7, [r3, #8]
 8011c98:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8011c9c:	47b8      	blx	r7
 8011c9e:	901c      	str	r0, [sp, #112]	@ 0x70
 8011ca0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8011ca4:	429c      	cmp	r4, r3
 8011ca6:	f000 80eb 	beq.w	8011e80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011caa:	f242 030b 	movw	r3, #8203	@ 0x200b
 8011cae:	429c      	cmp	r4, r3
 8011cb0:	f000 80e6 	beq.w	8011e80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011cb4:	2c00      	cmp	r4, #0
 8011cb6:	f000 810d 	beq.w	8011ed4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8011cba:	2c0a      	cmp	r4, #10
 8011cbc:	d05e      	beq.n	8011d7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8011cbe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011cc0:	b36a      	cbz	r2, 8011d1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8011cc2:	8894      	ldrh	r4, [r2, #4]
 8011cc4:	f1bb 0f00 	cmp.w	fp, #0
 8011cc8:	d03a      	beq.n	8011d40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8011cca:	f892 900d 	ldrb.w	r9, [r2, #13]
 8011cce:	f1bb 0f01 	cmp.w	fp, #1
 8011cd2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8011cd6:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8011cda:	f892 900a 	ldrb.w	r9, [r2, #10]
 8011cde:	ea49 0903 	orr.w	r9, r9, r3
 8011ce2:	d133      	bne.n	8011d4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8011ce4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ce6:	eba6 0609 	sub.w	r6, r6, r9
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d14d      	bne.n	8011d8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8011cee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011cf0:	eb09 0306 	add.w	r3, r9, r6
 8011cf4:	4413      	add	r3, r2
 8011cf6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8011cf8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011cfc:	4293      	cmp	r3, r2
 8011cfe:	da4e      	bge.n	8011d9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8011d00:	e036      	b.n	8011d70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8011d02:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8011d04:	e79c      	b.n	8011c40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8011d06:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8011d0a:	4659      	mov	r1, fp
 8011d0c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8011d0e:	9301      	str	r3, [sp, #4]
 8011d10:	ab1d      	add	r3, sp, #116	@ 0x74
 8011d12:	9300      	str	r3, [sp, #0]
 8011d14:	ab1c      	add	r3, sp, #112	@ 0x70
 8011d16:	f003 f9e0 	bl	80150da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8011d1a:	4604      	mov	r4, r0
 8011d1c:	e7c0      	b.n	8011ca0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8011d1e:	6828      	ldr	r0, [r5, #0]
 8011d20:	6803      	ldr	r3, [r0, #0]
 8011d22:	691b      	ldr	r3, [r3, #16]
 8011d24:	4798      	blx	r3
 8011d26:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8011d2a:	4298      	cmp	r0, r3
 8011d2c:	f000 80a8 	beq.w	8011e80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011d30:	f242 030b 	movw	r3, #8203	@ 0x200b
 8011d34:	4298      	cmp	r0, r3
 8011d36:	f000 80a3 	beq.w	8011e80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011d3a:	f1bb 0f00 	cmp.w	fp, #0
 8011d3e:	d100      	bne.n	8011d42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8011d40:	444e      	add	r6, r9
 8011d42:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011d44:	2a00      	cmp	r2, #0
 8011d46:	d1c0      	bne.n	8011cca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8011d48:	4691      	mov	r9, r2
 8011d4a:	e099      	b.n	8011e80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011d4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	f000 80c2 	beq.w	8011ed8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8011d54:	f1bb 0f00 	cmp.w	fp, #0
 8011d58:	d117      	bne.n	8011d8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8011d5a:	6828      	ldr	r0, [r5, #0]
 8011d5c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011d5e:	6803      	ldr	r3, [r0, #0]
 8011d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d62:	4798      	blx	r3
 8011d64:	4406      	add	r6, r0
 8011d66:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011d68:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011d6a:	1af3      	subs	r3, r6, r3
 8011d6c:	4293      	cmp	r3, r2
 8011d6e:	dd16      	ble.n	8011d9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8011d70:	2c00      	cmp	r4, #0
 8011d72:	f000 80af 	beq.w	8011ed4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8011d76:	2c0a      	cmp	r4, #10
 8011d78:	f040 809d 	bne.w	8011eb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8011d7c:	240a      	movs	r4, #10
 8011d7e:	fab4 f084 	clz	r0, r4
 8011d82:	0940      	lsrs	r0, r0, #5
 8011d84:	b01f      	add	sp, #124	@ 0x7c
 8011d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d8a:	6828      	ldr	r0, [r5, #0]
 8011d8c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011d8e:	6803      	ldr	r3, [r0, #0]
 8011d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d92:	4798      	blx	r3
 8011d94:	f1bb 0f01 	cmp.w	fp, #1
 8011d98:	eba6 0600 	sub.w	r6, r6, r0
 8011d9c:	d0a7      	beq.n	8011cee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8011d9e:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8011da0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8011da2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8011da6:	f9b3 8000 	ldrsh.w	r8, [r3]
 8011daa:	7b43      	ldrb	r3, [r0, #13]
 8011dac:	4431      	add	r1, r6
 8011dae:	015b      	lsls	r3, r3, #5
 8011db0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8011db4:	7983      	ldrb	r3, [r0, #6]
 8011db6:	4313      	orrs	r3, r2
 8011db8:	440b      	add	r3, r1
 8011dba:	4543      	cmp	r3, r8
 8011dbc:	db60      	blt.n	8011e80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011dbe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011dc0:	4299      	cmp	r1, r3
 8011dc2:	da5d      	bge.n	8011e80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011dc4:	6828      	ldr	r0, [r5, #0]
 8011dc6:	45b0      	cmp	r8, r6
 8011dc8:	6803      	ldr	r3, [r0, #0]
 8011dca:	bfcc      	ite	gt
 8011dcc:	eba8 0806 	subgt.w	r8, r8, r6
 8011dd0:	f04f 0800 	movle.w	r8, #0
 8011dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dd6:	bfc8      	it	gt
 8011dd8:	fa1f f888 	uxthgt.w	r8, r8
 8011ddc:	4798      	blx	r3
 8011dde:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011de0:	7b53      	ldrb	r3, [r2, #13]
 8011de2:	00d9      	lsls	r1, r3, #3
 8011de4:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8011de8:	7a11      	ldrb	r1, [r2, #8]
 8011dea:	4339      	orrs	r1, r7
 8011dec:	065f      	lsls	r7, r3, #25
 8011dee:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8011df0:	bf48      	it	mi
 8011df2:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8011df6:	4407      	add	r7, r0
 8011df8:	bf48      	it	mi
 8011dfa:	b209      	sxthmi	r1, r1
 8011dfc:	1a7f      	subs	r7, r7, r1
 8011dfe:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8011e00:	b2bf      	uxth	r7, r7
 8011e02:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8011e06:	fa0f fa87 	sxth.w	sl, r7
 8011e0a:	4551      	cmp	r1, sl
 8011e0c:	dd3c      	ble.n	8011e88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8011e0e:	011b      	lsls	r3, r3, #4
 8011e10:	79d0      	ldrb	r0, [r2, #7]
 8011e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011e16:	4303      	orrs	r3, r0
 8011e18:	449a      	add	sl, r3
 8011e1a:	4551      	cmp	r1, sl
 8011e1c:	dc30      	bgt.n	8011e80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011e1e:	1bcf      	subs	r7, r1, r7
 8011e20:	468a      	mov	sl, r1
 8011e22:	b23f      	sxth	r7, r7
 8011e24:	9219      	str	r2, [sp, #100]	@ 0x64
 8011e26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011e28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011e2a:	6828      	ldr	r0, [r5, #0]
 8011e2c:	2a00      	cmp	r2, #0
 8011e2e:	d12d      	bne.n	8011e8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8011e30:	9318      	str	r3, [sp, #96]	@ 0x60
 8011e32:	b2bf      	uxth	r7, r7
 8011e34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e36:	6819      	ldr	r1, [r3, #0]
 8011e38:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8011e3a:	6801      	ldr	r1, [r0, #0]
 8011e3c:	9314      	str	r3, [sp, #80]	@ 0x50
 8011e3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011e40:	4788      	blx	r1
 8011e42:	79a9      	ldrb	r1, [r5, #6]
 8011e44:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011e46:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011e48:	7ba9      	ldrb	r1, [r5, #14]
 8011e4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011e4c:	910a      	str	r1, [sp, #40]	@ 0x28
 8011e4e:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8011e52:	9109      	str	r1, [sp, #36]	@ 0x24
 8011e54:	68a9      	ldr	r1, [r5, #8]
 8011e56:	9306      	str	r3, [sp, #24]
 8011e58:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8011e5a:	9205      	str	r2, [sp, #20]
 8011e5c:	9304      	str	r3, [sp, #16]
 8011e5e:	f8cd a004 	str.w	sl, [sp, #4]
 8011e62:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8011e66:	44b0      	add	r8, r6
 8011e68:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8011e6a:	fa0f f388 	sxth.w	r3, r8
 8011e6e:	9300      	str	r3, [sp, #0]
 8011e70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e72:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8011e76:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8011e78:	681a      	ldr	r2, [r3, #0]
 8011e7a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	47b8      	blx	r7
 8011e80:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011e82:	3301      	adds	r3, #1
 8011e84:	930d      	str	r3, [sp, #52]	@ 0x34
 8011e86:	e6e3      	b.n	8011c50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8011e88:	2700      	movs	r7, #0
 8011e8a:	e7cb      	b.n	8011e24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8011e8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e8e:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8011e92:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011e94:	f8dc 1000 	ldr.w	r1, [ip]
 8011e98:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8011e9c:	79aa      	ldrb	r2, [r5, #6]
 8011e9e:	9203      	str	r2, [sp, #12]
 8011ea0:	7baa      	ldrb	r2, [r5, #14]
 8011ea2:	9202      	str	r2, [sp, #8]
 8011ea4:	68aa      	ldr	r2, [r5, #8]
 8011ea6:	e9cd 0200 	strd	r0, r2, [sp]
 8011eaa:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8011eac:	4660      	mov	r0, ip
 8011eae:	688f      	ldr	r7, [r1, #8]
 8011eb0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011eb2:	47b8      	blx	r7
 8011eb4:	e7e4      	b.n	8011e80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011eb6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011eb8:	3501      	adds	r5, #1
 8011eba:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8011ebc:	429d      	cmp	r5, r3
 8011ebe:	f6bf af5e 	bge.w	8011d7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8011ec2:	4659      	mov	r1, fp
 8011ec4:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8011ec6:	f7f2 f81f 	bl	8003f08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011eca:	4604      	mov	r4, r0
 8011ecc:	b110      	cbz	r0, 8011ed4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8011ece:	280a      	cmp	r0, #10
 8011ed0:	d1f2      	bne.n	8011eb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8011ed2:	e753      	b.n	8011d7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8011ed4:	2400      	movs	r4, #0
 8011ed6:	e752      	b.n	8011d7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8011ed8:	f1bb 0f00 	cmp.w	fp, #0
 8011edc:	f43f af43 	beq.w	8011d66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8011ee0:	e75d      	b.n	8011d9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08011ee2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8011ee2:	b530      	push	{r4, r5, lr}
 8011ee4:	8ac4      	ldrh	r4, [r0, #22]
 8011ee6:	8b45      	ldrh	r5, [r0, #26]
 8011ee8:	8343      	strh	r3, [r0, #26]
 8011eea:	442c      	add	r4, r5
 8011eec:	1ae4      	subs	r4, r4, r3
 8011eee:	8b83      	ldrh	r3, [r0, #28]
 8011ef0:	82c4      	strh	r4, [r0, #22]
 8011ef2:	8b04      	ldrh	r4, [r0, #24]
 8011ef4:	4422      	add	r2, r4
 8011ef6:	440c      	add	r4, r1
 8011ef8:	1a59      	subs	r1, r3, r1
 8011efa:	83c2      	strh	r2, [r0, #30]
 8011efc:	8304      	strh	r4, [r0, #24]
 8011efe:	8381      	strh	r1, [r0, #28]
 8011f00:	bd30      	pop	{r4, r5, pc}

08011f02 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8011f02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f06:	4604      	mov	r4, r0
 8011f08:	8a47      	ldrh	r7, [r0, #18]
 8011f0a:	68c0      	ldr	r0, [r0, #12]
 8011f0c:	b085      	sub	sp, #20
 8011f0e:	6803      	ldr	r3, [r0, #0]
 8011f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f12:	4798      	blx	r3
 8011f14:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8011f18:	7a63      	ldrb	r3, [r4, #9]
 8011f1a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8011f1e:	3b01      	subs	r3, #1
 8011f20:	42b7      	cmp	r7, r6
 8011f22:	bfac      	ite	ge
 8011f24:	f04f 0900 	movge.w	r9, #0
 8011f28:	f04f 0901 	movlt.w	r9, #1
 8011f2c:	2b05      	cmp	r3, #5
 8011f2e:	d804      	bhi.n	8011f3a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8011f30:	e8df f003 	tbb	[pc, r3]
 8011f34:	470f0854 	.word	0x470f0854
 8011f38:	4c4c      	.short	0x4c4c
 8011f3a:	2500      	movs	r5, #0
 8011f3c:	46a9      	mov	r9, r5
 8011f3e:	462e      	mov	r6, r5
 8011f40:	462f      	mov	r7, r5
 8011f42:	e00e      	b.n	8011f62 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8011f44:	42b7      	cmp	r7, r6
 8011f46:	f04f 0500 	mov.w	r5, #0
 8011f4a:	bfb4      	ite	lt
 8011f4c:	2600      	movlt	r6, #0
 8011f4e:	2601      	movge	r6, #1
 8011f50:	e7f6      	b.n	8011f40 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8011f52:	42b7      	cmp	r7, r6
 8011f54:	464d      	mov	r5, r9
 8011f56:	f04f 0900 	mov.w	r9, #0
 8011f5a:	bfb4      	ite	lt
 8011f5c:	2600      	movlt	r6, #0
 8011f5e:	2601      	movge	r6, #1
 8011f60:	464f      	mov	r7, r9
 8011f62:	f04f 0800 	mov.w	r8, #0
 8011f66:	f8a4 8016 	strh.w	r8, [r4, #22]
 8011f6a:	f8a4 8018 	strh.w	r8, [r4, #24]
 8011f6e:	f8cd 8004 	str.w	r8, [sp, #4]
 8011f72:	2300      	movs	r3, #0
 8011f74:	9303      	str	r3, [sp, #12]
 8011f76:	8823      	ldrh	r3, [r4, #0]
 8011f78:	2b20      	cmp	r3, #32
 8011f7a:	d033      	beq.n	8011fe4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8011f7c:	f242 010b 	movw	r1, #8203	@ 0x200b
 8011f80:	1a5a      	subs	r2, r3, r1
 8011f82:	f1d2 0a00 	rsbs	sl, r2, #0
 8011f86:	eb4a 0a02 	adc.w	sl, sl, r2
 8011f8a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8011f8e:	4293      	cmp	r3, r2
 8011f90:	d008      	beq.n	8011fa4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8011f92:	428b      	cmp	r3, r1
 8011f94:	9a01      	ldr	r2, [sp, #4]
 8011f96:	bf0e      	itee	eq
 8011f98:	f04f 0a01 	moveq.w	sl, #1
 8011f9c:	461a      	movne	r2, r3
 8011f9e:	f04f 0a00 	movne.w	sl, #0
 8011fa2:	9201      	str	r2, [sp, #4]
 8011fa4:	ab03      	add	r3, sp, #12
 8011fa6:	68e2      	ldr	r2, [r4, #12]
 8011fa8:	7a21      	ldrb	r1, [r4, #8]
 8011faa:	6860      	ldr	r0, [r4, #4]
 8011fac:	f003 f84c 	bl	8015048 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011fb0:	8020      	strh	r0, [r4, #0]
 8011fb2:	b9d8      	cbnz	r0, 8011fec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8011fb4:	8ba2      	ldrh	r2, [r4, #28]
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	4611      	mov	r1, r2
 8011fba:	4620      	mov	r0, r4
 8011fbc:	f7ff ff91 	bl	8011ee2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8011fc0:	e06e      	b.n	80120a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8011fc2:	2500      	movs	r5, #0
 8011fc4:	2701      	movs	r7, #1
 8011fc6:	46a9      	mov	r9, r5
 8011fc8:	462e      	mov	r6, r5
 8011fca:	e7ca      	b.n	8011f62 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8011fcc:	42b7      	cmp	r7, r6
 8011fce:	f04f 0500 	mov.w	r5, #0
 8011fd2:	bfb4      	ite	lt
 8011fd4:	2700      	movlt	r7, #0
 8011fd6:	2701      	movge	r7, #1
 8011fd8:	462e      	mov	r6, r5
 8011fda:	e7c2      	b.n	8011f62 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8011fdc:	2500      	movs	r5, #0
 8011fde:	2601      	movs	r6, #1
 8011fe0:	46a9      	mov	r9, r5
 8011fe2:	e7ad      	b.n	8011f40 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8011fe4:	9301      	str	r3, [sp, #4]
 8011fe6:	f04f 0a01 	mov.w	sl, #1
 8011fea:	e7db      	b.n	8011fa4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8011fec:	8b63      	ldrh	r3, [r4, #26]
 8011fee:	280a      	cmp	r0, #10
 8011ff0:	f103 0301 	add.w	r3, r3, #1
 8011ff4:	8363      	strh	r3, [r4, #26]
 8011ff6:	d0dd      	beq.n	8011fb4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8011ff8:	9a03      	ldr	r2, [sp, #12]
 8011ffa:	bb62      	cbnz	r2, 8012056 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8011ffc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8012000:	4298      	cmp	r0, r3
 8012002:	d003      	beq.n	801200c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8012004:	f242 030b 	movw	r3, #8203	@ 0x200b
 8012008:	4298      	cmp	r0, r3
 801200a:	d1b2      	bne.n	8011f72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801200c:	8823      	ldrh	r3, [r4, #0]
 801200e:	8ba1      	ldrh	r1, [r4, #28]
 8012010:	2b20      	cmp	r3, #32
 8012012:	d003      	beq.n	801201c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8012014:	f242 000b 	movw	r0, #8203	@ 0x200b
 8012018:	4283      	cmp	r3, r0
 801201a:	d131      	bne.n	8012080 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 801201c:	f1ba 0f00 	cmp.w	sl, #0
 8012020:	bf0a      	itet	eq
 8012022:	4688      	moveq	r8, r1
 8012024:	4650      	movne	r0, sl
 8012026:	2001      	moveq	r0, #1
 8012028:	440a      	add	r2, r1
 801202a:	8b23      	ldrh	r3, [r4, #24]
 801202c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8012030:	b292      	uxth	r2, r2
 8012032:	83a2      	strh	r2, [r4, #28]
 8012034:	4413      	add	r3, r2
 8012036:	f1b9 0f00 	cmp.w	r9, #0
 801203a:	d102      	bne.n	8012042 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 801203c:	2d00      	cmp	r5, #0
 801203e:	d042      	beq.n	80120c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8012040:	b300      	cbz	r0, 8012084 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8012042:	8c21      	ldrh	r1, [r4, #32]
 8012044:	4419      	add	r1, r3
 8012046:	458c      	cmp	ip, r1
 8012048:	da37      	bge.n	80120ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801204a:	8ae1      	ldrh	r1, [r4, #22]
 801204c:	2900      	cmp	r1, #0
 801204e:	d034      	beq.n	80120ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8012050:	4563      	cmp	r3, ip
 8012052:	dd8e      	ble.n	8011f72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012054:	e01d      	b.n	8012092 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8012056:	8893      	ldrh	r3, [r2, #4]
 8012058:	9901      	ldr	r1, [sp, #4]
 801205a:	8023      	strh	r3, [r4, #0]
 801205c:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8012060:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8012064:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8012068:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801206c:	ea4b 0b00 	orr.w	fp, fp, r0
 8012070:	68e0      	ldr	r0, [r4, #12]
 8012072:	6803      	ldr	r3, [r0, #0]
 8012074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012076:	4798      	blx	r3
 8012078:	eb0b 0200 	add.w	r2, fp, r0
 801207c:	b292      	uxth	r2, r2
 801207e:	e7c5      	b.n	801200c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8012080:	2000      	movs	r0, #0
 8012082:	e7d1      	b.n	8012028 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8012084:	4563      	cmp	r3, ip
 8012086:	f77f af74 	ble.w	8011f72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801208a:	8ae3      	ldrh	r3, [r4, #22]
 801208c:	2b00      	cmp	r3, #0
 801208e:	f43f af70 	beq.w	8011f72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012092:	2301      	movs	r3, #1
 8012094:	8c22      	ldrh	r2, [r4, #32]
 8012096:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 801209a:	8be3      	ldrh	r3, [r4, #30]
 801209c:	4413      	add	r3, r2
 801209e:	83e3      	strh	r3, [r4, #30]
 80120a0:	68e0      	ldr	r0, [r4, #12]
 80120a2:	6803      	ldr	r3, [r0, #0]
 80120a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80120a6:	4798      	blx	r3
 80120a8:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 80120ac:	4418      	add	r0, r3
 80120ae:	8a63      	ldrh	r3, [r4, #18]
 80120b0:	1a18      	subs	r0, r3, r0
 80120b2:	8260      	strh	r0, [r4, #18]
 80120b4:	b005      	add	sp, #20
 80120b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ba:	2300      	movs	r3, #0
 80120bc:	4611      	mov	r1, r2
 80120be:	4620      	mov	r0, r4
 80120c0:	f7ff ff0f 	bl	8011ee2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80120c4:	e755      	b.n	8011f72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80120c6:	4563      	cmp	r3, ip
 80120c8:	dd14      	ble.n	80120f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 80120ca:	b117      	cbz	r7, 80120d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 80120cc:	2301      	movs	r3, #1
 80120ce:	460a      	mov	r2, r1
 80120d0:	e772      	b.n	8011fb8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 80120d2:	2e00      	cmp	r6, #0
 80120d4:	f43f af4d 	beq.w	8011f72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80120d8:	2800      	cmp	r0, #0
 80120da:	f47f af4a 	bne.w	8011f72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80120de:	f1ba 0f00 	cmp.w	sl, #0
 80120e2:	d002      	beq.n	80120ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 80120e4:	2301      	movs	r3, #1
 80120e6:	4642      	mov	r2, r8
 80120e8:	e767      	b.n	8011fba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 80120ea:	8ae3      	ldrh	r3, [r4, #22]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	f43f af40 	beq.w	8011f72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80120f2:	e7d5      	b.n	80120a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80120f4:	2800      	cmp	r0, #0
 80120f6:	f47f af3c 	bne.w	8011f72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80120fa:	f1ba 0f00 	cmp.w	sl, #0
 80120fe:	f43f af38 	beq.w	8011f72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012102:	2301      	movs	r3, #1
 8012104:	4642      	mov	r2, r8
 8012106:	e7da      	b.n	80120be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08012108 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8012108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801210c:	b0e3      	sub	sp, #396	@ 0x18c
 801210e:	461c      	mov	r4, r3
 8012110:	4683      	mov	fp, r0
 8012112:	4688      	mov	r8, r1
 8012114:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8012116:	2b00      	cmp	r3, #0
 8012118:	f000 8112 	beq.w	8012340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801211c:	6823      	ldr	r3, [r4, #0]
 801211e:	2b00      	cmp	r3, #0
 8012120:	f000 810e 	beq.w	8012340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012124:	7ba3      	ldrb	r3, [r4, #14]
 8012126:	2b00      	cmp	r3, #0
 8012128:	f000 810a 	beq.w	8012340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801212c:	ad0a      	add	r5, sp, #40	@ 0x28
 801212e:	6810      	ldr	r0, [r2, #0]
 8012130:	6851      	ldr	r1, [r2, #4]
 8012132:	462b      	mov	r3, r5
 8012134:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8012138:	c303      	stmia	r3!, {r0, r1}
 801213a:	2100      	movs	r1, #0
 801213c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8012140:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8012144:	4628      	mov	r0, r5
 8012146:	910c      	str	r1, [sp, #48]	@ 0x30
 8012148:	a90c      	add	r1, sp, #48	@ 0x30
 801214a:	79a2      	ldrb	r2, [r4, #6]
 801214c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8012150:	f7ff fd1d 	bl	8011b8e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8012154:	a90c      	add	r1, sp, #48	@ 0x30
 8012156:	79a2      	ldrb	r2, [r4, #6]
 8012158:	4608      	mov	r0, r1
 801215a:	f7ff fd18 	bl	8011b8e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801215e:	a817      	add	r0, sp, #92	@ 0x5c
 8012160:	f002 fc2a 	bl	80149b8 <_ZN8touchgfx12TextProviderC1Ev>
 8012164:	6820      	ldr	r0, [r4, #0]
 8012166:	6803      	ldr	r3, [r0, #0]
 8012168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801216a:	4798      	blx	r3
 801216c:	4606      	mov	r6, r0
 801216e:	6820      	ldr	r0, [r4, #0]
 8012170:	6803      	ldr	r3, [r0, #0]
 8012172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012174:	4798      	blx	r3
 8012176:	4633      	mov	r3, r6
 8012178:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801217a:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801217c:	9000      	str	r0, [sp, #0]
 801217e:	a817      	add	r0, sp, #92	@ 0x5c
 8012180:	f002 fc6d 	bl	8014a5e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012184:	6820      	ldr	r0, [r4, #0]
 8012186:	f894 a004 	ldrb.w	sl, [r4, #4]
 801218a:	6803      	ldr	r3, [r0, #0]
 801218c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801218e:	4798      	blx	r3
 8012190:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8012194:	6823      	ldr	r3, [r4, #0]
 8012196:	4607      	mov	r7, r0
 8012198:	4406      	add	r6, r0
 801219a:	a830      	add	r0, sp, #192	@ 0xc0
 801219c:	f893 9009 	ldrb.w	r9, [r3, #9]
 80121a0:	f002 fc0a 	bl	80149b8 <_ZN8touchgfx12TextProviderC1Ev>
 80121a4:	7c23      	ldrb	r3, [r4, #16]
 80121a6:	b17b      	cbz	r3, 80121c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 80121a8:	6820      	ldr	r0, [r4, #0]
 80121aa:	6803      	ldr	r3, [r0, #0]
 80121ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80121ae:	4798      	blx	r3
 80121b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80121b2:	6820      	ldr	r0, [r4, #0]
 80121b4:	6802      	ldr	r2, [r0, #0]
 80121b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80121b8:	4790      	blx	r2
 80121ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121bc:	9000      	str	r0, [sp, #0]
 80121be:	a830      	add	r0, sp, #192	@ 0xc0
 80121c0:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 80121c2:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 80121c4:	f002 fc4b 	bl	8014a5e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80121c8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80121cc:	a80e      	add	r0, sp, #56	@ 0x38
 80121ce:	7be2      	ldrb	r2, [r4, #15]
 80121d0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80121d4:	1a8a      	subs	r2, r1, r2
 80121d6:	7c21      	ldrb	r1, [r4, #16]
 80121d8:	9103      	str	r1, [sp, #12]
 80121da:	b292      	uxth	r2, r2
 80121dc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80121e0:	9102      	str	r1, [sp, #8]
 80121e2:	6821      	ldr	r1, [r4, #0]
 80121e4:	9101      	str	r1, [sp, #4]
 80121e6:	7961      	ldrb	r1, [r4, #5]
 80121e8:	9100      	str	r1, [sp, #0]
 80121ea:	a930      	add	r1, sp, #192	@ 0xc0
 80121ec:	f7ff fc50 	bl	8011a90 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80121f0:	2e00      	cmp	r6, #0
 80121f2:	dc5b      	bgt.n	80122ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 80121f4:	af17      	add	r7, sp, #92	@ 0x5c
 80121f6:	f04f 0900 	mov.w	r9, #0
 80121fa:	7c23      	ldrb	r3, [r4, #16]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	f000 80b1 	beq.w	8012364 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8012202:	a80e      	add	r0, sp, #56	@ 0x38
 8012204:	f7ff fe7d 	bl	8011f02 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8012208:	f1ba 0f00 	cmp.w	sl, #0
 801220c:	f000 80a5 	beq.w	801235a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8012210:	7c23      	ldrb	r3, [r4, #16]
 8012212:	2264      	movs	r2, #100	@ 0x64
 8012214:	4639      	mov	r1, r7
 8012216:	a849      	add	r0, sp, #292	@ 0x124
 8012218:	9309      	str	r3, [sp, #36]	@ 0x24
 801221a:	f00e fbde 	bl	80209da <memcpy>
 801221e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012220:	2b00      	cmp	r3, #0
 8012222:	f000 80a7 	beq.w	8012374 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8012226:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801222a:	7922      	ldrb	r2, [r4, #4]
 801222c:	2a01      	cmp	r2, #1
 801222e:	f040 808a 	bne.w	8012346 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8012232:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8012236:	1ac0      	subs	r0, r0, r3
 8012238:	2302      	movs	r3, #2
 801223a:	fb90 f0f3 	sdiv	r0, r0, r3
 801223e:	b200      	sxth	r0, r0
 8012240:	7c23      	ldrb	r3, [r4, #16]
 8012242:	2b00      	cmp	r3, #0
 8012244:	f000 808b 	beq.w	801235e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8012248:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 801224c:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8012250:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8012254:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8012258:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801225c:	2100      	movs	r1, #0
 801225e:	4410      	add	r0, r2
 8012260:	4642      	mov	r2, r8
 8012262:	b200      	sxth	r0, r0
 8012264:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8012268:	9000      	str	r0, [sp, #0]
 801226a:	4658      	mov	r0, fp
 801226c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8012270:	f7ff fcbe 	bl	8011bf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8012274:	2800      	cmp	r0, #0
 8012276:	d163      	bne.n	8012340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012278:	b2b2      	uxth	r2, r6
 801227a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801227e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8012282:	4413      	add	r3, r2
 8012284:	1a8a      	subs	r2, r1, r2
 8012286:	b21b      	sxth	r3, r3
 8012288:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801228c:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 8012290:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8012294:	2a00      	cmp	r2, #0
 8012296:	d153      	bne.n	8012340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012298:	6822      	ldr	r2, [r4, #0]
 801229a:	8869      	ldrh	r1, [r5, #2]
 801229c:	7a12      	ldrb	r2, [r2, #8]
 801229e:	1a9b      	subs	r3, r3, r2
 80122a0:	88ea      	ldrh	r2, [r5, #6]
 80122a2:	440a      	add	r2, r1
 80122a4:	b212      	sxth	r2, r2
 80122a6:	4293      	cmp	r3, r2
 80122a8:	dda7      	ble.n	80121fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 80122aa:	e049      	b.n	8012340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80122ac:	7c23      	ldrb	r3, [r4, #16]
 80122ae:	444f      	add	r7, r9
 80122b0:	b1c3      	cbz	r3, 80122e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 80122b2:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 80122b6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80122ba:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80122be:	443b      	add	r3, r7
 80122c0:	4293      	cmp	r3, r2
 80122c2:	da97      	bge.n	80121f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80122c4:	a80e      	add	r0, sp, #56	@ 0x38
 80122c6:	f7ff fe1c 	bl	8011f02 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80122ca:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 80122ce:	3b01      	subs	r3, #1
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	454b      	cmp	r3, r9
 80122d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80122d6:	d021      	beq.n	801231c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 80122d8:	7961      	ldrb	r1, [r4, #5]
 80122da:	a817      	add	r0, sp, #92	@ 0x5c
 80122dc:	f7f1 fe14 	bl	8003f08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80122e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122e2:	e7f4      	b.n	80122ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 80122e4:	fa1f f986 	uxth.w	r9, r6
 80122e8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80122ec:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80122f0:	443b      	add	r3, r7
 80122f2:	4293      	cmp	r3, r2
 80122f4:	f6bf af7e 	bge.w	80121f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80122f8:	a817      	add	r0, sp, #92	@ 0x5c
 80122fa:	f002 ff71 	bl	80151e0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80122fe:	b1f8      	cbz	r0, 8012340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012300:	280a      	cmp	r0, #10
 8012302:	d1f1      	bne.n	80122e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8012304:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8012308:	444b      	add	r3, r9
 801230a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801230e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8012312:	eba3 0309 	sub.w	r3, r3, r9
 8012316:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801231a:	e7e5      	b.n	80122e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801231c:	b2b3      	uxth	r3, r6
 801231e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8012322:	441a      	add	r2, r3
 8012324:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8012328:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801232c:	1ad3      	subs	r3, r2, r3
 801232e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8012332:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8012336:	b11b      	cbz	r3, 8012340 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012338:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 801233c:	2b00      	cmp	r3, #0
 801233e:	d0ba      	beq.n	80122b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8012340:	b063      	add	sp, #396	@ 0x18c
 8012342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012346:	2a02      	cmp	r2, #2
 8012348:	d105      	bne.n	8012356 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801234a:	7be2      	ldrb	r2, [r4, #15]
 801234c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8012350:	1a80      	subs	r0, r0, r2
 8012352:	1ac0      	subs	r0, r0, r3
 8012354:	e773      	b.n	801223e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8012356:	2000      	movs	r0, #0
 8012358:	e772      	b.n	8012240 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801235a:	7be0      	ldrb	r0, [r4, #15]
 801235c:	e770      	b.n	8012240 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801235e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012362:	e773      	b.n	801224c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8012364:	f1ba 0f00 	cmp.w	sl, #0
 8012368:	d0f7      	beq.n	801235a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801236a:	2264      	movs	r2, #100	@ 0x64
 801236c:	4639      	mov	r1, r7
 801236e:	a849      	add	r0, sp, #292	@ 0x124
 8012370:	f00e fb33 	bl	80209da <memcpy>
 8012374:	2300      	movs	r3, #0
 8012376:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801237a:	6821      	ldr	r1, [r4, #0]
 801237c:	a849      	add	r0, sp, #292	@ 0x124
 801237e:	f7ff fbca 	bl	8011b16 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8012382:	b203      	sxth	r3, r0
 8012384:	e751      	b.n	801222a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08012386 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8012386:	2b03      	cmp	r3, #3
 8012388:	d818      	bhi.n	80123bc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801238a:	e8df f003 	tbb	[pc, r3]
 801238e:	0602      	.short	0x0602
 8012390:	130d      	.short	0x130d
 8012392:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012396:	1850      	adds	r0, r2, r1
 8012398:	4770      	bx	lr
 801239a:	8803      	ldrh	r3, [r0, #0]
 801239c:	8880      	ldrh	r0, [r0, #4]
 801239e:	4418      	add	r0, r3
 80123a0:	b200      	sxth	r0, r0
 80123a2:	1a80      	subs	r0, r0, r2
 80123a4:	3801      	subs	r0, #1
 80123a6:	4770      	bx	lr
 80123a8:	8803      	ldrh	r3, [r0, #0]
 80123aa:	8880      	ldrh	r0, [r0, #4]
 80123ac:	4418      	add	r0, r3
 80123ae:	b200      	sxth	r0, r0
 80123b0:	1a40      	subs	r0, r0, r1
 80123b2:	e7f7      	b.n	80123a4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80123b4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80123b8:	4410      	add	r0, r2
 80123ba:	4770      	bx	lr
 80123bc:	2000      	movs	r0, #0
 80123be:	4770      	bx	lr

080123c0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80123c0:	2b03      	cmp	r3, #3
 80123c2:	d817      	bhi.n	80123f4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80123c4:	e8df f003 	tbb	[pc, r3]
 80123c8:	10090602 	.word	0x10090602
 80123cc:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80123d0:	1850      	adds	r0, r2, r1
 80123d2:	4770      	bx	lr
 80123d4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80123d8:	e7fa      	b.n	80123d0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80123da:	8843      	ldrh	r3, [r0, #2]
 80123dc:	88c0      	ldrh	r0, [r0, #6]
 80123de:	4418      	add	r0, r3
 80123e0:	b200      	sxth	r0, r0
 80123e2:	1a80      	subs	r0, r0, r2
 80123e4:	3801      	subs	r0, #1
 80123e6:	4770      	bx	lr
 80123e8:	8843      	ldrh	r3, [r0, #2]
 80123ea:	88c0      	ldrh	r0, [r0, #6]
 80123ec:	4418      	add	r0, r3
 80123ee:	b200      	sxth	r0, r0
 80123f0:	1a40      	subs	r0, r0, r1
 80123f2:	e7f7      	b.n	80123e4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80123f4:	2000      	movs	r0, #0
 80123f6:	4770      	bx	lr

080123f8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80123f8:	4b01      	ldr	r3, [pc, #4]	@ (8012400 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80123fa:	2200      	movs	r2, #0
 80123fc:	601a      	str	r2, [r3, #0]
 80123fe:	4770      	bx	lr
 8012400:	24025150 	.word	0x24025150

08012404 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8012404:	4603      	mov	r3, r0
 8012406:	b1c8      	cbz	r0, 801243c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8012408:	0c02      	lsrs	r2, r0, #16
 801240a:	0412      	lsls	r2, r2, #16
 801240c:	b9a2      	cbnz	r2, 8012438 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801240e:	0403      	lsls	r3, r0, #16
 8012410:	2010      	movs	r0, #16
 8012412:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8012416:	bf04      	itt	eq
 8012418:	021b      	lsleq	r3, r3, #8
 801241a:	3008      	addeq	r0, #8
 801241c:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8012420:	bf04      	itt	eq
 8012422:	011b      	lsleq	r3, r3, #4
 8012424:	3004      	addeq	r0, #4
 8012426:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801242a:	bf04      	itt	eq
 801242c:	009b      	lsleq	r3, r3, #2
 801242e:	3002      	addeq	r0, #2
 8012430:	2b00      	cmp	r3, #0
 8012432:	db04      	blt.n	801243e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8012434:	3001      	adds	r0, #1
 8012436:	4770      	bx	lr
 8012438:	2000      	movs	r0, #0
 801243a:	e7ea      	b.n	8012412 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801243c:	2020      	movs	r0, #32
 801243e:	4770      	bx	lr

08012440 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8012440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012444:	b087      	sub	sp, #28
 8012446:	460d      	mov	r5, r1
 8012448:	4616      	mov	r6, r2
 801244a:	4698      	mov	r8, r3
 801244c:	4601      	mov	r1, r0
 801244e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8012452:	b120      	cbz	r0, 801245e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8012454:	b11a      	cbz	r2, 801245e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8012456:	2d1f      	cmp	r5, #31
 8012458:	d801      	bhi.n	801245e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801245a:	2b1f      	cmp	r3, #31
 801245c:	d904      	bls.n	8012468 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801245e:	2000      	movs	r0, #0
 8012460:	6038      	str	r0, [r7, #0]
 8012462:	b007      	add	sp, #28
 8012464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012468:	b97d      	cbnz	r5, 801248a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801246a:	b143      	cbz	r3, 801247e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801246c:	4602      	mov	r2, r0
 801246e:	462b      	mov	r3, r5
 8012470:	4641      	mov	r1, r8
 8012472:	4630      	mov	r0, r6
 8012474:	e9cd 4700 	strd	r4, r7, [sp]
 8012478:	f7ff ffe2 	bl	8012440 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801247c:	e7f1      	b.n	8012462 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801247e:	f04f 33ff 	mov.w	r3, #4294967295
 8012482:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8012486:	603b      	str	r3, [r7, #0]
 8012488:	e7eb      	b.n	8012462 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801248a:	fa32 fa05 	lsrs.w	sl, r2, r5
 801248e:	d106      	bne.n	801249e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8012490:	4346      	muls	r6, r0
 8012492:	fbb6 f0f4 	udiv	r0, r6, r4
 8012496:	fb04 6610 	mls	r6, r4, r0, r6
 801249a:	603e      	str	r6, [r7, #0]
 801249c:	e7e1      	b.n	8012462 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801249e:	2201      	movs	r2, #1
 80124a0:	fa00 fb05 	lsl.w	fp, r0, r5
 80124a4:	40aa      	lsls	r2, r5
 80124a6:	fbbb f9f4 	udiv	r9, fp, r4
 80124aa:	3a01      	subs	r2, #1
 80124ac:	fb0a f309 	mul.w	r3, sl, r9
 80124b0:	fb04 b919 	mls	r9, r4, r9, fp
 80124b4:	4016      	ands	r6, r2
 80124b6:	9303      	str	r3, [sp, #12]
 80124b8:	4630      	mov	r0, r6
 80124ba:	f7ff ffa3 	bl	8012404 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80124be:	462b      	mov	r3, r5
 80124c0:	460a      	mov	r2, r1
 80124c2:	4601      	mov	r1, r0
 80124c4:	4630      	mov	r0, r6
 80124c6:	e9cd 4700 	strd	r4, r7, [sp]
 80124ca:	f7ff ffb9 	bl	8012440 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80124ce:	4606      	mov	r6, r0
 80124d0:	4648      	mov	r0, r9
 80124d2:	eb05 0108 	add.w	r1, r5, r8
 80124d6:	f7ff ff95 	bl	8012404 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80124da:	ab05      	add	r3, sp, #20
 80124dc:	464a      	mov	r2, r9
 80124de:	e9cd 4300 	strd	r4, r3, [sp]
 80124e2:	4603      	mov	r3, r0
 80124e4:	4650      	mov	r0, sl
 80124e6:	f7ff ffab 	bl	8012440 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80124ea:	6839      	ldr	r1, [r7, #0]
 80124ec:	9a05      	ldr	r2, [sp, #20]
 80124ee:	9b03      	ldr	r3, [sp, #12]
 80124f0:	4411      	add	r1, r2
 80124f2:	fbb1 f2f4 	udiv	r2, r1, r4
 80124f6:	18d3      	adds	r3, r2, r3
 80124f8:	fb04 1412 	mls	r4, r4, r2, r1
 80124fc:	441e      	add	r6, r3
 80124fe:	603c      	str	r4, [r7, #0]
 8012500:	4430      	add	r0, r6
 8012502:	e7ae      	b.n	8012462 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08012504 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8012504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012508:	b085      	sub	sp, #20
 801250a:	f1b0 0900 	subs.w	r9, r0, #0
 801250e:	461d      	mov	r5, r3
 8012510:	4617      	mov	r7, r2
 8012512:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8012514:	bfbb      	ittet	lt
 8012516:	f1c9 0900 	rsblt	r9, r9, #0
 801251a:	f04f 36ff 	movlt.w	r6, #4294967295
 801251e:	2601      	movge	r6, #1
 8012520:	6823      	ldrlt	r3, [r4, #0]
 8012522:	bfbc      	itt	lt
 8012524:	425b      	neglt	r3, r3
 8012526:	6023      	strlt	r3, [r4, #0]
 8012528:	2a00      	cmp	r2, #0
 801252a:	da04      	bge.n	8012536 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801252c:	6823      	ldr	r3, [r4, #0]
 801252e:	4257      	negs	r7, r2
 8012530:	4276      	negs	r6, r6
 8012532:	425b      	negs	r3, r3
 8012534:	6023      	str	r3, [r4, #0]
 8012536:	2d00      	cmp	r5, #0
 8012538:	4638      	mov	r0, r7
 801253a:	bfba      	itte	lt
 801253c:	426d      	neglt	r5, r5
 801253e:	f04f 38ff 	movlt.w	r8, #4294967295
 8012542:	f04f 0801 	movge.w	r8, #1
 8012546:	f7ff ff5d 	bl	8012404 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801254a:	ab03      	add	r3, sp, #12
 801254c:	463a      	mov	r2, r7
 801254e:	e9cd 5300 	strd	r5, r3, [sp]
 8012552:	4603      	mov	r3, r0
 8012554:	4648      	mov	r0, r9
 8012556:	f7ff ff73 	bl	8012440 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801255a:	6823      	ldr	r3, [r4, #0]
 801255c:	9a03      	ldr	r2, [sp, #12]
 801255e:	4546      	cmp	r6, r8
 8012560:	441a      	add	r2, r3
 8012562:	fb92 f3f5 	sdiv	r3, r2, r5
 8012566:	4418      	add	r0, r3
 8012568:	fb05 2313 	mls	r3, r5, r3, r2
 801256c:	bf18      	it	ne
 801256e:	4240      	negne	r0, r0
 8012570:	1c72      	adds	r2, r6, #1
 8012572:	6023      	str	r3, [r4, #0]
 8012574:	d105      	bne.n	8012582 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8012576:	2b00      	cmp	r3, #0
 8012578:	f1c3 0200 	rsb	r2, r3, #0
 801257c:	db0b      	blt.n	8012596 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801257e:	6022      	str	r2, [r4, #0]
 8012580:	e006      	b.n	8012590 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012582:	2e01      	cmp	r6, #1
 8012584:	d104      	bne.n	8012590 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012586:	2b00      	cmp	r3, #0
 8012588:	da02      	bge.n	8012590 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801258a:	442b      	add	r3, r5
 801258c:	3801      	subs	r0, #1
 801258e:	6023      	str	r3, [r4, #0]
 8012590:	b005      	add	sp, #20
 8012592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012596:	3801      	subs	r0, #1
 8012598:	1b52      	subs	r2, r2, r5
 801259a:	e7f0      	b.n	801257e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801259c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801259c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80125a0:	4c1c      	ldr	r4, [pc, #112]	@ (8012614 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80125a2:	4605      	mov	r5, r0
 80125a4:	6807      	ldr	r7, [r0, #0]
 80125a6:	69a3      	ldr	r3, [r4, #24]
 80125a8:	b92b      	cbnz	r3, 80125b6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80125aa:	6840      	ldr	r0, [r0, #4]
 80125ac:	e9c5 7000 	strd	r7, r0, [r5]
 80125b0:	b004      	add	sp, #16
 80125b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125b6:	f04f 0802 	mov.w	r8, #2
 80125ba:	68a2      	ldr	r2, [r4, #8]
 80125bc:	ae04      	add	r6, sp, #16
 80125be:	6820      	ldr	r0, [r4, #0]
 80125c0:	fb93 f1f8 	sdiv	r1, r3, r8
 80125c4:	440a      	add	r2, r1
 80125c6:	69e1      	ldr	r1, [r4, #28]
 80125c8:	f846 2d04 	str.w	r2, [r6, #-4]!
 80125cc:	463a      	mov	r2, r7
 80125ce:	9600      	str	r6, [sp, #0]
 80125d0:	f7ff ff98 	bl	8012504 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80125d4:	69a3      	ldr	r3, [r4, #24]
 80125d6:	4607      	mov	r7, r0
 80125d8:	686a      	ldr	r2, [r5, #4]
 80125da:	6a21      	ldr	r1, [r4, #32]
 80125dc:	9600      	str	r6, [sp, #0]
 80125de:	6860      	ldr	r0, [r4, #4]
 80125e0:	f7ff ff90 	bl	8012504 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80125e4:	69a3      	ldr	r3, [r4, #24]
 80125e6:	6962      	ldr	r2, [r4, #20]
 80125e8:	4407      	add	r7, r0
 80125ea:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80125ec:	9600      	str	r6, [sp, #0]
 80125ee:	68e0      	ldr	r0, [r4, #12]
 80125f0:	fb93 f8f8 	sdiv	r8, r3, r8
 80125f4:	4442      	add	r2, r8
 80125f6:	9203      	str	r2, [sp, #12]
 80125f8:	682a      	ldr	r2, [r5, #0]
 80125fa:	f7ff ff83 	bl	8012504 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80125fe:	4680      	mov	r8, r0
 8012600:	9600      	str	r6, [sp, #0]
 8012602:	69a3      	ldr	r3, [r4, #24]
 8012604:	686a      	ldr	r2, [r5, #4]
 8012606:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012608:	6920      	ldr	r0, [r4, #16]
 801260a:	f7ff ff7b 	bl	8012504 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801260e:	4440      	add	r0, r8
 8012610:	e7cc      	b.n	80125ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8012612:	bf00      	nop
 8012614:	24025154 	.word	0x24025154

08012618 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8012618:	4b07      	ldr	r3, [pc, #28]	@ (8012638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801261a:	781b      	ldrb	r3, [r3, #0]
 801261c:	2b01      	cmp	r3, #1
 801261e:	d109      	bne.n	8012634 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8012620:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012624:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012628:	8003      	strh	r3, [r0, #0]
 801262a:	4b04      	ldr	r3, [pc, #16]	@ (801263c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801262c:	881b      	ldrh	r3, [r3, #0]
 801262e:	3b01      	subs	r3, #1
 8012630:	1a9b      	subs	r3, r3, r2
 8012632:	800b      	strh	r3, [r1, #0]
 8012634:	4770      	bx	lr
 8012636:	bf00      	nop
 8012638:	24025138 	.word	0x24025138
 801263c:	24025134 	.word	0x24025134

08012640 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8012640:	4b07      	ldr	r3, [pc, #28]	@ (8012660 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8012642:	b510      	push	{r4, lr}
 8012644:	781b      	ldrb	r3, [r3, #0]
 8012646:	2b01      	cmp	r3, #1
 8012648:	d108      	bne.n	801265c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801264a:	4b06      	ldr	r3, [pc, #24]	@ (8012664 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801264c:	880c      	ldrh	r4, [r1, #0]
 801264e:	881b      	ldrh	r3, [r3, #0]
 8012650:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012654:	3b01      	subs	r3, #1
 8012656:	1b1b      	subs	r3, r3, r4
 8012658:	8003      	strh	r3, [r0, #0]
 801265a:	800a      	strh	r2, [r1, #0]
 801265c:	bd10      	pop	{r4, pc}
 801265e:	bf00      	nop
 8012660:	24025138 	.word	0x24025138
 8012664:	24025134 	.word	0x24025134

08012668 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8012668:	4b0a      	ldr	r3, [pc, #40]	@ (8012694 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801266a:	b510      	push	{r4, lr}
 801266c:	781b      	ldrb	r3, [r3, #0]
 801266e:	2b01      	cmp	r3, #1
 8012670:	d10e      	bne.n	8012690 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8012672:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8012676:	8843      	ldrh	r3, [r0, #2]
 8012678:	f9b0 4000 	ldrsh.w	r4, [r0]
 801267c:	18ca      	adds	r2, r1, r3
 801267e:	4b06      	ldr	r3, [pc, #24]	@ (8012698 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8012680:	8044      	strh	r4, [r0, #2]
 8012682:	881b      	ldrh	r3, [r3, #0]
 8012684:	1a9b      	subs	r3, r3, r2
 8012686:	8003      	strh	r3, [r0, #0]
 8012688:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801268c:	8081      	strh	r1, [r0, #4]
 801268e:	80c3      	strh	r3, [r0, #6]
 8012690:	bd10      	pop	{r4, pc}
 8012692:	bf00      	nop
 8012694:	24025138 	.word	0x24025138
 8012698:	24025134 	.word	0x24025134

0801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801269c:	4b08      	ldr	r3, [pc, #32]	@ (80126c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	2b01      	cmp	r3, #1
 80126a2:	d10c      	bne.n	80126be <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80126a4:	8803      	ldrh	r3, [r0, #0]
 80126a6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80126aa:	8842      	ldrh	r2, [r0, #2]
 80126ac:	8002      	strh	r2, [r0, #0]
 80126ae:	185a      	adds	r2, r3, r1
 80126b0:	4b04      	ldr	r3, [pc, #16]	@ (80126c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80126b2:	881b      	ldrh	r3, [r3, #0]
 80126b4:	1a9b      	subs	r3, r3, r2
 80126b6:	8043      	strh	r3, [r0, #2]
 80126b8:	88c3      	ldrh	r3, [r0, #6]
 80126ba:	80c1      	strh	r1, [r0, #6]
 80126bc:	8083      	strh	r3, [r0, #4]
 80126be:	4770      	bx	lr
 80126c0:	24025138 	.word	0x24025138
 80126c4:	24025134 	.word	0x24025134

080126c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80126c8:	4b07      	ldr	r3, [pc, #28]	@ (80126e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80126ca:	b510      	push	{r4, lr}
 80126cc:	781b      	ldrb	r3, [r3, #0]
 80126ce:	2b01      	cmp	r3, #1
 80126d0:	d108      	bne.n	80126e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80126d2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80126d6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80126da:	8003      	strh	r3, [r0, #0]
 80126dc:	8893      	ldrh	r3, [r2, #4]
 80126de:	3b01      	subs	r3, #1
 80126e0:	1b1b      	subs	r3, r3, r4
 80126e2:	800b      	strh	r3, [r1, #0]
 80126e4:	bd10      	pop	{r4, pc}
 80126e6:	bf00      	nop
 80126e8:	24025138 	.word	0x24025138

080126ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80126ec:	4b0a      	ldr	r3, [pc, #40]	@ (8012718 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80126ee:	460a      	mov	r2, r1
 80126f0:	b510      	push	{r4, lr}
 80126f2:	781b      	ldrb	r3, [r3, #0]
 80126f4:	2b01      	cmp	r3, #1
 80126f6:	d10d      	bne.n	8012714 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80126f8:	8881      	ldrh	r1, [r0, #4]
 80126fa:	8803      	ldrh	r3, [r0, #0]
 80126fc:	440b      	add	r3, r1
 80126fe:	4601      	mov	r1, r0
 8012700:	3b01      	subs	r3, #1
 8012702:	f821 3b02 	strh.w	r3, [r1], #2
 8012706:	f7ff ffdf 	bl	80126c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801270a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801270e:	88c2      	ldrh	r2, [r0, #6]
 8012710:	80c3      	strh	r3, [r0, #6]
 8012712:	8082      	strh	r2, [r0, #4]
 8012714:	bd10      	pop	{r4, pc}
 8012716:	bf00      	nop
 8012718:	24025138 	.word	0x24025138

0801271c <_ZN8touchgfx11Application13requestRedrawEv>:
 801271c:	4b06      	ldr	r3, [pc, #24]	@ (8012738 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801271e:	2100      	movs	r1, #0
 8012720:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012724:	4b05      	ldr	r3, [pc, #20]	@ (801273c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8012726:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801272a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801272e:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8012732:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8012736:	4770      	bx	lr
 8012738:	24025134 	.word	0x24025134
 801273c:	24025136 	.word	0x24025136

08012740 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8012740:	4b03      	ldr	r3, [pc, #12]	@ (8012750 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8012742:	6818      	ldr	r0, [r3, #0]
 8012744:	b110      	cbz	r0, 801274c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8012746:	6803      	ldr	r3, [r0, #0]
 8012748:	699b      	ldr	r3, [r3, #24]
 801274a:	4718      	bx	r3
 801274c:	4770      	bx	lr
 801274e:	bf00      	nop
 8012750:	24025184 	.word	0x24025184

08012754 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8012754:	4770      	bx	lr
	...

08012758 <_ZN8touchgfx11Application4drawEv>:
 8012758:	4b09      	ldr	r3, [pc, #36]	@ (8012780 <_ZN8touchgfx11Application4drawEv+0x28>)
 801275a:	b507      	push	{r0, r1, r2, lr}
 801275c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012760:	2100      	movs	r1, #0
 8012762:	4b08      	ldr	r3, [pc, #32]	@ (8012784 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8012764:	9100      	str	r1, [sp, #0]
 8012766:	4669      	mov	r1, sp
 8012768:	f9b3 3000 	ldrsh.w	r3, [r3]
 801276c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012770:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012774:	6803      	ldr	r3, [r0, #0]
 8012776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012778:	4798      	blx	r3
 801277a:	b003      	add	sp, #12
 801277c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012780:	24025134 	.word	0x24025134
 8012784:	24025136 	.word	0x24025136

08012788 <_ZN8touchgfx11Application10invalidateEv>:
 8012788:	4b09      	ldr	r3, [pc, #36]	@ (80127b0 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801278a:	b082      	sub	sp, #8
 801278c:	2100      	movs	r1, #0
 801278e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012792:	4b08      	ldr	r3, [pc, #32]	@ (80127b4 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8012794:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012798:	aa02      	add	r2, sp, #8
 801279a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801279e:	9100      	str	r1, [sp, #0]
 80127a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80127a4:	6803      	ldr	r3, [r0, #0]
 80127a6:	e912 0006 	ldmdb	r2, {r1, r2}
 80127aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80127ac:	b002      	add	sp, #8
 80127ae:	4718      	bx	r3
 80127b0:	24025134 	.word	0x24025134
 80127b4:	24025136 	.word	0x24025136

080127b8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80127b8:	4b03      	ldr	r3, [pc, #12]	@ (80127c8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80127ba:	6818      	ldr	r0, [r3, #0]
 80127bc:	b110      	cbz	r0, 80127c4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80127be:	6803      	ldr	r3, [r0, #0]
 80127c0:	69db      	ldr	r3, [r3, #28]
 80127c2:	4718      	bx	r3
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop
 80127c8:	24025184 	.word	0x24025184

080127cc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80127cc:	4b03      	ldr	r3, [pc, #12]	@ (80127dc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80127ce:	6818      	ldr	r0, [r3, #0]
 80127d0:	b110      	cbz	r0, 80127d8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80127d2:	6803      	ldr	r3, [r0, #0]
 80127d4:	6a1b      	ldr	r3, [r3, #32]
 80127d6:	4718      	bx	r3
 80127d8:	4770      	bx	lr
 80127da:	bf00      	nop
 80127dc:	24025184 	.word	0x24025184

080127e0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80127e0:	2300      	movs	r3, #0
 80127e2:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 80127e6:	4770      	bx	lr

080127e8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80127e8:	4b03      	ldr	r3, [pc, #12]	@ (80127f8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80127ea:	6818      	ldr	r0, [r3, #0]
 80127ec:	b110      	cbz	r0, 80127f4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80127ee:	6803      	ldr	r3, [r0, #0]
 80127f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127f2:	4718      	bx	r3
 80127f4:	4770      	bx	lr
 80127f6:	bf00      	nop
 80127f8:	24025184 	.word	0x24025184

080127fc <_ZN8touchgfx11ApplicationD1Ev>:
 80127fc:	4770      	bx	lr

080127fe <_ZN8touchgfx11ApplicationD0Ev>:
 80127fe:	b510      	push	{r4, lr}
 8012800:	4604      	mov	r4, r0
 8012802:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8012806:	f00d f97b 	bl	801fb00 <_ZdlPvj>
 801280a:	4620      	mov	r0, r4
 801280c:	bd10      	pop	{r4, pc}

0801280e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801280e:	b510      	push	{r4, lr}
 8012810:	f9b1 4000 	ldrsh.w	r4, [r1]
 8012814:	888a      	ldrh	r2, [r1, #4]
 8012816:	f9b0 3000 	ldrsh.w	r3, [r0]
 801281a:	4422      	add	r2, r4
 801281c:	b212      	sxth	r2, r2
 801281e:	4293      	cmp	r3, r2
 8012820:	da15      	bge.n	801284e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012822:	8882      	ldrh	r2, [r0, #4]
 8012824:	4413      	add	r3, r2
 8012826:	b21b      	sxth	r3, r3
 8012828:	429c      	cmp	r4, r3
 801282a:	da10      	bge.n	801284e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801282c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012830:	88c9      	ldrh	r1, [r1, #6]
 8012832:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012836:	4419      	add	r1, r3
 8012838:	b209      	sxth	r1, r1
 801283a:	428a      	cmp	r2, r1
 801283c:	da07      	bge.n	801284e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801283e:	88c0      	ldrh	r0, [r0, #6]
 8012840:	4410      	add	r0, r2
 8012842:	b200      	sxth	r0, r0
 8012844:	4283      	cmp	r3, r0
 8012846:	bfac      	ite	ge
 8012848:	2000      	movge	r0, #0
 801284a:	2001      	movlt	r0, #1
 801284c:	bd10      	pop	{r4, pc}
 801284e:	2000      	movs	r0, #0
 8012850:	e7fc      	b.n	801284c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08012852 <_ZN8touchgfx4Rect10restrictToEss>:
 8012852:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012856:	2b00      	cmp	r3, #0
 8012858:	b510      	push	{r4, lr}
 801285a:	da04      	bge.n	8012866 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801285c:	8884      	ldrh	r4, [r0, #4]
 801285e:	4423      	add	r3, r4
 8012860:	8083      	strh	r3, [r0, #4]
 8012862:	2300      	movs	r3, #0
 8012864:	8003      	strh	r3, [r0, #0]
 8012866:	f9b0 4000 	ldrsh.w	r4, [r0]
 801286a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801286e:	1b09      	subs	r1, r1, r4
 8012870:	428b      	cmp	r3, r1
 8012872:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8012876:	bfc8      	it	gt
 8012878:	8081      	strhgt	r1, [r0, #4]
 801287a:	2b00      	cmp	r3, #0
 801287c:	da04      	bge.n	8012888 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801287e:	88c1      	ldrh	r1, [r0, #6]
 8012880:	440b      	add	r3, r1
 8012882:	80c3      	strh	r3, [r0, #6]
 8012884:	2300      	movs	r3, #0
 8012886:	8043      	strh	r3, [r0, #2]
 8012888:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801288c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012890:	1a52      	subs	r2, r2, r1
 8012892:	4293      	cmp	r3, r2
 8012894:	bfc8      	it	gt
 8012896:	80c2      	strhgt	r2, [r0, #6]
 8012898:	bd10      	pop	{r4, pc}
	...

0801289c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801289c:	4b10      	ldr	r3, [pc, #64]	@ (80128e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801289e:	b510      	push	{r4, lr}
 80128a0:	460c      	mov	r4, r1
 80128a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80128a6:	4b0f      	ldr	r3, [pc, #60]	@ (80128e4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80128a8:	4620      	mov	r0, r4
 80128aa:	f9b3 1000 	ldrsh.w	r1, [r3]
 80128ae:	f7ff ffd0 	bl	8012852 <_ZN8touchgfx4Rect10restrictToEss>
 80128b2:	4b0d      	ldr	r3, [pc, #52]	@ (80128e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80128b4:	6818      	ldr	r0, [r3, #0]
 80128b6:	b190      	cbz	r0, 80128de <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80128b8:	6803      	ldr	r3, [r0, #0]
 80128ba:	4621      	mov	r1, r4
 80128bc:	689b      	ldr	r3, [r3, #8]
 80128be:	4798      	blx	r3
 80128c0:	4b0a      	ldr	r3, [pc, #40]	@ (80128ec <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80128c2:	6818      	ldr	r0, [r3, #0]
 80128c4:	b118      	cbz	r0, 80128ce <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80128c6:	6803      	ldr	r3, [r0, #0]
 80128c8:	4621      	mov	r1, r4
 80128ca:	689b      	ldr	r3, [r3, #8]
 80128cc:	4798      	blx	r3
 80128ce:	4b08      	ldr	r3, [pc, #32]	@ (80128f0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80128d0:	4621      	mov	r1, r4
 80128d2:	6818      	ldr	r0, [r3, #0]
 80128d4:	6803      	ldr	r3, [r0, #0]
 80128d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128da:	69db      	ldr	r3, [r3, #28]
 80128dc:	4718      	bx	r3
 80128de:	bd10      	pop	{r4, pc}
 80128e0:	24025136 	.word	0x24025136
 80128e4:	24025134 	.word	0x24025134
 80128e8:	24025184 	.word	0x24025184
 80128ec:	24025180 	.word	0x24025180
 80128f0:	24025140 	.word	0x24025140

080128f4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80128f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128f6:	4606      	mov	r6, r0
 80128f8:	4608      	mov	r0, r1
 80128fa:	460f      	mov	r7, r1
 80128fc:	f7fa ffc3 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012900:	b9e8      	cbnz	r0, 801293e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012902:	f9b7 5000 	ldrsh.w	r5, [r7]
 8012906:	f9b6 4000 	ldrsh.w	r4, [r6]
 801290a:	42a5      	cmp	r5, r4
 801290c:	db17      	blt.n	801293e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801290e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012912:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8012916:	429a      	cmp	r2, r3
 8012918:	db11      	blt.n	801293e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801291a:	88b9      	ldrh	r1, [r7, #4]
 801291c:	440d      	add	r5, r1
 801291e:	88b1      	ldrh	r1, [r6, #4]
 8012920:	440c      	add	r4, r1
 8012922:	b22d      	sxth	r5, r5
 8012924:	b224      	sxth	r4, r4
 8012926:	42a5      	cmp	r5, r4
 8012928:	dc09      	bgt.n	801293e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801292a:	88f8      	ldrh	r0, [r7, #6]
 801292c:	4410      	add	r0, r2
 801292e:	88f2      	ldrh	r2, [r6, #6]
 8012930:	4413      	add	r3, r2
 8012932:	b200      	sxth	r0, r0
 8012934:	b21b      	sxth	r3, r3
 8012936:	4298      	cmp	r0, r3
 8012938:	bfcc      	ite	gt
 801293a:	2000      	movgt	r0, #0
 801293c:	2001      	movle	r0, #1
 801293e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012940 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8012940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012942:	4604      	mov	r4, r0
 8012944:	4608      	mov	r0, r1
 8012946:	460d      	mov	r5, r1
 8012948:	f7fa ff9d 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 801294c:	b978      	cbnz	r0, 801296e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801294e:	4620      	mov	r0, r4
 8012950:	f7fa ff99 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012954:	f9b5 6000 	ldrsh.w	r6, [r5]
 8012958:	b150      	cbz	r0, 8012970 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801295a:	8026      	strh	r6, [r4, #0]
 801295c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012960:	8063      	strh	r3, [r4, #2]
 8012962:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8012966:	80a3      	strh	r3, [r4, #4]
 8012968:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801296c:	80e3      	strh	r3, [r4, #6]
 801296e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012970:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012974:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012978:	42b1      	cmp	r1, r6
 801297a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801297e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8012982:	460f      	mov	r7, r1
 8012984:	88ed      	ldrh	r5, [r5, #6]
 8012986:	bfa8      	it	ge
 8012988:	4637      	movge	r7, r6
 801298a:	4293      	cmp	r3, r2
 801298c:	4618      	mov	r0, r3
 801298e:	4466      	add	r6, ip
 8012990:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012994:	bfa8      	it	ge
 8012996:	4610      	movge	r0, r2
 8012998:	442a      	add	r2, r5
 801299a:	88e5      	ldrh	r5, [r4, #6]
 801299c:	4461      	add	r1, ip
 801299e:	b236      	sxth	r6, r6
 80129a0:	8027      	strh	r7, [r4, #0]
 80129a2:	442b      	add	r3, r5
 80129a4:	b209      	sxth	r1, r1
 80129a6:	b212      	sxth	r2, r2
 80129a8:	8060      	strh	r0, [r4, #2]
 80129aa:	b21b      	sxth	r3, r3
 80129ac:	428e      	cmp	r6, r1
 80129ae:	bfac      	ite	ge
 80129b0:	ebc7 0106 	rsbge	r1, r7, r6
 80129b4:	ebc7 0101 	rsblt	r1, r7, r1
 80129b8:	429a      	cmp	r2, r3
 80129ba:	bfac      	ite	ge
 80129bc:	ebc0 0202 	rsbge	r2, r0, r2
 80129c0:	ebc0 0203 	rsblt	r2, r0, r3
 80129c4:	80a1      	strh	r1, [r4, #4]
 80129c6:	80e2      	strh	r2, [r4, #6]
 80129c8:	e7d1      	b.n	801296e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080129cc <_ZN8touchgfx11Application11getInstanceEv>:
 80129cc:	4b01      	ldr	r3, [pc, #4]	@ (80129d4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80129ce:	6818      	ldr	r0, [r3, #0]
 80129d0:	4770      	bx	lr
 80129d2:	bf00      	nop
 80129d4:	24025194 	.word	0x24025194

080129d8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80129d8:	2300      	movs	r3, #0
 80129da:	b510      	push	{r4, lr}
 80129dc:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 80129e0:	4604      	mov	r4, r0
 80129e2:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80129e6:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80129ea:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80129ee:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d90e      	bls.n	8012a14 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80129f6:	18e2      	adds	r2, r4, r3
 80129f8:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 80129fc:	b122      	cbz	r2, 8012a08 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80129fe:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8012a02:	6803      	ldr	r3, [r0, #0]
 8012a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012a06:	4798      	blx	r3
 8012a08:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8012a0c:	3301      	adds	r3, #1
 8012a0e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8012a12:	e7ea      	b.n	80129ea <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8012a14:	bd10      	pop	{r4, pc}

08012a16 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8012a16:	2300      	movs	r3, #0
 8012a18:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8012a1c:	30a4      	adds	r0, #164	@ 0xa4
 8012a1e:	f820 3c24 	strh.w	r3, [r0, #-36]
 8012a22:	f802 3b01 	strb.w	r3, [r2], #1
 8012a26:	4282      	cmp	r2, r0
 8012a28:	d1fb      	bne.n	8012a22 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8012a2a:	4770      	bx	lr

08012a2c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8012a2c:	b570      	push	{r4, r5, r6, lr}
 8012a2e:	4c0b      	ldr	r4, [pc, #44]	@ (8012a5c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8012a30:	4605      	mov	r5, r0
 8012a32:	460e      	mov	r6, r1
 8012a34:	6820      	ldr	r0, [r4, #0]
 8012a36:	b110      	cbz	r0, 8012a3e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8012a38:	6803      	ldr	r3, [r0, #0]
 8012a3a:	695b      	ldr	r3, [r3, #20]
 8012a3c:	4798      	blx	r3
 8012a3e:	1d28      	adds	r0, r5, #4
 8012a40:	f7ff ffe9 	bl	8012a16 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8012a44:	6026      	str	r6, [r4, #0]
 8012a46:	6833      	ldr	r3, [r6, #0]
 8012a48:	4630      	mov	r0, r6
 8012a4a:	68db      	ldr	r3, [r3, #12]
 8012a4c:	4798      	blx	r3
 8012a4e:	682b      	ldr	r3, [r5, #0]
 8012a50:	4628      	mov	r0, r5
 8012a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a58:	4718      	bx	r3
 8012a5a:	bf00      	nop
 8012a5c:	24025184 	.word	0x24025184

08012a60 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8012a60:	2300      	movs	r3, #0
 8012a62:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8012a66:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8012a6a:	461a      	mov	r2, r3
 8012a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a6e:	461c      	mov	r4, r3
 8012a70:	461d      	mov	r5, r3
 8012a72:	459c      	cmp	ip, r3
 8012a74:	dd1a      	ble.n	8012aac <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8012a76:	18c6      	adds	r6, r0, r3
 8012a78:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8012a7c:	b16e      	cbz	r6, 8012a9a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d008      	beq.n	8012a94 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8012a82:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8012a86:	fa1f fe82 	uxth.w	lr, r2
 8012a8a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8012a8e:	1887      	adds	r7, r0, r2
 8012a90:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8012a94:	3201      	adds	r2, #1
 8012a96:	3301      	adds	r3, #1
 8012a98:	e7eb      	b.n	8012a72 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8012a9a:	4299      	cmp	r1, r3
 8012a9c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8012aa0:	bfa8      	it	ge
 8012aa2:	3501      	addge	r5, #1
 8012aa4:	429e      	cmp	r6, r3
 8012aa6:	bfc8      	it	gt
 8012aa8:	3401      	addgt	r4, #1
 8012aaa:	e7f4      	b.n	8012a96 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8012aac:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8012ab0:	1b49      	subs	r1, r1, r5
 8012ab2:	1b1b      	subs	r3, r3, r4
 8012ab4:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8012ab8:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8012abc:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8012ac0:	4293      	cmp	r3, r2
 8012ac2:	dd03      	ble.n	8012acc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8012ac4:	3b01      	subs	r3, #1
 8012ac6:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8012aca:	e7f7      	b.n	8012abc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8012acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08012ad0 <_ZN8touchgfx11Application15handleTickEventEv>:
 8012ad0:	b570      	push	{r4, r5, r6, lr}
 8012ad2:	4d16      	ldr	r5, [pc, #88]	@ (8012b2c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	6828      	ldr	r0, [r5, #0]
 8012ad8:	b140      	cbz	r0, 8012aec <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8012ada:	7a03      	ldrb	r3, [r0, #8]
 8012adc:	b933      	cbnz	r3, 8012aec <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8012ade:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8012ae2:	6803      	ldr	r3, [r0, #0]
 8012ae4:	689b      	ldr	r3, [r3, #8]
 8012ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012aea:	4718      	bx	r3
 8012aec:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8012af0:	4e0f      	ldr	r6, [pc, #60]	@ (8012b30 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8012af2:	b973      	cbnz	r3, 8012b12 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012af4:	b168      	cbz	r0, 8012b12 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012af6:	7a03      	ldrb	r3, [r0, #8]
 8012af8:	b15b      	cbz	r3, 8012b12 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012afa:	6830      	ldr	r0, [r6, #0]
 8012afc:	b110      	cbz	r0, 8012b04 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8012afe:	6803      	ldr	r3, [r0, #0]
 8012b00:	691b      	ldr	r3, [r3, #16]
 8012b02:	4798      	blx	r3
 8012b04:	6828      	ldr	r0, [r5, #0]
 8012b06:	6803      	ldr	r3, [r0, #0]
 8012b08:	68db      	ldr	r3, [r3, #12]
 8012b0a:	4798      	blx	r3
 8012b0c:	2301      	movs	r3, #1
 8012b0e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8012b12:	3404      	adds	r4, #4
 8012b14:	4620      	mov	r0, r4
 8012b16:	f7ff ff5f 	bl	80129d8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	f7ff ffa0 	bl	8012a60 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8012b20:	6830      	ldr	r0, [r6, #0]
 8012b22:	b110      	cbz	r0, 8012b2a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8012b24:	6803      	ldr	r3, [r0, #0]
 8012b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b28:	e7dd      	b.n	8012ae6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8012b2a:	bd70      	pop	{r4, r5, r6, pc}
 8012b2c:	24025188 	.word	0x24025188
 8012b30:	24025184 	.word	0x24025184

08012b34 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8012b34:	4603      	mov	r3, r0
 8012b36:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	801a      	strh	r2, [r3, #0]
 8012b3e:	3308      	adds	r3, #8
 8012b40:	f823 2c06 	strh.w	r2, [r3, #-6]
 8012b44:	f823 2c04 	strh.w	r2, [r3, #-4]
 8012b48:	f823 2c02 	strh.w	r2, [r3, #-2]
 8012b4c:	428b      	cmp	r3, r1
 8012b4e:	d1f5      	bne.n	8012b3c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8012b50:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8012b54:	4770      	bx	lr
	...

08012b58 <_ZN8touchgfx11ApplicationC1Ev>:
 8012b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8012bd0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8012b5c:	4606      	mov	r6, r0
 8012b5e:	4604      	mov	r4, r0
 8012b60:	2500      	movs	r5, #0
 8012b62:	f846 3b04 	str.w	r3, [r6], #4
 8012b66:	22a8      	movs	r2, #168	@ 0xa8
 8012b68:	2100      	movs	r1, #0
 8012b6a:	4630      	mov	r0, r6
 8012b6c:	f00d fe54 	bl	8020818 <memset>
 8012b70:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8012b74:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8012b78:	4f16      	ldr	r7, [pc, #88]	@ (8012bd4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8012b7a:	f7ff ffdb 	bl	8012b34 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012b7e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8012b82:	f7ff ffd7 	bl	8012b34 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012b86:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8012b8a:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8012b8e:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8012b92:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8012b96:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8012b9a:	490f      	ldr	r1, [pc, #60]	@ (8012bd8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8012b9c:	480f      	ldr	r0, [pc, #60]	@ (8012bdc <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8012b9e:	f00c f91f 	bl	801ede0 <CRC_Lock>
 8012ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8012be0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8012ba4:	b158      	cbz	r0, 8012bbe <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8012ba6:	801d      	strh	r5, [r3, #0]
 8012ba8:	2300      	movs	r3, #0
 8012baa:	4a0e      	ldr	r2, [pc, #56]	@ (8012be4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8012bac:	4630      	mov	r0, r6
 8012bae:	6013      	str	r3, [r2, #0]
 8012bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8012be8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8012bb2:	603b      	str	r3, [r7, #0]
 8012bb4:	6013      	str	r3, [r2, #0]
 8012bb6:	f7ff ff2e 	bl	8012a16 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8012bba:	4620      	mov	r0, r4
 8012bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8012bc2:	2002      	movs	r0, #2
 8012bc4:	801a      	strh	r2, [r3, #0]
 8012bc6:	6038      	str	r0, [r7, #0]
 8012bc8:	f001 fd7c 	bl	80146c4 <_ZN8touchgfx6Screen4drawEv>
 8012bcc:	e7ec      	b.n	8012ba8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8012bce:	bf00      	nop
 8012bd0:	08023e90 	.word	0x08023e90
 8012bd4:	24025184 	.word	0x24025184
 8012bd8:	b5e8b5cd 	.word	0xb5e8b5cd
 8012bdc:	f407a5c2 	.word	0xf407a5c2
 8012be0:	2400007c 	.word	0x2400007c
 8012be4:	24025194 	.word	0x24025194
 8012be8:	24025188 	.word	0x24025188

08012bec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8012bec:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8012bf0:	3b01      	subs	r3, #1
 8012bf2:	b29b      	uxth	r3, r3
 8012bf4:	428b      	cmp	r3, r1
 8012bf6:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8012bfa:	b510      	push	{r4, lr}
 8012bfc:	d908      	bls.n	8012c10 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8012bfe:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8012c02:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8012c06:	681a      	ldr	r2, [r3, #0]
 8012c08:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8012c0c:	685a      	ldr	r2, [r3, #4]
 8012c0e:	6062      	str	r2, [r4, #4]
 8012c10:	bd10      	pop	{r4, pc}
	...

08012c14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8012c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c18:	b08f      	sub	sp, #60	@ 0x3c
 8012c1a:	4b8f      	ldr	r3, [pc, #572]	@ (8012e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8012c1c:	4683      	mov	fp, r0
 8012c1e:	ac0a      	add	r4, sp, #40	@ 0x28
 8012c20:	e884 0006 	stmia.w	r4, {r1, r2}
 8012c24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012c28:	4620      	mov	r0, r4
 8012c2a:	4b8c      	ldr	r3, [pc, #560]	@ (8012e5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8012c2c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012c30:	f7ff fe0f 	bl	8012852 <_ZN8touchgfx4Rect10restrictToEss>
 8012c34:	4620      	mov	r0, r4
 8012c36:	f7fa fe26 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012c3a:	2800      	cmp	r0, #0
 8012c3c:	d16a      	bne.n	8012d14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012c3e:	9403      	str	r4, [sp, #12]
 8012c40:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8012c44:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8012c48:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8012c4c:	9301      	str	r3, [sp, #4]
 8012c4e:	35a4      	adds	r5, #164	@ 0xa4
 8012c50:	b15c      	cbz	r4, 8012c6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8012c52:	4629      	mov	r1, r5
 8012c54:	9803      	ldr	r0, [sp, #12]
 8012c56:	f7ff fe4d 	bl	80128f4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8012c5a:	3c01      	subs	r4, #1
 8012c5c:	b118      	cbz	r0, 8012c66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8012c5e:	b2a1      	uxth	r1, r4
 8012c60:	9801      	ldr	r0, [sp, #4]
 8012c62:	f7ff ffc3 	bl	8012bec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012c66:	3d08      	subs	r5, #8
 8012c68:	e7f2      	b.n	8012c50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8012c6a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8012c6e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012c72:	f8cd a010 	str.w	sl, [sp, #16]
 8012c76:	9302      	str	r3, [sp, #8]
 8012c78:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012c7c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8012c80:	9306      	str	r3, [sp, #24]
 8012c82:	445c      	add	r4, fp
 8012c84:	2500      	movs	r5, #0
 8012c86:	4626      	mov	r6, r4
 8012c88:	f8cd a014 	str.w	sl, [sp, #20]
 8012c8c:	462f      	mov	r7, r5
 8012c8e:	9b05      	ldr	r3, [sp, #20]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d073      	beq.n	8012d7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8012c94:	9903      	ldr	r1, [sp, #12]
 8012c96:	4630      	mov	r0, r6
 8012c98:	f7ff fdb9 	bl	801280e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012c9c:	b350      	cbz	r0, 8012cf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8012c9e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8012ca2:	f9b6 c000 	ldrsh.w	ip, [r6]
 8012ca6:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8012caa:	45e6      	cmp	lr, ip
 8012cac:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8012cb0:	db33      	blt.n	8012d1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012cb2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8012cb6:	88b3      	ldrh	r3, [r6, #4]
 8012cb8:	4472      	add	r2, lr
 8012cba:	4463      	add	r3, ip
 8012cbc:	b212      	sxth	r2, r2
 8012cbe:	b21b      	sxth	r3, r3
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	dc2a      	bgt.n	8012d1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012cc4:	fa1f f289 	uxth.w	r2, r9
 8012cc8:	88f3      	ldrh	r3, [r6, #6]
 8012cca:	45c8      	cmp	r8, r9
 8012ccc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8012cd0:	4413      	add	r3, r2
 8012cd2:	fa1f fc88 	uxth.w	ip, r8
 8012cd6:	b29b      	uxth	r3, r3
 8012cd8:	fa0f fe83 	sxth.w	lr, r3
 8012cdc:	db0f      	blt.n	8012cfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8012cde:	eba3 030c 	sub.w	r3, r3, ip
 8012ce2:	1ac9      	subs	r1, r1, r3
 8012ce4:	b209      	sxth	r1, r1
 8012ce6:	2900      	cmp	r1, #0
 8012ce8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012cec:	dd12      	ble.n	8012d14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012cee:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8012cf2:	4605      	mov	r5, r0
 8012cf4:	9b05      	ldr	r3, [sp, #20]
 8012cf6:	3e08      	subs	r6, #8
 8012cf8:	3b01      	subs	r3, #1
 8012cfa:	9305      	str	r3, [sp, #20]
 8012cfc:	e7c7      	b.n	8012c8e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8012cfe:	4461      	add	r1, ip
 8012d00:	b209      	sxth	r1, r1
 8012d02:	4571      	cmp	r1, lr
 8012d04:	dc38      	bgt.n	8012d78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012d06:	eba2 020c 	sub.w	r2, r2, ip
 8012d0a:	b212      	sxth	r2, r2
 8012d0c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8012d10:	2a00      	cmp	r2, #0
 8012d12:	dcee      	bgt.n	8012cf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8012d14:	b00f      	add	sp, #60	@ 0x3c
 8012d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d1a:	45c8      	cmp	r8, r9
 8012d1c:	db2c      	blt.n	8012d78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012d1e:	88f3      	ldrh	r3, [r6, #6]
 8012d20:	4499      	add	r9, r3
 8012d22:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8012d26:	4498      	add	r8, r3
 8012d28:	fa0f f989 	sxth.w	r9, r9
 8012d2c:	fa0f f888 	sxth.w	r8, r8
 8012d30:	45c1      	cmp	r9, r8
 8012d32:	db21      	blt.n	8012d78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012d34:	fa1f f28c 	uxth.w	r2, ip
 8012d38:	88b3      	ldrh	r3, [r6, #4]
 8012d3a:	45e6      	cmp	lr, ip
 8012d3c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8012d40:	4413      	add	r3, r2
 8012d42:	fa1f f88e 	uxth.w	r8, lr
 8012d46:	b29b      	uxth	r3, r3
 8012d48:	fa0f f983 	sxth.w	r9, r3
 8012d4c:	db0a      	blt.n	8012d64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8012d4e:	eba3 0308 	sub.w	r3, r3, r8
 8012d52:	1ac9      	subs	r1, r1, r3
 8012d54:	b209      	sxth	r1, r1
 8012d56:	2900      	cmp	r1, #0
 8012d58:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8012d5c:	ddda      	ble.n	8012d14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012d5e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8012d62:	e7c6      	b.n	8012cf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8012d64:	4441      	add	r1, r8
 8012d66:	b209      	sxth	r1, r1
 8012d68:	4549      	cmp	r1, r9
 8012d6a:	dc05      	bgt.n	8012d78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012d6c:	eba2 0208 	sub.w	r2, r2, r8
 8012d70:	b212      	sxth	r2, r2
 8012d72:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8012d76:	e7cb      	b.n	8012d10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8012d78:	4607      	mov	r7, r0
 8012d7a:	e7bb      	b.n	8012cf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8012d7c:	2d00      	cmp	r5, #0
 8012d7e:	d181      	bne.n	8012c84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8012d80:	2f00      	cmp	r7, #0
 8012d82:	f000 81dd 	beq.w	8013140 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8012d86:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8012d8a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8012d8e:	b2b3      	uxth	r3, r6
 8012d90:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8012d94:	9305      	str	r3, [sp, #20]
 8012d96:	9a05      	ldr	r2, [sp, #20]
 8012d98:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8012d9c:	4413      	add	r3, r2
 8012d9e:	b2ba      	uxth	r2, r7
 8012da0:	4492      	add	sl, r2
 8012da2:	b29b      	uxth	r3, r3
 8012da4:	fa1f fa8a 	uxth.w	sl, sl
 8012da8:	fa0f f883 	sxth.w	r8, r3
 8012dac:	fa0f f98a 	sxth.w	r9, sl
 8012db0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8012db4:	9b04      	ldr	r3, [sp, #16]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d052      	beq.n	8012e60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8012dba:	9903      	ldr	r1, [sp, #12]
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	f7ff fd26 	bl	801280e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012dc2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012dc6:	b1c0      	cbz	r0, 8012dfa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012dc8:	f9b4 e000 	ldrsh.w	lr, [r4]
 8012dcc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012dd0:	4576      	cmp	r6, lr
 8012dd2:	dc22      	bgt.n	8012e1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012dd4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012dd8:	44f4      	add	ip, lr
 8012dda:	fa0f fc8c 	sxth.w	ip, ip
 8012dde:	45e0      	cmp	r8, ip
 8012de0:	db1b      	blt.n	8012e1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012de2:	428f      	cmp	r7, r1
 8012de4:	fa1f fc81 	uxth.w	ip, r1
 8012de8:	88e1      	ldrh	r1, [r4, #6]
 8012dea:	dc0d      	bgt.n	8012e08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8012dec:	ebaa 0c0c 	sub.w	ip, sl, ip
 8012df0:	f8a4 9002 	strh.w	r9, [r4, #2]
 8012df4:	eba1 010c 	sub.w	r1, r1, ip
 8012df8:	80e1      	strh	r1, [r4, #6]
 8012dfa:	4628      	mov	r0, r5
 8012dfc:	9904      	ldr	r1, [sp, #16]
 8012dfe:	3c08      	subs	r4, #8
 8012e00:	4605      	mov	r5, r0
 8012e02:	3901      	subs	r1, #1
 8012e04:	9104      	str	r1, [sp, #16]
 8012e06:	e7d3      	b.n	8012db0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8012e08:	4461      	add	r1, ip
 8012e0a:	b209      	sxth	r1, r1
 8012e0c:	4549      	cmp	r1, r9
 8012e0e:	dcf5      	bgt.n	8012dfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012e10:	eba2 0c0c 	sub.w	ip, r2, ip
 8012e14:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012e18:	e7ef      	b.n	8012dfa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012e1a:	428f      	cmp	r7, r1
 8012e1c:	dcee      	bgt.n	8012dfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012e1e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8012e22:	4461      	add	r1, ip
 8012e24:	b209      	sxth	r1, r1
 8012e26:	4589      	cmp	r9, r1
 8012e28:	dbe8      	blt.n	8012dfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012e2a:	4576      	cmp	r6, lr
 8012e2c:	fa1f fc8e 	uxth.w	ip, lr
 8012e30:	88a1      	ldrh	r1, [r4, #4]
 8012e32:	dc07      	bgt.n	8012e44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8012e34:	eba3 0c0c 	sub.w	ip, r3, ip
 8012e38:	f8a4 8000 	strh.w	r8, [r4]
 8012e3c:	eba1 010c 	sub.w	r1, r1, ip
 8012e40:	80a1      	strh	r1, [r4, #4]
 8012e42:	e7da      	b.n	8012dfa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012e44:	4461      	add	r1, ip
 8012e46:	b209      	sxth	r1, r1
 8012e48:	4588      	cmp	r8, r1
 8012e4a:	dbd7      	blt.n	8012dfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012e4c:	9905      	ldr	r1, [sp, #20]
 8012e4e:	eba1 0c0c 	sub.w	ip, r1, ip
 8012e52:	f8a4 c004 	strh.w	ip, [r4, #4]
 8012e56:	e7d0      	b.n	8012dfa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012e58:	24025136 	.word	0x24025136
 8012e5c:	24025134 	.word	0x24025134
 8012e60:	2d00      	cmp	r5, #0
 8012e62:	f000 816d 	beq.w	8013140 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8012e66:	9b06      	ldr	r3, [sp, #24]
 8012e68:	445b      	add	r3, fp
 8012e6a:	461c      	mov	r4, r3
 8012e6c:	9b02      	ldr	r3, [sp, #8]
 8012e6e:	3301      	adds	r3, #1
 8012e70:	f000 8166 	beq.w	8013140 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8012e74:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8012e78:	9803      	ldr	r0, [sp, #12]
 8012e7a:	4629      	mov	r1, r5
 8012e7c:	f7ff fd3a 	bl	80128f4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8012e80:	b120      	cbz	r0, 8012e8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8012e82:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8012e86:	9801      	ldr	r0, [sp, #4]
 8012e88:	f7ff feb0 	bl	8012bec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012e8c:	9903      	ldr	r1, [sp, #12]
 8012e8e:	4628      	mov	r0, r5
 8012e90:	f7ff fcbd 	bl	801280e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012e94:	2800      	cmp	r0, #0
 8012e96:	f000 809c 	beq.w	8012fd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8012e9a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8012e9e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8012ea2:	fa1f f189 	uxth.w	r1, r9
 8012ea6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8012eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8012eac:	eb01 0c03 	add.w	ip, r1, r3
 8012eb0:	b283      	uxth	r3, r0
 8012eb2:	4548      	cmp	r0, r9
 8012eb4:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8012eb8:	fa1f fa8c 	uxth.w	sl, ip
 8012ebc:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8012ec0:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8012ec4:	eb03 050c 	add.w	r5, r3, ip
 8012ec8:	b2ad      	uxth	r5, r5
 8012eca:	9505      	str	r5, [sp, #20]
 8012ecc:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8012ed0:	9504      	str	r5, [sp, #16]
 8012ed2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8012ed6:	f340 8099 	ble.w	801300c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8012eda:	1a5b      	subs	r3, r3, r1
 8012edc:	4596      	cmp	lr, r2
 8012ede:	fa0f f08a 	sxth.w	r0, sl
 8012ee2:	b29b      	uxth	r3, r3
 8012ee4:	b21e      	sxth	r6, r3
 8012ee6:	dd2e      	ble.n	8012f46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8012ee8:	9f02      	ldr	r7, [sp, #8]
 8012eea:	fa1f fe8e 	uxth.w	lr, lr
 8012eee:	b292      	uxth	r2, r2
 8012ef0:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8012ef4:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8012ef8:	9f04      	ldr	r7, [sp, #16]
 8012efa:	ebae 0102 	sub.w	r1, lr, r2
 8012efe:	44a6      	add	lr, r4
 8012f00:	1a3f      	subs	r7, r7, r0
 8012f02:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8012f06:	b289      	uxth	r1, r1
 8012f08:	4402      	add	r2, r0
 8012f0a:	fa0f fe8e 	sxth.w	lr, lr
 8012f0e:	b20d      	sxth	r5, r1
 8012f10:	b212      	sxth	r2, r2
 8012f12:	436f      	muls	r7, r5
 8012f14:	ebae 0202 	sub.w	r2, lr, r2
 8012f18:	4372      	muls	r2, r6
 8012f1a:	4297      	cmp	r7, r2
 8012f1c:	db09      	blt.n	8012f32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8012f1e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8012f22:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8012f26:	449c      	add	ip, r3
 8012f28:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8012f2c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8012f30:	e686      	b.n	8012c40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012f32:	4421      	add	r1, r4
 8012f34:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8012f38:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8012f3c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012f40:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8012f44:	e67c      	b.n	8012c40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012f46:	9f04      	ldr	r7, [sp, #16]
 8012f48:	42b8      	cmp	r0, r7
 8012f4a:	da27      	bge.n	8012f9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8012f4c:	9902      	ldr	r1, [sp, #8]
 8012f4e:	1a3f      	subs	r7, r7, r0
 8012f50:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8012f54:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8012f58:	eb05 010e 	add.w	r1, r5, lr
 8012f5c:	fa1f f881 	uxth.w	r8, r1
 8012f60:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8012f64:	4411      	add	r1, r2
 8012f66:	fa0f f988 	sxth.w	r9, r8
 8012f6a:	eba2 020e 	sub.w	r2, r2, lr
 8012f6e:	eba1 0108 	sub.w	r1, r1, r8
 8012f72:	4372      	muls	r2, r6
 8012f74:	b289      	uxth	r1, r1
 8012f76:	fa0f f881 	sxth.w	r8, r1
 8012f7a:	fb08 f707 	mul.w	r7, r8, r7
 8012f7e:	42ba      	cmp	r2, r7
 8012f80:	dc06      	bgt.n	8012f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8012f82:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8012f86:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8012f8a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8012f8e:	e7ca      	b.n	8012f26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8012f90:	4429      	add	r1, r5
 8012f92:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8012f96:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012f9a:	e651      	b.n	8012c40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012f9c:	9805      	ldr	r0, [sp, #20]
 8012f9e:	2d06      	cmp	r5, #6
 8012fa0:	ebaa 0000 	sub.w	r0, sl, r0
 8012fa4:	b280      	uxth	r0, r0
 8012fa6:	fa0f fe80 	sxth.w	lr, r0
 8012faa:	d817      	bhi.n	8012fdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8012fac:	9b04      	ldr	r3, [sp, #16]
 8012fae:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8012fb2:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8012fb6:	1c6b      	adds	r3, r5, #1
 8012fb8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8012fbc:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8012fc0:	9b01      	ldr	r3, [sp, #4]
 8012fc2:	9801      	ldr	r0, [sp, #4]
 8012fc4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012fc8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8012fcc:	805a      	strh	r2, [r3, #2]
 8012fce:	809e      	strh	r6, [r3, #4]
 8012fd0:	80d9      	strh	r1, [r3, #6]
 8012fd2:	9b02      	ldr	r3, [sp, #8]
 8012fd4:	3c08      	subs	r4, #8
 8012fd6:	3b01      	subs	r3, #1
 8012fd8:	9302      	str	r3, [sp, #8]
 8012fda:	e747      	b.n	8012e6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8012fdc:	9a02      	ldr	r2, [sp, #8]
 8012fde:	45b6      	cmp	lr, r6
 8012fe0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012fe4:	db0d      	blt.n	8013002 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8012fe6:	449c      	add	ip, r3
 8012fe8:	445a      	add	r2, fp
 8012fea:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8012fee:	fa1f fc8c 	uxth.w	ip, ip
 8012ff2:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8012ff6:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8012ffa:	448c      	add	ip, r1
 8012ffc:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8013000:	e61e      	b.n	8012c40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013002:	445a      	add	r2, fp
 8013004:	4484      	add	ip, r0
 8013006:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801300a:	e78f      	b.n	8012f2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801300c:	fa1f f18e 	uxth.w	r1, lr
 8013010:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8013014:	b293      	uxth	r3, r2
 8013016:	4596      	cmp	lr, r2
 8013018:	eb01 0806 	add.w	r8, r1, r6
 801301c:	9306      	str	r3, [sp, #24]
 801301e:	fa1f f888 	uxth.w	r8, r8
 8013022:	9f06      	ldr	r7, [sp, #24]
 8013024:	fa0f f388 	sxth.w	r3, r8
 8013028:	9307      	str	r3, [sp, #28]
 801302a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801302e:	443b      	add	r3, r7
 8013030:	b29b      	uxth	r3, r3
 8013032:	9308      	str	r3, [sp, #32]
 8013034:	da24      	bge.n	8013080 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8013036:	9905      	ldr	r1, [sp, #20]
 8013038:	eba3 0308 	sub.w	r3, r3, r8
 801303c:	eba2 020e 	sub.w	r2, r2, lr
 8013040:	eba9 0000 	sub.w	r0, r9, r0
 8013044:	ebaa 0401 	sub.w	r4, sl, r1
 8013048:	b29b      	uxth	r3, r3
 801304a:	b2a4      	uxth	r4, r4
 801304c:	b219      	sxth	r1, r3
 801304e:	b225      	sxth	r5, r4
 8013050:	4348      	muls	r0, r1
 8013052:	436a      	muls	r2, r5
 8013054:	4282      	cmp	r2, r0
 8013056:	9a02      	ldr	r2, [sp, #8]
 8013058:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801305c:	445a      	add	r2, fp
 801305e:	dc06      	bgt.n	801306e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8013060:	9b07      	ldr	r3, [sp, #28]
 8013062:	44a4      	add	ip, r4
 8013064:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8013068:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801306c:	e75e      	b.n	8012f2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801306e:	9904      	ldr	r1, [sp, #16]
 8013070:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8013074:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8013078:	4433      	add	r3, r6
 801307a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801307e:	e5df      	b.n	8012c40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013080:	9f06      	ldr	r7, [sp, #24]
 8013082:	9b04      	ldr	r3, [sp, #16]
 8013084:	1bc9      	subs	r1, r1, r7
 8013086:	fa0f f78a 	sxth.w	r7, sl
 801308a:	b289      	uxth	r1, r1
 801308c:	429f      	cmp	r7, r3
 801308e:	fa0f fe81 	sxth.w	lr, r1
 8013092:	dd23      	ble.n	80130dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8013094:	9a05      	ldr	r2, [sp, #20]
 8013096:	eba9 0000 	sub.w	r0, r9, r0
 801309a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801309e:	ebaa 0202 	sub.w	r2, sl, r2
 80130a2:	9d07      	ldr	r5, [sp, #28]
 80130a4:	fb0e f000 	mul.w	r0, lr, r0
 80130a8:	b292      	uxth	r2, r2
 80130aa:	eba5 0a03 	sub.w	sl, r5, r3
 80130ae:	9b02      	ldr	r3, [sp, #8]
 80130b0:	b214      	sxth	r4, r2
 80130b2:	00db      	lsls	r3, r3, #3
 80130b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80130b8:	445b      	add	r3, fp
 80130ba:	4550      	cmp	r0, sl
 80130bc:	db03      	blt.n	80130c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 80130be:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 80130c2:	4494      	add	ip, r2
 80130c4:	e732      	b.n	8012f2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80130c6:	9a04      	ldr	r2, [sp, #16]
 80130c8:	4431      	add	r1, r6
 80130ca:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 80130ce:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 80130d2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 80130d6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80130da:	e75c      	b.n	8012f96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 80130dc:	9b08      	ldr	r3, [sp, #32]
 80130de:	2d06      	cmp	r5, #6
 80130e0:	eba3 0308 	sub.w	r3, r3, r8
 80130e4:	b29b      	uxth	r3, r3
 80130e6:	b218      	sxth	r0, r3
 80130e8:	d813      	bhi.n	8013112 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 80130ea:	9b07      	ldr	r3, [sp, #28]
 80130ec:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 80130f0:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 80130f4:	1c6b      	adds	r3, r5, #1
 80130f6:	9901      	ldr	r1, [sp, #4]
 80130f8:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 80130fc:	9b01      	ldr	r3, [sp, #4]
 80130fe:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8013102:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013106:	805a      	strh	r2, [r3, #2]
 8013108:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801310a:	f8a3 e006 	strh.w	lr, [r3, #6]
 801310e:	809a      	strh	r2, [r3, #4]
 8013110:	e75f      	b.n	8012fd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8013112:	9c02      	ldr	r4, [sp, #8]
 8013114:	4570      	cmp	r0, lr
 8013116:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801311a:	db0d      	blt.n	8013138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801311c:	4431      	add	r1, r6
 801311e:	9b06      	ldr	r3, [sp, #24]
 8013120:	445c      	add	r4, fp
 8013122:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8013126:	b289      	uxth	r1, r1
 8013128:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801312c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8013130:	4419      	add	r1, r3
 8013132:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8013136:	e583      	b.n	8012c40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013138:	445c      	add	r4, fp
 801313a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801313e:	e79b      	b.n	8013078 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8013140:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8013144:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8013148:	1e65      	subs	r5, r4, #1
 801314a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801314e:	b2ad      	uxth	r5, r5
 8013150:	42b5      	cmp	r5, r6
 8013152:	d044      	beq.n	80131de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8013154:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8013158:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801315c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8013160:	4282      	cmp	r2, r0
 8013162:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8013166:	d11f      	bne.n	80131a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8013168:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801316c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8013170:	459c      	cmp	ip, r3
 8013172:	d119      	bne.n	80131a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8013174:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8013178:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801317c:	19d8      	adds	r0, r3, r7
 801317e:	b200      	sxth	r0, r0
 8013180:	4288      	cmp	r0, r1
 8013182:	d109      	bne.n	8013198 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8013184:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8013188:	4413      	add	r3, r2
 801318a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801318e:	4629      	mov	r1, r5
 8013190:	9801      	ldr	r0, [sp, #4]
 8013192:	f7ff fd2b 	bl	8012bec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013196:	e003      	b.n	80131a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8013198:	4411      	add	r1, r2
 801319a:	b209      	sxth	r1, r1
 801319c:	42b9      	cmp	r1, r7
 801319e:	d0f3      	beq.n	8013188 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 80131a0:	3d01      	subs	r5, #1
 80131a2:	3c08      	subs	r4, #8
 80131a4:	b2ad      	uxth	r5, r5
 80131a6:	e7d3      	b.n	8013150 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 80131a8:	42b9      	cmp	r1, r7
 80131aa:	d1f9      	bne.n	80131a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80131ac:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 80131b0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80131b4:	4299      	cmp	r1, r3
 80131b6:	d1f3      	bne.n	80131a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80131b8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80131bc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80131c0:	181f      	adds	r7, r3, r0
 80131c2:	b23f      	sxth	r7, r7
 80131c4:	42ba      	cmp	r2, r7
 80131c6:	d105      	bne.n	80131d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 80131c8:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 80131cc:	440b      	add	r3, r1
 80131ce:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80131d2:	e7dc      	b.n	801318e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 80131d4:	440a      	add	r2, r1
 80131d6:	b212      	sxth	r2, r2
 80131d8:	4290      	cmp	r0, r2
 80131da:	d1e1      	bne.n	80131a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80131dc:	e7f6      	b.n	80131cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 80131de:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 80131e2:	2e07      	cmp	r6, #7
 80131e4:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80131e8:	d812      	bhi.n	8013210 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 80131ea:	1c75      	adds	r5, r6, #1
 80131ec:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 80131f0:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 80131f4:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 80131f8:	9d01      	ldr	r5, [sp, #4]
 80131fa:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80131fe:	442c      	add	r4, r5
 8013200:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8013204:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8013208:	8061      	strh	r1, [r4, #2]
 801320a:	80a2      	strh	r2, [r4, #4]
 801320c:	80e3      	strh	r3, [r4, #6]
 801320e:	e581      	b.n	8012d14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013210:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8013214:	3e01      	subs	r6, #1
 8013216:	445c      	add	r4, fp
 8013218:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801321c:	f04f 37ff 	mov.w	r7, #4294967295
 8013220:	2500      	movs	r5, #0
 8013222:	9305      	str	r3, [sp, #20]
 8013224:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8013228:	1e72      	subs	r2, r6, #1
 801322a:	9302      	str	r3, [sp, #8]
 801322c:	4691      	mov	r9, r2
 801322e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8013232:	9304      	str	r3, [sp, #16]
 8013234:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8013238:	f1b9 3fff 	cmp.w	r9, #4294967295
 801323c:	6818      	ldr	r0, [r3, #0]
 801323e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8013242:	9207      	str	r2, [sp, #28]
 8013244:	bf16      	itet	ne
 8013246:	9905      	ldrne	r1, [sp, #20]
 8013248:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801324c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8013250:	9306      	str	r3, [sp, #24]
 8013252:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8013256:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801325a:	fb18 f801 	smulbb	r8, r8, r1
 801325e:	6859      	ldr	r1, [r3, #4]
 8013260:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013264:	4671      	mov	r1, lr
 8013266:	a80c      	add	r0, sp, #48	@ 0x30
 8013268:	f7ff fb6a 	bl	8012940 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801326c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8013270:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8013274:	f04f 0c08 	mov.w	ip, #8
 8013278:	9b04      	ldr	r3, [sp, #16]
 801327a:	9a02      	ldr	r2, [sp, #8]
 801327c:	fb10 f001 	smulbb	r0, r0, r1
 8013280:	fb02 8803 	mla	r8, r2, r3, r8
 8013284:	eba0 0108 	sub.w	r1, r0, r8
 8013288:	fb90 f0fc 	sdiv	r0, r0, ip
 801328c:	4288      	cmp	r0, r1
 801328e:	dc20      	bgt.n	80132d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8013290:	4551      	cmp	r1, sl
 8013292:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013296:	da03      	bge.n	80132a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8013298:	b1d9      	cbz	r1, 80132d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801329a:	468a      	mov	sl, r1
 801329c:	464f      	mov	r7, r9
 801329e:	4635      	mov	r5, r6
 80132a0:	f109 39ff 	add.w	r9, r9, #4294967295
 80132a4:	f119 0f02 	cmn.w	r9, #2
 80132a8:	d1c6      	bne.n	8013238 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 80132aa:	4616      	mov	r6, r2
 80132ac:	3201      	adds	r2, #1
 80132ae:	f1a4 0408 	sub.w	r4, r4, #8
 80132b2:	d1b7      	bne.n	8013224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 80132b4:	9b01      	ldr	r3, [sp, #4]
 80132b6:	b2ac      	uxth	r4, r5
 80132b8:	00ed      	lsls	r5, r5, #3
 80132ba:	1958      	adds	r0, r3, r5
 80132bc:	1c7b      	adds	r3, r7, #1
 80132be:	d10b      	bne.n	80132d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 80132c0:	4601      	mov	r1, r0
 80132c2:	9803      	ldr	r0, [sp, #12]
 80132c4:	f7ff fb3c 	bl	8012940 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80132c8:	4621      	mov	r1, r4
 80132ca:	9801      	ldr	r0, [sp, #4]
 80132cc:	f7ff fc8e 	bl	8012bec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80132d0:	e4b6      	b.n	8012c40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80132d2:	464f      	mov	r7, r9
 80132d4:	4635      	mov	r5, r6
 80132d6:	e7ed      	b.n	80132b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 80132d8:	9b01      	ldr	r3, [sp, #4]
 80132da:	00ff      	lsls	r7, r7, #3
 80132dc:	445d      	add	r5, fp
 80132de:	19d9      	adds	r1, r3, r7
 80132e0:	445f      	add	r7, fp
 80132e2:	f7ff fb2d 	bl	8012940 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80132e6:	9b03      	ldr	r3, [sp, #12]
 80132e8:	cb03      	ldmia	r3!, {r0, r1}
 80132ea:	9b03      	ldr	r3, [sp, #12]
 80132ec:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 80132f0:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 80132f4:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80132f8:	6869      	ldr	r1, [r5, #4]
 80132fa:	c303      	stmia	r3!, {r0, r1}
 80132fc:	e7e4      	b.n	80132c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 80132fe:	bf00      	nop

08013300 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8013300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013304:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8013308:	b09b      	sub	sp, #108	@ 0x6c
 801330a:	4604      	mov	r4, r0
 801330c:	4630      	mov	r0, r6
 801330e:	f7fa faba 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013312:	4605      	mov	r5, r0
 8013314:	b948      	cbnz	r0, 801332a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8013316:	6823      	ldr	r3, [r4, #0]
 8013318:	4620      	mov	r0, r4
 801331a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801331c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8013320:	4798      	blx	r3
 8013322:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8013326:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801332a:	4bc5      	ldr	r3, [pc, #788]	@ (8013640 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d03f      	beq.n	80133b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8013332:	4dc4      	ldr	r5, [pc, #784]	@ (8013644 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8013334:	4628      	mov	r0, r5
 8013336:	f7fa faa6 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 801333a:	4606      	mov	r6, r0
 801333c:	2800      	cmp	r0, #0
 801333e:	d138      	bne.n	80133b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8013340:	4628      	mov	r0, r5
 8013342:	f7ff f991 	bl	8012668 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8013346:	6823      	ldr	r3, [r4, #0]
 8013348:	6829      	ldr	r1, [r5, #0]
 801334a:	4620      	mov	r0, r4
 801334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801334e:	686a      	ldr	r2, [r5, #4]
 8013350:	4798      	blx	r3
 8013352:	802e      	strh	r6, [r5, #0]
 8013354:	806e      	strh	r6, [r5, #2]
 8013356:	80ae      	strh	r6, [r5, #4]
 8013358:	80ee      	strh	r6, [r5, #6]
 801335a:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801335e:	4dba      	ldr	r5, [pc, #744]	@ (8013648 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8013360:	4640      	mov	r0, r8
 8013362:	f7ff fbe7 	bl	8012b34 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013366:	882e      	ldrh	r6, [r5, #0]
 8013368:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801336c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8013370:	4633      	mov	r3, r6
 8013372:	42bb      	cmp	r3, r7
 8013374:	d224      	bcs.n	80133c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8013376:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801337a:	2907      	cmp	r1, #7
 801337c:	d816      	bhi.n	80133ac <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801337e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8013382:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8013386:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801338a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801338e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8013392:	1c4a      	adds	r2, r1, #1
 8013394:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8013398:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801339c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 80133a0:	f8a2 a002 	strh.w	sl, [r2, #2]
 80133a4:	f8a2 e004 	strh.w	lr, [r2, #4]
 80133a8:	f8a2 c006 	strh.w	ip, [r2, #6]
 80133ac:	3301      	adds	r3, #1
 80133ae:	b29b      	uxth	r3, r3
 80133b0:	e7df      	b.n	8013372 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 80133b2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d1cf      	bne.n	801335a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 80133ba:	b01b      	add	sp, #108	@ 0x6c
 80133bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133c0:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 80133c4:	42b3      	cmp	r3, r6
 80133c6:	d90c      	bls.n	80133e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 80133c8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80133cc:	6822      	ldr	r2, [r4, #0]
 80133ce:	3601      	adds	r6, #1
 80133d0:	4620      	mov	r0, r4
 80133d2:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 80133d4:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 80133d8:	b2b6      	uxth	r6, r6
 80133da:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 80133de:	47b8      	blx	r7
 80133e0:	e7ee      	b.n	80133c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80133e2:	4a9a      	ldr	r2, [pc, #616]	@ (801364c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80133e4:	6813      	ldr	r3, [r2, #0]
 80133e6:	4691      	mov	r9, r2
 80133e8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	f040 80e0 	bne.w	80135b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 80133f2:	8829      	ldrh	r1, [r5, #0]
 80133f4:	2600      	movs	r6, #0
 80133f6:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 80133fa:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80133fe:	33ae      	adds	r3, #174	@ 0xae
 8013400:	428f      	cmp	r7, r1
 8013402:	f103 0308 	add.w	r3, r3, #8
 8013406:	dd0a      	ble.n	801341e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8013408:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801340c:	3101      	adds	r1, #1
 801340e:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8013412:	4402      	add	r2, r0
 8013414:	b212      	sxth	r2, r2
 8013416:	4296      	cmp	r6, r2
 8013418:	bfb8      	it	lt
 801341a:	4616      	movlt	r6, r2
 801341c:	e7f0      	b.n	8013400 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801341e:	4b8c      	ldr	r3, [pc, #560]	@ (8013650 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8013420:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 801364c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8013424:	881b      	ldrh	r3, [r3, #0]
 8013426:	2b0f      	cmp	r3, #15
 8013428:	bf8c      	ite	hi
 801342a:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801342e:	f04f 0b01 	movls.w	fp, #1
 8013432:	2300      	movs	r3, #0
 8013434:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8013438:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801343c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8013440:	4b82      	ldr	r3, [pc, #520]	@ (801364c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8013442:	4438      	add	r0, r7
 8013444:	b207      	sxth	r7, r0
 8013446:	6818      	ldr	r0, [r3, #0]
 8013448:	42b7      	cmp	r7, r6
 801344a:	6803      	ldr	r3, [r0, #0]
 801344c:	f280 8083 	bge.w	8013556 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8013450:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013454:	4798      	blx	r3
 8013456:	eb07 030b 	add.w	r3, r7, fp
 801345a:	4298      	cmp	r0, r3
 801345c:	da07      	bge.n	801346e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801345e:	42b0      	cmp	r0, r6
 8013460:	da05      	bge.n	801346e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8013462:	4287      	cmp	r7, r0
 8013464:	dd6c      	ble.n	8013540 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8013466:	2f00      	cmp	r7, #0
 8013468:	dd6a      	ble.n	8013540 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801346a:	4630      	mov	r0, r6
 801346c:	e004      	b.n	8013478 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801346e:	4287      	cmp	r7, r0
 8013470:	dcfb      	bgt.n	801346a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 8013472:	42b0      	cmp	r0, r6
 8013474:	bfa8      	it	ge
 8013476:	4630      	movge	r0, r6
 8013478:	4b76      	ldr	r3, [pc, #472]	@ (8013654 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801347a:	1bc0      	subs	r0, r0, r7
 801347c:	2200      	movs	r2, #0
 801347e:	f8ad 7016 	strh.w	r7, [sp, #22]
 8013482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013486:	882f      	ldrh	r7, [r5, #0]
 8013488:	f8ad 2014 	strh.w	r2, [sp, #20]
 801348c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013490:	f8ad 001a 	strh.w	r0, [sp, #26]
 8013494:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8013498:	42bb      	cmp	r3, r7
 801349a:	d9cd      	bls.n	8013438 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801349c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80134a0:	ab07      	add	r3, sp, #28
 80134a2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80134a6:	6851      	ldr	r1, [r2, #4]
 80134a8:	c303      	stmia	r3!, {r0, r1}
 80134aa:	a905      	add	r1, sp, #20
 80134ac:	a807      	add	r0, sp, #28
 80134ae:	f7ff f9ae 	bl	801280e <_ZNK8touchgfx4Rect9intersectERKS0_>
 80134b2:	2800      	cmp	r0, #0
 80134b4:	d04c      	beq.n	8013550 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 80134b6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80134ba:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80134be:	f8bd a020 	ldrh.w	sl, [sp, #32]
 80134c2:	4686      	mov	lr, r0
 80134c4:	4290      	cmp	r0, r2
 80134c6:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80134ca:	4450      	add	r0, sl
 80134cc:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80134d0:	bfb8      	it	lt
 80134d2:	4696      	movlt	lr, r2
 80134d4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80134d8:	4452      	add	r2, sl
 80134da:	b280      	uxth	r0, r0
 80134dc:	4299      	cmp	r1, r3
 80134de:	468c      	mov	ip, r1
 80134e0:	b292      	uxth	r2, r2
 80134e2:	9302      	str	r3, [sp, #8]
 80134e4:	bfb8      	it	lt
 80134e6:	469c      	movlt	ip, r3
 80134e8:	b203      	sxth	r3, r0
 80134ea:	fa0f fa82 	sxth.w	sl, r2
 80134ee:	f8ad e01c 	strh.w	lr, [sp, #28]
 80134f2:	f8ad c01e 	strh.w	ip, [sp, #30]
 80134f6:	4553      	cmp	r3, sl
 80134f8:	bfb8      	it	lt
 80134fa:	4602      	movlt	r2, r0
 80134fc:	9b02      	ldr	r3, [sp, #8]
 80134fe:	eba2 020e 	sub.w	r2, r2, lr
 8013502:	f8ad 2020 	strh.w	r2, [sp, #32]
 8013506:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801350a:	4411      	add	r1, r2
 801350c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8013510:	4413      	add	r3, r2
 8013512:	b289      	uxth	r1, r1
 8013514:	b29b      	uxth	r3, r3
 8013516:	b208      	sxth	r0, r1
 8013518:	b21a      	sxth	r2, r3
 801351a:	4290      	cmp	r0, r2
 801351c:	bfb8      	it	lt
 801351e:	460b      	movlt	r3, r1
 8013520:	eba3 030c 	sub.w	r3, r3, ip
 8013524:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013528:	a807      	add	r0, sp, #28
 801352a:	f7fa f9ac 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 801352e:	b920      	cbnz	r0, 801353a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8013530:	6823      	ldr	r3, [r4, #0]
 8013532:	a907      	add	r1, sp, #28
 8013534:	4620      	mov	r0, r4
 8013536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013538:	4798      	blx	r3
 801353a:	3701      	adds	r7, #1
 801353c:	b2bf      	uxth	r7, r7
 801353e:	e7a9      	b.n	8013494 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8013540:	f8d9 0000 	ldr.w	r0, [r9]
 8013544:	2101      	movs	r1, #1
 8013546:	6803      	ldr	r3, [r0, #0]
 8013548:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801354c:	4798      	blx	r3
 801354e:	e773      	b.n	8013438 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8013550:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8013554:	e7e8      	b.n	8013528 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8013556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013558:	4798      	blx	r3
 801355a:	4b3f      	ldr	r3, [pc, #252]	@ (8013658 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801355c:	781b      	ldrb	r3, [r3, #0]
 801355e:	2b00      	cmp	r3, #0
 8013560:	f43f af2b 	beq.w	80133ba <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8013564:	2300      	movs	r3, #0
 8013566:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801356a:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801356e:	882b      	ldrh	r3, [r5, #0]
 8013570:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8013574:	42ab      	cmp	r3, r5
 8013576:	f4bf af20 	bcs.w	80133ba <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801357a:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801357e:	2907      	cmp	r1, #7
 8013580:	d814      	bhi.n	80135ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 8013582:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8013586:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801358a:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801358e:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8013592:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8013596:	1c4a      	adds	r2, r1, #1
 8013598:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801359c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80135a0:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 80135a4:	f8a2 c002 	strh.w	ip, [r2, #2]
 80135a8:	8097      	strh	r7, [r2, #4]
 80135aa:	80d6      	strh	r6, [r2, #6]
 80135ac:	3301      	adds	r3, #1
 80135ae:	b29b      	uxth	r3, r3
 80135b0:	e7e0      	b.n	8013574 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 80135b2:	2b02      	cmp	r3, #2
 80135b4:	f040 8133 	bne.w	801381e <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 80135b8:	4b28      	ldr	r3, [pc, #160]	@ (801365c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80135ba:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	2b01      	cmp	r3, #1
 80135c2:	f000 8098 	beq.w	80136f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80135c6:	882a      	ldrh	r2, [r5, #0]
 80135c8:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 80135cc:	3201      	adds	r2, #1
 80135ce:	b292      	uxth	r2, r2
 80135d0:	2900      	cmp	r1, #0
 80135d2:	d0c2      	beq.n	801355a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80135d4:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 80135d8:	4694      	mov	ip, r2
 80135da:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 80135de:	f04f 0900 	mov.w	r9, #0
 80135e2:	441e      	add	r6, r3
 80135e4:	b236      	sxth	r6, r6
 80135e6:	fa1f f38c 	uxth.w	r3, ip
 80135ea:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 80135ee:	4299      	cmp	r1, r3
 80135f0:	f240 80be 	bls.w	8013770 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 80135f4:	4427      	add	r7, r4
 80135f6:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 80135fa:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 80135fe:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8013602:	4283      	cmp	r3, r0
 8013604:	f340 80a0 	ble.w	8013748 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8013608:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801360c:	46e1      	mov	r9, ip
 801360e:	4406      	add	r6, r0
 8013610:	b236      	sxth	r6, r6
 8013612:	429e      	cmp	r6, r3
 8013614:	bfa8      	it	ge
 8013616:	461e      	movge	r6, r3
 8013618:	f10c 0c01 	add.w	ip, ip, #1
 801361c:	e7e3      	b.n	80135e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801361e:	d10a      	bne.n	8013636 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8013620:	4562      	cmp	r2, ip
 8013622:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 8013626:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801362a:	bfb8      	it	lt
 801362c:	4662      	movlt	r2, ip
 801362e:	4288      	cmp	r0, r1
 8013630:	bfb8      	it	lt
 8013632:	461f      	movlt	r7, r3
 8013634:	e086      	b.n	8013744 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8013636:	428a      	cmp	r2, r1
 8013638:	bfb8      	it	lt
 801363a:	460a      	movlt	r2, r1
 801363c:	e082      	b.n	8013744 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801363e:	bf00      	nop
 8013640:	24025180 	.word	0x24025180
 8013644:	2402518c 	.word	0x2402518c
 8013648:	2400007c 	.word	0x2400007c
 801364c:	24025140 	.word	0x24025140
 8013650:	24025136 	.word	0x24025136
 8013654:	24025134 	.word	0x24025134
 8013658:	2402513e 	.word	0x2402513e
 801365c:	24025138 	.word	0x24025138
 8013660:	19a1      	adds	r1, r4, r6
 8013662:	ab07      	add	r3, sp, #28
 8013664:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8013668:	6849      	ldr	r1, [r1, #4]
 801366a:	c303      	stmia	r3!, {r0, r1}
 801366c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8013670:	a807      	add	r0, sp, #28
 8013672:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013676:	2b13      	cmp	r3, #19
 8013678:	440b      	add	r3, r1
 801367a:	bfd8      	it	le
 801367c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8013680:	1a9b      	subs	r3, r3, r2
 8013682:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013686:	f8ad 3020 	strh.w	r3, [sp, #32]
 801368a:	f7ff f807 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801368e:	a807      	add	r0, sp, #28
 8013690:	f7fa f8f9 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013694:	bb78      	cbnz	r0, 80136f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8013696:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801369a:	4426      	add	r6, r4
 801369c:	f8d9 0000 	ldr.w	r0, [r9]
 80136a0:	f1bc 0f14 	cmp.w	ip, #20
 80136a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80136a8:	f8d0 e000 	ldr.w	lr, [r0]
 80136ac:	bfa8      	it	ge
 80136ae:	f04f 0c14 	movge.w	ip, #20
 80136b2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80136b6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80136ba:	fa1f fc8c 	uxth.w	ip, ip
 80136be:	f8cd c000 	str.w	ip, [sp]
 80136c2:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 80136c6:	47d8      	blx	fp
 80136c8:	4683      	mov	fp, r0
 80136ca:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80136ce:	a807      	add	r0, sp, #28
 80136d0:	f7fe ffca 	bl	8012668 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80136d4:	6823      	ldr	r3, [r4, #0]
 80136d6:	4620      	mov	r0, r4
 80136d8:	a907      	add	r1, sp, #28
 80136da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80136dc:	4798      	blx	r3
 80136de:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80136e2:	eba0 000b 	sub.w	r0, r0, fp
 80136e6:	b200      	sxth	r0, r0
 80136e8:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 80136ec:	b918      	cbnz	r0, 80136f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80136ee:	b2b9      	uxth	r1, r7
 80136f0:	4650      	mov	r0, sl
 80136f2:	f7ff fa7b 	bl	8012bec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80136f6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 80136fa:	f1bb 0f00 	cmp.w	fp, #0
 80136fe:	f43f af2c 	beq.w	801355a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8013702:	882b      	ldrh	r3, [r5, #0]
 8013704:	2700      	movs	r7, #0
 8013706:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801370a:	3301      	adds	r3, #1
 801370c:	b29b      	uxth	r3, r3
 801370e:	b299      	uxth	r1, r3
 8013710:	00fe      	lsls	r6, r7, #3
 8013712:	458b      	cmp	fp, r1
 8013714:	d9a4      	bls.n	8013660 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8013716:	4426      	add	r6, r4
 8013718:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801371c:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 8013720:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8013724:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8013728:	4408      	add	r0, r1
 801372a:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801372e:	4461      	add	r1, ip
 8013730:	b200      	sxth	r0, r0
 8013732:	b209      	sxth	r1, r1
 8013734:	4288      	cmp	r0, r1
 8013736:	f6bf af72 	bge.w	801361e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801373a:	4584      	cmp	ip, r0
 801373c:	4662      	mov	r2, ip
 801373e:	461f      	mov	r7, r3
 8013740:	bfb8      	it	lt
 8013742:	4602      	movlt	r2, r0
 8013744:	3301      	adds	r3, #1
 8013746:	e7e2      	b.n	801370e <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8013748:	d10e      	bne.n	8013768 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801374a:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801374e:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8013752:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8013756:	4473      	add	r3, lr
 8013758:	b21b      	sxth	r3, r3
 801375a:	429e      	cmp	r6, r3
 801375c:	bfa8      	it	ge
 801375e:	461e      	movge	r6, r3
 8013760:	4287      	cmp	r7, r0
 8013762:	bfb8      	it	lt
 8013764:	46e1      	movlt	r9, ip
 8013766:	e757      	b.n	8013618 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8013768:	4286      	cmp	r6, r0
 801376a:	bfa8      	it	ge
 801376c:	4606      	movge	r6, r0
 801376e:	e753      	b.n	8013618 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8013770:	eb0a 0007 	add.w	r0, sl, r7
 8013774:	4427      	add	r7, r4
 8013776:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801377a:	f1bb 0f13 	cmp.w	fp, #19
 801377e:	bfdc      	itt	le
 8013780:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 8013784:	445e      	addle	r6, fp
 8013786:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801378a:	bfd8      	it	le
 801378c:	b236      	sxthle	r6, r6
 801378e:	f7fa f87a 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013792:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013796:	2800      	cmp	r0, #0
 8013798:	f47f af1a 	bne.w	80135d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801379c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80137a0:	fa1f fb8b 	uxth.w	fp, fp
 80137a4:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80137a8:	1ab6      	subs	r6, r6, r2
 80137aa:	4829      	ldr	r0, [pc, #164]	@ (8013850 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 80137ac:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 80137b0:	2e14      	cmp	r6, #20
 80137b2:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80137b6:	6800      	ldr	r0, [r0, #0]
 80137b8:	bfa8      	it	ge
 80137ba:	2614      	movge	r6, #20
 80137bc:	f8ad 101c 	strh.w	r1, [sp, #28]
 80137c0:	f8ad 201e 	strh.w	r2, [sp, #30]
 80137c4:	b289      	uxth	r1, r1
 80137c6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80137ca:	b2b6      	uxth	r6, r6
 80137cc:	f8d0 c000 	ldr.w	ip, [r0]
 80137d0:	b292      	uxth	r2, r2
 80137d2:	455e      	cmp	r6, fp
 80137d4:	bf94      	ite	ls
 80137d6:	9600      	strls	r6, [sp, #0]
 80137d8:	f8cd b000 	strhi.w	fp, [sp]
 80137dc:	b29b      	uxth	r3, r3
 80137de:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 80137e2:	47b0      	blx	r6
 80137e4:	6823      	ldr	r3, [r4, #0]
 80137e6:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80137ea:	a907      	add	r1, sp, #28
 80137ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80137ee:	4620      	mov	r0, r4
 80137f0:	4798      	blx	r3
 80137f2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80137f6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80137fa:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 80137fe:	1a5b      	subs	r3, r3, r1
 8013800:	440a      	add	r2, r1
 8013802:	b21b      	sxth	r3, r3
 8013804:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8013808:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801380c:	2b00      	cmp	r3, #0
 801380e:	f47f aeda 	bne.w	80135c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8013812:	fa1f f189 	uxth.w	r1, r9
 8013816:	4650      	mov	r0, sl
 8013818:	f7ff f9e8 	bl	8012bec <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801381c:	e6d3      	b.n	80135c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801381e:	882e      	ldrh	r6, [r5, #0]
 8013820:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8013824:	42b3      	cmp	r3, r6
 8013826:	f67f ae98 	bls.w	801355a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801382a:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801382e:	ab07      	add	r3, sp, #28
 8013830:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8013834:	6851      	ldr	r1, [r2, #4]
 8013836:	c303      	stmia	r3!, {r0, r1}
 8013838:	a807      	add	r0, sp, #28
 801383a:	f7fa f824 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 801383e:	b920      	cbnz	r0, 801384a <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8013840:	6823      	ldr	r3, [r4, #0]
 8013842:	a907      	add	r1, sp, #28
 8013844:	4620      	mov	r0, r4
 8013846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013848:	4798      	blx	r3
 801384a:	3601      	adds	r6, #1
 801384c:	b2b6      	uxth	r6, r6
 801384e:	e7e7      	b.n	8013820 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8013850:	24025140 	.word	0x24025140

08013854 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8013854:	4b03      	ldr	r3, [pc, #12]	@ (8013864 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8013856:	2200      	movs	r2, #0
 8013858:	801a      	strh	r2, [r3, #0]
 801385a:	805a      	strh	r2, [r3, #2]
 801385c:	809a      	strh	r2, [r3, #4]
 801385e:	80da      	strh	r2, [r3, #6]
 8013860:	4770      	bx	lr
 8013862:	bf00      	nop
 8013864:	2402518c 	.word	0x2402518c

08013868 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8013868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801386c:	b09d      	sub	sp, #116	@ 0x74
 801386e:	4606      	mov	r6, r0
 8013870:	4614      	mov	r4, r2
 8013872:	468a      	mov	sl, r1
 8013874:	a803      	add	r0, sp, #12
 8013876:	461d      	mov	r5, r3
 8013878:	f001 f89e 	bl	80149b8 <_ZN8touchgfx12TextProviderC1Ev>
 801387c:	6833      	ldr	r3, [r6, #0]
 801387e:	4630      	mov	r0, r6
 8013880:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8013884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013886:	4798      	blx	r3
 8013888:	6833      	ldr	r3, [r6, #0]
 801388a:	4607      	mov	r7, r0
 801388c:	4630      	mov	r0, r6
 801388e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013890:	4798      	blx	r3
 8013892:	462a      	mov	r2, r5
 8013894:	2500      	movs	r5, #0
 8013896:	4621      	mov	r1, r4
 8013898:	9000      	str	r0, [sp, #0]
 801389a:	463b      	mov	r3, r7
 801389c:	462c      	mov	r4, r5
 801389e:	46a9      	mov	r9, r5
 80138a0:	46a8      	mov	r8, r5
 80138a2:	a803      	add	r0, sp, #12
 80138a4:	f001 f8db 	bl	8014a5e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80138a8:	2300      	movs	r3, #0
 80138aa:	9302      	str	r3, [sp, #8]
 80138ac:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80138b0:	429c      	cmp	r4, r3
 80138b2:	d002      	beq.n	80138ba <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80138b4:	455c      	cmp	r4, fp
 80138b6:	bf18      	it	ne
 80138b8:	4625      	movne	r5, r4
 80138ba:	ab02      	add	r3, sp, #8
 80138bc:	4632      	mov	r2, r6
 80138be:	4651      	mov	r1, sl
 80138c0:	a803      	add	r0, sp, #12
 80138c2:	f001 fbc1 	bl	8015048 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80138c6:	4604      	mov	r4, r0
 80138c8:	b108      	cbz	r0, 80138ce <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80138ca:	280a      	cmp	r0, #10
 80138cc:	d10a      	bne.n	80138e4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80138ce:	45c1      	cmp	r9, r8
 80138d0:	bf38      	it	cc
 80138d2:	46c1      	movcc	r9, r8
 80138d4:	f04f 0800 	mov.w	r8, #0
 80138d8:	2c00      	cmp	r4, #0
 80138da:	d1e5      	bne.n	80138a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80138dc:	4648      	mov	r0, r9
 80138de:	b01d      	add	sp, #116	@ 0x74
 80138e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e4:	9a02      	ldr	r2, [sp, #8]
 80138e6:	2a00      	cmp	r2, #0
 80138e8:	d0de      	beq.n	80138a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80138ea:	7b57      	ldrb	r7, [r2, #13]
 80138ec:	4629      	mov	r1, r5
 80138ee:	6833      	ldr	r3, [r6, #0]
 80138f0:	007f      	lsls	r7, r7, #1
 80138f2:	8894      	ldrh	r4, [r2, #4]
 80138f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138f6:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 80138fa:	7a97      	ldrb	r7, [r2, #10]
 80138fc:	4307      	orrs	r7, r0
 80138fe:	4630      	mov	r0, r6
 8013900:	4798      	blx	r3
 8013902:	4438      	add	r0, r7
 8013904:	4480      	add	r8, r0
 8013906:	fa1f f888 	uxth.w	r8, r8
 801390a:	e7e5      	b.n	80138d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801390c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801390c:	b508      	push	{r3, lr}
 801390e:	6803      	ldr	r3, [r0, #0]
 8013910:	68db      	ldr	r3, [r3, #12]
 8013912:	4798      	blx	r3
 8013914:	b128      	cbz	r0, 8013922 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8013916:	7b43      	ldrb	r3, [r0, #13]
 8013918:	7a80      	ldrb	r0, [r0, #10]
 801391a:	005b      	lsls	r3, r3, #1
 801391c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013920:	4318      	orrs	r0, r3
 8013922:	bd08      	pop	{r3, pc}

08013924 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8013924:	b40e      	push	{r1, r2, r3}
 8013926:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013928:	b09e      	sub	sp, #120	@ 0x78
 801392a:	4605      	mov	r5, r0
 801392c:	ab23      	add	r3, sp, #140	@ 0x8c
 801392e:	a805      	add	r0, sp, #20
 8013930:	f853 4b04 	ldr.w	r4, [r3], #4
 8013934:	9303      	str	r3, [sp, #12]
 8013936:	f001 f83f 	bl	80149b8 <_ZN8touchgfx12TextProviderC1Ev>
 801393a:	682b      	ldr	r3, [r5, #0]
 801393c:	4628      	mov	r0, r5
 801393e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013940:	4798      	blx	r3
 8013942:	682b      	ldr	r3, [r5, #0]
 8013944:	4606      	mov	r6, r0
 8013946:	4628      	mov	r0, r5
 8013948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801394a:	4798      	blx	r3
 801394c:	4633      	mov	r3, r6
 801394e:	4621      	mov	r1, r4
 8013950:	ae1e      	add	r6, sp, #120	@ 0x78
 8013952:	2400      	movs	r4, #0
 8013954:	9000      	str	r0, [sp, #0]
 8013956:	9a03      	ldr	r2, [sp, #12]
 8013958:	a805      	add	r0, sp, #20
 801395a:	f001 f880 	bl	8014a5e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801395e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8013962:	462a      	mov	r2, r5
 8013964:	4633      	mov	r3, r6
 8013966:	4621      	mov	r1, r4
 8013968:	a805      	add	r0, sp, #20
 801396a:	f001 fb6d 	bl	8015048 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801396e:	b300      	cbz	r0, 80139b2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8013970:	280a      	cmp	r0, #10
 8013972:	d01a      	beq.n	80139aa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8013974:	9f04      	ldr	r7, [sp, #16]
 8013976:	b1c7      	cbz	r7, 80139aa <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8013978:	7b78      	ldrb	r0, [r7, #13]
 801397a:	7a3b      	ldrb	r3, [r7, #8]
 801397c:	00c1      	lsls	r1, r0, #3
 801397e:	88ea      	ldrh	r2, [r5, #6]
 8013980:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8013984:	4319      	orrs	r1, r3
 8013986:	0643      	lsls	r3, r0, #25
 8013988:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801398c:	bf48      	it	mi
 801398e:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8013992:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8013996:	bf48      	it	mi
 8013998:	b219      	sxthmi	r1, r3
 801399a:	79fb      	ldrb	r3, [r7, #7]
 801399c:	4303      	orrs	r3, r0
 801399e:	4413      	add	r3, r2
 80139a0:	1a5b      	subs	r3, r3, r1
 80139a2:	b21b      	sxth	r3, r3
 80139a4:	429c      	cmp	r4, r3
 80139a6:	bfb8      	it	lt
 80139a8:	461c      	movlt	r4, r3
 80139aa:	4633      	mov	r3, r6
 80139ac:	462a      	mov	r2, r5
 80139ae:	2100      	movs	r1, #0
 80139b0:	e7da      	b.n	8013968 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80139b2:	b2a0      	uxth	r0, r4
 80139b4:	b01e      	add	sp, #120	@ 0x78
 80139b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80139ba:	b003      	add	sp, #12
 80139bc:	4770      	bx	lr

080139be <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80139be:	7a43      	ldrb	r3, [r0, #9]
 80139c0:	8880      	ldrh	r0, [r0, #4]
 80139c2:	4418      	add	r0, r3
 80139c4:	b280      	uxth	r0, r0
 80139c6:	4770      	bx	lr

080139c8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80139c8:	6803      	ldr	r3, [r0, #0]
 80139ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80139cc:	4718      	bx	r3

080139ce <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80139ce:	b40e      	push	{r1, r2, r3}
 80139d0:	b570      	push	{r4, r5, r6, lr}
 80139d2:	b09d      	sub	sp, #116	@ 0x74
 80139d4:	4604      	mov	r4, r0
 80139d6:	ab21      	add	r3, sp, #132	@ 0x84
 80139d8:	a803      	add	r0, sp, #12
 80139da:	f853 5b04 	ldr.w	r5, [r3], #4
 80139de:	9302      	str	r3, [sp, #8]
 80139e0:	f000 ffea 	bl	80149b8 <_ZN8touchgfx12TextProviderC1Ev>
 80139e4:	6823      	ldr	r3, [r4, #0]
 80139e6:	4620      	mov	r0, r4
 80139e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80139ea:	4798      	blx	r3
 80139ec:	6823      	ldr	r3, [r4, #0]
 80139ee:	4606      	mov	r6, r0
 80139f0:	4620      	mov	r0, r4
 80139f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80139f4:	2401      	movs	r4, #1
 80139f6:	4798      	blx	r3
 80139f8:	4633      	mov	r3, r6
 80139fa:	9000      	str	r0, [sp, #0]
 80139fc:	4629      	mov	r1, r5
 80139fe:	9a02      	ldr	r2, [sp, #8]
 8013a00:	a803      	add	r0, sp, #12
 8013a02:	f001 f82c 	bl	8014a5e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013a06:	a803      	add	r0, sp, #12
 8013a08:	f001 fbea 	bl	80151e0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013a0c:	b2a3      	uxth	r3, r4
 8013a0e:	b138      	cbz	r0, 8013a20 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8013a10:	280a      	cmp	r0, #10
 8013a12:	a803      	add	r0, sp, #12
 8013a14:	bf04      	itt	eq
 8013a16:	3301      	addeq	r3, #1
 8013a18:	b21c      	sxtheq	r4, r3
 8013a1a:	f001 fbe1 	bl	80151e0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013a1e:	e7f5      	b.n	8013a0c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8013a20:	4618      	mov	r0, r3
 8013a22:	b01d      	add	sp, #116	@ 0x74
 8013a24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a28:	b003      	add	sp, #12
 8013a2a:	4770      	bx	lr

08013a2c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8013a2c:	b40e      	push	{r1, r2, r3}
 8013a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a30:	b09e      	sub	sp, #120	@ 0x78
 8013a32:	4604      	mov	r4, r0
 8013a34:	ab23      	add	r3, sp, #140	@ 0x8c
 8013a36:	a805      	add	r0, sp, #20
 8013a38:	f853 5b04 	ldr.w	r5, [r3], #4
 8013a3c:	9303      	str	r3, [sp, #12]
 8013a3e:	f000 ffbb 	bl	80149b8 <_ZN8touchgfx12TextProviderC1Ev>
 8013a42:	6823      	ldr	r3, [r4, #0]
 8013a44:	4620      	mov	r0, r4
 8013a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013a48:	4798      	blx	r3
 8013a4a:	6823      	ldr	r3, [r4, #0]
 8013a4c:	4606      	mov	r6, r0
 8013a4e:	4620      	mov	r0, r4
 8013a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013a52:	4798      	blx	r3
 8013a54:	4633      	mov	r3, r6
 8013a56:	4629      	mov	r1, r5
 8013a58:	9000      	str	r0, [sp, #0]
 8013a5a:	9a03      	ldr	r2, [sp, #12]
 8013a5c:	a805      	add	r0, sp, #20
 8013a5e:	f000 fffe 	bl	8014a5e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013a62:	ad1e      	add	r5, sp, #120	@ 0x78
 8013a64:	2100      	movs	r1, #0
 8013a66:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8013a6a:	4622      	mov	r2, r4
 8013a6c:	a805      	add	r0, sp, #20
 8013a6e:	f845 1d68 	str.w	r1, [r5, #-104]!
 8013a72:	462b      	mov	r3, r5
 8013a74:	f001 fae8 	bl	8015048 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013a78:	b1d8      	cbz	r0, 8013ab2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8013a7a:	280a      	cmp	r0, #10
 8013a7c:	d012      	beq.n	8013aa4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8013a7e:	9804      	ldr	r0, [sp, #16]
 8013a80:	b180      	cbz	r0, 8013aa4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8013a82:	7b47      	ldrb	r7, [r0, #13]
 8013a84:	88e2      	ldrh	r2, [r4, #6]
 8013a86:	00fb      	lsls	r3, r7, #3
 8013a88:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8013a8c:	7a03      	ldrb	r3, [r0, #8]
 8013a8e:	430b      	orrs	r3, r1
 8013a90:	0679      	lsls	r1, r7, #25
 8013a92:	bf44      	itt	mi
 8013a94:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8013a98:	b21b      	sxthmi	r3, r3
 8013a9a:	1ad3      	subs	r3, r2, r3
 8013a9c:	b21b      	sxth	r3, r3
 8013a9e:	429e      	cmp	r6, r3
 8013aa0:	bfa8      	it	ge
 8013aa2:	461e      	movge	r6, r3
 8013aa4:	462b      	mov	r3, r5
 8013aa6:	4622      	mov	r2, r4
 8013aa8:	2100      	movs	r1, #0
 8013aaa:	a805      	add	r0, sp, #20
 8013aac:	f001 facc 	bl	8015048 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013ab0:	e7e2      	b.n	8013a78 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8013ab2:	4630      	mov	r0, r6
 8013ab4:	b01e      	add	sp, #120	@ 0x78
 8013ab6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013aba:	b003      	add	sp, #12
 8013abc:	4770      	bx	lr

08013abe <_ZNK8touchgfx8Drawable10invalidateEv>:
 8013abe:	b513      	push	{r0, r1, r4, lr}
 8013ac0:	6803      	ldr	r3, [r0, #0]
 8013ac2:	2400      	movs	r4, #0
 8013ac4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8013ac8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013acc:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013ad0:	4669      	mov	r1, sp
 8013ad2:	691b      	ldr	r3, [r3, #16]
 8013ad4:	9400      	str	r4, [sp, #0]
 8013ad6:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013ada:	4798      	blx	r3
 8013adc:	b002      	add	sp, #8
 8013ade:	bd10      	pop	{r4, pc}

08013ae0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8013ae0:	b538      	push	{r3, r4, r5, lr}
 8013ae2:	680b      	ldr	r3, [r1, #0]
 8013ae4:	460c      	mov	r4, r1
 8013ae6:	4605      	mov	r5, r0
 8013ae8:	68db      	ldr	r3, [r3, #12]
 8013aea:	4798      	blx	r3
 8013aec:	6823      	ldr	r3, [r4, #0]
 8013aee:	4620      	mov	r0, r4
 8013af0:	4629      	mov	r1, r5
 8013af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013af4:	4798      	blx	r3
 8013af6:	4628      	mov	r0, r5
 8013af8:	bd38      	pop	{r3, r4, r5, pc}

08013afa <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8013afa:	b410      	push	{r4}
 8013afc:	880a      	ldrh	r2, [r1, #0]
 8013afe:	8884      	ldrh	r4, [r0, #4]
 8013b00:	4422      	add	r2, r4
 8013b02:	800a      	strh	r2, [r1, #0]
 8013b04:	884a      	ldrh	r2, [r1, #2]
 8013b06:	88c4      	ldrh	r4, [r0, #6]
 8013b08:	4422      	add	r2, r4
 8013b0a:	804a      	strh	r2, [r1, #2]
 8013b0c:	6940      	ldr	r0, [r0, #20]
 8013b0e:	b120      	cbz	r0, 8013b1a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8013b10:	6803      	ldr	r3, [r0, #0]
 8013b12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b18:	4718      	bx	r3
 8013b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b1e:	4770      	bx	lr

08013b20 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8013b20:	b570      	push	{r4, r5, r6, lr}
 8013b22:	8882      	ldrh	r2, [r0, #4]
 8013b24:	460c      	mov	r4, r1
 8013b26:	880b      	ldrh	r3, [r1, #0]
 8013b28:	4605      	mov	r5, r0
 8013b2a:	4413      	add	r3, r2
 8013b2c:	800b      	strh	r3, [r1, #0]
 8013b2e:	884b      	ldrh	r3, [r1, #2]
 8013b30:	88c2      	ldrh	r2, [r0, #6]
 8013b32:	4413      	add	r3, r2
 8013b34:	804b      	strh	r3, [r1, #2]
 8013b36:	1d01      	adds	r1, r0, #4
 8013b38:	4620      	mov	r0, r4
 8013b3a:	f7f9 fe61 	bl	800d800 <_ZN8touchgfx4RectaNERKS0_>
 8013b3e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	dd0b      	ble.n	8013b5e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013b46:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	dd07      	ble.n	8013b5e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013b4e:	6968      	ldr	r0, [r5, #20]
 8013b50:	b128      	cbz	r0, 8013b5e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013b52:	6803      	ldr	r3, [r0, #0]
 8013b54:	4621      	mov	r1, r4
 8013b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b5c:	4718      	bx	r3
 8013b5e:	bd70      	pop	{r4, r5, r6, pc}

08013b60 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8013b60:	b570      	push	{r4, r5, r6, lr}
 8013b62:	8882      	ldrh	r2, [r0, #4]
 8013b64:	460c      	mov	r4, r1
 8013b66:	880b      	ldrh	r3, [r1, #0]
 8013b68:	4605      	mov	r5, r0
 8013b6a:	4413      	add	r3, r2
 8013b6c:	800b      	strh	r3, [r1, #0]
 8013b6e:	884b      	ldrh	r3, [r1, #2]
 8013b70:	88c2      	ldrh	r2, [r0, #6]
 8013b72:	4413      	add	r3, r2
 8013b74:	804b      	strh	r3, [r1, #2]
 8013b76:	1d01      	adds	r1, r0, #4
 8013b78:	4620      	mov	r0, r4
 8013b7a:	f7f9 fe41 	bl	800d800 <_ZN8touchgfx4RectaNERKS0_>
 8013b7e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	dd19      	ble.n	8013bba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8013b86:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	dd15      	ble.n	8013bba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8013b8e:	6968      	ldr	r0, [r5, #20]
 8013b90:	b128      	cbz	r0, 8013b9e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8013b92:	6803      	ldr	r3, [r0, #0]
 8013b94:	4621      	mov	r1, r4
 8013b96:	691b      	ldr	r3, [r3, #16]
 8013b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b9c:	4718      	bx	r3
 8013b9e:	4b07      	ldr	r3, [pc, #28]	@ (8013bbc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	3304      	adds	r3, #4
 8013ba4:	429d      	cmp	r5, r3
 8013ba6:	d108      	bne.n	8013bba <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8013ba8:	f7fe ff10 	bl	80129cc <_ZN8touchgfx11Application11getInstanceEv>
 8013bac:	6803      	ldr	r3, [r0, #0]
 8013bae:	6821      	ldr	r1, [r4, #0]
 8013bb0:	6862      	ldr	r2, [r4, #4]
 8013bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bb8:	4718      	bx	r3
 8013bba:	bd70      	pop	{r4, r5, r6, pc}
 8013bbc:	24025184 	.word	0x24025184

08013bc0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8013bc0:	b570      	push	{r4, r5, r6, lr}
 8013bc2:	4604      	mov	r4, r0
 8013bc4:	4616      	mov	r6, r2
 8013bc6:	460d      	mov	r5, r1
 8013bc8:	b901      	cbnz	r1, 8013bcc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8013bca:	b192      	cbz	r2, 8013bf2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8013bcc:	6823      	ldr	r3, [r4, #0]
 8013bce:	4620      	mov	r0, r4
 8013bd0:	699b      	ldr	r3, [r3, #24]
 8013bd2:	4798      	blx	r3
 8013bd4:	88e2      	ldrh	r2, [r4, #6]
 8013bd6:	88a1      	ldrh	r1, [r4, #4]
 8013bd8:	4620      	mov	r0, r4
 8013bda:	4432      	add	r2, r6
 8013bdc:	4429      	add	r1, r5
 8013bde:	b212      	sxth	r2, r2
 8013be0:	b209      	sxth	r1, r1
 8013be2:	f7fa f8e3 	bl	800ddac <_ZN8touchgfx8Drawable5setXYEss>
 8013be6:	6823      	ldr	r3, [r4, #0]
 8013be8:	4620      	mov	r0, r4
 8013bea:	699b      	ldr	r3, [r3, #24]
 8013bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bf0:	4718      	bx	r3
 8013bf2:	bd70      	pop	{r4, r5, r6, pc}

08013bf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8013bf4:	b510      	push	{r4, lr}
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	4604      	mov	r4, r0
 8013bfa:	4608      	mov	r0, r1
 8013bfc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8013c00:	8023      	strh	r3, [r4, #0]
 8013c02:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013c06:	8063      	strh	r3, [r4, #2]
 8013c08:	6803      	ldr	r3, [r0, #0]
 8013c0a:	80a1      	strh	r1, [r4, #4]
 8013c0c:	4621      	mov	r1, r4
 8013c0e:	80e2      	strh	r2, [r4, #6]
 8013c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013c12:	4798      	blx	r3
 8013c14:	4620      	mov	r0, r4
 8013c16:	bd10      	pop	{r4, pc}

08013c18 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8013c18:	4770      	bx	lr

08013c1a <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8013c1a:	b510      	push	{r4, lr}
 8013c1c:	4604      	mov	r4, r0
 8013c1e:	211c      	movs	r1, #28
 8013c20:	f00b ff6e 	bl	801fb00 <_ZdlPvj>
 8013c24:	4620      	mov	r0, r4
 8013c26:	bd10      	pop	{r4, pc}

08013c28 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8013c28:	4a04      	ldr	r2, [pc, #16]	@ (8013c3c <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8013c2a:	6002      	str	r2, [r0, #0]
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8013c32:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013c36:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013c3a:	4770      	bx	lr
 8013c3c:	08023ee4 	.word	0x08023ee4

08013c40 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 8013c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c44:	4604      	mov	r4, r0
 8013c46:	b087      	sub	sp, #28
 8013c48:	4696      	mov	lr, r2
 8013c4a:	6880      	ldr	r0, [r0, #8]
 8013c4c:	8b22      	ldrh	r2, [r4, #24]
 8013c4e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8013c52:	9105      	str	r1, [sp, #20]
 8013c54:	1c51      	adds	r1, r2, #1
 8013c56:	8321      	strh	r1, [r4, #24]
 8013c58:	2101      	movs	r1, #1
 8013c5a:	5481      	strb	r1, [r0, r2]
 8013c5c:	4689      	mov	r9, r1
 8013c5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013c62:	8b60      	ldrh	r0, [r4, #26]
 8013c64:	ee06 2a90 	vmov	s13, r2
 8013c68:	68e2      	ldr	r2, [r4, #12]
 8013c6a:	1845      	adds	r5, r0, r1
 8013c6c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013c70:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8013c74:	8365      	strh	r5, [r4, #26]
 8013c76:	edc2 6a00 	vstr	s13, [r2]
 8013c7a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013c7e:	8b60      	ldrh	r0, [r4, #26]
 8013c80:	ee07 2a10 	vmov	s14, r2
 8013c84:	68e2      	ldr	r2, [r4, #12]
 8013c86:	1845      	adds	r5, r0, r1
 8013c88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013c8c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8013c90:	8365      	strh	r5, [r4, #26]
 8013c92:	1d18      	adds	r0, r3, #4
 8013c94:	460d      	mov	r5, r1
 8013c96:	ed82 7a00 	vstr	s14, [r2]
 8013c9a:	f8be 2000 	ldrh.w	r2, [lr]
 8013c9e:	9203      	str	r2, [sp, #12]
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	4613      	mov	r3, r2
 8013ca4:	4694      	mov	ip, r2
 8013ca6:	9201      	str	r2, [sp, #4]
 8013ca8:	9202      	str	r2, [sp, #8]
 8013caa:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8013cae:	9e05      	ldr	r6, [sp, #20]
 8013cb0:	f108 0701 	add.w	r7, r8, #1
 8013cb4:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8013cb8:	428e      	cmp	r6, r1
 8013cba:	b2bf      	uxth	r7, r7
 8013cbc:	eb0a 0b08 	add.w	fp, sl, r8
 8013cc0:	f340 80b6 	ble.w	8013e30 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 8013cc4:	9b03      	ldr	r3, [sp, #12]
 8013cc6:	f9b0 c000 	ldrsh.w	ip, [r0]
 8013cca:	fa43 fb05 	asr.w	fp, r3, r5
 8013cce:	f00b 0b01 	and.w	fp, fp, #1
 8013cd2:	fa5f f38b 	uxtb.w	r3, fp
 8013cd6:	9304      	str	r3, [sp, #16]
 8013cd8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013cdc:	f1bb 0f00 	cmp.w	fp, #0
 8013ce0:	d057      	beq.n	8013d92 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 8013ce2:	ee07 ca90 	vmov	s15, ip
 8013ce6:	8327      	strh	r7, [r4, #24]
 8013ce8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8013cec:	ee07 3a90 	vmov	s15, r3
 8013cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013cf4:	f1b9 0f00 	cmp.w	r9, #0
 8013cf8:	d028      	beq.n	8013d4c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 8013cfa:	f04f 0602 	mov.w	r6, #2
 8013cfe:	f80a 6008 	strb.w	r6, [sl, r8]
 8013d02:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013d06:	68e7      	ldr	r7, [r4, #12]
 8013d08:	f108 0901 	add.w	r9, r8, #1
 8013d0c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013d10:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013d14:	edc7 5a00 	vstr	s11, [r7]
 8013d18:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013d1c:	68e7      	ldr	r7, [r4, #12]
 8013d1e:	f108 0901 	add.w	r9, r8, #1
 8013d22:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013d26:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013d2a:	edc7 7a00 	vstr	s15, [r7]
 8013d2e:	3501      	adds	r5, #1
 8013d30:	2d10      	cmp	r5, #16
 8013d32:	d106      	bne.n	8013d42 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8013d34:	9d02      	ldr	r5, [sp, #8]
 8013d36:	3501      	adds	r5, #1
 8013d38:	9502      	str	r5, [sp, #8]
 8013d3a:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 8013d3e:	9503      	str	r5, [sp, #12]
 8013d40:	2500      	movs	r5, #0
 8013d42:	3101      	adds	r1, #1
 8013d44:	3004      	adds	r0, #4
 8013d46:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8013d4a:	e7ae      	b.n	8013caa <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 8013d4c:	f04f 0605 	mov.w	r6, #5
 8013d50:	ed9d 5a01 	vldr	s10, [sp, #4]
 8013d54:	f80a 6008 	strb.w	r6, [sl, r8]
 8013d58:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013d5c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013d60:	68e7      	ldr	r7, [r4, #12]
 8013d62:	f108 0901 	add.w	r9, r8, #1
 8013d66:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013d6a:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013d6e:	ed87 5a00 	vstr	s10, [r7]
 8013d72:	ee05 2a10 	vmov	s10, r2
 8013d76:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013d7a:	68e7      	ldr	r7, [r4, #12]
 8013d7c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013d80:	f108 0901 	add.w	r9, r8, #1
 8013d84:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013d88:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013d8c:	ed87 5a00 	vstr	s10, [r7]
 8013d90:	e7b7      	b.n	8013d02 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 8013d92:	f1b9 0f00 	cmp.w	r9, #0
 8013d96:	d147      	bne.n	8013e28 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 8013d98:	f04f 0605 	mov.w	r6, #5
 8013d9c:	eddd 7a01 	vldr	s15, [sp, #4]
 8013da0:	8327      	strh	r7, [r4, #24]
 8013da2:	f80a 6008 	strb.w	r6, [sl, r8]
 8013da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013daa:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013dae:	68e7      	ldr	r7, [r4, #12]
 8013db0:	f108 0901 	add.w	r9, r8, #1
 8013db4:	9e01      	ldr	r6, [sp, #4]
 8013db6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013dba:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013dbe:	4466      	add	r6, ip
 8013dc0:	edc7 7a00 	vstr	s15, [r7]
 8013dc4:	ee07 2a90 	vmov	s15, r2
 8013dc8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013dcc:	441a      	add	r2, r3
 8013dce:	68e7      	ldr	r7, [r4, #12]
 8013dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013dd4:	f108 0901 	add.w	r9, r8, #1
 8013dd8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013ddc:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013de0:	edc7 7a00 	vstr	s15, [r7]
 8013de4:	ee07 6a90 	vmov	s15, r6
 8013de8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013df0:	68e7      	ldr	r7, [r4, #12]
 8013df2:	f108 0901 	add.w	r9, r8, #1
 8013df6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013dfa:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013dfe:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013e02:	edc7 7a00 	vstr	s15, [r7]
 8013e06:	ee07 2a90 	vmov	s15, r2
 8013e0a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e12:	68e7      	ldr	r7, [r4, #12]
 8013e14:	f108 0901 	add.w	r9, r8, #1
 8013e18:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013e1c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013e20:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013e24:	edc7 7a00 	vstr	s15, [r7]
 8013e28:	461a      	mov	r2, r3
 8013e2a:	f8cd c004 	str.w	ip, [sp, #4]
 8013e2e:	e77e      	b.n	8013d2e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 8013e30:	f1b9 0f00 	cmp.w	r9, #0
 8013e34:	d028      	beq.n	8013e88 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8013e36:	ee07 ca90 	vmov	s15, ip
 8013e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e3e:	eef4 6a67 	vcmp.f32	s13, s15
 8013e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e46:	d108      	bne.n	8013e5a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 8013e48:	ee07 3a90 	vmov	s15, r3
 8013e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e50:	eeb4 7a67 	vcmp.f32	s14, s15
 8013e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e58:	d016      	beq.n	8013e88 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8013e5a:	2302      	movs	r3, #2
 8013e5c:	8327      	strh	r7, [r4, #24]
 8013e5e:	f88b 3000 	strb.w	r3, [fp]
 8013e62:	8b62      	ldrh	r2, [r4, #26]
 8013e64:	68e3      	ldr	r3, [r4, #12]
 8013e66:	1c51      	adds	r1, r2, #1
 8013e68:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013e6c:	8361      	strh	r1, [r4, #26]
 8013e6e:	edc3 6a00 	vstr	s13, [r3]
 8013e72:	8b62      	ldrh	r2, [r4, #26]
 8013e74:	68e3      	ldr	r3, [r4, #12]
 8013e76:	1c51      	adds	r1, r2, #1
 8013e78:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013e7c:	8361      	strh	r1, [r4, #26]
 8013e7e:	ed83 7a00 	vstr	s14, [r3]
 8013e82:	b007      	add	sp, #28
 8013e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e88:	2305      	movs	r3, #5
 8013e8a:	eddd 7a01 	vldr	s15, [sp, #4]
 8013e8e:	8327      	strh	r7, [r4, #24]
 8013e90:	f88b 3000 	strb.w	r3, [fp]
 8013e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e98:	8b61      	ldrh	r1, [r4, #26]
 8013e9a:	68e3      	ldr	r3, [r4, #12]
 8013e9c:	1c4d      	adds	r5, r1, #1
 8013e9e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8013ea2:	8365      	strh	r5, [r4, #26]
 8013ea4:	edc3 7a00 	vstr	s15, [r3]
 8013ea8:	ee07 2a90 	vmov	s15, r2
 8013eac:	8b61      	ldrh	r1, [r4, #26]
 8013eae:	68e3      	ldr	r3, [r4, #12]
 8013eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013eb4:	1c4d      	adds	r5, r1, #1
 8013eb6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8013eba:	8365      	strh	r5, [r4, #26]
 8013ebc:	edc3 7a00 	vstr	s15, [r3]
 8013ec0:	e7cf      	b.n	8013e62 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

08013ec4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8013ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ec8:	4604      	mov	r4, r0
 8013eca:	b08e      	sub	sp, #56	@ 0x38
 8013ecc:	4699      	mov	r9, r3
 8013ece:	4688      	mov	r8, r1
 8013ed0:	4615      	mov	r5, r2
 8013ed2:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8013ed4:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8013ed8:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8013eda:	f7ef fbd9 	bl	8003690 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 8013ede:	6060      	str	r0, [r4, #4]
 8013ee0:	f1b9 0f00 	cmp.w	r9, #0
 8013ee4:	f000 80e8 	beq.w	80140b8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8013ee8:	2800      	cmp	r0, #0
 8013eea:	f000 80e5 	beq.w	80140b8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8013eee:	a805      	add	r0, sp, #20
 8013ef0:	f000 f8f9 	bl	80140e6 <_ZN8touchgfx9Matrix3x3C1Ev>
 8013ef4:	6833      	ldr	r3, [r6, #0]
 8013ef6:	4630      	mov	r0, r6
 8013ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013efa:	4798      	blx	r3
 8013efc:	a805      	add	r0, sp, #20
 8013efe:	eef0 0a40 	vmov.f32	s1, s0
 8013f02:	f000 f8f4 	bl	80140ee <_ZN8touchgfx9Matrix3x35scaleEff>
 8013f06:	6860      	ldr	r0, [r4, #4]
 8013f08:	f1ba 0f03 	cmp.w	sl, #3
 8013f0c:	d83b      	bhi.n	8013f86 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 8013f0e:	e8df f00a 	tbb	[pc, sl]
 8013f12:	1002      	.short	0x1002
 8013f14:	9f71      	.short	0x9f71
 8013f16:	6803      	ldr	r3, [r0, #0]
 8013f18:	462a      	mov	r2, r5
 8013f1a:	4641      	mov	r1, r8
 8013f1c:	689b      	ldr	r3, [r3, #8]
 8013f1e:	4798      	blx	r3
 8013f20:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8013f24:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8013f28:	ee07 7a90 	vmov	s15, r7
 8013f2c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013f30:	e026      	b.n	8013f80 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 8013f32:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8013f36:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8013f3a:	8869      	ldrh	r1, [r5, #2]
 8013f3c:	1a9b      	subs	r3, r3, r2
 8013f3e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013f42:	aa03      	add	r2, sp, #12
 8013f44:	1a5b      	subs	r3, r3, r1
 8013f46:	4641      	mov	r1, r8
 8013f48:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013f4c:	882b      	ldrh	r3, [r5, #0]
 8013f4e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013f52:	88ab      	ldrh	r3, [r5, #4]
 8013f54:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013f58:	6803      	ldr	r3, [r0, #0]
 8013f5a:	689b      	ldr	r3, [r3, #8]
 8013f5c:	4798      	blx	r3
 8013f5e:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 80140c0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 8013f62:	a805      	add	r0, sp, #20
 8013f64:	f000 f8e8 	bl	8014138 <_ZN8touchgfx9Matrix3x36rotateEf>
 8013f68:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8013f6c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013f6e:	ee07 7a90 	vmov	s15, r7
 8013f72:	1a9b      	subs	r3, r3, r2
 8013f74:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8013f78:	ee00 3a10 	vmov	s0, r3
 8013f7c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013f80:	a805      	add	r0, sp, #20
 8013f82:	f000 f927 	bl	80141d4 <_ZN8touchgfx9Matrix3x39translateEff>
 8013f86:	6860      	ldr	r0, [r4, #4]
 8013f88:	a905      	add	r1, sp, #20
 8013f8a:	2500      	movs	r5, #0
 8013f8c:	f109 0602 	add.w	r6, r9, #2
 8013f90:	6803      	ldr	r3, [r0, #0]
 8013f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013f94:	4798      	blx	r3
 8013f96:	6860      	ldr	r0, [r4, #4]
 8013f98:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8013f9a:	6803      	ldr	r3, [r0, #0]
 8013f9c:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8013fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fa2:	4798      	blx	r3
 8013fa4:	6860      	ldr	r0, [r4, #4]
 8013fa6:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8013faa:	6803      	ldr	r3, [r0, #0]
 8013fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fae:	4798      	blx	r3
 8013fb0:	6860      	ldr	r0, [r4, #4]
 8013fb2:	2101      	movs	r1, #1
 8013fb4:	6803      	ldr	r3, [r0, #0]
 8013fb6:	68db      	ldr	r3, [r3, #12]
 8013fb8:	4798      	blx	r3
 8013fba:	f8b9 7000 	ldrh.w	r7, [r9]
 8013fbe:	f104 0310 	add.w	r3, r4, #16
 8013fc2:	61a5      	str	r5, [r4, #24]
 8013fc4:	f104 0208 	add.w	r2, r4, #8
 8013fc8:	f104 0114 	add.w	r1, r4, #20
 8013fcc:	f104 000c 	add.w	r0, r4, #12
 8013fd0:	f7f0 f84e 	bl	8004070 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8013fd4:	42af      	cmp	r7, r5
 8013fd6:	dd60      	ble.n	801409a <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8013fd8:	8831      	ldrh	r1, [r6, #0]
 8013fda:	1cb2      	adds	r2, r6, #2
 8013fdc:	4620      	mov	r0, r4
 8013fde:	3501      	adds	r5, #1
 8013fe0:	f101 030f 	add.w	r3, r1, #15
 8013fe4:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8013fe8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8013fec:	f7ff fe28 	bl	8013c40 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 8013ff0:	4606      	mov	r6, r0
 8013ff2:	e7ef      	b.n	8013fd4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8013ff4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013ff8:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8013ffc:	8829      	ldrh	r1, [r5, #0]
 8013ffe:	1a9b      	subs	r3, r3, r2
 8014000:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014004:	aa03      	add	r2, sp, #12
 8014006:	1a5b      	subs	r3, r3, r1
 8014008:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801400c:	886d      	ldrh	r5, [r5, #2]
 801400e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014012:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8014016:	f8ad 1012 	strh.w	r1, [sp, #18]
 801401a:	1a5b      	subs	r3, r3, r1
 801401c:	4641      	mov	r1, r8
 801401e:	1b5b      	subs	r3, r3, r5
 8014020:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014024:	6803      	ldr	r3, [r0, #0]
 8014026:	689b      	ldr	r3, [r3, #8]
 8014028:	4798      	blx	r3
 801402a:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 80140c4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801402e:	a805      	add	r0, sp, #20
 8014030:	f000 f882 	bl	8014138 <_ZN8touchgfx9Matrix3x36rotateEf>
 8014034:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8014038:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801403a:	1a9b      	subs	r3, r3, r2
 801403c:	ee00 3a90 	vmov	s1, r3
 8014040:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8014044:	1bdb      	subs	r3, r3, r7
 8014046:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801404a:	ee00 3a10 	vmov	s0, r3
 801404e:	e795      	b.n	8013f7c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8014050:	886b      	ldrh	r3, [r5, #2]
 8014052:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014056:	f8ad 300c 	strh.w	r3, [sp, #12]
 801405a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801405e:	8829      	ldrh	r1, [r5, #0]
 8014060:	1a9b      	subs	r3, r3, r2
 8014062:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014066:	aa03      	add	r2, sp, #12
 8014068:	1a5b      	subs	r3, r3, r1
 801406a:	4641      	mov	r1, r8
 801406c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014070:	88eb      	ldrh	r3, [r5, #6]
 8014072:	f8ad 3010 	strh.w	r3, [sp, #16]
 8014076:	6803      	ldr	r3, [r0, #0]
 8014078:	689b      	ldr	r3, [r3, #8]
 801407a:	4798      	blx	r3
 801407c:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80140c8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8014080:	a805      	add	r0, sp, #20
 8014082:	f000 f859 	bl	8014138 <_ZN8touchgfx9Matrix3x36rotateEf>
 8014086:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801408a:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 801408e:	1bdb      	subs	r3, r3, r7
 8014090:	ee00 3a90 	vmov	s1, r3
 8014094:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014098:	e748      	b.n	8013f2c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 801409a:	6860      	ldr	r0, [r4, #4]
 801409c:	2100      	movs	r1, #0
 801409e:	8b22      	ldrh	r2, [r4, #24]
 80140a0:	6803      	ldr	r3, [r0, #0]
 80140a2:	9101      	str	r1, [sp, #4]
 80140a4:	8b61      	ldrh	r1, [r4, #26]
 80140a6:	9100      	str	r1, [sp, #0]
 80140a8:	6a1d      	ldr	r5, [r3, #32]
 80140aa:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80140ae:	47a8      	blx	r5
 80140b0:	6860      	ldr	r0, [r4, #4]
 80140b2:	6803      	ldr	r3, [r0, #0]
 80140b4:	69db      	ldr	r3, [r3, #28]
 80140b6:	4798      	blx	r3
 80140b8:	b00e      	add	sp, #56	@ 0x38
 80140ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140be:	bf00      	nop
 80140c0:	42b40000 	.word	0x42b40000
 80140c4:	43340000 	.word	0x43340000
 80140c8:	43870000 	.word	0x43870000

080140cc <_ZN8touchgfx9Matrix3x35resetEv>:
 80140cc:	2300      	movs	r3, #0
 80140ce:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80140d2:	6043      	str	r3, [r0, #4]
 80140d4:	6002      	str	r2, [r0, #0]
 80140d6:	6083      	str	r3, [r0, #8]
 80140d8:	60c3      	str	r3, [r0, #12]
 80140da:	6102      	str	r2, [r0, #16]
 80140dc:	6143      	str	r3, [r0, #20]
 80140de:	6183      	str	r3, [r0, #24]
 80140e0:	61c3      	str	r3, [r0, #28]
 80140e2:	6202      	str	r2, [r0, #32]
 80140e4:	4770      	bx	lr

080140e6 <_ZN8touchgfx9Matrix3x3C1Ev>:
 80140e6:	b508      	push	{r3, lr}
 80140e8:	f7ff fff0 	bl	80140cc <_ZN8touchgfx9Matrix3x35resetEv>
 80140ec:	bd08      	pop	{r3, pc}

080140ee <_ZN8touchgfx9Matrix3x35scaleEff>:
 80140ee:	edd0 7a00 	vldr	s15, [r0]
 80140f2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80140f6:	edc0 7a00 	vstr	s15, [r0]
 80140fa:	edd0 7a01 	vldr	s15, [r0, #4]
 80140fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014102:	edc0 7a01 	vstr	s15, [r0, #4]
 8014106:	edd0 7a02 	vldr	s15, [r0, #8]
 801410a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801410e:	edd0 7a03 	vldr	s15, [r0, #12]
 8014112:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8014116:	ed80 0a02 	vstr	s0, [r0, #8]
 801411a:	edc0 7a03 	vstr	s15, [r0, #12]
 801411e:	edd0 7a04 	vldr	s15, [r0, #16]
 8014122:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8014126:	edc0 7a04 	vstr	s15, [r0, #16]
 801412a:	edd0 7a05 	vldr	s15, [r0, #20]
 801412e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8014132:	edc0 0a05 	vstr	s1, [r0, #20]
 8014136:	4770      	bx	lr

08014138 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8014138:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80141cc <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801413c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014140:	eddf 7a23 	vldr	s15, [pc, #140]	@ 80141d0 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8014144:	b510      	push	{r4, lr}
 8014146:	ed2d 8b02 	vpush	{d8}
 801414a:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801414e:	4604      	mov	r4, r0
 8014150:	eeb0 0a68 	vmov.f32	s0, s17
 8014154:	f00b fe2c 	bl	801fdb0 <cosf>
 8014158:	eeb0 8a40 	vmov.f32	s16, s0
 801415c:	eeb0 0a68 	vmov.f32	s0, s17
 8014160:	f00b fd62 	bl	801fc28 <sinf>
 8014164:	edd4 6a03 	vldr	s13, [r4, #12]
 8014168:	edd4 4a00 	vldr	s9, [r4]
 801416c:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8014170:	ed94 7a04 	vldr	s14, [r4, #16]
 8014174:	ed94 5a01 	vldr	s10, [r4, #4]
 8014178:	ee66 6a88 	vmul.f32	s13, s13, s16
 801417c:	edd4 5a02 	vldr	s11, [r4, #8]
 8014180:	eee8 7a24 	vfma.f32	s15, s16, s9
 8014184:	eee0 6a24 	vfma.f32	s13, s0, s9
 8014188:	edc4 7a00 	vstr	s15, [r4]
 801418c:	ee60 7a47 	vnmul.f32	s15, s0, s14
 8014190:	ee27 7a08 	vmul.f32	s14, s14, s16
 8014194:	edc4 6a03 	vstr	s13, [r4, #12]
 8014198:	eee8 7a05 	vfma.f32	s15, s16, s10
 801419c:	eea0 7a05 	vfma.f32	s14, s0, s10
 80141a0:	edc4 7a01 	vstr	s15, [r4, #4]
 80141a4:	edd4 7a05 	vldr	s15, [r4, #20]
 80141a8:	ed84 7a04 	vstr	s14, [r4, #16]
 80141ac:	ee20 6a67 	vnmul.f32	s12, s0, s15
 80141b0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80141b4:	eea8 6a25 	vfma.f32	s12, s16, s11
 80141b8:	eee0 7a25 	vfma.f32	s15, s0, s11
 80141bc:	ecbd 8b02 	vpop	{d8}
 80141c0:	ed84 6a02 	vstr	s12, [r4, #8]
 80141c4:	edc4 7a05 	vstr	s15, [r4, #20]
 80141c8:	bd10      	pop	{r4, pc}
 80141ca:	bf00      	nop
 80141cc:	40490fdb 	.word	0x40490fdb
 80141d0:	43340000 	.word	0x43340000

080141d4 <_ZN8touchgfx9Matrix3x39translateEff>:
 80141d4:	ed90 6a06 	vldr	s12, [r0, #24]
 80141d8:	edd0 7a00 	vldr	s15, [r0]
 80141dc:	edd0 6a07 	vldr	s13, [r0, #28]
 80141e0:	eee6 7a00 	vfma.f32	s15, s12, s0
 80141e4:	ed90 7a08 	vldr	s14, [r0, #32]
 80141e8:	edc0 7a00 	vstr	s15, [r0]
 80141ec:	edd0 7a01 	vldr	s15, [r0, #4]
 80141f0:	eee6 7a80 	vfma.f32	s15, s13, s0
 80141f4:	edc0 7a01 	vstr	s15, [r0, #4]
 80141f8:	edd0 7a02 	vldr	s15, [r0, #8]
 80141fc:	eee7 7a00 	vfma.f32	s15, s14, s0
 8014200:	edc0 7a02 	vstr	s15, [r0, #8]
 8014204:	edd0 7a03 	vldr	s15, [r0, #12]
 8014208:	eee6 7a20 	vfma.f32	s15, s12, s1
 801420c:	edc0 7a03 	vstr	s15, [r0, #12]
 8014210:	edd0 7a04 	vldr	s15, [r0, #16]
 8014214:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8014218:	edc0 7a04 	vstr	s15, [r0, #16]
 801421c:	edd0 7a05 	vldr	s15, [r0, #20]
 8014220:	eee7 7a20 	vfma.f32	s15, s14, s1
 8014224:	edc0 7a05 	vstr	s15, [r0, #20]
 8014228:	4770      	bx	lr

0801422a <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801422a:	edd0 6a01 	vldr	s13, [r0, #4]
 801422e:	b084      	sub	sp, #16
 8014230:	edd0 7a04 	vldr	s15, [r0, #16]
 8014234:	ed90 7a03 	vldr	s14, [r0, #12]
 8014238:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801423c:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8014240:	edd0 6a00 	vldr	s13, [r0]
 8014244:	eee7 7a00 	vfma.f32	s15, s14, s0
 8014248:	ed90 7a05 	vldr	s14, [r0, #20]
 801424c:	eee6 0a80 	vfma.f32	s1, s13, s0
 8014250:	ed90 0a02 	vldr	s0, [r0, #8]
 8014254:	ee30 0a80 	vadd.f32	s0, s1, s0
 8014258:	ee77 0a87 	vadd.f32	s1, s15, s14
 801425c:	b004      	add	sp, #16
 801425e:	4770      	bx	lr

08014260 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8014260:	b530      	push	{r4, r5, lr}
 8014262:	8083      	strh	r3, [r0, #4]
 8014264:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014268:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801426c:	80c3      	strh	r3, [r0, #6]
 801426e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014272:	6141      	str	r1, [r0, #20]
 8014274:	7203      	strb	r3, [r0, #8]
 8014276:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801427a:	8302      	strh	r2, [r0, #24]
 801427c:	7243      	strb	r3, [r0, #9]
 801427e:	7a83      	ldrb	r3, [r0, #10]
 8014280:	f365 0306 	bfi	r3, r5, #0, #7
 8014284:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8014288:	f365 13c7 	bfi	r3, r5, #7, #1
 801428c:	7283      	strb	r3, [r0, #10]
 801428e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8014292:	72c3      	strb	r3, [r0, #11]
 8014294:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8014298:	7303      	strb	r3, [r0, #12]
 801429a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801429e:	81c3      	strh	r3, [r0, #14]
 80142a0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80142a4:	8203      	strh	r3, [r0, #16]
 80142a6:	4b01      	ldr	r3, [pc, #4]	@ (80142ac <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80142a8:	6003      	str	r3, [r0, #0]
 80142aa:	bd30      	pop	{r4, r5, pc}
 80142ac:	08023ef8 	.word	0x08023ef8

080142b0 <_ZNK8touchgfx9ConstFont4findEt>:
 80142b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142b2:	6944      	ldr	r4, [r0, #20]
 80142b4:	b3bc      	cbz	r4, 8014326 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80142b6:	88a3      	ldrh	r3, [r4, #4]
 80142b8:	8b02      	ldrh	r2, [r0, #24]
 80142ba:	1acb      	subs	r3, r1, r3
 80142bc:	f102 32ff 	add.w	r2, r2, #4294967295
 80142c0:	d431      	bmi.n	8014326 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80142c2:	4293      	cmp	r3, r2
 80142c4:	dd0c      	ble.n	80142e0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80142c6:	230e      	movs	r3, #14
 80142c8:	fb03 4302 	mla	r3, r3, r2, r4
 80142cc:	889b      	ldrh	r3, [r3, #4]
 80142ce:	1a5b      	subs	r3, r3, r1
 80142d0:	1ad3      	subs	r3, r2, r3
 80142d2:	429a      	cmp	r2, r3
 80142d4:	db27      	blt.n	8014326 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	bfbc      	itt	lt
 80142da:	2302      	movlt	r3, #2
 80142dc:	fb92 f3f3 	sdivlt	r3, r2, r3
 80142e0:	2500      	movs	r5, #0
 80142e2:	260e      	movs	r6, #14
 80142e4:	4295      	cmp	r5, r2
 80142e6:	dc1e      	bgt.n	8014326 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80142e8:	fb06 4003 	mla	r0, r6, r3, r4
 80142ec:	8887      	ldrh	r7, [r0, #4]
 80142ee:	42b9      	cmp	r1, r7
 80142f0:	d01a      	beq.n	8014328 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 80142f2:	d20d      	bcs.n	8014310 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 80142f4:	1e5a      	subs	r2, r3, #1
 80142f6:	4295      	cmp	r5, r2
 80142f8:	dc15      	bgt.n	8014326 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80142fa:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 80142fe:	1a5b      	subs	r3, r3, r1
 8014300:	1ad3      	subs	r3, r2, r3
 8014302:	429a      	cmp	r2, r3
 8014304:	db0f      	blt.n	8014326 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014306:	429d      	cmp	r5, r3
 8014308:	ddec      	ble.n	80142e4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801430a:	1953      	adds	r3, r2, r5
 801430c:	105b      	asrs	r3, r3, #1
 801430e:	e7e9      	b.n	80142e4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014310:	1c5d      	adds	r5, r3, #1
 8014312:	42aa      	cmp	r2, r5
 8014314:	db07      	blt.n	8014326 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014316:	8a43      	ldrh	r3, [r0, #18]
 8014318:	1acb      	subs	r3, r1, r3
 801431a:	442b      	add	r3, r5
 801431c:	429d      	cmp	r5, r3
 801431e:	dc02      	bgt.n	8014326 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014320:	429a      	cmp	r2, r3
 8014322:	dadf      	bge.n	80142e4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014324:	e7f1      	b.n	801430a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8014326:	2000      	movs	r0, #0
 8014328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801432a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801432a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801432c:	4604      	mov	r4, r0
 801432e:	4617      	mov	r7, r2
 8014330:	461e      	mov	r6, r3
 8014332:	b911      	cbnz	r1, 801433a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8014334:	2500      	movs	r5, #0
 8014336:	4628      	mov	r0, r5
 8014338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801433a:	290a      	cmp	r1, #10
 801433c:	d0fa      	beq.n	8014334 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801433e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8014342:	4291      	cmp	r1, r2
 8014344:	d0f6      	beq.n	8014334 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014346:	f242 020b 	movw	r2, #8203	@ 0x200b
 801434a:	4291      	cmp	r1, r2
 801434c:	d0f2      	beq.n	8014334 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801434e:	f7ff ffaf 	bl	80142b0 <_ZNK8touchgfx9ConstFont4findEt>
 8014352:	4605      	mov	r5, r0
 8014354:	b950      	cbnz	r0, 801436c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8014356:	6823      	ldr	r3, [r4, #0]
 8014358:	4620      	mov	r0, r4
 801435a:	691b      	ldr	r3, [r3, #16]
 801435c:	4798      	blx	r3
 801435e:	4601      	mov	r1, r0
 8014360:	4620      	mov	r0, r4
 8014362:	f7ff ffa5 	bl	80142b0 <_ZNK8touchgfx9ConstFont4findEt>
 8014366:	4605      	mov	r5, r0
 8014368:	2800      	cmp	r0, #0
 801436a:	d0e3      	beq.n	8014334 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801436c:	6823      	ldr	r3, [r4, #0]
 801436e:	4629      	mov	r1, r5
 8014370:	4620      	mov	r0, r4
 8014372:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014374:	4798      	blx	r3
 8014376:	6038      	str	r0, [r7, #0]
 8014378:	6823      	ldr	r3, [r4, #0]
 801437a:	4620      	mov	r0, r4
 801437c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801437e:	4798      	blx	r3
 8014380:	7030      	strb	r0, [r6, #0]
 8014382:	e7d8      	b.n	8014336 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08014384 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8014384:	2000      	movs	r0, #0
 8014386:	4770      	bx	lr

08014388 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8014388:	2001      	movs	r0, #1
 801438a:	4770      	bx	lr

0801438c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801438c:	2002      	movs	r0, #2
 801438e:	4770      	bx	lr

08014390 <_ZN8touchgfx6ScreenD1Ev>:
 8014390:	4770      	bx	lr

08014392 <_ZN8touchgfx12GestureEventD1Ev>:
 8014392:	4770      	bx	lr

08014394 <_ZN8touchgfx9DragEventD1Ev>:
 8014394:	4770      	bx	lr

08014396 <_ZN8touchgfx10ClickEventD1Ev>:
 8014396:	4770      	bx	lr

08014398 <_ZN8touchgfx10ClickEventD0Ev>:
 8014398:	b510      	push	{r4, lr}
 801439a:	4604      	mov	r4, r0
 801439c:	210c      	movs	r1, #12
 801439e:	f00b fbaf 	bl	801fb00 <_ZdlPvj>
 80143a2:	4620      	mov	r0, r4
 80143a4:	bd10      	pop	{r4, pc}

080143a6 <_ZN8touchgfx9DragEventD0Ev>:
 80143a6:	b510      	push	{r4, lr}
 80143a8:	4604      	mov	r4, r0
 80143aa:	2110      	movs	r1, #16
 80143ac:	f00b fba8 	bl	801fb00 <_ZdlPvj>
 80143b0:	4620      	mov	r0, r4
 80143b2:	bd10      	pop	{r4, pc}

080143b4 <_ZN8touchgfx12GestureEventD0Ev>:
 80143b4:	b510      	push	{r4, lr}
 80143b6:	4604      	mov	r4, r0
 80143b8:	210c      	movs	r1, #12
 80143ba:	f00b fba1 	bl	801fb00 <_ZdlPvj>
 80143be:	4620      	mov	r0, r4
 80143c0:	bd10      	pop	{r4, pc}

080143c2 <_ZN8touchgfx6ScreenD0Ev>:
 80143c2:	b510      	push	{r4, lr}
 80143c4:	4604      	mov	r4, r0
 80143c6:	213c      	movs	r1, #60	@ 0x3c
 80143c8:	f00b fb9a 	bl	801fb00 <_ZdlPvj>
 80143cc:	4620      	mov	r0, r4
 80143ce:	bd10      	pop	{r4, pc}

080143d0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80143d0:	b530      	push	{r4, r5, lr}
 80143d2:	460d      	mov	r5, r1
 80143d4:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80143d6:	b087      	sub	sp, #28
 80143d8:	4604      	mov	r4, r0
 80143da:	b301      	cbz	r1, 801441e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80143dc:	a801      	add	r0, sp, #4
 80143de:	f7ff fc09 	bl	8013bf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80143e2:	892a      	ldrh	r2, [r5, #8]
 80143e4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80143e8:	7928      	ldrb	r0, [r5, #4]
 80143ea:	1ad2      	subs	r2, r2, r3
 80143ec:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80143ee:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80143f2:	441a      	add	r2, r3
 80143f4:	896b      	ldrh	r3, [r5, #10]
 80143f6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80143fa:	f88d 0010 	strb.w	r0, [sp, #16]
 80143fe:	1b5b      	subs	r3, r3, r5
 8014400:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8014402:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8014404:	442b      	add	r3, r5
 8014406:	4d07      	ldr	r5, [pc, #28]	@ (8014424 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8014408:	f8ad 1012 	strh.w	r1, [sp, #18]
 801440c:	a903      	add	r1, sp, #12
 801440e:	9503      	str	r5, [sp, #12]
 8014410:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014414:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014418:	6803      	ldr	r3, [r0, #0]
 801441a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801441c:	4798      	blx	r3
 801441e:	b007      	add	sp, #28
 8014420:	bd30      	pop	{r4, r5, pc}
 8014422:	bf00      	nop
 8014424:	08023f88 	.word	0x08023f88

08014428 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8014428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801442c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801442e:	b08a      	sub	sp, #40	@ 0x28
 8014430:	4604      	mov	r4, r0
 8014432:	460d      	mov	r5, r1
 8014434:	b113      	cbz	r3, 801443c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8014436:	790b      	ldrb	r3, [r1, #4]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d044      	beq.n	80144c6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801443c:	f104 0804 	add.w	r8, r4, #4
 8014440:	a803      	add	r0, sp, #12
 8014442:	4641      	mov	r1, r8
 8014444:	f7ff fbd6 	bl	8013bf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014448:	792b      	ldrb	r3, [r5, #4]
 801444a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801444e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8014452:	b983      	cbnz	r3, 8014476 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8014454:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8014458:	892a      	ldrh	r2, [r5, #8]
 801445a:	88e9      	ldrh	r1, [r5, #6]
 801445c:	4640      	mov	r0, r8
 801445e:	1b92      	subs	r2, r2, r6
 8014460:	9301      	str	r3, [sp, #4]
 8014462:	1bc9      	subs	r1, r1, r7
 8014464:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8014468:	b212      	sxth	r2, r2
 801446a:	9300      	str	r3, [sp, #0]
 801446c:	b209      	sxth	r1, r1
 801446e:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8014472:	f7f9 f8e3 	bl	800d63c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8014476:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014478:	b329      	cbz	r1, 80144c6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801447a:	a805      	add	r0, sp, #20
 801447c:	f7ff fbba 	bl	8013bf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014480:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014484:	792b      	ldrb	r3, [r5, #4]
 8014486:	a907      	add	r1, sp, #28
 8014488:	1abf      	subs	r7, r7, r2
 801448a:	88ea      	ldrh	r2, [r5, #6]
 801448c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801448e:	4417      	add	r7, r2
 8014490:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8014492:	f88d 3020 	strb.w	r3, [sp, #32]
 8014496:	4417      	add	r7, r2
 8014498:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801449c:	1ab6      	subs	r6, r6, r2
 801449e:	892a      	ldrh	r2, [r5, #8]
 80144a0:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 80144a4:	4416      	add	r6, r2
 80144a6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80144a8:	4416      	add	r6, r2
 80144aa:	4a08      	ldr	r2, [pc, #32]	@ (80144cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80144ac:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 80144b0:	2600      	movs	r6, #0
 80144b2:	9207      	str	r2, [sp, #28]
 80144b4:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 80144b8:	6803      	ldr	r3, [r0, #0]
 80144ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80144bc:	4798      	blx	r3
 80144be:	792b      	ldrb	r3, [r5, #4]
 80144c0:	b10b      	cbz	r3, 80144c6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80144c2:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 80144c6:	b00a      	add	sp, #40	@ 0x28
 80144c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144cc:	08023f60 	.word	0x08023f60

080144d0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80144d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144d4:	460c      	mov	r4, r1
 80144d6:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80144d8:	b088      	sub	sp, #32
 80144da:	4605      	mov	r5, r0
 80144dc:	2900      	cmp	r1, #0
 80144de:	d06d      	beq.n	80145bc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80144e0:	4668      	mov	r0, sp
 80144e2:	f7ff fb87 	bl	8013bf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80144e6:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 80144e8:	88e3      	ldrh	r3, [r4, #6]
 80144ea:	f9bd 8000 	ldrsh.w	r8, [sp]
 80144ee:	440b      	add	r3, r1
 80144f0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80144f4:	b21b      	sxth	r3, r3
 80144f6:	4543      	cmp	r3, r8
 80144f8:	db31      	blt.n	801455e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80144fa:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80144fe:	44c4      	add	ip, r8
 8014500:	fa0f fc8c 	sxth.w	ip, ip
 8014504:	4563      	cmp	r3, ip
 8014506:	da2a      	bge.n	801455e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014508:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801450a:	8926      	ldrh	r6, [r4, #8]
 801450c:	4416      	add	r6, r2
 801450e:	b236      	sxth	r6, r6
 8014510:	42be      	cmp	r6, r7
 8014512:	db24      	blt.n	801455e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014514:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014518:	4438      	add	r0, r7
 801451a:	b200      	sxth	r0, r0
 801451c:	4286      	cmp	r6, r0
 801451e:	da1e      	bge.n	801455e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014520:	8963      	ldrh	r3, [r4, #10]
 8014522:	4419      	add	r1, r3
 8014524:	b209      	sxth	r1, r1
 8014526:	4541      	cmp	r1, r8
 8014528:	db08      	blt.n	801453c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801452a:	4561      	cmp	r1, ip
 801452c:	da06      	bge.n	801453c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801452e:	89a3      	ldrh	r3, [r4, #12]
 8014530:	441a      	add	r2, r3
 8014532:	b212      	sxth	r2, r2
 8014534:	42ba      	cmp	r2, r7
 8014536:	db01      	blt.n	801453c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014538:	4282      	cmp	r2, r0
 801453a:	db10      	blt.n	801455e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801453c:	4b21      	ldr	r3, [pc, #132]	@ (80145c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801453e:	a904      	add	r1, sp, #16
 8014540:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8014542:	9304      	str	r3, [sp, #16]
 8014544:	2302      	movs	r3, #2
 8014546:	f88d 3014 	strb.w	r3, [sp, #20]
 801454a:	2300      	movs	r3, #0
 801454c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014550:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014554:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014558:	6803      	ldr	r3, [r0, #0]
 801455a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801455c:	4798      	blx	r3
 801455e:	1d29      	adds	r1, r5, #4
 8014560:	a802      	add	r0, sp, #8
 8014562:	f7ff fb47 	bl	8013bf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014566:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801456a:	88e0      	ldrh	r0, [r4, #6]
 801456c:	eba3 0808 	sub.w	r8, r3, r8
 8014570:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014574:	7921      	ldrb	r1, [r4, #4]
 8014576:	fa1f f888 	uxth.w	r8, r8
 801457a:	1bdf      	subs	r7, r3, r7
 801457c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8014580:	b2bb      	uxth	r3, r7
 8014582:	4440      	add	r0, r8
 8014584:	8922      	ldrh	r2, [r4, #8]
 8014586:	8967      	ldrh	r7, [r4, #10]
 8014588:	4460      	add	r0, ip
 801458a:	89a4      	ldrh	r4, [r4, #12]
 801458c:	441a      	add	r2, r3
 801458e:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8014590:	44b8      	add	r8, r7
 8014592:	4423      	add	r3, r4
 8014594:	f8ad 0016 	strh.w	r0, [sp, #22]
 8014598:	4432      	add	r2, r6
 801459a:	44e0      	add	r8, ip
 801459c:	4433      	add	r3, r6
 801459e:	4c0a      	ldr	r4, [pc, #40]	@ (80145c8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80145a0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80145a2:	f88d 1014 	strb.w	r1, [sp, #20]
 80145a6:	a904      	add	r1, sp, #16
 80145a8:	9404      	str	r4, [sp, #16]
 80145aa:	f8ad 2018 	strh.w	r2, [sp, #24]
 80145ae:	f8ad 801a 	strh.w	r8, [sp, #26]
 80145b2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80145b6:	6803      	ldr	r3, [r0, #0]
 80145b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80145ba:	4798      	blx	r3
 80145bc:	b008      	add	sp, #32
 80145be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145c2:	bf00      	nop
 80145c4:	08023f60 	.word	0x08023f60
 80145c8:	08023f74 	.word	0x08023f74

080145cc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80145cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80145ce:	4604      	mov	r4, r0
 80145d0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80145d4:	3201      	adds	r2, #1
 80145d6:	d112      	bne.n	80145fe <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80145d8:	2500      	movs	r5, #0
 80145da:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80145de:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80145e2:	6803      	ldr	r3, [r0, #0]
 80145e4:	9500      	str	r5, [sp, #0]
 80145e6:	466d      	mov	r5, sp
 80145e8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80145ec:	f8ad 2006 	strh.w	r2, [sp, #6]
 80145f0:	4629      	mov	r1, r5
 80145f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145f4:	4798      	blx	r3
 80145f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80145fa:	e884 0003 	stmia.w	r4, {r0, r1}
 80145fe:	4620      	mov	r0, r4
 8014600:	b003      	add	sp, #12
 8014602:	bd30      	pop	{r4, r5, pc}

08014604 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8014604:	b513      	push	{r0, r1, r4, lr}
 8014606:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801460a:	4604      	mov	r4, r0
 801460c:	3301      	adds	r3, #1
 801460e:	d109      	bne.n	8014624 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8014610:	4601      	mov	r1, r0
 8014612:	4668      	mov	r0, sp
 8014614:	f7ff faee 	bl	8013bf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014618:	f8bd 3000 	ldrh.w	r3, [sp]
 801461c:	8423      	strh	r3, [r4, #32]
 801461e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014622:	8463      	strh	r3, [r4, #34]	@ 0x22
 8014624:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8014628:	b002      	add	sp, #8
 801462a:	bd10      	pop	{r4, pc}

0801462c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801462c:	b513      	push	{r0, r1, r4, lr}
 801462e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8014632:	4604      	mov	r4, r0
 8014634:	3301      	adds	r3, #1
 8014636:	d109      	bne.n	801464c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8014638:	4601      	mov	r1, r0
 801463a:	4668      	mov	r0, sp
 801463c:	f7ff fada 	bl	8013bf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014640:	f8bd 3000 	ldrh.w	r3, [sp]
 8014644:	8423      	strh	r3, [r4, #32]
 8014646:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801464a:	8463      	strh	r3, [r4, #34]	@ 0x22
 801464c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8014650:	b002      	add	sp, #8
 8014652:	bd10      	pop	{r4, pc}

08014654 <_ZN8touchgfx6ScreenC1Ev>:
 8014654:	b570      	push	{r4, r5, r6, lr}
 8014656:	4b17      	ldr	r3, [pc, #92]	@ (80146b4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8014658:	4605      	mov	r5, r0
 801465a:	4a17      	ldr	r2, [pc, #92]	@ (80146b8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801465c:	2101      	movs	r1, #1
 801465e:	f845 3b04 	str.w	r3, [r5], #4
 8014662:	2300      	movs	r3, #0
 8014664:	6042      	str	r2, [r0, #4]
 8014666:	4604      	mov	r4, r0
 8014668:	8103      	strh	r3, [r0, #8]
 801466a:	8143      	strh	r3, [r0, #10]
 801466c:	8183      	strh	r3, [r0, #12]
 801466e:	81c3      	strh	r3, [r0, #14]
 8014670:	8203      	strh	r3, [r0, #16]
 8014672:	8243      	strh	r3, [r0, #18]
 8014674:	8283      	strh	r3, [r0, #20]
 8014676:	82c3      	strh	r3, [r0, #22]
 8014678:	6203      	str	r3, [r0, #32]
 801467a:	8483      	strh	r3, [r0, #36]	@ 0x24
 801467c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801467e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8014682:	6343      	str	r3, [r0, #52]	@ 0x34
 8014684:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8014688:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801468c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8014690:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8014694:	4b09      	ldr	r3, [pc, #36]	@ (80146bc <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8014696:	4628      	mov	r0, r5
 8014698:	f9b3 6000 	ldrsh.w	r6, [r3]
 801469c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801469e:	4a08      	ldr	r2, [pc, #32]	@ (80146c0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80146a0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80146a4:	4798      	blx	r3
 80146a6:	6863      	ldr	r3, [r4, #4]
 80146a8:	4628      	mov	r0, r5
 80146aa:	4631      	mov	r1, r6
 80146ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80146ae:	4798      	blx	r3
 80146b0:	4620      	mov	r0, r4
 80146b2:	bd70      	pop	{r4, r5, r6, pc}
 80146b4:	08023f9c 	.word	0x08023f9c
 80146b8:	08023bb4 	.word	0x08023bb4
 80146bc:	24025136 	.word	0x24025136
 80146c0:	24025134 	.word	0x24025134

080146c4 <_ZN8touchgfx6Screen4drawEv>:
 80146c4:	4b09      	ldr	r3, [pc, #36]	@ (80146ec <_ZN8touchgfx6Screen4drawEv+0x28>)
 80146c6:	b507      	push	{r0, r1, r2, lr}
 80146c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80146cc:	2100      	movs	r1, #0
 80146ce:	4b08      	ldr	r3, [pc, #32]	@ (80146f0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80146d0:	9100      	str	r1, [sp, #0]
 80146d2:	4669      	mov	r1, sp
 80146d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80146d8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80146dc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80146e0:	6803      	ldr	r3, [r0, #0]
 80146e2:	689b      	ldr	r3, [r3, #8]
 80146e4:	4798      	blx	r3
 80146e6:	b003      	add	sp, #12
 80146e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80146ec:	24025134 	.word	0x24025134
 80146f0:	24025136 	.word	0x24025136

080146f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80146f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146f8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80146fc:	b089      	sub	sp, #36	@ 0x24
 80146fe:	4680      	mov	r8, r0
 8014700:	460c      	mov	r4, r1
 8014702:	2b00      	cmp	r3, #0
 8014704:	4615      	mov	r5, r2
 8014706:	dd0e      	ble.n	8014726 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014708:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801470c:	2b00      	cmp	r3, #0
 801470e:	dd0a      	ble.n	8014726 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014710:	4628      	mov	r0, r5
 8014712:	f7ff ff5b 	bl	80145cc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014716:	4621      	mov	r1, r4
 8014718:	f7fe f879 	bl	801280e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801471c:	69eb      	ldr	r3, [r5, #28]
 801471e:	b928      	cbnz	r0, 801472c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8014720:	461d      	mov	r5, r3
 8014722:	2b00      	cmp	r3, #0
 8014724:	d1f4      	bne.n	8014710 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8014726:	b009      	add	sp, #36	@ 0x24
 8014728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801472c:	ae04      	add	r6, sp, #16
 801472e:	2b00      	cmp	r3, #0
 8014730:	f000 80b5 	beq.w	801489e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014734:	682b      	ldr	r3, [r5, #0]
 8014736:	4629      	mov	r1, r5
 8014738:	a802      	add	r0, sp, #8
 801473a:	68db      	ldr	r3, [r3, #12]
 801473c:	4798      	blx	r3
 801473e:	4628      	mov	r0, r5
 8014740:	f7ff ff60 	bl	8014604 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014744:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8014748:	4407      	add	r7, r0
 801474a:	4628      	mov	r0, r5
 801474c:	f7ff ff6e 	bl	801462c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014750:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014754:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8014758:	b23f      	sxth	r7, r7
 801475a:	4418      	add	r0, r3
 801475c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014760:	4621      	mov	r1, r4
 8014762:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014766:	f8ad 0012 	strh.w	r0, [sp, #18]
 801476a:	4630      	mov	r0, r6
 801476c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014770:	f8ad 7010 	strh.w	r7, [sp, #16]
 8014774:	f7f9 f844 	bl	800d800 <_ZN8touchgfx4RectaNERKS0_>
 8014778:	4628      	mov	r0, r5
 801477a:	f7ff ff27 	bl	80145cc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801477e:	ab06      	add	r3, sp, #24
 8014780:	4602      	mov	r2, r0
 8014782:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014786:	e883 0003 	stmia.w	r3, {r0, r1}
 801478a:	4611      	mov	r1, r2
 801478c:	4618      	mov	r0, r3
 801478e:	f7f9 f837 	bl	800d800 <_ZN8touchgfx4RectaNERKS0_>
 8014792:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014796:	f9b4 1000 	ldrsh.w	r1, [r4]
 801479a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801479e:	4299      	cmp	r1, r3
 80147a0:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80147a4:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80147a8:	d10b      	bne.n	80147c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80147aa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80147ae:	4552      	cmp	r2, sl
 80147b0:	d107      	bne.n	80147c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80147b2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80147b6:	455a      	cmp	r2, fp
 80147b8:	d103      	bne.n	80147c2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80147ba:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80147be:	454a      	cmp	r2, r9
 80147c0:	d06d      	beq.n	801489e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80147c2:	f1bb 0f00 	cmp.w	fp, #0
 80147c6:	dd65      	ble.n	8014894 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80147c8:	f1b9 0f00 	cmp.w	r9, #0
 80147cc:	dd62      	ble.n	8014894 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80147ce:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80147d2:	fa1f f08a 	uxth.w	r0, sl
 80147d6:	4552      	cmp	r2, sl
 80147d8:	9000      	str	r0, [sp, #0]
 80147da:	da12      	bge.n	8014802 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80147dc:	9301      	str	r3, [sp, #4]
 80147de:	9b00      	ldr	r3, [sp, #0]
 80147e0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80147e4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80147e8:	1a9a      	subs	r2, r3, r2
 80147ea:	f8ad 1010 	strh.w	r1, [sp, #16]
 80147ee:	4631      	mov	r1, r6
 80147f0:	f8ad 0014 	strh.w	r0, [sp, #20]
 80147f4:	4640      	mov	r0, r8
 80147f6:	f8ad 2016 	strh.w	r2, [sp, #22]
 80147fa:	69ea      	ldr	r2, [r5, #28]
 80147fc:	f7ff ff7a 	bl	80146f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014800:	9b01      	ldr	r3, [sp, #4]
 8014802:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014806:	b29f      	uxth	r7, r3
 8014808:	429a      	cmp	r2, r3
 801480a:	da0d      	bge.n	8014828 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801480c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014810:	1aba      	subs	r2, r7, r2
 8014812:	f8ad a012 	strh.w	sl, [sp, #18]
 8014816:	4631      	mov	r1, r6
 8014818:	f8ad 2014 	strh.w	r2, [sp, #20]
 801481c:	4640      	mov	r0, r8
 801481e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014822:	69ea      	ldr	r2, [r5, #28]
 8014824:	f7ff ff66 	bl	80146f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014828:	8822      	ldrh	r2, [r4, #0]
 801482a:	445f      	add	r7, fp
 801482c:	88a3      	ldrh	r3, [r4, #4]
 801482e:	b2bf      	uxth	r7, r7
 8014830:	4413      	add	r3, r2
 8014832:	b23a      	sxth	r2, r7
 8014834:	b29b      	uxth	r3, r3
 8014836:	b219      	sxth	r1, r3
 8014838:	4291      	cmp	r1, r2
 801483a:	dd0d      	ble.n	8014858 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801483c:	1bdb      	subs	r3, r3, r7
 801483e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014842:	f8ad a012 	strh.w	sl, [sp, #18]
 8014846:	4631      	mov	r1, r6
 8014848:	f8ad 3014 	strh.w	r3, [sp, #20]
 801484c:	4640      	mov	r0, r8
 801484e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014852:	69ea      	ldr	r2, [r5, #28]
 8014854:	f7ff ff4e 	bl	80146f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014858:	88e2      	ldrh	r2, [r4, #6]
 801485a:	8863      	ldrh	r3, [r4, #2]
 801485c:	4413      	add	r3, r2
 801485e:	9a00      	ldr	r2, [sp, #0]
 8014860:	444a      	add	r2, r9
 8014862:	b29b      	uxth	r3, r3
 8014864:	fa1f f982 	uxth.w	r9, r2
 8014868:	b219      	sxth	r1, r3
 801486a:	fa0f f289 	sxth.w	r2, r9
 801486e:	428a      	cmp	r2, r1
 8014870:	da15      	bge.n	801489e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014872:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014876:	eba3 0309 	sub.w	r3, r3, r9
 801487a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801487e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8014882:	4631      	mov	r1, r6
 8014884:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014888:	f8ad 2012 	strh.w	r2, [sp, #18]
 801488c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014890:	69ea      	ldr	r2, [r5, #28]
 8014892:	e001      	b.n	8014898 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8014894:	69ea      	ldr	r2, [r5, #28]
 8014896:	4621      	mov	r1, r4
 8014898:	4640      	mov	r0, r8
 801489a:	f7ff ff2b 	bl	80146f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801489e:	4628      	mov	r0, r5
 80148a0:	f7ff fe94 	bl	80145cc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80148a4:	6861      	ldr	r1, [r4, #4]
 80148a6:	4602      	mov	r2, r0
 80148a8:	4633      	mov	r3, r6
 80148aa:	6820      	ldr	r0, [r4, #0]
 80148ac:	c303      	stmia	r3!, {r0, r1}
 80148ae:	4611      	mov	r1, r2
 80148b0:	4630      	mov	r0, r6
 80148b2:	f7f8 ffa5 	bl	800d800 <_ZN8touchgfx4RectaNERKS0_>
 80148b6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	f77f af33 	ble.w	8014726 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80148c0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	f77f af2e 	ble.w	8014726 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80148ca:	4628      	mov	r0, r5
 80148cc:	f7ff fe9a 	bl	8014604 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80148d0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80148d4:	1a18      	subs	r0, r3, r0
 80148d6:	f8ad 0010 	strh.w	r0, [sp, #16]
 80148da:	4628      	mov	r0, r5
 80148dc:	f7ff fea6 	bl	801462c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80148e0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80148e4:	4631      	mov	r1, r6
 80148e6:	1a18      	subs	r0, r3, r0
 80148e8:	f8ad 0012 	strh.w	r0, [sp, #18]
 80148ec:	4628      	mov	r0, r5
 80148ee:	682b      	ldr	r3, [r5, #0]
 80148f0:	689b      	ldr	r3, [r3, #8]
 80148f2:	4798      	blx	r3
 80148f4:	e717      	b.n	8014726 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080148f6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80148f6:	b570      	push	{r4, r5, r6, lr}
 80148f8:	1d06      	adds	r6, r0, #4
 80148fa:	b086      	sub	sp, #24
 80148fc:	460c      	mov	r4, r1
 80148fe:	2300      	movs	r3, #0
 8014900:	4631      	mov	r1, r6
 8014902:	4605      	mov	r5, r0
 8014904:	a802      	add	r0, sp, #8
 8014906:	9301      	str	r3, [sp, #4]
 8014908:	f7ff f974 	bl	8013bf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801490c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014910:	8822      	ldrh	r2, [r4, #0]
 8014912:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8014916:	1ad2      	subs	r2, r2, r3
 8014918:	8863      	ldrh	r3, [r4, #2]
 801491a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801491e:	1a5b      	subs	r3, r3, r1
 8014920:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8014924:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014928:	aa01      	add	r2, sp, #4
 801492a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801492e:	4630      	mov	r0, r6
 8014930:	f8ad 1016 	strh.w	r1, [sp, #22]
 8014934:	a904      	add	r1, sp, #16
 8014936:	f8ad 3012 	strh.w	r3, [sp, #18]
 801493a:	f7f9 f839 	bl	800d9b0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801493e:	9a01      	ldr	r2, [sp, #4]
 8014940:	b11a      	cbz	r2, 801494a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8014942:	4621      	mov	r1, r4
 8014944:	4628      	mov	r0, r5
 8014946:	f7ff fed5 	bl	80146f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801494a:	b006      	add	sp, #24
 801494c:	bd70      	pop	{r4, r5, r6, pc}

0801494e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801494e:	4602      	mov	r2, r0
 8014950:	b530      	push	{r4, r5, lr}
 8014952:	4604      	mov	r4, r0
 8014954:	b085      	sub	sp, #20
 8014956:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801495a:	460d      	mov	r5, r1
 801495c:	466b      	mov	r3, sp
 801495e:	6851      	ldr	r1, [r2, #4]
 8014960:	c303      	stmia	r3!, {r0, r1}
 8014962:	4629      	mov	r1, r5
 8014964:	4668      	mov	r0, sp
 8014966:	f7f8 ff4b 	bl	800d800 <_ZN8touchgfx4RectaNERKS0_>
 801496a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801496e:	b12b      	cbz	r3, 801497c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8014970:	4669      	mov	r1, sp
 8014972:	4620      	mov	r0, r4
 8014974:	f7ff ffbf 	bl	80148f6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8014978:	b005      	add	sp, #20
 801497a:	bd30      	pop	{r4, r5, pc}
 801497c:	3404      	adds	r4, #4
 801497e:	a802      	add	r0, sp, #8
 8014980:	4621      	mov	r1, r4
 8014982:	f7ff f937 	bl	8013bf4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014986:	f8bd 3000 	ldrh.w	r3, [sp]
 801498a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801498e:	4669      	mov	r1, sp
 8014990:	4620      	mov	r0, r4
 8014992:	1a9b      	subs	r3, r3, r2
 8014994:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8014998:	f8ad 3000 	strh.w	r3, [sp]
 801499c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80149a0:	1a9b      	subs	r3, r3, r2
 80149a2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80149a6:	f7f8 ffca 	bl	800d93e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80149aa:	e7e5      	b.n	8014978 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080149ac <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80149ac:	460b      	mov	r3, r1
 80149ae:	680a      	ldr	r2, [r1, #0]
 80149b0:	1d01      	adds	r1, r0, #4
 80149b2:	6992      	ldr	r2, [r2, #24]
 80149b4:	4618      	mov	r0, r3
 80149b6:	4710      	bx	r2

080149b8 <_ZN8touchgfx12TextProviderC1Ev>:
 80149b8:	b538      	push	{r3, r4, r5, lr}
 80149ba:	2500      	movs	r5, #0
 80149bc:	2302      	movs	r3, #2
 80149be:	4604      	mov	r4, r0
 80149c0:	220e      	movs	r2, #14
 80149c2:	7403      	strb	r3, [r0, #16]
 80149c4:	4629      	mov	r1, r5
 80149c6:	6145      	str	r5, [r0, #20]
 80149c8:	7605      	strb	r5, [r0, #24]
 80149ca:	83c5      	strh	r5, [r0, #30]
 80149cc:	8405      	strh	r5, [r0, #32]
 80149ce:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80149d0:	8705      	strh	r5, [r0, #56]	@ 0x38
 80149d2:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 80149d4:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 80149d8:	e9c0 5500 	strd	r5, r5, [r0]
 80149dc:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 80149e0:	304c      	adds	r0, #76	@ 0x4c
 80149e2:	f00b ff19 	bl	8020818 <memset>
 80149e6:	2301      	movs	r3, #1
 80149e8:	4620      	mov	r0, r4
 80149ea:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 80149ee:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80149f2:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 80149f6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 80149fa:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 80149fe:	f7ef fac5 	bl	8003f8c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8014a02:	4620      	mov	r0, r4
 8014a04:	bd38      	pop	{r3, r4, r5, pc}

08014a06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8014a06:	b530      	push	{r4, r5, lr}
 8014a08:	2500      	movs	r5, #0
 8014a0a:	2401      	movs	r4, #1
 8014a0c:	6843      	ldr	r3, [r0, #4]
 8014a0e:	b913      	cbnz	r3, 8014a16 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8014a10:	6803      	ldr	r3, [r0, #0]
 8014a12:	b313      	cbz	r3, 8014a5a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014a14:	6043      	str	r3, [r0, #4]
 8014a16:	7e03      	ldrb	r3, [r0, #24]
 8014a18:	b143      	cbz	r3, 8014a2c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8014a1a:	6943      	ldr	r3, [r0, #20]
 8014a1c:	b12b      	cbz	r3, 8014a2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8014a1e:	881a      	ldrh	r2, [r3, #0]
 8014a20:	b11a      	cbz	r2, 8014a2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8014a22:	1c9a      	adds	r2, r3, #2
 8014a24:	6142      	str	r2, [r0, #20]
 8014a26:	8818      	ldrh	r0, [r3, #0]
 8014a28:	bd30      	pop	{r4, r5, pc}
 8014a2a:	7605      	strb	r5, [r0, #24]
 8014a2c:	6843      	ldr	r3, [r0, #4]
 8014a2e:	8819      	ldrh	r1, [r3, #0]
 8014a30:	b199      	cbz	r1, 8014a5a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014a32:	1c9a      	adds	r2, r3, #2
 8014a34:	2902      	cmp	r1, #2
 8014a36:	6042      	str	r2, [r0, #4]
 8014a38:	d1f5      	bne.n	8014a26 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8014a3a:	7c03      	ldrb	r3, [r0, #16]
 8014a3c:	2b01      	cmp	r3, #1
 8014a3e:	d8e5      	bhi.n	8014a0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014a40:	1c5a      	adds	r2, r3, #1
 8014a42:	3302      	adds	r3, #2
 8014a44:	7402      	strb	r2, [r0, #16]
 8014a46:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8014a4a:	6143      	str	r3, [r0, #20]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d0dd      	beq.n	8014a0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014a50:	881b      	ldrh	r3, [r3, #0]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d0da      	beq.n	8014a0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014a56:	7604      	strb	r4, [r0, #24]
 8014a58:	e7d8      	b.n	8014a0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014a5a:	2000      	movs	r0, #0
 8014a5c:	e7e4      	b.n	8014a28 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08014a5e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8014a5e:	6001      	str	r1, [r0, #0]
 8014a60:	2100      	movs	r1, #0
 8014a62:	b430      	push	{r4, r5}
 8014a64:	6041      	str	r1, [r0, #4]
 8014a66:	6815      	ldr	r5, [r2, #0]
 8014a68:	6085      	str	r5, [r0, #8]
 8014a6a:	6852      	ldr	r2, [r2, #4]
 8014a6c:	6443      	str	r3, [r0, #68]	@ 0x44
 8014a6e:	9b02      	ldr	r3, [sp, #8]
 8014a70:	60c2      	str	r2, [r0, #12]
 8014a72:	7401      	strb	r1, [r0, #16]
 8014a74:	6141      	str	r1, [r0, #20]
 8014a76:	7601      	strb	r1, [r0, #24]
 8014a78:	8701      	strh	r1, [r0, #56]	@ 0x38
 8014a7a:	8401      	strh	r1, [r0, #32]
 8014a7c:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8014a80:	6483      	str	r3, [r0, #72]	@ 0x48
 8014a82:	bc30      	pop	{r4, r5}
 8014a84:	f7ef ba82 	b.w	8003f8c <_ZN8touchgfx12TextProvider18initializeInternalEv>

08014a88 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8014a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a8a:	4605      	mov	r5, r0
 8014a8c:	4608      	mov	r0, r1
 8014a8e:	b1f1      	cbz	r1, 8014ace <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8014a90:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8014a94:	460b      	mov	r3, r1
 8014a96:	f101 0708 	add.w	r7, r1, #8
 8014a9a:	4622      	mov	r2, r4
 8014a9c:	6818      	ldr	r0, [r3, #0]
 8014a9e:	3308      	adds	r3, #8
 8014aa0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8014aa4:	4626      	mov	r6, r4
 8014aa6:	42bb      	cmp	r3, r7
 8014aa8:	c603      	stmia	r6!, {r0, r1}
 8014aaa:	4634      	mov	r4, r6
 8014aac:	d1f6      	bne.n	8014a9c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8014aae:	6818      	ldr	r0, [r3, #0]
 8014ab0:	6030      	str	r0, [r6, #0]
 8014ab2:	4610      	mov	r0, r2
 8014ab4:	889b      	ldrh	r3, [r3, #4]
 8014ab6:	80b3      	strh	r3, [r6, #4]
 8014ab8:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8014abc:	015b      	lsls	r3, r3, #5
 8014abe:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8014ac2:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8014ac6:	430b      	orrs	r3, r1
 8014ac8:	425b      	negs	r3, r3
 8014aca:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8014ace:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014ad0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8014ad0:	b538      	push	{r3, r4, r5, lr}
 8014ad2:	460c      	mov	r4, r1
 8014ad4:	6811      	ldr	r1, [r2, #0]
 8014ad6:	4610      	mov	r0, r2
 8014ad8:	68cd      	ldr	r5, [r1, #12]
 8014ada:	4619      	mov	r1, r3
 8014adc:	47a8      	blx	r5
 8014ade:	2800      	cmp	r0, #0
 8014ae0:	bf08      	it	eq
 8014ae2:	4620      	moveq	r0, r4
 8014ae4:	bd38      	pop	{r3, r4, r5, pc}
	...

08014ae8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8014ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aea:	4604      	mov	r4, r0
 8014aec:	4615      	mov	r5, r2
 8014aee:	4608      	mov	r0, r1
 8014af0:	b93a      	cbnz	r2, 8014b02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8014af2:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8014af6:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8014afa:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 8014afe:	4628      	mov	r0, r5
 8014b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b02:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8014b06:	f46f 6763 	mvn.w	r7, #3632	@ 0xe30
 8014b0a:	8893      	ldrh	r3, [r2, #4]
 8014b0c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8014b10:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8014b14:	79ee      	ldrb	r6, [r5, #7]
 8014b16:	4316      	orrs	r6, r2
 8014b18:	19da      	adds	r2, r3, r7
 8014b1a:	b291      	uxth	r1, r2
 8014b1c:	b2b7      	uxth	r7, r6
 8014b1e:	291d      	cmp	r1, #29
 8014b20:	d87b      	bhi.n	8014c1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8014b22:	2201      	movs	r2, #1
 8014b24:	10f6      	asrs	r6, r6, #3
 8014b26:	408a      	lsls	r2, r1
 8014b28:	4974      	ldr	r1, [pc, #464]	@ (8014cfc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8014b2a:	420a      	tst	r2, r1
 8014b2c:	d12e      	bne.n	8014b8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8014b2e:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8014b32:	d072      	beq.n	8014c1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8014b34:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8014b38:	462b      	mov	r3, r5
 8014b3a:	f105 0e08 	add.w	lr, r5, #8
 8014b3e:	4615      	mov	r5, r2
 8014b40:	6818      	ldr	r0, [r3, #0]
 8014b42:	3308      	adds	r3, #8
 8014b44:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8014b48:	4694      	mov	ip, r2
 8014b4a:	4573      	cmp	r3, lr
 8014b4c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014b50:	4662      	mov	r2, ip
 8014b52:	d1f5      	bne.n	8014b40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8014b54:	6818      	ldr	r0, [r3, #0]
 8014b56:	f8cc 0000 	str.w	r0, [ip]
 8014b5a:	889b      	ldrh	r3, [r3, #4]
 8014b5c:	f8ac 3004 	strh.w	r3, [ip, #4]
 8014b60:	b2b3      	uxth	r3, r6
 8014b62:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8014b66:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 8014b6a:	1aca      	subs	r2, r1, r3
 8014b6c:	1bcf      	subs	r7, r1, r7
 8014b6e:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8014b72:	b292      	uxth	r2, r2
 8014b74:	1afb      	subs	r3, r7, r3
 8014b76:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 8014b7a:	10d2      	asrs	r2, r2, #3
 8014b7c:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8014b80:	4302      	orrs	r2, r0
 8014b82:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 8014b86:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8014b8a:	e7b8      	b.n	8014afe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8014b8c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8014b8e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014b92:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8014b94:	f640 6333 	movw	r3, #3635	@ 0xe33
 8014b98:	4299      	cmp	r1, r3
 8014b9a:	d110      	bne.n	8014bbe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8014b9c:	6803      	ldr	r3, [r0, #0]
 8014b9e:	68db      	ldr	r3, [r3, #12]
 8014ba0:	4798      	blx	r3
 8014ba2:	7b41      	ldrb	r1, [r0, #13]
 8014ba4:	00cb      	lsls	r3, r1, #3
 8014ba6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014baa:	7a03      	ldrb	r3, [r0, #8]
 8014bac:	0648      	lsls	r0, r1, #25
 8014bae:	ea43 0302 	orr.w	r3, r3, r2
 8014bb2:	bf44      	itt	mi
 8014bb4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014bb8:	b21b      	sxthmi	r3, r3
 8014bba:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014bbe:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8014bc2:	462a      	mov	r2, r5
 8014bc4:	f105 0c08 	add.w	ip, r5, #8
 8014bc8:	443b      	add	r3, r7
 8014bca:	4433      	add	r3, r6
 8014bcc:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 8014bd0:	b29b      	uxth	r3, r3
 8014bd2:	4635      	mov	r5, r6
 8014bd4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014bd8:	6810      	ldr	r0, [r2, #0]
 8014bda:	3208      	adds	r2, #8
 8014bdc:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8014be0:	4637      	mov	r7, r6
 8014be2:	4562      	cmp	r2, ip
 8014be4:	c703      	stmia	r7!, {r0, r1}
 8014be6:	463e      	mov	r6, r7
 8014be8:	d1f6      	bne.n	8014bd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8014bea:	6810      	ldr	r0, [r2, #0]
 8014bec:	6038      	str	r0, [r7, #0]
 8014bee:	8892      	ldrh	r2, [r2, #4]
 8014bf0:	80ba      	strh	r2, [r7, #4]
 8014bf2:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8014bf6:	10db      	asrs	r3, r3, #3
 8014bf8:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8014bfc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014c00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8014c04:	4313      	orrs	r3, r2
 8014c06:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 8014c0a:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8014c0e:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8014c12:	1a9b      	subs	r3, r3, r2
 8014c14:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 8014c18:	e771      	b.n	8014afe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8014c1a:	f023 0204 	bic.w	r2, r3, #4
 8014c1e:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8014c22:	428a      	cmp	r2, r1
 8014c24:	d003      	beq.n	8014c2e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8014c26:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8014c2a:	4293      	cmp	r3, r2
 8014c2c:	d120      	bne.n	8014c70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8014c2e:	3b01      	subs	r3, #1
 8014c30:	4602      	mov	r2, r0
 8014c32:	4629      	mov	r1, r5
 8014c34:	4620      	mov	r0, r4
 8014c36:	b29b      	uxth	r3, r3
 8014c38:	f7ff ff4a 	bl	8014ad0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014c3c:	7b41      	ldrb	r1, [r0, #13]
 8014c3e:	00cb      	lsls	r3, r1, #3
 8014c40:	0649      	lsls	r1, r1, #25
 8014c42:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014c46:	7a03      	ldrb	r3, [r0, #8]
 8014c48:	ea43 0302 	orr.w	r3, r3, r2
 8014c4c:	bf44      	itt	mi
 8014c4e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014c52:	b21b      	sxthmi	r3, r3
 8014c54:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014c58:	7b6b      	ldrb	r3, [r5, #13]
 8014c5a:	7aaa      	ldrb	r2, [r5, #10]
 8014c5c:	005b      	lsls	r3, r3, #1
 8014c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014c62:	4313      	orrs	r3, r2
 8014c64:	115a      	asrs	r2, r3, #5
 8014c66:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8014c6a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8014c6e:	e035      	b.n	8014cdc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8014c70:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8014c74:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 8014c78:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8014c7c:	7a2a      	ldrb	r2, [r5, #8]
 8014c7e:	ea42 0201 	orr.w	r2, r2, r1
 8014c82:	f640 6109 	movw	r1, #3593	@ 0xe09
 8014c86:	bf1c      	itt	ne
 8014c88:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 8014c8c:	b212      	sxthne	r2, r2
 8014c8e:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8014c92:	f023 0210 	bic.w	r2, r3, #16
 8014c96:	428a      	cmp	r2, r1
 8014c98:	d003      	beq.n	8014ca2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8014c9a:	f640 6213 	movw	r2, #3603	@ 0xe13
 8014c9e:	4293      	cmp	r3, r2
 8014ca0:	d129      	bne.n	8014cf6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8014ca2:	7b6e      	ldrb	r6, [r5, #13]
 8014ca4:	4629      	mov	r1, r5
 8014ca6:	0076      	lsls	r6, r6, #1
 8014ca8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8014cac:	7aae      	ldrb	r6, [r5, #10]
 8014cae:	4316      	orrs	r6, r2
 8014cb0:	f640 6213 	movw	r2, #3603	@ 0xe13
 8014cb4:	4293      	cmp	r3, r2
 8014cb6:	4602      	mov	r2, r0
 8014cb8:	4620      	mov	r0, r4
 8014cba:	bf16      	itet	ne
 8014cbc:	f103 33ff 	addne.w	r3, r3, #4294967295
 8014cc0:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8014cc4:	b29b      	uxthne	r3, r3
 8014cc6:	f7ff ff03 	bl	8014ad0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014cca:	7b43      	ldrb	r3, [r0, #13]
 8014ccc:	7a82      	ldrb	r2, [r0, #10]
 8014cce:	005b      	lsls	r3, r3, #1
 8014cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014cd4:	4313      	orrs	r3, r2
 8014cd6:	1af6      	subs	r6, r6, r3
 8014cd8:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 8014cdc:	7b69      	ldrb	r1, [r5, #13]
 8014cde:	00cb      	lsls	r3, r1, #3
 8014ce0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014ce4:	7a2b      	ldrb	r3, [r5, #8]
 8014ce6:	4313      	orrs	r3, r2
 8014ce8:	064a      	lsls	r2, r1, #25
 8014cea:	bf44      	itt	mi
 8014cec:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014cf0:	b21b      	sxthmi	r3, r3
 8014cf2:	1bdb      	subs	r3, r3, r7
 8014cf4:	e747      	b.n	8014b86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	e7b7      	b.n	8014c6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8014cfa:	bf00      	nop
 8014cfc:	3fc00079 	.word	0x3fc00079

08014d00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8014d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d04:	4604      	mov	r4, r0
 8014d06:	b942      	cbnz	r2, 8014d1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8014d08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014d0c:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8014d10:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8014d14:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8014d18:	e047      	b.n	8014daa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8014d1a:	7b51      	ldrb	r1, [r2, #13]
 8014d1c:	8893      	ldrh	r3, [r2, #4]
 8014d1e:	010d      	lsls	r5, r1, #4
 8014d20:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8014d24:	79d5      	ldrb	r5, [r2, #7]
 8014d26:	4305      	orrs	r5, r0
 8014d28:	2d04      	cmp	r5, #4
 8014d2a:	bfcc      	ite	gt
 8014d2c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8014d30:	f04f 0e01 	movle.w	lr, #1
 8014d34:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8014d38:	f200 80ab 	bhi.w	8014e92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8014d3c:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8014d40:	4283      	cmp	r3, r0
 8014d42:	d216      	bcs.n	8014d72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014d44:	f240 605b 	movw	r0, #1627	@ 0x65b
 8014d48:	4283      	cmp	r3, r0
 8014d4a:	d859      	bhi.n	8014e00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8014d4c:	f240 6057 	movw	r0, #1623	@ 0x657
 8014d50:	4283      	cmp	r3, r0
 8014d52:	d20e      	bcs.n	8014d72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014d54:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8014d58:	d24a      	bcs.n	8014df0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8014d5a:	f240 604e 	movw	r0, #1614	@ 0x64e
 8014d5e:	4283      	cmp	r3, r0
 8014d60:	d207      	bcs.n	8014d72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014d62:	f240 601a 	movw	r0, #1562	@ 0x61a
 8014d66:	4283      	cmp	r3, r0
 8014d68:	d02a      	beq.n	8014dc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014d6a:	d821      	bhi.n	8014db0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8014d6c:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8014d70:	d35b      	bcc.n	8014e2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014d72:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8014d76:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8014d7a:	f040 80d0 	bne.w	8014f1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8014d7e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8014d82:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014d86:	f040 80ca 	bne.w	8014f1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8014d8a:	00cb      	lsls	r3, r1, #3
 8014d8c:	0649      	lsls	r1, r1, #25
 8014d8e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8014d92:	7a13      	ldrb	r3, [r2, #8]
 8014d94:	ea43 0300 	orr.w	r3, r3, r0
 8014d98:	bf44      	itt	mi
 8014d9a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014d9e:	b21b      	sxthmi	r3, r3
 8014da0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014da4:	1b5d      	subs	r5, r3, r5
 8014da6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8014daa:	4610      	mov	r0, r2
 8014dac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014db0:	f240 604b 	movw	r0, #1611	@ 0x64b
 8014db4:	4283      	cmp	r3, r0
 8014db6:	d338      	bcc.n	8014e2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014db8:	f240 604c 	movw	r0, #1612	@ 0x64c
 8014dbc:	4283      	cmp	r3, r0
 8014dbe:	d9d8      	bls.n	8014d72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014dc0:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8014dc4:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8014dc8:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014dcc:	f040 80f3 	bne.w	8014fb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8014dd0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8014dd4:	f040 80ef 	bne.w	8014fb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8014dd8:	00cb      	lsls	r3, r1, #3
 8014dda:	064e      	lsls	r6, r1, #25
 8014ddc:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8014de0:	7a13      	ldrb	r3, [r2, #8]
 8014de2:	ea43 0300 	orr.w	r3, r3, r0
 8014de6:	bf44      	itt	mi
 8014de8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014dec:	b21b      	sxthmi	r3, r3
 8014dee:	e7d9      	b.n	8014da4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8014df0:	f240 6054 	movw	r0, #1620	@ 0x654
 8014df4:	4283      	cmp	r3, r0
 8014df6:	d8e3      	bhi.n	8014dc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014df8:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8014dfc:	d9e0      	bls.n	8014dc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014dfe:	e7b8      	b.n	8014d72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014e00:	f240 6074 	movw	r0, #1652	@ 0x674
 8014e04:	4283      	cmp	r3, r0
 8014e06:	d0b4      	beq.n	8014d72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014e08:	d82d      	bhi.n	8014e66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8014e0a:	f240 605e 	movw	r0, #1630	@ 0x65e
 8014e0e:	4283      	cmp	r3, r0
 8014e10:	d804      	bhi.n	8014e1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8014e12:	f240 605d 	movw	r0, #1629	@ 0x65d
 8014e16:	4283      	cmp	r3, r0
 8014e18:	d3d2      	bcc.n	8014dc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014e1a:	e7aa      	b.n	8014d72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014e1c:	f240 605f 	movw	r0, #1631	@ 0x65f
 8014e20:	4283      	cmp	r3, r0
 8014e22:	d0cd      	beq.n	8014dc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014e24:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8014e28:	d0a3      	beq.n	8014d72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014e2a:	00cb      	lsls	r3, r1, #3
 8014e2c:	0649      	lsls	r1, r1, #25
 8014e2e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8014e32:	7a13      	ldrb	r3, [r2, #8]
 8014e34:	ea43 0300 	orr.w	r3, r3, r0
 8014e38:	bf44      	itt	mi
 8014e3a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014e3e:	b21b      	sxthmi	r3, r3
 8014e40:	1b5d      	subs	r5, r3, r5
 8014e42:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014e46:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8014e4a:	7b53      	ldrb	r3, [r2, #13]
 8014e4c:	015b      	lsls	r3, r3, #5
 8014e4e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8014e52:	7993      	ldrb	r3, [r2, #6]
 8014e54:	430b      	orrs	r3, r1
 8014e56:	2105      	movs	r1, #5
 8014e58:	005b      	lsls	r3, r3, #1
 8014e5a:	fb93 f3f1 	sdiv	r3, r3, r1
 8014e5e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8014e62:	440b      	add	r3, r1
 8014e64:	e756      	b.n	8014d14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8014e66:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8014e6a:	4283      	cmp	r3, r0
 8014e6c:	d809      	bhi.n	8014e82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8014e6e:	f240 60df 	movw	r0, #1759	@ 0x6df
 8014e72:	4283      	cmp	r3, r0
 8014e74:	f4bf af7d 	bcs.w	8014d72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014e78:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8014e7c:	2b05      	cmp	r3, #5
 8014e7e:	d8d4      	bhi.n	8014e2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014e80:	e777      	b.n	8014d72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014e82:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8014e86:	4283      	cmp	r3, r0
 8014e88:	d09a      	beq.n	8014dc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014e8a:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8014e8e:	4283      	cmp	r3, r0
 8014e90:	e7ca      	b.n	8014e28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8014e92:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8014e96:	d22b      	bcs.n	8014ef0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8014e98:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8014e9c:	4283      	cmp	r3, r0
 8014e9e:	d28f      	bcs.n	8014dc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014ea0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8014ea4:	4283      	cmp	r3, r0
 8014ea6:	d816      	bhi.n	8014ed6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8014ea8:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8014eac:	4283      	cmp	r3, r0
 8014eae:	f4bf af60 	bcs.w	8014d72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014eb2:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8014eb6:	4283      	cmp	r3, r0
 8014eb8:	d80a      	bhi.n	8014ed0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8014eba:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8014ebe:	4283      	cmp	r3, r0
 8014ec0:	f4bf af57 	bcs.w	8014d72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014ec4:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8014ec8:	4283      	cmp	r3, r0
 8014eca:	f43f af79 	beq.w	8014dc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014ece:	e7ac      	b.n	8014e2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014ed0:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8014ed4:	e7f8      	b.n	8014ec8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8014ed6:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8014eda:	4283      	cmp	r3, r0
 8014edc:	d802      	bhi.n	8014ee4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8014ede:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8014ee2:	e798      	b.n	8014e16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8014ee4:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8014ee8:	4283      	cmp	r3, r0
 8014eea:	f47f af42 	bne.w	8014d72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014eee:	e767      	b.n	8014dc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014ef0:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8014ef4:	4283      	cmp	r3, r0
 8014ef6:	f43f af63 	beq.w	8014dc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014efa:	d802      	bhi.n	8014f02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8014efc:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8014f00:	e7f2      	b.n	8014ee8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8014f02:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8014f06:	4283      	cmp	r3, r0
 8014f08:	d805      	bhi.n	8014f16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8014f0a:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8014f0e:	4283      	cmp	r3, r0
 8014f10:	f4ff af2f 	bcc.w	8014d72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014f14:	e754      	b.n	8014dc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014f16:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8014f1a:	4283      	cmp	r3, r0
 8014f1c:	e7af      	b.n	8014e7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8014f1e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8014f22:	4617      	mov	r7, r2
 8014f24:	f102 0808 	add.w	r8, r2, #8
 8014f28:	4666      	mov	r6, ip
 8014f2a:	6838      	ldr	r0, [r7, #0]
 8014f2c:	3708      	adds	r7, #8
 8014f2e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8014f32:	46e6      	mov	lr, ip
 8014f34:	4547      	cmp	r7, r8
 8014f36:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8014f3a:	46f4      	mov	ip, lr
 8014f3c:	d1f5      	bne.n	8014f2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8014f3e:	6838      	ldr	r0, [r7, #0]
 8014f40:	f8ce 0000 	str.w	r0, [lr]
 8014f44:	88b9      	ldrh	r1, [r7, #4]
 8014f46:	f8ae 1004 	strh.w	r1, [lr, #4]
 8014f4a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8014f4e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014f52:	d009      	beq.n	8014f68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8014f54:	7b51      	ldrb	r1, [r2, #13]
 8014f56:	7992      	ldrb	r2, [r2, #6]
 8014f58:	0149      	lsls	r1, r1, #5
 8014f5a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8014f5e:	4311      	orrs	r1, r2
 8014f60:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014f64:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8014f68:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8014f6c:	b2ad      	uxth	r5, r5
 8014f6e:	d00d      	beq.n	8014f8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8014f70:	442b      	add	r3, r5
 8014f72:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8014f76:	b29b      	uxth	r3, r3
 8014f78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8014f7c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8014f80:	10db      	asrs	r3, r3, #3
 8014f82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014f86:	4313      	orrs	r3, r2
 8014f88:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8014f8c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8014f90:	00cb      	lsls	r3, r1, #3
 8014f92:	064f      	lsls	r7, r1, #25
 8014f94:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014f98:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8014f9c:	ea43 0302 	orr.w	r3, r3, r2
 8014fa0:	bf44      	itt	mi
 8014fa2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014fa6:	b21b      	sxthmi	r3, r3
 8014fa8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014fac:	1b5b      	subs	r3, r3, r5
 8014fae:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8014fb2:	4632      	mov	r2, r6
 8014fb4:	e6f9      	b.n	8014daa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8014fb6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8014fba:	4617      	mov	r7, r2
 8014fbc:	f102 0908 	add.w	r9, r2, #8
 8014fc0:	4666      	mov	r6, ip
 8014fc2:	6838      	ldr	r0, [r7, #0]
 8014fc4:	3708      	adds	r7, #8
 8014fc6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8014fca:	46e0      	mov	r8, ip
 8014fcc:	454f      	cmp	r7, r9
 8014fce:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8014fd2:	46c4      	mov	ip, r8
 8014fd4:	d1f5      	bne.n	8014fc2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8014fd6:	6838      	ldr	r0, [r7, #0]
 8014fd8:	f8c8 0000 	str.w	r0, [r8]
 8014fdc:	88b9      	ldrh	r1, [r7, #4]
 8014fde:	f8a8 1004 	strh.w	r1, [r8, #4]
 8014fe2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8014fe6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014fea:	d009      	beq.n	8015000 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8014fec:	7b51      	ldrb	r1, [r2, #13]
 8014fee:	7992      	ldrb	r2, [r2, #6]
 8014ff0:	0149      	lsls	r1, r1, #5
 8014ff2:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8014ff6:	4311      	orrs	r1, r2
 8014ff8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014ffc:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8015000:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8015004:	d00e      	beq.n	8015024 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8015006:	eba3 030e 	sub.w	r3, r3, lr
 801500a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801500e:	b29b      	uxth	r3, r3
 8015010:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8015014:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8015018:	10db      	asrs	r3, r3, #3
 801501a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801501e:	4313      	orrs	r3, r2
 8015020:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8015024:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8015028:	00cb      	lsls	r3, r1, #3
 801502a:	0648      	lsls	r0, r1, #25
 801502c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015030:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8015034:	ea43 0302 	orr.w	r3, r3, r2
 8015038:	bf44      	itt	mi
 801503a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801503e:	b21b      	sxthmi	r3, r3
 8015040:	1b5d      	subs	r5, r3, r5
 8015042:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8015046:	e7b4      	b.n	8014fb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08015048 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8015048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801504c:	461e      	mov	r6, r3
 801504e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8015050:	4604      	mov	r4, r0
 8015052:	4617      	mov	r7, r2
 8015054:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015058:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801505c:	f7ee ff54 	bl	8003f08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015060:	4605      	mov	r5, r0
 8015062:	b918      	cbnz	r0, 801506c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8015064:	6030      	str	r0, [r6, #0]
 8015066:	4628      	mov	r0, r5
 8015068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	4601      	mov	r1, r0
 8015070:	4638      	mov	r0, r7
 8015072:	68db      	ldr	r3, [r3, #12]
 8015074:	4798      	blx	r3
 8015076:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801507a:	4602      	mov	r2, r0
 801507c:	6030      	str	r0, [r6, #0]
 801507e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015082:	d213      	bcs.n	80150ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8015084:	4643      	mov	r3, r8
 8015086:	4639      	mov	r1, r7
 8015088:	4620      	mov	r0, r4
 801508a:	f7ff fe39 	bl	8014d00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801508e:	6030      	str	r0, [r6, #0]
 8015090:	6833      	ldr	r3, [r6, #0]
 8015092:	b143      	cbz	r3, 80150a6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8015094:	7b5a      	ldrb	r2, [r3, #13]
 8015096:	7a9b      	ldrb	r3, [r3, #10]
 8015098:	0052      	lsls	r2, r2, #1
 801509a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801509e:	4313      	orrs	r3, r2
 80150a0:	bf0c      	ite	eq
 80150a2:	2301      	moveq	r3, #1
 80150a4:	2300      	movne	r3, #0
 80150a6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 80150aa:	e7dc      	b.n	8015066 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80150ac:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 80150b0:	b29b      	uxth	r3, r3
 80150b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80150b4:	d804      	bhi.n	80150c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80150b6:	4639      	mov	r1, r7
 80150b8:	4620      	mov	r0, r4
 80150ba:	f7ff fd15 	bl	8014ae8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80150be:	e7e6      	b.n	801508e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80150c0:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d0e3      	beq.n	8015090 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80150c8:	f640 1302 	movw	r3, #2306	@ 0x902
 80150cc:	429d      	cmp	r5, r3
 80150ce:	d1df      	bne.n	8015090 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80150d0:	4601      	mov	r1, r0
 80150d2:	4620      	mov	r0, r4
 80150d4:	f7ff fcd8 	bl	8014a88 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80150d8:	e7d9      	b.n	801508e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080150da <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80150da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150de:	461e      	mov	r6, r3
 80150e0:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80150e2:	4604      	mov	r4, r0
 80150e4:	4617      	mov	r7, r2
 80150e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80150ea:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80150ee:	f7ee ff0b 	bl	8003f08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80150f2:	4605      	mov	r5, r0
 80150f4:	b918      	cbnz	r0, 80150fe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 80150f6:	6030      	str	r0, [r6, #0]
 80150f8:	4628      	mov	r0, r5
 80150fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	4601      	mov	r1, r0
 8015102:	4638      	mov	r0, r7
 8015104:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8015108:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801510c:	47c8      	blx	r9
 801510e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8015112:	4602      	mov	r2, r0
 8015114:	6030      	str	r0, [r6, #0]
 8015116:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801511a:	d213      	bcs.n	8015144 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801511c:	4643      	mov	r3, r8
 801511e:	4639      	mov	r1, r7
 8015120:	4620      	mov	r0, r4
 8015122:	f7ff fded 	bl	8014d00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8015126:	6030      	str	r0, [r6, #0]
 8015128:	6833      	ldr	r3, [r6, #0]
 801512a:	b143      	cbz	r3, 801513e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801512c:	7b5a      	ldrb	r2, [r3, #13]
 801512e:	7a9b      	ldrb	r3, [r3, #10]
 8015130:	0052      	lsls	r2, r2, #1
 8015132:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8015136:	4313      	orrs	r3, r2
 8015138:	bf0c      	ite	eq
 801513a:	2301      	moveq	r3, #1
 801513c:	2300      	movne	r3, #0
 801513e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8015142:	e7d9      	b.n	80150f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8015144:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8015148:	b29b      	uxth	r3, r3
 801514a:	2b7f      	cmp	r3, #127	@ 0x7f
 801514c:	d804      	bhi.n	8015158 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801514e:	4639      	mov	r1, r7
 8015150:	4620      	mov	r0, r4
 8015152:	f7ff fcc9 	bl	8014ae8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8015156:	e7e6      	b.n	8015126 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8015158:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801515c:	2b00      	cmp	r3, #0
 801515e:	d0e3      	beq.n	8015128 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8015160:	f640 1302 	movw	r3, #2306	@ 0x902
 8015164:	429d      	cmp	r5, r3
 8015166:	d1df      	bne.n	8015128 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8015168:	4601      	mov	r1, r0
 801516a:	4620      	mov	r0, r4
 801516c:	f7ff fc8c 	bl	8014a88 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8015170:	e7d9      	b.n	8015126 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08015172 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8015172:	b510      	push	{r4, lr}
 8015174:	4604      	mov	r4, r0
 8015176:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801517a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801517c:	b1e1      	cbz	r1, 80151b8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801517e:	2b0a      	cmp	r3, #10
 8015180:	d02d      	beq.n	80151de <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8015182:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8015184:	3901      	subs	r1, #1
 8015186:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801518a:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801518c:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8015190:	1c51      	adds	r1, r2, #1
 8015192:	b289      	uxth	r1, r1
 8015194:	2901      	cmp	r1, #1
 8015196:	bf8a      	itet	hi
 8015198:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801519c:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801519e:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 80151a0:	1c5a      	adds	r2, r3, #1
 80151a2:	8722      	strh	r2, [r4, #56]	@ 0x38
 80151a4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80151a6:	4413      	add	r3, r2
 80151a8:	b29b      	uxth	r3, r3
 80151aa:	2b09      	cmp	r3, #9
 80151ac:	bf88      	it	hi
 80151ae:	3b0a      	subhi	r3, #10
 80151b0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80151b4:	8458      	strh	r0, [r3, #34]	@ 0x22
 80151b6:	e7de      	b.n	8015176 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80151b8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80151ba:	2b0a      	cmp	r3, #10
 80151bc:	d00f      	beq.n	80151de <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80151be:	4620      	mov	r0, r4
 80151c0:	f7ff fc21 	bl	8014a06 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80151c4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80151c6:	1c5a      	adds	r2, r3, #1
 80151c8:	8722      	strh	r2, [r4, #56]	@ 0x38
 80151ca:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80151cc:	4413      	add	r3, r2
 80151ce:	b29b      	uxth	r3, r3
 80151d0:	2b09      	cmp	r3, #9
 80151d2:	bf88      	it	hi
 80151d4:	3b0a      	subhi	r3, #10
 80151d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80151da:	8458      	strh	r0, [r3, #34]	@ 0x22
 80151dc:	e7ec      	b.n	80151b8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80151de:	bd10      	pop	{r4, pc}

080151e0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80151e0:	b538      	push	{r3, r4, r5, lr}
 80151e2:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80151e4:	4604      	mov	r4, r0
 80151e6:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80151ea:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 80151ec:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 80151ee:	3a01      	subs	r2, #1
 80151f0:	8702      	strh	r2, [r0, #56]	@ 0x38
 80151f2:	1c5a      	adds	r2, r3, #1
 80151f4:	b292      	uxth	r2, r2
 80151f6:	2a09      	cmp	r2, #9
 80151f8:	bf8a      	itet	hi
 80151fa:	3b09      	subhi	r3, #9
 80151fc:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 80151fe:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8015200:	f7ff ffb7 	bl	8015172 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8015204:	8c23      	ldrh	r3, [r4, #32]
 8015206:	2b01      	cmp	r3, #1
 8015208:	bf9c      	itt	ls
 801520a:	3301      	addls	r3, #1
 801520c:	8423      	strhls	r3, [r4, #32]
 801520e:	8be3      	ldrh	r3, [r4, #30]
 8015210:	b90b      	cbnz	r3, 8015216 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8015212:	2302      	movs	r3, #2
 8015214:	83e3      	strh	r3, [r4, #30]
 8015216:	8be3      	ldrh	r3, [r4, #30]
 8015218:	4628      	mov	r0, r5
 801521a:	3b01      	subs	r3, #1
 801521c:	b29b      	uxth	r3, r3
 801521e:	83e3      	strh	r3, [r4, #30]
 8015220:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015224:	8365      	strh	r5, [r4, #26]
 8015226:	bd38      	pop	{r3, r4, r5, pc}

08015228 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8015228:	428a      	cmp	r2, r1
 801522a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801522e:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8015230:	d932      	bls.n	8015298 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8015232:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8015234:	1a54      	subs	r4, r2, r1
 8015236:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801523a:	19ee      	adds	r6, r5, r7
 801523c:	fa1f fe84 	uxth.w	lr, r4
 8015240:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8015244:	3e01      	subs	r6, #1
 8015246:	b2b4      	uxth	r4, r6
 8015248:	eba4 090e 	sub.w	r9, r4, lr
 801524c:	fa1f f989 	uxth.w	r9, r9
 8015250:	2c09      	cmp	r4, #9
 8015252:	4626      	mov	r6, r4
 8015254:	bf88      	it	hi
 8015256:	f1a4 060a 	subhi.w	r6, r4, #10
 801525a:	f1bc 0f00 	cmp.w	ip, #0
 801525e:	f104 34ff 	add.w	r4, r4, #4294967295
 8015262:	bf08      	it	eq
 8015264:	f04f 0c02 	moveq.w	ip, #2
 8015268:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801526c:	b2a4      	uxth	r4, r4
 801526e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015272:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8015276:	454c      	cmp	r4, r9
 8015278:	fa1f fc8c 	uxth.w	ip, ip
 801527c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8015280:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8015284:	d1e4      	bne.n	8015250 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8015286:	eba5 050e 	sub.w	r5, r5, lr
 801528a:	eb0e 0408 	add.w	r4, lr, r8
 801528e:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8015292:	8705      	strh	r5, [r0, #56]	@ 0x38
 8015294:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8015298:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801529a:	250a      	movs	r5, #10
 801529c:	1a64      	subs	r4, r4, r1
 801529e:	4439      	add	r1, r7
 80152a0:	b289      	uxth	r1, r1
 80152a2:	8704      	strh	r4, [r0, #56]	@ 0x38
 80152a4:	2909      	cmp	r1, #9
 80152a6:	bf88      	it	hi
 80152a8:	390a      	subhi	r1, #10
 80152aa:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80152ac:	b18a      	cbz	r2, 80152d2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80152ae:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 80152b0:	3a01      	subs	r2, #1
 80152b2:	3101      	adds	r1, #1
 80152b4:	b292      	uxth	r2, r2
 80152b6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80152ba:	8701      	strh	r1, [r0, #56]	@ 0x38
 80152bc:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80152be:	b901      	cbnz	r1, 80152c2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80152c0:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80152c2:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80152c4:	3901      	subs	r1, #1
 80152c6:	b289      	uxth	r1, r1
 80152c8:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80152ca:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80152ce:	844c      	strh	r4, [r1, #34]	@ 0x22
 80152d0:	e7ec      	b.n	80152ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 80152d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152d6:	f7ff bf4c 	b.w	8015172 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080152da <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80152da:	b570      	push	{r4, r5, r6, lr}
 80152dc:	2500      	movs	r5, #0
 80152de:	4295      	cmp	r5, r2
 80152e0:	d011      	beq.n	8015306 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80152e2:	8bc4      	ldrh	r4, [r0, #30]
 80152e4:	f831 6b02 	ldrh.w	r6, [r1], #2
 80152e8:	4414      	add	r4, r2
 80152ea:	3c01      	subs	r4, #1
 80152ec:	1b64      	subs	r4, r4, r5
 80152ee:	b2a4      	uxth	r4, r4
 80152f0:	2c01      	cmp	r4, #1
 80152f2:	bf88      	it	hi
 80152f4:	3c02      	subhi	r4, #2
 80152f6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80152fa:	8b64      	ldrh	r4, [r4, #26]
 80152fc:	42b4      	cmp	r4, r6
 80152fe:	d117      	bne.n	8015330 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8015300:	3501      	adds	r5, #1
 8015302:	b2ad      	uxth	r5, r5
 8015304:	e7eb      	b.n	80152de <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8015306:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801530a:	2400      	movs	r4, #0
 801530c:	4413      	add	r3, r2
 801530e:	b2a2      	uxth	r2, r4
 8015310:	429a      	cmp	r2, r3
 8015312:	da0f      	bge.n	8015334 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8015314:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8015316:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801531a:	3401      	adds	r4, #1
 801531c:	4432      	add	r2, r6
 801531e:	b292      	uxth	r2, r2
 8015320:	2a09      	cmp	r2, #9
 8015322:	bf88      	it	hi
 8015324:	3a0a      	subhi	r2, #10
 8015326:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801532a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801532c:	42aa      	cmp	r2, r5
 801532e:	d0ee      	beq.n	801530e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8015330:	2000      	movs	r0, #0
 8015332:	bd70      	pop	{r4, r5, r6, pc}
 8015334:	2001      	movs	r0, #1
 8015336:	e7fc      	b.n	8015332 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08015338 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8015338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801533c:	4605      	mov	r5, r0
 801533e:	4616      	mov	r6, r2
 8015340:	1c8c      	adds	r4, r1, #2
 8015342:	8809      	ldrh	r1, [r1, #0]
 8015344:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8015348:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801534c:	42b3      	cmp	r3, r6
 801534e:	d124      	bne.n	801539a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8015350:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8015354:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8015358:	f001 070f 	and.w	r7, r1, #15
 801535c:	4652      	mov	r2, sl
 801535e:	f8cd 8000 	str.w	r8, [sp]
 8015362:	464b      	mov	r3, r9
 8015364:	4621      	mov	r1, r4
 8015366:	4628      	mov	r0, r5
 8015368:	f7ff ffb7 	bl	80152da <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801536c:	4683      	mov	fp, r0
 801536e:	b168      	cbz	r0, 801538c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8015370:	eb0a 0109 	add.w	r1, sl, r9
 8015374:	463a      	mov	r2, r7
 8015376:	4628      	mov	r0, r5
 8015378:	4441      	add	r1, r8
 801537a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801537e:	4649      	mov	r1, r9
 8015380:	f7ff ff52 	bl	8015228 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8015384:	4658      	mov	r0, fp
 8015386:	b003      	add	sp, #12
 8015388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801538c:	eb07 010a 	add.w	r1, r7, sl
 8015390:	4449      	add	r1, r9
 8015392:	4441      	add	r1, r8
 8015394:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8015398:	e7d2      	b.n	8015340 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801539a:	f04f 0b00 	mov.w	fp, #0
 801539e:	e7f1      	b.n	8015384 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080153a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80153a0:	b570      	push	{r4, r5, r6, lr}
 80153a2:	8810      	ldrh	r0, [r2, #0]
 80153a4:	4298      	cmp	r0, r3
 80153a6:	d817      	bhi.n	80153d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80153a8:	1e48      	subs	r0, r1, #1
 80153aa:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80153ae:	4298      	cmp	r0, r3
 80153b0:	d312      	bcc.n	80153d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80153b2:	2400      	movs	r4, #0
 80153b4:	428c      	cmp	r4, r1
 80153b6:	d20f      	bcs.n	80153d8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80153b8:	1860      	adds	r0, r4, r1
 80153ba:	1040      	asrs	r0, r0, #1
 80153bc:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80153c0:	0085      	lsls	r5, r0, #2
 80153c2:	42b3      	cmp	r3, r6
 80153c4:	d902      	bls.n	80153cc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80153c6:	3001      	adds	r0, #1
 80153c8:	b284      	uxth	r4, r0
 80153ca:	e7f3      	b.n	80153b4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80153cc:	d201      	bcs.n	80153d2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80153ce:	b281      	uxth	r1, r0
 80153d0:	e7f0      	b.n	80153b4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80153d2:	442a      	add	r2, r5
 80153d4:	8850      	ldrh	r0, [r2, #2]
 80153d6:	bd70      	pop	{r4, r5, r6, pc}
 80153d8:	2000      	movs	r0, #0
 80153da:	e7fc      	b.n	80153d6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080153dc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80153dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153e0:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 80153e2:	4604      	mov	r4, r0
 80153e4:	260b      	movs	r6, #11
 80153e6:	886f      	ldrh	r7, [r5, #2]
 80153e8:	087f      	lsrs	r7, r7, #1
 80153ea:	3e01      	subs	r6, #1
 80153ec:	d013      	beq.n	8015416 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80153ee:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80153f0:	462a      	mov	r2, r5
 80153f2:	4639      	mov	r1, r7
 80153f4:	4620      	mov	r0, r4
 80153f6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80153fa:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80153fe:	4643      	mov	r3, r8
 8015400:	f7ff ffce 	bl	80153a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8015404:	b138      	cbz	r0, 8015416 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8015406:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801540a:	4642      	mov	r2, r8
 801540c:	4620      	mov	r0, r4
 801540e:	f7ff ff93 	bl	8015338 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8015412:	2800      	cmp	r0, #0
 8015414:	d1e9      	bne.n	80153ea <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8015416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801541c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801541c:	b570      	push	{r4, r5, r6, lr}
 801541e:	694a      	ldr	r2, [r1, #20]
 8015420:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8015422:	684b      	ldr	r3, [r1, #4]
 8015424:	1b54      	subs	r4, r2, r5
 8015426:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8015428:	f000 8106 	beq.w	8015638 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801542c:	1b9b      	subs	r3, r3, r6
 801542e:	d003      	beq.n	8015438 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8015430:	4363      	muls	r3, r4
 8015432:	2210      	movs	r2, #16
 8015434:	fb93 f3f2 	sdiv	r3, r3, r2
 8015438:	680c      	ldr	r4, [r1, #0]
 801543a:	698a      	ldr	r2, [r1, #24]
 801543c:	1b65      	subs	r5, r4, r5
 801543e:	f000 80fd 	beq.w	801563c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8015442:	1b92      	subs	r2, r2, r6
 8015444:	d003      	beq.n	801544e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8015446:	436a      	muls	r2, r5
 8015448:	2410      	movs	r4, #16
 801544a:	fb92 f2f4 	sdiv	r2, r2, r4
 801544e:	1a9b      	subs	r3, r3, r2
 8015450:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8015678 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8015454:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015458:	460a      	mov	r2, r1
 801545a:	ee07 3a90 	vmov	s15, r3
 801545e:	f100 040c 	add.w	r4, r0, #12
 8015462:	4603      	mov	r3, r0
 8015464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015468:	ee67 7a84 	vmul.f32	s15, s15, s8
 801546c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8015470:	eeb1 6a43 	vneg.f32	s12, s6
 8015474:	edd2 7a02 	vldr	s15, [r2, #8]
 8015478:	3214      	adds	r2, #20
 801547a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801547e:	ece3 6a01 	vstmia	r3!, {s13}
 8015482:	429c      	cmp	r4, r3
 8015484:	ed52 7a02 	vldr	s15, [r2, #-8]
 8015488:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801548c:	edc3 7a02 	vstr	s15, [r3, #8]
 8015490:	ed52 7a01 	vldr	s15, [r2, #-4]
 8015494:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015498:	edc3 7a05 	vstr	s15, [r3, #20]
 801549c:	d1ea      	bne.n	8015474 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801549e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80154a0:	698b      	ldr	r3, [r1, #24]
 80154a2:	edd0 4a02 	vldr	s9, [r0, #8]
 80154a6:	1a9b      	subs	r3, r3, r2
 80154a8:	edd0 3a00 	vldr	s7, [r0]
 80154ac:	edd0 6a01 	vldr	s13, [r0, #4]
 80154b0:	ee07 3a90 	vmov	s15, r3
 80154b4:	684b      	ldr	r3, [r1, #4]
 80154b6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80154ba:	ed90 5a05 	vldr	s10, [r0, #20]
 80154be:	1a9b      	subs	r3, r3, r2
 80154c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80154c4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80154c8:	ed90 2a03 	vldr	s4, [r0, #12]
 80154cc:	ee07 3a10 	vmov	s14, r3
 80154d0:	edd0 5a04 	vldr	s11, [r0, #16]
 80154d4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80154d8:	ed90 1a07 	vldr	s2, [r0, #28]
 80154dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80154e0:	edd0 2a06 	vldr	s5, [r0, #24]
 80154e4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80154e8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80154ec:	ee27 7a04 	vmul.f32	s14, s14, s8
 80154f0:	ee32 5a45 	vsub.f32	s10, s4, s10
 80154f4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80154f8:	ee67 7a83 	vmul.f32	s15, s15, s6
 80154fc:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8015500:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8015502:	694a      	ldr	r2, [r1, #20]
 8015504:	1b13      	subs	r3, r2, r4
 8015506:	ee07 3a10 	vmov	s14, r3
 801550a:	680b      	ldr	r3, [r1, #0]
 801550c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015510:	1b1b      	subs	r3, r3, r4
 8015512:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015516:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801551a:	ee07 3a10 	vmov	s14, r3
 801551e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015522:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015526:	eee6 4a87 	vfma.f32	s9, s13, s14
 801552a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801552e:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8015532:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8015534:	698b      	ldr	r3, [r1, #24]
 8015536:	1a9b      	subs	r3, r3, r2
 8015538:	ee06 3a90 	vmov	s13, r3
 801553c:	684b      	ldr	r3, [r1, #4]
 801553e:	1a9b      	subs	r3, r3, r2
 8015540:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015544:	ee07 3a10 	vmov	s14, r3
 8015548:	ee66 6a84 	vmul.f32	s13, s13, s8
 801554c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015550:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8015554:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015558:	eee5 6a87 	vfma.f32	s13, s11, s14
 801555c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8015560:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8015564:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8015566:	694a      	ldr	r2, [r1, #20]
 8015568:	1b13      	subs	r3, r2, r4
 801556a:	ee07 3a10 	vmov	s14, r3
 801556e:	680b      	ldr	r3, [r1, #0]
 8015570:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015574:	1b1b      	subs	r3, r3, r4
 8015576:	ee27 7a04 	vmul.f32	s14, s14, s8
 801557a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801557e:	ee07 3a10 	vmov	s14, r3
 8015582:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015586:	ee27 7a04 	vmul.f32	s14, s14, s8
 801558a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801558e:	edd0 5a08 	vldr	s11, [r0, #32]
 8015592:	ee31 1a65 	vsub.f32	s2, s2, s11
 8015596:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801559a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801559e:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 80155a2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80155a4:	698b      	ldr	r3, [r1, #24]
 80155a6:	1a9b      	subs	r3, r3, r2
 80155a8:	ee07 3a10 	vmov	s14, r3
 80155ac:	684b      	ldr	r3, [r1, #4]
 80155ae:	1a9b      	subs	r3, r3, r2
 80155b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80155b4:	ee01 3a90 	vmov	s3, r3
 80155b8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80155bc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80155c0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80155c4:	ee61 1a84 	vmul.f32	s3, s3, s8
 80155c8:	eea1 7a21 	vfma.f32	s14, s2, s3
 80155cc:	ee27 7a03 	vmul.f32	s14, s14, s6
 80155d0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80155d4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80155d6:	694a      	ldr	r2, [r1, #20]
 80155d8:	1b13      	subs	r3, r2, r4
 80155da:	ee03 3a10 	vmov	s6, r3
 80155de:	680b      	ldr	r3, [r1, #0]
 80155e0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80155e4:	1b1b      	subs	r3, r3, r4
 80155e6:	ee23 3a04 	vmul.f32	s6, s6, s8
 80155ea:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80155ee:	ee03 3a10 	vmov	s6, r3
 80155f2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80155f6:	ee23 4a04 	vmul.f32	s8, s6, s8
 80155fa:	eee1 5a04 	vfma.f32	s11, s2, s8
 80155fe:	ee25 6a86 	vmul.f32	s12, s11, s12
 8015602:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8015606:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801560a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801560e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8015612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015616:	dd13      	ble.n	8015640 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8015618:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801561c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8015620:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8015622:	eee3 7a87 	vfma.f32	s15, s7, s14
 8015626:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801562a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801562e:	dd15      	ble.n	801565c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8015630:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015634:	6403      	str	r3, [r0, #64]	@ 0x40
 8015636:	bd70      	pop	{r4, r5, r6, pc}
 8015638:	4623      	mov	r3, r4
 801563a:	e6fd      	b.n	8015438 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801563c:	462a      	mov	r2, r5
 801563e:	e706      	b.n	801544e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8015640:	d502      	bpl.n	8015648 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8015642:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8015646:	e7e9      	b.n	801561c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8015648:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801564c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8015650:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8015654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015658:	dade      	bge.n	8015618 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801565a:	e7f2      	b.n	8015642 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801565c:	d502      	bpl.n	8015664 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801565e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8015662:	e7e7      	b.n	8015634 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8015664:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8015668:	eee3 4a86 	vfma.f32	s9, s7, s12
 801566c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8015670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015674:	dadc      	bge.n	8015630 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8015676:	e7f2      	b.n	801565e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8015678:	3d800000 	.word	0x3d800000

0801567c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801567c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015680:	2714      	movs	r7, #20
 8015682:	435f      	muls	r7, r3
 8015684:	eb02 0c07 	add.w	ip, r2, r7
 8015688:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801568c:	f115 0e0f 	adds.w	lr, r5, #15
 8015690:	f100 80a2 	bmi.w	80157d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8015694:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8015698:	9c08      	ldr	r4, [sp, #32]
 801569a:	2614      	movs	r6, #20
 801569c:	f8c0 e014 	str.w	lr, [r0, #20]
 80156a0:	4366      	muls	r6, r4
 80156a2:	eb02 0806 	add.w	r8, r2, r6
 80156a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80156aa:	f115 040f 	adds.w	r4, r5, #15
 80156ae:	f100 809f 	bmi.w	80157f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80156b2:	1124      	asrs	r4, r4, #4
 80156b4:	eba4 040e 	sub.w	r4, r4, lr
 80156b8:	6184      	str	r4, [r0, #24]
 80156ba:	2c00      	cmp	r4, #0
 80156bc:	f000 808a 	beq.w	80157d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80156c0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80156c4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80156c8:	5995      	ldr	r5, [r2, r6]
 80156ca:	eba4 0809 	sub.w	r8, r4, r9
 80156ce:	59d4      	ldr	r4, [r2, r7]
 80156d0:	eba5 0a04 	sub.w	sl, r5, r4
 80156d4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80156d8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80156dc:	fb0e fe05 	mul.w	lr, lr, r5
 80156e0:	fb0a ee19 	mls	lr, sl, r9, lr
 80156e4:	fb08 e404 	mla	r4, r8, r4, lr
 80156e8:	3c01      	subs	r4, #1
 80156ea:	19a4      	adds	r4, r4, r6
 80156ec:	f100 808c 	bmi.w	8015808 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80156f0:	fb94 fef6 	sdiv	lr, r4, r6
 80156f4:	fb06 441e 	mls	r4, r6, lr, r4
 80156f8:	f8c0 e000 	str.w	lr, [r0]
 80156fc:	6104      	str	r4, [r0, #16]
 80156fe:	2d00      	cmp	r5, #0
 8015700:	f2c0 8095 	blt.w	801582e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8015704:	fb95 f4f6 	sdiv	r4, r5, r6
 8015708:	fb06 5514 	mls	r5, r6, r4, r5
 801570c:	6044      	str	r4, [r0, #4]
 801570e:	6085      	str	r5, [r0, #8]
 8015710:	60c6      	str	r6, [r0, #12]
 8015712:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015716:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801571a:	6945      	ldr	r5, [r0, #20]
 801571c:	59d2      	ldr	r2, [r2, r7]
 801571e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8015722:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8015850 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8015726:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801572a:	ee07 4a10 	vmov	s14, r4
 801572e:	6804      	ldr	r4, [r0, #0]
 8015730:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8015734:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015738:	ee07 2a90 	vmov	s15, r2
 801573c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015744:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015748:	edd3 6a00 	vldr	s13, [r3]
 801574c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015750:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8015754:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015758:	edc0 6a07 	vstr	s13, [r0, #28]
 801575c:	edd0 6a01 	vldr	s13, [r0, #4]
 8015760:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8015764:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015768:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801576c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015770:	ed80 6a08 	vstr	s12, [r0, #32]
 8015774:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8015776:	6242      	str	r2, [r0, #36]	@ 0x24
 8015778:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801577c:	ed93 6a03 	vldr	s12, [r3, #12]
 8015780:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015784:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8015788:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801578c:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8015790:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8015794:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8015798:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801579c:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 80157a0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80157a2:	6302      	str	r2, [r0, #48]	@ 0x30
 80157a4:	ed93 6a06 	vldr	s12, [r3, #24]
 80157a8:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 80157ac:	eea5 6a87 	vfma.f32	s12, s11, s14
 80157b0:	eeb0 7a46 	vmov.f32	s14, s12
 80157b4:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 80157b8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80157bc:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80157c0:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 80157c4:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 80157c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80157cc:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 80157d0:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80157d2:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80157d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157d8:	2410      	movs	r4, #16
 80157da:	f1c5 0501 	rsb	r5, r5, #1
 80157de:	fb9e fef4 	sdiv	lr, lr, r4
 80157e2:	f015 050f 	ands.w	r5, r5, #15
 80157e6:	bf18      	it	ne
 80157e8:	2501      	movne	r5, #1
 80157ea:	ebae 0e05 	sub.w	lr, lr, r5
 80157ee:	e753      	b.n	8015698 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80157f0:	f04f 0910 	mov.w	r9, #16
 80157f4:	f1c5 0501 	rsb	r5, r5, #1
 80157f8:	fb94 f4f9 	sdiv	r4, r4, r9
 80157fc:	f015 050f 	ands.w	r5, r5, #15
 8015800:	bf18      	it	ne
 8015802:	2501      	movne	r5, #1
 8015804:	1b64      	subs	r4, r4, r5
 8015806:	e755      	b.n	80156b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8015808:	4264      	negs	r4, r4
 801580a:	fb94 fef6 	sdiv	lr, r4, r6
 801580e:	f1ce 0800 	rsb	r8, lr, #0
 8015812:	fb06 441e 	mls	r4, r6, lr, r4
 8015816:	f8c0 8000 	str.w	r8, [r0]
 801581a:	6104      	str	r4, [r0, #16]
 801581c:	2c00      	cmp	r4, #0
 801581e:	f43f af6e 	beq.w	80156fe <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8015822:	ea6f 0e0e 	mvn.w	lr, lr
 8015826:	1b34      	subs	r4, r6, r4
 8015828:	f8c0 e000 	str.w	lr, [r0]
 801582c:	e766      	b.n	80156fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801582e:	426d      	negs	r5, r5
 8015830:	fb95 f4f6 	sdiv	r4, r5, r6
 8015834:	f1c4 0e00 	rsb	lr, r4, #0
 8015838:	fb06 5514 	mls	r5, r6, r4, r5
 801583c:	f8c0 e004 	str.w	lr, [r0, #4]
 8015840:	6085      	str	r5, [r0, #8]
 8015842:	2d00      	cmp	r5, #0
 8015844:	f43f af64 	beq.w	8015710 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8015848:	43e4      	mvns	r4, r4
 801584a:	1b75      	subs	r5, r6, r5
 801584c:	6044      	str	r4, [r0, #4]
 801584e:	e75e      	b.n	801570e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8015850:	3d800000 	.word	0x3d800000

08015854 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8015854:	4b01      	ldr	r3, [pc, #4]	@ (801585c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8015856:	6018      	str	r0, [r3, #0]
 8015858:	4770      	bx	lr
 801585a:	bf00      	nop
 801585c:	240251a8 	.word	0x240251a8

08015860 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8015860:	4b06      	ldr	r3, [pc, #24]	@ (801587c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8015862:	881a      	ldrh	r2, [r3, #0]
 8015864:	4282      	cmp	r2, r0
 8015866:	d807      	bhi.n	8015878 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8015868:	4b05      	ldr	r3, [pc, #20]	@ (8015880 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801586a:	881b      	ldrh	r3, [r3, #0]
 801586c:	4413      	add	r3, r2
 801586e:	4298      	cmp	r0, r3
 8015870:	bfac      	ite	ge
 8015872:	2000      	movge	r0, #0
 8015874:	2001      	movlt	r0, #1
 8015876:	4770      	bx	lr
 8015878:	2000      	movs	r0, #0
 801587a:	4770      	bx	lr
 801587c:	240251c8 	.word	0x240251c8
 8015880:	240251cc 	.word	0x240251cc

08015884 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8015884:	b508      	push	{r3, lr}
 8015886:	4601      	mov	r1, r0
 8015888:	f7ff ffea 	bl	8015860 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801588c:	b118      	cbz	r0, 8015896 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801588e:	4b02      	ldr	r3, [pc, #8]	@ (8015898 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8015896:	bd08      	pop	{r3, pc}
 8015898:	240251ac 	.word	0x240251ac

0801589c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801589c:	b538      	push	{r3, r4, r5, lr}
 801589e:	4604      	mov	r4, r0
 80158a0:	f7ff ffde 	bl	8015860 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80158a4:	b1d8      	cbz	r0, 80158de <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 80158a6:	4b0f      	ldr	r3, [pc, #60]	@ (80158e4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 80158a8:	881b      	ldrh	r3, [r3, #0]
 80158aa:	1ae4      	subs	r4, r4, r3
 80158ac:	230e      	movs	r3, #14
 80158ae:	4363      	muls	r3, r4
 80158b0:	4c0d      	ldr	r4, [pc, #52]	@ (80158e8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 80158b2:	6825      	ldr	r5, [r4, #0]
 80158b4:	18ea      	adds	r2, r5, r3
 80158b6:	7b12      	ldrb	r2, [r2, #12]
 80158b8:	f012 0220 	ands.w	r2, r2, #32
 80158bc:	d010      	beq.n	80158e0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 80158be:	f9b1 2000 	ldrsh.w	r2, [r1]
 80158c2:	52ea      	strh	r2, [r5, r3]
 80158c4:	6822      	ldr	r2, [r4, #0]
 80158c6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80158ca:	441a      	add	r2, r3
 80158cc:	8055      	strh	r5, [r2, #2]
 80158ce:	6822      	ldr	r2, [r4, #0]
 80158d0:	4413      	add	r3, r2
 80158d2:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 80158d6:	809a      	strh	r2, [r3, #4]
 80158d8:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80158dc:	80da      	strh	r2, [r3, #6]
 80158de:	bd38      	pop	{r3, r4, r5, pc}
 80158e0:	4610      	mov	r0, r2
 80158e2:	e7fc      	b.n	80158de <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 80158e4:	240251c8 	.word	0x240251c8
 80158e8:	240251b0 	.word	0x240251b0

080158ec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 80158ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80158f0:	4606      	mov	r6, r0
 80158f2:	460c      	mov	r4, r1
 80158f4:	f7ff ffb4 	bl	8015860 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80158f8:	b918      	cbnz	r0, 8015902 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 80158fa:	2000      	movs	r0, #0
 80158fc:	b002      	add	sp, #8
 80158fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015902:	4608      	mov	r0, r1
 8015904:	f7f7 ffbf 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015908:	2800      	cmp	r0, #0
 801590a:	d1f6      	bne.n	80158fa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801590c:	4b3f      	ldr	r3, [pc, #252]	@ (8015a0c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801590e:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8015a10 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8015912:	881d      	ldrh	r5, [r3, #0]
 8015914:	f8d9 a000 	ldr.w	sl, [r9]
 8015918:	46c8      	mov	r8, r9
 801591a:	1b73      	subs	r3, r6, r5
 801591c:	250e      	movs	r5, #14
 801591e:	435d      	muls	r5, r3
 8015920:	eb0a 0705 	add.w	r7, sl, r5
 8015924:	7b3b      	ldrb	r3, [r7, #12]
 8015926:	f013 0f20 	tst.w	r3, #32
 801592a:	d0e6      	beq.n	80158fa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801592c:	4621      	mov	r1, r4
 801592e:	4638      	mov	r0, r7
 8015930:	f7fc ffe0 	bl	80128f4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015934:	2800      	cmp	r0, #0
 8015936:	d1e1      	bne.n	80158fc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8015938:	4639      	mov	r1, r7
 801593a:	4620      	mov	r0, r4
 801593c:	f7fc ffda 	bl	80128f4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015940:	b108      	cbz	r0, 8015946 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8015942:	4621      	mov	r1, r4
 8015944:	e020      	b.n	8015988 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8015946:	f9b4 2000 	ldrsh.w	r2, [r4]
 801594a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801594e:	429a      	cmp	r2, r3
 8015950:	d11e      	bne.n	8015990 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8015952:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8015956:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801595a:	429a      	cmp	r2, r3
 801595c:	d118      	bne.n	8015990 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801595e:	6820      	ldr	r0, [r4, #0]
 8015960:	466b      	mov	r3, sp
 8015962:	6861      	ldr	r1, [r4, #4]
 8015964:	c303      	stmia	r3!, {r0, r1}
 8015966:	4639      	mov	r1, r7
 8015968:	4668      	mov	r0, sp
 801596a:	f7fc ffe9 	bl	8012940 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801596e:	f8d9 3000 	ldr.w	r3, [r9]
 8015972:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015976:	442b      	add	r3, r5
 8015978:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801597c:	4413      	add	r3, r2
 801597e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8015982:	4293      	cmp	r3, r2
 8015984:	dc04      	bgt.n	8015990 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8015986:	4669      	mov	r1, sp
 8015988:	4630      	mov	r0, r6
 801598a:	f7ff ff87 	bl	801589c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801598e:	e7b5      	b.n	80158fc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8015990:	f8d8 3000 	ldr.w	r3, [r8]
 8015994:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015998:	442b      	add	r3, r5
 801599a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801599e:	4291      	cmp	r1, r2
 80159a0:	d119      	bne.n	80159d6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80159a2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80159a6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80159aa:	4291      	cmp	r1, r2
 80159ac:	d113      	bne.n	80159d6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80159ae:	6820      	ldr	r0, [r4, #0]
 80159b0:	466a      	mov	r2, sp
 80159b2:	6861      	ldr	r1, [r4, #4]
 80159b4:	c203      	stmia	r2!, {r0, r1}
 80159b6:	4619      	mov	r1, r3
 80159b8:	4668      	mov	r0, sp
 80159ba:	f7fc ffc1 	bl	8012940 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80159be:	f8d8 3000 	ldr.w	r3, [r8]
 80159c2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80159c6:	442b      	add	r3, r5
 80159c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80159cc:	4413      	add	r3, r2
 80159ce:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80159d2:	4293      	cmp	r3, r2
 80159d4:	ddd7      	ble.n	8015986 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 80159d6:	4620      	mov	r0, r4
 80159d8:	f7f7 ff55 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 80159dc:	b990      	cbnz	r0, 8015a04 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 80159de:	88a7      	ldrh	r7, [r4, #4]
 80159e0:	88e3      	ldrh	r3, [r4, #6]
 80159e2:	fb17 f703 	smulbb	r7, r7, r3
 80159e6:	f8d8 3000 	ldr.w	r3, [r8]
 80159ea:	441d      	add	r5, r3
 80159ec:	4628      	mov	r0, r5
 80159ee:	f7f7 ff4a 	bl	800d886 <_ZNK8touchgfx4Rect7isEmptyEv>
 80159f2:	b948      	cbnz	r0, 8015a08 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 80159f4:	88ab      	ldrh	r3, [r5, #4]
 80159f6:	88ea      	ldrh	r2, [r5, #6]
 80159f8:	fb13 f302 	smulbb	r3, r3, r2
 80159fc:	42bb      	cmp	r3, r7
 80159fe:	f6bf af7c 	bge.w	80158fa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8015a02:	e79e      	b.n	8015942 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8015a04:	2700      	movs	r7, #0
 8015a06:	e7ee      	b.n	80159e6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8015a08:	2300      	movs	r3, #0
 8015a0a:	e7f7      	b.n	80159fc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8015a0c:	240251c8 	.word	0x240251c8
 8015a10:	240251b0 	.word	0x240251b0

08015a14 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8015a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a16:	4c24      	ldr	r4, [pc, #144]	@ (8015aa8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8015a18:	6823      	ldr	r3, [r4, #0]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d042      	beq.n	8015aa4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8015a1e:	4a23      	ldr	r2, [pc, #140]	@ (8015aac <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8015a20:	4d23      	ldr	r5, [pc, #140]	@ (8015ab0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8015a22:	8811      	ldrh	r1, [r2, #0]
 8015a24:	f8b5 c000 	ldrh.w	ip, [r5]
 8015a28:	4822      	ldr	r0, [pc, #136]	@ (8015ab4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8015a2a:	4461      	add	r1, ip
 8015a2c:	1c4a      	adds	r2, r1, #1
 8015a2e:	008f      	lsls	r7, r1, #2
 8015a30:	f022 0201 	bic.w	r2, r2, #1
 8015a34:	19de      	adds	r6, r3, r7
 8015a36:	0412      	lsls	r2, r2, #16
 8015a38:	6006      	str	r6, [r0, #0]
 8015a3a:	4e1f      	ldr	r6, [pc, #124]	@ (8015ab8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8015a3c:	0c12      	lsrs	r2, r2, #16
 8015a3e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8015a42:	19da      	adds	r2, r3, r7
 8015a44:	6032      	str	r2, [r6, #0]
 8015a46:	220e      	movs	r2, #14
 8015a48:	fb02 f20c 	mul.w	r2, r2, ip
 8015a4c:	3203      	adds	r2, #3
 8015a4e:	f022 0203 	bic.w	r2, r2, #3
 8015a52:	443a      	add	r2, r7
 8015a54:	4f19      	ldr	r7, [pc, #100]	@ (8015abc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8015a56:	4413      	add	r3, r2
 8015a58:	603b      	str	r3, [r7, #0]
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	4f18      	ldr	r7, [pc, #96]	@ (8015ac0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8015a5e:	469c      	mov	ip, r3
 8015a60:	803b      	strh	r3, [r7, #0]
 8015a62:	4f18      	ldr	r7, [pc, #96]	@ (8015ac4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8015a64:	683f      	ldr	r7, [r7, #0]
 8015a66:	1aba      	subs	r2, r7, r2
 8015a68:	4f17      	ldr	r7, [pc, #92]	@ (8015ac8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8015a6a:	603a      	str	r2, [r7, #0]
 8015a6c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8015a70:	4a16      	ldr	r2, [pc, #88]	@ (8015acc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8015a72:	8013      	strh	r3, [r2, #0]
 8015a74:	428b      	cmp	r3, r1
 8015a76:	d10d      	bne.n	8015a94 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8015a78:	882d      	ldrh	r5, [r5, #0]
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	6830      	ldr	r0, [r6, #0]
 8015a7e:	240e      	movs	r4, #14
 8015a80:	429d      	cmp	r5, r3
 8015a82:	d90f      	bls.n	8015aa4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8015a84:	fb04 0203 	mla	r2, r4, r3, r0
 8015a88:	3301      	adds	r3, #1
 8015a8a:	7b11      	ldrb	r1, [r2, #12]
 8015a8c:	f36f 1145 	bfc	r1, #5, #1
 8015a90:	7311      	strb	r1, [r2, #12]
 8015a92:	e7f5      	b.n	8015a80 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8015a94:	6822      	ldr	r2, [r4, #0]
 8015a96:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8015a9a:	6802      	ldr	r2, [r0, #0]
 8015a9c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8015aa0:	3301      	adds	r3, #1
 8015aa2:	e7e7      	b.n	8015a74 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8015aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015aa6:	bf00      	nop
 8015aa8:	240251ac 	.word	0x240251ac
 8015aac:	240251c8 	.word	0x240251c8
 8015ab0:	240251cc 	.word	0x240251cc
 8015ab4:	240251c0 	.word	0x240251c0
 8015ab8:	240251b0 	.word	0x240251b0
 8015abc:	240251b8 	.word	0x240251b8
 8015ac0:	240251ca 	.word	0x240251ca
 8015ac4:	240251b4 	.word	0x240251b4
 8015ac8:	240251c4 	.word	0x240251c4
 8015acc:	240251bc 	.word	0x240251bc

08015ad0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8015ad0:	4b06      	ldr	r3, [pc, #24]	@ (8015aec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	b943      	cbnz	r3, 8015ae8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8015ad6:	b139      	cbz	r1, 8015ae8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8015ad8:	4b05      	ldr	r3, [pc, #20]	@ (8015af0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8015ada:	801a      	strh	r2, [r3, #0]
 8015adc:	4b05      	ldr	r3, [pc, #20]	@ (8015af4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8015ade:	6019      	str	r1, [r3, #0]
 8015ae0:	4b05      	ldr	r3, [pc, #20]	@ (8015af8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8015ae2:	6018      	str	r0, [r3, #0]
 8015ae4:	f7ff bf96 	b.w	8015a14 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8015ae8:	4770      	bx	lr
 8015aea:	bf00      	nop
 8015aec:	240251b8 	.word	0x240251b8
 8015af0:	240251cc 	.word	0x240251cc
 8015af4:	240251b4 	.word	0x240251b4
 8015af8:	240251ac 	.word	0x240251ac

08015afc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8015afc:	b470      	push	{r4, r5, r6}
 8015afe:	4c07      	ldr	r4, [pc, #28]	@ (8015b1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8015b00:	4605      	mov	r5, r0
 8015b02:	4610      	mov	r0, r2
 8015b04:	9a03      	ldr	r2, [sp, #12]
 8015b06:	6826      	ldr	r6, [r4, #0]
 8015b08:	b936      	cbnz	r6, 8015b18 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8015b0a:	6025      	str	r5, [r4, #0]
 8015b0c:	4c04      	ldr	r4, [pc, #16]	@ (8015b20 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8015b0e:	8021      	strh	r1, [r4, #0]
 8015b10:	4619      	mov	r1, r3
 8015b12:	bc70      	pop	{r4, r5, r6}
 8015b14:	f7ff bfdc 	b.w	8015ad0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8015b18:	bc70      	pop	{r4, r5, r6}
 8015b1a:	4770      	bx	lr
 8015b1c:	240251d0 	.word	0x240251d0
 8015b20:	240251c8 	.word	0x240251c8

08015b24 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8015b24:	4a12      	ldr	r2, [pc, #72]	@ (8015b70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8015b26:	8803      	ldrh	r3, [r0, #0]
 8015b28:	8812      	ldrh	r2, [r2, #0]
 8015b2a:	4293      	cmp	r3, r2
 8015b2c:	d207      	bcs.n	8015b3e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8015b2e:	4a11      	ldr	r2, [pc, #68]	@ (8015b74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8015b30:	2114      	movs	r1, #20
 8015b32:	6812      	ldr	r2, [r2, #0]
 8015b34:	fb01 2303 	mla	r3, r1, r3, r2
 8015b38:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8015b3c:	4770      	bx	lr
 8015b3e:	490e      	ldr	r1, [pc, #56]	@ (8015b78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8015b40:	8809      	ldrh	r1, [r1, #0]
 8015b42:	4411      	add	r1, r2
 8015b44:	428b      	cmp	r3, r1
 8015b46:	da04      	bge.n	8015b52 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8015b48:	1a9b      	subs	r3, r3, r2
 8015b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8015b7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8015b4c:	210e      	movs	r1, #14
 8015b4e:	6812      	ldr	r2, [r2, #0]
 8015b50:	e7f0      	b.n	8015b34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8015b52:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015b56:	4293      	cmp	r3, r2
 8015b58:	d108      	bne.n	8015b6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8015b5a:	4b09      	ldr	r3, [pc, #36]	@ (8015b80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8015b5c:	781b      	ldrb	r3, [r3, #0]
 8015b5e:	b91b      	cbnz	r3, 8015b68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8015b60:	4b08      	ldr	r3, [pc, #32]	@ (8015b84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8015b62:	f9b3 0000 	ldrsh.w	r0, [r3]
 8015b66:	4770      	bx	lr
 8015b68:	4b07      	ldr	r3, [pc, #28]	@ (8015b88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8015b6a:	e7fa      	b.n	8015b62 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8015b6c:	2000      	movs	r0, #0
 8015b6e:	4770      	bx	lr
 8015b70:	240251c8 	.word	0x240251c8
 8015b74:	240251d0 	.word	0x240251d0
 8015b78:	240251cc 	.word	0x240251cc
 8015b7c:	240251b0 	.word	0x240251b0
 8015b80:	24025138 	.word	0x24025138
 8015b84:	2402513a 	.word	0x2402513a
 8015b88:	2402513c 	.word	0x2402513c

08015b8c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8015b8c:	4a12      	ldr	r2, [pc, #72]	@ (8015bd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8015b8e:	8803      	ldrh	r3, [r0, #0]
 8015b90:	8812      	ldrh	r2, [r2, #0]
 8015b92:	4293      	cmp	r3, r2
 8015b94:	d207      	bcs.n	8015ba6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8015b96:	4a11      	ldr	r2, [pc, #68]	@ (8015bdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8015b98:	2114      	movs	r1, #20
 8015b9a:	6812      	ldr	r2, [r2, #0]
 8015b9c:	fb01 2303 	mla	r3, r1, r3, r2
 8015ba0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8015ba4:	4770      	bx	lr
 8015ba6:	490e      	ldr	r1, [pc, #56]	@ (8015be0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8015ba8:	8809      	ldrh	r1, [r1, #0]
 8015baa:	4411      	add	r1, r2
 8015bac:	428b      	cmp	r3, r1
 8015bae:	da04      	bge.n	8015bba <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8015bb0:	1a9b      	subs	r3, r3, r2
 8015bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8015be4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8015bb4:	210e      	movs	r1, #14
 8015bb6:	6812      	ldr	r2, [r2, #0]
 8015bb8:	e7f0      	b.n	8015b9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8015bba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015bbe:	4293      	cmp	r3, r2
 8015bc0:	d108      	bne.n	8015bd4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8015bc2:	4b09      	ldr	r3, [pc, #36]	@ (8015be8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8015bc4:	781b      	ldrb	r3, [r3, #0]
 8015bc6:	b91b      	cbnz	r3, 8015bd0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8015bc8:	4b08      	ldr	r3, [pc, #32]	@ (8015bec <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8015bca:	f9b3 0000 	ldrsh.w	r0, [r3]
 8015bce:	4770      	bx	lr
 8015bd0:	4b07      	ldr	r3, [pc, #28]	@ (8015bf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8015bd2:	e7fa      	b.n	8015bca <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8015bd4:	2000      	movs	r0, #0
 8015bd6:	4770      	bx	lr
 8015bd8:	240251c8 	.word	0x240251c8
 8015bdc:	240251d0 	.word	0x240251d0
 8015be0:	240251cc 	.word	0x240251cc
 8015be4:	240251b0 	.word	0x240251b0
 8015be8:	24025138 	.word	0x24025138
 8015bec:	2402513c 	.word	0x2402513c
 8015bf0:	2402513a 	.word	0x2402513a

08015bf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8015bf4:	4a22      	ldr	r2, [pc, #136]	@ (8015c80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8015bf6:	b530      	push	{r4, r5, lr}
 8015bf8:	880b      	ldrh	r3, [r1, #0]
 8015bfa:	8812      	ldrh	r2, [r2, #0]
 8015bfc:	4293      	cmp	r3, r2
 8015bfe:	d213      	bcs.n	8015c28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8015c00:	4a20      	ldr	r2, [pc, #128]	@ (8015c84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8015c02:	2114      	movs	r1, #20
 8015c04:	6812      	ldr	r2, [r2, #0]
 8015c06:	fb01 2303 	mla	r3, r1, r3, r2
 8015c0a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8015c0e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8015c12:	8a1a      	ldrh	r2, [r3, #16]
 8015c14:	8a5b      	ldrh	r3, [r3, #18]
 8015c16:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8015c1a:	8004      	strh	r4, [r0, #0]
 8015c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c20:	8041      	strh	r1, [r0, #2]
 8015c22:	8082      	strh	r2, [r0, #4]
 8015c24:	80c3      	strh	r3, [r0, #6]
 8015c26:	e024      	b.n	8015c72 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8015c28:	4917      	ldr	r1, [pc, #92]	@ (8015c88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8015c2a:	8809      	ldrh	r1, [r1, #0]
 8015c2c:	4411      	add	r1, r2
 8015c2e:	428b      	cmp	r3, r1
 8015c30:	da10      	bge.n	8015c54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8015c32:	1a9b      	subs	r3, r3, r2
 8015c34:	220e      	movs	r2, #14
 8015c36:	4353      	muls	r3, r2
 8015c38:	4a14      	ldr	r2, [pc, #80]	@ (8015c8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8015c3a:	6811      	ldr	r1, [r2, #0]
 8015c3c:	18ca      	adds	r2, r1, r3
 8015c3e:	5ecd      	ldrsh	r5, [r1, r3]
 8015c40:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8015c44:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8015c48:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8015c4c:	8005      	strh	r5, [r0, #0]
 8015c4e:	8044      	strh	r4, [r0, #2]
 8015c50:	8081      	strh	r1, [r0, #4]
 8015c52:	e7e7      	b.n	8015c24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8015c54:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015c58:	4293      	cmp	r3, r2
 8015c5a:	d10b      	bne.n	8015c74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8015c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8015c90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8015c5e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015c62:	4b0c      	ldr	r3, [pc, #48]	@ (8015c94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8015c64:	8081      	strh	r1, [r0, #4]
 8015c66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	80c2      	strh	r2, [r0, #6]
 8015c6e:	8003      	strh	r3, [r0, #0]
 8015c70:	8043      	strh	r3, [r0, #2]
 8015c72:	bd30      	pop	{r4, r5, pc}
 8015c74:	2300      	movs	r3, #0
 8015c76:	8003      	strh	r3, [r0, #0]
 8015c78:	8043      	strh	r3, [r0, #2]
 8015c7a:	8083      	strh	r3, [r0, #4]
 8015c7c:	e7d2      	b.n	8015c24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8015c7e:	bf00      	nop
 8015c80:	240251c8 	.word	0x240251c8
 8015c84:	240251d0 	.word	0x240251d0
 8015c88:	240251cc 	.word	0x240251cc
 8015c8c:	240251b0 	.word	0x240251b0
 8015c90:	24025134 	.word	0x24025134
 8015c94:	24025136 	.word	0x24025136

08015c98 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8015c98:	4a12      	ldr	r2, [pc, #72]	@ (8015ce4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8015c9a:	8803      	ldrh	r3, [r0, #0]
 8015c9c:	8811      	ldrh	r1, [r2, #0]
 8015c9e:	428b      	cmp	r3, r1
 8015ca0:	d20b      	bcs.n	8015cba <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8015ca2:	4a11      	ldr	r2, [pc, #68]	@ (8015ce8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8015ca4:	6812      	ldr	r2, [r2, #0]
 8015ca6:	b112      	cbz	r2, 8015cae <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8015ca8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015cac:	b9c0      	cbnz	r0, 8015ce0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8015cae:	4a0f      	ldr	r2, [pc, #60]	@ (8015cec <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8015cb0:	6811      	ldr	r1, [r2, #0]
 8015cb2:	2214      	movs	r2, #20
 8015cb4:	4353      	muls	r3, r2
 8015cb6:	58c8      	ldr	r0, [r1, r3]
 8015cb8:	4770      	bx	lr
 8015cba:	4a0d      	ldr	r2, [pc, #52]	@ (8015cf0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8015cbc:	8812      	ldrh	r2, [r2, #0]
 8015cbe:	440a      	add	r2, r1
 8015cc0:	4293      	cmp	r3, r2
 8015cc2:	da04      	bge.n	8015cce <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8015cc4:	4a08      	ldr	r2, [pc, #32]	@ (8015ce8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8015cc6:	6812      	ldr	r2, [r2, #0]
 8015cc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015ccc:	4770      	bx	lr
 8015cce:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015cd2:	4293      	cmp	r3, r2
 8015cd4:	d103      	bne.n	8015cde <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8015cd6:	4b07      	ldr	r3, [pc, #28]	@ (8015cf4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8015cdc:	4770      	bx	lr
 8015cde:	2000      	movs	r0, #0
 8015ce0:	4770      	bx	lr
 8015ce2:	bf00      	nop
 8015ce4:	240251c8 	.word	0x240251c8
 8015ce8:	240251ac 	.word	0x240251ac
 8015cec:	240251d0 	.word	0x240251d0
 8015cf0:	240251cc 	.word	0x240251cc
 8015cf4:	24025140 	.word	0x24025140

08015cf8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8015cf8:	4b24      	ldr	r3, [pc, #144]	@ (8015d8c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8015cfa:	8802      	ldrh	r2, [r0, #0]
 8015cfc:	8818      	ldrh	r0, [r3, #0]
 8015cfe:	4282      	cmp	r2, r0
 8015d00:	d221      	bcs.n	8015d46 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8015d02:	4b23      	ldr	r3, [pc, #140]	@ (8015d90 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8015d04:	6819      	ldr	r1, [r3, #0]
 8015d06:	2314      	movs	r3, #20
 8015d08:	fb03 1302 	mla	r3, r3, r2, r1
 8015d0c:	6858      	ldr	r0, [r3, #4]
 8015d0e:	2800      	cmp	r0, #0
 8015d10:	d03a      	beq.n	8015d88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015d12:	4920      	ldr	r1, [pc, #128]	@ (8015d94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8015d14:	6809      	ldr	r1, [r1, #0]
 8015d16:	2900      	cmp	r1, #0
 8015d18:	d036      	beq.n	8015d88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015d1a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015d1e:	2900      	cmp	r1, #0
 8015d20:	d032      	beq.n	8015d88 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015d22:	891a      	ldrh	r2, [r3, #8]
 8015d24:	8958      	ldrh	r0, [r3, #10]
 8015d26:	4350      	muls	r0, r2
 8015d28:	7c5a      	ldrb	r2, [r3, #17]
 8015d2a:	7cdb      	ldrb	r3, [r3, #19]
 8015d2c:	0952      	lsrs	r2, r2, #5
 8015d2e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8015d32:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8015d36:	2b0b      	cmp	r3, #11
 8015d38:	bf18      	it	ne
 8015d3a:	0040      	lslne	r0, r0, #1
 8015d3c:	3003      	adds	r0, #3
 8015d3e:	f020 0003 	bic.w	r0, r0, #3
 8015d42:	4408      	add	r0, r1
 8015d44:	4770      	bx	lr
 8015d46:	4b14      	ldr	r3, [pc, #80]	@ (8015d98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8015d48:	881b      	ldrh	r3, [r3, #0]
 8015d4a:	4403      	add	r3, r0
 8015d4c:	429a      	cmp	r2, r3
 8015d4e:	da1a      	bge.n	8015d86 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8015d50:	4b12      	ldr	r3, [pc, #72]	@ (8015d9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8015d52:	1a10      	subs	r0, r2, r0
 8015d54:	210e      	movs	r1, #14
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	fb01 3000 	mla	r0, r1, r0, r3
 8015d5c:	7b03      	ldrb	r3, [r0, #12]
 8015d5e:	f003 031f 	and.w	r3, r3, #31
 8015d62:	2b0b      	cmp	r3, #11
 8015d64:	d10b      	bne.n	8015d7e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8015d66:	8903      	ldrh	r3, [r0, #8]
 8015d68:	8940      	ldrh	r0, [r0, #10]
 8015d6a:	4358      	muls	r0, r3
 8015d6c:	4b09      	ldr	r3, [pc, #36]	@ (8015d94 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8015d6e:	3003      	adds	r0, #3
 8015d70:	6819      	ldr	r1, [r3, #0]
 8015d72:	f020 0303 	bic.w	r3, r0, #3
 8015d76:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8015d7a:	4418      	add	r0, r3
 8015d7c:	4770      	bx	lr
 8015d7e:	2b0d      	cmp	r3, #13
 8015d80:	d101      	bne.n	8015d86 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8015d82:	300d      	adds	r0, #13
 8015d84:	4770      	bx	lr
 8015d86:	2000      	movs	r0, #0
 8015d88:	4770      	bx	lr
 8015d8a:	bf00      	nop
 8015d8c:	240251c8 	.word	0x240251c8
 8015d90:	240251d0 	.word	0x240251d0
 8015d94:	240251ac 	.word	0x240251ac
 8015d98:	240251cc 	.word	0x240251cc
 8015d9c:	240251b0 	.word	0x240251b0

08015da0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8015da0:	4a17      	ldr	r2, [pc, #92]	@ (8015e00 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8015da2:	b510      	push	{r4, lr}
 8015da4:	8803      	ldrh	r3, [r0, #0]
 8015da6:	8812      	ldrh	r2, [r2, #0]
 8015da8:	4293      	cmp	r3, r2
 8015daa:	d20c      	bcs.n	8015dc6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8015dac:	4a15      	ldr	r2, [pc, #84]	@ (8015e04 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8015dae:	2114      	movs	r1, #20
 8015db0:	6812      	ldr	r2, [r2, #0]
 8015db2:	fb01 2303 	mla	r3, r1, r3, r2
 8015db6:	7c58      	ldrb	r0, [r3, #17]
 8015db8:	0942      	lsrs	r2, r0, #5
 8015dba:	7cd8      	ldrb	r0, [r3, #19]
 8015dbc:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8015dc0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8015dc4:	bd10      	pop	{r4, pc}
 8015dc6:	4910      	ldr	r1, [pc, #64]	@ (8015e08 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8015dc8:	8809      	ldrh	r1, [r1, #0]
 8015dca:	4411      	add	r1, r2
 8015dcc:	428b      	cmp	r3, r1
 8015dce:	da09      	bge.n	8015de4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8015dd0:	1a9b      	subs	r3, r3, r2
 8015dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8015e0c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8015dd4:	210e      	movs	r1, #14
 8015dd6:	6812      	ldr	r2, [r2, #0]
 8015dd8:	fb01 2303 	mla	r3, r1, r3, r2
 8015ddc:	7b18      	ldrb	r0, [r3, #12]
 8015dde:	f000 001f 	and.w	r0, r0, #31
 8015de2:	e7ef      	b.n	8015dc4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8015de4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015de8:	4293      	cmp	r3, r2
 8015dea:	d106      	bne.n	8015dfa <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8015dec:	f7ed fe9a 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 8015df0:	6803      	ldr	r3, [r0, #0]
 8015df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015df8:	4718      	bx	r3
 8015dfa:	2000      	movs	r0, #0
 8015dfc:	e7e2      	b.n	8015dc4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8015dfe:	bf00      	nop
 8015e00:	240251c8 	.word	0x240251c8
 8015e04:	240251d0 	.word	0x240251d0
 8015e08:	240251cc 	.word	0x240251cc
 8015e0c:	240251b0 	.word	0x240251b0

08015e10 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8015e10:	2018      	movs	r0, #24
 8015e12:	4770      	bx	lr

08015e14 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8015e14:	2001      	movs	r0, #1
 8015e16:	4770      	bx	lr

08015e18 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8015e18:	4b02      	ldr	r3, [pc, #8]	@ (8015e24 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8015e1a:	8818      	ldrh	r0, [r3, #0]
 8015e1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015e20:	b280      	uxth	r0, r0
 8015e22:	4770      	bx	lr
 8015e24:	2402513a 	.word	0x2402513a

08015e28 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015e28:	2bff      	cmp	r3, #255	@ 0xff
 8015e2a:	d040      	beq.n	8015eae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8015e2c:	2a2c      	cmp	r2, #44	@ 0x2c
 8015e2e:	d02a      	beq.n	8015e86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8015e30:	d80f      	bhi.n	8015e52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8015e32:	2a08      	cmp	r2, #8
 8015e34:	d037      	beq.n	8015ea6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015e36:	d805      	bhi.n	8015e44 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8015e38:	2a04      	cmp	r2, #4
 8015e3a:	d032      	beq.n	8015ea2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8015e3c:	2a05      	cmp	r2, #5
 8015e3e:	d02e      	beq.n	8015e9e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8015e40:	2000      	movs	r0, #0
 8015e42:	4770      	bx	lr
 8015e44:	2a0a      	cmp	r2, #10
 8015e46:	d02e      	beq.n	8015ea6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015e48:	d301      	bcc.n	8015e4e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8015e4a:	2a0b      	cmp	r2, #11
 8015e4c:	d1f8      	bne.n	8015e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015e4e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8015e50:	4770      	bx	lr
 8015e52:	2a30      	cmp	r2, #48	@ 0x30
 8015e54:	d029      	beq.n	8015eaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8015e56:	d808      	bhi.n	8015e6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8015e58:	2a2e      	cmp	r2, #46	@ 0x2e
 8015e5a:	684b      	ldr	r3, [r1, #4]
 8015e5c:	d01a      	beq.n	8015e94 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8015e5e:	d90b      	bls.n	8015e78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8015e60:	781b      	ldrb	r3, [r3, #0]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d1ec      	bne.n	8015e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015e66:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8015e68:	4770      	bx	lr
 8015e6a:	2a32      	cmp	r2, #50	@ 0x32
 8015e6c:	d01d      	beq.n	8015eaa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8015e6e:	d301      	bcc.n	8015e74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8015e70:	2a33      	cmp	r2, #51	@ 0x33
 8015e72:	d1e5      	bne.n	8015e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015e74:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 8015e76:	4770      	bx	lr
 8015e78:	781b      	ldrb	r3, [r3, #0]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d0f3      	beq.n	8015e66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8015e7e:	2b01      	cmp	r3, #1
 8015e80:	d1de      	bne.n	8015e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015e82:	6940      	ldr	r0, [r0, #20]
 8015e84:	4770      	bx	lr
 8015e86:	684b      	ldr	r3, [r1, #4]
 8015e88:	781b      	ldrb	r3, [r3, #0]
 8015e8a:	b133      	cbz	r3, 8015e9a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8015e8c:	2b01      	cmp	r3, #1
 8015e8e:	d1d7      	bne.n	8015e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015e90:	68c0      	ldr	r0, [r0, #12]
 8015e92:	4770      	bx	lr
 8015e94:	781b      	ldrb	r3, [r3, #0]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d1d2      	bne.n	8015e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015e9a:	69c0      	ldr	r0, [r0, #28]
 8015e9c:	4770      	bx	lr
 8015e9e:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8015ea0:	4770      	bx	lr
 8015ea2:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8015ea4:	4770      	bx	lr
 8015ea6:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8015ea8:	4770      	bx	lr
 8015eaa:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8015eac:	4770      	bx	lr
 8015eae:	2a2c      	cmp	r2, #44	@ 0x2c
 8015eb0:	d02a      	beq.n	8015f08 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8015eb2:	d80f      	bhi.n	8015ed4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8015eb4:	2a08      	cmp	r2, #8
 8015eb6:	d035      	beq.n	8015f24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8015eb8:	d805      	bhi.n	8015ec6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8015eba:	2a04      	cmp	r2, #4
 8015ebc:	d030      	beq.n	8015f20 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8015ebe:	2a05      	cmp	r2, #5
 8015ec0:	d1be      	bne.n	8015e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015ec2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8015ec4:	4770      	bx	lr
 8015ec6:	2a0a      	cmp	r2, #10
 8015ec8:	d02c      	beq.n	8015f24 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8015eca:	d301      	bcc.n	8015ed0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8015ecc:	2a0b      	cmp	r2, #11
 8015ece:	d1b7      	bne.n	8015e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015ed0:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8015ed2:	4770      	bx	lr
 8015ed4:	2a30      	cmp	r2, #48	@ 0x30
 8015ed6:	d027      	beq.n	8015f28 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8015ed8:	d808      	bhi.n	8015eec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8015eda:	2a2e      	cmp	r2, #46	@ 0x2e
 8015edc:	684b      	ldr	r3, [r1, #4]
 8015ede:	d01a      	beq.n	8015f16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8015ee0:	d90b      	bls.n	8015efa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 8015ee2:	781b      	ldrb	r3, [r3, #0]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d1ab      	bne.n	8015e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015ee8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8015eea:	4770      	bx	lr
 8015eec:	2a32      	cmp	r2, #50	@ 0x32
 8015eee:	d01b      	beq.n	8015f28 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8015ef0:	d301      	bcc.n	8015ef6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 8015ef2:	2a33      	cmp	r2, #51	@ 0x33
 8015ef4:	d1a4      	bne.n	8015e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015ef6:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8015ef8:	4770      	bx	lr
 8015efa:	781b      	ldrb	r3, [r3, #0]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d0f3      	beq.n	8015ee8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8015f00:	2b01      	cmp	r3, #1
 8015f02:	d19d      	bne.n	8015e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015f04:	6980      	ldr	r0, [r0, #24]
 8015f06:	4770      	bx	lr
 8015f08:	684b      	ldr	r3, [r1, #4]
 8015f0a:	781b      	ldrb	r3, [r3, #0]
 8015f0c:	b133      	cbz	r3, 8015f1c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8015f0e:	2b01      	cmp	r3, #1
 8015f10:	d196      	bne.n	8015e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015f12:	6900      	ldr	r0, [r0, #16]
 8015f14:	4770      	bx	lr
 8015f16:	781b      	ldrb	r3, [r3, #0]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d191      	bne.n	8015e40 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015f1c:	6a00      	ldr	r0, [r0, #32]
 8015f1e:	4770      	bx	lr
 8015f20:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8015f22:	4770      	bx	lr
 8015f24:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8015f26:	4770      	bx	lr
 8015f28:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 8015f2a:	4770      	bx	lr

08015f2c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f30:	b085      	sub	sp, #20
 8015f32:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8015f34:	9203      	str	r2, [sp, #12]
 8015f36:	6870      	ldr	r0, [r6, #4]
 8015f38:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8015f3c:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8015f40:	9101      	str	r1, [sp, #4]
 8015f42:	fa1f f885 	uxth.w	r8, r5
 8015f46:	43ed      	mvns	r5, r5
 8015f48:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8015f4c:	b2ed      	uxtb	r5, r5
 8015f4e:	fb00 2404 	mla	r4, r0, r4, r2
 8015f52:	6832      	ldr	r2, [r6, #0]
 8015f54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015f58:	4414      	add	r4, r2
 8015f5a:	f8dc 2000 	ldr.w	r2, [ip]
 8015f5e:	9202      	str	r2, [sp, #8]
 8015f60:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015f64:	f102 0e04 	add.w	lr, r2, #4
 8015f68:	9a01      	ldr	r2, [sp, #4]
 8015f6a:	2a00      	cmp	r2, #0
 8015f6c:	dc03      	bgt.n	8015f76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015f6e:	9a03      	ldr	r2, [sp, #12]
 8015f70:	2a00      	cmp	r2, #0
 8015f72:	f340 8116 	ble.w	80161a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015f76:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015f78:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8015f7c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8015f80:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015f82:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8015f86:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	dd0e      	ble.n	8015fac <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8015f8e:	1406      	asrs	r6, r0, #16
 8015f90:	d405      	bmi.n	8015f9e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015f92:	4556      	cmp	r6, sl
 8015f94:	da03      	bge.n	8015f9e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015f96:	1416      	asrs	r6, r2, #16
 8015f98:	d401      	bmi.n	8015f9e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015f9a:	454e      	cmp	r6, r9
 8015f9c:	db07      	blt.n	8015fae <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8015f9e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015fa0:	3b01      	subs	r3, #1
 8015fa2:	3403      	adds	r4, #3
 8015fa4:	4430      	add	r0, r6
 8015fa6:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8015fa8:	4432      	add	r2, r6
 8015faa:	e7ee      	b.n	8015f8a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8015fac:	d063      	beq.n	8016076 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8015fae:	1e5e      	subs	r6, r3, #1
 8015fb0:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8015fb2:	fb07 0706 	mla	r7, r7, r6, r0
 8015fb6:	143f      	asrs	r7, r7, #16
 8015fb8:	d454      	bmi.n	8016064 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015fba:	4557      	cmp	r7, sl
 8015fbc:	da52      	bge.n	8016064 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015fbe:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8015fc0:	fb07 2606 	mla	r6, r7, r6, r2
 8015fc4:	1436      	asrs	r6, r6, #16
 8015fc6:	d44d      	bmi.n	8016064 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015fc8:	454e      	cmp	r6, r9
 8015fca:	da4b      	bge.n	8016064 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015fcc:	1ce6      	adds	r6, r4, #3
 8015fce:	4699      	mov	r9, r3
 8015fd0:	f1b9 0f00 	cmp.w	r9, #0
 8015fd4:	f106 0603 	add.w	r6, r6, #3
 8015fd8:	dd48      	ble.n	801606c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8015fda:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8015fde:	1417      	asrs	r7, r2, #16
 8015fe0:	9902      	ldr	r1, [sp, #8]
 8015fe2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8015fe6:	f109 39ff 	add.w	r9, r9, #4294967295
 8015fea:	fb0b 1707 	mla	r7, fp, r7, r1
 8015fee:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8015ff2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015ff4:	f817 700a 	ldrb.w	r7, [r7, sl]
 8015ff8:	fb1b fb05 	smulbb	fp, fp, r5
 8015ffc:	4408      	add	r0, r1
 8015ffe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016000:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016004:	440a      	add	r2, r1
 8016006:	eb0e 0a07 	add.w	sl, lr, r7
 801600a:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801600e:	fb07 b708 	mla	r7, r7, r8, fp
 8016012:	b2bf      	uxth	r7, r7
 8016014:	f107 0b01 	add.w	fp, r7, #1
 8016018:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801601c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8016020:	fb1b fb05 	smulbb	fp, fp, r5
 8016024:	123f      	asrs	r7, r7, #8
 8016026:	f806 7c06 	strb.w	r7, [r6, #-6]
 801602a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801602e:	fb07 b708 	mla	r7, r7, r8, fp
 8016032:	b2bf      	uxth	r7, r7
 8016034:	f107 0b01 	add.w	fp, r7, #1
 8016038:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801603c:	123f      	asrs	r7, r7, #8
 801603e:	f806 7c05 	strb.w	r7, [r6, #-5]
 8016042:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8016046:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801604a:	fb1a fa05 	smulbb	sl, sl, r5
 801604e:	fb07 a708 	mla	r7, r7, r8, sl
 8016052:	b2bf      	uxth	r7, r7
 8016054:	f107 0a01 	add.w	sl, r7, #1
 8016058:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801605c:	123f      	asrs	r7, r7, #8
 801605e:	f806 7c04 	strb.w	r7, [r6, #-4]
 8016062:	e7b5      	b.n	8015fd0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8016064:	2700      	movs	r7, #0
 8016066:	1bde      	subs	r6, r3, r7
 8016068:	2e00      	cmp	r6, #0
 801606a:	dc42      	bgt.n	80160f2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801606c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016070:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016074:	441c      	add	r4, r3
 8016076:	9b01      	ldr	r3, [sp, #4]
 8016078:	2b00      	cmp	r3, #0
 801607a:	f340 8092 	ble.w	80161a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801607e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016082:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016084:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016088:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801608c:	eef0 6a62 	vmov.f32	s13, s5
 8016090:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016094:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016098:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801609c:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 80160a0:	eef0 6a43 	vmov.f32	s13, s6
 80160a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80160a8:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 80160ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80160b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80160b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80160b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80160bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80160c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80160c4:	ee12 2a90 	vmov	r2, s5
 80160c8:	eef0 2a47 	vmov.f32	s5, s14
 80160cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80160d0:	ee13 2a10 	vmov	r2, s6
 80160d4:	9311      	str	r3, [sp, #68]	@ 0x44
 80160d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80160d8:	eeb0 3a67 	vmov.f32	s6, s15
 80160dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80160e0:	9312      	str	r3, [sp, #72]	@ 0x48
 80160e2:	9b01      	ldr	r3, [sp, #4]
 80160e4:	9a03      	ldr	r2, [sp, #12]
 80160e6:	3b01      	subs	r3, #1
 80160e8:	9301      	str	r3, [sp, #4]
 80160ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80160ec:	bf08      	it	eq
 80160ee:	4613      	moveq	r3, r2
 80160f0:	e73a      	b.n	8015f68 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80160f2:	ea5f 4a20 	movs.w	sl, r0, asr #16
 80160f6:	d44e      	bmi.n	8016196 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80160f8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80160fc:	4556      	cmp	r6, sl
 80160fe:	dd4a      	ble.n	8016196 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016100:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8016104:	d447      	bmi.n	8016196 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016106:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801610a:	4559      	cmp	r1, fp
 801610c:	dd43      	ble.n	8016196 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801610e:	fa0f f986 	sxth.w	r9, r6
 8016112:	9902      	ldr	r1, [sp, #8]
 8016114:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016118:	fb0b 1909 	mla	r9, fp, r9, r1
 801611c:	f814 b006 	ldrb.w	fp, [r4, r6]
 8016120:	f819 900a 	ldrb.w	r9, [r9, sl]
 8016124:	fb1b fb05 	smulbb	fp, fp, r5
 8016128:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801612c:	eb0e 0a09 	add.w	sl, lr, r9
 8016130:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8016134:	fb09 b908 	mla	r9, r9, r8, fp
 8016138:	fa1f f989 	uxth.w	r9, r9
 801613c:	f109 0b01 	add.w	fp, r9, #1
 8016140:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016144:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016148:	f804 9006 	strb.w	r9, [r4, r6]
 801614c:	4426      	add	r6, r4
 801614e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016152:	f896 b001 	ldrb.w	fp, [r6, #1]
 8016156:	fb1b fb05 	smulbb	fp, fp, r5
 801615a:	fb09 b908 	mla	r9, r9, r8, fp
 801615e:	fa1f f989 	uxth.w	r9, r9
 8016162:	f109 0b01 	add.w	fp, r9, #1
 8016166:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801616a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801616e:	f886 9001 	strb.w	r9, [r6, #1]
 8016172:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016176:	f896 a002 	ldrb.w	sl, [r6, #2]
 801617a:	fb1a fa05 	smulbb	sl, sl, r5
 801617e:	fb09 a908 	mla	r9, r9, r8, sl
 8016182:	fa1f f989 	uxth.w	r9, r9
 8016186:	f109 0a01 	add.w	sl, r9, #1
 801618a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801618e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016192:	f886 9002 	strb.w	r9, [r6, #2]
 8016196:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8016198:	3701      	adds	r7, #1
 801619a:	4408      	add	r0, r1
 801619c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801619e:	440a      	add	r2, r1
 80161a0:	e761      	b.n	8016066 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80161a2:	b005      	add	sp, #20
 80161a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080161a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80161a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161ac:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80161ae:	4693      	mov	fp, r2
 80161b0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80161b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80161b6:	6868      	ldr	r0, [r5, #4]
 80161b8:	6877      	ldr	r7, [r6, #4]
 80161ba:	9100      	str	r1, [sp, #0]
 80161bc:	3704      	adds	r7, #4
 80161be:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80161c2:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 80161c6:	fb00 2404 	mla	r4, r0, r4, r2
 80161ca:	682a      	ldr	r2, [r5, #0]
 80161cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80161d0:	4414      	add	r4, r2
 80161d2:	6832      	ldr	r2, [r6, #0]
 80161d4:	9201      	str	r2, [sp, #4]
 80161d6:	9a00      	ldr	r2, [sp, #0]
 80161d8:	2a00      	cmp	r2, #0
 80161da:	dc03      	bgt.n	80161e4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80161dc:	f1bb 0f00 	cmp.w	fp, #0
 80161e0:	f340 80bc 	ble.w	801635c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80161e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80161e6:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 80161ea:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80161ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80161f0:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 80161f4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	dd0c      	ble.n	8016216 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80161fc:	1405      	asrs	r5, r0, #16
 80161fe:	d405      	bmi.n	801620c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016200:	4555      	cmp	r5, sl
 8016202:	da03      	bge.n	801620c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016204:	1415      	asrs	r5, r2, #16
 8016206:	d401      	bmi.n	801620c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016208:	454d      	cmp	r5, r9
 801620a:	db05      	blt.n	8016218 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801620c:	4440      	add	r0, r8
 801620e:	4472      	add	r2, lr
 8016210:	3b01      	subs	r3, #1
 8016212:	3403      	adds	r4, #3
 8016214:	e7f0      	b.n	80161f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8016216:	d03f      	beq.n	8016298 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8016218:	1e5d      	subs	r5, r3, #1
 801621a:	fb08 0c05 	mla	ip, r8, r5, r0
 801621e:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8016222:	d42e      	bmi.n	8016282 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016224:	45d4      	cmp	ip, sl
 8016226:	da2c      	bge.n	8016282 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016228:	fb0e 2505 	mla	r5, lr, r5, r2
 801622c:	142d      	asrs	r5, r5, #16
 801622e:	d428      	bmi.n	8016282 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016230:	454d      	cmp	r5, r9
 8016232:	da26      	bge.n	8016282 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016234:	1ce5      	adds	r5, r4, #3
 8016236:	469c      	mov	ip, r3
 8016238:	f1bc 0f00 	cmp.w	ip, #0
 801623c:	f105 0503 	add.w	r5, r5, #3
 8016240:	dd25      	ble.n	801628e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8016242:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016246:	ea4f 4922 	mov.w	r9, r2, asr #16
 801624a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801624e:	4472      	add	r2, lr
 8016250:	468a      	mov	sl, r1
 8016252:	9901      	ldr	r1, [sp, #4]
 8016254:	fb0a 1909 	mla	r9, sl, r9, r1
 8016258:	1401      	asrs	r1, r0, #16
 801625a:	4440      	add	r0, r8
 801625c:	f819 9001 	ldrb.w	r9, [r9, r1]
 8016260:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8016264:	eb07 0a09 	add.w	sl, r7, r9
 8016268:	f817 9009 	ldrb.w	r9, [r7, r9]
 801626c:	f805 9c06 	strb.w	r9, [r5, #-6]
 8016270:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016274:	f805 9c05 	strb.w	r9, [r5, #-5]
 8016278:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801627c:	f805 9c04 	strb.w	r9, [r5, #-4]
 8016280:	e7da      	b.n	8016238 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8016282:	2500      	movs	r5, #0
 8016284:	eba3 0c05 	sub.w	ip, r3, r5
 8016288:	f1bc 0f00 	cmp.w	ip, #0
 801628c:	dc3b      	bgt.n	8016306 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801628e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016292:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016296:	441c      	add	r4, r3
 8016298:	9b00      	ldr	r3, [sp, #0]
 801629a:	2b00      	cmp	r3, #0
 801629c:	dd5e      	ble.n	801635c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801629e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80162a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80162a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80162a8:	eeb0 6a62 	vmov.f32	s12, s5
 80162ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80162b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80162b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80162b8:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 80162bc:	eeb0 6a43 	vmov.f32	s12, s6
 80162c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80162c4:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 80162c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80162cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80162d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80162d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80162d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80162dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80162e0:	ee12 2a90 	vmov	r2, s5
 80162e4:	eef0 2a47 	vmov.f32	s5, s14
 80162e8:	fb92 f8f3 	sdiv	r8, r2, r3
 80162ec:	ee13 2a10 	vmov	r2, s6
 80162f0:	eeb0 3a67 	vmov.f32	s6, s15
 80162f4:	fb92 fef3 	sdiv	lr, r2, r3
 80162f8:	9b00      	ldr	r3, [sp, #0]
 80162fa:	3b01      	subs	r3, #1
 80162fc:	9300      	str	r3, [sp, #0]
 80162fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016300:	bf08      	it	eq
 8016302:	465b      	moveq	r3, fp
 8016304:	e767      	b.n	80161d6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8016306:	ea5f 4920 	movs.w	r9, r0, asr #16
 801630a:	d423      	bmi.n	8016354 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801630c:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8016310:	45cc      	cmp	ip, r9
 8016312:	dd1f      	ble.n	8016354 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016314:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016318:	d41c      	bmi.n	8016354 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801631a:	68f1      	ldr	r1, [r6, #12]
 801631c:	4551      	cmp	r1, sl
 801631e:	dd19      	ble.n	8016354 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016320:	fa0f fc8c 	sxth.w	ip, ip
 8016324:	9901      	ldr	r1, [sp, #4]
 8016326:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801632a:	f81c c009 	ldrb.w	ip, [ip, r9]
 801632e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016332:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8016336:	eb07 090c 	add.w	r9, r7, ip
 801633a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801633e:	f804 a00c 	strb.w	sl, [r4, ip]
 8016342:	44a4      	add	ip, r4
 8016344:	f899 a001 	ldrb.w	sl, [r9, #1]
 8016348:	f88c a001 	strb.w	sl, [ip, #1]
 801634c:	f899 9002 	ldrb.w	r9, [r9, #2]
 8016350:	f88c 9002 	strb.w	r9, [ip, #2]
 8016354:	4440      	add	r0, r8
 8016356:	4472      	add	r2, lr
 8016358:	3501      	adds	r5, #1
 801635a:	e793      	b.n	8016284 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801635c:	b003      	add	sp, #12
 801635e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016362 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016362:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016366:	b085      	sub	sp, #20
 8016368:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801636c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801636e:	9202      	str	r2, [sp, #8]
 8016370:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8016374:	6860      	ldr	r0, [r4, #4]
 8016376:	9203      	str	r2, [sp, #12]
 8016378:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801637c:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8016380:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8016384:	fb00 2505 	mla	r5, r0, r5, r2
 8016388:	6822      	ldr	r2, [r4, #0]
 801638a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801638e:	4415      	add	r5, r2
 8016390:	f8dc 2000 	ldr.w	r2, [ip]
 8016394:	9200      	str	r2, [sp, #0]
 8016396:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801639a:	3204      	adds	r2, #4
 801639c:	9201      	str	r2, [sp, #4]
 801639e:	2900      	cmp	r1, #0
 80163a0:	dc03      	bgt.n	80163aa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80163a2:	9a02      	ldr	r2, [sp, #8]
 80163a4:	2a00      	cmp	r2, #0
 80163a6:	f340 8127 	ble.w	80165f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80163aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80163ac:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80163b0:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80163b4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80163b6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80163ba:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80163be:	2b00      	cmp	r3, #0
 80163c0:	dd0d      	ble.n	80163de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80163c2:	1422      	asrs	r2, r4, #16
 80163c4:	d405      	bmi.n	80163d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80163c6:	4542      	cmp	r2, r8
 80163c8:	da03      	bge.n	80163d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80163ca:	1402      	asrs	r2, r0, #16
 80163cc:	d401      	bmi.n	80163d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80163ce:	42ba      	cmp	r2, r7
 80163d0:	db06      	blt.n	80163e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80163d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80163d4:	4474      	add	r4, lr
 80163d6:	3b01      	subs	r3, #1
 80163d8:	3503      	adds	r5, #3
 80163da:	4410      	add	r0, r2
 80163dc:	e7ef      	b.n	80163be <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80163de:	d075      	beq.n	80164cc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80163e0:	1e5a      	subs	r2, r3, #1
 80163e2:	fb0e 4602 	mla	r6, lr, r2, r4
 80163e6:	1436      	asrs	r6, r6, #16
 80163e8:	d465      	bmi.n	80164b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80163ea:	4546      	cmp	r6, r8
 80163ec:	da63      	bge.n	80164b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80163ee:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80163f0:	fb06 0202 	mla	r2, r6, r2, r0
 80163f4:	1412      	asrs	r2, r2, #16
 80163f6:	d45e      	bmi.n	80164b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80163f8:	42ba      	cmp	r2, r7
 80163fa:	da5c      	bge.n	80164b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80163fc:	1cef      	adds	r7, r5, #3
 80163fe:	4699      	mov	r9, r3
 8016400:	f1b9 0f00 	cmp.w	r9, #0
 8016404:	dd5d      	ble.n	80164c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8016406:	1402      	asrs	r2, r0, #16
 8016408:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801640c:	1426      	asrs	r6, r4, #16
 801640e:	4692      	mov	sl, r2
 8016410:	9a00      	ldr	r2, [sp, #0]
 8016412:	fb08 220a 	mla	r2, r8, sl, r2
 8016416:	5d92      	ldrb	r2, [r2, r6]
 8016418:	9e01      	ldr	r6, [sp, #4]
 801641a:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801641e:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8016422:	d041      	beq.n	80164a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016424:	9a03      	ldr	r2, [sp, #12]
 8016426:	fa5f fb86 	uxtb.w	fp, r6
 801642a:	fb02 f808 	mul.w	r8, r2, r8
 801642e:	f108 0201 	add.w	r2, r8, #1
 8016432:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8016436:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801643a:	1212      	asrs	r2, r2, #8
 801643c:	fa1f fa82 	uxth.w	sl, r2
 8016440:	43d2      	mvns	r2, r2
 8016442:	fb1b fb0a 	smulbb	fp, fp, sl
 8016446:	b2d2      	uxtb	r2, r2
 8016448:	fb08 b802 	mla	r8, r8, r2, fp
 801644c:	fa1f f888 	uxth.w	r8, r8
 8016450:	f108 0b01 	add.w	fp, r8, #1
 8016454:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016458:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801645c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016460:	fb1b fb0a 	smulbb	fp, fp, sl
 8016464:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016468:	fb16 fa0a 	smulbb	sl, r6, sl
 801646c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8016470:	f807 8c03 	strb.w	r8, [r7, #-3]
 8016474:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8016478:	fb06 aa02 	mla	sl, r6, r2, sl
 801647c:	fb08 b802 	mla	r8, r8, r2, fp
 8016480:	fa1f fa8a 	uxth.w	sl, sl
 8016484:	fa1f f888 	uxth.w	r8, r8
 8016488:	f10a 0601 	add.w	r6, sl, #1
 801648c:	f108 0b01 	add.w	fp, r8, #1
 8016490:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8016494:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016498:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801649c:	ea4f 2828 	mov.w	r8, r8, asr #8
 80164a0:	f807 ac01 	strb.w	sl, [r7, #-1]
 80164a4:	f807 8c02 	strb.w	r8, [r7, #-2]
 80164a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80164aa:	4474      	add	r4, lr
 80164ac:	3703      	adds	r7, #3
 80164ae:	f109 39ff 	add.w	r9, r9, #4294967295
 80164b2:	4410      	add	r0, r2
 80164b4:	e7a4      	b.n	8016400 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80164b6:	f04f 0800 	mov.w	r8, #0
 80164ba:	eba3 0208 	sub.w	r2, r3, r8
 80164be:	2a00      	cmp	r2, #0
 80164c0:	dc3b      	bgt.n	801653a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80164c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80164c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80164ca:	441d      	add	r5, r3
 80164cc:	2900      	cmp	r1, #0
 80164ce:	f340 8093 	ble.w	80165f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80164d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80164d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80164d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80164dc:	3901      	subs	r1, #1
 80164de:	eeb0 6a62 	vmov.f32	s12, s5
 80164e2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80164e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80164ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80164ee:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80164f2:	eeb0 6a43 	vmov.f32	s12, s6
 80164f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80164fa:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80164fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016502:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016506:	ee77 2a62 	vsub.f32	s5, s14, s5
 801650a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801650e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016512:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016516:	ee12 2a90 	vmov	r2, s5
 801651a:	eef0 2a47 	vmov.f32	s5, s14
 801651e:	fb92 fef3 	sdiv	lr, r2, r3
 8016522:	ee13 2a10 	vmov	r2, s6
 8016526:	eeb0 3a67 	vmov.f32	s6, s15
 801652a:	fb92 f3f3 	sdiv	r3, r2, r3
 801652e:	9a02      	ldr	r2, [sp, #8]
 8016530:	9312      	str	r3, [sp, #72]	@ 0x48
 8016532:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016534:	bf08      	it	eq
 8016536:	4613      	moveq	r3, r2
 8016538:	e731      	b.n	801639e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801653a:	1427      	asrs	r7, r4, #16
 801653c:	d456      	bmi.n	80165ec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801653e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016542:	42be      	cmp	r6, r7
 8016544:	dd52      	ble.n	80165ec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016546:	ea5f 4920 	movs.w	r9, r0, asr #16
 801654a:	d44f      	bmi.n	80165ec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801654c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016550:	454a      	cmp	r2, r9
 8016552:	dd4b      	ble.n	80165ec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016554:	9a00      	ldr	r2, [sp, #0]
 8016556:	b236      	sxth	r6, r6
 8016558:	fb09 2606 	mla	r6, r9, r6, r2
 801655c:	5df2      	ldrb	r2, [r6, r7]
 801655e:	9e01      	ldr	r6, [sp, #4]
 8016560:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8016564:	0e3a      	lsrs	r2, r7, #24
 8016566:	d041      	beq.n	80165ec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016568:	9e03      	ldr	r6, [sp, #12]
 801656a:	fa5f fb87 	uxtb.w	fp, r7
 801656e:	4372      	muls	r2, r6
 8016570:	1c56      	adds	r6, r2, #1
 8016572:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016576:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801657a:	1212      	asrs	r2, r2, #8
 801657c:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016580:	fa1f fa82 	uxth.w	sl, r2
 8016584:	43d2      	mvns	r2, r2
 8016586:	fb1b fb0a 	smulbb	fp, fp, sl
 801658a:	b2d2      	uxtb	r2, r2
 801658c:	fb09 b902 	mla	r9, r9, r2, fp
 8016590:	fa1f f989 	uxth.w	r9, r9
 8016594:	f109 0b01 	add.w	fp, r9, #1
 8016598:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801659c:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80165a0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80165a4:	fb1b fb0a 	smulbb	fp, fp, sl
 80165a8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80165ac:	fb17 fa0a 	smulbb	sl, r7, sl
 80165b0:	f805 9006 	strb.w	r9, [r5, r6]
 80165b4:	442e      	add	r6, r5
 80165b6:	78b7      	ldrb	r7, [r6, #2]
 80165b8:	f896 9001 	ldrb.w	r9, [r6, #1]
 80165bc:	fb07 aa02 	mla	sl, r7, r2, sl
 80165c0:	fb09 b902 	mla	r9, r9, r2, fp
 80165c4:	fa1f fa8a 	uxth.w	sl, sl
 80165c8:	fa1f f989 	uxth.w	r9, r9
 80165cc:	f10a 0701 	add.w	r7, sl, #1
 80165d0:	f109 0b01 	add.w	fp, r9, #1
 80165d4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80165d8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80165dc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80165e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80165e4:	f886 a002 	strb.w	sl, [r6, #2]
 80165e8:	f886 9001 	strb.w	r9, [r6, #1]
 80165ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80165ee:	4474      	add	r4, lr
 80165f0:	f108 0801 	add.w	r8, r8, #1
 80165f4:	4410      	add	r0, r2
 80165f6:	e760      	b.n	80164ba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80165f8:	b005      	add	sp, #20
 80165fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080165fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80165fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016602:	b085      	sub	sp, #20
 8016604:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016608:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801660a:	9203      	str	r2, [sp, #12]
 801660c:	6868      	ldr	r0, [r5, #4]
 801660e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8016612:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8016616:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801661a:	fb00 2404 	mla	r4, r0, r4, r2
 801661e:	682a      	ldr	r2, [r5, #0]
 8016620:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016624:	4414      	add	r4, r2
 8016626:	f8dc 2000 	ldr.w	r2, [ip]
 801662a:	9201      	str	r2, [sp, #4]
 801662c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8016630:	3204      	adds	r2, #4
 8016632:	9202      	str	r2, [sp, #8]
 8016634:	2900      	cmp	r1, #0
 8016636:	dc03      	bgt.n	8016640 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8016638:	9a03      	ldr	r2, [sp, #12]
 801663a:	2a00      	cmp	r2, #0
 801663c:	f340 8137 	ble.w	80168ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016640:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016642:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016646:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801664a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801664c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016650:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016654:	2b00      	cmp	r3, #0
 8016656:	dd0d      	ble.n	8016674 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016658:	1405      	asrs	r5, r0, #16
 801665a:	d405      	bmi.n	8016668 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801665c:	4545      	cmp	r5, r8
 801665e:	da03      	bge.n	8016668 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016660:	1415      	asrs	r5, r2, #16
 8016662:	d401      	bmi.n	8016668 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016664:	42bd      	cmp	r5, r7
 8016666:	db06      	blt.n	8016676 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016668:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801666a:	4470      	add	r0, lr
 801666c:	3b01      	subs	r3, #1
 801666e:	3403      	adds	r4, #3
 8016670:	442a      	add	r2, r5
 8016672:	e7ef      	b.n	8016654 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8016674:	d070      	beq.n	8016758 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8016676:	1e5d      	subs	r5, r3, #1
 8016678:	fb0e 0605 	mla	r6, lr, r5, r0
 801667c:	1436      	asrs	r6, r6, #16
 801667e:	d462      	bmi.n	8016746 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016680:	4546      	cmp	r6, r8
 8016682:	da60      	bge.n	8016746 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016684:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8016686:	fb06 2505 	mla	r5, r6, r5, r2
 801668a:	142d      	asrs	r5, r5, #16
 801668c:	d45b      	bmi.n	8016746 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801668e:	42bd      	cmp	r5, r7
 8016690:	da59      	bge.n	8016746 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016692:	1ce5      	adds	r5, r4, #3
 8016694:	469a      	mov	sl, r3
 8016696:	f1ba 0f00 	cmp.w	sl, #0
 801669a:	dd58      	ble.n	801674e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801669c:	1416      	asrs	r6, r2, #16
 801669e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80166a2:	1407      	asrs	r7, r0, #16
 80166a4:	46b1      	mov	r9, r6
 80166a6:	9e01      	ldr	r6, [sp, #4]
 80166a8:	fb08 6609 	mla	r6, r8, r9, r6
 80166ac:	5df6      	ldrb	r6, [r6, r7]
 80166ae:	9f02      	ldr	r7, [sp, #8]
 80166b0:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 80166b4:	0e37      	lsrs	r7, r6, #24
 80166b6:	2fff      	cmp	r7, #255	@ 0xff
 80166b8:	f000 80f0 	beq.w	801689c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80166bc:	fa5f f887 	uxtb.w	r8, r7
 80166c0:	b3d7      	cbz	r7, 8016738 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80166c2:	fa1f f788 	uxth.w	r7, r8
 80166c6:	ea6f 0808 	mvn.w	r8, r8
 80166ca:	fa5f fb86 	uxtb.w	fp, r6
 80166ce:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 80166d2:	fa5f f888 	uxtb.w	r8, r8
 80166d6:	fb1b fb07 	smulbb	fp, fp, r7
 80166da:	fb09 b908 	mla	r9, r9, r8, fp
 80166de:	fa1f f989 	uxth.w	r9, r9
 80166e2:	f109 0b01 	add.w	fp, r9, #1
 80166e6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80166ea:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80166ee:	fb1b fb08 	smulbb	fp, fp, r8
 80166f2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80166f6:	f805 9c03 	strb.w	r9, [r5, #-3]
 80166fa:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80166fe:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016702:	fb09 b907 	mla	r9, r9, r7, fp
 8016706:	fa1f f989 	uxth.w	r9, r9
 801670a:	f109 0b01 	add.w	fp, r9, #1
 801670e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016712:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016716:	f805 9c02 	strb.w	r9, [r5, #-2]
 801671a:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801671e:	fb19 f808 	smulbb	r8, r9, r8
 8016722:	fb06 8607 	mla	r6, r6, r7, r8
 8016726:	b2b6      	uxth	r6, r6
 8016728:	f106 0801 	add.w	r8, r6, #1
 801672c:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8016730:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016734:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016738:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801673a:	4470      	add	r0, lr
 801673c:	3503      	adds	r5, #3
 801673e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016742:	4432      	add	r2, r6
 8016744:	e7a7      	b.n	8016696 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8016746:	2600      	movs	r6, #0
 8016748:	1b9d      	subs	r5, r3, r6
 801674a:	2d00      	cmp	r5, #0
 801674c:	dc3b      	bgt.n	80167c6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801674e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016752:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016756:	441c      	add	r4, r3
 8016758:	2900      	cmp	r1, #0
 801675a:	f340 80a8 	ble.w	80168ae <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801675e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016764:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016768:	3901      	subs	r1, #1
 801676a:	eeb0 6a62 	vmov.f32	s12, s5
 801676e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016772:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016776:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801677a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801677e:	eeb0 6a43 	vmov.f32	s12, s6
 8016782:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016786:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801678a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801678e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016792:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016796:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801679a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801679e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80167a2:	ee12 2a90 	vmov	r2, s5
 80167a6:	eef0 2a47 	vmov.f32	s5, s14
 80167aa:	fb92 fef3 	sdiv	lr, r2, r3
 80167ae:	ee13 2a10 	vmov	r2, s6
 80167b2:	eeb0 3a67 	vmov.f32	s6, s15
 80167b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80167ba:	9a03      	ldr	r2, [sp, #12]
 80167bc:	9312      	str	r3, [sp, #72]	@ 0x48
 80167be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80167c0:	bf08      	it	eq
 80167c2:	4613      	moveq	r3, r2
 80167c4:	e736      	b.n	8016634 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80167c6:	ea5f 4820 	movs.w	r8, r0, asr #16
 80167ca:	d457      	bmi.n	801687c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80167cc:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80167d0:	4547      	cmp	r7, r8
 80167d2:	dd53      	ble.n	801687c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80167d4:	ea5f 4922 	movs.w	r9, r2, asr #16
 80167d8:	d450      	bmi.n	801687c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80167da:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80167de:	454d      	cmp	r5, r9
 80167e0:	dd4c      	ble.n	801687c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80167e2:	9d01      	ldr	r5, [sp, #4]
 80167e4:	b23f      	sxth	r7, r7
 80167e6:	fb09 5707 	mla	r7, r9, r7, r5
 80167ea:	f817 5008 	ldrb.w	r5, [r7, r8]
 80167ee:	9f02      	ldr	r7, [sp, #8]
 80167f0:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80167f4:	0e2f      	lsrs	r7, r5, #24
 80167f6:	2fff      	cmp	r7, #255	@ 0xff
 80167f8:	d045      	beq.n	8016886 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80167fa:	fa5f f987 	uxtb.w	r9, r7
 80167fe:	b3ef      	cbz	r7, 801687c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016800:	fa1f f889 	uxth.w	r8, r9
 8016804:	ea6f 0909 	mvn.w	r9, r9
 8016808:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801680c:	fa5f fb85 	uxtb.w	fp, r5
 8016810:	f814 a007 	ldrb.w	sl, [r4, r7]
 8016814:	fa5f f989 	uxtb.w	r9, r9
 8016818:	fb1b fb08 	smulbb	fp, fp, r8
 801681c:	fb0a ba09 	mla	sl, sl, r9, fp
 8016820:	fa1f fa8a 	uxth.w	sl, sl
 8016824:	f10a 0b01 	add.w	fp, sl, #1
 8016828:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801682c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016830:	f804 a007 	strb.w	sl, [r4, r7]
 8016834:	4427      	add	r7, r4
 8016836:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801683a:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801683e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8016842:	fb1b fb09 	smulbb	fp, fp, r9
 8016846:	fb0a ba08 	mla	sl, sl, r8, fp
 801684a:	fa1f fa8a 	uxth.w	sl, sl
 801684e:	f10a 0b01 	add.w	fp, sl, #1
 8016852:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8016856:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801685a:	f887 a001 	strb.w	sl, [r7, #1]
 801685e:	f897 a002 	ldrb.w	sl, [r7, #2]
 8016862:	fb1a f909 	smulbb	r9, sl, r9
 8016866:	fb05 9508 	mla	r5, r5, r8, r9
 801686a:	b2ad      	uxth	r5, r5
 801686c:	f105 0901 	add.w	r9, r5, #1
 8016870:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8016874:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016878:	f887 9002 	strb.w	r9, [r7, #2]
 801687c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801687e:	4470      	add	r0, lr
 8016880:	3601      	adds	r6, #1
 8016882:	442a      	add	r2, r5
 8016884:	e760      	b.n	8016748 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016886:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801688a:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801688e:	55e5      	strb	r5, [r4, r7]
 8016890:	4427      	add	r7, r4
 8016892:	0c2d      	lsrs	r5, r5, #16
 8016894:	f887 8001 	strb.w	r8, [r7, #1]
 8016898:	70bd      	strb	r5, [r7, #2]
 801689a:	e7ef      	b.n	801687c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801689c:	0a37      	lsrs	r7, r6, #8
 801689e:	f805 6c03 	strb.w	r6, [r5, #-3]
 80168a2:	0c36      	lsrs	r6, r6, #16
 80168a4:	f805 7c02 	strb.w	r7, [r5, #-2]
 80168a8:	f805 6c01 	strb.w	r6, [r5, #-1]
 80168ac:	e744      	b.n	8016738 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80168ae:	b005      	add	sp, #20
 80168b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080168b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80168b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168b8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80168ba:	9201      	str	r2, [sp, #4]
 80168bc:	6870      	ldr	r0, [r6, #4]
 80168be:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 80168c2:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 80168c6:	fa1f fe85 	uxth.w	lr, r5
 80168ca:	43ed      	mvns	r5, r5
 80168cc:	f8dc 8000 	ldr.w	r8, [ip]
 80168d0:	b2ed      	uxtb	r5, r5
 80168d2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80168d6:	fb00 2404 	mla	r4, r0, r4, r2
 80168da:	6832      	ldr	r2, [r6, #0]
 80168dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80168e0:	4414      	add	r4, r2
 80168e2:	2900      	cmp	r1, #0
 80168e4:	dc03      	bgt.n	80168ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80168e6:	9a01      	ldr	r2, [sp, #4]
 80168e8:	2a00      	cmp	r2, #0
 80168ea:	f340 810d 	ble.w	8016b08 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80168ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80168f0:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80168f4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80168f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80168fa:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80168fe:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016902:	2b00      	cmp	r3, #0
 8016904:	dd0e      	ble.n	8016924 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016906:	1406      	asrs	r6, r0, #16
 8016908:	d405      	bmi.n	8016916 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801690a:	4556      	cmp	r6, sl
 801690c:	da03      	bge.n	8016916 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801690e:	1416      	asrs	r6, r2, #16
 8016910:	d401      	bmi.n	8016916 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8016912:	454e      	cmp	r6, r9
 8016914:	db07      	blt.n	8016926 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016916:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8016918:	3b01      	subs	r3, #1
 801691a:	3403      	adds	r4, #3
 801691c:	4430      	add	r0, r6
 801691e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8016920:	4432      	add	r2, r6
 8016922:	e7ee      	b.n	8016902 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8016924:	d060      	beq.n	80169e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8016926:	1e5e      	subs	r6, r3, #1
 8016928:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801692a:	fb07 0706 	mla	r7, r7, r6, r0
 801692e:	143f      	asrs	r7, r7, #16
 8016930:	d451      	bmi.n	80169d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016932:	4557      	cmp	r7, sl
 8016934:	da4f      	bge.n	80169d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016936:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8016938:	fb07 2606 	mla	r6, r7, r6, r2
 801693c:	1436      	asrs	r6, r6, #16
 801693e:	d44a      	bmi.n	80169d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016940:	454e      	cmp	r6, r9
 8016942:	da48      	bge.n	80169d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016944:	1ce6      	adds	r6, r4, #3
 8016946:	4699      	mov	r9, r3
 8016948:	f1b9 0f00 	cmp.w	r9, #0
 801694c:	f106 0603 	add.w	r6, r6, #3
 8016950:	dd45      	ble.n	80169de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8016952:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8016956:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801695a:	1417      	asrs	r7, r2, #16
 801695c:	f109 39ff 	add.w	r9, r9, #4294967295
 8016960:	fb0b a707 	mla	r7, fp, r7, sl
 8016964:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8016968:	fb1b fb05 	smulbb	fp, fp, r5
 801696c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016970:	eb08 0a07 	add.w	sl, r8, r7
 8016974:	f818 7007 	ldrb.w	r7, [r8, r7]
 8016978:	fb07 b70e 	mla	r7, r7, lr, fp
 801697c:	b2bf      	uxth	r7, r7
 801697e:	f107 0b01 	add.w	fp, r7, #1
 8016982:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016986:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801698a:	fb1b fb05 	smulbb	fp, fp, r5
 801698e:	123f      	asrs	r7, r7, #8
 8016990:	f806 7c06 	strb.w	r7, [r6, #-6]
 8016994:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8016998:	fb07 b70e 	mla	r7, r7, lr, fp
 801699c:	b2bf      	uxth	r7, r7
 801699e:	f107 0b01 	add.w	fp, r7, #1
 80169a2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80169a6:	123f      	asrs	r7, r7, #8
 80169a8:	f806 7c05 	strb.w	r7, [r6, #-5]
 80169ac:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80169b0:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80169b4:	fb1a fa05 	smulbb	sl, sl, r5
 80169b8:	fb07 a70e 	mla	r7, r7, lr, sl
 80169bc:	b2bf      	uxth	r7, r7
 80169be:	f107 0a01 	add.w	sl, r7, #1
 80169c2:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80169c6:	123f      	asrs	r7, r7, #8
 80169c8:	f806 7c04 	strb.w	r7, [r6, #-4]
 80169cc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80169ce:	4438      	add	r0, r7
 80169d0:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80169d2:	443a      	add	r2, r7
 80169d4:	e7b8      	b.n	8016948 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80169d6:	2700      	movs	r7, #0
 80169d8:	1bde      	subs	r6, r3, r7
 80169da:	2e00      	cmp	r6, #0
 80169dc:	dc3f      	bgt.n	8016a5e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80169de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80169e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80169e6:	441c      	add	r4, r3
 80169e8:	2900      	cmp	r1, #0
 80169ea:	f340 808d 	ble.w	8016b08 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80169ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80169f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80169f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80169f8:	3901      	subs	r1, #1
 80169fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80169fe:	eef0 6a62 	vmov.f32	s13, s5
 8016a02:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016a06:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016a0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016a0e:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 8016a12:	eef0 6a43 	vmov.f32	s13, s6
 8016a16:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016a1a:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 8016a1e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016a22:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016a26:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016a2a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016a2e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016a32:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016a36:	ee12 2a90 	vmov	r2, s5
 8016a3a:	eef0 2a47 	vmov.f32	s5, s14
 8016a3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016a42:	ee13 2a10 	vmov	r2, s6
 8016a46:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016a48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a4a:	eeb0 3a67 	vmov.f32	s6, s15
 8016a4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016a52:	9a01      	ldr	r2, [sp, #4]
 8016a54:	9310      	str	r3, [sp, #64]	@ 0x40
 8016a56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a58:	bf08      	it	eq
 8016a5a:	4613      	moveq	r3, r2
 8016a5c:	e741      	b.n	80168e2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8016a5e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016a62:	d44b      	bmi.n	8016afc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016a64:	f8dc b008 	ldr.w	fp, [ip, #8]
 8016a68:	45cb      	cmp	fp, r9
 8016a6a:	dd47      	ble.n	8016afc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016a6c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016a70:	d444      	bmi.n	8016afc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016a72:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8016a76:	4556      	cmp	r6, sl
 8016a78:	dd40      	ble.n	8016afc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016a7a:	fa0f f68b 	sxth.w	r6, fp
 8016a7e:	fb0a 9906 	mla	r9, sl, r6, r9
 8016a82:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016a86:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8016a8a:	f814 b006 	ldrb.w	fp, [r4, r6]
 8016a8e:	fb1b fb05 	smulbb	fp, fp, r5
 8016a92:	eb08 0a09 	add.w	sl, r8, r9
 8016a96:	f818 9009 	ldrb.w	r9, [r8, r9]
 8016a9a:	fb09 b90e 	mla	r9, r9, lr, fp
 8016a9e:	fa1f f989 	uxth.w	r9, r9
 8016aa2:	f109 0b01 	add.w	fp, r9, #1
 8016aa6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016aaa:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016aae:	f804 9006 	strb.w	r9, [r4, r6]
 8016ab2:	4426      	add	r6, r4
 8016ab4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016ab8:	f896 b001 	ldrb.w	fp, [r6, #1]
 8016abc:	fb1b fb05 	smulbb	fp, fp, r5
 8016ac0:	fb09 b90e 	mla	r9, r9, lr, fp
 8016ac4:	fa1f f989 	uxth.w	r9, r9
 8016ac8:	f109 0b01 	add.w	fp, r9, #1
 8016acc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016ad0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016ad4:	f886 9001 	strb.w	r9, [r6, #1]
 8016ad8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016adc:	f896 a002 	ldrb.w	sl, [r6, #2]
 8016ae0:	fb1a fa05 	smulbb	sl, sl, r5
 8016ae4:	fb09 a90e 	mla	r9, r9, lr, sl
 8016ae8:	fa1f f989 	uxth.w	r9, r9
 8016aec:	f109 0a01 	add.w	sl, r9, #1
 8016af0:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8016af4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016af8:	f886 9002 	strb.w	r9, [r6, #2]
 8016afc:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8016afe:	3701      	adds	r7, #1
 8016b00:	4430      	add	r0, r6
 8016b02:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8016b04:	4432      	add	r2, r6
 8016b06:	e767      	b.n	80169d8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8016b08:	b003      	add	sp, #12
 8016b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016b0e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016b0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b12:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016b14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016b18:	9201      	str	r2, [sp, #4]
 8016b1a:	6868      	ldr	r0, [r5, #4]
 8016b1c:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8016b1e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8016b22:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 8016b26:	fb00 2404 	mla	r4, r0, r4, r2
 8016b2a:	682a      	ldr	r2, [r5, #0]
 8016b2c:	f8d7 8000 	ldr.w	r8, [r7]
 8016b30:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016b34:	4414      	add	r4, r2
 8016b36:	2900      	cmp	r1, #0
 8016b38:	dc03      	bgt.n	8016b42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016b3a:	9a01      	ldr	r2, [sp, #4]
 8016b3c:	2a00      	cmp	r2, #0
 8016b3e:	f340 80af 	ble.w	8016ca0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016b42:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016b44:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8016b48:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016b4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016b4e:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8016b52:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	dd0c      	ble.n	8016b74 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8016b5a:	1405      	asrs	r5, r0, #16
 8016b5c:	d405      	bmi.n	8016b6a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016b5e:	4555      	cmp	r5, sl
 8016b60:	da03      	bge.n	8016b6a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016b62:	1415      	asrs	r5, r2, #16
 8016b64:	d401      	bmi.n	8016b6a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016b66:	454d      	cmp	r5, r9
 8016b68:	db05      	blt.n	8016b76 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016b6a:	4470      	add	r0, lr
 8016b6c:	4462      	add	r2, ip
 8016b6e:	3b01      	subs	r3, #1
 8016b70:	3403      	adds	r4, #3
 8016b72:	e7f0      	b.n	8016b56 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016b74:	d038      	beq.n	8016be8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016b76:	1e5d      	subs	r5, r3, #1
 8016b78:	fb0e 0605 	mla	r6, lr, r5, r0
 8016b7c:	1436      	asrs	r6, r6, #16
 8016b7e:	d42a      	bmi.n	8016bd6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016b80:	4556      	cmp	r6, sl
 8016b82:	da28      	bge.n	8016bd6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016b84:	fb0c 2505 	mla	r5, ip, r5, r2
 8016b88:	142d      	asrs	r5, r5, #16
 8016b8a:	d424      	bmi.n	8016bd6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016b8c:	454d      	cmp	r5, r9
 8016b8e:	da22      	bge.n	8016bd6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016b90:	1ce6      	adds	r6, r4, #3
 8016b92:	4699      	mov	r9, r3
 8016b94:	f1b9 0f00 	cmp.w	r9, #0
 8016b98:	f106 0603 	add.w	r6, r6, #3
 8016b9c:	dd1f      	ble.n	8016bde <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8016b9e:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8016ba2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8016ba6:	1415      	asrs	r5, r2, #16
 8016ba8:	4470      	add	r0, lr
 8016baa:	4462      	add	r2, ip
 8016bac:	f109 39ff 	add.w	r9, r9, #4294967295
 8016bb0:	fb0b a505 	mla	r5, fp, r5, sl
 8016bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016bb8:	eb08 0a05 	add.w	sl, r8, r5
 8016bbc:	f818 5005 	ldrb.w	r5, [r8, r5]
 8016bc0:	f806 5c06 	strb.w	r5, [r6, #-6]
 8016bc4:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8016bc8:	f806 5c05 	strb.w	r5, [r6, #-5]
 8016bcc:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8016bd0:	f806 5c04 	strb.w	r5, [r6, #-4]
 8016bd4:	e7de      	b.n	8016b94 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016bd6:	2600      	movs	r6, #0
 8016bd8:	1b9d      	subs	r5, r3, r6
 8016bda:	2d00      	cmp	r5, #0
 8016bdc:	dc38      	bgt.n	8016c50 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016bde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016be2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016be6:	441c      	add	r4, r3
 8016be8:	2900      	cmp	r1, #0
 8016bea:	dd59      	ble.n	8016ca0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016bec:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016bf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016bf2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016bf6:	3901      	subs	r1, #1
 8016bf8:	eeb0 6a62 	vmov.f32	s12, s5
 8016bfc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016c00:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016c04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016c08:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8016c0c:	eeb0 6a43 	vmov.f32	s12, s6
 8016c10:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016c14:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8016c18:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016c1c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016c20:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016c24:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016c28:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016c2c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016c30:	ee12 2a90 	vmov	r2, s5
 8016c34:	eef0 2a47 	vmov.f32	s5, s14
 8016c38:	fb92 fef3 	sdiv	lr, r2, r3
 8016c3c:	ee13 2a10 	vmov	r2, s6
 8016c40:	eeb0 3a67 	vmov.f32	s6, s15
 8016c44:	fb92 fcf3 	sdiv	ip, r2, r3
 8016c48:	9a01      	ldr	r2, [sp, #4]
 8016c4a:	bf08      	it	eq
 8016c4c:	4613      	moveq	r3, r2
 8016c4e:	e772      	b.n	8016b36 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016c50:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016c54:	d420      	bmi.n	8016c98 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016c56:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8016c5a:	45cb      	cmp	fp, r9
 8016c5c:	dd1c      	ble.n	8016c98 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016c5e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016c62:	d419      	bmi.n	8016c98 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016c64:	68fd      	ldr	r5, [r7, #12]
 8016c66:	4555      	cmp	r5, sl
 8016c68:	dd16      	ble.n	8016c98 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016c6a:	fa0f f58b 	sxth.w	r5, fp
 8016c6e:	fb0a 9505 	mla	r5, sl, r5, r9
 8016c72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016c76:	f818 9005 	ldrb.w	r9, [r8, r5]
 8016c7a:	eb08 0b05 	add.w	fp, r8, r5
 8016c7e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8016c82:	f804 9005 	strb.w	r9, [r4, r5]
 8016c86:	4425      	add	r5, r4
 8016c88:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8016c8c:	f885 9001 	strb.w	r9, [r5, #1]
 8016c90:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8016c94:	f885 9002 	strb.w	r9, [r5, #2]
 8016c98:	4470      	add	r0, lr
 8016c9a:	4462      	add	r2, ip
 8016c9c:	3601      	adds	r6, #1
 8016c9e:	e79b      	b.n	8016bd8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8016ca0:	b003      	add	sp, #12
 8016ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ca6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016ca6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016caa:	b085      	sub	sp, #20
 8016cac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016cb0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8016cb2:	9202      	str	r2, [sp, #8]
 8016cb4:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8016cb8:	6860      	ldr	r0, [r4, #4]
 8016cba:	9203      	str	r2, [sp, #12]
 8016cbc:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8016cc0:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8016cc4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8016cc8:	fb00 2505 	mla	r5, r0, r5, r2
 8016ccc:	6822      	ldr	r2, [r4, #0]
 8016cce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016cd2:	4415      	add	r5, r2
 8016cd4:	f8dc 2000 	ldr.w	r2, [ip]
 8016cd8:	9201      	str	r2, [sp, #4]
 8016cda:	2900      	cmp	r1, #0
 8016cdc:	dc03      	bgt.n	8016ce6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8016cde:	9a02      	ldr	r2, [sp, #8]
 8016ce0:	2a00      	cmp	r2, #0
 8016ce2:	f340 8122 	ble.w	8016f2a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8016ce6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016ce8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016cec:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8016cf0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016cf2:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016cf6:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	dd0d      	ble.n	8016d1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8016cfe:	1422      	asrs	r2, r4, #16
 8016d00:	d405      	bmi.n	8016d0e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016d02:	4542      	cmp	r2, r8
 8016d04:	da03      	bge.n	8016d0e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016d06:	1402      	asrs	r2, r0, #16
 8016d08:	d401      	bmi.n	8016d0e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016d0a:	42ba      	cmp	r2, r7
 8016d0c:	db06      	blt.n	8016d1c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016d0e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016d10:	4474      	add	r4, lr
 8016d12:	3b01      	subs	r3, #1
 8016d14:	3503      	adds	r5, #3
 8016d16:	4410      	add	r0, r2
 8016d18:	e7ef      	b.n	8016cfa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8016d1a:	d072      	beq.n	8016e02 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8016d1c:	1e5a      	subs	r2, r3, #1
 8016d1e:	fb0e 4602 	mla	r6, lr, r2, r4
 8016d22:	1436      	asrs	r6, r6, #16
 8016d24:	d462      	bmi.n	8016dec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016d26:	4546      	cmp	r6, r8
 8016d28:	da60      	bge.n	8016dec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016d2a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8016d2c:	fb06 0202 	mla	r2, r6, r2, r0
 8016d30:	1412      	asrs	r2, r2, #16
 8016d32:	d45b      	bmi.n	8016dec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016d34:	42ba      	cmp	r2, r7
 8016d36:	da59      	bge.n	8016dec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016d38:	1cef      	adds	r7, r5, #3
 8016d3a:	4699      	mov	r9, r3
 8016d3c:	f1b9 0f00 	cmp.w	r9, #0
 8016d40:	dd5a      	ble.n	8016df8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016d42:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016d46:	1426      	asrs	r6, r4, #16
 8016d48:	1402      	asrs	r2, r0, #16
 8016d4a:	fb08 6202 	mla	r2, r8, r2, r6
 8016d4e:	9e01      	ldr	r6, [sp, #4]
 8016d50:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8016d54:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8016d58:	d041      	beq.n	8016dde <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016d5a:	9a03      	ldr	r2, [sp, #12]
 8016d5c:	fa5f fb86 	uxtb.w	fp, r6
 8016d60:	fb02 f808 	mul.w	r8, r2, r8
 8016d64:	f108 0201 	add.w	r2, r8, #1
 8016d68:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8016d6c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8016d70:	1212      	asrs	r2, r2, #8
 8016d72:	fa1f fa82 	uxth.w	sl, r2
 8016d76:	43d2      	mvns	r2, r2
 8016d78:	fb1b fb0a 	smulbb	fp, fp, sl
 8016d7c:	b2d2      	uxtb	r2, r2
 8016d7e:	fb08 b802 	mla	r8, r8, r2, fp
 8016d82:	fa1f f888 	uxth.w	r8, r8
 8016d86:	f108 0b01 	add.w	fp, r8, #1
 8016d8a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016d8e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8016d92:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016d96:	fb1b fb0a 	smulbb	fp, fp, sl
 8016d9a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016d9e:	fb16 fa0a 	smulbb	sl, r6, sl
 8016da2:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8016da6:	f807 8c03 	strb.w	r8, [r7, #-3]
 8016daa:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8016dae:	fb06 aa02 	mla	sl, r6, r2, sl
 8016db2:	fb08 b802 	mla	r8, r8, r2, fp
 8016db6:	fa1f fa8a 	uxth.w	sl, sl
 8016dba:	fa1f f888 	uxth.w	r8, r8
 8016dbe:	f10a 0601 	add.w	r6, sl, #1
 8016dc2:	f108 0b01 	add.w	fp, r8, #1
 8016dc6:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8016dca:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016dce:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016dd2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016dd6:	f807 ac01 	strb.w	sl, [r7, #-1]
 8016dda:	f807 8c02 	strb.w	r8, [r7, #-2]
 8016dde:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016de0:	4474      	add	r4, lr
 8016de2:	3703      	adds	r7, #3
 8016de4:	f109 39ff 	add.w	r9, r9, #4294967295
 8016de8:	4410      	add	r0, r2
 8016dea:	e7a7      	b.n	8016d3c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016dec:	f04f 0800 	mov.w	r8, #0
 8016df0:	eba3 0208 	sub.w	r2, r3, r8
 8016df4:	2a00      	cmp	r2, #0
 8016df6:	dc3b      	bgt.n	8016e70 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8016df8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016dfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016e00:	441d      	add	r5, r3
 8016e02:	2900      	cmp	r1, #0
 8016e04:	f340 8091 	ble.w	8016f2a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8016e08:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016e0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016e0e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016e12:	3901      	subs	r1, #1
 8016e14:	eeb0 6a62 	vmov.f32	s12, s5
 8016e18:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016e1c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016e20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016e24:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8016e28:	eeb0 6a43 	vmov.f32	s12, s6
 8016e2c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016e30:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8016e34:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016e38:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016e3c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016e40:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016e44:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016e48:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016e4c:	ee12 2a90 	vmov	r2, s5
 8016e50:	eef0 2a47 	vmov.f32	s5, s14
 8016e54:	fb92 fef3 	sdiv	lr, r2, r3
 8016e58:	ee13 2a10 	vmov	r2, s6
 8016e5c:	eeb0 3a67 	vmov.f32	s6, s15
 8016e60:	fb92 f3f3 	sdiv	r3, r2, r3
 8016e64:	9a02      	ldr	r2, [sp, #8]
 8016e66:	9312      	str	r3, [sp, #72]	@ 0x48
 8016e68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016e6a:	bf08      	it	eq
 8016e6c:	4613      	moveq	r3, r2
 8016e6e:	e734      	b.n	8016cda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016e70:	1427      	asrs	r7, r4, #16
 8016e72:	d454      	bmi.n	8016f1e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016e74:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016e78:	42be      	cmp	r6, r7
 8016e7a:	dd50      	ble.n	8016f1e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016e7c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016e80:	d44d      	bmi.n	8016f1e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016e82:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016e86:	454a      	cmp	r2, r9
 8016e88:	dd49      	ble.n	8016f1e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016e8a:	b236      	sxth	r6, r6
 8016e8c:	9a01      	ldr	r2, [sp, #4]
 8016e8e:	fb09 7606 	mla	r6, r9, r6, r7
 8016e92:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016e96:	0e3a      	lsrs	r2, r7, #24
 8016e98:	d041      	beq.n	8016f1e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016e9a:	9e03      	ldr	r6, [sp, #12]
 8016e9c:	fa5f fb87 	uxtb.w	fp, r7
 8016ea0:	4372      	muls	r2, r6
 8016ea2:	1c56      	adds	r6, r2, #1
 8016ea4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016ea8:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8016eac:	1212      	asrs	r2, r2, #8
 8016eae:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016eb2:	fa1f fa82 	uxth.w	sl, r2
 8016eb6:	43d2      	mvns	r2, r2
 8016eb8:	fb1b fb0a 	smulbb	fp, fp, sl
 8016ebc:	b2d2      	uxtb	r2, r2
 8016ebe:	fb09 b902 	mla	r9, r9, r2, fp
 8016ec2:	fa1f f989 	uxth.w	r9, r9
 8016ec6:	f109 0b01 	add.w	fp, r9, #1
 8016eca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016ece:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016ed2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016ed6:	fb1b fb0a 	smulbb	fp, fp, sl
 8016eda:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016ede:	fb17 fa0a 	smulbb	sl, r7, sl
 8016ee2:	f805 9006 	strb.w	r9, [r5, r6]
 8016ee6:	442e      	add	r6, r5
 8016ee8:	78b7      	ldrb	r7, [r6, #2]
 8016eea:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016eee:	fb07 aa02 	mla	sl, r7, r2, sl
 8016ef2:	fb09 b902 	mla	r9, r9, r2, fp
 8016ef6:	fa1f fa8a 	uxth.w	sl, sl
 8016efa:	fa1f f989 	uxth.w	r9, r9
 8016efe:	f10a 0701 	add.w	r7, sl, #1
 8016f02:	f109 0b01 	add.w	fp, r9, #1
 8016f06:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016f0a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016f0e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016f12:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016f16:	f886 a002 	strb.w	sl, [r6, #2]
 8016f1a:	f886 9001 	strb.w	r9, [r6, #1]
 8016f1e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016f20:	4474      	add	r4, lr
 8016f22:	f108 0801 	add.w	r8, r8, #1
 8016f26:	4410      	add	r0, r2
 8016f28:	e762      	b.n	8016df0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016f2a:	b005      	add	sp, #20
 8016f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016f30 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f34:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8016f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016f3a:	9201      	str	r2, [sp, #4]
 8016f3c:	6860      	ldr	r0, [r4, #4]
 8016f3e:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8016f42:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 8016f46:	fb00 2505 	mla	r5, r0, r5, r2
 8016f4a:	6822      	ldr	r2, [r4, #0]
 8016f4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016f50:	4415      	add	r5, r2
 8016f52:	f8dc 2000 	ldr.w	r2, [ip]
 8016f56:	9200      	str	r2, [sp, #0]
 8016f58:	2900      	cmp	r1, #0
 8016f5a:	dc03      	bgt.n	8016f64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016f5c:	9a01      	ldr	r2, [sp, #4]
 8016f5e:	2a00      	cmp	r2, #0
 8016f60:	f340 812b 	ble.w	80171ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016f64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016f66:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016f6a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8016f6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016f70:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016f74:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	dd0e      	ble.n	8016f9a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016f7c:	1422      	asrs	r2, r4, #16
 8016f7e:	d405      	bmi.n	8016f8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016f80:	4572      	cmp	r2, lr
 8016f82:	da03      	bge.n	8016f8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016f84:	1402      	asrs	r2, r0, #16
 8016f86:	d401      	bmi.n	8016f8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016f88:	42ba      	cmp	r2, r7
 8016f8a:	db07      	blt.n	8016f9c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8016f8c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016f8e:	3b01      	subs	r3, #1
 8016f90:	3503      	adds	r5, #3
 8016f92:	4414      	add	r4, r2
 8016f94:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016f96:	4410      	add	r0, r2
 8016f98:	e7ee      	b.n	8016f78 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016f9a:	d06f      	beq.n	801707c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016f9c:	1e5a      	subs	r2, r3, #1
 8016f9e:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8016fa0:	fb06 4602 	mla	r6, r6, r2, r4
 8016fa4:	1436      	asrs	r6, r6, #16
 8016fa6:	d45e      	bmi.n	8017066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016fa8:	4576      	cmp	r6, lr
 8016faa:	da5c      	bge.n	8017066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016fac:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8016fae:	fb06 0202 	mla	r2, r6, r2, r0
 8016fb2:	1412      	asrs	r2, r2, #16
 8016fb4:	d457      	bmi.n	8017066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016fb6:	42ba      	cmp	r2, r7
 8016fb8:	da55      	bge.n	8017066 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016fba:	1cee      	adds	r6, r5, #3
 8016fbc:	469a      	mov	sl, r3
 8016fbe:	f1ba 0f00 	cmp.w	sl, #0
 8016fc2:	dd56      	ble.n	8017072 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016fc4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016fc8:	1427      	asrs	r7, r4, #16
 8016fca:	1402      	asrs	r2, r0, #16
 8016fcc:	fb0e 7202 	mla	r2, lr, r2, r7
 8016fd0:	9f00      	ldr	r7, [sp, #0]
 8016fd2:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8016fd6:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8016fda:	d03c      	beq.n	8017056 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016fdc:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8016fe0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016fe4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016fe8:	fa5f f28e 	uxtb.w	r2, lr
 8016fec:	b2ff      	uxtb	r7, r7
 8016fee:	f000 80dd 	beq.w	80171ac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8016ff2:	fa1f f882 	uxth.w	r8, r2
 8016ff6:	43d2      	mvns	r2, r2
 8016ff8:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8016ffc:	fb17 f708 	smulbb	r7, r7, r8
 8017000:	b2d2      	uxtb	r2, r2
 8017002:	fb19 f908 	smulbb	r9, r9, r8
 8017006:	fb0e 7702 	mla	r7, lr, r2, r7
 801700a:	fb1b f808 	smulbb	r8, fp, r8
 801700e:	b2bf      	uxth	r7, r7
 8017010:	f107 0e01 	add.w	lr, r7, #1
 8017014:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8017018:	123f      	asrs	r7, r7, #8
 801701a:	f806 7c03 	strb.w	r7, [r6, #-3]
 801701e:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8017022:	fb07 9902 	mla	r9, r7, r2, r9
 8017026:	fa1f f989 	uxth.w	r9, r9
 801702a:	f109 0701 	add.w	r7, r9, #1
 801702e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8017032:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8017036:	fb07 8802 	mla	r8, r7, r2, r8
 801703a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801703e:	fa1f f888 	uxth.w	r8, r8
 8017042:	f806 9c02 	strb.w	r9, [r6, #-2]
 8017046:	f108 0201 	add.w	r2, r8, #1
 801704a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801704e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017052:	f806 8c01 	strb.w	r8, [r6, #-1]
 8017056:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017058:	3603      	adds	r6, #3
 801705a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801705e:	4414      	add	r4, r2
 8017060:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017062:	4410      	add	r0, r2
 8017064:	e7ab      	b.n	8016fbe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8017066:	f04f 0e00 	mov.w	lr, #0
 801706a:	eba3 020e 	sub.w	r2, r3, lr
 801706e:	2a00      	cmp	r2, #0
 8017070:	dc3d      	bgt.n	80170ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8017072:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017076:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801707a:	441d      	add	r5, r3
 801707c:	2900      	cmp	r1, #0
 801707e:	f340 809c 	ble.w	80171ba <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017082:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017086:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017088:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801708c:	3901      	subs	r1, #1
 801708e:	eeb0 6a62 	vmov.f32	s12, s5
 8017092:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017096:	ee31 1a05 	vadd.f32	s2, s2, s10
 801709a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801709e:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 80170a2:	eeb0 6a43 	vmov.f32	s12, s6
 80170a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80170aa:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 80170ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80170b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80170b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80170ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80170be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80170c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80170c6:	ee12 2a90 	vmov	r2, s5
 80170ca:	eef0 2a47 	vmov.f32	s5, s14
 80170ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80170d2:	ee13 2a10 	vmov	r2, s6
 80170d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80170d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80170da:	eeb0 3a67 	vmov.f32	s6, s15
 80170de:	fb92 f3f3 	sdiv	r3, r2, r3
 80170e2:	9a01      	ldr	r2, [sp, #4]
 80170e4:	9310      	str	r3, [sp, #64]	@ 0x40
 80170e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80170e8:	bf08      	it	eq
 80170ea:	4613      	moveq	r3, r2
 80170ec:	e734      	b.n	8016f58 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80170ee:	1427      	asrs	r7, r4, #16
 80170f0:	d44d      	bmi.n	801718e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80170f2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80170f6:	42be      	cmp	r6, r7
 80170f8:	dd49      	ble.n	801718e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80170fa:	ea5f 4820 	movs.w	r8, r0, asr #16
 80170fe:	d446      	bmi.n	801718e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017100:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017104:	4542      	cmp	r2, r8
 8017106:	dd42      	ble.n	801718e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017108:	b236      	sxth	r6, r6
 801710a:	9a00      	ldr	r2, [sp, #0]
 801710c:	fb08 7606 	mla	r6, r8, r6, r7
 8017110:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8017114:	0e3a      	lsrs	r2, r7, #24
 8017116:	d03a      	beq.n	801718e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017118:	2aff      	cmp	r2, #255	@ 0xff
 801711a:	b2d6      	uxtb	r6, r2
 801711c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8017120:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8017124:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8017128:	b2ff      	uxtb	r7, r7
 801712a:	d037      	beq.n	801719c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801712c:	fa1f f986 	uxth.w	r9, r6
 8017130:	4472      	add	r2, lr
 8017132:	43f6      	mvns	r6, r6
 8017134:	f815 8002 	ldrb.w	r8, [r5, r2]
 8017138:	fb17 f709 	smulbb	r7, r7, r9
 801713c:	fb1a fa09 	smulbb	sl, sl, r9
 8017140:	b2f6      	uxtb	r6, r6
 8017142:	fb1b f909 	smulbb	r9, fp, r9
 8017146:	fb08 7706 	mla	r7, r8, r6, r7
 801714a:	b2bf      	uxth	r7, r7
 801714c:	f107 0801 	add.w	r8, r7, #1
 8017150:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8017154:	123f      	asrs	r7, r7, #8
 8017156:	54af      	strb	r7, [r5, r2]
 8017158:	442a      	add	r2, r5
 801715a:	7857      	ldrb	r7, [r2, #1]
 801715c:	fb07 aa06 	mla	sl, r7, r6, sl
 8017160:	fa1f fa8a 	uxth.w	sl, sl
 8017164:	f10a 0701 	add.w	r7, sl, #1
 8017168:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801716c:	7897      	ldrb	r7, [r2, #2]
 801716e:	fb07 9906 	mla	r9, r7, r6, r9
 8017172:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017176:	fa1f f989 	uxth.w	r9, r9
 801717a:	f882 a001 	strb.w	sl, [r2, #1]
 801717e:	f109 0601 	add.w	r6, r9, #1
 8017182:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8017186:	ea4f 2929 	mov.w	r9, r9, asr #8
 801718a:	f882 9002 	strb.w	r9, [r2, #2]
 801718e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017190:	f10e 0e01 	add.w	lr, lr, #1
 8017194:	4414      	add	r4, r2
 8017196:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017198:	4410      	add	r0, r2
 801719a:	e766      	b.n	801706a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801719c:	4472      	add	r2, lr
 801719e:	54af      	strb	r7, [r5, r2]
 80171a0:	442a      	add	r2, r5
 80171a2:	f882 a001 	strb.w	sl, [r2, #1]
 80171a6:	f882 b002 	strb.w	fp, [r2, #2]
 80171aa:	e7f0      	b.n	801718e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80171ac:	f806 7c03 	strb.w	r7, [r6, #-3]
 80171b0:	f806 9c02 	strb.w	r9, [r6, #-2]
 80171b4:	f806 bc01 	strb.w	fp, [r6, #-1]
 80171b8:	e74d      	b.n	8017056 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80171ba:	b003      	add	sp, #12
 80171bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080171c0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80171c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171c4:	b087      	sub	sp, #28
 80171c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80171ca:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80171cc:	9204      	str	r2, [sp, #16]
 80171ce:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80171d2:	6860      	ldr	r0, [r4, #4]
 80171d4:	9205      	str	r2, [sp, #20]
 80171d6:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 80171da:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 80171de:	9101      	str	r1, [sp, #4]
 80171e0:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 80171e4:	fb00 2505 	mla	r5, r0, r5, r2
 80171e8:	6822      	ldr	r2, [r4, #0]
 80171ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80171ee:	4415      	add	r5, r2
 80171f0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80171f4:	3201      	adds	r2, #1
 80171f6:	f022 0201 	bic.w	r2, r2, #1
 80171fa:	9202      	str	r2, [sp, #8]
 80171fc:	f8dc 2000 	ldr.w	r2, [ip]
 8017200:	9203      	str	r2, [sp, #12]
 8017202:	9a01      	ldr	r2, [sp, #4]
 8017204:	2a00      	cmp	r2, #0
 8017206:	dc03      	bgt.n	8017210 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8017208:	9a04      	ldr	r2, [sp, #16]
 801720a:	2a00      	cmp	r2, #0
 801720c:	f340 8135 	ble.w	801747a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8017210:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017212:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017216:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801721a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801721c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017220:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017224:	2b00      	cmp	r3, #0
 8017226:	dd0d      	ble.n	8017244 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017228:	1422      	asrs	r2, r4, #16
 801722a:	d405      	bmi.n	8017238 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801722c:	4542      	cmp	r2, r8
 801722e:	da03      	bge.n	8017238 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017230:	1402      	asrs	r2, r0, #16
 8017232:	d401      	bmi.n	8017238 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017234:	42ba      	cmp	r2, r7
 8017236:	db06      	blt.n	8017246 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8017238:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801723a:	4474      	add	r4, lr
 801723c:	3b01      	subs	r3, #1
 801723e:	3503      	adds	r5, #3
 8017240:	4410      	add	r0, r2
 8017242:	e7ef      	b.n	8017224 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017244:	d077      	beq.n	8017336 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8017246:	1e5a      	subs	r2, r3, #1
 8017248:	fb0e 4602 	mla	r6, lr, r2, r4
 801724c:	1436      	asrs	r6, r6, #16
 801724e:	d469      	bmi.n	8017324 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017250:	4546      	cmp	r6, r8
 8017252:	da67      	bge.n	8017324 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017254:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017256:	fb06 0202 	mla	r2, r6, r2, r0
 801725a:	1412      	asrs	r2, r2, #16
 801725c:	d462      	bmi.n	8017324 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801725e:	42ba      	cmp	r2, r7
 8017260:	da60      	bge.n	8017324 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017262:	1cee      	adds	r6, r5, #3
 8017264:	4699      	mov	r9, r3
 8017266:	f1b9 0f00 	cmp.w	r9, #0
 801726a:	dd5f      	ble.n	801732c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801726c:	1422      	asrs	r2, r4, #16
 801726e:	9902      	ldr	r1, [sp, #8]
 8017270:	1407      	asrs	r7, r0, #16
 8017272:	fb01 2707 	mla	r7, r1, r7, r2
 8017276:	9903      	ldr	r1, [sp, #12]
 8017278:	087a      	lsrs	r2, r7, #1
 801727a:	5c8a      	ldrb	r2, [r1, r2]
 801727c:	07f9      	lsls	r1, r7, #31
 801727e:	bf54      	ite	pl
 8017280:	f002 020f 	andpl.w	r2, r2, #15
 8017284:	1112      	asrmi	r2, r2, #4
 8017286:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801728a:	b2d2      	uxtb	r2, r2
 801728c:	2a00      	cmp	r2, #0
 801728e:	d042      	beq.n	8017316 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8017290:	497b      	ldr	r1, [pc, #492]	@ (8017480 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8017292:	680f      	ldr	r7, [r1, #0]
 8017294:	9905      	ldr	r1, [sp, #20]
 8017296:	fa5f fb87 	uxtb.w	fp, r7
 801729a:	434a      	muls	r2, r1
 801729c:	f102 0801 	add.w	r8, r2, #1
 80172a0:	eb08 2222 	add.w	r2, r8, r2, asr #8
 80172a4:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 80172a8:	1212      	asrs	r2, r2, #8
 80172aa:	fa1f fa82 	uxth.w	sl, r2
 80172ae:	43d2      	mvns	r2, r2
 80172b0:	fb1b fb0a 	smulbb	fp, fp, sl
 80172b4:	b2d2      	uxtb	r2, r2
 80172b6:	fb08 b802 	mla	r8, r8, r2, fp
 80172ba:	fa1f f888 	uxth.w	r8, r8
 80172be:	f108 0b01 	add.w	fp, r8, #1
 80172c2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80172c6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80172ca:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80172ce:	fb1b fb0a 	smulbb	fp, fp, sl
 80172d2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80172d6:	fb17 fa0a 	smulbb	sl, r7, sl
 80172da:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80172de:	f806 8c03 	strb.w	r8, [r6, #-3]
 80172e2:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 80172e6:	fb07 aa02 	mla	sl, r7, r2, sl
 80172ea:	fb08 b802 	mla	r8, r8, r2, fp
 80172ee:	fa1f fa8a 	uxth.w	sl, sl
 80172f2:	fa1f f888 	uxth.w	r8, r8
 80172f6:	f10a 0701 	add.w	r7, sl, #1
 80172fa:	f108 0b01 	add.w	fp, r8, #1
 80172fe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017302:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017306:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801730a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801730e:	f806 ac01 	strb.w	sl, [r6, #-1]
 8017312:	f806 8c02 	strb.w	r8, [r6, #-2]
 8017316:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017318:	4474      	add	r4, lr
 801731a:	3603      	adds	r6, #3
 801731c:	f109 39ff 	add.w	r9, r9, #4294967295
 8017320:	4410      	add	r0, r2
 8017322:	e7a0      	b.n	8017266 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017324:	2700      	movs	r7, #0
 8017326:	1bda      	subs	r2, r3, r7
 8017328:	2a00      	cmp	r2, #0
 801732a:	dc3e      	bgt.n	80173aa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801732c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017330:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017334:	441d      	add	r5, r3
 8017336:	9b01      	ldr	r3, [sp, #4]
 8017338:	2b00      	cmp	r3, #0
 801733a:	f340 809e 	ble.w	801747a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801733e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017342:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017344:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017348:	eeb0 6a62 	vmov.f32	s12, s5
 801734c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017350:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017354:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017358:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801735c:	eeb0 6a43 	vmov.f32	s12, s6
 8017360:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017364:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8017368:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801736c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017370:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017374:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017378:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801737c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017380:	ee12 2a90 	vmov	r2, s5
 8017384:	eef0 2a47 	vmov.f32	s5, s14
 8017388:	fb92 fef3 	sdiv	lr, r2, r3
 801738c:	ee13 2a10 	vmov	r2, s6
 8017390:	eeb0 3a67 	vmov.f32	s6, s15
 8017394:	fb92 f3f3 	sdiv	r3, r2, r3
 8017398:	9314      	str	r3, [sp, #80]	@ 0x50
 801739a:	9b01      	ldr	r3, [sp, #4]
 801739c:	9a04      	ldr	r2, [sp, #16]
 801739e:	3b01      	subs	r3, #1
 80173a0:	9301      	str	r3, [sp, #4]
 80173a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80173a4:	bf08      	it	eq
 80173a6:	4613      	moveq	r3, r2
 80173a8:	e72b      	b.n	8017202 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80173aa:	1426      	asrs	r6, r4, #16
 80173ac:	d460      	bmi.n	8017470 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80173ae:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80173b2:	42b2      	cmp	r2, r6
 80173b4:	dd5c      	ble.n	8017470 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80173b6:	ea5f 4820 	movs.w	r8, r0, asr #16
 80173ba:	d459      	bmi.n	8017470 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80173bc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80173c0:	4542      	cmp	r2, r8
 80173c2:	dd55      	ble.n	8017470 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80173c4:	9a02      	ldr	r2, [sp, #8]
 80173c6:	9903      	ldr	r1, [sp, #12]
 80173c8:	fb08 6602 	mla	r6, r8, r2, r6
 80173cc:	0872      	lsrs	r2, r6, #1
 80173ce:	07f6      	lsls	r6, r6, #31
 80173d0:	5c8a      	ldrb	r2, [r1, r2]
 80173d2:	bf54      	ite	pl
 80173d4:	f002 020f 	andpl.w	r2, r2, #15
 80173d8:	1112      	asrmi	r2, r2, #4
 80173da:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80173de:	b2d2      	uxtb	r2, r2
 80173e0:	2a00      	cmp	r2, #0
 80173e2:	d045      	beq.n	8017470 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80173e4:	4926      	ldr	r1, [pc, #152]	@ (8017480 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80173e6:	f8d1 8000 	ldr.w	r8, [r1]
 80173ea:	9905      	ldr	r1, [sp, #20]
 80173ec:	fa5f fb88 	uxtb.w	fp, r8
 80173f0:	434a      	muls	r2, r1
 80173f2:	1c56      	adds	r6, r2, #1
 80173f4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80173f8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80173fc:	1212      	asrs	r2, r2, #8
 80173fe:	f815 9006 	ldrb.w	r9, [r5, r6]
 8017402:	fa1f fa82 	uxth.w	sl, r2
 8017406:	43d2      	mvns	r2, r2
 8017408:	fb1b fb0a 	smulbb	fp, fp, sl
 801740c:	b2d2      	uxtb	r2, r2
 801740e:	fb09 b902 	mla	r9, r9, r2, fp
 8017412:	fa1f f989 	uxth.w	r9, r9
 8017416:	f109 0b01 	add.w	fp, r9, #1
 801741a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801741e:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8017422:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8017426:	fb1b fb0a 	smulbb	fp, fp, sl
 801742a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801742e:	fb18 fa0a 	smulbb	sl, r8, sl
 8017432:	f805 9006 	strb.w	r9, [r5, r6]
 8017436:	442e      	add	r6, r5
 8017438:	f896 8002 	ldrb.w	r8, [r6, #2]
 801743c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8017440:	fb08 aa02 	mla	sl, r8, r2, sl
 8017444:	fb09 b902 	mla	r9, r9, r2, fp
 8017448:	fa1f fa8a 	uxth.w	sl, sl
 801744c:	fa1f f989 	uxth.w	r9, r9
 8017450:	f10a 0801 	add.w	r8, sl, #1
 8017454:	f109 0b01 	add.w	fp, r9, #1
 8017458:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801745c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017460:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017464:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017468:	f886 a002 	strb.w	sl, [r6, #2]
 801746c:	f886 9001 	strb.w	r9, [r6, #1]
 8017470:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017472:	4474      	add	r4, lr
 8017474:	3701      	adds	r7, #1
 8017476:	4410      	add	r0, r2
 8017478:	e755      	b.n	8017326 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801747a:	b007      	add	sp, #28
 801747c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017480:	24025150 	.word	0x24025150

08017484 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017488:	b085      	sub	sp, #20
 801748a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801748e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8017490:	9203      	str	r2, [sp, #12]
 8017492:	6860      	ldr	r0, [r4, #4]
 8017494:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8017498:	9100      	str	r1, [sp, #0]
 801749a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 801749e:	fb00 2606 	mla	r6, r0, r6, r2
 80174a2:	6822      	ldr	r2, [r4, #0]
 80174a4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80174a8:	4416      	add	r6, r2
 80174aa:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80174ae:	3201      	adds	r2, #1
 80174b0:	f022 0201 	bic.w	r2, r2, #1
 80174b4:	9201      	str	r2, [sp, #4]
 80174b6:	f8dc 2000 	ldr.w	r2, [ip]
 80174ba:	9202      	str	r2, [sp, #8]
 80174bc:	9a00      	ldr	r2, [sp, #0]
 80174be:	2a00      	cmp	r2, #0
 80174c0:	dc03      	bgt.n	80174ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80174c2:	9a03      	ldr	r2, [sp, #12]
 80174c4:	2a00      	cmp	r2, #0
 80174c6:	f340 8140 	ble.w	801774a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80174ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80174cc:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80174d0:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 80174d4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80174d6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80174da:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80174de:	2b00      	cmp	r3, #0
 80174e0:	dd0e      	ble.n	8017500 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80174e2:	142a      	asrs	r2, r5, #16
 80174e4:	d405      	bmi.n	80174f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80174e6:	4572      	cmp	r2, lr
 80174e8:	da03      	bge.n	80174f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80174ea:	1422      	asrs	r2, r4, #16
 80174ec:	d401      	bmi.n	80174f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80174ee:	42ba      	cmp	r2, r7
 80174f0:	db07      	blt.n	8017502 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80174f2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80174f4:	3b01      	subs	r3, #1
 80174f6:	3603      	adds	r6, #3
 80174f8:	4415      	add	r5, r2
 80174fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80174fc:	4414      	add	r4, r2
 80174fe:	e7ee      	b.n	80174de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8017500:	d072      	beq.n	80175e8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017502:	1e5a      	subs	r2, r3, #1
 8017504:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017506:	fb00 5002 	mla	r0, r0, r2, r5
 801750a:	1400      	asrs	r0, r0, #16
 801750c:	d463      	bmi.n	80175d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801750e:	4570      	cmp	r0, lr
 8017510:	da61      	bge.n	80175d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017512:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8017514:	fb00 4202 	mla	r2, r0, r2, r4
 8017518:	1412      	asrs	r2, r2, #16
 801751a:	d45c      	bmi.n	80175d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801751c:	42ba      	cmp	r2, r7
 801751e:	da5a      	bge.n	80175d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017520:	1cf0      	adds	r0, r6, #3
 8017522:	469a      	mov	sl, r3
 8017524:	f1ba 0f00 	cmp.w	sl, #0
 8017528:	dd59      	ble.n	80175de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801752a:	142a      	asrs	r2, r5, #16
 801752c:	9901      	ldr	r1, [sp, #4]
 801752e:	1427      	asrs	r7, r4, #16
 8017530:	fb01 2707 	mla	r7, r1, r7, r2
 8017534:	9902      	ldr	r1, [sp, #8]
 8017536:	087a      	lsrs	r2, r7, #1
 8017538:	5c8a      	ldrb	r2, [r1, r2]
 801753a:	07f9      	lsls	r1, r7, #31
 801753c:	bf54      	ite	pl
 801753e:	f002 020f 	andpl.w	r2, r2, #15
 8017542:	1112      	asrmi	r2, r2, #4
 8017544:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017548:	b2d2      	uxtb	r2, r2
 801754a:	2a00      	cmp	r2, #0
 801754c:	d03b      	beq.n	80175c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801754e:	4980      	ldr	r1, [pc, #512]	@ (8017750 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8017550:	2aff      	cmp	r2, #255	@ 0xff
 8017552:	680f      	ldr	r7, [r1, #0]
 8017554:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8017558:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801755c:	b2ff      	uxtb	r7, r7
 801755e:	f000 80ed 	beq.w	801773c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8017562:	fa1f f882 	uxth.w	r8, r2
 8017566:	43d2      	mvns	r2, r2
 8017568:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801756c:	fb17 f708 	smulbb	r7, r7, r8
 8017570:	b2d2      	uxtb	r2, r2
 8017572:	fb19 f908 	smulbb	r9, r9, r8
 8017576:	fb0e 7702 	mla	r7, lr, r2, r7
 801757a:	fb1b f808 	smulbb	r8, fp, r8
 801757e:	b2bf      	uxth	r7, r7
 8017580:	f107 0e01 	add.w	lr, r7, #1
 8017584:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8017588:	123f      	asrs	r7, r7, #8
 801758a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801758e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8017592:	fb07 9902 	mla	r9, r7, r2, r9
 8017596:	fa1f f989 	uxth.w	r9, r9
 801759a:	f109 0701 	add.w	r7, r9, #1
 801759e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80175a2:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80175a6:	fb07 8802 	mla	r8, r7, r2, r8
 80175aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80175ae:	fa1f f888 	uxth.w	r8, r8
 80175b2:	f800 9c02 	strb.w	r9, [r0, #-2]
 80175b6:	f108 0201 	add.w	r2, r8, #1
 80175ba:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80175be:	ea4f 2828 	mov.w	r8, r8, asr #8
 80175c2:	f800 8c01 	strb.w	r8, [r0, #-1]
 80175c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80175c8:	3003      	adds	r0, #3
 80175ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80175ce:	4415      	add	r5, r2
 80175d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80175d2:	4414      	add	r4, r2
 80175d4:	e7a6      	b.n	8017524 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80175d6:	2700      	movs	r7, #0
 80175d8:	1bda      	subs	r2, r3, r7
 80175da:	2a00      	cmp	r2, #0
 80175dc:	dc40      	bgt.n	8017660 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80175de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80175e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80175e6:	441e      	add	r6, r3
 80175e8:	9b00      	ldr	r3, [sp, #0]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	f340 80ad 	ble.w	801774a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80175f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80175f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80175f6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80175fa:	eeb0 6a62 	vmov.f32	s12, s5
 80175fe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017602:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017606:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801760a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801760e:	eeb0 6a43 	vmov.f32	s12, s6
 8017612:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017616:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801761a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801761e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017622:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017626:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801762a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801762e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017632:	ee12 2a90 	vmov	r2, s5
 8017636:	eef0 2a47 	vmov.f32	s5, s14
 801763a:	fb92 f3f3 	sdiv	r3, r2, r3
 801763e:	ee13 2a10 	vmov	r2, s6
 8017642:	9311      	str	r3, [sp, #68]	@ 0x44
 8017644:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017646:	eeb0 3a67 	vmov.f32	s6, s15
 801764a:	fb92 f3f3 	sdiv	r3, r2, r3
 801764e:	9312      	str	r3, [sp, #72]	@ 0x48
 8017650:	9b00      	ldr	r3, [sp, #0]
 8017652:	9a03      	ldr	r2, [sp, #12]
 8017654:	3b01      	subs	r3, #1
 8017656:	9300      	str	r3, [sp, #0]
 8017658:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801765a:	bf08      	it	eq
 801765c:	4613      	moveq	r3, r2
 801765e:	e72d      	b.n	80174bc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8017660:	1428      	asrs	r0, r5, #16
 8017662:	d45c      	bmi.n	801771e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017664:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017668:	4282      	cmp	r2, r0
 801766a:	dd58      	ble.n	801771e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801766c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8017670:	d455      	bmi.n	801771e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017672:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017676:	4572      	cmp	r2, lr
 8017678:	dd51      	ble.n	801771e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801767a:	9a01      	ldr	r2, [sp, #4]
 801767c:	9902      	ldr	r1, [sp, #8]
 801767e:	fb0e 0002 	mla	r0, lr, r2, r0
 8017682:	0842      	lsrs	r2, r0, #1
 8017684:	07c0      	lsls	r0, r0, #31
 8017686:	5c8a      	ldrb	r2, [r1, r2]
 8017688:	bf54      	ite	pl
 801768a:	f002 020f 	andpl.w	r2, r2, #15
 801768e:	1112      	asrmi	r2, r2, #4
 8017690:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017694:	b2d2      	uxtb	r2, r2
 8017696:	2a00      	cmp	r2, #0
 8017698:	d041      	beq.n	801771e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801769a:	492d      	ldr	r1, [pc, #180]	@ (8017750 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801769c:	2aff      	cmp	r2, #255	@ 0xff
 801769e:	6808      	ldr	r0, [r1, #0]
 80176a0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 80176a4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80176a8:	fa5f fe80 	uxtb.w	lr, r0
 80176ac:	ea4f 0047 	mov.w	r0, r7, lsl #1
 80176b0:	d03b      	beq.n	801772a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80176b2:	fa1f f982 	uxth.w	r9, r2
 80176b6:	4438      	add	r0, r7
 80176b8:	43d2      	mvns	r2, r2
 80176ba:	f816 8000 	ldrb.w	r8, [r6, r0]
 80176be:	fb1e fe09 	smulbb	lr, lr, r9
 80176c2:	fb1a fa09 	smulbb	sl, sl, r9
 80176c6:	b2d2      	uxtb	r2, r2
 80176c8:	fb1b f909 	smulbb	r9, fp, r9
 80176cc:	fb08 ee02 	mla	lr, r8, r2, lr
 80176d0:	fa1f fe8e 	uxth.w	lr, lr
 80176d4:	f10e 0801 	add.w	r8, lr, #1
 80176d8:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 80176dc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80176e0:	f806 e000 	strb.w	lr, [r6, r0]
 80176e4:	4430      	add	r0, r6
 80176e6:	f890 e001 	ldrb.w	lr, [r0, #1]
 80176ea:	fb0e aa02 	mla	sl, lr, r2, sl
 80176ee:	fa1f fa8a 	uxth.w	sl, sl
 80176f2:	f10a 0e01 	add.w	lr, sl, #1
 80176f6:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80176fa:	f890 e002 	ldrb.w	lr, [r0, #2]
 80176fe:	fb0e 9902 	mla	r9, lr, r2, r9
 8017702:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017706:	fa1f f989 	uxth.w	r9, r9
 801770a:	f880 a001 	strb.w	sl, [r0, #1]
 801770e:	f109 0201 	add.w	r2, r9, #1
 8017712:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8017716:	ea4f 2929 	mov.w	r9, r9, asr #8
 801771a:	f880 9002 	strb.w	r9, [r0, #2]
 801771e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017720:	3701      	adds	r7, #1
 8017722:	4415      	add	r5, r2
 8017724:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017726:	4414      	add	r4, r2
 8017728:	e756      	b.n	80175d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801772a:	4438      	add	r0, r7
 801772c:	f806 e000 	strb.w	lr, [r6, r0]
 8017730:	4430      	add	r0, r6
 8017732:	f880 a001 	strb.w	sl, [r0, #1]
 8017736:	f880 b002 	strb.w	fp, [r0, #2]
 801773a:	e7f0      	b.n	801771e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801773c:	f800 7c03 	strb.w	r7, [r0, #-3]
 8017740:	f800 9c02 	strb.w	r9, [r0, #-2]
 8017744:	f800 bc01 	strb.w	fp, [r0, #-1]
 8017748:	e73d      	b.n	80175c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801774a:	b005      	add	sp, #20
 801774c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017750:	24025150 	.word	0x24025150

08017754 <_ZN8touchgfx8LCD24bppD1Ev>:
 8017754:	4770      	bx	lr

08017756 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8017756:	4770      	bx	lr

08017758 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8017758:	4770      	bx	lr

0801775a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801775a:	4770      	bx	lr

0801775c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801775c:	4770      	bx	lr

0801775e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801775e:	4770      	bx	lr

08017760 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8017760:	4770      	bx	lr

08017762 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8017762:	4770      	bx	lr

08017764 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017764:	4770      	bx	lr

08017766 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017766:	4770      	bx	lr

08017768 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017768:	4770      	bx	lr

0801776a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801776a:	4770      	bx	lr

0801776c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801776c:	4770      	bx	lr

0801776e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801776e:	4770      	bx	lr

08017770 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8017770:	4770      	bx	lr

08017772 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017772:	4770      	bx	lr

08017774 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017774:	4770      	bx	lr

08017776 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017776:	4770      	bx	lr

08017778 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017778:	4770      	bx	lr

0801777a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801777a:	4770      	bx	lr

0801777c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801777c:	4770      	bx	lr

0801777e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801777e:	4770      	bx	lr

08017780 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8017780:	4770      	bx	lr

08017782 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017782:	4770      	bx	lr

08017784 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8017784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017786:	4606      	mov	r6, r0
 8017788:	b087      	sub	sp, #28
 801778a:	4615      	mov	r5, r2
 801778c:	461f      	mov	r7, r3
 801778e:	b353      	cbz	r3, 80177e6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017790:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017794:	2b00      	cmp	r3, #0
 8017796:	dd26      	ble.n	80177e6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017798:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801779c:	2b00      	cmp	r3, #0
 801779e:	dd22      	ble.n	80177e6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80177a0:	6808      	ldr	r0, [r1, #0]
 80177a2:	aa04      	add	r2, sp, #16
 80177a4:	6849      	ldr	r1, [r1, #4]
 80177a6:	4c1b      	ldr	r4, [pc, #108]	@ (8017814 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80177a8:	c203      	stmia	r2!, {r0, r1}
 80177aa:	a804      	add	r0, sp, #16
 80177ac:	f7fa ff76 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80177b0:	6820      	ldr	r0, [r4, #0]
 80177b2:	6803      	ldr	r3, [r0, #0]
 80177b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80177b6:	4798      	blx	r3
 80177b8:	2fff      	cmp	r7, #255	@ 0xff
 80177ba:	d016      	beq.n	80177ea <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80177bc:	f010 0f08 	tst.w	r0, #8
 80177c0:	6820      	ldr	r0, [r4, #0]
 80177c2:	d015      	beq.n	80177f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 80177c4:	2400      	movs	r4, #0
 80177c6:	6801      	ldr	r1, [r0, #0]
 80177c8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80177cc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80177d0:	e9cd 7402 	strd	r7, r4, [sp, #8]
 80177d4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80177d8:	9401      	str	r4, [sp, #4]
 80177da:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80177de:	9400      	str	r4, [sp, #0]
 80177e0:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 80177e2:	4629      	mov	r1, r5
 80177e4:	47a0      	blx	r4
 80177e6:	b007      	add	sp, #28
 80177e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177ea:	f010 0f02 	tst.w	r0, #2
 80177ee:	e7e7      	b.n	80177c0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 80177f0:	6803      	ldr	r3, [r0, #0]
 80177f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80177f4:	4798      	blx	r3
 80177f6:	4b08      	ldr	r3, [pc, #32]	@ (8017818 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 80177f8:	4601      	mov	r1, r0
 80177fa:	4630      	mov	r0, r6
 80177fc:	881a      	ldrh	r2, [r3, #0]
 80177fe:	6833      	ldr	r3, [r6, #0]
 8017800:	e9cd 5700 	strd	r5, r7, [sp]
 8017804:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8017806:	ab04      	add	r3, sp, #16
 8017808:	47a8      	blx	r5
 801780a:	6820      	ldr	r0, [r4, #0]
 801780c:	6803      	ldr	r3, [r0, #0]
 801780e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017810:	4798      	blx	r3
 8017812:	e7e8      	b.n	80177e6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017814:	24025140 	.word	0x24025140
 8017818:	2402513a 	.word	0x2402513a

0801781c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801781c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017820:	b08b      	sub	sp, #44	@ 0x2c
 8017822:	460d      	mov	r5, r1
 8017824:	4616      	mov	r6, r2
 8017826:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 801782a:	f1b8 0f00 	cmp.w	r8, #0
 801782e:	d047      	beq.n	80178c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8017830:	6810      	ldr	r0, [r2, #0]
 8017832:	ac06      	add	r4, sp, #24
 8017834:	6851      	ldr	r1, [r2, #4]
 8017836:	4f51      	ldr	r7, [pc, #324]	@ (801797c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8017838:	c403      	stmia	r4!, {r0, r1}
 801783a:	6818      	ldr	r0, [r3, #0]
 801783c:	ac08      	add	r4, sp, #32
 801783e:	6859      	ldr	r1, [r3, #4]
 8017840:	c403      	stmia	r4!, {r0, r1}
 8017842:	a806      	add	r0, sp, #24
 8017844:	f7fa ff2a 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017848:	4631      	mov	r1, r6
 801784a:	a808      	add	r0, sp, #32
 801784c:	f7fa ff4e 	bl	80126ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017850:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017854:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8017858:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801785c:	6838      	ldr	r0, [r7, #0]
 801785e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017862:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8017866:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801786a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801786e:	440d      	add	r5, r1
 8017870:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8017874:	440a      	add	r2, r1
 8017876:	f8ad 2020 	strh.w	r2, [sp, #32]
 801787a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801787e:	4413      	add	r3, r2
 8017880:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8017884:	6803      	ldr	r3, [r0, #0]
 8017886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017888:	4798      	blx	r3
 801788a:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801788e:	d01a      	beq.n	80178c6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8017890:	f010 0f04 	tst.w	r0, #4
 8017894:	6838      	ldr	r0, [r7, #0]
 8017896:	d019      	beq.n	80178cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8017898:	2100      	movs	r1, #0
 801789a:	6807      	ldr	r7, [r0, #0]
 801789c:	b2a4      	uxth	r4, r4
 801789e:	f8cd 800c 	str.w	r8, [sp, #12]
 80178a2:	b2b6      	uxth	r6, r6
 80178a4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80178a8:	9401      	str	r4, [sp, #4]
 80178aa:	9600      	str	r6, [sp, #0]
 80178ac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80178b0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80178b4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80178b8:	9102      	str	r1, [sp, #8]
 80178ba:	4629      	mov	r1, r5
 80178bc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80178be:	47a0      	blx	r4
 80178c0:	b00b      	add	sp, #44	@ 0x2c
 80178c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178c6:	f010 0f01 	tst.w	r0, #1
 80178ca:	e7e3      	b.n	8017894 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 80178cc:	6803      	ldr	r3, [r0, #0]
 80178ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80178d0:	4798      	blx	r3
 80178d2:	4a2b      	ldr	r2, [pc, #172]	@ (8017980 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 80178d4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 80178d8:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80178dc:	8813      	ldrh	r3, [r2, #0]
 80178de:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 80178e2:	fb03 f404 	mul.w	r4, r3, r4
 80178e6:	fb03 c101 	mla	r1, r3, r1, ip
 80178ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80178ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80178f2:	4408      	add	r0, r1
 80178f4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80178f8:	4404      	add	r4, r0
 80178fa:	d02e      	beq.n	801795a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80178fc:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8017900:	1b9b      	subs	r3, r3, r6
 8017902:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8017906:	1b96      	subs	r6, r2, r6
 8017908:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801790c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017910:	42a0      	cmp	r0, r4
 8017912:	d22d      	bcs.n	8017970 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8017914:	eb00 0e01 	add.w	lr, r0, r1
 8017918:	4570      	cmp	r0, lr
 801791a:	d210      	bcs.n	801793e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801791c:	f890 9000 	ldrb.w	r9, [r0]
 8017920:	f815 2b01 	ldrb.w	r2, [r5], #1
 8017924:	fb19 f90c 	smulbb	r9, r9, ip
 8017928:	fb02 9208 	mla	r2, r2, r8, r9
 801792c:	b292      	uxth	r2, r2
 801792e:	f102 0901 	add.w	r9, r2, #1
 8017932:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8017936:	1212      	asrs	r2, r2, #8
 8017938:	f800 2b01 	strb.w	r2, [r0], #1
 801793c:	e7ec      	b.n	8017918 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801793e:	4418      	add	r0, r3
 8017940:	4435      	add	r5, r6
 8017942:	e7e5      	b.n	8017910 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8017944:	8813      	ldrh	r3, [r2, #0]
 8017946:	1b9b      	subs	r3, r3, r6
 8017948:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801794c:	4418      	add	r0, r3
 801794e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017952:	1b9b      	subs	r3, r3, r6
 8017954:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017958:	441d      	add	r5, r3
 801795a:	42a0      	cmp	r0, r4
 801795c:	d208      	bcs.n	8017970 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801795e:	eb00 0c01 	add.w	ip, r0, r1
 8017962:	4560      	cmp	r0, ip
 8017964:	d2ee      	bcs.n	8017944 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8017966:	f815 3b01 	ldrb.w	r3, [r5], #1
 801796a:	f800 3b01 	strb.w	r3, [r0], #1
 801796e:	e7f8      	b.n	8017962 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8017970:	6838      	ldr	r0, [r7, #0]
 8017972:	6803      	ldr	r3, [r0, #0]
 8017974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017976:	4798      	blx	r3
 8017978:	e7a2      	b.n	80178c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801797a:	bf00      	nop
 801797c:	24025140 	.word	0x24025140
 8017980:	2402513a 	.word	0x2402513a

08017984 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8017984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017986:	2300      	movs	r3, #0
 8017988:	b085      	sub	sp, #20
 801798a:	9300      	str	r3, [sp, #0]
 801798c:	4b41      	ldr	r3, [pc, #260]	@ (8017a94 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801798e:	781b      	ldrb	r3, [r3, #0]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d136      	bne.n	8017a02 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8017994:	4a40      	ldr	r2, [pc, #256]	@ (8017a98 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8017996:	f9b2 2000 	ldrsh.w	r2, [r2]
 801799a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d131      	bne.n	8017a06 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 80179a2:	4b3e      	ldr	r3, [pc, #248]	@ (8017a9c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80179a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80179a8:	ac02      	add	r4, sp, #8
 80179aa:	6808      	ldr	r0, [r1, #0]
 80179ac:	f8ad 3006 	strh.w	r3, [sp, #6]
 80179b0:	ab02      	add	r3, sp, #8
 80179b2:	6849      	ldr	r1, [r1, #4]
 80179b4:	4d3a      	ldr	r5, [pc, #232]	@ (8017aa0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 80179b6:	c303      	stmia	r3!, {r0, r1}
 80179b8:	4669      	mov	r1, sp
 80179ba:	4620      	mov	r0, r4
 80179bc:	f7fa fe96 	bl	80126ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80179c0:	4668      	mov	r0, sp
 80179c2:	f7fa fe6b 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80179c6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80179ca:	f8bd 2000 	ldrh.w	r2, [sp]
 80179ce:	462e      	mov	r6, r5
 80179d0:	6828      	ldr	r0, [r5, #0]
 80179d2:	4413      	add	r3, r2
 80179d4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80179d8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80179dc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80179e0:	4413      	add	r3, r2
 80179e2:	f8ad 300a 	strh.w	r3, [sp, #10]
 80179e6:	6803      	ldr	r3, [r0, #0]
 80179e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80179ea:	4798      	blx	r3
 80179ec:	f010 0f01 	tst.w	r0, #1
 80179f0:	d00b      	beq.n	8017a0a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 80179f2:	6828      	ldr	r0, [r5, #0]
 80179f4:	6803      	ldr	r3, [r0, #0]
 80179f6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80179fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80179fc:	4798      	blx	r3
 80179fe:	b005      	add	sp, #20
 8017a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a02:	4a26      	ldr	r2, [pc, #152]	@ (8017a9c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8017a04:	e7c7      	b.n	8017996 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8017a06:	4b24      	ldr	r3, [pc, #144]	@ (8017a98 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8017a08:	e7cc      	b.n	80179a4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8017a0a:	6830      	ldr	r0, [r6, #0]
 8017a0c:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8017a10:	6803      	ldr	r3, [r0, #0]
 8017a12:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8017a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017a18:	4798      	blx	r3
 8017a1a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8017a1e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017a22:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8017a26:	fb14 3402 	smlabb	r4, r4, r2, r3
 8017a2a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017a2e:	4404      	add	r4, r0
 8017a30:	6830      	ldr	r0, [r6, #0]
 8017a32:	6803      	ldr	r3, [r0, #0]
 8017a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a36:	4798      	blx	r3
 8017a38:	4917      	ldr	r1, [pc, #92]	@ (8017a98 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8017a3a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8017a3e:	880b      	ldrh	r3, [r1, #0]
 8017a40:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8017a44:	fb03 c202 	mla	r2, r3, r2, ip
 8017a48:	437b      	muls	r3, r7
 8017a4a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8017a4e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017a52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017a56:	4410      	add	r0, r2
 8017a58:	18c2      	adds	r2, r0, r3
 8017a5a:	4290      	cmp	r0, r2
 8017a5c:	d214      	bcs.n	8017a88 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8017a5e:	eb00 0c07 	add.w	ip, r0, r7
 8017a62:	4560      	cmp	r0, ip
 8017a64:	d204      	bcs.n	8017a70 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8017a66:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017a6a:	f800 3b01 	strb.w	r3, [r0], #1
 8017a6e:	e7f8      	b.n	8017a62 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8017a70:	880b      	ldrh	r3, [r1, #0]
 8017a72:	1b5b      	subs	r3, r3, r5
 8017a74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017a78:	4418      	add	r0, r3
 8017a7a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8017a7e:	1b5b      	subs	r3, r3, r5
 8017a80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017a84:	441c      	add	r4, r3
 8017a86:	e7e8      	b.n	8017a5a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8017a88:	6830      	ldr	r0, [r6, #0]
 8017a8a:	6803      	ldr	r3, [r0, #0]
 8017a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017a8e:	4798      	blx	r3
 8017a90:	e7b5      	b.n	80179fe <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8017a92:	bf00      	nop
 8017a94:	24025138 	.word	0x24025138
 8017a98:	2402513a 	.word	0x2402513a
 8017a9c:	2402513c 	.word	0x2402513c
 8017aa0:	24025140 	.word	0x24025140

08017aa4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8017aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aa8:	b08f      	sub	sp, #60	@ 0x3c
 8017aaa:	461c      	mov	r4, r3
 8017aac:	9203      	str	r2, [sp, #12]
 8017aae:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8017ab2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017ab4:	6820      	ldr	r0, [r4, #0]
 8017ab6:	9100      	str	r1, [sp, #0]
 8017ab8:	9204      	str	r2, [sp, #16]
 8017aba:	aa0a      	add	r2, sp, #40	@ 0x28
 8017abc:	6861      	ldr	r1, [r4, #4]
 8017abe:	c203      	stmia	r2!, {r0, r1}
 8017ac0:	6818      	ldr	r0, [r3, #0]
 8017ac2:	aa0c      	add	r2, sp, #48	@ 0x30
 8017ac4:	6859      	ldr	r1, [r3, #4]
 8017ac6:	c203      	stmia	r2!, {r0, r1}
 8017ac8:	a80a      	add	r0, sp, #40	@ 0x28
 8017aca:	f7fa fde7 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017ace:	4621      	mov	r1, r4
 8017ad0:	a80c      	add	r0, sp, #48	@ 0x30
 8017ad2:	f7fa fe0b 	bl	80126ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017ad6:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8017ada:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8017ade:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8017ae2:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8017ae6:	bfdb      	ittet	le
 8017ae8:	b2b3      	uxthle	r3, r6
 8017aea:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8017aee:	2301      	movgt	r3, #1
 8017af0:	fb92 f3f3 	sdivle	r3, r2, r3
 8017af4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8017af8:	441d      	add	r5, r3
 8017afa:	fb92 f1f3 	sdiv	r1, r2, r3
 8017afe:	fa1f fc81 	uxth.w	ip, r1
 8017b02:	3d01      	subs	r5, #1
 8017b04:	fb0c 2413 	mls	r4, ip, r3, r2
 8017b08:	4661      	mov	r1, ip
 8017b0a:	fb14 f406 	smulbb	r4, r4, r6
 8017b0e:	4404      	add	r4, r0
 8017b10:	fb95 f5f3 	sdiv	r5, r5, r3
 8017b14:	b2a4      	uxth	r4, r4
 8017b16:	b131      	cbz	r1, 8017b26 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 8017b18:	9b03      	ldr	r3, [sp, #12]
 8017b1a:	9900      	ldr	r1, [sp, #0]
 8017b1c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8017b20:	ba1b      	rev	r3, r3
 8017b22:	4419      	add	r1, r3
 8017b24:	9100      	str	r1, [sp, #0]
 8017b26:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8017b2a:	b2ad      	uxth	r5, r5
 8017b2c:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8017b30:	4418      	add	r0, r3
 8017b32:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8017b36:	00ad      	lsls	r5, r5, #2
 8017b38:	441a      	add	r2, r3
 8017b3a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8017b3e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8017b42:	9301      	str	r3, [sp, #4]
 8017b44:	4b79      	ldr	r3, [pc, #484]	@ (8017d2c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8017b46:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8017b4a:	6818      	ldr	r0, [r3, #0]
 8017b4c:	6803      	ldr	r3, [r0, #0]
 8017b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017b50:	4798      	blx	r3
 8017b52:	4a77      	ldr	r2, [pc, #476]	@ (8017d30 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 8017b54:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8017b58:	2c00      	cmp	r4, #0
 8017b5a:	8813      	ldrh	r3, [r2, #0]
 8017b5c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8017b60:	9209      	str	r2, [sp, #36]	@ 0x24
 8017b62:	fb03 c101 	mla	r1, r3, r1, ip
 8017b66:	fb06 f303 	mul.w	r3, r6, r3
 8017b6a:	bf18      	it	ne
 8017b6c:	2600      	movne	r6, #0
 8017b6e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017b72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017b76:	4408      	add	r0, r1
 8017b78:	4403      	add	r3, r0
 8017b7a:	9306      	str	r3, [sp, #24]
 8017b7c:	f105 0304 	add.w	r3, r5, #4
 8017b80:	9305      	str	r3, [sp, #20]
 8017b82:	9b01      	ldr	r3, [sp, #4]
 8017b84:	bf08      	it	eq
 8017b86:	461e      	moveq	r6, r3
 8017b88:	2300      	movs	r3, #0
 8017b8a:	b2b6      	uxth	r6, r6
 8017b8c:	9302      	str	r3, [sp, #8]
 8017b8e:	9a06      	ldr	r2, [sp, #24]
 8017b90:	4290      	cmp	r0, r2
 8017b92:	f080 80c2 	bcs.w	8017d1a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 8017b96:	b963      	cbnz	r3, 8017bb2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8017b98:	9b00      	ldr	r3, [sp, #0]
 8017b9a:	781a      	ldrb	r2, [r3, #0]
 8017b9c:	0993      	lsrs	r3, r2, #6
 8017b9e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8017ba2:	9202      	str	r2, [sp, #8]
 8017ba4:	1e5a      	subs	r2, r3, #1
 8017ba6:	2a02      	cmp	r2, #2
 8017ba8:	d815      	bhi.n	8017bd6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 8017baa:	9a00      	ldr	r2, [sp, #0]
 8017bac:	b29b      	uxth	r3, r3
 8017bae:	3201      	adds	r2, #1
 8017bb0:	9200      	str	r2, [sp, #0]
 8017bb2:	b1b4      	cbz	r4, 8017be2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8017bb4:	429c      	cmp	r4, r3
 8017bb6:	bf91      	iteee	ls
 8017bb8:	1b1c      	subls	r4, r3, r4
 8017bba:	1ae4      	subhi	r4, r4, r3
 8017bbc:	4635      	movhi	r5, r6
 8017bbe:	f04f 0e00 	movhi.w	lr, #0
 8017bc2:	bf9b      	ittet	ls
 8017bc4:	fa1f fe84 	uxthls.w	lr, r4
 8017bc8:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8017bcc:	b2a4      	uxthhi	r4, r4
 8017bce:	2400      	movls	r4, #0
 8017bd0:	4673      	mov	r3, lr
 8017bd2:	462e      	mov	r6, r5
 8017bd4:	e7db      	b.n	8017b8e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8017bd6:	9a00      	ldr	r2, [sp, #0]
 8017bd8:	9b00      	ldr	r3, [sp, #0]
 8017bda:	3202      	adds	r2, #2
 8017bdc:	785b      	ldrb	r3, [r3, #1]
 8017bde:	9200      	str	r2, [sp, #0]
 8017be0:	e7e7      	b.n	8017bb2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8017be2:	2204      	movs	r2, #4
 8017be4:	9905      	ldr	r1, [sp, #20]
 8017be6:	429e      	cmp	r6, r3
 8017be8:	4615      	mov	r5, r2
 8017bea:	9a02      	ldr	r2, [sp, #8]
 8017bec:	bf94      	ite	ls
 8017bee:	eba3 0e06 	subls.w	lr, r3, r6
 8017bf2:	46a6      	movhi	lr, r4
 8017bf4:	fb15 1202 	smlabb	r2, r5, r2, r1
 8017bf8:	9903      	ldr	r1, [sp, #12]
 8017bfa:	bf8c      	ite	hi
 8017bfc:	1af5      	subhi	r5, r6, r3
 8017bfe:	fa1f fe8e 	uxthls.w	lr, lr
 8017c02:	f851 c002 	ldr.w	ip, [r1, r2]
 8017c06:	bf9a      	itte	ls
 8017c08:	4625      	movls	r5, r4
 8017c0a:	4632      	movls	r2, r6
 8017c0c:	b2ad      	uxthhi	r5, r5
 8017c0e:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8017c12:	bf88      	it	hi
 8017c14:	461a      	movhi	r2, r3
 8017c16:	b179      	cbz	r1, 8017c38 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8017c18:	29ff      	cmp	r1, #255	@ 0xff
 8017c1a:	fa5f f98c 	uxtb.w	r9, ip
 8017c1e:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8017c22:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8017c26:	d126      	bne.n	8017c76 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8017c28:	9f04      	ldr	r7, [sp, #16]
 8017c2a:	2fff      	cmp	r7, #255	@ 0xff
 8017c2c:	d123      	bne.n	8017c76 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8017c2e:	4682      	mov	sl, r0
 8017c30:	4611      	mov	r1, r2
 8017c32:	f10a 0a03 	add.w	sl, sl, #3
 8017c36:	b9a9      	cbnz	r1, 8017c64 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 8017c38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017c3c:	429e      	cmp	r6, r3
 8017c3e:	4410      	add	r0, r2
 8017c40:	d8c6      	bhi.n	8017bd0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8017c42:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8017c46:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8017c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c4c:	1b64      	subs	r4, r4, r5
 8017c4e:	9a01      	ldr	r2, [sp, #4]
 8017c50:	881b      	ldrh	r3, [r3, #0]
 8017c52:	b2a4      	uxth	r4, r4
 8017c54:	1a9b      	subs	r3, r3, r2
 8017c56:	2c00      	cmp	r4, #0
 8017c58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017c5c:	bf18      	it	ne
 8017c5e:	2500      	movne	r5, #0
 8017c60:	4418      	add	r0, r3
 8017c62:	e7b5      	b.n	8017bd0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8017c64:	3901      	subs	r1, #1
 8017c66:	f80a 9c03 	strb.w	r9, [sl, #-3]
 8017c6a:	f80a 8c02 	strb.w	r8, [sl, #-2]
 8017c6e:	f80a cc01 	strb.w	ip, [sl, #-1]
 8017c72:	b289      	uxth	r1, r1
 8017c74:	e7dd      	b.n	8017c32 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8017c76:	9f04      	ldr	r7, [sp, #16]
 8017c78:	fb07 fa01 	mul.w	sl, r7, r1
 8017c7c:	f10a 0101 	add.w	r1, sl, #1
 8017c80:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8017c84:	1209      	asrs	r1, r1, #8
 8017c86:	ea6f 0a01 	mvn.w	sl, r1
 8017c8a:	b289      	uxth	r1, r1
 8017c8c:	fb19 f901 	smulbb	r9, r9, r1
 8017c90:	fa5f fa8a 	uxtb.w	sl, sl
 8017c94:	fb18 f801 	smulbb	r8, r8, r1
 8017c98:	fb1c f101 	smulbb	r1, ip, r1
 8017c9c:	fa1f f789 	uxth.w	r7, r9
 8017ca0:	4684      	mov	ip, r0
 8017ca2:	4691      	mov	r9, r2
 8017ca4:	9707      	str	r7, [sp, #28]
 8017ca6:	b289      	uxth	r1, r1
 8017ca8:	fa1f f788 	uxth.w	r7, r8
 8017cac:	9708      	str	r7, [sp, #32]
 8017cae:	f10c 0c03 	add.w	ip, ip, #3
 8017cb2:	f1b9 0f00 	cmp.w	r9, #0
 8017cb6:	d0bf      	beq.n	8017c38 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8017cb8:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8017cbc:	f109 39ff 	add.w	r9, r9, #4294967295
 8017cc0:	9f07      	ldr	r7, [sp, #28]
 8017cc2:	fa1f f989 	uxth.w	r9, r9
 8017cc6:	fb08 780a 	mla	r8, r8, sl, r7
 8017cca:	9f08      	ldr	r7, [sp, #32]
 8017ccc:	fa1f f888 	uxth.w	r8, r8
 8017cd0:	f108 0b01 	add.w	fp, r8, #1
 8017cd4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017cd8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017cdc:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8017ce0:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8017ce4:	fb08 780a 	mla	r8, r8, sl, r7
 8017ce8:	fa1f f888 	uxth.w	r8, r8
 8017cec:	f108 0b01 	add.w	fp, r8, #1
 8017cf0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017cf4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017cf8:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8017cfc:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 8017d00:	fb08 180a 	mla	r8, r8, sl, r1
 8017d04:	fa1f f888 	uxth.w	r8, r8
 8017d08:	f108 0b01 	add.w	fp, r8, #1
 8017d0c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017d10:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017d14:	f80c 8c01 	strb.w	r8, [ip, #-1]
 8017d18:	e7c9      	b.n	8017cae <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8017d1a:	4b04      	ldr	r3, [pc, #16]	@ (8017d2c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8017d1c:	6818      	ldr	r0, [r3, #0]
 8017d1e:	6803      	ldr	r3, [r0, #0]
 8017d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d22:	4798      	blx	r3
 8017d24:	b00f      	add	sp, #60	@ 0x3c
 8017d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d2a:	bf00      	nop
 8017d2c:	24025140 	.word	0x24025140
 8017d30:	2402513a 	.word	0x2402513a

08017d34 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8017d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d38:	b089      	sub	sp, #36	@ 0x24
 8017d3a:	4607      	mov	r7, r0
 8017d3c:	4689      	mov	r9, r1
 8017d3e:	4692      	mov	sl, r2
 8017d40:	ac08      	add	r4, sp, #32
 8017d42:	461e      	mov	r6, r3
 8017d44:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8017d48:	4620      	mov	r0, r4
 8017d4a:	f7fd ffa5 	bl	8015c98 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017d4e:	683b      	ldr	r3, [r7, #0]
 8017d50:	4605      	mov	r5, r0
 8017d52:	4620      	mov	r0, r4
 8017d54:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8017d58:	f7fd fee4 	bl	8015b24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017d5c:	4683      	mov	fp, r0
 8017d5e:	4620      	mov	r0, r4
 8017d60:	f7fd ff14 	bl	8015b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017d64:	4653      	mov	r3, sl
 8017d66:	464a      	mov	r2, r9
 8017d68:	4639      	mov	r1, r7
 8017d6a:	9500      	str	r5, [sp, #0]
 8017d6c:	e9cd b001 	strd	fp, r0, [sp, #4]
 8017d70:	a806      	add	r0, sp, #24
 8017d72:	47c0      	blx	r8
 8017d74:	a906      	add	r1, sp, #24
 8017d76:	4630      	mov	r0, r6
 8017d78:	f7fd fdb8 	bl	80158ec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8017d7c:	4628      	mov	r0, r5
 8017d7e:	b009      	add	sp, #36	@ 0x24
 8017d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017d84 <_ZN8touchgfx8LCD24bppD0Ev>:
 8017d84:	b510      	push	{r4, lr}
 8017d86:	4604      	mov	r4, r0
 8017d88:	2168      	movs	r1, #104	@ 0x68
 8017d8a:	f007 feb9 	bl	801fb00 <_ZdlPvj>
 8017d8e:	4620      	mov	r0, r4
 8017d90:	bd10      	pop	{r4, pc}

08017d92 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 8017d92:	b510      	push	{r4, lr}
 8017d94:	4604      	mov	r4, r0
 8017d96:	2104      	movs	r1, #4
 8017d98:	f007 feb2 	bl	801fb00 <_ZdlPvj>
 8017d9c:	4620      	mov	r0, r4
 8017d9e:	bd10      	pop	{r4, pc}

08017da0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8017da0:	b510      	push	{r4, lr}
 8017da2:	4604      	mov	r4, r0
 8017da4:	2104      	movs	r1, #4
 8017da6:	f007 feab 	bl	801fb00 <_ZdlPvj>
 8017daa:	4620      	mov	r0, r4
 8017dac:	bd10      	pop	{r4, pc}

08017dae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8017dae:	b510      	push	{r4, lr}
 8017db0:	4604      	mov	r4, r0
 8017db2:	f640 0144 	movw	r1, #2116	@ 0x844
 8017db6:	f007 fea3 	bl	801fb00 <_ZdlPvj>
 8017dba:	4620      	mov	r0, r4
 8017dbc:	bd10      	pop	{r4, pc}

08017dbe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8017dbe:	b510      	push	{r4, lr}
 8017dc0:	4604      	mov	r4, r0
 8017dc2:	2104      	movs	r1, #4
 8017dc4:	f007 fe9c 	bl	801fb00 <_ZdlPvj>
 8017dc8:	4620      	mov	r0, r4
 8017dca:	bd10      	pop	{r4, pc}

08017dcc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8017dcc:	b510      	push	{r4, lr}
 8017dce:	4604      	mov	r4, r0
 8017dd0:	2104      	movs	r1, #4
 8017dd2:	f007 fe95 	bl	801fb00 <_ZdlPvj>
 8017dd6:	4620      	mov	r0, r4
 8017dd8:	bd10      	pop	{r4, pc}

08017dda <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8017dda:	b510      	push	{r4, lr}
 8017ddc:	4604      	mov	r4, r0
 8017dde:	2104      	movs	r1, #4
 8017de0:	f007 fe8e 	bl	801fb00 <_ZdlPvj>
 8017de4:	4620      	mov	r0, r4
 8017de6:	bd10      	pop	{r4, pc}

08017de8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8017de8:	b510      	push	{r4, lr}
 8017dea:	4604      	mov	r4, r0
 8017dec:	2104      	movs	r1, #4
 8017dee:	f007 fe87 	bl	801fb00 <_ZdlPvj>
 8017df2:	4620      	mov	r0, r4
 8017df4:	bd10      	pop	{r4, pc}

08017df6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017df6:	b510      	push	{r4, lr}
 8017df8:	4604      	mov	r4, r0
 8017dfa:	2104      	movs	r1, #4
 8017dfc:	f007 fe80 	bl	801fb00 <_ZdlPvj>
 8017e00:	4620      	mov	r0, r4
 8017e02:	bd10      	pop	{r4, pc}

08017e04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017e04:	b510      	push	{r4, lr}
 8017e06:	4604      	mov	r4, r0
 8017e08:	2104      	movs	r1, #4
 8017e0a:	f007 fe79 	bl	801fb00 <_ZdlPvj>
 8017e0e:	4620      	mov	r0, r4
 8017e10:	bd10      	pop	{r4, pc}

08017e12 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017e12:	b510      	push	{r4, lr}
 8017e14:	4604      	mov	r4, r0
 8017e16:	2104      	movs	r1, #4
 8017e18:	f007 fe72 	bl	801fb00 <_ZdlPvj>
 8017e1c:	4620      	mov	r0, r4
 8017e1e:	bd10      	pop	{r4, pc}

08017e20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017e20:	b510      	push	{r4, lr}
 8017e22:	4604      	mov	r4, r0
 8017e24:	2104      	movs	r1, #4
 8017e26:	f007 fe6b 	bl	801fb00 <_ZdlPvj>
 8017e2a:	4620      	mov	r0, r4
 8017e2c:	bd10      	pop	{r4, pc}

08017e2e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8017e2e:	b510      	push	{r4, lr}
 8017e30:	4604      	mov	r4, r0
 8017e32:	2104      	movs	r1, #4
 8017e34:	f007 fe64 	bl	801fb00 <_ZdlPvj>
 8017e38:	4620      	mov	r0, r4
 8017e3a:	bd10      	pop	{r4, pc}

08017e3c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8017e3c:	b510      	push	{r4, lr}
 8017e3e:	4604      	mov	r4, r0
 8017e40:	2104      	movs	r1, #4
 8017e42:	f007 fe5d 	bl	801fb00 <_ZdlPvj>
 8017e46:	4620      	mov	r0, r4
 8017e48:	bd10      	pop	{r4, pc}

08017e4a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8017e4a:	b510      	push	{r4, lr}
 8017e4c:	4604      	mov	r4, r0
 8017e4e:	2104      	movs	r1, #4
 8017e50:	f007 fe56 	bl	801fb00 <_ZdlPvj>
 8017e54:	4620      	mov	r0, r4
 8017e56:	bd10      	pop	{r4, pc}

08017e58 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8017e58:	b510      	push	{r4, lr}
 8017e5a:	4604      	mov	r4, r0
 8017e5c:	2104      	movs	r1, #4
 8017e5e:	f007 fe4f 	bl	801fb00 <_ZdlPvj>
 8017e62:	4620      	mov	r0, r4
 8017e64:	bd10      	pop	{r4, pc}

08017e66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017e66:	b510      	push	{r4, lr}
 8017e68:	4604      	mov	r4, r0
 8017e6a:	2104      	movs	r1, #4
 8017e6c:	f007 fe48 	bl	801fb00 <_ZdlPvj>
 8017e70:	4620      	mov	r0, r4
 8017e72:	bd10      	pop	{r4, pc}

08017e74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017e74:	b510      	push	{r4, lr}
 8017e76:	4604      	mov	r4, r0
 8017e78:	2104      	movs	r1, #4
 8017e7a:	f007 fe41 	bl	801fb00 <_ZdlPvj>
 8017e7e:	4620      	mov	r0, r4
 8017e80:	bd10      	pop	{r4, pc}

08017e82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017e82:	b510      	push	{r4, lr}
 8017e84:	4604      	mov	r4, r0
 8017e86:	2104      	movs	r1, #4
 8017e88:	f007 fe3a 	bl	801fb00 <_ZdlPvj>
 8017e8c:	4620      	mov	r0, r4
 8017e8e:	bd10      	pop	{r4, pc}

08017e90 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017e90:	b510      	push	{r4, lr}
 8017e92:	4604      	mov	r4, r0
 8017e94:	2104      	movs	r1, #4
 8017e96:	f007 fe33 	bl	801fb00 <_ZdlPvj>
 8017e9a:	4620      	mov	r0, r4
 8017e9c:	bd10      	pop	{r4, pc}

08017e9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8017e9e:	b510      	push	{r4, lr}
 8017ea0:	4604      	mov	r4, r0
 8017ea2:	2104      	movs	r1, #4
 8017ea4:	f007 fe2c 	bl	801fb00 <_ZdlPvj>
 8017ea8:	4620      	mov	r0, r4
 8017eaa:	bd10      	pop	{r4, pc}

08017eac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8017eac:	b510      	push	{r4, lr}
 8017eae:	4604      	mov	r4, r0
 8017eb0:	2104      	movs	r1, #4
 8017eb2:	f007 fe25 	bl	801fb00 <_ZdlPvj>
 8017eb6:	4620      	mov	r0, r4
 8017eb8:	bd10      	pop	{r4, pc}

08017eba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8017eba:	b510      	push	{r4, lr}
 8017ebc:	4604      	mov	r4, r0
 8017ebe:	2104      	movs	r1, #4
 8017ec0:	f007 fe1e 	bl	801fb00 <_ZdlPvj>
 8017ec4:	4620      	mov	r0, r4
 8017ec6:	bd10      	pop	{r4, pc}

08017ec8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8017ec8:	b510      	push	{r4, lr}
 8017eca:	4604      	mov	r4, r0
 8017ecc:	2104      	movs	r1, #4
 8017ece:	f007 fe17 	bl	801fb00 <_ZdlPvj>
 8017ed2:	4620      	mov	r0, r4
 8017ed4:	bd10      	pop	{r4, pc}
	...

08017ed8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8017ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017edc:	b08f      	sub	sp, #60	@ 0x3c
 8017ede:	461c      	mov	r4, r3
 8017ee0:	460e      	mov	r6, r1
 8017ee2:	9206      	str	r2, [sp, #24]
 8017ee4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8017ee8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017eea:	9202      	str	r2, [sp, #8]
 8017eec:	2a00      	cmp	r2, #0
 8017eee:	f000 8128 	beq.w	8018142 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8017ef2:	6820      	ldr	r0, [r4, #0]
 8017ef4:	aa0a      	add	r2, sp, #40	@ 0x28
 8017ef6:	6861      	ldr	r1, [r4, #4]
 8017ef8:	c203      	stmia	r2!, {r0, r1}
 8017efa:	6818      	ldr	r0, [r3, #0]
 8017efc:	aa0c      	add	r2, sp, #48	@ 0x30
 8017efe:	6859      	ldr	r1, [r3, #4]
 8017f00:	c203      	stmia	r2!, {r0, r1}
 8017f02:	a80a      	add	r0, sp, #40	@ 0x28
 8017f04:	f7fa fbca 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017f08:	4621      	mov	r1, r4
 8017f0a:	a80c      	add	r0, sp, #48	@ 0x30
 8017f0c:	f7fa fbee 	bl	80126ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017f10:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 8017f14:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8017f18:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 8017f1c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8017f20:	bfdb      	ittet	le
 8017f22:	b2bb      	uxthle	r3, r7
 8017f24:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8017f28:	2301      	movgt	r3, #1
 8017f2a:	fb92 f3f3 	sdivle	r3, r2, r3
 8017f2e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8017f32:	441d      	add	r5, r3
 8017f34:	fb92 f1f3 	sdiv	r1, r2, r3
 8017f38:	fa1f fc81 	uxth.w	ip, r1
 8017f3c:	3d01      	subs	r5, #1
 8017f3e:	fb0c 2413 	mls	r4, ip, r3, r2
 8017f42:	4661      	mov	r1, ip
 8017f44:	fb14 f407 	smulbb	r4, r4, r7
 8017f48:	4404      	add	r4, r0
 8017f4a:	fb95 f5f3 	sdiv	r5, r5, r3
 8017f4e:	b2a4      	uxth	r4, r4
 8017f50:	b121      	cbz	r1, 8017f5c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 8017f52:	9b06      	ldr	r3, [sp, #24]
 8017f54:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8017f58:	ba1b      	rev	r3, r3
 8017f5a:	441e      	add	r6, r3
 8017f5c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8017f60:	b2ad      	uxth	r5, r5
 8017f62:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8017f66:	4418      	add	r0, r3
 8017f68:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8017f6c:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 8017f70:	00ad      	lsls	r5, r5, #2
 8017f72:	441a      	add	r2, r3
 8017f74:	4b74      	ldr	r3, [pc, #464]	@ (8018148 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8017f76:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8017f7a:	6818      	ldr	r0, [r3, #0]
 8017f7c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8017f80:	6803      	ldr	r3, [r0, #0]
 8017f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f84:	4798      	blx	r3
 8017f86:	4a71      	ldr	r2, [pc, #452]	@ (801814c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 8017f88:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8017f8c:	2c00      	cmp	r4, #0
 8017f8e:	8813      	ldrh	r3, [r2, #0]
 8017f90:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8017f94:	9209      	str	r2, [sp, #36]	@ 0x24
 8017f96:	fb03 c101 	mla	r1, r3, r1, ip
 8017f9a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8017f9e:	fb03 f307 	mul.w	r3, r3, r7
 8017fa2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017fa6:	9204      	str	r2, [sp, #16]
 8017fa8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017fac:	9a02      	ldr	r2, [sp, #8]
 8017fae:	4408      	add	r0, r1
 8017fb0:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8017fb4:	4403      	add	r3, r0
 8017fb6:	b292      	uxth	r2, r2
 8017fb8:	9307      	str	r3, [sp, #28]
 8017fba:	f105 0304 	add.w	r3, r5, #4
 8017fbe:	bf0c      	ite	eq
 8017fc0:	4645      	moveq	r5, r8
 8017fc2:	2500      	movne	r5, #0
 8017fc4:	9308      	str	r3, [sp, #32]
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	b2ad      	uxth	r5, r5
 8017fca:	9205      	str	r2, [sp, #20]
 8017fcc:	9303      	str	r3, [sp, #12]
 8017fce:	9a07      	ldr	r2, [sp, #28]
 8017fd0:	4282      	cmp	r2, r0
 8017fd2:	f240 80b1 	bls.w	8018138 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 8017fd6:	b95b      	cbnz	r3, 8017ff0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 8017fd8:	7832      	ldrb	r2, [r6, #0]
 8017fda:	0993      	lsrs	r3, r2, #6
 8017fdc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8017fe0:	9203      	str	r2, [sp, #12]
 8017fe2:	1e5a      	subs	r2, r3, #1
 8017fe4:	2a02      	cmp	r2, #2
 8017fe6:	bf8d      	iteet	hi
 8017fe8:	7873      	ldrbhi	r3, [r6, #1]
 8017fea:	3601      	addls	r6, #1
 8017fec:	b29b      	uxthls	r3, r3
 8017fee:	3602      	addhi	r6, #2
 8017ff0:	b184      	cbz	r4, 8018014 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 8017ff2:	429c      	cmp	r4, r3
 8017ff4:	bf91      	iteee	ls
 8017ff6:	1b1c      	subls	r4, r3, r4
 8017ff8:	1ae4      	subhi	r4, r4, r3
 8017ffa:	4629      	movhi	r1, r5
 8017ffc:	f04f 0e00 	movhi.w	lr, #0
 8018000:	bf9b      	ittet	ls
 8018002:	fa1f fe84 	uxthls.w	lr, r4
 8018006:	2400      	movls	r4, #0
 8018008:	b2a4      	uxthhi	r4, r4
 801800a:	fa1f f188 	uxthls.w	r1, r8
 801800e:	4673      	mov	r3, lr
 8018010:	460d      	mov	r5, r1
 8018012:	e7dc      	b.n	8017fce <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8018014:	2203      	movs	r2, #3
 8018016:	9908      	ldr	r1, [sp, #32]
 8018018:	42ab      	cmp	r3, r5
 801801a:	4617      	mov	r7, r2
 801801c:	9a03      	ldr	r2, [sp, #12]
 801801e:	bf24      	itt	cs
 8018020:	eba3 0e05 	subcs.w	lr, r3, r5
 8018024:	9501      	strcs	r5, [sp, #4]
 8018026:	fb17 1702 	smlabb	r7, r7, r2, r1
 801802a:	9a06      	ldr	r2, [sp, #24]
 801802c:	bf34      	ite	cc
 801802e:	1ae9      	subcc	r1, r5, r3
 8018030:	fa1f fe8e 	uxthcs.w	lr, lr
 8018034:	4417      	add	r7, r2
 8018036:	9a02      	ldr	r2, [sp, #8]
 8018038:	bf2f      	iteee	cs
 801803a:	4621      	movcs	r1, r4
 801803c:	b289      	uxthcc	r1, r1
 801803e:	9301      	strcc	r3, [sp, #4]
 8018040:	46a6      	movcc	lr, r4
 8018042:	2aff      	cmp	r2, #255	@ 0xff
 8018044:	d11e      	bne.n	8018084 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 8018046:	4681      	mov	r9, r0
 8018048:	f8dd c004 	ldr.w	ip, [sp, #4]
 801804c:	f109 0903 	add.w	r9, r9, #3
 8018050:	f1bc 0f00 	cmp.w	ip, #0
 8018054:	d15f      	bne.n	8018116 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 8018056:	9a01      	ldr	r2, [sp, #4]
 8018058:	42ab      	cmp	r3, r5
 801805a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801805e:	4410      	add	r0, r2
 8018060:	d3d5      	bcc.n	801800e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8018062:	fa1f f188 	uxth.w	r1, r8
 8018066:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801806a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801806c:	1a64      	subs	r4, r4, r1
 801806e:	881b      	ldrh	r3, [r3, #0]
 8018070:	b2a4      	uxth	r4, r4
 8018072:	eba3 0308 	sub.w	r3, r3, r8
 8018076:	2c00      	cmp	r4, #0
 8018078:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801807c:	bf18      	it	ne
 801807e:	2100      	movne	r1, #0
 8018080:	4418      	add	r0, r3
 8018082:	e7c4      	b.n	801800e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8018084:	4684      	mov	ip, r0
 8018086:	f8dd a004 	ldr.w	sl, [sp, #4]
 801808a:	f10c 0c03 	add.w	ip, ip, #3
 801808e:	f1ba 0f00 	cmp.w	sl, #0
 8018092:	d0e0      	beq.n	8018056 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8018094:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8018098:	f10a 3aff 	add.w	sl, sl, #4294967295
 801809c:	9a05      	ldr	r2, [sp, #20]
 801809e:	f897 9000 	ldrb.w	r9, [r7]
 80180a2:	fa1f fa8a 	uxth.w	sl, sl
 80180a6:	fb1b fb02 	smulbb	fp, fp, r2
 80180aa:	9a04      	ldr	r2, [sp, #16]
 80180ac:	fb09 b902 	mla	r9, r9, r2, fp
 80180b0:	9a05      	ldr	r2, [sp, #20]
 80180b2:	fa1f f989 	uxth.w	r9, r9
 80180b6:	f109 0b01 	add.w	fp, r9, #1
 80180ba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80180be:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 80180c2:	fb1b fb02 	smulbb	fp, fp, r2
 80180c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80180ca:	9a04      	ldr	r2, [sp, #16]
 80180cc:	f80c 9c03 	strb.w	r9, [ip, #-3]
 80180d0:	f897 9001 	ldrb.w	r9, [r7, #1]
 80180d4:	fb09 b902 	mla	r9, r9, r2, fp
 80180d8:	9a05      	ldr	r2, [sp, #20]
 80180da:	fa1f f989 	uxth.w	r9, r9
 80180de:	f109 0b01 	add.w	fp, r9, #1
 80180e2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80180e6:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 80180ea:	fb1b fb02 	smulbb	fp, fp, r2
 80180ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 80180f2:	9a04      	ldr	r2, [sp, #16]
 80180f4:	f80c 9c02 	strb.w	r9, [ip, #-2]
 80180f8:	f897 9002 	ldrb.w	r9, [r7, #2]
 80180fc:	fb09 b902 	mla	r9, r9, r2, fp
 8018100:	fa1f f989 	uxth.w	r9, r9
 8018104:	f109 0b01 	add.w	fp, r9, #1
 8018108:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801810c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018110:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8018114:	e7b9      	b.n	801808a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 8018116:	f897 a000 	ldrb.w	sl, [r7]
 801811a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801811e:	f809 ac03 	strb.w	sl, [r9, #-3]
 8018122:	fa1f fc8c 	uxth.w	ip, ip
 8018126:	f897 a001 	ldrb.w	sl, [r7, #1]
 801812a:	f809 ac02 	strb.w	sl, [r9, #-2]
 801812e:	f897 a002 	ldrb.w	sl, [r7, #2]
 8018132:	f809 ac01 	strb.w	sl, [r9, #-1]
 8018136:	e789      	b.n	801804c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8018138:	4b03      	ldr	r3, [pc, #12]	@ (8018148 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801813a:	6818      	ldr	r0, [r3, #0]
 801813c:	6803      	ldr	r3, [r0, #0]
 801813e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018140:	4798      	blx	r3
 8018142:	b00f      	add	sp, #60	@ 0x3c
 8018144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018148:	24025140 	.word	0x24025140
 801814c:	2402513a 	.word	0x2402513a

08018150 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8018150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018154:	b09b      	sub	sp, #108	@ 0x6c
 8018156:	461d      	mov	r5, r3
 8018158:	4604      	mov	r4, r0
 801815a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801815c:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 8018160:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8018164:	9208      	str	r2, [sp, #32]
 8018166:	2a00      	cmp	r2, #0
 8018168:	f000 81f3 	beq.w	8018552 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801816c:	6828      	ldr	r0, [r5, #0]
 801816e:	aa16      	add	r2, sp, #88	@ 0x58
 8018170:	6869      	ldr	r1, [r5, #4]
 8018172:	c203      	stmia	r2!, {r0, r1}
 8018174:	6818      	ldr	r0, [r3, #0]
 8018176:	aa18      	add	r2, sp, #96	@ 0x60
 8018178:	6859      	ldr	r1, [r3, #4]
 801817a:	c203      	stmia	r2!, {r0, r1}
 801817c:	a816      	add	r0, sp, #88	@ 0x58
 801817e:	f7fa fa8d 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018182:	4629      	mov	r1, r5
 8018184:	a818      	add	r0, sp, #96	@ 0x60
 8018186:	f7fa fab1 	bl	80126ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801818a:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801818e:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 8018192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018196:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801819a:	bfdb      	ittet	le
 801819c:	b29a      	uxthle	r2, r3
 801819e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80181a2:	f04f 0a01 	movgt.w	sl, #1
 80181a6:	fb91 faf2 	sdivle	sl, r1, r2
 80181aa:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 80181ae:	4456      	add	r6, sl
 80181b0:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 80181b4:	3e01      	subs	r6, #1
 80181b6:	fb92 f0fa 	sdiv	r0, r2, sl
 80181ba:	b280      	uxth	r0, r0
 80181bc:	fb00 281a 	mls	r8, r0, sl, r2
 80181c0:	900e      	str	r0, [sp, #56]	@ 0x38
 80181c2:	fb18 f803 	smulbb	r8, r8, r3
 80181c6:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 80181ca:	4488      	add	r8, r1
 80181cc:	4419      	add	r1, r3
 80181ce:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 80181d2:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 80181d6:	fa1f f888 	uxth.w	r8, r8
 80181da:	441a      	add	r2, r3
 80181dc:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80181e0:	9303      	str	r3, [sp, #12]
 80181e2:	4b9c      	ldr	r3, [pc, #624]	@ (8018454 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 80181e4:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 80181e8:	6818      	ldr	r0, [r3, #0]
 80181ea:	6803      	ldr	r3, [r0, #0]
 80181ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80181ee:	4798      	blx	r3
 80181f0:	4b99      	ldr	r3, [pc, #612]	@ (8018458 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 80181f2:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 80181f6:	f1b8 0f00 	cmp.w	r8, #0
 80181fa:	881a      	ldrh	r2, [r3, #0]
 80181fc:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 8018200:	fb02 f505 	mul.w	r5, r2, r5
 8018204:	fb02 7101 	mla	r1, r2, r1, r7
 8018208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801820c:	9314      	str	r3, [sp, #80]	@ 0x50
 801820e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018212:	9b08      	ldr	r3, [sp, #32]
 8018214:	fb96 f6fa 	sdiv	r6, r6, sl
 8018218:	4408      	add	r0, r1
 801821a:	f106 0601 	add.w	r6, r6, #1
 801821e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8018222:	f04f 0100 	mov.w	r1, #0
 8018226:	eb00 0205 	add.w	r2, r0, r5
 801822a:	b2b6      	uxth	r6, r6
 801822c:	b29b      	uxth	r3, r3
 801822e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018230:	9209      	str	r2, [sp, #36]	@ 0x24
 8018232:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018234:	930d      	str	r3, [sp, #52]	@ 0x34
 8018236:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801823a:	4b88      	ldr	r3, [pc, #544]	@ (801845c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801823c:	f106 0204 	add.w	r2, r6, #4
 8018240:	eba3 0304 	sub.w	r3, r3, r4
 8018244:	9205      	str	r2, [sp, #20]
 8018246:	9a03      	ldr	r2, [sp, #12]
 8018248:	bf18      	it	ne
 801824a:	2200      	movne	r2, #0
 801824c:	9315      	str	r3, [sp, #84]	@ 0x54
 801824e:	b292      	uxth	r2, r2
 8018250:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018252:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018254:	fa11 f383 	uxtah	r3, r1, r3
 8018258:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801825a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801825e:	3304      	adds	r3, #4
 8018260:	9306      	str	r3, [sp, #24]
 8018262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018264:	4283      	cmp	r3, r0
 8018266:	f240 816f 	bls.w	8018548 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801826a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801826e:	f04f 0900 	mov.w	r9, #0
 8018272:	9d06      	ldr	r5, [sp, #24]
 8018274:	fbb8 f3f3 	udiv	r3, r8, r3
 8018278:	ebaa 0303 	sub.w	r3, sl, r3
 801827c:	782d      	ldrb	r5, [r5, #0]
 801827e:	b29b      	uxth	r3, r3
 8018280:	950f      	str	r5, [sp, #60]	@ 0x3c
 8018282:	3501      	adds	r5, #1
 8018284:	9312      	str	r3, [sp, #72]	@ 0x48
 8018286:	9b06      	ldr	r3, [sp, #24]
 8018288:	9504      	str	r5, [sp, #16]
 801828a:	7859      	ldrb	r1, [r3, #1]
 801828c:	789b      	ldrb	r3, [r3, #2]
 801828e:	021b      	lsls	r3, r3, #8
 8018290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8018294:	9906      	ldr	r1, [sp, #24]
 8018296:	78c9      	ldrb	r1, [r1, #3]
 8018298:	430b      	orrs	r3, r1
 801829a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801829c:	4419      	add	r1, r3
 801829e:	1c4d      	adds	r5, r1, #1
 80182a0:	7849      	ldrb	r1, [r1, #1]
 80182a2:	9502      	str	r5, [sp, #8]
 80182a4:	0209      	lsls	r1, r1, #8
 80182a6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80182a8:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 80182ac:	5ceb      	ldrb	r3, [r5, r3]
 80182ae:	4319      	orrs	r1, r3
 80182b0:	b28b      	uxth	r3, r1
 80182b2:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80182b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80182b8:	2300      	movs	r3, #0
 80182ba:	9307      	str	r3, [sp, #28]
 80182bc:	2301      	movs	r3, #1
 80182be:	e9cd 3300 	strd	r3, r3, [sp]
 80182c2:	469c      	mov	ip, r3
 80182c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80182c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80182ca:	f1b8 0f00 	cmp.w	r8, #0
 80182ce:	f000 8082 	beq.w	80183d6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 80182d2:	45c4      	cmp	ip, r8
 80182d4:	d270      	bcs.n	80183b8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 80182d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80182d8:	eba8 080c 	sub.w	r8, r8, ip
 80182dc:	4611      	mov	r1, r2
 80182de:	4283      	cmp	r3, r0
 80182e0:	fa1f f888 	uxth.w	r8, r8
 80182e4:	d802      	bhi.n	80182ec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 80182e6:	e074      	b.n	80183d2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d15f      	bne.n	80183ac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 80182ec:	9b02      	ldr	r3, [sp, #8]
 80182ee:	9a01      	ldr	r2, [sp, #4]
 80182f0:	785b      	ldrb	r3, [r3, #1]
 80182f2:	f1c2 0207 	rsb	r2, r2, #7
 80182f6:	9d01      	ldr	r5, [sp, #4]
 80182f8:	4093      	lsls	r3, r2
 80182fa:	005b      	lsls	r3, r3, #1
 80182fc:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8018300:	9b02      	ldr	r3, [sp, #8]
 8018302:	781b      	ldrb	r3, [r3, #0]
 8018304:	412b      	asrs	r3, r5
 8018306:	b2db      	uxtb	r3, r3
 8018308:	4313      	orrs	r3, r2
 801830a:	462a      	mov	r2, r5
 801830c:	3201      	adds	r2, #1
 801830e:	b29e      	uxth	r6, r3
 8018310:	b2d2      	uxtb	r2, r2
 8018312:	2a08      	cmp	r2, #8
 8018314:	9201      	str	r2, [sp, #4]
 8018316:	9a02      	ldr	r2, [sp, #8]
 8018318:	bf09      	itett	eq
 801831a:	3202      	addeq	r2, #2
 801831c:	3201      	addne	r2, #1
 801831e:	9202      	streq	r2, [sp, #8]
 8018320:	2200      	moveq	r2, #0
 8018322:	bf14      	ite	ne
 8018324:	9202      	strne	r2, [sp, #8]
 8018326:	9201      	streq	r2, [sp, #4]
 8018328:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801832a:	42b2      	cmp	r2, r6
 801832c:	d309      	bcc.n	8018342 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801832e:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8018332:	2301      	movs	r3, #1
 8018334:	9a04      	ldr	r2, [sp, #16]
 8018336:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801833a:	d30e      	bcc.n	801835a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801833c:	9300      	str	r3, [sp, #0]
 801833e:	2500      	movs	r5, #0
 8018340:	e035      	b.n	80183ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8018342:	9b04      	ldr	r3, [sp, #16]
 8018344:	429e      	cmp	r6, r3
 8018346:	d318      	bcc.n	801837a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8018348:	9b00      	ldr	r3, [sp, #0]
 801834a:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801834e:	18e3      	adds	r3, r4, r3
 8018350:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8018354:	9b00      	ldr	r3, [sp, #0]
 8018356:	3301      	adds	r3, #1
 8018358:	b29b      	uxth	r3, r3
 801835a:	9a04      	ldr	r2, [sp, #16]
 801835c:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 8018360:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018364:	9f00      	ldr	r7, [sp, #0]
 8018366:	7115      	strb	r5, [r2, #4]
 8018368:	3701      	adds	r7, #1
 801836a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801836c:	7157      	strb	r7, [r2, #5]
 801836e:	80d5      	strh	r5, [r2, #6]
 8018370:	9a04      	ldr	r2, [sp, #16]
 8018372:	3201      	adds	r2, #1
 8018374:	b292      	uxth	r2, r2
 8018376:	9204      	str	r2, [sp, #16]
 8018378:	e7e0      	b.n	801833c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801837a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801837e:	4632      	mov	r2, r6
 8018380:	795b      	ldrb	r3, [r3, #5]
 8018382:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 8018386:	4425      	add	r5, r4
 8018388:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801838a:	eb07 0c05 	add.w	ip, r7, r5
 801838e:	f1bc 0f00 	cmp.w	ip, #0
 8018392:	dd07      	ble.n	80183a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 8018394:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018398:	f892 c004 	ldrb.w	ip, [r2, #4]
 801839c:	f805 cd01 	strb.w	ip, [r5, #-1]!
 80183a0:	88d2      	ldrh	r2, [r2, #6]
 80183a2:	e7f1      	b.n	8018388 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 80183a4:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80183a8:	b29b      	uxth	r3, r3
 80183aa:	e7c3      	b.n	8018334 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 80183ac:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80183ae:	460a      	mov	r2, r1
 80183b0:	960a      	str	r6, [sp, #40]	@ 0x28
 80183b2:	46a9      	mov	r9, r5
 80183b4:	469c      	mov	ip, r3
 80183b6:	e788      	b.n	80182ca <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 80183b8:	ebac 0308 	sub.w	r3, ip, r8
 80183bc:	eb09 0508 	add.w	r5, r9, r8
 80183c0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80183c4:	b29b      	uxth	r3, r3
 80183c6:	b2ad      	uxth	r5, r5
 80183c8:	f04f 0800 	mov.w	r8, #0
 80183cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80183ce:	4282      	cmp	r2, r0
 80183d0:	d88a      	bhi.n	80182e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 80183d2:	460a      	mov	r2, r1
 80183d4:	e745      	b.n	8018262 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 80183d6:	4594      	cmp	ip, r2
 80183d8:	9d08      	ldr	r5, [sp, #32]
 80183da:	4686      	mov	lr, r0
 80183dc:	bf27      	ittee	cs
 80183de:	ebac 0302 	subcs.w	r3, ip, r2
 80183e2:	4616      	movcs	r6, r2
 80183e4:	eba2 010c 	subcc.w	r1, r2, ip
 80183e8:	4666      	movcc	r6, ip
 80183ea:	bf27      	ittee	cs
 80183ec:	b29b      	uxthcs	r3, r3
 80183ee:	4641      	movcs	r1, r8
 80183f0:	b289      	uxthcc	r1, r1
 80183f2:	4643      	movcc	r3, r8
 80183f4:	2dff      	cmp	r5, #255	@ 0xff
 80183f6:	eb09 0506 	add.w	r5, r9, r6
 80183fa:	b2ad      	uxth	r5, r5
 80183fc:	d130      	bne.n	8018460 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 80183fe:	45a9      	cmp	r9, r5
 8018400:	f10e 0e03 	add.w	lr, lr, #3
 8018404:	d17a      	bne.n	80184fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8018406:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801840a:	4594      	cmp	ip, r2
 801840c:	4430      	add	r0, r6
 801840e:	d3db      	bcc.n	80183c8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8018410:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018412:	9903      	ldr	r1, [sp, #12]
 8018414:	8812      	ldrh	r2, [r2, #0]
 8018416:	1a52      	subs	r2, r2, r1
 8018418:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801841a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801841e:	4410      	add	r0, r2
 8018420:	9a07      	ldr	r2, [sp, #28]
 8018422:	3201      	adds	r2, #1
 8018424:	428a      	cmp	r2, r1
 8018426:	9207      	str	r2, [sp, #28]
 8018428:	f040 8081 	bne.w	801852e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801842c:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 8018430:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8018434:	9b03      	ldr	r3, [sp, #12]
 8018436:	eba8 080c 	sub.w	r8, r8, ip
 801843a:	fa1f f888 	uxth.w	r8, r8
 801843e:	f1b8 0f00 	cmp.w	r8, #0
 8018442:	bf08      	it	eq
 8018444:	461a      	moveq	r2, r3
 8018446:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018448:	bf18      	it	ne
 801844a:	2200      	movne	r2, #0
 801844c:	3301      	adds	r3, #1
 801844e:	b292      	uxth	r2, r2
 8018450:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018452:	e6fd      	b.n	8018250 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8018454:	24025140 	.word	0x24025140
 8018458:	2402513a 	.word	0x2402513a
 801845c:	fffff7fb 	.word	0xfffff7fb
 8018460:	45a9      	cmp	r9, r5
 8018462:	f10e 0e03 	add.w	lr, lr, #3
 8018466:	d0ce      	beq.n	8018406 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8018468:	f109 0701 	add.w	r7, r9, #1
 801846c:	44a1      	add	r9, r4
 801846e:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 8018472:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8018476:	9713      	str	r7, [sp, #76]	@ 0x4c
 8018478:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801847c:	9f05      	ldr	r7, [sp, #20]
 801847e:	eb07 0908 	add.w	r9, r7, r8
 8018482:	f817 8008 	ldrb.w	r8, [r7, r8]
 8018486:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8018488:	fb1b fb07 	smulbb	fp, fp, r7
 801848c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801848e:	fb08 b807 	mla	r8, r8, r7, fp
 8018492:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8018494:	fa1f f888 	uxth.w	r8, r8
 8018498:	f108 0b01 	add.w	fp, r8, #1
 801849c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80184a0:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 80184a4:	fb1b fb07 	smulbb	fp, fp, r7
 80184a8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80184ac:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80184ae:	f80e 8c03 	strb.w	r8, [lr, #-3]
 80184b2:	f899 8001 	ldrb.w	r8, [r9, #1]
 80184b6:	fb08 b807 	mla	r8, r8, r7, fp
 80184ba:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80184bc:	fa1f f888 	uxth.w	r8, r8
 80184c0:	f108 0b01 	add.w	fp, r8, #1
 80184c4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80184c8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80184cc:	f80e 8c02 	strb.w	r8, [lr, #-2]
 80184d0:	f899 8002 	ldrb.w	r8, [r9, #2]
 80184d4:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 80184d8:	fb19 f907 	smulbb	r9, r9, r7
 80184dc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80184de:	fb08 9807 	mla	r8, r8, r7, r9
 80184e2:	fa1f f888 	uxth.w	r8, r8
 80184e6:	f108 0901 	add.w	r9, r8, #1
 80184ea:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 80184ee:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 80184f2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80184f6:	f80e 8c01 	strb.w	r8, [lr, #-1]
 80184fa:	e7b1      	b.n	8018460 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 80184fc:	f109 0b01 	add.w	fp, r9, #1
 8018500:	44a1      	add	r9, r4
 8018502:	9f05      	ldr	r7, [sp, #20]
 8018504:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8018508:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801850c:	eb07 0908 	add.w	r9, r7, r8
 8018510:	f817 8008 	ldrb.w	r8, [r7, r8]
 8018514:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8018518:	f899 8001 	ldrb.w	r8, [r9, #1]
 801851c:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8018520:	f899 8002 	ldrb.w	r8, [r9, #2]
 8018524:	fa1f f98b 	uxth.w	r9, fp
 8018528:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801852c:	e767      	b.n	80183fe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801852e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8018532:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8018536:	eba8 0801 	sub.w	r8, r8, r1
 801853a:	fa1f f888 	uxth.w	r8, r8
 801853e:	f1b8 0f00 	cmp.w	r8, #0
 8018542:	bf18      	it	ne
 8018544:	2100      	movne	r1, #0
 8018546:	e741      	b.n	80183cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8018548:	4b03      	ldr	r3, [pc, #12]	@ (8018558 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801854a:	6818      	ldr	r0, [r3, #0]
 801854c:	6803      	ldr	r3, [r0, #0]
 801854e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018550:	4798      	blx	r3
 8018552:	b01b      	add	sp, #108	@ 0x6c
 8018554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018558:	24025140 	.word	0x24025140

0801855c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801855c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018560:	b09d      	sub	sp, #116	@ 0x74
 8018562:	461d      	mov	r5, r3
 8018564:	4604      	mov	r4, r0
 8018566:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018568:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801856c:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8018570:	920c      	str	r2, [sp, #48]	@ 0x30
 8018572:	2a00      	cmp	r2, #0
 8018574:	f000 81de 	beq.w	8018934 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8018578:	6828      	ldr	r0, [r5, #0]
 801857a:	aa18      	add	r2, sp, #96	@ 0x60
 801857c:	6869      	ldr	r1, [r5, #4]
 801857e:	c203      	stmia	r2!, {r0, r1}
 8018580:	6818      	ldr	r0, [r3, #0]
 8018582:	aa1a      	add	r2, sp, #104	@ 0x68
 8018584:	6859      	ldr	r1, [r3, #4]
 8018586:	c203      	stmia	r2!, {r0, r1}
 8018588:	a818      	add	r0, sp, #96	@ 0x60
 801858a:	f7fa f887 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801858e:	4629      	mov	r1, r5
 8018590:	a81a      	add	r0, sp, #104	@ 0x68
 8018592:	f7fa f8ab 	bl	80126ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018596:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801859a:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801859e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80185a2:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 80185a6:	bfdb      	ittet	le
 80185a8:	b29a      	uxthle	r2, r3
 80185aa:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80185ae:	2201      	movgt	r2, #1
 80185b0:	fb91 f2f2 	sdivle	r2, r1, r2
 80185b4:	9201      	str	r2, [sp, #4]
 80185b6:	9801      	ldr	r0, [sp, #4]
 80185b8:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 80185bc:	9901      	ldr	r1, [sp, #4]
 80185be:	fb92 f0f0 	sdiv	r0, r2, r0
 80185c2:	b280      	uxth	r0, r0
 80185c4:	440f      	add	r7, r1
 80185c6:	900d      	str	r0, [sp, #52]	@ 0x34
 80185c8:	3f01      	subs	r7, #1
 80185ca:	9801      	ldr	r0, [sp, #4]
 80185cc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80185ce:	fb05 2510 	mls	r5, r5, r0, r2
 80185d2:	fb97 f7f1 	sdiv	r7, r7, r1
 80185d6:	fb15 f503 	smulbb	r5, r5, r3
 80185da:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 80185de:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 80185e2:	3701      	adds	r7, #1
 80185e4:	440d      	add	r5, r1
 80185e6:	4419      	add	r1, r3
 80185e8:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 80185ec:	b2bf      	uxth	r7, r7
 80185ee:	441a      	add	r2, r3
 80185f0:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 80185f4:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 80185f8:	00bf      	lsls	r7, r7, #2
 80185fa:	9304      	str	r3, [sp, #16]
 80185fc:	b2ad      	uxth	r5, r5
 80185fe:	4bb0      	ldr	r3, [pc, #704]	@ (80188c0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 8018600:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8018604:	6818      	ldr	r0, [r3, #0]
 8018606:	6803      	ldr	r3, [r0, #0]
 8018608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801860a:	4798      	blx	r3
 801860c:	4bad      	ldr	r3, [pc, #692]	@ (80188c4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801860e:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8018612:	2d00      	cmp	r5, #0
 8018614:	881a      	ldrh	r2, [r3, #0]
 8018616:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801861a:	fb02 f606 	mul.w	r6, r2, r6
 801861e:	fb02 c101 	mla	r1, r2, r1, ip
 8018622:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018626:	9316      	str	r3, [sp, #88]	@ 0x58
 8018628:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801862c:	4ba6      	ldr	r3, [pc, #664]	@ (80188c8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801862e:	eb00 0801 	add.w	r8, r0, r1
 8018632:	bf18      	it	ne
 8018634:	2100      	movne	r1, #0
 8018636:	eba3 0304 	sub.w	r3, r3, r4
 801863a:	eb08 0206 	add.w	r2, r8, r6
 801863e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8018640:	9208      	str	r2, [sp, #32]
 8018642:	f107 0204 	add.w	r2, r7, #4
 8018646:	9211      	str	r2, [sp, #68]	@ 0x44
 8018648:	9a04      	ldr	r2, [sp, #16]
 801864a:	bf08      	it	eq
 801864c:	4611      	moveq	r1, r2
 801864e:	2200      	movs	r2, #0
 8018650:	b289      	uxth	r1, r1
 8018652:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018654:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018658:	fa12 f383 	uxtah	r3, r2, r3
 801865c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801865e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018662:	3304      	adds	r3, #4
 8018664:	9306      	str	r3, [sp, #24]
 8018666:	9b08      	ldr	r3, [sp, #32]
 8018668:	4543      	cmp	r3, r8
 801866a:	f240 815e 	bls.w	801892a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801866e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8018672:	f04f 0b01 	mov.w	fp, #1
 8018676:	9a01      	ldr	r2, [sp, #4]
 8018678:	9806      	ldr	r0, [sp, #24]
 801867a:	465e      	mov	r6, fp
 801867c:	f8cd b008 	str.w	fp, [sp, #8]
 8018680:	7800      	ldrb	r0, [r0, #0]
 8018682:	fbb5 f3f3 	udiv	r3, r5, r3
 8018686:	1ad3      	subs	r3, r2, r3
 8018688:	900e      	str	r0, [sp, #56]	@ 0x38
 801868a:	3001      	adds	r0, #1
 801868c:	b29b      	uxth	r3, r3
 801868e:	9005      	str	r0, [sp, #20]
 8018690:	9312      	str	r3, [sp, #72]	@ 0x48
 8018692:	9b06      	ldr	r3, [sp, #24]
 8018694:	785a      	ldrb	r2, [r3, #1]
 8018696:	789b      	ldrb	r3, [r3, #2]
 8018698:	021b      	lsls	r3, r3, #8
 801869a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801869e:	9a06      	ldr	r2, [sp, #24]
 80186a0:	78d2      	ldrb	r2, [r2, #3]
 80186a2:	4313      	orrs	r3, r2
 80186a4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80186a6:	441a      	add	r2, r3
 80186a8:	1c50      	adds	r0, r2, #1
 80186aa:	7852      	ldrb	r2, [r2, #1]
 80186ac:	9003      	str	r0, [sp, #12]
 80186ae:	0212      	lsls	r2, r2, #8
 80186b0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80186b2:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80186b6:	5cc3      	ldrb	r3, [r0, r3]
 80186b8:	431a      	orrs	r2, r3
 80186ba:	b293      	uxth	r3, r2
 80186bc:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80186c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80186c2:	2300      	movs	r3, #0
 80186c4:	461a      	mov	r2, r3
 80186c6:	9307      	str	r3, [sp, #28]
 80186c8:	2d00      	cmp	r5, #0
 80186ca:	d07c      	beq.n	80187c6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 80186cc:	42ae      	cmp	r6, r5
 80186ce:	d26c      	bcs.n	80187aa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 80186d0:	9b08      	ldr	r3, [sp, #32]
 80186d2:	1bad      	subs	r5, r5, r6
 80186d4:	4608      	mov	r0, r1
 80186d6:	4543      	cmp	r3, r8
 80186d8:	b2ad      	uxth	r5, r5
 80186da:	d802      	bhi.n	80186e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 80186dc:	e071      	b.n	80187c2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d15d      	bne.n	801879e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 80186e2:	9b03      	ldr	r3, [sp, #12]
 80186e4:	9a02      	ldr	r2, [sp, #8]
 80186e6:	785b      	ldrb	r3, [r3, #1]
 80186e8:	f1c2 0207 	rsb	r2, r2, #7
 80186ec:	9902      	ldr	r1, [sp, #8]
 80186ee:	4093      	lsls	r3, r2
 80186f0:	005b      	lsls	r3, r3, #1
 80186f2:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80186f6:	9b03      	ldr	r3, [sp, #12]
 80186f8:	781b      	ldrb	r3, [r3, #0]
 80186fa:	410b      	asrs	r3, r1
 80186fc:	3101      	adds	r1, #1
 80186fe:	b2c9      	uxtb	r1, r1
 8018700:	b2db      	uxtb	r3, r3
 8018702:	2908      	cmp	r1, #8
 8018704:	9102      	str	r1, [sp, #8]
 8018706:	9903      	ldr	r1, [sp, #12]
 8018708:	ea43 0302 	orr.w	r3, r3, r2
 801870c:	bf0c      	ite	eq
 801870e:	3102      	addeq	r1, #2
 8018710:	3101      	addne	r1, #1
 8018712:	b29a      	uxth	r2, r3
 8018714:	bf05      	ittet	eq
 8018716:	9103      	streq	r1, [sp, #12]
 8018718:	2100      	moveq	r1, #0
 801871a:	9103      	strne	r1, [sp, #12]
 801871c:	9102      	streq	r1, [sp, #8]
 801871e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018720:	4291      	cmp	r1, r2
 8018722:	d30a      	bcc.n	801873a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 8018724:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8018728:	2301      	movs	r3, #1
 801872a:	9905      	ldr	r1, [sp, #20]
 801872c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8018730:	d30f      	bcc.n	8018752 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 8018732:	469b      	mov	fp, r3
 8018734:	f04f 0c00 	mov.w	ip, #0
 8018738:	e032      	b.n	80187a0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801873a:	9b05      	ldr	r3, [sp, #20]
 801873c:	429a      	cmp	r2, r3
 801873e:	d318      	bcc.n	8018772 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8018740:	eb04 030b 	add.w	r3, r4, fp
 8018744:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8018748:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801874c:	f10b 0301 	add.w	r3, fp, #1
 8018750:	b29b      	uxth	r3, r3
 8018752:	9905      	ldr	r1, [sp, #20]
 8018754:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8018758:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801875c:	710e      	strb	r6, [r1, #4]
 801875e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018760:	80ce      	strh	r6, [r1, #6]
 8018762:	f10b 0601 	add.w	r6, fp, #1
 8018766:	714e      	strb	r6, [r1, #5]
 8018768:	9905      	ldr	r1, [sp, #20]
 801876a:	3101      	adds	r1, #1
 801876c:	b289      	uxth	r1, r1
 801876e:	9105      	str	r1, [sp, #20]
 8018770:	e7df      	b.n	8018732 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8018772:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018776:	4611      	mov	r1, r2
 8018778:	795b      	ldrb	r3, [r3, #5]
 801877a:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801877e:	4426      	add	r6, r4
 8018780:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8018782:	4437      	add	r7, r6
 8018784:	2f00      	cmp	r7, #0
 8018786:	dd06      	ble.n	8018796 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8018788:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801878c:	790f      	ldrb	r7, [r1, #4]
 801878e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018792:	88c9      	ldrh	r1, [r1, #6]
 8018794:	e7f4      	b.n	8018780 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 8018796:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801879a:	b29b      	uxth	r3, r3
 801879c:	e7c5      	b.n	801872a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801879e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80187a0:	920a      	str	r2, [sp, #40]	@ 0x28
 80187a2:	4601      	mov	r1, r0
 80187a4:	4662      	mov	r2, ip
 80187a6:	461e      	mov	r6, r3
 80187a8:	e78e      	b.n	80186c8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 80187aa:	1b73      	subs	r3, r6, r5
 80187ac:	eb02 0c05 	add.w	ip, r2, r5
 80187b0:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80187b4:	b29b      	uxth	r3, r3
 80187b6:	fa1f fc8c 	uxth.w	ip, ip
 80187ba:	2500      	movs	r5, #0
 80187bc:	9a08      	ldr	r2, [sp, #32]
 80187be:	4542      	cmp	r2, r8
 80187c0:	d88d      	bhi.n	80186de <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 80187c2:	4601      	mov	r1, r0
 80187c4:	e74f      	b.n	8018666 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 80187c6:	428e      	cmp	r6, r1
 80187c8:	bf2b      	itete	cs
 80187ca:	468e      	movcs	lr, r1
 80187cc:	46b6      	movcc	lr, r6
 80187ce:	1a73      	subcs	r3, r6, r1
 80187d0:	1b88      	subcc	r0, r1, r6
 80187d2:	eb02 0c0e 	add.w	ip, r2, lr
 80187d6:	bf2b      	itete	cs
 80187d8:	4628      	movcs	r0, r5
 80187da:	462b      	movcc	r3, r5
 80187dc:	b29b      	uxthcs	r3, r3
 80187de:	b280      	uxthcc	r0, r0
 80187e0:	f108 0503 	add.w	r5, r8, #3
 80187e4:	fa1f fc8c 	uxth.w	ip, ip
 80187e8:	4562      	cmp	r2, ip
 80187ea:	d06f      	beq.n	80188cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 80187ec:	1c57      	adds	r7, r2, #1
 80187ee:	4422      	add	r2, r4
 80187f0:	b2bf      	uxth	r7, r7
 80187f2:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 80187f6:	9713      	str	r7, [sp, #76]	@ 0x4c
 80187f8:	2704      	movs	r7, #4
 80187fa:	46b9      	mov	r9, r7
 80187fc:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80187fe:	fb19 7202 	smlabb	r2, r9, r2, r7
 8018802:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018804:	58bf      	ldr	r7, [r7, r2]
 8018806:	0e3a      	lsrs	r2, r7, #24
 8018808:	9209      	str	r2, [sp, #36]	@ 0x24
 801880a:	d016      	beq.n	801883a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801880c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8018810:	fa5f fa87 	uxtb.w	sl, r7
 8018814:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8018818:	fa5f f289 	uxtb.w	r2, r9
 801881c:	9214      	str	r2, [sp, #80]	@ 0x50
 801881e:	b2fa      	uxtb	r2, r7
 8018820:	9215      	str	r2, [sp, #84]	@ 0x54
 8018822:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018824:	2aff      	cmp	r2, #255	@ 0xff
 8018826:	d10b      	bne.n	8018840 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8018828:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801882a:	2aff      	cmp	r2, #255	@ 0xff
 801882c:	d108      	bne.n	8018840 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801882e:	f805 ac03 	strb.w	sl, [r5, #-3]
 8018832:	f805 9c02 	strb.w	r9, [r5, #-2]
 8018836:	f805 7c01 	strb.w	r7, [r5, #-1]
 801883a:	3503      	adds	r5, #3
 801883c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801883e:	e7d3      	b.n	80187e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 8018840:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8018842:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018844:	437a      	muls	r2, r7
 8018846:	1c57      	adds	r7, r2, #1
 8018848:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801884c:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8018850:	1212      	asrs	r2, r2, #8
 8018852:	fa1f f982 	uxth.w	r9, r2
 8018856:	43d2      	mvns	r2, r2
 8018858:	fb1a fa09 	smulbb	sl, sl, r9
 801885c:	b2d2      	uxtb	r2, r2
 801885e:	fb07 a702 	mla	r7, r7, r2, sl
 8018862:	9209      	str	r2, [sp, #36]	@ 0x24
 8018864:	b2bf      	uxth	r7, r7
 8018866:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018868:	f107 0a01 	add.w	sl, r7, #1
 801886c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8018870:	fb12 fa09 	smulbb	sl, r2, r9
 8018874:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018876:	123f      	asrs	r7, r7, #8
 8018878:	f805 7c03 	strb.w	r7, [r5, #-3]
 801887c:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8018880:	fb07 aa02 	mla	sl, r7, r2, sl
 8018884:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8018886:	fb12 f909 	smulbb	r9, r2, r9
 801888a:	fa1f fa8a 	uxth.w	sl, sl
 801888e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018890:	f10a 0701 	add.w	r7, sl, #1
 8018894:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018898:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801889c:	fb07 9902 	mla	r9, r7, r2, r9
 80188a0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80188a4:	fa1f f989 	uxth.w	r9, r9
 80188a8:	f805 ac02 	strb.w	sl, [r5, #-2]
 80188ac:	f109 0201 	add.w	r2, r9, #1
 80188b0:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80188b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80188b8:	f805 9c01 	strb.w	r9, [r5, #-1]
 80188bc:	e7bd      	b.n	801883a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 80188be:	bf00      	nop
 80188c0:	24025140 	.word	0x24025140
 80188c4:	2402513a 	.word	0x2402513a
 80188c8:	fffff7fb 	.word	0xfffff7fb
 80188cc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80188d0:	428e      	cmp	r6, r1
 80188d2:	44f0      	add	r8, lr
 80188d4:	f4ff af71 	bcc.w	80187ba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 80188d8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80188da:	9904      	ldr	r1, [sp, #16]
 80188dc:	8812      	ldrh	r2, [r2, #0]
 80188de:	1a52      	subs	r2, r2, r1
 80188e0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80188e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80188e6:	4490      	add	r8, r2
 80188e8:	9a07      	ldr	r2, [sp, #28]
 80188ea:	3201      	adds	r2, #1
 80188ec:	428a      	cmp	r2, r1
 80188ee:	9207      	str	r2, [sp, #28]
 80188f0:	d111      	bne.n	8018916 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 80188f2:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 80188f6:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 80188fa:	9b04      	ldr	r3, [sp, #16]
 80188fc:	eba5 050c 	sub.w	r5, r5, ip
 8018900:	b2ad      	uxth	r5, r5
 8018902:	2d00      	cmp	r5, #0
 8018904:	bf08      	it	eq
 8018906:	4619      	moveq	r1, r3
 8018908:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801890a:	bf18      	it	ne
 801890c:	2100      	movne	r1, #0
 801890e:	3301      	adds	r3, #1
 8018910:	b289      	uxth	r1, r1
 8018912:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018914:	e69e      	b.n	8018654 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 8018916:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801891a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801891e:	1a2d      	subs	r5, r5, r0
 8018920:	b2ad      	uxth	r5, r5
 8018922:	2d00      	cmp	r5, #0
 8018924:	bf18      	it	ne
 8018926:	2000      	movne	r0, #0
 8018928:	e748      	b.n	80187bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801892a:	4b04      	ldr	r3, [pc, #16]	@ (801893c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801892c:	6818      	ldr	r0, [r3, #0]
 801892e:	6803      	ldr	r3, [r0, #0]
 8018930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018932:	4798      	blx	r3
 8018934:	b01d      	add	sp, #116	@ 0x74
 8018936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801893a:	bf00      	nop
 801893c:	24025140 	.word	0x24025140

08018940 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8018940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018944:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018948:	9c06      	ldr	r4, [sp, #24]
 801894a:	2800      	cmp	r0, #0
 801894c:	d06e      	beq.n	8018a2c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801894e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8018952:	2d00      	cmp	r5, #0
 8018954:	dd6a      	ble.n	8018a2c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018956:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801895a:	f1bc 0f00 	cmp.w	ip, #0
 801895e:	dd65      	ble.n	8018a2c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018960:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8018964:	28ff      	cmp	r0, #255	@ 0xff
 8018966:	f9b3 3000 	ldrsh.w	r3, [r3]
 801896a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801896e:	fb02 3306 	mla	r3, r2, r6, r3
 8018972:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8018976:	b2e4      	uxtb	r4, r4
 8018978:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801897c:	4419      	add	r1, r3
 801897e:	fb02 f30c 	mul.w	r3, r2, ip
 8018982:	eba2 0205 	sub.w	r2, r2, r5
 8018986:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801898a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801898e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018992:	440b      	add	r3, r1
 8018994:	d03e      	beq.n	8018a14 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8018996:	fa1f fc80 	uxth.w	ip, r0
 801899a:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801899e:	fb06 f60c 	mul.w	r6, r6, ip
 80189a2:	b280      	uxth	r0, r0
 80189a4:	fb07 f70c 	mul.w	r7, r7, ip
 80189a8:	fb04 f40c 	mul.w	r4, r4, ip
 80189ac:	4299      	cmp	r1, r3
 80189ae:	d23d      	bcs.n	8018a2c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80189b0:	eb01 0c05 	add.w	ip, r1, r5
 80189b4:	458c      	cmp	ip, r1
 80189b6:	f101 0e03 	add.w	lr, r1, #3
 80189ba:	d928      	bls.n	8018a0e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 80189bc:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80189c0:	fb11 f100 	smulbb	r1, r1, r0
 80189c4:	4421      	add	r1, r4
 80189c6:	b289      	uxth	r1, r1
 80189c8:	f101 0801 	add.w	r8, r1, #1
 80189cc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80189d0:	1209      	asrs	r1, r1, #8
 80189d2:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80189d6:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80189da:	fb11 f100 	smulbb	r1, r1, r0
 80189de:	4439      	add	r1, r7
 80189e0:	b289      	uxth	r1, r1
 80189e2:	f101 0801 	add.w	r8, r1, #1
 80189e6:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80189ea:	1209      	asrs	r1, r1, #8
 80189ec:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80189f0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80189f4:	fb11 f100 	smulbb	r1, r1, r0
 80189f8:	4431      	add	r1, r6
 80189fa:	b289      	uxth	r1, r1
 80189fc:	f101 0801 	add.w	r8, r1, #1
 8018a00:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8018a04:	1209      	asrs	r1, r1, #8
 8018a06:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8018a0a:	4671      	mov	r1, lr
 8018a0c:	e7d2      	b.n	80189b4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8018a0e:	4411      	add	r1, r2
 8018a10:	e7cc      	b.n	80189ac <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8018a12:	4411      	add	r1, r2
 8018a14:	4299      	cmp	r1, r3
 8018a16:	d209      	bcs.n	8018a2c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018a18:	1948      	adds	r0, r1, r5
 8018a1a:	4281      	cmp	r1, r0
 8018a1c:	d2f9      	bcs.n	8018a12 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8018a1e:	700c      	strb	r4, [r1, #0]
 8018a20:	3103      	adds	r1, #3
 8018a22:	f801 7c02 	strb.w	r7, [r1, #-2]
 8018a26:	f801 6c01 	strb.w	r6, [r1, #-1]
 8018a2a:	e7f6      	b.n	8018a1a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8018a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018a30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8018a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a34:	b093      	sub	sp, #76	@ 0x4c
 8018a36:	4699      	mov	r9, r3
 8018a38:	4617      	mov	r7, r2
 8018a3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018a3e:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 8018a42:	4604      	mov	r4, r0
 8018a44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018a48:	a80c      	add	r0, sp, #48	@ 0x30
 8018a4a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 8018a4e:	460d      	mov	r5, r1
 8018a50:	4649      	mov	r1, r9
 8018a52:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8018a56:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8018a5a:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 8018a5e:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 8018a62:	f7f4 fecd 	bl	800d800 <_ZN8touchgfx4RectaNERKS0_>
 8018a66:	4639      	mov	r1, r7
 8018a68:	a80c      	add	r0, sp, #48	@ 0x30
 8018a6a:	f7f4 fec9 	bl	800d800 <_ZN8touchgfx4RectaNERKS0_>
 8018a6e:	4b78      	ldr	r3, [pc, #480]	@ (8018c50 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8018a70:	8818      	ldrh	r0, [r3, #0]
 8018a72:	4b78      	ldr	r3, [pc, #480]	@ (8018c54 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8018a74:	b202      	sxth	r2, r0
 8018a76:	8819      	ldrh	r1, [r3, #0]
 8018a78:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8018a7c:	b20f      	sxth	r7, r1
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	da07      	bge.n	8018a92 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8018a82:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 8018a86:	4463      	add	r3, ip
 8018a88:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8018a8c:	2300      	movs	r3, #0
 8018a8e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8018a92:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8018a96:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 8018a9a:	1ad2      	subs	r2, r2, r3
 8018a9c:	4594      	cmp	ip, r2
 8018a9e:	bfc4      	itt	gt
 8018aa0:	1ac2      	subgt	r2, r0, r3
 8018aa2:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 8018aa6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8018aaa:	2a00      	cmp	r2, #0
 8018aac:	da07      	bge.n	8018abe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8018aae:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 8018ab2:	4462      	add	r2, ip
 8018ab4:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8018ab8:	2200      	movs	r2, #0
 8018aba:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8018abe:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8018ac2:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 8018ac6:	1abf      	subs	r7, r7, r2
 8018ac8:	45bc      	cmp	ip, r7
 8018aca:	f8df c190 	ldr.w	ip, [pc, #400]	@ 8018c5c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8018ace:	bfc8      	it	gt
 8018ad0:	1a8f      	subgt	r7, r1, r2
 8018ad2:	f89c c000 	ldrb.w	ip, [ip]
 8018ad6:	bfc8      	it	gt
 8018ad8:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 8018adc:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8018ae0:	f1bc 0f00 	cmp.w	ip, #0
 8018ae4:	d176      	bne.n	8018bd4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8018ae6:	4287      	cmp	r7, r0
 8018ae8:	bf14      	ite	ne
 8018aea:	2100      	movne	r1, #0
 8018aec:	2101      	moveq	r1, #1
 8018aee:	2f00      	cmp	r7, #0
 8018af0:	9107      	str	r1, [sp, #28]
 8018af2:	dd73      	ble.n	8018bdc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8018af4:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 8018af8:	2900      	cmp	r1, #0
 8018afa:	9104      	str	r1, [sp, #16]
 8018afc:	dd6e      	ble.n	8018bdc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8018afe:	f8b9 1000 	ldrh.w	r1, [r9]
 8018b02:	a80e      	add	r0, sp, #56	@ 0x38
 8018b04:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 8018b08:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8018b0c:	1a5b      	subs	r3, r3, r1
 8018b0e:	a910      	add	r1, sp, #64	@ 0x40
 8018b10:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8018b14:	b21b      	sxth	r3, r3
 8018b16:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 8018b1a:	f8df a144 	ldr.w	sl, [pc, #324]	@ 8018c60 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8018b1e:	9305      	str	r3, [sp, #20]
 8018b20:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8018b24:	1ad2      	subs	r2, r2, r3
 8018b26:	b213      	sxth	r3, r2
 8018b28:	9306      	str	r3, [sp, #24]
 8018b2a:	9b05      	ldr	r3, [sp, #20]
 8018b2c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8018b30:	9b06      	ldr	r3, [sp, #24]
 8018b32:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8018b36:	9b04      	ldr	r3, [sp, #16]
 8018b38:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8018b40:	f7f9 fdd4 	bl	80126ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018b44:	4640      	mov	r0, r8
 8018b46:	f7f9 fda9 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018b4a:	a810      	add	r0, sp, #64	@ 0x40
 8018b4c:	f7f9 fda6 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018b50:	4b41      	ldr	r3, [pc, #260]	@ (8018c58 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8018b52:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8018b56:	4628      	mov	r0, r5
 8018b58:	881b      	ldrh	r3, [r3, #0]
 8018b5a:	9308      	str	r3, [sp, #32]
 8018b5c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8018b60:	b21b      	sxth	r3, r3
 8018b62:	9303      	str	r3, [sp, #12]
 8018b64:	682b      	ldr	r3, [r5, #0]
 8018b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018b68:	4798      	blx	r3
 8018b6a:	9a03      	ldr	r2, [sp, #12]
 8018b6c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8018b70:	4681      	mov	r9, r0
 8018b72:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8018b76:	fb13 f302 	smulbb	r3, r3, r2
 8018b7a:	2203      	movs	r2, #3
 8018b7c:	f8da 0000 	ldr.w	r0, [sl]
 8018b80:	fb15 3302 	smlabb	r3, r5, r2, r3
 8018b84:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8018b86:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018b88:	441d      	add	r5, r3
 8018b8a:	6803      	ldr	r3, [r0, #0]
 8018b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018b8e:	4798      	blx	r3
 8018b90:	9009      	str	r0, [sp, #36]	@ 0x24
 8018b92:	f8da 0000 	ldr.w	r0, [sl]
 8018b96:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8018b9a:	6803      	ldr	r3, [r0, #0]
 8018b9c:	910a      	str	r1, [sp, #40]	@ 0x28
 8018b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018ba0:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 8018ba4:	4798      	blx	r3
 8018ba6:	f010 0f01 	tst.w	r0, #1
 8018baa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8018bae:	d01e      	beq.n	8018bee <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8018bb0:	f8da 0000 	ldr.w	r0, [sl]
 8018bb4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8018bb8:	6803      	ldr	r3, [r0, #0]
 8018bba:	9200      	str	r2, [sp, #0]
 8018bbc:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8018bbe:	462b      	mov	r3, r5
 8018bc0:	e898 0006 	ldmia.w	r8, {r1, r2}
 8018bc4:	47b0      	blx	r6
 8018bc6:	9b05      	ldr	r3, [sp, #20]
 8018bc8:	80a7      	strh	r7, [r4, #4]
 8018bca:	8023      	strh	r3, [r4, #0]
 8018bcc:	9b06      	ldr	r3, [sp, #24]
 8018bce:	8063      	strh	r3, [r4, #2]
 8018bd0:	9b04      	ldr	r3, [sp, #16]
 8018bd2:	e007      	b.n	8018be4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8018bd4:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 8018bd8:	4288      	cmp	r0, r1
 8018bda:	e785      	b.n	8018ae8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8018bdc:	2300      	movs	r3, #0
 8018bde:	8023      	strh	r3, [r4, #0]
 8018be0:	8063      	strh	r3, [r4, #2]
 8018be2:	80a3      	strh	r3, [r4, #4]
 8018be4:	4620      	mov	r0, r4
 8018be6:	80e3      	strh	r3, [r4, #6]
 8018be8:	b013      	add	sp, #76	@ 0x4c
 8018bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bee:	fb09 f606 	mul.w	r6, r9, r6
 8018bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018bf4:	fb11 6602 	smlabb	r6, r1, r2, r6
 8018bf8:	9a07      	ldr	r2, [sp, #28]
 8018bfa:	4433      	add	r3, r6
 8018bfc:	461e      	mov	r6, r3
 8018bfe:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8018c02:	b16a      	cbz	r2, 8018c20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8018c04:	9a08      	ldr	r2, [sp, #32]
 8018c06:	4593      	cmp	fp, r2
 8018c08:	d10a      	bne.n	8018c20 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8018c0a:	f8da 0000 	ldr.w	r0, [sl]
 8018c0e:	fb09 f303 	mul.w	r3, r9, r3
 8018c12:	4629      	mov	r1, r5
 8018c14:	6802      	ldr	r2, [r0, #0]
 8018c16:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8018c1a:	4632      	mov	r2, r6
 8018c1c:	47d0      	blx	sl
 8018c1e:	e7d2      	b.n	8018bc6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8018c20:	9a03      	ldr	r2, [sp, #12]
 8018c22:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8018c60 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8018c26:	fb02 5803 	mla	r8, r2, r3, r5
 8018c2a:	4545      	cmp	r5, r8
 8018c2c:	d2cb      	bcs.n	8018bc6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8018c2e:	f8db 0000 	ldr.w	r0, [fp]
 8018c32:	4629      	mov	r1, r5
 8018c34:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8018c38:	6802      	ldr	r2, [r0, #0]
 8018c3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018c3e:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8018c42:	4632      	mov	r2, r6
 8018c44:	47d0      	blx	sl
 8018c46:	9b03      	ldr	r3, [sp, #12]
 8018c48:	444e      	add	r6, r9
 8018c4a:	441d      	add	r5, r3
 8018c4c:	e7ed      	b.n	8018c2a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8018c4e:	bf00      	nop
 8018c50:	24025134 	.word	0x24025134
 8018c54:	24025136 	.word	0x24025136
 8018c58:	2402513a 	.word	0x2402513a
 8018c5c:	24025138 	.word	0x24025138
 8018c60:	24025140 	.word	0x24025140

08018c64 <_ZN8touchgfx8LCD24bppC1Ev>:
 8018c64:	2200      	movs	r2, #0
 8018c66:	490e      	ldr	r1, [pc, #56]	@ (8018ca0 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 8018c68:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8018c6c:	6001      	str	r1, [r0, #0]
 8018c6e:	6642      	str	r2, [r0, #100]	@ 0x64
 8018c70:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8018c74:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8018c78:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8018c7c:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8018c80:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8018c84:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8018c88:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8018c8c:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8018c90:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8018c94:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8018c98:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8018c9c:	4770      	bx	lr
 8018c9e:	bf00      	nop
 8018ca0:	080241a8 	.word	0x080241a8

08018ca4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8018ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ca8:	b091      	sub	sp, #68	@ 0x44
 8018caa:	4607      	mov	r7, r0
 8018cac:	4688      	mov	r8, r1
 8018cae:	6810      	ldr	r0, [r2, #0]
 8018cb0:	6851      	ldr	r1, [r2, #4]
 8018cb2:	ac0c      	add	r4, sp, #48	@ 0x30
 8018cb4:	4616      	mov	r6, r2
 8018cb6:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 8018cba:	4d64      	ldr	r5, [pc, #400]	@ (8018e4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8018cbc:	f8df a190 	ldr.w	sl, [pc, #400]	@ 8018e50 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8018cc0:	c403      	stmia	r4!, {r0, r1}
 8018cc2:	6818      	ldr	r0, [r3, #0]
 8018cc4:	ac0e      	add	r4, sp, #56	@ 0x38
 8018cc6:	6859      	ldr	r1, [r3, #4]
 8018cc8:	c403      	stmia	r4!, {r0, r1}
 8018cca:	a80c      	add	r0, sp, #48	@ 0x30
 8018ccc:	f7f9 fce6 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018cd0:	4631      	mov	r1, r6
 8018cd2:	a80e      	add	r0, sp, #56	@ 0x38
 8018cd4:	f7f9 fd0a 	bl	80126ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018cd8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8018cdc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8018ce0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8018ce4:	6828      	ldr	r0, [r5, #0]
 8018ce6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018cea:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 8018cee:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 8018cf2:	440f      	add	r7, r1
 8018cf4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8018cf8:	440a      	add	r2, r1
 8018cfa:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8018cfe:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8018d02:	4413      	add	r3, r2
 8018d04:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8018d08:	6803      	ldr	r3, [r0, #0]
 8018d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018d0c:	4798      	blx	r3
 8018d0e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8018d12:	6828      	ldr	r0, [r5, #0]
 8018d14:	d01f      	beq.n	8018d56 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8018d16:	2201      	movs	r2, #1
 8018d18:	2500      	movs	r5, #0
 8018d1a:	6801      	ldr	r1, [r0, #0]
 8018d1c:	b2a4      	uxth	r4, r4
 8018d1e:	b2b6      	uxth	r6, r6
 8018d20:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8018d24:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8018d28:	250b      	movs	r5, #11
 8018d2a:	9507      	str	r5, [sp, #28]
 8018d2c:	f8ba 5000 	ldrh.w	r5, [sl]
 8018d30:	f8cd 9010 	str.w	r9, [sp, #16]
 8018d34:	9602      	str	r6, [sp, #8]
 8018d36:	9401      	str	r4, [sp, #4]
 8018d38:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8018d3c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8018d40:	9203      	str	r2, [sp, #12]
 8018d42:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8018d46:	9200      	str	r2, [sp, #0]
 8018d48:	4642      	mov	r2, r8
 8018d4a:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8018d4c:	4639      	mov	r1, r7
 8018d4e:	47a0      	blx	r4
 8018d50:	b011      	add	sp, #68	@ 0x44
 8018d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d56:	6803      	ldr	r3, [r0, #0]
 8018d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018d5a:	4798      	blx	r3
 8018d5c:	f8ba 5000 	ldrh.w	r5, [sl]
 8018d60:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8018d64:	f04f 0e04 	mov.w	lr, #4
 8018d68:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8018d6c:	436e      	muls	r6, r5
 8018d6e:	fb05 2303 	mla	r3, r5, r3, r2
 8018d72:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018d76:	1b2d      	subs	r5, r5, r4
 8018d78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018d7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018d80:	4418      	add	r0, r3
 8018d82:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8018d86:	1982      	adds	r2, r0, r6
 8018d88:	1b1b      	subs	r3, r3, r4
 8018d8a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018d8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018d90:	4290      	cmp	r0, r2
 8018d92:	d254      	bcs.n	8018e3e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8018d94:	eb00 0a04 	add.w	sl, r0, r4
 8018d98:	4550      	cmp	r0, sl
 8018d9a:	d24c      	bcs.n	8018e36 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8018d9c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018da0:	fb1e e101 	smlabb	r1, lr, r1, lr
 8018da4:	eb08 0c01 	add.w	ip, r8, r1
 8018da8:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8018dac:	b173      	cbz	r3, 8018dcc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8018dae:	2bff      	cmp	r3, #255	@ 0xff
 8018db0:	f818 b001 	ldrb.w	fp, [r8, r1]
 8018db4:	d10c      	bne.n	8018dd0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8018db6:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8018dba:	d109      	bne.n	8018dd0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8018dbc:	f880 b000 	strb.w	fp, [r0]
 8018dc0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8018dc4:	7043      	strb	r3, [r0, #1]
 8018dc6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8018dca:	7083      	strb	r3, [r0, #2]
 8018dcc:	3003      	adds	r0, #3
 8018dce:	e7e3      	b.n	8018d98 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8018dd0:	fb09 f103 	mul.w	r1, r9, r3
 8018dd4:	1c4b      	adds	r3, r1, #1
 8018dd6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8018dda:	7801      	ldrb	r1, [r0, #0]
 8018ddc:	121b      	asrs	r3, r3, #8
 8018dde:	b29e      	uxth	r6, r3
 8018de0:	43db      	mvns	r3, r3
 8018de2:	fb1b fb06 	smulbb	fp, fp, r6
 8018de6:	b2db      	uxtb	r3, r3
 8018de8:	fb01 b103 	mla	r1, r1, r3, fp
 8018dec:	b289      	uxth	r1, r1
 8018dee:	f101 0b01 	add.w	fp, r1, #1
 8018df2:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8018df6:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018dfa:	fb1b fb03 	smulbb	fp, fp, r3
 8018dfe:	1209      	asrs	r1, r1, #8
 8018e00:	7001      	strb	r1, [r0, #0]
 8018e02:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8018e06:	fb01 b106 	mla	r1, r1, r6, fp
 8018e0a:	b289      	uxth	r1, r1
 8018e0c:	f101 0b01 	add.w	fp, r1, #1
 8018e10:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8018e14:	1209      	asrs	r1, r1, #8
 8018e16:	7041      	strb	r1, [r0, #1]
 8018e18:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8018e1c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8018e20:	fb1c f303 	smulbb	r3, ip, r3
 8018e24:	fb01 3606 	mla	r6, r1, r6, r3
 8018e28:	b2b6      	uxth	r6, r6
 8018e2a:	1c73      	adds	r3, r6, #1
 8018e2c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8018e30:	1236      	asrs	r6, r6, #8
 8018e32:	7086      	strb	r6, [r0, #2]
 8018e34:	e7ca      	b.n	8018dcc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8018e36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018e38:	4428      	add	r0, r5
 8018e3a:	441f      	add	r7, r3
 8018e3c:	e7a8      	b.n	8018d90 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8018e3e:	4b03      	ldr	r3, [pc, #12]	@ (8018e4c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8018e40:	6818      	ldr	r0, [r3, #0]
 8018e42:	6803      	ldr	r3, [r0, #0]
 8018e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018e46:	4798      	blx	r3
 8018e48:	e782      	b.n	8018d50 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8018e4a:	bf00      	nop
 8018e4c:	24025140 	.word	0x24025140
 8018e50:	2402513a 	.word	0x2402513a

08018e54 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8018e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e58:	b091      	sub	sp, #68	@ 0x44
 8018e5a:	4680      	mov	r8, r0
 8018e5c:	460e      	mov	r6, r1
 8018e5e:	6810      	ldr	r0, [r2, #0]
 8018e60:	6851      	ldr	r1, [r2, #4]
 8018e62:	ad0c      	add	r5, sp, #48	@ 0x30
 8018e64:	4614      	mov	r4, r2
 8018e66:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 8018e6a:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8019004 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8018e6e:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8019008 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8018e72:	c503      	stmia	r5!, {r0, r1}
 8018e74:	6818      	ldr	r0, [r3, #0]
 8018e76:	ad0e      	add	r5, sp, #56	@ 0x38
 8018e78:	6859      	ldr	r1, [r3, #4]
 8018e7a:	c503      	stmia	r5!, {r0, r1}
 8018e7c:	a80c      	add	r0, sp, #48	@ 0x30
 8018e7e:	f7f9 fc0d 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018e82:	4621      	mov	r1, r4
 8018e84:	a80e      	add	r0, sp, #56	@ 0x38
 8018e86:	f7f9 fc31 	bl	80126ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018e8a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8018e8e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8018e92:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8018e96:	f8d9 0000 	ldr.w	r0, [r9]
 8018e9a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018e9e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8018ea2:	eb08 0401 	add.w	r4, r8, r1
 8018ea6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8018eaa:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8018eae:	440a      	add	r2, r1
 8018eb0:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8018eb4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8018eb8:	4413      	add	r3, r2
 8018eba:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8018ebe:	6803      	ldr	r3, [r0, #0]
 8018ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018ec2:	4798      	blx	r3
 8018ec4:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8018ec8:	f8d9 0000 	ldr.w	r0, [r9]
 8018ecc:	d022      	beq.n	8018f14 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8018ece:	2200      	movs	r2, #0
 8018ed0:	f04f 0c01 	mov.w	ip, #1
 8018ed4:	6801      	ldr	r1, [r0, #0]
 8018ed6:	b2ad      	uxth	r5, r5
 8018ed8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8018edc:	e9cd c208 	strd	ip, r2, [sp, #32]
 8018ee0:	f04f 0c0b 	mov.w	ip, #11
 8018ee4:	f8cd c01c 	str.w	ip, [sp, #28]
 8018ee8:	f8ba c000 	ldrh.w	ip, [sl]
 8018eec:	9704      	str	r7, [sp, #16]
 8018eee:	9502      	str	r5, [sp, #8]
 8018ef0:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8018ef4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8018ef8:	9203      	str	r2, [sp, #12]
 8018efa:	fa1f f288 	uxth.w	r2, r8
 8018efe:	9201      	str	r2, [sp, #4]
 8018f00:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8018f04:	9200      	str	r2, [sp, #0]
 8018f06:	4632      	mov	r2, r6
 8018f08:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8018f0a:	4621      	mov	r1, r4
 8018f0c:	47a8      	blx	r5
 8018f0e:	b011      	add	sp, #68	@ 0x44
 8018f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f14:	6803      	ldr	r3, [r0, #0]
 8018f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018f18:	4798      	blx	r3
 8018f1a:	f8ba 2000 	ldrh.w	r2, [sl]
 8018f1e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8018f22:	f04f 0e03 	mov.w	lr, #3
 8018f26:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8018f2a:	4355      	muls	r5, r2
 8018f2c:	fa1f fc87 	uxth.w	ip, r7
 8018f30:	fb02 1303 	mla	r3, r2, r3, r1
 8018f34:	eba2 0208 	sub.w	r2, r2, r8
 8018f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018f3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018f40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018f44:	4418      	add	r0, r3
 8018f46:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018f48:	1943      	adds	r3, r0, r5
 8018f4a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8018f4e:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 8018f52:	eba2 0208 	sub.w	r2, r2, r8
 8018f56:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018f5a:	b2ad      	uxth	r5, r5
 8018f5c:	4298      	cmp	r0, r3
 8018f5e:	d24a      	bcs.n	8018ff6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8018f60:	eb00 0908 	add.w	r9, r0, r8
 8018f64:	4621      	mov	r1, r4
 8018f66:	4548      	cmp	r0, r9
 8018f68:	460c      	mov	r4, r1
 8018f6a:	d240      	bcs.n	8018fee <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8018f6c:	f04f 0a04 	mov.w	sl, #4
 8018f70:	7824      	ldrb	r4, [r4, #0]
 8018f72:	2fff      	cmp	r7, #255	@ 0xff
 8018f74:	f101 0101 	add.w	r1, r1, #1
 8018f78:	fb1e a404 	smlabb	r4, lr, r4, sl
 8018f7c:	eb06 0a04 	add.w	sl, r6, r4
 8018f80:	f816 b004 	ldrb.w	fp, [r6, r4]
 8018f84:	d02b      	beq.n	8018fde <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8018f86:	7804      	ldrb	r4, [r0, #0]
 8018f88:	fb14 f405 	smulbb	r4, r4, r5
 8018f8c:	fb0b 440c 	mla	r4, fp, ip, r4
 8018f90:	b2a4      	uxth	r4, r4
 8018f92:	f104 0b01 	add.w	fp, r4, #1
 8018f96:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8018f9a:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018f9e:	fb1b fb05 	smulbb	fp, fp, r5
 8018fa2:	1224      	asrs	r4, r4, #8
 8018fa4:	7004      	strb	r4, [r0, #0]
 8018fa6:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8018faa:	fb04 b40c 	mla	r4, r4, ip, fp
 8018fae:	b2a4      	uxth	r4, r4
 8018fb0:	f104 0b01 	add.w	fp, r4, #1
 8018fb4:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8018fb8:	1224      	asrs	r4, r4, #8
 8018fba:	7044      	strb	r4, [r0, #1]
 8018fbc:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8018fc0:	f890 a002 	ldrb.w	sl, [r0, #2]
 8018fc4:	fb1a fa05 	smulbb	sl, sl, r5
 8018fc8:	fb04 a40c 	mla	r4, r4, ip, sl
 8018fcc:	b2a4      	uxth	r4, r4
 8018fce:	f104 0a01 	add.w	sl, r4, #1
 8018fd2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8018fd6:	1224      	asrs	r4, r4, #8
 8018fd8:	7084      	strb	r4, [r0, #2]
 8018fda:	3003      	adds	r0, #3
 8018fdc:	e7c3      	b.n	8018f66 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8018fde:	f880 b000 	strb.w	fp, [r0]
 8018fe2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8018fe6:	7044      	strb	r4, [r0, #1]
 8018fe8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8018fec:	e7f4      	b.n	8018fd8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8018fee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8018ff0:	4420      	add	r0, r4
 8018ff2:	188c      	adds	r4, r1, r2
 8018ff4:	e7b2      	b.n	8018f5c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8018ff6:	4b03      	ldr	r3, [pc, #12]	@ (8019004 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8018ff8:	6818      	ldr	r0, [r3, #0]
 8018ffa:	6803      	ldr	r3, [r0, #0]
 8018ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ffe:	4798      	blx	r3
 8019000:	e785      	b.n	8018f0e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8019002:	bf00      	nop
 8019004:	24025140 	.word	0x24025140
 8019008:	2402513a 	.word	0x2402513a

0801900c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801900c:	b4f0      	push	{r4, r5, r6, r7}
 801900e:	460c      	mov	r4, r1
 8019010:	4611      	mov	r1, r2
 8019012:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8019016:	461a      	mov	r2, r3
 8019018:	780f      	ldrb	r7, [r1, #0]
 801901a:	9b04      	ldr	r3, [sp, #16]
 801901c:	784e      	ldrb	r6, [r1, #1]
 801901e:	b11f      	cbz	r7, 8019028 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 8019020:	2f01      	cmp	r7, #1
 8019022:	d01d      	beq.n	8019060 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8019024:	bcf0      	pop	{r4, r5, r6, r7}
 8019026:	4770      	bx	lr
 8019028:	2e03      	cmp	r6, #3
 801902a:	d8fb      	bhi.n	8019024 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801902c:	e8df f006 	tbb	[pc, r6]
 8019030:	16140702 	.word	0x16140702
 8019034:	9504      	str	r5, [sp, #16]
 8019036:	4620      	mov	r0, r4
 8019038:	bcf0      	pop	{r4, r5, r6, r7}
 801903a:	f7ff be33 	b.w	8018ca4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801903e:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8019040:	2800      	cmp	r0, #0
 8019042:	d0ef      	beq.n	8019024 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8019044:	6806      	ldr	r6, [r0, #0]
 8019046:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801904a:	68f5      	ldr	r5, [r6, #12]
 801904c:	4613      	mov	r3, r2
 801904e:	46ac      	mov	ip, r5
 8019050:	460a      	mov	r2, r1
 8019052:	4621      	mov	r1, r4
 8019054:	bcf0      	pop	{r4, r5, r6, r7}
 8019056:	4760      	bx	ip
 8019058:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801905a:	e7f1      	b.n	8019040 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801905c:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801905e:	e7ef      	b.n	8019040 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8019060:	2e03      	cmp	r6, #3
 8019062:	d8df      	bhi.n	8019024 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8019064:	e8df f006 	tbb	[pc, r6]
 8019068:	110f0702 	.word	0x110f0702
 801906c:	9504      	str	r5, [sp, #16]
 801906e:	4620      	mov	r0, r4
 8019070:	bcf0      	pop	{r4, r5, r6, r7}
 8019072:	f7ff beef 	b.w	8018e54 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8019076:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8019078:	2800      	cmp	r0, #0
 801907a:	d0d3      	beq.n	8019024 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801907c:	6806      	ldr	r6, [r0, #0]
 801907e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8019082:	68b5      	ldr	r5, [r6, #8]
 8019084:	e7e2      	b.n	801904c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8019086:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8019088:	e7f6      	b.n	8019078 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801908a:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801908c:	e7f4      	b.n	8019078 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

08019090 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8019090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019094:	4605      	mov	r5, r0
 8019096:	b08f      	sub	sp, #60	@ 0x3c
 8019098:	460c      	mov	r4, r1
 801909a:	461f      	mov	r7, r3
 801909c:	2b00      	cmp	r3, #0
 801909e:	d052      	beq.n	8019146 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80190a0:	6808      	ldr	r0, [r1, #0]
 80190a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80190a4:	6849      	ldr	r1, [r1, #4]
 80190a6:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 8019270 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 80190aa:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 8019274 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 80190ae:	c303      	stmia	r3!, {r0, r1}
 80190b0:	6810      	ldr	r0, [r2, #0]
 80190b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80190b4:	6851      	ldr	r1, [r2, #4]
 80190b6:	c303      	stmia	r3!, {r0, r1}
 80190b8:	a80a      	add	r0, sp, #40	@ 0x28
 80190ba:	f7f9 faef 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80190be:	4621      	mov	r1, r4
 80190c0:	a80c      	add	r0, sp, #48	@ 0x30
 80190c2:	f7f9 fb13 	bl	80126ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80190c6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80190ca:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80190ce:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80190d2:	f8d8 0000 	ldr.w	r0, [r8]
 80190d6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80190da:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 80190de:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 80190e2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 80190e6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 80190ea:	440a      	add	r2, r1
 80190ec:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80190f0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 80190f4:	4413      	add	r3, r2
 80190f6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80190fa:	6803      	ldr	r3, [r0, #0]
 80190fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80190fe:	4798      	blx	r3
 8019100:	2fff      	cmp	r7, #255	@ 0xff
 8019102:	d023      	beq.n	801914c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8019104:	f010 0f04 	tst.w	r0, #4
 8019108:	f8d8 0000 	ldr.w	r0, [r8]
 801910c:	d021      	beq.n	8019152 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801910e:	2100      	movs	r1, #0
 8019110:	f04f 0e01 	mov.w	lr, #1
 8019114:	f8d0 c000 	ldr.w	ip, [r0]
 8019118:	b2a4      	uxth	r4, r4
 801911a:	9106      	str	r1, [sp, #24]
 801911c:	b2b6      	uxth	r6, r6
 801911e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8019122:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8019126:	e9cd e107 	strd	lr, r1, [sp, #28]
 801912a:	f8b9 e000 	ldrh.w	lr, [r9]
 801912e:	9703      	str	r7, [sp, #12]
 8019130:	9401      	str	r4, [sp, #4]
 8019132:	9600      	str	r6, [sp, #0]
 8019134:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8019138:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801913c:	9102      	str	r1, [sp, #8]
 801913e:	4629      	mov	r1, r5
 8019140:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 8019144:	47a0      	blx	r4
 8019146:	b00f      	add	sp, #60	@ 0x3c
 8019148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801914c:	f010 0f01 	tst.w	r0, #1
 8019150:	e7da      	b.n	8019108 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8019152:	6803      	ldr	r3, [r0, #0]
 8019154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019156:	4798      	blx	r3
 8019158:	f8b9 1000 	ldrh.w	r1, [r9]
 801915c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8019160:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8019164:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8019168:	434c      	muls	r4, r1
 801916a:	2fff      	cmp	r7, #255	@ 0xff
 801916c:	fb01 2303 	mla	r3, r1, r3, r2
 8019170:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019174:	eba1 0106 	sub.w	r1, r1, r6
 8019178:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801917c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019180:	4418      	add	r0, r3
 8019182:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8019186:	eba3 0606 	sub.w	r6, r3, r6
 801918a:	4404      	add	r4, r0
 801918c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8019190:	d04a      	beq.n	8019228 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8019192:	43fa      	mvns	r2, r7
 8019194:	b2bb      	uxth	r3, r7
 8019196:	b2d7      	uxtb	r7, r2
 8019198:	42a0      	cmp	r0, r4
 801919a:	d263      	bcs.n	8019264 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801919c:	eb00 0e0c 	add.w	lr, r0, ip
 80191a0:	4586      	cmp	lr, r0
 80191a2:	f100 0803 	add.w	r8, r0, #3
 80191a6:	d93a      	bls.n	801921e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80191a8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80191ac:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80191b0:	00d0      	lsls	r0, r2, #3
 80191b2:	fb19 f907 	smulbb	r9, r9, r7
 80191b6:	b2c0      	uxtb	r0, r0
 80191b8:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80191bc:	fb00 9003 	mla	r0, r0, r3, r9
 80191c0:	b280      	uxth	r0, r0
 80191c2:	f100 0901 	add.w	r9, r0, #1
 80191c6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80191ca:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 80191ce:	fb19 f907 	smulbb	r9, r9, r7
 80191d2:	1200      	asrs	r0, r0, #8
 80191d4:	f808 0c03 	strb.w	r0, [r8, #-3]
 80191d8:	10d0      	asrs	r0, r2, #3
 80191da:	1212      	asrs	r2, r2, #8
 80191dc:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80191e0:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80191e4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80191e8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80191ec:	fb00 9003 	mla	r0, r0, r3, r9
 80191f0:	b280      	uxth	r0, r0
 80191f2:	f100 0901 	add.w	r9, r0, #1
 80191f6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80191fa:	1200      	asrs	r0, r0, #8
 80191fc:	f808 0c02 	strb.w	r0, [r8, #-2]
 8019200:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8019204:	fb10 f007 	smulbb	r0, r0, r7
 8019208:	fb02 0203 	mla	r2, r2, r3, r0
 801920c:	b292      	uxth	r2, r2
 801920e:	1c50      	adds	r0, r2, #1
 8019210:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019214:	4640      	mov	r0, r8
 8019216:	1212      	asrs	r2, r2, #8
 8019218:	f808 2c01 	strb.w	r2, [r8, #-1]
 801921c:	e7c0      	b.n	80191a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801921e:	4408      	add	r0, r1
 8019220:	4435      	add	r5, r6
 8019222:	e7b9      	b.n	8019198 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8019224:	4408      	add	r0, r1
 8019226:	4435      	add	r5, r6
 8019228:	42a0      	cmp	r0, r4
 801922a:	d21b      	bcs.n	8019264 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801922c:	eb00 070c 	add.w	r7, r0, ip
 8019230:	42b8      	cmp	r0, r7
 8019232:	d2f7      	bcs.n	8019224 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8019234:	f835 3b02 	ldrh.w	r3, [r5], #2
 8019238:	3003      	adds	r0, #3
 801923a:	00da      	lsls	r2, r3, #3
 801923c:	b2d2      	uxtb	r2, r2
 801923e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019242:	f800 2c03 	strb.w	r2, [r0, #-3]
 8019246:	10da      	asrs	r2, r3, #3
 8019248:	121b      	asrs	r3, r3, #8
 801924a:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801924e:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8019252:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8019256:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801925a:	f800 2c02 	strb.w	r2, [r0, #-2]
 801925e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8019262:	e7e5      	b.n	8019230 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8019264:	4b02      	ldr	r3, [pc, #8]	@ (8019270 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8019266:	6818      	ldr	r0, [r3, #0]
 8019268:	6803      	ldr	r3, [r0, #0]
 801926a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801926c:	4798      	blx	r3
 801926e:	e76a      	b.n	8019146 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8019270:	24025140 	.word	0x24025140
 8019274:	2402513a 	.word	0x2402513a

08019278 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8019278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801927c:	b08a      	sub	sp, #40	@ 0x28
 801927e:	460d      	mov	r5, r1
 8019280:	4604      	mov	r4, r0
 8019282:	461e      	mov	r6, r3
 8019284:	6808      	ldr	r0, [r1, #0]
 8019286:	ab06      	add	r3, sp, #24
 8019288:	6849      	ldr	r1, [r1, #4]
 801928a:	4f5d      	ldr	r7, [pc, #372]	@ (8019400 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801928c:	c303      	stmia	r3!, {r0, r1}
 801928e:	6810      	ldr	r0, [r2, #0]
 8019290:	ab08      	add	r3, sp, #32
 8019292:	6851      	ldr	r1, [r2, #4]
 8019294:	c303      	stmia	r3!, {r0, r1}
 8019296:	a806      	add	r0, sp, #24
 8019298:	f7f9 fa00 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801929c:	4629      	mov	r1, r5
 801929e:	a808      	add	r0, sp, #32
 80192a0:	f7f9 fa24 	bl	80126ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80192a4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80192a8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80192ac:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80192b0:	6838      	ldr	r0, [r7, #0]
 80192b2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80192b6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80192ba:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 80192be:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80192c2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80192c6:	440a      	add	r2, r1
 80192c8:	f8ad 2020 	strh.w	r2, [sp, #32]
 80192cc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80192d0:	4413      	add	r3, r2
 80192d2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80192d6:	6803      	ldr	r3, [r0, #0]
 80192d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192da:	4798      	blx	r3
 80192dc:	2eff      	cmp	r6, #255	@ 0xff
 80192de:	d119      	bne.n	8019314 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80192e0:	f010 0f20 	tst.w	r0, #32
 80192e4:	6838      	ldr	r0, [r7, #0]
 80192e6:	d018      	beq.n	801931a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80192e8:	b2ad      	uxth	r5, r5
 80192ea:	2700      	movs	r7, #0
 80192ec:	6801      	ldr	r1, [r0, #0]
 80192ee:	9501      	str	r5, [sp, #4]
 80192f0:	fa1f f588 	uxth.w	r5, r8
 80192f4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80192f8:	9500      	str	r5, [sp, #0]
 80192fa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80192fe:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8019302:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8019306:	9602      	str	r6, [sp, #8]
 8019308:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801930a:	4621      	mov	r1, r4
 801930c:	47a8      	blx	r5
 801930e:	b00a      	add	sp, #40	@ 0x28
 8019310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019314:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8019318:	e7e4      	b.n	80192e4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801931a:	6803      	ldr	r3, [r0, #0]
 801931c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801931e:	4798      	blx	r3
 8019320:	4b38      	ldr	r3, [pc, #224]	@ (8019404 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8019322:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019326:	f8b3 c000 	ldrh.w	ip, [r3]
 801932a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801932e:	fb0c f505 	mul.w	r5, ip, r5
 8019332:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8019336:	fb0c 2303 	mla	r3, ip, r3, r2
 801933a:	ebac 0c08 	sub.w	ip, ip, r8
 801933e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019342:	ebae 0e08 	sub.w	lr, lr, r8
 8019346:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801934a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801934e:	4418      	add	r0, r3
 8019350:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8019354:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8019358:	4405      	add	r5, r0
 801935a:	42a8      	cmp	r0, r5
 801935c:	d24a      	bcs.n	80193f4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801935e:	eb00 0803 	add.w	r8, r0, r3
 8019362:	4540      	cmp	r0, r8
 8019364:	d243      	bcs.n	80193ee <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8019366:	78e2      	ldrb	r2, [r4, #3]
 8019368:	b15a      	cbz	r2, 8019382 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801936a:	2aff      	cmp	r2, #255	@ 0xff
 801936c:	f894 9000 	ldrb.w	r9, [r4]
 8019370:	d10a      	bne.n	8019388 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8019372:	2eff      	cmp	r6, #255	@ 0xff
 8019374:	d108      	bne.n	8019388 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8019376:	f880 9000 	strb.w	r9, [r0]
 801937a:	7862      	ldrb	r2, [r4, #1]
 801937c:	7042      	strb	r2, [r0, #1]
 801937e:	78a2      	ldrb	r2, [r4, #2]
 8019380:	7082      	strb	r2, [r0, #2]
 8019382:	3003      	adds	r0, #3
 8019384:	3404      	adds	r4, #4
 8019386:	e7ec      	b.n	8019362 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8019388:	4372      	muls	r2, r6
 801938a:	1c51      	adds	r1, r2, #1
 801938c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8019390:	1209      	asrs	r1, r1, #8
 8019392:	fa1f fa81 	uxth.w	sl, r1
 8019396:	43c9      	mvns	r1, r1
 8019398:	fb19 f90a 	smulbb	r9, r9, sl
 801939c:	b2ca      	uxtb	r2, r1
 801939e:	7801      	ldrb	r1, [r0, #0]
 80193a0:	fb01 9902 	mla	r9, r1, r2, r9
 80193a4:	fa1f f989 	uxth.w	r9, r9
 80193a8:	f109 0101 	add.w	r1, r9, #1
 80193ac:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80193b0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80193b4:	f880 9000 	strb.w	r9, [r0]
 80193b8:	f890 9001 	ldrb.w	r9, [r0, #1]
 80193bc:	7861      	ldrb	r1, [r4, #1]
 80193be:	fb19 f902 	smulbb	r9, r9, r2
 80193c2:	fb01 910a 	mla	r1, r1, sl, r9
 80193c6:	b289      	uxth	r1, r1
 80193c8:	f101 0901 	add.w	r9, r1, #1
 80193cc:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 80193d0:	1209      	asrs	r1, r1, #8
 80193d2:	7041      	strb	r1, [r0, #1]
 80193d4:	7881      	ldrb	r1, [r0, #2]
 80193d6:	f894 9002 	ldrb.w	r9, [r4, #2]
 80193da:	fb11 f202 	smulbb	r2, r1, r2
 80193de:	fb09 220a 	mla	r2, r9, sl, r2
 80193e2:	b292      	uxth	r2, r2
 80193e4:	1c51      	adds	r1, r2, #1
 80193e6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80193ea:	1212      	asrs	r2, r2, #8
 80193ec:	e7c8      	b.n	8019380 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 80193ee:	4460      	add	r0, ip
 80193f0:	4474      	add	r4, lr
 80193f2:	e7b2      	b.n	801935a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 80193f4:	6838      	ldr	r0, [r7, #0]
 80193f6:	6803      	ldr	r3, [r0, #0]
 80193f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80193fa:	4798      	blx	r3
 80193fc:	e787      	b.n	801930e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80193fe:	bf00      	nop
 8019400:	24025140 	.word	0x24025140
 8019404:	2402513a 	.word	0x2402513a

08019408 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8019408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801940c:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8019410:	4607      	mov	r7, r0
 8019412:	460c      	mov	r4, r1
 8019414:	4692      	mov	sl, r2
 8019416:	4699      	mov	r9, r3
 8019418:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801941a:	b31d      	cbz	r5, 8019464 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801941c:	4608      	mov	r0, r1
 801941e:	f7fc fb81 	bl	8015b24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019422:	4680      	mov	r8, r0
 8019424:	4620      	mov	r0, r4
 8019426:	f7fc fbb1 	bl	8015b8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801942a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801942e:	4620      	mov	r0, r4
 8019430:	f8ad a008 	strh.w	sl, [sp, #8]
 8019434:	f8ad 900a 	strh.w	r9, [sp, #10]
 8019438:	f8ad 800c 	strh.w	r8, [sp, #12]
 801943c:	f7fc fcb0 	bl	8015da0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019440:	280b      	cmp	r0, #11
 8019442:	d80f      	bhi.n	8019464 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8019444:	e8df f000 	tbb	[pc, r0]
 8019448:	0e062a21 	.word	0x0e062a21
 801944c:	0e0e0e0e 	.word	0x0e0e0e0e
 8019450:	110e0e0e 	.word	0x110e0e0e
 8019454:	4620      	mov	r0, r4
 8019456:	f7fc fc1f 	bl	8015c98 <_ZNK8touchgfx6Bitmap7getDataEv>
 801945a:	462b      	mov	r3, r5
 801945c:	4632      	mov	r2, r6
 801945e:	a902      	add	r1, sp, #8
 8019460:	f7ff ff0a 	bl	8019278 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019464:	b004      	add	sp, #16
 8019466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801946a:	4620      	mov	r0, r4
 801946c:	f7fc fc14 	bl	8015c98 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019470:	4680      	mov	r8, r0
 8019472:	4620      	mov	r0, r4
 8019474:	f7fc fc40 	bl	8015cf8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8019478:	ab02      	add	r3, sp, #8
 801947a:	4602      	mov	r2, r0
 801947c:	4641      	mov	r1, r8
 801947e:	4638      	mov	r0, r7
 8019480:	e9cd 6500 	strd	r6, r5, [sp]
 8019484:	f7ff fdc2 	bl	801900c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8019488:	e7ec      	b.n	8019464 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801948a:	4620      	mov	r0, r4
 801948c:	f7fc fc04 	bl	8015c98 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019490:	462b      	mov	r3, r5
 8019492:	4632      	mov	r2, r6
 8019494:	a902      	add	r1, sp, #8
 8019496:	f7ff fdfb 	bl	8019090 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801949a:	e7e3      	b.n	8019464 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801949c:	683b      	ldr	r3, [r7, #0]
 801949e:	4620      	mov	r0, r4
 80194a0:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80194a4:	f7fc fbf8 	bl	8015c98 <_ZNK8touchgfx6Bitmap7getDataEv>
 80194a8:	2300      	movs	r3, #0
 80194aa:	4601      	mov	r1, r0
 80194ac:	aa02      	add	r2, sp, #8
 80194ae:	4638      	mov	r0, r7
 80194b0:	e9cd 5300 	strd	r5, r3, [sp]
 80194b4:	4633      	mov	r3, r6
 80194b6:	47c0      	blx	r8
 80194b8:	e7d4      	b.n	8019464 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

080194ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80194ba:	b4f0      	push	{r4, r5, r6, r7}
 80194bc:	4616      	mov	r6, r2
 80194be:	461c      	mov	r4, r3
 80194c0:	460d      	mov	r5, r1
 80194c2:	9a04      	ldr	r2, [sp, #16]
 80194c4:	2e01      	cmp	r6, #1
 80194c6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80194ca:	d00e      	beq.n	80194ea <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 80194cc:	d303      	bcc.n	80194d6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 80194ce:	2e02      	cmp	r6, #2
 80194d0:	d006      	beq.n	80194e0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 80194d2:	bcf0      	pop	{r4, r5, r6, r7}
 80194d4:	4770      	bx	lr
 80194d6:	4621      	mov	r1, r4
 80194d8:	4628      	mov	r0, r5
 80194da:	bcf0      	pop	{r4, r5, r6, r7}
 80194dc:	f7ff bdd8 	b.w	8019090 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80194e0:	4621      	mov	r1, r4
 80194e2:	4628      	mov	r0, r5
 80194e4:	bcf0      	pop	{r4, r5, r6, r7}
 80194e6:	f7ff bec7 	b.w	8019278 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80194ea:	6805      	ldr	r5, [r0, #0]
 80194ec:	2600      	movs	r6, #0
 80194ee:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80194f2:	68ed      	ldr	r5, [r5, #12]
 80194f4:	4613      	mov	r3, r2
 80194f6:	4622      	mov	r2, r4
 80194f8:	46ac      	mov	ip, r5
 80194fa:	bcf0      	pop	{r4, r5, r6, r7}
 80194fc:	4760      	bx	ip
	...

08019500 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8019500:	b160      	cbz	r0, 801951c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8019502:	2903      	cmp	r1, #3
 8019504:	d818      	bhi.n	8019538 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8019506:	e8df f001 	tbb	[pc, r1]
 801950a:	1902      	.short	0x1902
 801950c:	1b06      	.short	0x1b06
 801950e:	4b0e      	ldr	r3, [pc, #56]	@ (8019548 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8019510:	8818      	ldrh	r0, [r3, #0]
 8019512:	4240      	negs	r0, r0
 8019514:	4770      	bx	lr
 8019516:	4b0c      	ldr	r3, [pc, #48]	@ (8019548 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8019518:	8818      	ldrh	r0, [r3, #0]
 801951a:	4770      	bx	lr
 801951c:	2903      	cmp	r1, #3
 801951e:	d80b      	bhi.n	8019538 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8019520:	a301      	add	r3, pc, #4	@ (adr r3, 8019528 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8019522:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8019526:	bf00      	nop
 8019528:	0801953d 	.word	0x0801953d
 801952c:	08019517 	.word	0x08019517
 8019530:	08019541 	.word	0x08019541
 8019534:	0801950f 	.word	0x0801950f
 8019538:	2000      	movs	r0, #0
 801953a:	4770      	bx	lr
 801953c:	2001      	movs	r0, #1
 801953e:	4770      	bx	lr
 8019540:	f04f 30ff 	mov.w	r0, #4294967295
 8019544:	4770      	bx	lr
 8019546:	bf00      	nop
 8019548:	2402513a 	.word	0x2402513a

0801954c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801954c:	b160      	cbz	r0, 8019568 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801954e:	2903      	cmp	r1, #3
 8019550:	d818      	bhi.n	8019584 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8019552:	e8df f001 	tbb	[pc, r1]
 8019556:	0219      	.short	0x0219
 8019558:	051b      	.short	0x051b
 801955a:	4b0e      	ldr	r3, [pc, #56]	@ (8019594 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801955c:	8818      	ldrh	r0, [r3, #0]
 801955e:	4770      	bx	lr
 8019560:	4b0c      	ldr	r3, [pc, #48]	@ (8019594 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8019562:	8818      	ldrh	r0, [r3, #0]
 8019564:	4240      	negs	r0, r0
 8019566:	4770      	bx	lr
 8019568:	2903      	cmp	r1, #3
 801956a:	d80b      	bhi.n	8019584 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801956c:	a301      	add	r3, pc, #4	@ (adr r3, 8019574 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801956e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8019572:	bf00      	nop
 8019574:	0801955b 	.word	0x0801955b
 8019578:	0801958d 	.word	0x0801958d
 801957c:	08019561 	.word	0x08019561
 8019580:	08019589 	.word	0x08019589
 8019584:	2000      	movs	r0, #0
 8019586:	4770      	bx	lr
 8019588:	2001      	movs	r0, #1
 801958a:	4770      	bx	lr
 801958c:	f04f 30ff 	mov.w	r0, #4294967295
 8019590:	4770      	bx	lr
 8019592:	bf00      	nop
 8019594:	2402513a 	.word	0x2402513a

08019598 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8019598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801959c:	b097      	sub	sp, #92	@ 0x5c
 801959e:	910b      	str	r1, [sp, #44]	@ 0x2c
 80195a0:	a912      	add	r1, sp, #72	@ 0x48
 80195a2:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 80195a6:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 80195aa:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 80195ae:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 80195b2:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 80195b6:	e881 000c 	stmia.w	r1, {r2, r3}
 80195ba:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 80195be:	930a      	str	r3, [sp, #40]	@ 0x28
 80195c0:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 80195c4:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 80195c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80195ca:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 80195ce:	798d      	ldrb	r5, [r1, #6]
 80195d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80195d2:	7b4b      	ldrb	r3, [r1, #13]
 80195d4:	0158      	lsls	r0, r3, #5
 80195d6:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80195da:	4328      	orrs	r0, r5
 80195dc:	9009      	str	r0, [sp, #36]	@ 0x24
 80195de:	f000 817c 	beq.w	80198da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80195e2:	011b      	lsls	r3, r3, #4
 80195e4:	79c8      	ldrb	r0, [r1, #7]
 80195e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80195ea:	4303      	orrs	r3, r0
 80195ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80195ee:	f000 8174 	beq.w	80198da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80195f2:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80195f6:	b29b      	uxth	r3, r3
 80195f8:	2f00      	cmp	r7, #0
 80195fa:	f000 8116 	beq.w	801982a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 80195fe:	1aff      	subs	r7, r7, r3
 8019600:	b2bf      	uxth	r7, r7
 8019602:	043b      	lsls	r3, r7, #16
 8019604:	d502      	bpl.n	801960c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8019606:	1bf6      	subs	r6, r6, r7
 8019608:	2700      	movs	r7, #0
 801960a:	b236      	sxth	r6, r6
 801960c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8019610:	a812      	add	r0, sp, #72	@ 0x48
 8019612:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8019616:	428e      	cmp	r6, r1
 8019618:	b28b      	uxth	r3, r1
 801961a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801961e:	bfbf      	itttt	lt
 8019620:	18ff      	addlt	r7, r7, r3
 8019622:	1bbe      	sublt	r6, r7, r6
 8019624:	b2b7      	uxthlt	r7, r6
 8019626:	460e      	movlt	r6, r1
 8019628:	8891      	ldrh	r1, [r2, #4]
 801962a:	440b      	add	r3, r1
 801962c:	4631      	mov	r1, r6
 801962e:	b21b      	sxth	r3, r3
 8019630:	9310      	str	r3, [sp, #64]	@ 0x40
 8019632:	88d3      	ldrh	r3, [r2, #6]
 8019634:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019636:	449a      	add	sl, r3
 8019638:	fa0f f38a 	sxth.w	r3, sl
 801963c:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8019640:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019642:	4bb5      	ldr	r3, [pc, #724]	@ (8019918 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8019644:	f893 b000 	ldrb.w	fp, [r3]
 8019648:	f10b 3cff 	add.w	ip, fp, #4294967295
 801964c:	f1dc 0300 	rsbs	r3, ip, #0
 8019650:	eb43 030c 	adc.w	r3, r3, ip
 8019654:	930d      	str	r3, [sp, #52]	@ 0x34
 8019656:	464b      	mov	r3, r9
 8019658:	f7f8 fe95 	bl	8012386 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801965c:	4631      	mov	r1, r6
 801965e:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 8019662:	464b      	mov	r3, r9
 8019664:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019666:	a812      	add	r0, sp, #72	@ 0x48
 8019668:	f7f8 feaa 	bl	80123c0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801966c:	a916      	add	r1, sp, #88	@ 0x58
 801966e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8019672:	a815      	add	r0, sp, #84	@ 0x54
 8019674:	f7f8 ffd0 	bl	8012618 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8019678:	f1b9 0f00 	cmp.w	r9, #0
 801967c:	f040 80d8 	bne.w	8019830 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8019680:	f1bb 0f01 	cmp.w	fp, #1
 8019684:	f040 80dc 	bne.w	8019840 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8019688:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801968a:	b153      	cbz	r3, 80196a2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801968c:	2508      	movs	r5, #8
 801968e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019690:	fb95 f3f8 	sdiv	r3, r5, r8
 8019694:	1e5d      	subs	r5, r3, #1
 8019696:	4415      	add	r5, r2
 8019698:	fb95 f5f3 	sdiv	r5, r5, r3
 801969c:	fb15 f503 	smulbb	r5, r5, r3
 80196a0:	b2ad      	uxth	r5, r5
 80196a2:	b907      	cbnz	r7, 80196a6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80196a4:	b16c      	cbz	r4, 80196c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 80196a6:	fb04 7305 	mla	r3, r4, r5, r7
 80196aa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80196ac:	ebaa 0a04 	sub.w	sl, sl, r4
 80196b0:	fb08 f303 	mul.w	r3, r8, r3
 80196b4:	fa1f fa8a 	uxth.w	sl, sl
 80196b8:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80196bc:	f003 0407 	and.w	r4, r3, #7
 80196c0:	9226      	str	r2, [sp, #152]	@ 0x98
 80196c2:	4649      	mov	r1, r9
 80196c4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80196c6:	f7ff ff1b 	bl	8019500 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 80196ca:	4683      	mov	fp, r0
 80196cc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80196ce:	f7ff ff3d 	bl	801954c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 80196d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80196d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80196d6:	4681      	mov	r9, r0
 80196d8:	1a9b      	subs	r3, r3, r2
 80196da:	459a      	cmp	sl, r3
 80196dc:	bfa8      	it	ge
 80196de:	469a      	movge	sl, r3
 80196e0:	f1ba 0f00 	cmp.w	sl, #0
 80196e4:	f340 80f9 	ble.w	80198da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80196e8:	1bf6      	subs	r6, r6, r7
 80196ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80196ec:	1b9e      	subs	r6, r3, r6
 80196ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80196f0:	429e      	cmp	r6, r3
 80196f2:	bfd4      	ite	le
 80196f4:	ebc7 0706 	rsble	r7, r7, r6
 80196f8:	ebc7 0703 	rsbgt	r7, r7, r3
 80196fc:	2f00      	cmp	r7, #0
 80196fe:	f340 80ec 	ble.w	80198da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019702:	1bed      	subs	r5, r5, r7
 8019704:	fb08 f305 	mul.w	r3, r8, r5
 8019708:	930d      	str	r3, [sp, #52]	@ 0x34
 801970a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801970c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8019710:	930e      	str	r3, [sp, #56]	@ 0x38
 8019712:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8019714:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019718:	930f      	str	r3, [sp, #60]	@ 0x3c
 801971a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801971c:	b2db      	uxtb	r3, r3
 801971e:	9310      	str	r3, [sp, #64]	@ 0x40
 8019720:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019722:	2b00      	cmp	r3, #0
 8019724:	f040 80de 	bne.w	80198e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8019728:	4b7c      	ldr	r3, [pc, #496]	@ (801991c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801972a:	6818      	ldr	r0, [r3, #0]
 801972c:	6803      	ldr	r3, [r0, #0]
 801972e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019730:	4798      	blx	r3
 8019732:	2301      	movs	r3, #1
 8019734:	4a7a      	ldr	r2, [pc, #488]	@ (8019920 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8019736:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801973a:	fb07 9b1b 	mls	fp, r7, fp, r9
 801973e:	fa03 f308 	lsl.w	r3, r3, r8
 8019742:	8811      	ldrh	r1, [r2, #0]
 8019744:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 8019748:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801974c:	3b01      	subs	r3, #1
 801974e:	fb06 bb07 	mla	fp, r6, r7, fp
 8019752:	b2db      	uxtb	r3, r3
 8019754:	930a      	str	r3, [sp, #40]	@ 0x28
 8019756:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801975a:	fb01 2303 	mla	r3, r1, r3, r2
 801975e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019762:	18c3      	adds	r3, r0, r3
 8019764:	9309      	str	r3, [sp, #36]	@ 0x24
 8019766:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8019768:	781a      	ldrb	r2, [r3, #0]
 801976a:	4122      	asrs	r2, r4
 801976c:	b2d2      	uxtb	r2, r2
 801976e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8019772:	f0c0 80d7 	bcc.w	8019924 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8019776:	46be      	mov	lr, r7
 8019778:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801977a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801977e:	f0c0 80ba 	bcc.w	80198f6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8019782:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019784:	4013      	ands	r3, r2
 8019786:	d041      	beq.n	801980c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8019788:	20ff      	movs	r0, #255	@ 0xff
 801978a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801978c:	fb90 f5f5 	sdiv	r5, r0, r5
 8019790:	436b      	muls	r3, r5
 8019792:	2bfe      	cmp	r3, #254	@ 0xfe
 8019794:	dd03      	ble.n	801979e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8019796:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019798:	4285      	cmp	r5, r0
 801979a:	f000 80a5 	beq.w	80198e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801979e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80197a0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80197a2:	fb15 f303 	smulbb	r3, r5, r3
 80197a6:	b29b      	uxth	r3, r3
 80197a8:	1c5d      	adds	r5, r3, #1
 80197aa:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80197ae:	780d      	ldrb	r5, [r1, #0]
 80197b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80197b4:	fa1f fc83 	uxth.w	ip, r3
 80197b8:	43db      	mvns	r3, r3
 80197ba:	fb10 f90c 	smulbb	r9, r0, ip
 80197be:	b2db      	uxtb	r3, r3
 80197c0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80197c2:	fb05 9503 	mla	r5, r5, r3, r9
 80197c6:	b2ad      	uxth	r5, r5
 80197c8:	f105 0901 	add.w	r9, r5, #1
 80197cc:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80197d0:	fb10 f90c 	smulbb	r9, r0, ip
 80197d4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80197d6:	122d      	asrs	r5, r5, #8
 80197d8:	fb10 fc0c 	smulbb	ip, r0, ip
 80197dc:	700d      	strb	r5, [r1, #0]
 80197de:	784d      	ldrb	r5, [r1, #1]
 80197e0:	fb05 9503 	mla	r5, r5, r3, r9
 80197e4:	b2ad      	uxth	r5, r5
 80197e6:	f105 0901 	add.w	r9, r5, #1
 80197ea:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80197ee:	122d      	asrs	r5, r5, #8
 80197f0:	704d      	strb	r5, [r1, #1]
 80197f2:	788d      	ldrb	r5, [r1, #2]
 80197f4:	fb05 cc03 	mla	ip, r5, r3, ip
 80197f8:	fa1f fc8c 	uxth.w	ip, ip
 80197fc:	f10c 0301 	add.w	r3, ip, #1
 8019800:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8019804:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019808:	f881 c002 	strb.w	ip, [r1, #2]
 801980c:	4444      	add	r4, r8
 801980e:	4431      	add	r1, r6
 8019810:	b2a4      	uxth	r4, r4
 8019812:	2c07      	cmp	r4, #7
 8019814:	bf89      	itett	hi
 8019816:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 8019818:	fa42 f208 	asrls.w	r2, r2, r8
 801981c:	2400      	movhi	r4, #0
 801981e:	785a      	ldrbhi	r2, [r3, #1]
 8019820:	bf8a      	itet	hi
 8019822:	3301      	addhi	r3, #1
 8019824:	b2d2      	uxtbls	r2, r2
 8019826:	9326      	strhi	r3, [sp, #152]	@ 0x98
 8019828:	e7a7      	b.n	801977a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801982a:	441e      	add	r6, r3
 801982c:	b236      	sxth	r6, r6
 801982e:	e6ed      	b.n	801960c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8019830:	f1b9 0f01 	cmp.w	r9, #1
 8019834:	f47f af28 	bne.w	8019688 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019838:	f1bb 0f01 	cmp.w	fp, #1
 801983c:	f47f af24 	bne.w	8019688 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019840:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801991c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8019844:	f8db 0000 	ldr.w	r0, [fp]
 8019848:	6803      	ldr	r3, [r0, #0]
 801984a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801984c:	4798      	blx	r3
 801984e:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8019852:	465a      	mov	r2, fp
 8019854:	d006      	beq.n	8019864 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8019856:	f1b8 0f04 	cmp.w	r8, #4
 801985a:	d141      	bne.n	80198e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801985c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801985e:	3300      	adds	r3, #0
 8019860:	bf18      	it	ne
 8019862:	2301      	movne	r3, #1
 8019864:	0580      	lsls	r0, r0, #22
 8019866:	d566      	bpl.n	8019936 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8019868:	f1b8 0f08 	cmp.w	r8, #8
 801986c:	d163      	bne.n	8019936 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801986e:	2b00      	cmp	r3, #0
 8019870:	bf0c      	ite	eq
 8019872:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8019876:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801987a:	2f00      	cmp	r7, #0
 801987c:	f47f af04 	bne.w	8019688 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019880:	2c00      	cmp	r4, #0
 8019882:	f47f af01 	bne.w	8019688 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019888:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801988a:	18f3      	adds	r3, r6, r3
 801988c:	4283      	cmp	r3, r0
 801988e:	f73f aefb 	bgt.w	8019688 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019892:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019894:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019896:	4403      	add	r3, r0
 8019898:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801989a:	4283      	cmp	r3, r0
 801989c:	f73f aef4 	bgt.w	8019688 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80198a0:	f1b8 0f08 	cmp.w	r8, #8
 80198a4:	6810      	ldr	r0, [r2, #0]
 80198a6:	f04f 0600 	mov.w	r6, #0
 80198aa:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 80198ae:	bf18      	it	ne
 80198b0:	3501      	addne	r5, #1
 80198b2:	6804      	ldr	r4, [r0, #0]
 80198b4:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 80198b8:	bf18      	it	ne
 80198ba:	f025 0501 	bicne.w	r5, r5, #1
 80198be:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80198c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80198c4:	bf18      	it	ne
 80198c6:	b2ad      	uxthne	r5, r5
 80198c8:	9104      	str	r1, [sp, #16]
 80198ca:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80198cc:	e9cd 5a00 	strd	r5, sl, [sp]
 80198d0:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80198d4:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80198d6:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 80198d8:	47a0      	blx	r4
 80198da:	b017      	add	sp, #92	@ 0x5c
 80198dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198e0:	2300      	movs	r3, #0
 80198e2:	e7bf      	b.n	8019864 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80198e4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80198e6:	e724      	b.n	8019732 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 80198e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80198ea:	700b      	strb	r3, [r1, #0]
 80198ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80198ee:	704b      	strb	r3, [r1, #1]
 80198f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80198f2:	708b      	strb	r3, [r1, #2]
 80198f4:	e78a      	b.n	801980c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80198f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80198f8:	b153      	cbz	r3, 8019910 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80198fa:	441c      	add	r4, r3
 80198fc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80198fe:	b2a4      	uxth	r4, r4
 8019900:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8019904:	f004 0407 	and.w	r4, r4, #7
 8019908:	781a      	ldrb	r2, [r3, #0]
 801990a:	9326      	str	r3, [sp, #152]	@ 0x98
 801990c:	4122      	asrs	r2, r4
 801990e:	b2d2      	uxtb	r2, r2
 8019910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019912:	445b      	add	r3, fp
 8019914:	9309      	str	r3, [sp, #36]	@ 0x24
 8019916:	e72a      	b.n	801976e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8019918:	24025138 	.word	0x24025138
 801991c:	24025140 	.word	0x24025140
 8019920:	2402513a 	.word	0x2402513a
 8019924:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019926:	2b00      	cmp	r3, #0
 8019928:	d1d7      	bne.n	80198da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801992a:	4b06      	ldr	r3, [pc, #24]	@ (8019944 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801992c:	6818      	ldr	r0, [r3, #0]
 801992e:	6803      	ldr	r3, [r0, #0]
 8019930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019932:	4798      	blx	r3
 8019934:	e7d1      	b.n	80198da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019936:	2b00      	cmp	r3, #0
 8019938:	f43f aea6 	beq.w	8019688 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801993c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019940:	e79b      	b.n	801987a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8019942:	bf00      	nop
 8019944:	24025140 	.word	0x24025140

08019948 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8019948:	b538      	push	{r3, r4, r5, lr}
 801994a:	4c15      	ldr	r4, [pc, #84]	@ (80199a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801994c:	4605      	mov	r5, r0
 801994e:	7823      	ldrb	r3, [r4, #0]
 8019950:	f3bf 8f5b 	dmb	ish
 8019954:	07da      	lsls	r2, r3, #31
 8019956:	d40b      	bmi.n	8019970 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8019958:	4620      	mov	r0, r4
 801995a:	f006 f8d3 	bl	801fb04 <__cxa_guard_acquire>
 801995e:	b138      	cbz	r0, 8019970 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8019960:	4620      	mov	r0, r4
 8019962:	f006 f8db 	bl	801fb1c <__cxa_guard_release>
 8019966:	4a0f      	ldr	r2, [pc, #60]	@ (80199a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8019968:	490f      	ldr	r1, [pc, #60]	@ (80199a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801996a:	4810      	ldr	r0, [pc, #64]	@ (80199ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801996c:	f006 f8c3 	bl	801faf6 <__aeabi_atexit>
 8019970:	4c0f      	ldr	r4, [pc, #60]	@ (80199b0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8019972:	7823      	ldrb	r3, [r4, #0]
 8019974:	f3bf 8f5b 	dmb	ish
 8019978:	07db      	lsls	r3, r3, #31
 801997a:	d40b      	bmi.n	8019994 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801997c:	4620      	mov	r0, r4
 801997e:	f006 f8c1 	bl	801fb04 <__cxa_guard_acquire>
 8019982:	b138      	cbz	r0, 8019994 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8019984:	4620      	mov	r0, r4
 8019986:	f006 f8c9 	bl	801fb1c <__cxa_guard_release>
 801998a:	4a06      	ldr	r2, [pc, #24]	@ (80199a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801998c:	4909      	ldr	r1, [pc, #36]	@ (80199b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801998e:	480a      	ldr	r0, [pc, #40]	@ (80199b8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8019990:	f006 f8b1 	bl	801faf6 <__aeabi_atexit>
 8019994:	4b05      	ldr	r3, [pc, #20]	@ (80199ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8019996:	616b      	str	r3, [r5, #20]
 8019998:	4b07      	ldr	r3, [pc, #28]	@ (80199b8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801999a:	61ab      	str	r3, [r5, #24]
 801999c:	bd38      	pop	{r3, r4, r5, pc}
 801999e:	bf00      	nop
 80199a0:	24025220 	.word	0x24025220
 80199a4:	24000000 	.word	0x24000000
 80199a8:	0801777f 	.word	0x0801777f
 80199ac:	240000c8 	.word	0x240000c8
 80199b0:	24025224 	.word	0x24025224
 80199b4:	0801777d 	.word	0x0801777d
 80199b8:	240000cc 	.word	0x240000cc

080199bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80199bc:	b538      	push	{r3, r4, r5, lr}
 80199be:	4c15      	ldr	r4, [pc, #84]	@ (8019a14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80199c0:	4605      	mov	r5, r0
 80199c2:	7823      	ldrb	r3, [r4, #0]
 80199c4:	f3bf 8f5b 	dmb	ish
 80199c8:	07da      	lsls	r2, r3, #31
 80199ca:	d40b      	bmi.n	80199e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80199cc:	4620      	mov	r0, r4
 80199ce:	f006 f899 	bl	801fb04 <__cxa_guard_acquire>
 80199d2:	b138      	cbz	r0, 80199e4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80199d4:	4620      	mov	r0, r4
 80199d6:	f006 f8a1 	bl	801fb1c <__cxa_guard_release>
 80199da:	4a0f      	ldr	r2, [pc, #60]	@ (8019a18 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80199dc:	490f      	ldr	r1, [pc, #60]	@ (8019a1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80199de:	4810      	ldr	r0, [pc, #64]	@ (8019a20 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80199e0:	f006 f889 	bl	801faf6 <__aeabi_atexit>
 80199e4:	4c0f      	ldr	r4, [pc, #60]	@ (8019a24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80199e6:	7823      	ldrb	r3, [r4, #0]
 80199e8:	f3bf 8f5b 	dmb	ish
 80199ec:	07db      	lsls	r3, r3, #31
 80199ee:	d40b      	bmi.n	8019a08 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80199f0:	4620      	mov	r0, r4
 80199f2:	f006 f887 	bl	801fb04 <__cxa_guard_acquire>
 80199f6:	b138      	cbz	r0, 8019a08 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80199f8:	4620      	mov	r0, r4
 80199fa:	f006 f88f 	bl	801fb1c <__cxa_guard_release>
 80199fe:	4a06      	ldr	r2, [pc, #24]	@ (8019a18 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8019a00:	4909      	ldr	r1, [pc, #36]	@ (8019a28 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8019a02:	480a      	ldr	r0, [pc, #40]	@ (8019a2c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8019a04:	f006 f877 	bl	801faf6 <__aeabi_atexit>
 8019a08:	4b05      	ldr	r3, [pc, #20]	@ (8019a20 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8019a0a:	60eb      	str	r3, [r5, #12]
 8019a0c:	4b07      	ldr	r3, [pc, #28]	@ (8019a2c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8019a0e:	612b      	str	r3, [r5, #16]
 8019a10:	bd38      	pop	{r3, r4, r5, pc}
 8019a12:	bf00      	nop
 8019a14:	24025200 	.word	0x24025200
 8019a18:	24000000 	.word	0x24000000
 8019a1c:	08017783 	.word	0x08017783
 8019a20:	240000a8 	.word	0x240000a8
 8019a24:	24025204 	.word	0x24025204
 8019a28:	08017781 	.word	0x08017781
 8019a2c:	240000ac 	.word	0x240000ac

08019a30 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8019a30:	b510      	push	{r4, lr}
 8019a32:	4604      	mov	r4, r0
 8019a34:	f7ff ff88 	bl	8019948 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8019a38:	4620      	mov	r0, r4
 8019a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a3e:	f7ff bfbd 	b.w	80199bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08019a44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8019a44:	b538      	push	{r3, r4, r5, lr}
 8019a46:	4c15      	ldr	r4, [pc, #84]	@ (8019a9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8019a48:	4605      	mov	r5, r0
 8019a4a:	7823      	ldrb	r3, [r4, #0]
 8019a4c:	f3bf 8f5b 	dmb	ish
 8019a50:	07da      	lsls	r2, r3, #31
 8019a52:	d40b      	bmi.n	8019a6c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8019a54:	4620      	mov	r0, r4
 8019a56:	f006 f855 	bl	801fb04 <__cxa_guard_acquire>
 8019a5a:	b138      	cbz	r0, 8019a6c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8019a5c:	4620      	mov	r0, r4
 8019a5e:	f006 f85d 	bl	801fb1c <__cxa_guard_release>
 8019a62:	4a0f      	ldr	r2, [pc, #60]	@ (8019aa0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8019a64:	490f      	ldr	r1, [pc, #60]	@ (8019aa4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8019a66:	4810      	ldr	r0, [pc, #64]	@ (8019aa8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8019a68:	f006 f845 	bl	801faf6 <__aeabi_atexit>
 8019a6c:	4c0f      	ldr	r4, [pc, #60]	@ (8019aac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8019a6e:	7823      	ldrb	r3, [r4, #0]
 8019a70:	f3bf 8f5b 	dmb	ish
 8019a74:	07db      	lsls	r3, r3, #31
 8019a76:	d40b      	bmi.n	8019a90 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8019a78:	4620      	mov	r0, r4
 8019a7a:	f006 f843 	bl	801fb04 <__cxa_guard_acquire>
 8019a7e:	b138      	cbz	r0, 8019a90 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8019a80:	4620      	mov	r0, r4
 8019a82:	f006 f84b 	bl	801fb1c <__cxa_guard_release>
 8019a86:	4a06      	ldr	r2, [pc, #24]	@ (8019aa0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8019a88:	4909      	ldr	r1, [pc, #36]	@ (8019ab0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8019a8a:	480a      	ldr	r0, [pc, #40]	@ (8019ab4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8019a8c:	f006 f833 	bl	801faf6 <__aeabi_atexit>
 8019a90:	4b05      	ldr	r3, [pc, #20]	@ (8019aa8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8019a92:	626b      	str	r3, [r5, #36]	@ 0x24
 8019a94:	4b07      	ldr	r3, [pc, #28]	@ (8019ab4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8019a96:	62ab      	str	r3, [r5, #40]	@ 0x28
 8019a98:	bd38      	pop	{r3, r4, r5, pc}
 8019a9a:	bf00      	nop
 8019a9c:	24025228 	.word	0x24025228
 8019aa0:	24000000 	.word	0x24000000
 8019aa4:	08017777 	.word	0x08017777
 8019aa8:	240000d0 	.word	0x240000d0
 8019aac:	2402522c 	.word	0x2402522c
 8019ab0:	08017775 	.word	0x08017775
 8019ab4:	240000d4 	.word	0x240000d4

08019ab8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8019ab8:	b538      	push	{r3, r4, r5, lr}
 8019aba:	4c15      	ldr	r4, [pc, #84]	@ (8019b10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8019abc:	4605      	mov	r5, r0
 8019abe:	7823      	ldrb	r3, [r4, #0]
 8019ac0:	f3bf 8f5b 	dmb	ish
 8019ac4:	07da      	lsls	r2, r3, #31
 8019ac6:	d40b      	bmi.n	8019ae0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8019ac8:	4620      	mov	r0, r4
 8019aca:	f006 f81b 	bl	801fb04 <__cxa_guard_acquire>
 8019ace:	b138      	cbz	r0, 8019ae0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8019ad0:	4620      	mov	r0, r4
 8019ad2:	f006 f823 	bl	801fb1c <__cxa_guard_release>
 8019ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8019b14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8019ad8:	490f      	ldr	r1, [pc, #60]	@ (8019b18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8019ada:	4810      	ldr	r0, [pc, #64]	@ (8019b1c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8019adc:	f006 f80b 	bl	801faf6 <__aeabi_atexit>
 8019ae0:	4c0f      	ldr	r4, [pc, #60]	@ (8019b20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8019ae2:	7823      	ldrb	r3, [r4, #0]
 8019ae4:	f3bf 8f5b 	dmb	ish
 8019ae8:	07db      	lsls	r3, r3, #31
 8019aea:	d40b      	bmi.n	8019b04 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8019aec:	4620      	mov	r0, r4
 8019aee:	f006 f809 	bl	801fb04 <__cxa_guard_acquire>
 8019af2:	b138      	cbz	r0, 8019b04 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8019af4:	4620      	mov	r0, r4
 8019af6:	f006 f811 	bl	801fb1c <__cxa_guard_release>
 8019afa:	4a06      	ldr	r2, [pc, #24]	@ (8019b14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8019afc:	4909      	ldr	r1, [pc, #36]	@ (8019b24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8019afe:	480a      	ldr	r0, [pc, #40]	@ (8019b28 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8019b00:	f005 fff9 	bl	801faf6 <__aeabi_atexit>
 8019b04:	4b05      	ldr	r3, [pc, #20]	@ (8019b1c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8019b06:	61eb      	str	r3, [r5, #28]
 8019b08:	4b07      	ldr	r3, [pc, #28]	@ (8019b28 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8019b0a:	622b      	str	r3, [r5, #32]
 8019b0c:	bd38      	pop	{r3, r4, r5, pc}
 8019b0e:	bf00      	nop
 8019b10:	24025208 	.word	0x24025208
 8019b14:	24000000 	.word	0x24000000
 8019b18:	0801777b 	.word	0x0801777b
 8019b1c:	240000b0 	.word	0x240000b0
 8019b20:	2402520c 	.word	0x2402520c
 8019b24:	08017779 	.word	0x08017779
 8019b28:	240000b4 	.word	0x240000b4

08019b2c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8019b2c:	b510      	push	{r4, lr}
 8019b2e:	4604      	mov	r4, r0
 8019b30:	f7ff ff88 	bl	8019a44 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8019b34:	4620      	mov	r0, r4
 8019b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b3a:	f7ff bfbd 	b.w	8019ab8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08019b40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8019b40:	b538      	push	{r3, r4, r5, lr}
 8019b42:	4c15      	ldr	r4, [pc, #84]	@ (8019b98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8019b44:	4605      	mov	r5, r0
 8019b46:	7823      	ldrb	r3, [r4, #0]
 8019b48:	f3bf 8f5b 	dmb	ish
 8019b4c:	07da      	lsls	r2, r3, #31
 8019b4e:	d40b      	bmi.n	8019b68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8019b50:	4620      	mov	r0, r4
 8019b52:	f005 ffd7 	bl	801fb04 <__cxa_guard_acquire>
 8019b56:	b138      	cbz	r0, 8019b68 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8019b58:	4620      	mov	r0, r4
 8019b5a:	f005 ffdf 	bl	801fb1c <__cxa_guard_release>
 8019b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8019b9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8019b60:	490f      	ldr	r1, [pc, #60]	@ (8019ba0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8019b62:	4810      	ldr	r0, [pc, #64]	@ (8019ba4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8019b64:	f005 ffc7 	bl	801faf6 <__aeabi_atexit>
 8019b68:	4c0f      	ldr	r4, [pc, #60]	@ (8019ba8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8019b6a:	7823      	ldrb	r3, [r4, #0]
 8019b6c:	f3bf 8f5b 	dmb	ish
 8019b70:	07db      	lsls	r3, r3, #31
 8019b72:	d40b      	bmi.n	8019b8c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8019b74:	4620      	mov	r0, r4
 8019b76:	f005 ffc5 	bl	801fb04 <__cxa_guard_acquire>
 8019b7a:	b138      	cbz	r0, 8019b8c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8019b7c:	4620      	mov	r0, r4
 8019b7e:	f005 ffcd 	bl	801fb1c <__cxa_guard_release>
 8019b82:	4a06      	ldr	r2, [pc, #24]	@ (8019b9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8019b84:	4909      	ldr	r1, [pc, #36]	@ (8019bac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8019b86:	480a      	ldr	r0, [pc, #40]	@ (8019bb0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8019b88:	f005 ffb5 	bl	801faf6 <__aeabi_atexit>
 8019b8c:	4b05      	ldr	r3, [pc, #20]	@ (8019ba4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8019b8e:	636b      	str	r3, [r5, #52]	@ 0x34
 8019b90:	4b07      	ldr	r3, [pc, #28]	@ (8019bb0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8019b92:	63ab      	str	r3, [r5, #56]	@ 0x38
 8019b94:	bd38      	pop	{r3, r4, r5, pc}
 8019b96:	bf00      	nop
 8019b98:	24025210 	.word	0x24025210
 8019b9c:	24000000 	.word	0x24000000
 8019ba0:	0801776f 	.word	0x0801776f
 8019ba4:	240000b8 	.word	0x240000b8
 8019ba8:	24025214 	.word	0x24025214
 8019bac:	0801776d 	.word	0x0801776d
 8019bb0:	240000bc 	.word	0x240000bc

08019bb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8019bb4:	b538      	push	{r3, r4, r5, lr}
 8019bb6:	4c15      	ldr	r4, [pc, #84]	@ (8019c0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8019bb8:	4605      	mov	r5, r0
 8019bba:	7823      	ldrb	r3, [r4, #0]
 8019bbc:	f3bf 8f5b 	dmb	ish
 8019bc0:	07da      	lsls	r2, r3, #31
 8019bc2:	d40b      	bmi.n	8019bdc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8019bc4:	4620      	mov	r0, r4
 8019bc6:	f005 ff9d 	bl	801fb04 <__cxa_guard_acquire>
 8019bca:	b138      	cbz	r0, 8019bdc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8019bcc:	4620      	mov	r0, r4
 8019bce:	f005 ffa5 	bl	801fb1c <__cxa_guard_release>
 8019bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8019c10 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8019bd4:	490f      	ldr	r1, [pc, #60]	@ (8019c14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8019bd6:	4810      	ldr	r0, [pc, #64]	@ (8019c18 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8019bd8:	f005 ff8d 	bl	801faf6 <__aeabi_atexit>
 8019bdc:	4c0f      	ldr	r4, [pc, #60]	@ (8019c1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8019bde:	7823      	ldrb	r3, [r4, #0]
 8019be0:	f3bf 8f5b 	dmb	ish
 8019be4:	07db      	lsls	r3, r3, #31
 8019be6:	d40b      	bmi.n	8019c00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8019be8:	4620      	mov	r0, r4
 8019bea:	f005 ff8b 	bl	801fb04 <__cxa_guard_acquire>
 8019bee:	b138      	cbz	r0, 8019c00 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8019bf0:	4620      	mov	r0, r4
 8019bf2:	f005 ff93 	bl	801fb1c <__cxa_guard_release>
 8019bf6:	4a06      	ldr	r2, [pc, #24]	@ (8019c10 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8019bf8:	4909      	ldr	r1, [pc, #36]	@ (8019c20 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8019bfa:	480a      	ldr	r0, [pc, #40]	@ (8019c24 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8019bfc:	f005 ff7b 	bl	801faf6 <__aeabi_atexit>
 8019c00:	4b05      	ldr	r3, [pc, #20]	@ (8019c18 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8019c02:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8019c04:	4b07      	ldr	r3, [pc, #28]	@ (8019c24 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8019c06:	632b      	str	r3, [r5, #48]	@ 0x30
 8019c08:	bd38      	pop	{r3, r4, r5, pc}
 8019c0a:	bf00      	nop
 8019c0c:	240251e8 	.word	0x240251e8
 8019c10:	24000000 	.word	0x24000000
 8019c14:	08017773 	.word	0x08017773
 8019c18:	24000090 	.word	0x24000090
 8019c1c:	240251ec 	.word	0x240251ec
 8019c20:	08017771 	.word	0x08017771
 8019c24:	24000094 	.word	0x24000094

08019c28 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8019c28:	b510      	push	{r4, lr}
 8019c2a:	4604      	mov	r4, r0
 8019c2c:	f7ff ff88 	bl	8019b40 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8019c30:	4620      	mov	r0, r4
 8019c32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c36:	f7ff bfbd 	b.w	8019bb4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08019c3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8019c3c:	b538      	push	{r3, r4, r5, lr}
 8019c3e:	4c15      	ldr	r4, [pc, #84]	@ (8019c94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8019c40:	4605      	mov	r5, r0
 8019c42:	7823      	ldrb	r3, [r4, #0]
 8019c44:	f3bf 8f5b 	dmb	ish
 8019c48:	07da      	lsls	r2, r3, #31
 8019c4a:	d40b      	bmi.n	8019c64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8019c4c:	4620      	mov	r0, r4
 8019c4e:	f005 ff59 	bl	801fb04 <__cxa_guard_acquire>
 8019c52:	b138      	cbz	r0, 8019c64 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8019c54:	4620      	mov	r0, r4
 8019c56:	f005 ff61 	bl	801fb1c <__cxa_guard_release>
 8019c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8019c98 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8019c5c:	490f      	ldr	r1, [pc, #60]	@ (8019c9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8019c5e:	4810      	ldr	r0, [pc, #64]	@ (8019ca0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8019c60:	f005 ff49 	bl	801faf6 <__aeabi_atexit>
 8019c64:	4c0f      	ldr	r4, [pc, #60]	@ (8019ca4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8019c66:	7823      	ldrb	r3, [r4, #0]
 8019c68:	f3bf 8f5b 	dmb	ish
 8019c6c:	07db      	lsls	r3, r3, #31
 8019c6e:	d40b      	bmi.n	8019c88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8019c70:	4620      	mov	r0, r4
 8019c72:	f005 ff47 	bl	801fb04 <__cxa_guard_acquire>
 8019c76:	b138      	cbz	r0, 8019c88 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8019c78:	4620      	mov	r0, r4
 8019c7a:	f005 ff4f 	bl	801fb1c <__cxa_guard_release>
 8019c7e:	4a06      	ldr	r2, [pc, #24]	@ (8019c98 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8019c80:	4909      	ldr	r1, [pc, #36]	@ (8019ca8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8019c82:	480a      	ldr	r0, [pc, #40]	@ (8019cac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8019c84:	f005 ff37 	bl	801faf6 <__aeabi_atexit>
 8019c88:	4b05      	ldr	r3, [pc, #20]	@ (8019ca0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8019c8a:	646b      	str	r3, [r5, #68]	@ 0x44
 8019c8c:	4b07      	ldr	r3, [pc, #28]	@ (8019cac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8019c8e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8019c90:	bd38      	pop	{r3, r4, r5, pc}
 8019c92:	bf00      	nop
 8019c94:	24025218 	.word	0x24025218
 8019c98:	24000000 	.word	0x24000000
 8019c9c:	08017767 	.word	0x08017767
 8019ca0:	240000c0 	.word	0x240000c0
 8019ca4:	2402521c 	.word	0x2402521c
 8019ca8:	08017765 	.word	0x08017765
 8019cac:	240000c4 	.word	0x240000c4

08019cb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8019cb0:	b538      	push	{r3, r4, r5, lr}
 8019cb2:	4c15      	ldr	r4, [pc, #84]	@ (8019d08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8019cb4:	4605      	mov	r5, r0
 8019cb6:	7823      	ldrb	r3, [r4, #0]
 8019cb8:	f3bf 8f5b 	dmb	ish
 8019cbc:	07da      	lsls	r2, r3, #31
 8019cbe:	d40b      	bmi.n	8019cd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8019cc0:	4620      	mov	r0, r4
 8019cc2:	f005 ff1f 	bl	801fb04 <__cxa_guard_acquire>
 8019cc6:	b138      	cbz	r0, 8019cd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8019cc8:	4620      	mov	r0, r4
 8019cca:	f005 ff27 	bl	801fb1c <__cxa_guard_release>
 8019cce:	4a0f      	ldr	r2, [pc, #60]	@ (8019d0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8019cd0:	490f      	ldr	r1, [pc, #60]	@ (8019d10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8019cd2:	4810      	ldr	r0, [pc, #64]	@ (8019d14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8019cd4:	f005 ff0f 	bl	801faf6 <__aeabi_atexit>
 8019cd8:	4c0f      	ldr	r4, [pc, #60]	@ (8019d18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8019cda:	7823      	ldrb	r3, [r4, #0]
 8019cdc:	f3bf 8f5b 	dmb	ish
 8019ce0:	07db      	lsls	r3, r3, #31
 8019ce2:	d40b      	bmi.n	8019cfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8019ce4:	4620      	mov	r0, r4
 8019ce6:	f005 ff0d 	bl	801fb04 <__cxa_guard_acquire>
 8019cea:	b138      	cbz	r0, 8019cfc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8019cec:	4620      	mov	r0, r4
 8019cee:	f005 ff15 	bl	801fb1c <__cxa_guard_release>
 8019cf2:	4a06      	ldr	r2, [pc, #24]	@ (8019d0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8019cf4:	4909      	ldr	r1, [pc, #36]	@ (8019d1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8019cf6:	480a      	ldr	r0, [pc, #40]	@ (8019d20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8019cf8:	f005 fefd 	bl	801faf6 <__aeabi_atexit>
 8019cfc:	4b05      	ldr	r3, [pc, #20]	@ (8019d14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8019cfe:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8019d00:	4b07      	ldr	r3, [pc, #28]	@ (8019d20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8019d02:	642b      	str	r3, [r5, #64]	@ 0x40
 8019d04:	bd38      	pop	{r3, r4, r5, pc}
 8019d06:	bf00      	nop
 8019d08:	240251f8 	.word	0x240251f8
 8019d0c:	24000000 	.word	0x24000000
 8019d10:	0801776b 	.word	0x0801776b
 8019d14:	240000a0 	.word	0x240000a0
 8019d18:	240251fc 	.word	0x240251fc
 8019d1c:	08017769 	.word	0x08017769
 8019d20:	240000a4 	.word	0x240000a4

08019d24 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8019d24:	b510      	push	{r4, lr}
 8019d26:	4604      	mov	r4, r0
 8019d28:	f7ff ff88 	bl	8019c3c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8019d2c:	4620      	mov	r0, r4
 8019d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d32:	f7ff bfbd 	b.w	8019cb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08019d38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8019d38:	b538      	push	{r3, r4, r5, lr}
 8019d3a:	4c15      	ldr	r4, [pc, #84]	@ (8019d90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8019d3c:	4605      	mov	r5, r0
 8019d3e:	7823      	ldrb	r3, [r4, #0]
 8019d40:	f3bf 8f5b 	dmb	ish
 8019d44:	07da      	lsls	r2, r3, #31
 8019d46:	d40b      	bmi.n	8019d60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8019d48:	4620      	mov	r0, r4
 8019d4a:	f005 fedb 	bl	801fb04 <__cxa_guard_acquire>
 8019d4e:	b138      	cbz	r0, 8019d60 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8019d50:	4620      	mov	r0, r4
 8019d52:	f005 fee3 	bl	801fb1c <__cxa_guard_release>
 8019d56:	4a0f      	ldr	r2, [pc, #60]	@ (8019d94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8019d58:	490f      	ldr	r1, [pc, #60]	@ (8019d98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8019d5a:	4810      	ldr	r0, [pc, #64]	@ (8019d9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8019d5c:	f005 fecb 	bl	801faf6 <__aeabi_atexit>
 8019d60:	4c0f      	ldr	r4, [pc, #60]	@ (8019da0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8019d62:	7823      	ldrb	r3, [r4, #0]
 8019d64:	f3bf 8f5b 	dmb	ish
 8019d68:	07db      	lsls	r3, r3, #31
 8019d6a:	d40b      	bmi.n	8019d84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8019d6c:	4620      	mov	r0, r4
 8019d6e:	f005 fec9 	bl	801fb04 <__cxa_guard_acquire>
 8019d72:	b138      	cbz	r0, 8019d84 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8019d74:	4620      	mov	r0, r4
 8019d76:	f005 fed1 	bl	801fb1c <__cxa_guard_release>
 8019d7a:	4a06      	ldr	r2, [pc, #24]	@ (8019d94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8019d7c:	4909      	ldr	r1, [pc, #36]	@ (8019da4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8019d7e:	480a      	ldr	r0, [pc, #40]	@ (8019da8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8019d80:	f005 feb9 	bl	801faf6 <__aeabi_atexit>
 8019d84:	4b05      	ldr	r3, [pc, #20]	@ (8019d9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8019d86:	656b      	str	r3, [r5, #84]	@ 0x54
 8019d88:	4b07      	ldr	r3, [pc, #28]	@ (8019da8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8019d8a:	65ab      	str	r3, [r5, #88]	@ 0x58
 8019d8c:	bd38      	pop	{r3, r4, r5, pc}
 8019d8e:	bf00      	nop
 8019d90:	240251f0 	.word	0x240251f0
 8019d94:	24000000 	.word	0x24000000
 8019d98:	0801775f 	.word	0x0801775f
 8019d9c:	24000098 	.word	0x24000098
 8019da0:	240251f4 	.word	0x240251f4
 8019da4:	0801775d 	.word	0x0801775d
 8019da8:	2400009c 	.word	0x2400009c

08019dac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8019dac:	b538      	push	{r3, r4, r5, lr}
 8019dae:	4c15      	ldr	r4, [pc, #84]	@ (8019e04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8019db0:	4605      	mov	r5, r0
 8019db2:	7823      	ldrb	r3, [r4, #0]
 8019db4:	f3bf 8f5b 	dmb	ish
 8019db8:	07da      	lsls	r2, r3, #31
 8019dba:	d40b      	bmi.n	8019dd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8019dbc:	4620      	mov	r0, r4
 8019dbe:	f005 fea1 	bl	801fb04 <__cxa_guard_acquire>
 8019dc2:	b138      	cbz	r0, 8019dd4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8019dc4:	4620      	mov	r0, r4
 8019dc6:	f005 fea9 	bl	801fb1c <__cxa_guard_release>
 8019dca:	4a0f      	ldr	r2, [pc, #60]	@ (8019e08 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8019dcc:	490f      	ldr	r1, [pc, #60]	@ (8019e0c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8019dce:	4810      	ldr	r0, [pc, #64]	@ (8019e10 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8019dd0:	f005 fe91 	bl	801faf6 <__aeabi_atexit>
 8019dd4:	4c0f      	ldr	r4, [pc, #60]	@ (8019e14 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8019dd6:	7823      	ldrb	r3, [r4, #0]
 8019dd8:	f3bf 8f5b 	dmb	ish
 8019ddc:	07db      	lsls	r3, r3, #31
 8019dde:	d40b      	bmi.n	8019df8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8019de0:	4620      	mov	r0, r4
 8019de2:	f005 fe8f 	bl	801fb04 <__cxa_guard_acquire>
 8019de6:	b138      	cbz	r0, 8019df8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8019de8:	4620      	mov	r0, r4
 8019dea:	f005 fe97 	bl	801fb1c <__cxa_guard_release>
 8019dee:	4a06      	ldr	r2, [pc, #24]	@ (8019e08 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8019df0:	4909      	ldr	r1, [pc, #36]	@ (8019e18 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8019df2:	480a      	ldr	r0, [pc, #40]	@ (8019e1c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8019df4:	f005 fe7f 	bl	801faf6 <__aeabi_atexit>
 8019df8:	4b05      	ldr	r3, [pc, #20]	@ (8019e10 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8019dfa:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8019dfc:	4b07      	ldr	r3, [pc, #28]	@ (8019e1c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8019dfe:	652b      	str	r3, [r5, #80]	@ 0x50
 8019e00:	bd38      	pop	{r3, r4, r5, pc}
 8019e02:	bf00      	nop
 8019e04:	240251e0 	.word	0x240251e0
 8019e08:	24000000 	.word	0x24000000
 8019e0c:	08017763 	.word	0x08017763
 8019e10:	24000088 	.word	0x24000088
 8019e14:	240251e4 	.word	0x240251e4
 8019e18:	08017761 	.word	0x08017761
 8019e1c:	2400008c 	.word	0x2400008c

08019e20 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8019e20:	b510      	push	{r4, lr}
 8019e22:	4604      	mov	r4, r0
 8019e24:	f7ff ff88 	bl	8019d38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8019e28:	4620      	mov	r0, r4
 8019e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e2e:	f7ff bfbd 	b.w	8019dac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08019e32 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8019e32:	b510      	push	{r4, lr}
 8019e34:	4604      	mov	r4, r0
 8019e36:	f7ff fff3 	bl	8019e20 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8019e3a:	4620      	mov	r0, r4
 8019e3c:	f7ff ff72 	bl	8019d24 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8019e40:	4620      	mov	r0, r4
 8019e42:	f7ff fe73 	bl	8019b2c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8019e46:	4620      	mov	r0, r4
 8019e48:	f7ff fdf2 	bl	8019a30 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8019e4c:	4620      	mov	r0, r4
 8019e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e52:	f7ff bee9 	b.w	8019c28 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08019e58 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 8019e58:	b538      	push	{r3, r4, r5, lr}
 8019e5a:	4c0b      	ldr	r4, [pc, #44]	@ (8019e88 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 8019e5c:	4605      	mov	r5, r0
 8019e5e:	7823      	ldrb	r3, [r4, #0]
 8019e60:	f3bf 8f5b 	dmb	ish
 8019e64:	07db      	lsls	r3, r3, #31
 8019e66:	d40b      	bmi.n	8019e80 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8019e68:	4620      	mov	r0, r4
 8019e6a:	f005 fe4b 	bl	801fb04 <__cxa_guard_acquire>
 8019e6e:	b138      	cbz	r0, 8019e80 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8019e70:	4620      	mov	r0, r4
 8019e72:	f005 fe53 	bl	801fb1c <__cxa_guard_release>
 8019e76:	4a05      	ldr	r2, [pc, #20]	@ (8019e8c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8019e78:	4905      	ldr	r1, [pc, #20]	@ (8019e90 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 8019e7a:	4806      	ldr	r0, [pc, #24]	@ (8019e94 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8019e7c:	f005 fe3b 	bl	801faf6 <__aeabi_atexit>
 8019e80:	4b04      	ldr	r3, [pc, #16]	@ (8019e94 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8019e82:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8019e84:	bd38      	pop	{r3, r4, r5, pc}
 8019e86:	bf00      	nop
 8019e88:	240251d4 	.word	0x240251d4
 8019e8c:	24000000 	.word	0x24000000
 8019e90:	0801775b 	.word	0x0801775b
 8019e94:	24000080 	.word	0x24000080

08019e98 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8019e98:	b538      	push	{r3, r4, r5, lr}
 8019e9a:	4c0b      	ldr	r4, [pc, #44]	@ (8019ec8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 8019e9c:	4605      	mov	r5, r0
 8019e9e:	7823      	ldrb	r3, [r4, #0]
 8019ea0:	f3bf 8f5b 	dmb	ish
 8019ea4:	07db      	lsls	r3, r3, #31
 8019ea6:	d40b      	bmi.n	8019ec0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8019ea8:	4620      	mov	r0, r4
 8019eaa:	f005 fe2b 	bl	801fb04 <__cxa_guard_acquire>
 8019eae:	b138      	cbz	r0, 8019ec0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8019eb0:	4620      	mov	r0, r4
 8019eb2:	f005 fe33 	bl	801fb1c <__cxa_guard_release>
 8019eb6:	4a05      	ldr	r2, [pc, #20]	@ (8019ecc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 8019eb8:	4905      	ldr	r1, [pc, #20]	@ (8019ed0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 8019eba:	4806      	ldr	r0, [pc, #24]	@ (8019ed4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8019ebc:	f005 fe1b 	bl	801faf6 <__aeabi_atexit>
 8019ec0:	4b04      	ldr	r3, [pc, #16]	@ (8019ed4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8019ec2:	662b      	str	r3, [r5, #96]	@ 0x60
 8019ec4:	bd38      	pop	{r3, r4, r5, pc}
 8019ec6:	bf00      	nop
 8019ec8:	240251d8 	.word	0x240251d8
 8019ecc:	24000000 	.word	0x24000000
 8019ed0:	08017759 	.word	0x08017759
 8019ed4:	24000084 	.word	0x24000084

08019ed8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 8019ed8:	b570      	push	{r4, r5, r6, lr}
 8019eda:	4d0c      	ldr	r5, [pc, #48]	@ (8019f0c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8019edc:	4606      	mov	r6, r0
 8019ede:	4c0c      	ldr	r4, [pc, #48]	@ (8019f10 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8019ee0:	782b      	ldrb	r3, [r5, #0]
 8019ee2:	f3bf 8f5b 	dmb	ish
 8019ee6:	f013 0f01 	tst.w	r3, #1
 8019eea:	d10d      	bne.n	8019f08 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8019eec:	4628      	mov	r0, r5
 8019eee:	f005 fe09 	bl	801fb04 <__cxa_guard_acquire>
 8019ef2:	b148      	cbz	r0, 8019f08 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8019ef4:	4b07      	ldr	r3, [pc, #28]	@ (8019f14 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8019ef6:	4628      	mov	r0, r5
 8019ef8:	6023      	str	r3, [r4, #0]
 8019efa:	f005 fe0f 	bl	801fb1c <__cxa_guard_release>
 8019efe:	4a06      	ldr	r2, [pc, #24]	@ (8019f18 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8019f00:	4620      	mov	r0, r4
 8019f02:	4906      	ldr	r1, [pc, #24]	@ (8019f1c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8019f04:	f005 fdf7 	bl	801faf6 <__aeabi_atexit>
 8019f08:	6674      	str	r4, [r6, #100]	@ 0x64
 8019f0a:	bd70      	pop	{r4, r5, r6, pc}
 8019f0c:	240251dc 	.word	0x240251dc
 8019f10:	24025230 	.word	0x24025230
 8019f14:	08024000 	.word	0x08024000
 8019f18:	24000000 	.word	0x24000000
 8019f1c:	08017757 	.word	0x08017757

08019f20 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 8019f20:	b510      	push	{r4, lr}
 8019f22:	4604      	mov	r4, r0
 8019f24:	f7ff ff98 	bl	8019e58 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 8019f28:	4620      	mov	r0, r4
 8019f2a:	f7ff ffb5 	bl	8019e98 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 8019f2e:	4620      	mov	r0, r4
 8019f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f34:	f7ff bfd0 	b.w	8019ed8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

08019f38 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8019f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f3c:	b087      	sub	sp, #28
 8019f3e:	788d      	ldrb	r5, [r1, #2]
 8019f40:	f891 9000 	ldrb.w	r9, [r1]
 8019f44:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8019f48:	9501      	str	r5, [sp, #4]
 8019f4a:	784d      	ldrb	r5, [r1, #1]
 8019f4c:	9203      	str	r2, [sp, #12]
 8019f4e:	9502      	str	r5, [sp, #8]
 8019f50:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8019f54:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8019f58:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8019f5c:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 8019f60:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8019f64:	fb06 0708 	mla	r7, r6, r8, r0
 8019f68:	2e00      	cmp	r6, #0
 8019f6a:	eb02 0a07 	add.w	sl, r2, r7
 8019f6e:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8019f72:	9d01      	ldr	r5, [sp, #4]
 8019f74:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8019f78:	ea45 0509 	orr.w	r5, r5, r9
 8019f7c:	9505      	str	r5, [sp, #20]
 8019f7e:	f2c0 80b2 	blt.w	801a0e6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8019f82:	45b3      	cmp	fp, r6
 8019f84:	f340 80af 	ble.w	801a0e6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8019f88:	2800      	cmp	r0, #0
 8019f8a:	f2c0 80aa 	blt.w	801a0e2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8019f8e:	4580      	cmp	r8, r0
 8019f90:	f340 80a7 	ble.w	801a0e2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8019f94:	9a03      	ldr	r2, [sp, #12]
 8019f96:	5dd7      	ldrb	r7, [r2, r7]
 8019f98:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019f9c:	441f      	add	r7, r3
 8019f9e:	1c42      	adds	r2, r0, #1
 8019fa0:	f100 80a4 	bmi.w	801a0ec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8019fa4:	4590      	cmp	r8, r2
 8019fa6:	f340 80a1 	ble.w	801a0ec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8019faa:	2c00      	cmp	r4, #0
 8019fac:	f000 809e 	beq.w	801a0ec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8019fb0:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8019fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019fb8:	441d      	add	r5, r3
 8019fba:	3601      	adds	r6, #1
 8019fbc:	f100 809a 	bmi.w	801a0f4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8019fc0:	45b3      	cmp	fp, r6
 8019fc2:	f340 8097 	ble.w	801a0f4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8019fc6:	f1bc 0f00 	cmp.w	ip, #0
 8019fca:	f000 8093 	beq.w	801a0f4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8019fce:	2800      	cmp	r0, #0
 8019fd0:	f2c0 808e 	blt.w	801a0f0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8019fd4:	4580      	cmp	r8, r0
 8019fd6:	f340 808b 	ble.w	801a0f0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8019fda:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8019fde:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019fe2:	441e      	add	r6, r3
 8019fe4:	3001      	adds	r0, #1
 8019fe6:	f100 8088 	bmi.w	801a0fa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8019fea:	4580      	cmp	r8, r0
 8019fec:	f340 8085 	ble.w	801a0fa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8019ff0:	2c00      	cmp	r4, #0
 8019ff2:	f000 8082 	beq.w	801a0fa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8019ff6:	44d0      	add	r8, sl
 8019ff8:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019ffc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a000:	4413      	add	r3, r2
 801a002:	b2a4      	uxth	r4, r4
 801a004:	f895 a000 	ldrb.w	sl, [r5]
 801a008:	fa1f fc8c 	uxth.w	ip, ip
 801a00c:	fb04 fb0c 	mul.w	fp, r4, ip
 801a010:	0124      	lsls	r4, r4, #4
 801a012:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801a016:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801a01a:	eba4 040b 	sub.w	r4, r4, fp
 801a01e:	fa1f f08c 	uxth.w	r0, ip
 801a022:	b2a2      	uxth	r2, r4
 801a024:	783c      	ldrb	r4, [r7, #0]
 801a026:	eba8 0800 	sub.w	r8, r8, r0
 801a02a:	fa1f fc8e 	uxth.w	ip, lr
 801a02e:	fb02 fa0a 	mul.w	sl, r2, sl
 801a032:	ea6f 0e0e 	mvn.w	lr, lr
 801a036:	fa1f f888 	uxth.w	r8, r8
 801a03a:	fa5f fe8e 	uxtb.w	lr, lr
 801a03e:	fb08 aa04 	mla	sl, r8, r4, sl
 801a042:	7834      	ldrb	r4, [r6, #0]
 801a044:	fb19 f90e 	smulbb	r9, r9, lr
 801a048:	fb00 aa04 	mla	sl, r0, r4, sl
 801a04c:	781c      	ldrb	r4, [r3, #0]
 801a04e:	fb0b a404 	mla	r4, fp, r4, sl
 801a052:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801a056:	fb04 990c 	mla	r9, r4, ip, r9
 801a05a:	fa1f f989 	uxth.w	r9, r9
 801a05e:	f109 0401 	add.w	r4, r9, #1
 801a062:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801a066:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a06a:	f881 9000 	strb.w	r9, [r1]
 801a06e:	f895 9001 	ldrb.w	r9, [r5, #1]
 801a072:	787c      	ldrb	r4, [r7, #1]
 801a074:	fb02 f909 	mul.w	r9, r2, r9
 801a078:	fb08 9904 	mla	r9, r8, r4, r9
 801a07c:	7874      	ldrb	r4, [r6, #1]
 801a07e:	fb00 9904 	mla	r9, r0, r4, r9
 801a082:	785c      	ldrb	r4, [r3, #1]
 801a084:	fb0b 9404 	mla	r4, fp, r4, r9
 801a088:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801a08c:	9c02      	ldr	r4, [sp, #8]
 801a08e:	fb14 f90e 	smulbb	r9, r4, lr
 801a092:	fb0a 940c 	mla	r4, sl, ip, r9
 801a096:	b2a4      	uxth	r4, r4
 801a098:	f104 0901 	add.w	r9, r4, #1
 801a09c:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801a0a0:	1224      	asrs	r4, r4, #8
 801a0a2:	704c      	strb	r4, [r1, #1]
 801a0a4:	78ad      	ldrb	r5, [r5, #2]
 801a0a6:	78bc      	ldrb	r4, [r7, #2]
 801a0a8:	436a      	muls	r2, r5
 801a0aa:	789b      	ldrb	r3, [r3, #2]
 801a0ac:	fb08 2204 	mla	r2, r8, r4, r2
 801a0b0:	78b4      	ldrb	r4, [r6, #2]
 801a0b2:	fb00 2004 	mla	r0, r0, r4, r2
 801a0b6:	fb0b 0b03 	mla	fp, fp, r3, r0
 801a0ba:	9b01      	ldr	r3, [sp, #4]
 801a0bc:	fb13 fe0e 	smulbb	lr, r3, lr
 801a0c0:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801a0c4:	fb0b ec0c 	mla	ip, fp, ip, lr
 801a0c8:	fa1f fc8c 	uxth.w	ip, ip
 801a0cc:	f10c 0e01 	add.w	lr, ip, #1
 801a0d0:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801a0d4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a0d8:	f881 c002 	strb.w	ip, [r1, #2]
 801a0dc:	b007      	add	sp, #28
 801a0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0e2:	af05      	add	r7, sp, #20
 801a0e4:	e75b      	b.n	8019f9e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801a0e6:	ad05      	add	r5, sp, #20
 801a0e8:	462f      	mov	r7, r5
 801a0ea:	e766      	b.n	8019fba <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801a0ec:	ad05      	add	r5, sp, #20
 801a0ee:	e764      	b.n	8019fba <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801a0f0:	ae05      	add	r6, sp, #20
 801a0f2:	e777      	b.n	8019fe4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801a0f4:	ab05      	add	r3, sp, #20
 801a0f6:	461e      	mov	r6, r3
 801a0f8:	e783      	b.n	801a002 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801a0fa:	ab05      	add	r3, sp, #20
 801a0fc:	e781      	b.n	801a002 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801a0fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a0fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a102:	b093      	sub	sp, #76	@ 0x4c
 801a104:	9210      	str	r2, [sp, #64]	@ 0x40
 801a106:	9309      	str	r3, [sp, #36]	@ 0x24
 801a108:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a10a:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801a10e:	9011      	str	r0, [sp, #68]	@ 0x44
 801a110:	930e      	str	r3, [sp, #56]	@ 0x38
 801a112:	6850      	ldr	r0, [r2, #4]
 801a114:	910d      	str	r1, [sp, #52]	@ 0x34
 801a116:	6812      	ldr	r2, [r2, #0]
 801a118:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801a11c:	fb00 1303 	mla	r3, r0, r3, r1
 801a120:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a124:	18d3      	adds	r3, r2, r3
 801a126:	930a      	str	r3, [sp, #40]	@ 0x28
 801a128:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	930c      	str	r3, [sp, #48]	@ 0x30
 801a12e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a130:	685c      	ldr	r4, [r3, #4]
 801a132:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a134:	3404      	adds	r4, #4
 801a136:	43db      	mvns	r3, r3
 801a138:	b2db      	uxtb	r3, r3
 801a13a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a13c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a13e:	2b00      	cmp	r3, #0
 801a140:	dc03      	bgt.n	801a14a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801a142:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a144:	2b00      	cmp	r3, #0
 801a146:	f340 8250 	ble.w	801a5ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801a14a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a14c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a150:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a154:	1e48      	subs	r0, r1, #1
 801a156:	1e55      	subs	r5, r2, #1
 801a158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	f340 80ee 	ble.w	801a33c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a160:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801a162:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a164:	1436      	asrs	r6, r6, #16
 801a166:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a16a:	d406      	bmi.n	801a17a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a16c:	4286      	cmp	r6, r0
 801a16e:	da04      	bge.n	801a17a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a170:	2b00      	cmp	r3, #0
 801a172:	db02      	blt.n	801a17a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a174:	42ab      	cmp	r3, r5
 801a176:	f2c0 80e2 	blt.w	801a33e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801a17a:	3601      	adds	r6, #1
 801a17c:	f100 80cf 	bmi.w	801a31e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a180:	42b1      	cmp	r1, r6
 801a182:	f2c0 80cc 	blt.w	801a31e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a186:	3301      	adds	r3, #1
 801a188:	f100 80c9 	bmi.w	801a31e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a18c:	429a      	cmp	r2, r3
 801a18e:	f2c0 80c6 	blt.w	801a31e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a192:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801a196:	f1bb 0f00 	cmp.w	fp, #0
 801a19a:	f340 80f1 	ble.w	801a380 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801a19e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a1a0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801a1a2:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801a1a4:	141d      	asrs	r5, r3, #16
 801a1a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a1a8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801a1ac:	68c7      	ldr	r7, [r0, #12]
 801a1ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801a1b0:	1418      	asrs	r0, r3, #16
 801a1b2:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801a1b6:	6892      	ldr	r2, [r2, #8]
 801a1b8:	f100 8137 	bmi.w	801a42a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a1bc:	f102 3cff 	add.w	ip, r2, #4294967295
 801a1c0:	4560      	cmp	r0, ip
 801a1c2:	f280 8132 	bge.w	801a42a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a1c6:	2d00      	cmp	r5, #0
 801a1c8:	f2c0 812f 	blt.w	801a42a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a1cc:	f107 3cff 	add.w	ip, r7, #4294967295
 801a1d0:	4565      	cmp	r5, ip
 801a1d2:	f280 812a 	bge.w	801a42a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a1d6:	b212      	sxth	r2, r2
 801a1d8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801a1da:	fb05 0002 	mla	r0, r5, r2, r0
 801a1de:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801a1e0:	f817 c000 	ldrb.w	ip, [r7, r0]
 801a1e4:	4405      	add	r5, r0
 801a1e6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a1ea:	eb04 0e0c 	add.w	lr, r4, ip
 801a1ee:	f1b8 0f00 	cmp.w	r8, #0
 801a1f2:	f000 810c 	beq.w	801a40e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801a1f6:	786f      	ldrb	r7, [r5, #1]
 801a1f8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a1fc:	4427      	add	r7, r4
 801a1fe:	2900      	cmp	r1, #0
 801a200:	f000 810d 	beq.w	801a41e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801a204:	18a8      	adds	r0, r5, r2
 801a206:	5caa      	ldrb	r2, [r5, r2]
 801a208:	7840      	ldrb	r0, [r0, #1]
 801a20a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a20e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a212:	4422      	add	r2, r4
 801a214:	4420      	add	r0, r4
 801a216:	fa1f f388 	uxth.w	r3, r8
 801a21a:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801a21e:	b289      	uxth	r1, r1
 801a220:	f897 c000 	ldrb.w	ip, [r7]
 801a224:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801a228:	fb03 f901 	mul.w	r9, r3, r1
 801a22c:	011b      	lsls	r3, r3, #4
 801a22e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a232:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801a236:	eba3 0309 	sub.w	r3, r3, r9
 801a23a:	b289      	uxth	r1, r1
 801a23c:	b29b      	uxth	r3, r3
 801a23e:	eba8 0801 	sub.w	r8, r8, r1
 801a242:	fb03 fc0c 	mul.w	ip, r3, ip
 801a246:	fa1f f888 	uxth.w	r8, r8
 801a24a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a24c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a24e:	fb08 cc0a 	mla	ip, r8, sl, ip
 801a252:	f892 a000 	ldrb.w	sl, [r2]
 801a256:	fb01 cc0a 	mla	ip, r1, sl, ip
 801a25a:	f890 a000 	ldrb.w	sl, [r0]
 801a25e:	fb09 cc0a 	mla	ip, r9, sl, ip
 801a262:	f896 a000 	ldrb.w	sl, [r6]
 801a266:	fb1a fa03 	smulbb	sl, sl, r3
 801a26a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801a26e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a270:	fb0c ac05 	mla	ip, ip, r5, sl
 801a274:	fa1f fc8c 	uxth.w	ip, ip
 801a278:	f10c 0a01 	add.w	sl, ip, #1
 801a27c:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801a280:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a284:	f886 a000 	strb.w	sl, [r6]
 801a288:	f897 c001 	ldrb.w	ip, [r7, #1]
 801a28c:	f89e a001 	ldrb.w	sl, [lr, #1]
 801a290:	fb03 fc0c 	mul.w	ip, r3, ip
 801a294:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a296:	fb08 cc0a 	mla	ip, r8, sl, ip
 801a29a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801a29e:	fb01 cc0a 	mla	ip, r1, sl, ip
 801a2a2:	f890 a001 	ldrb.w	sl, [r0, #1]
 801a2a6:	fb09 cc0a 	mla	ip, r9, sl, ip
 801a2aa:	f896 a001 	ldrb.w	sl, [r6, #1]
 801a2ae:	fb1a fa03 	smulbb	sl, sl, r3
 801a2b2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801a2b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a2b8:	fb0c ac05 	mla	ip, ip, r5, sl
 801a2bc:	fa1f fc8c 	uxth.w	ip, ip
 801a2c0:	f10c 0a01 	add.w	sl, ip, #1
 801a2c4:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801a2c8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a2cc:	f886 c001 	strb.w	ip, [r6, #1]
 801a2d0:	78bf      	ldrb	r7, [r7, #2]
 801a2d2:	f89e c002 	ldrb.w	ip, [lr, #2]
 801a2d6:	437b      	muls	r3, r7
 801a2d8:	fb08 330c 	mla	r3, r8, ip, r3
 801a2dc:	f892 c002 	ldrb.w	ip, [r2, #2]
 801a2e0:	7882      	ldrb	r2, [r0, #2]
 801a2e2:	fb01 310c 	mla	r1, r1, ip, r3
 801a2e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a2e8:	fb09 1902 	mla	r9, r9, r2, r1
 801a2ec:	78b1      	ldrb	r1, [r6, #2]
 801a2ee:	fb11 f103 	smulbb	r1, r1, r3
 801a2f2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801a2f6:	fb09 1505 	mla	r5, r9, r5, r1
 801a2fa:	b2ad      	uxth	r5, r5
 801a2fc:	1c6b      	adds	r3, r5, #1
 801a2fe:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801a302:	122d      	asrs	r5, r5, #8
 801a304:	70b5      	strb	r5, [r6, #2]
 801a306:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a308:	3603      	adds	r6, #3
 801a30a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801a30c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a310:	4413      	add	r3, r2
 801a312:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a314:	931d      	str	r3, [sp, #116]	@ 0x74
 801a316:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a318:	4413      	add	r3, r2
 801a31a:	931e      	str	r3, [sp, #120]	@ 0x78
 801a31c:	e73b      	b.n	801a196 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a31e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a320:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801a322:	4433      	add	r3, r6
 801a324:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801a326:	931d      	str	r3, [sp, #116]	@ 0x74
 801a328:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a32a:	4433      	add	r3, r6
 801a32c:	931e      	str	r3, [sp, #120]	@ 0x78
 801a32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a330:	3b01      	subs	r3, #1
 801a332:	9309      	str	r3, [sp, #36]	@ 0x24
 801a334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a336:	3303      	adds	r3, #3
 801a338:	930a      	str	r3, [sp, #40]	@ 0x28
 801a33a:	e70d      	b.n	801a158 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a33c:	d028      	beq.n	801a390 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801a33e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a340:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801a342:	3b01      	subs	r3, #1
 801a344:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801a346:	fb00 5003 	mla	r0, r0, r3, r5
 801a34a:	1400      	asrs	r0, r0, #16
 801a34c:	f53f af21 	bmi.w	801a192 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a350:	3901      	subs	r1, #1
 801a352:	4288      	cmp	r0, r1
 801a354:	f6bf af1d 	bge.w	801a192 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a358:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801a35a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801a35c:	fb01 0303 	mla	r3, r1, r3, r0
 801a360:	141b      	asrs	r3, r3, #16
 801a362:	f53f af16 	bmi.w	801a192 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a366:	3a01      	subs	r2, #1
 801a368:	4293      	cmp	r3, r2
 801a36a:	f6bf af12 	bge.w	801a192 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a36e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a370:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801a374:	1cdf      	adds	r7, r3, #3
 801a376:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801a37a:	f1b9 0f00 	cmp.w	r9, #0
 801a37e:	dc73      	bgt.n	801a468 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801a380:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a382:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a384:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a388:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a38c:	441a      	add	r2, r3
 801a38e:	920a      	str	r2, [sp, #40]	@ 0x28
 801a390:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a392:	2b00      	cmp	r3, #0
 801a394:	f340 8129 	ble.w	801a5ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801a398:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a39c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a39e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a3a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a3a6:	eef0 6a62 	vmov.f32	s13, s5
 801a3aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a3ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a3b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a3b6:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801a3ba:	eef0 6a43 	vmov.f32	s13, s6
 801a3be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a3c2:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801a3c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a3ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a3ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a3d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a3d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a3da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a3de:	ee12 2a90 	vmov	r2, s5
 801a3e2:	eef0 2a47 	vmov.f32	s5, s14
 801a3e6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a3ea:	ee13 2a10 	vmov	r2, s6
 801a3ee:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a3f0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a3f2:	eeb0 3a67 	vmov.f32	s6, s15
 801a3f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a3fa:	9320      	str	r3, [sp, #128]	@ 0x80
 801a3fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a3fe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a400:	3b01      	subs	r3, #1
 801a402:	930d      	str	r3, [sp, #52]	@ 0x34
 801a404:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a406:	bf08      	it	eq
 801a408:	4613      	moveq	r3, r2
 801a40a:	9309      	str	r3, [sp, #36]	@ 0x24
 801a40c:	e696      	b.n	801a13c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a40e:	b149      	cbz	r1, 801a424 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801a410:	5caa      	ldrb	r2, [r5, r2]
 801a412:	4670      	mov	r0, lr
 801a414:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a418:	4422      	add	r2, r4
 801a41a:	4677      	mov	r7, lr
 801a41c:	e6fb      	b.n	801a216 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801a41e:	4670      	mov	r0, lr
 801a420:	4672      	mov	r2, lr
 801a422:	e6f8      	b.n	801a216 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801a424:	4670      	mov	r0, lr
 801a426:	4672      	mov	r2, lr
 801a428:	e7f7      	b.n	801a41a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801a42a:	f110 0c01 	adds.w	ip, r0, #1
 801a42e:	f53f af6a 	bmi.w	801a306 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a432:	4562      	cmp	r2, ip
 801a434:	f6ff af67 	blt.w	801a306 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a438:	f115 0c01 	adds.w	ip, r5, #1
 801a43c:	f53f af63 	bmi.w	801a306 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a440:	4567      	cmp	r7, ip
 801a442:	f6ff af60 	blt.w	801a306 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a446:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a448:	b23f      	sxth	r7, r7
 801a44a:	b212      	sxth	r2, r2
 801a44c:	9002      	str	r0, [sp, #8]
 801a44e:	9701      	str	r7, [sp, #4]
 801a450:	9200      	str	r2, [sp, #0]
 801a452:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801a454:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a456:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801a45a:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801a45e:	4623      	mov	r3, r4
 801a460:	4631      	mov	r1, r6
 801a462:	f7ff fd69 	bl	8019f38 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801a466:	e74e      	b.n	801a306 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a468:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801a46a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801a46c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801a470:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801a472:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801a474:	1400      	asrs	r0, r0, #16
 801a476:	142d      	asrs	r5, r5, #16
 801a478:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a47a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801a47e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801a482:	fb02 5000 	mla	r0, r2, r0, r5
 801a486:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801a488:	f815 e000 	ldrb.w	lr, [r5, r0]
 801a48c:	eb05 0c00 	add.w	ip, r5, r0
 801a490:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a494:	eb04 060e 	add.w	r6, r4, lr
 801a498:	2b00      	cmp	r3, #0
 801a49a:	f000 8097 	beq.w	801a5cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801a49e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801a4a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a4a6:	4425      	add	r5, r4
 801a4a8:	2900      	cmp	r1, #0
 801a4aa:	f000 8098 	beq.w	801a5de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801a4ae:	eb0c 0002 	add.w	r0, ip, r2
 801a4b2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a4b6:	7840      	ldrb	r0, [r0, #1]
 801a4b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a4bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a4c0:	4422      	add	r2, r4
 801a4c2:	4420      	add	r0, r4
 801a4c4:	b29b      	uxth	r3, r3
 801a4c6:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801a4ca:	b289      	uxth	r1, r1
 801a4cc:	f895 e000 	ldrb.w	lr, [r5]
 801a4d0:	3703      	adds	r7, #3
 801a4d2:	f109 39ff 	add.w	r9, r9, #4294967295
 801a4d6:	fb03 f801 	mul.w	r8, r3, r1
 801a4da:	011b      	lsls	r3, r3, #4
 801a4dc:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801a4e0:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801a4e4:	eba3 0308 	sub.w	r3, r3, r8
 801a4e8:	b289      	uxth	r1, r1
 801a4ea:	b29b      	uxth	r3, r3
 801a4ec:	ebac 0c01 	sub.w	ip, ip, r1
 801a4f0:	fb03 fe0e 	mul.w	lr, r3, lr
 801a4f4:	fa1f fc8c 	uxth.w	ip, ip
 801a4f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a4fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a4fc:	fb0c ee0b 	mla	lr, ip, fp, lr
 801a500:	f892 b000 	ldrb.w	fp, [r2]
 801a504:	fb01 ee0b 	mla	lr, r1, fp, lr
 801a508:	f890 b000 	ldrb.w	fp, [r0]
 801a50c:	fb08 ee0b 	mla	lr, r8, fp, lr
 801a510:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801a514:	fb1b fb03 	smulbb	fp, fp, r3
 801a518:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801a51c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a51e:	fb0e be0a 	mla	lr, lr, sl, fp
 801a522:	fa1f fe8e 	uxth.w	lr, lr
 801a526:	f10e 0b01 	add.w	fp, lr, #1
 801a52a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801a52e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a532:	f807 ec06 	strb.w	lr, [r7, #-6]
 801a536:	f895 e001 	ldrb.w	lr, [r5, #1]
 801a53a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801a53e:	fb03 fe0e 	mul.w	lr, r3, lr
 801a542:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a544:	fb0c ee0b 	mla	lr, ip, fp, lr
 801a548:	f892 b001 	ldrb.w	fp, [r2, #1]
 801a54c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801a550:	f890 b001 	ldrb.w	fp, [r0, #1]
 801a554:	fb08 ee0b 	mla	lr, r8, fp, lr
 801a558:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801a55c:	fb1b fb03 	smulbb	fp, fp, r3
 801a560:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801a564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a566:	fb0e be0a 	mla	lr, lr, sl, fp
 801a56a:	fa1f fe8e 	uxth.w	lr, lr
 801a56e:	f10e 0b01 	add.w	fp, lr, #1
 801a572:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801a576:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a57a:	f807 ec05 	strb.w	lr, [r7, #-5]
 801a57e:	78ad      	ldrb	r5, [r5, #2]
 801a580:	78b6      	ldrb	r6, [r6, #2]
 801a582:	436b      	muls	r3, r5
 801a584:	7895      	ldrb	r5, [r2, #2]
 801a586:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a588:	fb0c 3306 	mla	r3, ip, r6, r3
 801a58c:	fb01 3305 	mla	r3, r1, r5, r3
 801a590:	7885      	ldrb	r5, [r0, #2]
 801a592:	fb08 3805 	mla	r8, r8, r5, r3
 801a596:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801a59a:	fb13 f302 	smulbb	r3, r3, r2
 801a59e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801a5a2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801a5a4:	fb08 380a 	mla	r8, r8, sl, r3
 801a5a8:	fa1f f888 	uxth.w	r8, r8
 801a5ac:	f108 0301 	add.w	r3, r8, #1
 801a5b0:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801a5b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a5b6:	4413      	add	r3, r2
 801a5b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a5ba:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a5be:	931d      	str	r3, [sp, #116]	@ 0x74
 801a5c0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a5c2:	f807 8c04 	strb.w	r8, [r7, #-4]
 801a5c6:	4413      	add	r3, r2
 801a5c8:	931e      	str	r3, [sp, #120]	@ 0x78
 801a5ca:	e6d6      	b.n	801a37a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801a5cc:	b151      	cbz	r1, 801a5e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801a5ce:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a5d2:	4630      	mov	r0, r6
 801a5d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a5d8:	4422      	add	r2, r4
 801a5da:	4635      	mov	r5, r6
 801a5dc:	e772      	b.n	801a4c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801a5de:	4630      	mov	r0, r6
 801a5e0:	4632      	mov	r2, r6
 801a5e2:	e76f      	b.n	801a4c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801a5e4:	4630      	mov	r0, r6
 801a5e6:	4632      	mov	r2, r6
 801a5e8:	e7f7      	b.n	801a5da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801a5ea:	b013      	add	sp, #76	@ 0x4c
 801a5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a5f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801a5f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801a5f4:	784c      	ldrb	r4, [r1, #1]
 801a5f6:	f891 a002 	ldrb.w	sl, [r1, #2]
 801a5fa:	0224      	lsls	r4, r4, #8
 801a5fc:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801a600:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801a604:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801a608:	f891 a000 	ldrb.w	sl, [r1]
 801a60c:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801a610:	ea44 040a 	orr.w	r4, r4, sl
 801a614:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801a618:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801a61c:	9401      	str	r4, [sp, #4]
 801a61e:	fb05 c70e 	mla	r7, r5, lr, ip
 801a622:	2d00      	cmp	r5, #0
 801a624:	eb02 0807 	add.w	r8, r2, r7
 801a628:	db72      	blt.n	801a710 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801a62a:	45a9      	cmp	r9, r5
 801a62c:	dd70      	ble.n	801a710 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801a62e:	f1bc 0f00 	cmp.w	ip, #0
 801a632:	db6b      	blt.n	801a70c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801a634:	45e6      	cmp	lr, ip
 801a636:	dd69      	ble.n	801a70c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801a638:	5dd7      	ldrb	r7, [r2, r7]
 801a63a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a63e:	441f      	add	r7, r3
 801a640:	f11c 0201 	adds.w	r2, ip, #1
 801a644:	d467      	bmi.n	801a716 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801a646:	4596      	cmp	lr, r2
 801a648:	dd65      	ble.n	801a716 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801a64a:	2800      	cmp	r0, #0
 801a64c:	d063      	beq.n	801a716 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801a64e:	f898 4001 	ldrb.w	r4, [r8, #1]
 801a652:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a656:	441c      	add	r4, r3
 801a658:	3501      	adds	r5, #1
 801a65a:	d460      	bmi.n	801a71e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801a65c:	45a9      	cmp	r9, r5
 801a65e:	dd5e      	ble.n	801a71e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801a660:	2e00      	cmp	r6, #0
 801a662:	d05c      	beq.n	801a71e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801a664:	f1bc 0f00 	cmp.w	ip, #0
 801a668:	db57      	blt.n	801a71a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801a66a:	45e6      	cmp	lr, ip
 801a66c:	dd55      	ble.n	801a71a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801a66e:	f818 500e 	ldrb.w	r5, [r8, lr]
 801a672:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a676:	441d      	add	r5, r3
 801a678:	f11c 0201 	adds.w	r2, ip, #1
 801a67c:	d452      	bmi.n	801a724 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801a67e:	4596      	cmp	lr, r2
 801a680:	dd50      	ble.n	801a724 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801a682:	2800      	cmp	r0, #0
 801a684:	d04e      	beq.n	801a724 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801a686:	44c6      	add	lr, r8
 801a688:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801a68c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a690:	4413      	add	r3, r2
 801a692:	b280      	uxth	r0, r0
 801a694:	f897 8000 	ldrb.w	r8, [r7]
 801a698:	b2b2      	uxth	r2, r6
 801a69a:	fb00 f602 	mul.w	r6, r0, r2
 801a69e:	0100      	lsls	r0, r0, #4
 801a6a0:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801a6a4:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801a6a8:	1b80      	subs	r0, r0, r6
 801a6aa:	fa1f fc82 	uxth.w	ip, r2
 801a6ae:	b282      	uxth	r2, r0
 801a6b0:	7820      	ldrb	r0, [r4, #0]
 801a6b2:	ebae 0e0c 	sub.w	lr, lr, ip
 801a6b6:	4350      	muls	r0, r2
 801a6b8:	fa1f fe8e 	uxth.w	lr, lr
 801a6bc:	fb0e 0808 	mla	r8, lr, r8, r0
 801a6c0:	7828      	ldrb	r0, [r5, #0]
 801a6c2:	fb0c 8800 	mla	r8, ip, r0, r8
 801a6c6:	7818      	ldrb	r0, [r3, #0]
 801a6c8:	fb06 8000 	mla	r0, r6, r0, r8
 801a6cc:	1200      	asrs	r0, r0, #8
 801a6ce:	7008      	strb	r0, [r1, #0]
 801a6d0:	7860      	ldrb	r0, [r4, #1]
 801a6d2:	f897 8001 	ldrb.w	r8, [r7, #1]
 801a6d6:	4350      	muls	r0, r2
 801a6d8:	fb0e 0808 	mla	r8, lr, r8, r0
 801a6dc:	7868      	ldrb	r0, [r5, #1]
 801a6de:	fb0c 8800 	mla	r8, ip, r0, r8
 801a6e2:	7858      	ldrb	r0, [r3, #1]
 801a6e4:	fb06 8000 	mla	r0, r6, r0, r8
 801a6e8:	1200      	asrs	r0, r0, #8
 801a6ea:	7048      	strb	r0, [r1, #1]
 801a6ec:	78a0      	ldrb	r0, [r4, #2]
 801a6ee:	78bf      	ldrb	r7, [r7, #2]
 801a6f0:	4350      	muls	r0, r2
 801a6f2:	78aa      	ldrb	r2, [r5, #2]
 801a6f4:	fb0e 0007 	mla	r0, lr, r7, r0
 801a6f8:	fb0c 0c02 	mla	ip, ip, r2, r0
 801a6fc:	789a      	ldrb	r2, [r3, #2]
 801a6fe:	fb06 c202 	mla	r2, r6, r2, ip
 801a702:	1212      	asrs	r2, r2, #8
 801a704:	708a      	strb	r2, [r1, #2]
 801a706:	b002      	add	sp, #8
 801a708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a70c:	af01      	add	r7, sp, #4
 801a70e:	e797      	b.n	801a640 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801a710:	ac01      	add	r4, sp, #4
 801a712:	4627      	mov	r7, r4
 801a714:	e7a0      	b.n	801a658 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801a716:	ac01      	add	r4, sp, #4
 801a718:	e79e      	b.n	801a658 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801a71a:	ad01      	add	r5, sp, #4
 801a71c:	e7ac      	b.n	801a678 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801a71e:	ab01      	add	r3, sp, #4
 801a720:	461d      	mov	r5, r3
 801a722:	e7b6      	b.n	801a692 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801a724:	ab01      	add	r3, sp, #4
 801a726:	e7b4      	b.n	801a692 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801a728 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a72c:	b08d      	sub	sp, #52	@ 0x34
 801a72e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a732:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801a736:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a738:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a73a:	9306      	str	r3, [sp, #24]
 801a73c:	6850      	ldr	r0, [r2, #4]
 801a73e:	6812      	ldr	r2, [r2, #0]
 801a740:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801a742:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801a746:	fb00 1303 	mla	r3, r0, r3, r1
 801a74a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a74e:	18d3      	adds	r3, r2, r3
 801a750:	9307      	str	r3, [sp, #28]
 801a752:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a754:	681b      	ldr	r3, [r3, #0]
 801a756:	9308      	str	r3, [sp, #32]
 801a758:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a75a:	685d      	ldr	r5, [r3, #4]
 801a75c:	3504      	adds	r5, #4
 801a75e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a760:	2b00      	cmp	r3, #0
 801a762:	dc03      	bgt.n	801a76c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801a764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a766:	2b00      	cmp	r3, #0
 801a768:	f340 81e6 	ble.w	801ab38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801a76c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a76e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a772:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a776:	1e48      	subs	r0, r1, #1
 801a778:	1e56      	subs	r6, r2, #1
 801a77a:	9b06      	ldr	r3, [sp, #24]
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	f340 80bd 	ble.w	801a8fc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a782:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a784:	1427      	asrs	r7, r4, #16
 801a786:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a78a:	d406      	bmi.n	801a79a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a78c:	4287      	cmp	r7, r0
 801a78e:	da04      	bge.n	801a79a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a790:	2b00      	cmp	r3, #0
 801a792:	db02      	blt.n	801a79a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a794:	42b3      	cmp	r3, r6
 801a796:	f2c0 80b2 	blt.w	801a8fe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801a79a:	3701      	adds	r7, #1
 801a79c:	f100 80a1 	bmi.w	801a8e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801a7a0:	42b9      	cmp	r1, r7
 801a7a2:	f2c0 809e 	blt.w	801a8e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801a7a6:	3301      	adds	r3, #1
 801a7a8:	f100 809b 	bmi.w	801a8e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801a7ac:	429a      	cmp	r2, r3
 801a7ae:	f2c0 8098 	blt.w	801a8e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801a7b2:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801a7b6:	f1bb 0f00 	cmp.w	fp, #0
 801a7ba:	f340 80bf 	ble.w	801a93c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a7be:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a7c0:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801a7c2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a7c4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801a7c8:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801a7cc:	1420      	asrs	r0, r4, #16
 801a7ce:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801a7d0:	ea4f 4723 	mov.w	r7, r3, asr #16
 801a7d4:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801a7d8:	6892      	ldr	r2, [r2, #8]
 801a7da:	f100 8103 	bmi.w	801a9e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801a7de:	f102 3eff 	add.w	lr, r2, #4294967295
 801a7e2:	4570      	cmp	r0, lr
 801a7e4:	f280 80fe 	bge.w	801a9e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801a7e8:	2f00      	cmp	r7, #0
 801a7ea:	f2c0 80fb 	blt.w	801a9e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801a7ee:	f10c 3eff 	add.w	lr, ip, #4294967295
 801a7f2:	4577      	cmp	r7, lr
 801a7f4:	f280 80f6 	bge.w	801a9e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801a7f8:	b212      	sxth	r2, r2
 801a7fa:	fb07 0002 	mla	r0, r7, r2, r0
 801a7fe:	9f08      	ldr	r7, [sp, #32]
 801a800:	f817 8000 	ldrb.w	r8, [r7, r0]
 801a804:	eb07 0e00 	add.w	lr, r7, r0
 801a808:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a80c:	eb05 0c08 	add.w	ip, r5, r8
 801a810:	2b00      	cmp	r3, #0
 801a812:	f000 80d8 	beq.w	801a9c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801a816:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801a81a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a81e:	442f      	add	r7, r5
 801a820:	2900      	cmp	r1, #0
 801a822:	f000 80d9 	beq.w	801a9d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a826:	eb0e 0002 	add.w	r0, lr, r2
 801a82a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801a82e:	7840      	ldrb	r0, [r0, #1]
 801a830:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a834:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a838:	442a      	add	r2, r5
 801a83a:	4428      	add	r0, r5
 801a83c:	b29b      	uxth	r3, r3
 801a83e:	f815 a008 	ldrb.w	sl, [r5, r8]
 801a842:	b289      	uxth	r1, r1
 801a844:	f897 8000 	ldrb.w	r8, [r7]
 801a848:	fb03 f901 	mul.w	r9, r3, r1
 801a84c:	011b      	lsls	r3, r3, #4
 801a84e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a852:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801a856:	eba3 0309 	sub.w	r3, r3, r9
 801a85a:	b289      	uxth	r1, r1
 801a85c:	b29b      	uxth	r3, r3
 801a85e:	ebae 0e01 	sub.w	lr, lr, r1
 801a862:	fb03 f808 	mul.w	r8, r3, r8
 801a866:	fa1f fe8e 	uxth.w	lr, lr
 801a86a:	fb0e 880a 	mla	r8, lr, sl, r8
 801a86e:	f892 a000 	ldrb.w	sl, [r2]
 801a872:	fb01 880a 	mla	r8, r1, sl, r8
 801a876:	f890 a000 	ldrb.w	sl, [r0]
 801a87a:	fb09 880a 	mla	r8, r9, sl, r8
 801a87e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a882:	f886 8000 	strb.w	r8, [r6]
 801a886:	f897 8001 	ldrb.w	r8, [r7, #1]
 801a88a:	f89c a001 	ldrb.w	sl, [ip, #1]
 801a88e:	fb03 f808 	mul.w	r8, r3, r8
 801a892:	fb0e 880a 	mla	r8, lr, sl, r8
 801a896:	f892 a001 	ldrb.w	sl, [r2, #1]
 801a89a:	fb01 880a 	mla	r8, r1, sl, r8
 801a89e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801a8a2:	fb09 880a 	mla	r8, r9, sl, r8
 801a8a6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a8aa:	f886 8001 	strb.w	r8, [r6, #1]
 801a8ae:	78bf      	ldrb	r7, [r7, #2]
 801a8b0:	f89c c002 	ldrb.w	ip, [ip, #2]
 801a8b4:	437b      	muls	r3, r7
 801a8b6:	7892      	ldrb	r2, [r2, #2]
 801a8b8:	fb0e 330c 	mla	r3, lr, ip, r3
 801a8bc:	fb01 3102 	mla	r1, r1, r2, r3
 801a8c0:	7882      	ldrb	r2, [r0, #2]
 801a8c2:	fb09 1902 	mla	r9, r9, r2, r1
 801a8c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a8ca:	f886 9002 	strb.w	r9, [r6, #2]
 801a8ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a8d0:	3603      	adds	r6, #3
 801a8d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a8d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a8d8:	441c      	add	r4, r3
 801a8da:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a8dc:	4413      	add	r3, r2
 801a8de:	9318      	str	r3, [sp, #96]	@ 0x60
 801a8e0:	e769      	b.n	801a7b6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801a8e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a8e4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801a8e6:	441c      	add	r4, r3
 801a8e8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a8ea:	443b      	add	r3, r7
 801a8ec:	9318      	str	r3, [sp, #96]	@ 0x60
 801a8ee:	9b06      	ldr	r3, [sp, #24]
 801a8f0:	3b01      	subs	r3, #1
 801a8f2:	9306      	str	r3, [sp, #24]
 801a8f4:	9b07      	ldr	r3, [sp, #28]
 801a8f6:	3303      	adds	r3, #3
 801a8f8:	9307      	str	r3, [sp, #28]
 801a8fa:	e73e      	b.n	801a77a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a8fc:	d026      	beq.n	801a94c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801a8fe:	9b06      	ldr	r3, [sp, #24]
 801a900:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801a902:	3b01      	subs	r3, #1
 801a904:	fb00 4003 	mla	r0, r0, r3, r4
 801a908:	1400      	asrs	r0, r0, #16
 801a90a:	f53f af52 	bmi.w	801a7b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a90e:	3901      	subs	r1, #1
 801a910:	4288      	cmp	r0, r1
 801a912:	f6bf af4e 	bge.w	801a7b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a916:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a918:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801a91a:	fb01 0303 	mla	r3, r1, r3, r0
 801a91e:	141b      	asrs	r3, r3, #16
 801a920:	f53f af47 	bmi.w	801a7b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a924:	3a01      	subs	r2, #1
 801a926:	4293      	cmp	r3, r2
 801a928:	f6bf af43 	bge.w	801a7b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a92c:	9b07      	ldr	r3, [sp, #28]
 801a92e:	f8dd a018 	ldr.w	sl, [sp, #24]
 801a932:	f103 0803 	add.w	r8, r3, #3
 801a936:	f1ba 0f00 	cmp.w	sl, #0
 801a93a:	dc71      	bgt.n	801aa20 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801a93c:	9b06      	ldr	r3, [sp, #24]
 801a93e:	9a07      	ldr	r2, [sp, #28]
 801a940:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a944:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a948:	441a      	add	r2, r3
 801a94a:	9207      	str	r2, [sp, #28]
 801a94c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a94e:	2b00      	cmp	r3, #0
 801a950:	f340 80f2 	ble.w	801ab38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801a954:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a958:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a95a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a95e:	eeb0 6a62 	vmov.f32	s12, s5
 801a962:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a966:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a96a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a96e:	ee16 4a10 	vmov	r4, s12
 801a972:	eeb0 6a43 	vmov.f32	s12, s6
 801a976:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a97a:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801a97e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a982:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a986:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a98a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a98e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a992:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a996:	ee12 2a90 	vmov	r2, s5
 801a99a:	eef0 2a47 	vmov.f32	s5, s14
 801a99e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9a2:	ee13 2a10 	vmov	r2, s6
 801a9a6:	9319      	str	r3, [sp, #100]	@ 0x64
 801a9a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a9aa:	eeb0 3a67 	vmov.f32	s6, s15
 801a9ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9b2:	931a      	str	r3, [sp, #104]	@ 0x68
 801a9b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a9b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a9b8:	3b01      	subs	r3, #1
 801a9ba:	9309      	str	r3, [sp, #36]	@ 0x24
 801a9bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a9be:	bf08      	it	eq
 801a9c0:	4613      	moveq	r3, r2
 801a9c2:	9306      	str	r3, [sp, #24]
 801a9c4:	e6cb      	b.n	801a75e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801a9c6:	b151      	cbz	r1, 801a9de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a9c8:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801a9cc:	4660      	mov	r0, ip
 801a9ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a9d2:	442a      	add	r2, r5
 801a9d4:	4667      	mov	r7, ip
 801a9d6:	e731      	b.n	801a83c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801a9d8:	4660      	mov	r0, ip
 801a9da:	4662      	mov	r2, ip
 801a9dc:	e72e      	b.n	801a83c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801a9de:	4660      	mov	r0, ip
 801a9e0:	4662      	mov	r2, ip
 801a9e2:	e7f7      	b.n	801a9d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801a9e4:	f110 0e01 	adds.w	lr, r0, #1
 801a9e8:	f53f af71 	bmi.w	801a8ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801a9ec:	4572      	cmp	r2, lr
 801a9ee:	f6ff af6e 	blt.w	801a8ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801a9f2:	f117 0e01 	adds.w	lr, r7, #1
 801a9f6:	f53f af6a 	bmi.w	801a8ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801a9fa:	45f4      	cmp	ip, lr
 801a9fc:	f6ff af67 	blt.w	801a8ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801aa00:	b212      	sxth	r2, r2
 801aa02:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801aa06:	fa0f f38c 	sxth.w	r3, ip
 801aa0a:	9200      	str	r2, [sp, #0]
 801aa0c:	4631      	mov	r1, r6
 801aa0e:	9a08      	ldr	r2, [sp, #32]
 801aa10:	9301      	str	r3, [sp, #4]
 801aa12:	462b      	mov	r3, r5
 801aa14:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801aa18:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801aa1a:	f7ff fde9 	bl	801a5f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801aa1e:	e756      	b.n	801a8ce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801aa20:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801aa22:	1426      	asrs	r6, r4, #16
 801aa24:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801aa26:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801aa2a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801aa2e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801aa30:	1400      	asrs	r0, r0, #16
 801aa32:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801aa36:	fb02 6000 	mla	r0, r2, r0, r6
 801aa3a:	9e08      	ldr	r6, [sp, #32]
 801aa3c:	f816 e000 	ldrb.w	lr, [r6, r0]
 801aa40:	eb06 0c00 	add.w	ip, r6, r0
 801aa44:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801aa48:	eb05 070e 	add.w	r7, r5, lr
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	d064      	beq.n	801ab1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801aa50:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801aa54:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801aa58:	442e      	add	r6, r5
 801aa5a:	2900      	cmp	r1, #0
 801aa5c:	d066      	beq.n	801ab2c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801aa5e:	eb0c 0002 	add.w	r0, ip, r2
 801aa62:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801aa66:	7840      	ldrb	r0, [r0, #1]
 801aa68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801aa6c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aa70:	442a      	add	r2, r5
 801aa72:	4428      	add	r0, r5
 801aa74:	b29b      	uxth	r3, r3
 801aa76:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801aa7a:	b289      	uxth	r1, r1
 801aa7c:	f896 e000 	ldrb.w	lr, [r6]
 801aa80:	f108 0803 	add.w	r8, r8, #3
 801aa84:	f10a 3aff 	add.w	sl, sl, #4294967295
 801aa88:	fb03 f901 	mul.w	r9, r3, r1
 801aa8c:	011b      	lsls	r3, r3, #4
 801aa8e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801aa92:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801aa96:	eba3 0309 	sub.w	r3, r3, r9
 801aa9a:	b289      	uxth	r1, r1
 801aa9c:	b29b      	uxth	r3, r3
 801aa9e:	ebac 0c01 	sub.w	ip, ip, r1
 801aaa2:	fb03 fe0e 	mul.w	lr, r3, lr
 801aaa6:	fa1f fc8c 	uxth.w	ip, ip
 801aaaa:	fb0c ee0b 	mla	lr, ip, fp, lr
 801aaae:	f892 b000 	ldrb.w	fp, [r2]
 801aab2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801aab6:	f890 b000 	ldrb.w	fp, [r0]
 801aaba:	fb09 ee0b 	mla	lr, r9, fp, lr
 801aabe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801aac2:	f808 ec06 	strb.w	lr, [r8, #-6]
 801aac6:	f896 e001 	ldrb.w	lr, [r6, #1]
 801aaca:	f897 b001 	ldrb.w	fp, [r7, #1]
 801aace:	fb03 fe0e 	mul.w	lr, r3, lr
 801aad2:	fb0c ee0b 	mla	lr, ip, fp, lr
 801aad6:	f892 b001 	ldrb.w	fp, [r2, #1]
 801aada:	fb01 ee0b 	mla	lr, r1, fp, lr
 801aade:	f890 b001 	ldrb.w	fp, [r0, #1]
 801aae2:	fb09 ee0b 	mla	lr, r9, fp, lr
 801aae6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801aaea:	f808 ec05 	strb.w	lr, [r8, #-5]
 801aaee:	78b6      	ldrb	r6, [r6, #2]
 801aaf0:	78bf      	ldrb	r7, [r7, #2]
 801aaf2:	4373      	muls	r3, r6
 801aaf4:	7896      	ldrb	r6, [r2, #2]
 801aaf6:	7882      	ldrb	r2, [r0, #2]
 801aaf8:	fb0c 3307 	mla	r3, ip, r7, r3
 801aafc:	fb01 3306 	mla	r3, r1, r6, r3
 801ab00:	fb09 3902 	mla	r9, r9, r2, r3
 801ab04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ab06:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ab08:	441c      	add	r4, r3
 801ab0a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ab0c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ab10:	4413      	add	r3, r2
 801ab12:	f808 9c04 	strb.w	r9, [r8, #-4]
 801ab16:	9318      	str	r3, [sp, #96]	@ 0x60
 801ab18:	e70d      	b.n	801a936 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801ab1a:	b151      	cbz	r1, 801ab32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801ab1c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ab20:	4638      	mov	r0, r7
 801ab22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ab26:	442a      	add	r2, r5
 801ab28:	463e      	mov	r6, r7
 801ab2a:	e7a3      	b.n	801aa74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801ab2c:	4638      	mov	r0, r7
 801ab2e:	463a      	mov	r2, r7
 801ab30:	e7a0      	b.n	801aa74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801ab32:	4638      	mov	r0, r7
 801ab34:	463a      	mov	r2, r7
 801ab36:	e7f7      	b.n	801ab28 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801ab38:	b00d      	add	sp, #52	@ 0x34
 801ab3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ab3e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801ab3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab42:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801ab46:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801ab4a:	2d00      	cmp	r5, #0
 801ab4c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801ab50:	fb05 700c 	mla	r0, r5, ip, r7
 801ab54:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801ab58:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801ab5c:	eb02 0800 	add.w	r8, r2, r0
 801ab60:	f2c0 8118 	blt.w	801ad94 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801ab64:	45a9      	cmp	r9, r5
 801ab66:	f340 8115 	ble.w	801ad94 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801ab6a:	2f00      	cmp	r7, #0
 801ab6c:	f2c0 8110 	blt.w	801ad90 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801ab70:	45bc      	cmp	ip, r7
 801ab72:	f340 810d 	ble.w	801ad90 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801ab76:	5c12      	ldrb	r2, [r2, r0]
 801ab78:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801ab7c:	1c7a      	adds	r2, r7, #1
 801ab7e:	f100 810c 	bmi.w	801ad9a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801ab82:	4594      	cmp	ip, r2
 801ab84:	f340 8109 	ble.w	801ad9a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801ab88:	2c00      	cmp	r4, #0
 801ab8a:	f000 8108 	beq.w	801ad9e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801ab8e:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ab92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ab96:	3501      	adds	r5, #1
 801ab98:	f100 8105 	bmi.w	801ada6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801ab9c:	45a9      	cmp	r9, r5
 801ab9e:	f340 8102 	ble.w	801ada6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801aba2:	f1be 0f00 	cmp.w	lr, #0
 801aba6:	f000 8101 	beq.w	801adac <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801abaa:	2f00      	cmp	r7, #0
 801abac:	f2c0 80f9 	blt.w	801ada2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801abb0:	45bc      	cmp	ip, r7
 801abb2:	f340 80f6 	ble.w	801ada2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801abb6:	f818 200c 	ldrb.w	r2, [r8, ip]
 801abba:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801abbe:	3701      	adds	r7, #1
 801abc0:	f100 80f7 	bmi.w	801adb2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801abc4:	45bc      	cmp	ip, r7
 801abc6:	f340 80f4 	ble.w	801adb2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801abca:	2c00      	cmp	r4, #0
 801abcc:	f000 80f3 	beq.w	801adb6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801abd0:	44c4      	add	ip, r8
 801abd2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801abd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801abda:	fa1f fc84 	uxth.w	ip, r4
 801abde:	fa1f f48e 	uxth.w	r4, lr
 801abe2:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801abe6:	fb04 fe0c 	mul.w	lr, r4, ip
 801abea:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801abee:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801abf2:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801abf6:	ebac 070e 	sub.w	r7, ip, lr
 801abfa:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801abfe:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801ac02:	b2a4      	uxth	r4, r4
 801ac04:	b2bf      	uxth	r7, r7
 801ac06:	1b1b      	subs	r3, r3, r4
 801ac08:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801ac0c:	fb07 fc0a 	mul.w	ip, r7, sl
 801ac10:	b29b      	uxth	r3, r3
 801ac12:	fb03 cc0b 	mla	ip, r3, fp, ip
 801ac16:	9300      	str	r3, [sp, #0]
 801ac18:	fb04 cc09 	mla	ip, r4, r9, ip
 801ac1c:	fb0e cc08 	mla	ip, lr, r8, ip
 801ac20:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ac24:	9301      	str	r3, [sp, #4]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	f000 80af 	beq.w	801ad8a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801ac2c:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801ac30:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801ac34:	fb0b fc0c 	mul.w	ip, fp, ip
 801ac38:	fb0b f606 	mul.w	r6, fp, r6
 801ac3c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801ac40:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801ac44:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801ac48:	44dc      	add	ip, fp
 801ac4a:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801ac4e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801ac52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ac56:	fb0a fb0b 	mul.w	fp, sl, fp
 801ac5a:	fb0a fa00 	mul.w	sl, sl, r0
 801ac5e:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801ac62:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801ac66:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801ac6a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ac6e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801ac72:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ac76:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801ac7a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ac7e:	0a36      	lsrs	r6, r6, #8
 801ac80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ac84:	44dc      	add	ip, fp
 801ac86:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801ac8a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801ac8e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801ac92:	fb09 fb0b 	mul.w	fp, r9, fp
 801ac96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ac9a:	fb09 f905 	mul.w	r9, r9, r5
 801ac9e:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801aca2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801aca6:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801acaa:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801acae:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801acb2:	fb0c fc07 	mul.w	ip, ip, r7
 801acb6:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801acba:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801acbe:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801acc2:	4458      	add	r0, fp
 801acc4:	fb08 f505 	mul.w	r5, r8, r5
 801acc8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801accc:	fb08 f802 	mul.w	r8, r8, r2
 801acd0:	0a00      	lsrs	r0, r0, #8
 801acd2:	0a2a      	lsrs	r2, r5, #8
 801acd4:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801acd8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801acdc:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ace0:	4415      	add	r5, r2
 801ace2:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801ace6:	0a2d      	lsrs	r5, r5, #8
 801ace8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801acec:	9a00      	ldr	r2, [sp, #0]
 801acee:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801acf2:	fb03 cc02 	mla	ip, r3, r2, ip
 801acf6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801acfa:	9b01      	ldr	r3, [sp, #4]
 801acfc:	fb05 c50e 	mla	r5, r5, lr, ip
 801ad00:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801ad04:	fb00 5004 	mla	r0, r0, r4, r5
 801ad08:	0a00      	lsrs	r0, r0, #8
 801ad0a:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801ad0e:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801ad12:	4378      	muls	r0, r7
 801ad14:	fb02 0006 	mla	r0, r2, r6, r0
 801ad18:	fb0e 0e08 	mla	lr, lr, r8, r0
 801ad1c:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801ad20:	fb04 e000 	mla	r0, r4, r0, lr
 801ad24:	0a00      	lsrs	r0, r0, #8
 801ad26:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801ad2a:	4328      	orrs	r0, r5
 801ad2c:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801ad30:	b2ad      	uxth	r5, r5
 801ad32:	b2c4      	uxtb	r4, r0
 801ad34:	436b      	muls	r3, r5
 801ad36:	fb14 f405 	smulbb	r4, r4, r5
 801ad3a:	1c5a      	adds	r2, r3, #1
 801ad3c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ad40:	780b      	ldrb	r3, [r1, #0]
 801ad42:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801ad46:	b2d2      	uxtb	r2, r2
 801ad48:	fb03 4302 	mla	r3, r3, r2, r4
 801ad4c:	b29b      	uxth	r3, r3
 801ad4e:	1c5c      	adds	r4, r3, #1
 801ad50:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801ad54:	784c      	ldrb	r4, [r1, #1]
 801ad56:	fb14 f402 	smulbb	r4, r4, r2
 801ad5a:	121b      	asrs	r3, r3, #8
 801ad5c:	700b      	strb	r3, [r1, #0]
 801ad5e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801ad62:	fb03 4305 	mla	r3, r3, r5, r4
 801ad66:	b29b      	uxth	r3, r3
 801ad68:	1c5c      	adds	r4, r3, #1
 801ad6a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801ad6e:	0c04      	lsrs	r4, r0, #16
 801ad70:	7888      	ldrb	r0, [r1, #2]
 801ad72:	121b      	asrs	r3, r3, #8
 801ad74:	fb10 f002 	smulbb	r0, r0, r2
 801ad78:	704b      	strb	r3, [r1, #1]
 801ad7a:	fb04 0005 	mla	r0, r4, r5, r0
 801ad7e:	b280      	uxth	r0, r0
 801ad80:	1c43      	adds	r3, r0, #1
 801ad82:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ad86:	1200      	asrs	r0, r0, #8
 801ad88:	7088      	strb	r0, [r1, #2]
 801ad8a:	b003      	add	sp, #12
 801ad8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad90:	2600      	movs	r6, #0
 801ad92:	e6f3      	b.n	801ab7c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801ad94:	2000      	movs	r0, #0
 801ad96:	4606      	mov	r6, r0
 801ad98:	e6fd      	b.n	801ab96 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801ad9a:	2000      	movs	r0, #0
 801ad9c:	e6fb      	b.n	801ab96 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801ad9e:	4620      	mov	r0, r4
 801ada0:	e6f9      	b.n	801ab96 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801ada2:	2500      	movs	r5, #0
 801ada4:	e70b      	b.n	801abbe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801ada6:	2200      	movs	r2, #0
 801ada8:	4615      	mov	r5, r2
 801adaa:	e716      	b.n	801abda <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801adac:	4672      	mov	r2, lr
 801adae:	4675      	mov	r5, lr
 801adb0:	e713      	b.n	801abda <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801adb2:	2200      	movs	r2, #0
 801adb4:	e711      	b.n	801abda <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801adb6:	4622      	mov	r2, r4
 801adb8:	e70f      	b.n	801abda <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801adba <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801adba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adbe:	b09f      	sub	sp, #124	@ 0x7c
 801adc0:	921b      	str	r2, [sp, #108]	@ 0x6c
 801adc2:	9309      	str	r3, [sp, #36]	@ 0x24
 801adc4:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801adc6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801adca:	901d      	str	r0, [sp, #116]	@ 0x74
 801adcc:	931c      	str	r3, [sp, #112]	@ 0x70
 801adce:	6850      	ldr	r0, [r2, #4]
 801add0:	9119      	str	r1, [sp, #100]	@ 0x64
 801add2:	6812      	ldr	r2, [r2, #0]
 801add4:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801add6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801adda:	fb00 1303 	mla	r3, r0, r3, r1
 801adde:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ade2:	18d3      	adds	r3, r2, r3
 801ade4:	930c      	str	r3, [sp, #48]	@ 0x30
 801ade6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	9312      	str	r3, [sp, #72]	@ 0x48
 801adec:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801adee:	685e      	ldr	r6, [r3, #4]
 801adf0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801adf4:	3604      	adds	r6, #4
 801adf6:	930d      	str	r3, [sp, #52]	@ 0x34
 801adf8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	dc03      	bgt.n	801ae06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801adfe:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	f340 8378 	ble.w	801b4f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801ae06:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801ae08:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ae0c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ae10:	1e48      	subs	r0, r1, #1
 801ae12:	1e57      	subs	r7, r2, #1
 801ae14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae16:	2b00      	cmp	r3, #0
 801ae18:	f340 818c 	ble.w	801b134 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801ae1c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801ae1e:	142b      	asrs	r3, r5, #16
 801ae20:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801ae24:	d406      	bmi.n	801ae34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ae26:	4584      	cmp	ip, r0
 801ae28:	da04      	bge.n	801ae34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	db02      	blt.n	801ae34 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ae2e:	42bb      	cmp	r3, r7
 801ae30:	f2c0 8181 	blt.w	801b136 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801ae34:	f11c 0c01 	adds.w	ip, ip, #1
 801ae38:	f100 816f 	bmi.w	801b11a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801ae3c:	4561      	cmp	r1, ip
 801ae3e:	f2c0 816c 	blt.w	801b11a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801ae42:	3301      	adds	r3, #1
 801ae44:	f100 8169 	bmi.w	801b11a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801ae48:	429a      	cmp	r2, r3
 801ae4a:	f2c0 8166 	blt.w	801b11a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801ae4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae50:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ae52:	931a      	str	r3, [sp, #104]	@ 0x68
 801ae54:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	f340 818c 	ble.w	801b174 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801ae5c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801ae5e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801ae62:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ae66:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ae6a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801ae6c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801ae70:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801ae72:	141b      	asrs	r3, r3, #16
 801ae74:	f100 81d0 	bmi.w	801b218 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ae78:	f100 38ff 	add.w	r8, r0, #4294967295
 801ae7c:	4543      	cmp	r3, r8
 801ae7e:	f280 81cb 	bge.w	801b218 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ae82:	f1bc 0f00 	cmp.w	ip, #0
 801ae86:	f2c0 81c7 	blt.w	801b218 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ae8a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801ae8e:	45c4      	cmp	ip, r8
 801ae90:	f280 81c2 	bge.w	801b218 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ae94:	b200      	sxth	r0, r0
 801ae96:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ae98:	fb0c 3300 	mla	r3, ip, r0, r3
 801ae9c:	eb04 0803 	add.w	r8, r4, r3
 801aea0:	5ce3      	ldrb	r3, [r4, r3]
 801aea2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801aea6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801aeaa:	2a00      	cmp	r2, #0
 801aeac:	f000 81a9 	beq.w	801b202 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801aeb0:	f898 c001 	ldrb.w	ip, [r8, #1]
 801aeb4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801aeb8:	940e      	str	r4, [sp, #56]	@ 0x38
 801aeba:	0e24      	lsrs	r4, r4, #24
 801aebc:	9415      	str	r4, [sp, #84]	@ 0x54
 801aebe:	b179      	cbz	r1, 801aee0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801aec0:	eb08 0c00 	add.w	ip, r8, r0
 801aec4:	f818 0000 	ldrb.w	r0, [r8, r0]
 801aec8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801aecc:	900a      	str	r0, [sp, #40]	@ 0x28
 801aece:	0e00      	lsrs	r0, r0, #24
 801aed0:	9013      	str	r0, [sp, #76]	@ 0x4c
 801aed2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801aed6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801aeda:	900f      	str	r0, [sp, #60]	@ 0x3c
 801aedc:	0e00      	lsrs	r0, r0, #24
 801aede:	9016      	str	r0, [sp, #88]	@ 0x58
 801aee0:	b292      	uxth	r2, r2
 801aee2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801aee4:	b289      	uxth	r1, r1
 801aee6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801aee8:	fb02 f901 	mul.w	r9, r2, r1
 801aeec:	0112      	lsls	r2, r2, #4
 801aeee:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801aef2:	eba2 0809 	sub.w	r8, r2, r9
 801aef6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801aefa:	b289      	uxth	r1, r1
 801aefc:	fa1f f888 	uxth.w	r8, r8
 801af00:	1a52      	subs	r2, r2, r1
 801af02:	fb08 f000 	mul.w	r0, r8, r0
 801af06:	b292      	uxth	r2, r2
 801af08:	fb02 000e 	mla	r0, r2, lr, r0
 801af0c:	fb01 0004 	mla	r0, r1, r4, r0
 801af10:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801af12:	fb09 0004 	mla	r0, r9, r4, r0
 801af16:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801af1a:	2800      	cmp	r0, #0
 801af1c:	f000 80f2 	beq.w	801b104 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801af20:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801af24:	d01b      	beq.n	801af5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801af26:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801af2a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801af2e:	fb0e fa0a 	mul.w	sl, lr, sl
 801af32:	fb0e fe03 	mul.w	lr, lr, r3
 801af36:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801af3a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801af3e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801af42:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801af46:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801af4a:	4453      	add	r3, sl
 801af4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801af50:	0a1b      	lsrs	r3, r3, #8
 801af52:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801af56:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801af5a:	ea43 030c 	orr.w	r3, r3, ip
 801af5e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801af60:	2cff      	cmp	r4, #255	@ 0xff
 801af62:	d021      	beq.n	801afa8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801af64:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801af66:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801af6a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801af6c:	fb04 fb0b 	mul.w	fp, r4, fp
 801af70:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801af72:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801af76:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801af78:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801af7c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801af80:	fb04 fa0a 	mul.w	sl, r4, sl
 801af84:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801af88:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801af8c:	44de      	add	lr, fp
 801af8e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801af92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801af96:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801af9a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801af9e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801afa2:	ea4e 040a 	orr.w	r4, lr, sl
 801afa6:	940e      	str	r4, [sp, #56]	@ 0x38
 801afa8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801afaa:	2cff      	cmp	r4, #255	@ 0xff
 801afac:	d021      	beq.n	801aff2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801afae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801afb0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801afb4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801afb6:	fb04 fb0b 	mul.w	fp, r4, fp
 801afba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801afbc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801afc0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801afc2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801afc6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801afca:	fb04 fa0a 	mul.w	sl, r4, sl
 801afce:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801afd2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801afd6:	44de      	add	lr, fp
 801afd8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801afdc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801afe0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801afe4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801afe8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801afec:	ea4e 040a 	orr.w	r4, lr, sl
 801aff0:	940a      	str	r4, [sp, #40]	@ 0x28
 801aff2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801aff4:	2cff      	cmp	r4, #255	@ 0xff
 801aff6:	d021      	beq.n	801b03c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801aff8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801affa:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801affe:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b000:	fb04 fb0b 	mul.w	fp, r4, fp
 801b004:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801b006:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b00a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b00c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b010:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b014:	fb04 fa0a 	mul.w	sl, r4, sl
 801b018:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b01c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b020:	44de      	add	lr, fp
 801b022:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b026:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b02a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b02e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b032:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b036:	ea4e 040a 	orr.w	r4, lr, sl
 801b03a:	940f      	str	r4, [sp, #60]	@ 0x3c
 801b03c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b03e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801b042:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b046:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801b04a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b04c:	fb08 fc0c 	mul.w	ip, r8, ip
 801b050:	fb02 cc0e 	mla	ip, r2, lr, ip
 801b054:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801b058:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801b05a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801b05e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801b062:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b064:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b068:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801b06c:	fb08 f80e 	mul.w	r8, r8, lr
 801b070:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b074:	fb02 8303 	mla	r3, r2, r3, r8
 801b078:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b07a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b07e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801b082:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b084:	fb01 330a 	mla	r3, r1, sl, r3
 801b088:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801b08c:	fb09 3901 	mla	r9, r9, r1, r3
 801b090:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b092:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801b094:	4343      	muls	r3, r0
 801b096:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b09a:	1c58      	adds	r0, r3, #1
 801b09c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801b0a0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b0a4:	ea4c 0c09 	orr.w	ip, ip, r9
 801b0a8:	783b      	ldrb	r3, [r7, #0]
 801b0aa:	fa5f f28c 	uxtb.w	r2, ip
 801b0ae:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801b0b2:	fb12 f201 	smulbb	r2, r2, r1
 801b0b6:	b2c0      	uxtb	r0, r0
 801b0b8:	fb03 2300 	mla	r3, r3, r0, r2
 801b0bc:	b29b      	uxth	r3, r3
 801b0be:	1c5a      	adds	r2, r3, #1
 801b0c0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b0c4:	787a      	ldrb	r2, [r7, #1]
 801b0c6:	fb12 f200 	smulbb	r2, r2, r0
 801b0ca:	121b      	asrs	r3, r3, #8
 801b0cc:	703b      	strb	r3, [r7, #0]
 801b0ce:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801b0d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801b0d6:	fb03 2301 	mla	r3, r3, r1, r2
 801b0da:	b29b      	uxth	r3, r3
 801b0dc:	1c5a      	adds	r2, r3, #1
 801b0de:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b0e2:	121b      	asrs	r3, r3, #8
 801b0e4:	707b      	strb	r3, [r7, #1]
 801b0e6:	78bb      	ldrb	r3, [r7, #2]
 801b0e8:	fb13 f000 	smulbb	r0, r3, r0
 801b0ec:	fb0c 0c01 	mla	ip, ip, r1, r0
 801b0f0:	fa1f fc8c 	uxth.w	ip, ip
 801b0f4:	f10c 0301 	add.w	r3, ip, #1
 801b0f8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b0fc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b100:	f887 c002 	strb.w	ip, [r7, #2]
 801b104:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801b106:	3703      	adds	r7, #3
 801b108:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801b10a:	441a      	add	r2, r3
 801b10c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b10e:	441d      	add	r5, r3
 801b110:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801b112:	9229      	str	r2, [sp, #164]	@ 0xa4
 801b114:	3b01      	subs	r3, #1
 801b116:	931a      	str	r3, [sp, #104]	@ 0x68
 801b118:	e69c      	b.n	801ae54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801b11a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801b11c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b11e:	441c      	add	r4, r3
 801b120:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b122:	441d      	add	r5, r3
 801b124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b126:	9429      	str	r4, [sp, #164]	@ 0xa4
 801b128:	3b01      	subs	r3, #1
 801b12a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b12c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b12e:	3303      	adds	r3, #3
 801b130:	930c      	str	r3, [sp, #48]	@ 0x30
 801b132:	e66f      	b.n	801ae14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b134:	d026      	beq.n	801b184 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801b136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b138:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801b13a:	3b01      	subs	r3, #1
 801b13c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b13e:	fb00 4003 	mla	r0, r0, r3, r4
 801b142:	1400      	asrs	r0, r0, #16
 801b144:	f53f ae83 	bmi.w	801ae4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b148:	3901      	subs	r1, #1
 801b14a:	4288      	cmp	r0, r1
 801b14c:	f6bf ae7f 	bge.w	801ae4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b150:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801b152:	fb01 5303 	mla	r3, r1, r3, r5
 801b156:	141b      	asrs	r3, r3, #16
 801b158:	f53f ae79 	bmi.w	801ae4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b15c:	3a01      	subs	r2, #1
 801b15e:	4293      	cmp	r3, r2
 801b160:	f6bf ae75 	bge.w	801ae4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b164:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b166:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801b16a:	f103 0e03 	add.w	lr, r3, #3
 801b16e:	f1bb 0f00 	cmp.w	fp, #0
 801b172:	dc71      	bgt.n	801b258 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801b174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b176:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b17a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b17c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b180:	4423      	add	r3, r4
 801b182:	930c      	str	r3, [sp, #48]	@ 0x30
 801b184:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b186:	2b00      	cmp	r3, #0
 801b188:	f340 81b5 	ble.w	801b4f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801b18c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b190:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b192:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b196:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b19a:	eef0 6a62 	vmov.f32	s13, s5
 801b19e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b1a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b1a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b1aa:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801b1ae:	eef0 6a43 	vmov.f32	s13, s6
 801b1b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b1b6:	ee16 5a90 	vmov	r5, s13
 801b1ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b1be:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b1c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b1c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b1ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b1ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b1d2:	ee12 2a90 	vmov	r2, s5
 801b1d6:	eef0 2a47 	vmov.f32	s5, s14
 801b1da:	fb92 f3f3 	sdiv	r3, r2, r3
 801b1de:	ee13 2a10 	vmov	r2, s6
 801b1e2:	932b      	str	r3, [sp, #172]	@ 0xac
 801b1e4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b1e6:	eeb0 3a67 	vmov.f32	s6, s15
 801b1ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801b1ee:	932c      	str	r3, [sp, #176]	@ 0xb0
 801b1f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b1f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801b1f4:	3b01      	subs	r3, #1
 801b1f6:	9319      	str	r3, [sp, #100]	@ 0x64
 801b1f8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b1fa:	bf08      	it	eq
 801b1fc:	4613      	moveq	r3, r2
 801b1fe:	9309      	str	r3, [sp, #36]	@ 0x24
 801b200:	e5fa      	b.n	801adf8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b202:	2900      	cmp	r1, #0
 801b204:	f43f ae6c 	beq.w	801aee0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b208:	f818 0000 	ldrb.w	r0, [r8, r0]
 801b20c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801b210:	900a      	str	r0, [sp, #40]	@ 0x28
 801b212:	0e00      	lsrs	r0, r0, #24
 801b214:	9013      	str	r0, [sp, #76]	@ 0x4c
 801b216:	e663      	b.n	801aee0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b218:	f113 0801 	adds.w	r8, r3, #1
 801b21c:	f53f af72 	bmi.w	801b104 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b220:	4540      	cmp	r0, r8
 801b222:	f6ff af6f 	blt.w	801b104 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b226:	f11c 0801 	adds.w	r8, ip, #1
 801b22a:	f53f af6b 	bmi.w	801b104 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b22e:	45c6      	cmp	lr, r8
 801b230:	f6ff af68 	blt.w	801b104 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b234:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801b236:	b200      	sxth	r0, r0
 801b238:	9302      	str	r3, [sp, #8]
 801b23a:	fa0f f38e 	sxth.w	r3, lr
 801b23e:	9000      	str	r0, [sp, #0]
 801b240:	9301      	str	r3, [sp, #4]
 801b242:	4633      	mov	r3, r6
 801b244:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801b246:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801b24a:	e9cd c203 	strd	ip, r2, [sp, #12]
 801b24e:	4639      	mov	r1, r7
 801b250:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b252:	f7ff fc74 	bl	801ab3e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801b256:	e755      	b.n	801b104 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b258:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801b25a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b25e:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b260:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b264:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b266:	1427      	asrs	r7, r4, #16
 801b268:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b26a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b26e:	142b      	asrs	r3, r5, #16
 801b270:	fb01 7303 	mla	r3, r1, r3, r7
 801b274:	18e7      	adds	r7, r4, r3
 801b276:	5ce3      	ldrb	r3, [r4, r3]
 801b278:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801b27c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801b280:	2a00      	cmp	r2, #0
 801b282:	f000 812e 	beq.w	801b4e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801b286:	f897 8001 	ldrb.w	r8, [r7, #1]
 801b28a:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801b28e:	9410      	str	r4, [sp, #64]	@ 0x40
 801b290:	0e24      	lsrs	r4, r4, #24
 801b292:	9417      	str	r4, [sp, #92]	@ 0x5c
 801b294:	b170      	cbz	r0, 801b2b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801b296:	eb07 0801 	add.w	r8, r7, r1
 801b29a:	5c79      	ldrb	r1, [r7, r1]
 801b29c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b2a0:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b2a2:	0e09      	lsrs	r1, r1, #24
 801b2a4:	9114      	str	r1, [sp, #80]	@ 0x50
 801b2a6:	f898 1001 	ldrb.w	r1, [r8, #1]
 801b2aa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b2ae:	9111      	str	r1, [sp, #68]	@ 0x44
 801b2b0:	0e09      	lsrs	r1, r1, #24
 801b2b2:	9118      	str	r1, [sp, #96]	@ 0x60
 801b2b4:	b292      	uxth	r2, r2
 801b2b6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801b2b8:	b280      	uxth	r0, r0
 801b2ba:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b2bc:	fb02 f900 	mul.w	r9, r2, r0
 801b2c0:	0112      	lsls	r2, r2, #4
 801b2c2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b2c6:	eba2 0809 	sub.w	r8, r2, r9
 801b2ca:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801b2ce:	b280      	uxth	r0, r0
 801b2d0:	fa1f f888 	uxth.w	r8, r8
 801b2d4:	1a12      	subs	r2, r2, r0
 801b2d6:	fb08 f101 	mul.w	r1, r8, r1
 801b2da:	b292      	uxth	r2, r2
 801b2dc:	fb02 110c 	mla	r1, r2, ip, r1
 801b2e0:	fb00 1104 	mla	r1, r0, r4, r1
 801b2e4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801b2e6:	fb09 1104 	mla	r1, r9, r4, r1
 801b2ea:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b2ee:	2900      	cmp	r1, #0
 801b2f0:	f000 80ec 	beq.w	801b4cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801b2f4:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801b2f8:	d019      	beq.n	801b32e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801b2fa:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801b2fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b302:	fb0c fa0a 	mul.w	sl, ip, sl
 801b306:	fb0c fc03 	mul.w	ip, ip, r3
 801b30a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b30e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801b312:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801b316:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b31a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801b31e:	4453      	add	r3, sl
 801b320:	0a3f      	lsrs	r7, r7, #8
 801b322:	0a1b      	lsrs	r3, r3, #8
 801b324:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801b328:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b32c:	433b      	orrs	r3, r7
 801b32e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801b330:	2cff      	cmp	r4, #255	@ 0xff
 801b332:	d020      	beq.n	801b376 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801b334:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b336:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801b33a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801b33c:	4367      	muls	r7, r4
 801b33e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b340:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b344:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b348:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801b34a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801b34e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b352:	fb04 fa0a 	mul.w	sl, r4, sl
 801b356:	44bc      	add	ip, r7
 801b358:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801b35c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b360:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b364:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b368:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b36c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b370:	ea4c 040a 	orr.w	r4, ip, sl
 801b374:	9410      	str	r4, [sp, #64]	@ 0x40
 801b376:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b378:	2cff      	cmp	r4, #255	@ 0xff
 801b37a:	d020      	beq.n	801b3be <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801b37c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b37e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801b382:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b384:	4367      	muls	r7, r4
 801b386:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b388:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b38c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b390:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b392:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801b396:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b39a:	fb04 fa0a 	mul.w	sl, r4, sl
 801b39e:	44bc      	add	ip, r7
 801b3a0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801b3a4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b3a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b3ac:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b3b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b3b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b3b8:	ea4c 040a 	orr.w	r4, ip, sl
 801b3bc:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b3be:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801b3c0:	2cff      	cmp	r4, #255	@ 0xff
 801b3c2:	d020      	beq.n	801b406 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801b3c4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b3c6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801b3ca:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801b3cc:	4367      	muls	r7, r4
 801b3ce:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b3d0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b3d4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b3d8:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801b3da:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801b3de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b3e2:	fb04 fa0a 	mul.w	sl, r4, sl
 801b3e6:	44bc      	add	ip, r7
 801b3e8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801b3ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b3f0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b3f4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b3f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b3fc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b400:	ea4c 040a 	orr.w	r4, ip, sl
 801b404:	9411      	str	r4, [sp, #68]	@ 0x44
 801b406:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b408:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801b40c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b410:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801b414:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b416:	fb08 f707 	mul.w	r7, r8, r7
 801b41a:	fb02 770c 	mla	r7, r2, ip, r7
 801b41e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801b422:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b424:	fb00 770c 	mla	r7, r0, ip, r7
 801b428:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801b42c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b42e:	fb09 770c 	mla	r7, r9, ip, r7
 801b432:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801b436:	fb08 f80c 	mul.w	r8, r8, ip
 801b43a:	0a3f      	lsrs	r7, r7, #8
 801b43c:	fb02 8303 	mla	r3, r2, r3, r8
 801b440:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b442:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801b446:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801b44a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b44c:	fb00 330a 	mla	r3, r0, sl, r3
 801b450:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801b454:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801b456:	fb09 3c0c 	mla	ip, r9, ip, r3
 801b45a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b45c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b460:	434b      	muls	r3, r1
 801b462:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801b466:	1c59      	adds	r1, r3, #1
 801b468:	ea47 070c 	orr.w	r7, r7, ip
 801b46c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801b470:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801b474:	b2fa      	uxtb	r2, r7
 801b476:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801b47a:	fb12 f200 	smulbb	r2, r2, r0
 801b47e:	b2c9      	uxtb	r1, r1
 801b480:	fb03 2301 	mla	r3, r3, r1, r2
 801b484:	b29b      	uxth	r3, r3
 801b486:	1c5a      	adds	r2, r3, #1
 801b488:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b48c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801b490:	fb12 f201 	smulbb	r2, r2, r1
 801b494:	121b      	asrs	r3, r3, #8
 801b496:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801b49a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801b49e:	0c3f      	lsrs	r7, r7, #16
 801b4a0:	fb03 2300 	mla	r3, r3, r0, r2
 801b4a4:	b29b      	uxth	r3, r3
 801b4a6:	1c5a      	adds	r2, r3, #1
 801b4a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b4ac:	121b      	asrs	r3, r3, #8
 801b4ae:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801b4b2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801b4b6:	fb13 f101 	smulbb	r1, r3, r1
 801b4ba:	fb07 1700 	mla	r7, r7, r0, r1
 801b4be:	b2bf      	uxth	r7, r7
 801b4c0:	1c7b      	adds	r3, r7, #1
 801b4c2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801b4c6:	123f      	asrs	r7, r7, #8
 801b4c8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801b4cc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801b4ce:	f10e 0e03 	add.w	lr, lr, #3
 801b4d2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801b4d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b4d8:	441a      	add	r2, r3
 801b4da:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b4dc:	9229      	str	r2, [sp, #164]	@ 0xa4
 801b4de:	441d      	add	r5, r3
 801b4e0:	e645      	b.n	801b16e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801b4e2:	2800      	cmp	r0, #0
 801b4e4:	f43f aee6 	beq.w	801b2b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801b4e8:	5c79      	ldrb	r1, [r7, r1]
 801b4ea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b4ee:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b4f0:	0e09      	lsrs	r1, r1, #24
 801b4f2:	9114      	str	r1, [sp, #80]	@ 0x50
 801b4f4:	e6de      	b.n	801b2b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801b4f6:	b01f      	add	sp, #124	@ 0x7c
 801b4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b4fc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801b4fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b500:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801b504:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801b508:	2d00      	cmp	r5, #0
 801b50a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801b50e:	fb05 700e 	mla	r0, r5, lr, r7
 801b512:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801b516:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801b51a:	eb02 0800 	add.w	r8, r2, r0
 801b51e:	f2c0 8105 	blt.w	801b72c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801b522:	45a9      	cmp	r9, r5
 801b524:	f340 8102 	ble.w	801b72c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801b528:	2f00      	cmp	r7, #0
 801b52a:	f2c0 80fd 	blt.w	801b728 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801b52e:	45be      	cmp	lr, r7
 801b530:	f340 80fa 	ble.w	801b728 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801b534:	5c12      	ldrb	r2, [r2, r0]
 801b536:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b53a:	1c7a      	adds	r2, r7, #1
 801b53c:	f100 80f9 	bmi.w	801b732 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801b540:	4596      	cmp	lr, r2
 801b542:	f340 80f6 	ble.w	801b732 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801b546:	2c00      	cmp	r4, #0
 801b548:	f000 80f5 	beq.w	801b736 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801b54c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b550:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b554:	3501      	adds	r5, #1
 801b556:	f100 80f2 	bmi.w	801b73e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801b55a:	45a9      	cmp	r9, r5
 801b55c:	f340 80ef 	ble.w	801b73e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801b560:	f1bc 0f00 	cmp.w	ip, #0
 801b564:	f000 80ee 	beq.w	801b744 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801b568:	2f00      	cmp	r7, #0
 801b56a:	f2c0 80e6 	blt.w	801b73a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801b56e:	45be      	cmp	lr, r7
 801b570:	f340 80e3 	ble.w	801b73a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801b574:	f818 200e 	ldrb.w	r2, [r8, lr]
 801b578:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b57c:	3701      	adds	r7, #1
 801b57e:	f100 80e4 	bmi.w	801b74a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801b582:	45be      	cmp	lr, r7
 801b584:	f340 80e1 	ble.w	801b74a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801b588:	2c00      	cmp	r4, #0
 801b58a:	f000 80e0 	beq.w	801b74e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801b58e:	44c6      	add	lr, r8
 801b590:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801b594:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b598:	b2a3      	uxth	r3, r4
 801b59a:	fa1f fc8c 	uxth.w	ip, ip
 801b59e:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801b5a2:	fb0c fe03 	mul.w	lr, ip, r3
 801b5a6:	011b      	lsls	r3, r3, #4
 801b5a8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801b5ac:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801b5b0:	eba3 070e 	sub.w	r7, r3, lr
 801b5b4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801b5b8:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801b5bc:	fa1f f48c 	uxth.w	r4, ip
 801b5c0:	b2bf      	uxth	r7, r7
 801b5c2:	1b1b      	subs	r3, r3, r4
 801b5c4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801b5c8:	fb07 fc0a 	mul.w	ip, r7, sl
 801b5cc:	b29b      	uxth	r3, r3
 801b5ce:	fb03 cc0b 	mla	ip, r3, fp, ip
 801b5d2:	9300      	str	r3, [sp, #0]
 801b5d4:	fb04 cc09 	mla	ip, r4, r9, ip
 801b5d8:	fb0e cc08 	mla	ip, lr, r8, ip
 801b5dc:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801b5e0:	9301      	str	r3, [sp, #4]
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	f000 809d 	beq.w	801b722 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801b5e8:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801b5ec:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801b5f0:	fb0b fc0c 	mul.w	ip, fp, ip
 801b5f4:	fb0b f606 	mul.w	r6, fp, r6
 801b5f8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801b5fc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801b600:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801b604:	44dc      	add	ip, fp
 801b606:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801b60a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801b60e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b612:	fb0a fb0b 	mul.w	fp, sl, fp
 801b616:	fb0a fa00 	mul.w	sl, sl, r0
 801b61a:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801b61e:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801b622:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801b626:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801b62a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801b62e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b632:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801b636:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b63a:	0a36      	lsrs	r6, r6, #8
 801b63c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b640:	44dc      	add	ip, fp
 801b642:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801b646:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801b64a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801b64e:	fb09 fb0b 	mul.w	fp, r9, fp
 801b652:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b656:	fb09 f905 	mul.w	r9, r9, r5
 801b65a:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801b65e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b662:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801b666:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b66a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801b66e:	fb0c fc07 	mul.w	ip, ip, r7
 801b672:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801b676:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801b67a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801b67e:	4458      	add	r0, fp
 801b680:	fb08 f505 	mul.w	r5, r8, r5
 801b684:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b688:	fb08 f802 	mul.w	r8, r8, r2
 801b68c:	0a00      	lsrs	r0, r0, #8
 801b68e:	0a2a      	lsrs	r2, r5, #8
 801b690:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801b694:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801b698:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801b69c:	4415      	add	r5, r2
 801b69e:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801b6a2:	0a2d      	lsrs	r5, r5, #8
 801b6a4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b6a8:	9a00      	ldr	r2, [sp, #0]
 801b6aa:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801b6ae:	fb03 cc02 	mla	ip, r3, r2, ip
 801b6b2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801b6b6:	9b01      	ldr	r3, [sp, #4]
 801b6b8:	fb05 c50e 	mla	r5, r5, lr, ip
 801b6bc:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801b6c0:	43db      	mvns	r3, r3
 801b6c2:	fb00 5004 	mla	r0, r0, r4, r5
 801b6c6:	b2db      	uxtb	r3, r3
 801b6c8:	0a00      	lsrs	r0, r0, #8
 801b6ca:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801b6ce:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801b6d2:	4378      	muls	r0, r7
 801b6d4:	fb02 0006 	mla	r0, r2, r6, r0
 801b6d8:	780a      	ldrb	r2, [r1, #0]
 801b6da:	fb0e 0e08 	mla	lr, lr, r8, r0
 801b6de:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801b6e2:	fb04 e000 	mla	r0, r4, r0, lr
 801b6e6:	fb02 f403 	mul.w	r4, r2, r3
 801b6ea:	0a00      	lsrs	r0, r0, #8
 801b6ec:	1c62      	adds	r2, r4, #1
 801b6ee:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801b6f2:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801b6f6:	4328      	orrs	r0, r5
 801b6f8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801b6fc:	700a      	strb	r2, [r1, #0]
 801b6fe:	784a      	ldrb	r2, [r1, #1]
 801b700:	435a      	muls	r2, r3
 801b702:	1c54      	adds	r4, r2, #1
 801b704:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801b708:	0a02      	lsrs	r2, r0, #8
 801b70a:	0c00      	lsrs	r0, r0, #16
 801b70c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801b710:	704a      	strb	r2, [r1, #1]
 801b712:	788a      	ldrb	r2, [r1, #2]
 801b714:	4353      	muls	r3, r2
 801b716:	1c5a      	adds	r2, r3, #1
 801b718:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b71c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b720:	7088      	strb	r0, [r1, #2]
 801b722:	b003      	add	sp, #12
 801b724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b728:	2600      	movs	r6, #0
 801b72a:	e706      	b.n	801b53a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801b72c:	2000      	movs	r0, #0
 801b72e:	4606      	mov	r6, r0
 801b730:	e710      	b.n	801b554 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801b732:	2000      	movs	r0, #0
 801b734:	e70e      	b.n	801b554 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801b736:	4620      	mov	r0, r4
 801b738:	e70c      	b.n	801b554 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801b73a:	2500      	movs	r5, #0
 801b73c:	e71e      	b.n	801b57c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801b73e:	2200      	movs	r2, #0
 801b740:	4615      	mov	r5, r2
 801b742:	e729      	b.n	801b598 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801b744:	4662      	mov	r2, ip
 801b746:	4665      	mov	r5, ip
 801b748:	e726      	b.n	801b598 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801b74a:	2200      	movs	r2, #0
 801b74c:	e724      	b.n	801b598 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801b74e:	4622      	mov	r2, r4
 801b750:	e722      	b.n	801b598 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801b752 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b752:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b756:	b09b      	sub	sp, #108	@ 0x6c
 801b758:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b75c:	9218      	str	r2, [sp, #96]	@ 0x60
 801b75e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801b760:	9019      	str	r0, [sp, #100]	@ 0x64
 801b762:	9116      	str	r1, [sp, #88]	@ 0x58
 801b764:	6850      	ldr	r0, [r2, #4]
 801b766:	9307      	str	r3, [sp, #28]
 801b768:	6812      	ldr	r2, [r2, #0]
 801b76a:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801b76c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801b770:	fb00 1303 	mla	r3, r0, r3, r1
 801b774:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b778:	18d3      	adds	r3, r2, r3
 801b77a:	930a      	str	r3, [sp, #40]	@ 0x28
 801b77c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b77e:	681b      	ldr	r3, [r3, #0]
 801b780:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b782:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b784:	685e      	ldr	r6, [r3, #4]
 801b786:	3604      	adds	r6, #4
 801b788:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b78a:	2b00      	cmp	r3, #0
 801b78c:	dc03      	bgt.n	801b796 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801b78e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b790:	2b00      	cmp	r3, #0
 801b792:	f340 834f 	ble.w	801be34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801b796:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b798:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b79c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b7a0:	1e48      	subs	r0, r1, #1
 801b7a2:	1e57      	subs	r7, r2, #1
 801b7a4:	9b07      	ldr	r3, [sp, #28]
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	f340 8178 	ble.w	801ba9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b7ac:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801b7ae:	142b      	asrs	r3, r5, #16
 801b7b0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801b7b4:	d406      	bmi.n	801b7c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b7b6:	4584      	cmp	ip, r0
 801b7b8:	da04      	bge.n	801b7c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	db02      	blt.n	801b7c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b7be:	42bb      	cmp	r3, r7
 801b7c0:	f2c0 816d 	blt.w	801ba9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801b7c4:	f11c 0c01 	adds.w	ip, ip, #1
 801b7c8:	f100 815b 	bmi.w	801ba82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801b7cc:	4561      	cmp	r1, ip
 801b7ce:	f2c0 8158 	blt.w	801ba82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801b7d2:	3301      	adds	r3, #1
 801b7d4:	f100 8155 	bmi.w	801ba82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801b7d8:	429a      	cmp	r2, r3
 801b7da:	f2c0 8152 	blt.w	801ba82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801b7de:	9b07      	ldr	r3, [sp, #28]
 801b7e0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801b7e2:	9317      	str	r3, [sp, #92]	@ 0x5c
 801b7e4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	f340 8178 	ble.w	801badc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801b7ec:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801b7ee:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801b7f2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b7f6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b7fa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b7fc:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801b800:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801b802:	141b      	asrs	r3, r3, #16
 801b804:	f100 81ba 	bmi.w	801bb7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801b808:	f101 38ff 	add.w	r8, r1, #4294967295
 801b80c:	4543      	cmp	r3, r8
 801b80e:	f280 81b5 	bge.w	801bb7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801b812:	f1bc 0f00 	cmp.w	ip, #0
 801b816:	f2c0 81b1 	blt.w	801bb7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801b81a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801b81e:	45c4      	cmp	ip, r8
 801b820:	f280 81ac 	bge.w	801bb7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801b824:	b209      	sxth	r1, r1
 801b826:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801b828:	fb0c 3301 	mla	r3, ip, r1, r3
 801b82c:	eb04 0803 	add.w	r8, r4, r3
 801b830:	5ce3      	ldrb	r3, [r4, r3]
 801b832:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801b836:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801b83a:	2a00      	cmp	r2, #0
 801b83c:	f000 8193 	beq.w	801bb66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801b840:	f898 c001 	ldrb.w	ip, [r8, #1]
 801b844:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801b848:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b84a:	0e24      	lsrs	r4, r4, #24
 801b84c:	9412      	str	r4, [sp, #72]	@ 0x48
 801b84e:	b178      	cbz	r0, 801b870 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801b850:	eb08 0c01 	add.w	ip, r8, r1
 801b854:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b858:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b85c:	9108      	str	r1, [sp, #32]
 801b85e:	0e09      	lsrs	r1, r1, #24
 801b860:	9110      	str	r1, [sp, #64]	@ 0x40
 801b862:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801b866:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b86a:	910c      	str	r1, [sp, #48]	@ 0x30
 801b86c:	0e09      	lsrs	r1, r1, #24
 801b86e:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b870:	b292      	uxth	r2, r2
 801b872:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801b874:	b280      	uxth	r0, r0
 801b876:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b878:	fb02 f900 	mul.w	r9, r2, r0
 801b87c:	0112      	lsls	r2, r2, #4
 801b87e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b882:	eba2 0809 	sub.w	r8, r2, r9
 801b886:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801b88a:	b280      	uxth	r0, r0
 801b88c:	fa1f f888 	uxth.w	r8, r8
 801b890:	1a12      	subs	r2, r2, r0
 801b892:	fb08 f101 	mul.w	r1, r8, r1
 801b896:	b292      	uxth	r2, r2
 801b898:	fb02 110e 	mla	r1, r2, lr, r1
 801b89c:	fb00 1104 	mla	r1, r0, r4, r1
 801b8a0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b8a2:	fb09 1104 	mla	r1, r9, r4, r1
 801b8a6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b8aa:	2900      	cmp	r1, #0
 801b8ac:	f000 80de 	beq.w	801ba6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801b8b0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801b8b4:	d01b      	beq.n	801b8ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801b8b6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801b8ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b8be:	fb0e fa0a 	mul.w	sl, lr, sl
 801b8c2:	fb0e fe03 	mul.w	lr, lr, r3
 801b8c6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b8ca:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801b8ce:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801b8d2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b8d6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801b8da:	4453      	add	r3, sl
 801b8dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b8e0:	0a1b      	lsrs	r3, r3, #8
 801b8e2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801b8e6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b8ea:	ea43 030c 	orr.w	r3, r3, ip
 801b8ee:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b8f0:	2cff      	cmp	r4, #255	@ 0xff
 801b8f2:	d021      	beq.n	801b938 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801b8f4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b8f6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b8fa:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b8fc:	fb04 fb0b 	mul.w	fp, r4, fp
 801b900:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b902:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b906:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b908:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b90c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b910:	fb04 fa0a 	mul.w	sl, r4, sl
 801b914:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b918:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b91c:	44de      	add	lr, fp
 801b91e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b922:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b926:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b92a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b92e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b932:	ea4e 040a 	orr.w	r4, lr, sl
 801b936:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b938:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b93a:	2cff      	cmp	r4, #255	@ 0xff
 801b93c:	d021      	beq.n	801b982 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801b93e:	9c08      	ldr	r4, [sp, #32]
 801b940:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b944:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b946:	fb04 fb0b 	mul.w	fp, r4, fp
 801b94a:	9c08      	ldr	r4, [sp, #32]
 801b94c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b950:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b952:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b956:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b95a:	fb04 fa0a 	mul.w	sl, r4, sl
 801b95e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b962:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b966:	44de      	add	lr, fp
 801b968:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b96c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b970:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b974:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b978:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b97c:	ea4e 040a 	orr.w	r4, lr, sl
 801b980:	9408      	str	r4, [sp, #32]
 801b982:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b984:	2cff      	cmp	r4, #255	@ 0xff
 801b986:	d021      	beq.n	801b9cc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b988:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801b98a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b98e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b990:	fb04 fb0b 	mul.w	fp, r4, fp
 801b994:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801b996:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b99a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b99c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b9a0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b9a4:	fb04 fa0a 	mul.w	sl, r4, sl
 801b9a8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b9ac:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b9b0:	44de      	add	lr, fp
 801b9b2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b9b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b9ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b9be:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b9c2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b9c6:	ea4e 040a 	orr.w	r4, lr, sl
 801b9ca:	940c      	str	r4, [sp, #48]	@ 0x30
 801b9cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b9ce:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801b9d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b9d6:	43c9      	mvns	r1, r1
 801b9d8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801b9dc:	9c08      	ldr	r4, [sp, #32]
 801b9de:	b2c9      	uxtb	r1, r1
 801b9e0:	fb08 fc0c 	mul.w	ip, r8, ip
 801b9e4:	fb02 cc0e 	mla	ip, r2, lr, ip
 801b9e8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801b9ec:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801b9ee:	fb00 cc0e 	mla	ip, r0, lr, ip
 801b9f2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801b9f6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b9f8:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b9fc:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801ba00:	fb08 f80e 	mul.w	r8, r8, lr
 801ba04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ba08:	fb02 8303 	mla	r3, r2, r3, r8
 801ba0c:	9a08      	ldr	r2, [sp, #32]
 801ba0e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ba12:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801ba16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ba18:	fb00 330a 	mla	r3, r0, sl, r3
 801ba1c:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801ba20:	fb09 3900 	mla	r9, r9, r0, r3
 801ba24:	783b      	ldrb	r3, [r7, #0]
 801ba26:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ba2a:	fb03 f201 	mul.w	r2, r3, r1
 801ba2e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801ba32:	1c53      	adds	r3, r2, #1
 801ba34:	ea4c 0c09 	orr.w	ip, ip, r9
 801ba38:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ba3c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801ba40:	703b      	strb	r3, [r7, #0]
 801ba42:	787b      	ldrb	r3, [r7, #1]
 801ba44:	434b      	muls	r3, r1
 801ba46:	1c5a      	adds	r2, r3, #1
 801ba48:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ba4c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801ba50:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ba54:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ba58:	707b      	strb	r3, [r7, #1]
 801ba5a:	78bb      	ldrb	r3, [r7, #2]
 801ba5c:	4359      	muls	r1, r3
 801ba5e:	1c4b      	adds	r3, r1, #1
 801ba60:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801ba64:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801ba68:	f887 c002 	strb.w	ip, [r7, #2]
 801ba6c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ba6e:	3703      	adds	r7, #3
 801ba70:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801ba72:	441a      	add	r2, r3
 801ba74:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ba76:	441d      	add	r5, r3
 801ba78:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ba7a:	9225      	str	r2, [sp, #148]	@ 0x94
 801ba7c:	3b01      	subs	r3, #1
 801ba7e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801ba80:	e6b0      	b.n	801b7e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ba82:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ba84:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801ba86:	441c      	add	r4, r3
 801ba88:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ba8a:	441d      	add	r5, r3
 801ba8c:	9b07      	ldr	r3, [sp, #28]
 801ba8e:	9425      	str	r4, [sp, #148]	@ 0x94
 801ba90:	3b01      	subs	r3, #1
 801ba92:	9307      	str	r3, [sp, #28]
 801ba94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ba96:	3303      	adds	r3, #3
 801ba98:	930a      	str	r3, [sp, #40]	@ 0x28
 801ba9a:	e683      	b.n	801b7a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ba9c:	d026      	beq.n	801baec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801ba9e:	9b07      	ldr	r3, [sp, #28]
 801baa0:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801baa2:	3b01      	subs	r3, #1
 801baa4:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801baa6:	fb00 4003 	mla	r0, r0, r3, r4
 801baaa:	1400      	asrs	r0, r0, #16
 801baac:	f53f ae97 	bmi.w	801b7de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801bab0:	3901      	subs	r1, #1
 801bab2:	4288      	cmp	r0, r1
 801bab4:	f6bf ae93 	bge.w	801b7de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801bab8:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801baba:	fb01 5303 	mla	r3, r1, r3, r5
 801babe:	141b      	asrs	r3, r3, #16
 801bac0:	f53f ae8d 	bmi.w	801b7de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801bac4:	3a01      	subs	r2, #1
 801bac6:	4293      	cmp	r3, r2
 801bac8:	f6bf ae89 	bge.w	801b7de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801bacc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bace:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801bad2:	f103 0e03 	add.w	lr, r3, #3
 801bad6:	f1bb 0f00 	cmp.w	fp, #0
 801bada:	dc6d      	bgt.n	801bbb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801badc:	9b07      	ldr	r3, [sp, #28]
 801bade:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801bae2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bae4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bae8:	4423      	add	r3, r4
 801baea:	930a      	str	r3, [sp, #40]	@ 0x28
 801baec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801baee:	2b00      	cmp	r3, #0
 801baf0:	f340 81a0 	ble.w	801be34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801baf4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801baf8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801bafa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bafe:	eeb0 6a62 	vmov.f32	s12, s5
 801bb02:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bb06:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bb0a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bb0e:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 801bb12:	eeb0 6a43 	vmov.f32	s12, s6
 801bb16:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bb1a:	ee16 5a10 	vmov	r5, s12
 801bb1e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bb22:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bb26:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bb2a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bb2e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bb32:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bb36:	ee12 2a90 	vmov	r2, s5
 801bb3a:	eef0 2a47 	vmov.f32	s5, s14
 801bb3e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bb42:	ee13 2a10 	vmov	r2, s6
 801bb46:	9327      	str	r3, [sp, #156]	@ 0x9c
 801bb48:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801bb4a:	eeb0 3a67 	vmov.f32	s6, s15
 801bb4e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bb52:	9328      	str	r3, [sp, #160]	@ 0xa0
 801bb54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bb56:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801bb58:	3b01      	subs	r3, #1
 801bb5a:	9316      	str	r3, [sp, #88]	@ 0x58
 801bb5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801bb5e:	bf08      	it	eq
 801bb60:	4613      	moveq	r3, r2
 801bb62:	9307      	str	r3, [sp, #28]
 801bb64:	e610      	b.n	801b788 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801bb66:	2800      	cmp	r0, #0
 801bb68:	f43f ae82 	beq.w	801b870 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801bb6c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bb70:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801bb74:	9108      	str	r1, [sp, #32]
 801bb76:	0e09      	lsrs	r1, r1, #24
 801bb78:	9110      	str	r1, [sp, #64]	@ 0x40
 801bb7a:	e679      	b.n	801b870 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801bb7c:	f113 0801 	adds.w	r8, r3, #1
 801bb80:	f53f af74 	bmi.w	801ba6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801bb84:	4541      	cmp	r1, r8
 801bb86:	f6ff af71 	blt.w	801ba6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801bb8a:	f11c 0801 	adds.w	r8, ip, #1
 801bb8e:	f53f af6d 	bmi.w	801ba6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801bb92:	45c6      	cmp	lr, r8
 801bb94:	f6ff af6a 	blt.w	801ba6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801bb98:	b209      	sxth	r1, r1
 801bb9a:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801bb9e:	fa0f f38e 	sxth.w	r3, lr
 801bba2:	9100      	str	r1, [sp, #0]
 801bba4:	4639      	mov	r1, r7
 801bba6:	9301      	str	r3, [sp, #4]
 801bba8:	4633      	mov	r3, r6
 801bbaa:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801bbae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bbb0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801bbb2:	f7ff fca3 	bl	801b4fc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801bbb6:	e759      	b.n	801ba6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801bbb8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801bbba:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801bbbe:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801bbc0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801bbc4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bbc6:	1427      	asrs	r7, r4, #16
 801bbc8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801bbca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bbce:	142b      	asrs	r3, r5, #16
 801bbd0:	fb01 7303 	mla	r3, r1, r3, r7
 801bbd4:	18e7      	adds	r7, r4, r3
 801bbd6:	5ce3      	ldrb	r3, [r4, r3]
 801bbd8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801bbdc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801bbe0:	2a00      	cmp	r2, #0
 801bbe2:	f000 811d 	beq.w	801be20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801bbe6:	f897 8001 	ldrb.w	r8, [r7, #1]
 801bbea:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801bbee:	940d      	str	r4, [sp, #52]	@ 0x34
 801bbf0:	0e24      	lsrs	r4, r4, #24
 801bbf2:	9414      	str	r4, [sp, #80]	@ 0x50
 801bbf4:	b170      	cbz	r0, 801bc14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801bbf6:	eb07 0801 	add.w	r8, r7, r1
 801bbfa:	5c79      	ldrb	r1, [r7, r1]
 801bbfc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801bc00:	9109      	str	r1, [sp, #36]	@ 0x24
 801bc02:	0e09      	lsrs	r1, r1, #24
 801bc04:	9111      	str	r1, [sp, #68]	@ 0x44
 801bc06:	f898 1001 	ldrb.w	r1, [r8, #1]
 801bc0a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801bc0e:	910e      	str	r1, [sp, #56]	@ 0x38
 801bc10:	0e09      	lsrs	r1, r1, #24
 801bc12:	9115      	str	r1, [sp, #84]	@ 0x54
 801bc14:	b292      	uxth	r2, r2
 801bc16:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801bc18:	b280      	uxth	r0, r0
 801bc1a:	fb02 f900 	mul.w	r9, r2, r0
 801bc1e:	0112      	lsls	r2, r2, #4
 801bc20:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801bc24:	eba2 0809 	sub.w	r8, r2, r9
 801bc28:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801bc2c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bc2e:	b280      	uxth	r0, r0
 801bc30:	fa1f f888 	uxth.w	r8, r8
 801bc34:	1a09      	subs	r1, r1, r0
 801bc36:	fb08 f202 	mul.w	r2, r8, r2
 801bc3a:	b289      	uxth	r1, r1
 801bc3c:	fb01 220c 	mla	r2, r1, ip, r2
 801bc40:	fb00 2204 	mla	r2, r0, r4, r2
 801bc44:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801bc46:	fb09 2204 	mla	r2, r9, r4, r2
 801bc4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801bc4e:	2a00      	cmp	r2, #0
 801bc50:	f000 80db 	beq.w	801be0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801bc54:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801bc58:	d019      	beq.n	801bc8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801bc5a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801bc5e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801bc62:	fb0c fa0a 	mul.w	sl, ip, sl
 801bc66:	fb0c fc03 	mul.w	ip, ip, r3
 801bc6a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801bc6e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801bc72:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801bc76:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801bc7a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801bc7e:	4453      	add	r3, sl
 801bc80:	0a3f      	lsrs	r7, r7, #8
 801bc82:	0a1b      	lsrs	r3, r3, #8
 801bc84:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801bc88:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801bc8c:	433b      	orrs	r3, r7
 801bc8e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bc90:	2cff      	cmp	r4, #255	@ 0xff
 801bc92:	d020      	beq.n	801bcd6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801bc94:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801bc96:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801bc9a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bc9c:	4367      	muls	r7, r4
 801bc9e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801bca0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bca4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bca8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bcaa:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801bcae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bcb2:	fb04 fa0a 	mul.w	sl, r4, sl
 801bcb6:	44bc      	add	ip, r7
 801bcb8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801bcbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bcc0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bcc4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bcc8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bccc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801bcd0:	ea4c 040a 	orr.w	r4, ip, sl
 801bcd4:	940d      	str	r4, [sp, #52]	@ 0x34
 801bcd6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801bcd8:	2cff      	cmp	r4, #255	@ 0xff
 801bcda:	d020      	beq.n	801bd1e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801bcdc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801bcde:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801bce2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801bce4:	4367      	muls	r7, r4
 801bce6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801bce8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bcec:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bcf0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801bcf2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801bcf6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bcfa:	fb04 fa0a 	mul.w	sl, r4, sl
 801bcfe:	44bc      	add	ip, r7
 801bd00:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801bd04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bd08:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bd0c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bd10:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bd14:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801bd18:	ea4c 040a 	orr.w	r4, ip, sl
 801bd1c:	9409      	str	r4, [sp, #36]	@ 0x24
 801bd1e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801bd20:	2cff      	cmp	r4, #255	@ 0xff
 801bd22:	d020      	beq.n	801bd66 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801bd24:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801bd26:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801bd2a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801bd2c:	4367      	muls	r7, r4
 801bd2e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801bd30:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bd34:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bd38:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801bd3a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801bd3e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bd42:	fb04 fa0a 	mul.w	sl, r4, sl
 801bd46:	44bc      	add	ip, r7
 801bd48:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801bd4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bd50:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bd54:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bd58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bd5c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801bd60:	ea4c 040a 	orr.w	r4, ip, sl
 801bd64:	940e      	str	r4, [sp, #56]	@ 0x38
 801bd66:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801bd68:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801bd6c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801bd70:	43d2      	mvns	r2, r2
 801bd72:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801bd76:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801bd78:	b2d2      	uxtb	r2, r2
 801bd7a:	fb08 f707 	mul.w	r7, r8, r7
 801bd7e:	fb01 770c 	mla	r7, r1, ip, r7
 801bd82:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801bd86:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801bd88:	fb00 770c 	mla	r7, r0, ip, r7
 801bd8c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801bd90:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801bd92:	fb09 770c 	mla	r7, r9, ip, r7
 801bd96:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801bd9a:	fb08 f80c 	mul.w	r8, r8, ip
 801bd9e:	0a3f      	lsrs	r7, r7, #8
 801bda0:	fb01 8303 	mla	r3, r1, r3, r8
 801bda4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801bda6:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801bdaa:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801bdae:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801bdb0:	fb00 330a 	mla	r3, r0, sl, r3
 801bdb4:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801bdb8:	fb09 3c0c 	mla	ip, r9, ip, r3
 801bdbc:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801bdc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bdc4:	fb03 f102 	mul.w	r1, r3, r2
 801bdc8:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801bdcc:	1c4b      	adds	r3, r1, #1
 801bdce:	ea47 070c 	orr.w	r7, r7, ip
 801bdd2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801bdd6:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801bdda:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801bdde:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801bde2:	4353      	muls	r3, r2
 801bde4:	1c59      	adds	r1, r3, #1
 801bde6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801bdea:	0a3b      	lsrs	r3, r7, #8
 801bdec:	0c3f      	lsrs	r7, r7, #16
 801bdee:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801bdf2:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801bdf6:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801bdfa:	435a      	muls	r2, r3
 801bdfc:	1c53      	adds	r3, r2, #1
 801bdfe:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801be02:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801be06:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801be0a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801be0c:	f10e 0e03 	add.w	lr, lr, #3
 801be10:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801be12:	f10b 3bff 	add.w	fp, fp, #4294967295
 801be16:	441a      	add	r2, r3
 801be18:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801be1a:	9225      	str	r2, [sp, #148]	@ 0x94
 801be1c:	441d      	add	r5, r3
 801be1e:	e65a      	b.n	801bad6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801be20:	2800      	cmp	r0, #0
 801be22:	f43f aef7 	beq.w	801bc14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801be26:	5c79      	ldrb	r1, [r7, r1]
 801be28:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801be2c:	9109      	str	r1, [sp, #36]	@ 0x24
 801be2e:	0e09      	lsrs	r1, r1, #24
 801be30:	9111      	str	r1, [sp, #68]	@ 0x44
 801be32:	e6ef      	b.n	801bc14 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801be34:	b01b      	add	sp, #108	@ 0x6c
 801be36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be3a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801be3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be3e:	b08d      	sub	sp, #52	@ 0x34
 801be40:	468b      	mov	fp, r1
 801be42:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 801be46:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 801be4a:	fb0c 5703 	mla	r7, ip, r3, r5
 801be4e:	f1bc 0f00 	cmp.w	ip, #0
 801be52:	910b      	str	r1, [sp, #44]	@ 0x2c
 801be54:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801be58:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 801be5c:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 801be60:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 801be64:	eb02 0607 	add.w	r6, r2, r7
 801be68:	f89b 4000 	ldrb.w	r4, [fp]
 801be6c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801be70:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801be74:	f2c0 80c1 	blt.w	801bffa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801be78:	45e6      	cmp	lr, ip
 801be7a:	f340 80be 	ble.w	801bffa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801be7e:	2d00      	cmp	r5, #0
 801be80:	f2c0 80b7 	blt.w	801bff2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801be84:	42ab      	cmp	r3, r5
 801be86:	f340 80b4 	ble.w	801bff2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801be8a:	5dd2      	ldrb	r2, [r2, r7]
 801be8c:	9205      	str	r2, [sp, #20]
 801be8e:	7872      	ldrb	r2, [r6, #1]
 801be90:	9206      	str	r2, [sp, #24]
 801be92:	78b2      	ldrb	r2, [r6, #2]
 801be94:	9207      	str	r2, [sp, #28]
 801be96:	1c6a      	adds	r2, r5, #1
 801be98:	f100 80b6 	bmi.w	801c008 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801be9c:	4293      	cmp	r3, r2
 801be9e:	f340 80b3 	ble.w	801c008 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801bea2:	f1b8 0f00 	cmp.w	r8, #0
 801bea6:	f000 80af 	beq.w	801c008 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801beaa:	78f2      	ldrb	r2, [r6, #3]
 801beac:	9201      	str	r2, [sp, #4]
 801beae:	7932      	ldrb	r2, [r6, #4]
 801beb0:	9202      	str	r2, [sp, #8]
 801beb2:	7972      	ldrb	r2, [r6, #5]
 801beb4:	9203      	str	r2, [sp, #12]
 801beb6:	f11c 0c01 	adds.w	ip, ip, #1
 801beba:	f100 80ad 	bmi.w	801c018 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801bebe:	45e6      	cmp	lr, ip
 801bec0:	f340 80aa 	ble.w	801c018 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801bec4:	f1ba 0f00 	cmp.w	sl, #0
 801bec8:	f000 80a6 	beq.w	801c018 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801becc:	2d00      	cmp	r5, #0
 801bece:	f2c0 809f 	blt.w	801c010 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801bed2:	42ab      	cmp	r3, r5
 801bed4:	f340 809c 	ble.w	801c010 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801bed8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801bedc:	f816 9002 	ldrb.w	r9, [r6, r2]
 801bee0:	2203      	movs	r2, #3
 801bee2:	fb03 6c02 	mla	ip, r3, r2, r6
 801bee6:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801beea:	f89c e002 	ldrb.w	lr, [ip, #2]
 801beee:	9704      	str	r7, [sp, #16]
 801bef0:	3501      	adds	r5, #1
 801bef2:	f100 8098 	bmi.w	801c026 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801bef6:	42ab      	cmp	r3, r5
 801bef8:	f340 8095 	ble.w	801c026 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801befc:	f1b8 0f00 	cmp.w	r8, #0
 801bf00:	f000 8091 	beq.w	801c026 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801bf04:	f04f 0c03 	mov.w	ip, #3
 801bf08:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801bf0c:	5cb5      	ldrb	r5, [r6, r2]
 801bf0e:	fb03 620c 	mla	r2, r3, ip, r6
 801bf12:	fb03 630c 	mla	r3, r3, ip, r6
 801bf16:	7912      	ldrb	r2, [r2, #4]
 801bf18:	795e      	ldrb	r6, [r3, #5]
 801bf1a:	fa1f f388 	uxth.w	r3, r8
 801bf1e:	fa1f fc8a 	uxth.w	ip, sl
 801bf22:	fb03 f70c 	mul.w	r7, r3, ip
 801bf26:	011b      	lsls	r3, r3, #4
 801bf28:	9708      	str	r7, [sp, #32]
 801bf2a:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801bf2e:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 801bf32:	1bdb      	subs	r3, r3, r7
 801bf34:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 801bf38:	fa1f fc8c 	uxth.w	ip, ip
 801bf3c:	b29b      	uxth	r3, r3
 801bf3e:	9709      	str	r7, [sp, #36]	@ 0x24
 801bf40:	ebaa 0a0c 	sub.w	sl, sl, ip
 801bf44:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801bf46:	930a      	str	r3, [sp, #40]	@ 0x28
 801bf48:	fa1f fa8a 	uxth.w	sl, sl
 801bf4c:	ea6f 0807 	mvn.w	r8, r7
 801bf50:	9f01      	ldr	r7, [sp, #4]
 801bf52:	435f      	muls	r7, r3
 801bf54:	9b05      	ldr	r3, [sp, #20]
 801bf56:	fa5f f888 	uxtb.w	r8, r8
 801bf5a:	fb0a 7703 	mla	r7, sl, r3, r7
 801bf5e:	9b08      	ldr	r3, [sp, #32]
 801bf60:	fb14 f408 	smulbb	r4, r4, r8
 801bf64:	fb0c 7709 	mla	r7, ip, r9, r7
 801bf68:	fb10 f008 	smulbb	r0, r0, r8
 801bf6c:	fb11 f108 	smulbb	r1, r1, r8
 801bf70:	fb03 7705 	mla	r7, r3, r5, r7
 801bf74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf76:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801bf7a:	fb07 4703 	mla	r7, r7, r3, r4
 801bf7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bf80:	b2bf      	uxth	r7, r7
 801bf82:	1c7c      	adds	r4, r7, #1
 801bf84:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801bf88:	1224      	asrs	r4, r4, #8
 801bf8a:	f88b 4000 	strb.w	r4, [fp]
 801bf8e:	9c02      	ldr	r4, [sp, #8]
 801bf90:	435c      	muls	r4, r3
 801bf92:	9b06      	ldr	r3, [sp, #24]
 801bf94:	fb0a 4403 	mla	r4, sl, r3, r4
 801bf98:	9b04      	ldr	r3, [sp, #16]
 801bf9a:	fb0c 4403 	mla	r4, ip, r3, r4
 801bf9e:	9b08      	ldr	r3, [sp, #32]
 801bfa0:	fb03 4402 	mla	r4, r3, r2, r4
 801bfa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bfa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bfa8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801bfac:	fb04 0403 	mla	r4, r4, r3, r0
 801bfb0:	9b03      	ldr	r3, [sp, #12]
 801bfb2:	435a      	muls	r2, r3
 801bfb4:	b2a4      	uxth	r4, r4
 801bfb6:	4613      	mov	r3, r2
 801bfb8:	9a07      	ldr	r2, [sp, #28]
 801bfba:	1c60      	adds	r0, r4, #1
 801bfbc:	fb0a 3a02 	mla	sl, sl, r2, r3
 801bfc0:	9b08      	ldr	r3, [sp, #32]
 801bfc2:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801bfc6:	fb0c ac0e 	mla	ip, ip, lr, sl
 801bfca:	1224      	asrs	r4, r4, #8
 801bfcc:	fb03 c606 	mla	r6, r3, r6, ip
 801bfd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bfd2:	f88b 4001 	strb.w	r4, [fp, #1]
 801bfd6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801bfda:	fb06 1103 	mla	r1, r6, r3, r1
 801bfde:	b289      	uxth	r1, r1
 801bfe0:	1c4e      	adds	r6, r1, #1
 801bfe2:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801bfe6:	1209      	asrs	r1, r1, #8
 801bfe8:	f88b 1002 	strb.w	r1, [fp, #2]
 801bfec:	b00d      	add	sp, #52	@ 0x34
 801bfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bff2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bff6:	9405      	str	r4, [sp, #20]
 801bff8:	e74d      	b.n	801be96 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801bffa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bffe:	9401      	str	r4, [sp, #4]
 801c000:	9405      	str	r4, [sp, #20]
 801c002:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c006:	e756      	b.n	801beb6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801c008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c00c:	9401      	str	r4, [sp, #4]
 801c00e:	e752      	b.n	801beb6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801c010:	468e      	mov	lr, r1
 801c012:	9004      	str	r0, [sp, #16]
 801c014:	46a1      	mov	r9, r4
 801c016:	e76b      	b.n	801bef0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801c018:	460e      	mov	r6, r1
 801c01a:	4602      	mov	r2, r0
 801c01c:	4625      	mov	r5, r4
 801c01e:	468e      	mov	lr, r1
 801c020:	9004      	str	r0, [sp, #16]
 801c022:	46a1      	mov	r9, r4
 801c024:	e779      	b.n	801bf1a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801c026:	460e      	mov	r6, r1
 801c028:	4602      	mov	r2, r0
 801c02a:	4625      	mov	r5, r4
 801c02c:	e775      	b.n	801bf1a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801c02e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c02e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c032:	b09f      	sub	sp, #124	@ 0x7c
 801c034:	920e      	str	r2, [sp, #56]	@ 0x38
 801c036:	9307      	str	r3, [sp, #28]
 801c038:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801c03a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801c03e:	901d      	str	r0, [sp, #116]	@ 0x74
 801c040:	930c      	str	r3, [sp, #48]	@ 0x30
 801c042:	6850      	ldr	r0, [r2, #4]
 801c044:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c046:	6812      	ldr	r2, [r2, #0]
 801c048:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801c04c:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 801c050:	fb00 1303 	mla	r3, r0, r3, r1
 801c054:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c058:	18d3      	adds	r3, r2, r3
 801c05a:	9308      	str	r3, [sp, #32]
 801c05c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	930a      	str	r3, [sp, #40]	@ 0x28
 801c062:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c064:	43db      	mvns	r3, r3
 801c066:	b2db      	uxtb	r3, r3
 801c068:	9309      	str	r3, [sp, #36]	@ 0x24
 801c06a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	dc03      	bgt.n	801c078 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c070:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c072:	2b00      	cmp	r3, #0
 801c074:	f340 81f5 	ble.w	801c462 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801c078:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c07a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c07e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c082:	1e48      	subs	r0, r1, #1
 801c084:	1e54      	subs	r4, r2, #1
 801c086:	9b07      	ldr	r3, [sp, #28]
 801c088:	2b00      	cmp	r3, #0
 801c08a:	f340 80d5 	ble.w	801c238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801c08e:	ea5f 452a 	movs.w	r5, sl, asr #16
 801c092:	ea4f 4328 	mov.w	r3, r8, asr #16
 801c096:	d406      	bmi.n	801c0a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c098:	4285      	cmp	r5, r0
 801c09a:	da04      	bge.n	801c0a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	db02      	blt.n	801c0a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c0a0:	42a3      	cmp	r3, r4
 801c0a2:	f2c0 80ca 	blt.w	801c23a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801c0a6:	3501      	adds	r5, #1
 801c0a8:	f100 80bb 	bmi.w	801c222 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c0ac:	42a9      	cmp	r1, r5
 801c0ae:	f2c0 80b8 	blt.w	801c222 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c0b2:	3301      	adds	r3, #1
 801c0b4:	f100 80b5 	bmi.w	801c222 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c0b8:	429a      	cmp	r2, r3
 801c0ba:	f2c0 80b2 	blt.w	801c222 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c0be:	9b07      	ldr	r3, [sp, #28]
 801c0c0:	9d08      	ldr	r5, [sp, #32]
 801c0c2:	930d      	str	r3, [sp, #52]	@ 0x34
 801c0c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	f340 80d6 	ble.w	801c278 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801c0cc:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801c0ce:	ea4f 4428 	mov.w	r4, r8, asr #16
 801c0d2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c0d4:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801c0d8:	68c6      	ldr	r6, [r0, #12]
 801c0da:	ea5f 402a 	movs.w	r0, sl, asr #16
 801c0de:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801c0e2:	689b      	ldr	r3, [r3, #8]
 801c0e4:	f100 810f 	bmi.w	801c306 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c0e8:	1e5f      	subs	r7, r3, #1
 801c0ea:	42b8      	cmp	r0, r7
 801c0ec:	f280 810b 	bge.w	801c306 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c0f0:	2c00      	cmp	r4, #0
 801c0f2:	f2c0 8108 	blt.w	801c306 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c0f6:	1e77      	subs	r7, r6, #1
 801c0f8:	42bc      	cmp	r4, r7
 801c0fa:	f280 8104 	bge.w	801c306 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c0fe:	b21b      	sxth	r3, r3
 801c100:	fb04 0003 	mla	r0, r4, r3, r0
 801c104:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c106:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c10a:	1826      	adds	r6, r4, r0
 801c10c:	5c24      	ldrb	r4, [r4, r0]
 801c10e:	78b7      	ldrb	r7, [r6, #2]
 801c110:	7870      	ldrb	r0, [r6, #1]
 801c112:	970f      	str	r7, [sp, #60]	@ 0x3c
 801c114:	7977      	ldrb	r7, [r6, #5]
 801c116:	f896 e003 	ldrb.w	lr, [r6, #3]
 801c11a:	f896 c004 	ldrb.w	ip, [r6, #4]
 801c11e:	9710      	str	r7, [sp, #64]	@ 0x40
 801c120:	b1c9      	cbz	r1, 801c156 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c122:	f04f 0b03 	mov.w	fp, #3
 801c126:	f06f 0904 	mvn.w	r9, #4
 801c12a:	3605      	adds	r6, #5
 801c12c:	fb13 930b 	smlabb	r3, r3, fp, r9
 801c130:	eb06 0b03 	add.w	fp, r6, r3
 801c134:	5cf3      	ldrb	r3, [r6, r3]
 801c136:	9311      	str	r3, [sp, #68]	@ 0x44
 801c138:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801c13c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c13e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801c142:	9315      	str	r3, [sp, #84]	@ 0x54
 801c144:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801c148:	9312      	str	r3, [sp, #72]	@ 0x48
 801c14a:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801c14e:	9314      	str	r3, [sp, #80]	@ 0x50
 801c150:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801c154:	9316      	str	r3, [sp, #88]	@ 0x58
 801c156:	b292      	uxth	r2, r2
 801c158:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801c15a:	b289      	uxth	r1, r1
 801c15c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801c160:	fb02 f601 	mul.w	r6, r2, r1
 801c164:	0112      	lsls	r2, r2, #4
 801c166:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801c16a:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 801c16e:	1b92      	subs	r2, r2, r6
 801c170:	b289      	uxth	r1, r1
 801c172:	b292      	uxth	r2, r2
 801c174:	eba9 0901 	sub.w	r9, r9, r1
 801c178:	fb02 fe0e 	mul.w	lr, r2, lr
 801c17c:	fa1f f989 	uxth.w	r9, r9
 801c180:	fb02 fc0c 	mul.w	ip, r2, ip
 801c184:	fb09 e404 	mla	r4, r9, r4, lr
 801c188:	f895 e000 	ldrb.w	lr, [r5]
 801c18c:	fb09 c000 	mla	r0, r9, r0, ip
 801c190:	fb01 4407 	mla	r4, r1, r7, r4
 801c194:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801c196:	fb06 4407 	mla	r4, r6, r7, r4
 801c19a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801c19c:	fb1e fe07 	smulbb	lr, lr, r7
 801c1a0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c1a4:	fb04 e403 	mla	r4, r4, r3, lr
 801c1a8:	b2a4      	uxth	r4, r4
 801c1aa:	f104 0e01 	add.w	lr, r4, #1
 801c1ae:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801c1b2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c1b4:	fb01 0004 	mla	r0, r1, r4, r0
 801c1b8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c1ba:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c1be:	fb06 0004 	mla	r0, r6, r4, r0
 801c1c2:	786c      	ldrb	r4, [r5, #1]
 801c1c4:	f885 e000 	strb.w	lr, [r5]
 801c1c8:	fb14 f407 	smulbb	r4, r4, r7
 801c1cc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c1d0:	fb00 4003 	mla	r0, r0, r3, r4
 801c1d4:	b280      	uxth	r0, r0
 801c1d6:	1c44      	adds	r4, r0, #1
 801c1d8:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801c1dc:	1200      	asrs	r0, r0, #8
 801c1de:	7068      	strb	r0, [r5, #1]
 801c1e0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c1e2:	4342      	muls	r2, r0
 801c1e4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c1e6:	fb09 2200 	mla	r2, r9, r0, r2
 801c1ea:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c1ec:	fb01 2100 	mla	r1, r1, r0, r2
 801c1f0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c1f2:	fb06 1602 	mla	r6, r6, r2, r1
 801c1f6:	78a9      	ldrb	r1, [r5, #2]
 801c1f8:	fb11 f107 	smulbb	r1, r1, r7
 801c1fc:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801c200:	fb06 1303 	mla	r3, r6, r3, r1
 801c204:	b29b      	uxth	r3, r3
 801c206:	1c5e      	adds	r6, r3, #1
 801c208:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801c20c:	121b      	asrs	r3, r3, #8
 801c20e:	70ab      	strb	r3, [r5, #2]
 801c210:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c212:	3503      	adds	r5, #3
 801c214:	449a      	add	sl, r3
 801c216:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c218:	4498      	add	r8, r3
 801c21a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c21c:	3b01      	subs	r3, #1
 801c21e:	930d      	str	r3, [sp, #52]	@ 0x34
 801c220:	e750      	b.n	801c0c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c222:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c224:	449a      	add	sl, r3
 801c226:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c228:	4498      	add	r8, r3
 801c22a:	9b07      	ldr	r3, [sp, #28]
 801c22c:	3b01      	subs	r3, #1
 801c22e:	9307      	str	r3, [sp, #28]
 801c230:	9b08      	ldr	r3, [sp, #32]
 801c232:	3303      	adds	r3, #3
 801c234:	9308      	str	r3, [sp, #32]
 801c236:	e726      	b.n	801c086 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c238:	d026      	beq.n	801c288 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801c23a:	9b07      	ldr	r3, [sp, #28]
 801c23c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801c23e:	3b01      	subs	r3, #1
 801c240:	fb00 a003 	mla	r0, r0, r3, sl
 801c244:	1400      	asrs	r0, r0, #16
 801c246:	f53f af3a 	bmi.w	801c0be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c24a:	3901      	subs	r1, #1
 801c24c:	4288      	cmp	r0, r1
 801c24e:	f6bf af36 	bge.w	801c0be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c252:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801c254:	fb01 8303 	mla	r3, r1, r3, r8
 801c258:	141b      	asrs	r3, r3, #16
 801c25a:	f53f af30 	bmi.w	801c0be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c25e:	3a01      	subs	r2, #1
 801c260:	4293      	cmp	r3, r2
 801c262:	f6bf af2c 	bge.w	801c0be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c266:	9b08      	ldr	r3, [sp, #32]
 801c268:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801c26c:	1cdd      	adds	r5, r3, #3
 801c26e:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 801c272:	f1bc 0f00 	cmp.w	ip, #0
 801c276:	dc5f      	bgt.n	801c338 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801c278:	9b07      	ldr	r3, [sp, #28]
 801c27a:	9a08      	ldr	r2, [sp, #32]
 801c27c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c280:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c284:	441a      	add	r2, r3
 801c286:	9208      	str	r2, [sp, #32]
 801c288:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	f340 80e9 	ble.w	801c462 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801c290:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c294:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c296:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c29a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c29e:	eef0 6a62 	vmov.f32	s13, s5
 801c2a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c2a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c2aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c2ae:	ee16 aa90 	vmov	sl, s13
 801c2b2:	eef0 6a43 	vmov.f32	s13, s6
 801c2b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c2ba:	ee16 8a90 	vmov	r8, s13
 801c2be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c2c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c2c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c2ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c2ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c2d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c2d6:	ee12 2a90 	vmov	r2, s5
 801c2da:	eef0 2a47 	vmov.f32	s5, s14
 801c2de:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2e2:	ee13 2a10 	vmov	r2, s6
 801c2e6:	932b      	str	r3, [sp, #172]	@ 0xac
 801c2e8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c2ea:	eeb0 3a67 	vmov.f32	s6, s15
 801c2ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801c2f2:	932c      	str	r3, [sp, #176]	@ 0xb0
 801c2f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c2f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c2f8:	3b01      	subs	r3, #1
 801c2fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c2fc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c2fe:	bf08      	it	eq
 801c300:	4613      	moveq	r3, r2
 801c302:	9307      	str	r3, [sp, #28]
 801c304:	e6b1      	b.n	801c06a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c306:	1c47      	adds	r7, r0, #1
 801c308:	d482      	bmi.n	801c210 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c30a:	42bb      	cmp	r3, r7
 801c30c:	db80      	blt.n	801c210 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c30e:	1c67      	adds	r7, r4, #1
 801c310:	f53f af7e 	bmi.w	801c210 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c314:	42be      	cmp	r6, r7
 801c316:	f6ff af7b 	blt.w	801c210 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c31a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c31c:	b236      	sxth	r6, r6
 801c31e:	9001      	str	r0, [sp, #4]
 801c320:	b21b      	sxth	r3, r3
 801c322:	9600      	str	r6, [sp, #0]
 801c324:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801c326:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801c32a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801c32e:	4629      	mov	r1, r5
 801c330:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c332:	f7ff fd82 	bl	801be3a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801c336:	e76b      	b.n	801c210 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c338:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801c33a:	ea4f 402a 	mov.w	r0, sl, asr #16
 801c33e:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801c342:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801c346:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801c34a:	ea4f 4128 	mov.w	r1, r8, asr #16
 801c34e:	fb07 0101 	mla	r1, r7, r1, r0
 801c352:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c354:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c358:	1844      	adds	r4, r0, r1
 801c35a:	5c40      	ldrb	r0, [r0, r1]
 801c35c:	78a6      	ldrb	r6, [r4, #2]
 801c35e:	7861      	ldrb	r1, [r4, #1]
 801c360:	960f      	str	r6, [sp, #60]	@ 0x3c
 801c362:	78e6      	ldrb	r6, [r4, #3]
 801c364:	910d      	str	r1, [sp, #52]	@ 0x34
 801c366:	9610      	str	r6, [sp, #64]	@ 0x40
 801c368:	f894 9004 	ldrb.w	r9, [r4, #4]
 801c36c:	f894 b005 	ldrb.w	fp, [r4, #5]
 801c370:	b192      	cbz	r2, 801c398 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801c372:	f06f 0604 	mvn.w	r6, #4
 801c376:	2103      	movs	r1, #3
 801c378:	3405      	adds	r4, #5
 801c37a:	fb17 6701 	smlabb	r7, r7, r1, r6
 801c37e:	19e6      	adds	r6, r4, r7
 801c380:	5de4      	ldrb	r4, [r4, r7]
 801c382:	9417      	str	r4, [sp, #92]	@ 0x5c
 801c384:	7874      	ldrb	r4, [r6, #1]
 801c386:	9419      	str	r4, [sp, #100]	@ 0x64
 801c388:	78b4      	ldrb	r4, [r6, #2]
 801c38a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801c38c:	78f4      	ldrb	r4, [r6, #3]
 801c38e:	9418      	str	r4, [sp, #96]	@ 0x60
 801c390:	7934      	ldrb	r4, [r6, #4]
 801c392:	941a      	str	r4, [sp, #104]	@ 0x68
 801c394:	7974      	ldrb	r4, [r6, #5]
 801c396:	941c      	str	r4, [sp, #112]	@ 0x70
 801c398:	b29b      	uxth	r3, r3
 801c39a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801c39c:	b292      	uxth	r2, r2
 801c39e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c3a0:	3503      	adds	r5, #3
 801c3a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c3a6:	fb03 f402 	mul.w	r4, r3, r2
 801c3aa:	011b      	lsls	r3, r3, #4
 801c3ac:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801c3b0:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 801c3b4:	1b1b      	subs	r3, r3, r4
 801c3b6:	b292      	uxth	r2, r2
 801c3b8:	b29b      	uxth	r3, r3
 801c3ba:	1ab6      	subs	r6, r6, r2
 801c3bc:	435f      	muls	r7, r3
 801c3be:	b2b6      	uxth	r6, r6
 801c3c0:	fb03 f909 	mul.w	r9, r3, r9
 801c3c4:	fb03 fb0b 	mul.w	fp, r3, fp
 801c3c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c3ca:	fb06 7000 	mla	r0, r6, r0, r7
 801c3ce:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801c3d0:	fb06 bb03 	mla	fp, r6, r3, fp
 801c3d4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801c3d6:	fb02 0007 	mla	r0, r2, r7, r0
 801c3da:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801c3dc:	fb02 bb03 	mla	fp, r2, r3, fp
 801c3e0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c3e2:	fb04 0007 	mla	r0, r4, r7, r0
 801c3e6:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801c3ea:	fb17 f701 	smulbb	r7, r7, r1
 801c3ee:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c3f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801c3f4:	fb00 700e 	mla	r0, r0, lr, r7
 801c3f8:	fb06 9101 	mla	r1, r6, r1, r9
 801c3fc:	b280      	uxth	r0, r0
 801c3fe:	1c47      	adds	r7, r0, #1
 801c400:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801c404:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801c406:	1200      	asrs	r0, r0, #8
 801c408:	f805 0c06 	strb.w	r0, [r5, #-6]
 801c40c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c40e:	fb02 1100 	mla	r1, r2, r0, r1
 801c412:	981a      	ldr	r0, [sp, #104]	@ 0x68
 801c414:	fb04 1100 	mla	r1, r4, r0, r1
 801c418:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801c41c:	fb04 b403 	mla	r4, r4, r3, fp
 801c420:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801c424:	fb10 f007 	smulbb	r0, r0, r7
 801c428:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c42c:	fb13 f307 	smulbb	r3, r3, r7
 801c430:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c434:	fb01 010e 	mla	r1, r1, lr, r0
 801c438:	fb04 340e 	mla	r4, r4, lr, r3
 801c43c:	b289      	uxth	r1, r1
 801c43e:	b2a4      	uxth	r4, r4
 801c440:	1c48      	adds	r0, r1, #1
 801c442:	1c63      	adds	r3, r4, #1
 801c444:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801c448:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801c44c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c44e:	1209      	asrs	r1, r1, #8
 801c450:	1224      	asrs	r4, r4, #8
 801c452:	449a      	add	sl, r3
 801c454:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c456:	f805 1c05 	strb.w	r1, [r5, #-5]
 801c45a:	f805 4c04 	strb.w	r4, [r5, #-4]
 801c45e:	4498      	add	r8, r3
 801c460:	e707      	b.n	801c272 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801c462:	b01f      	add	sp, #124	@ 0x7c
 801c464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c468 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801c468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c46c:	b087      	sub	sp, #28
 801c46e:	780d      	ldrb	r5, [r1, #0]
 801c470:	784c      	ldrb	r4, [r1, #1]
 801c472:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801c476:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 801c47a:	9004      	str	r0, [sp, #16]
 801c47c:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801c480:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 801c484:	9005      	str	r0, [sp, #20]
 801c486:	fb06 bc03 	mla	ip, r6, r3, fp
 801c48a:	2e00      	cmp	r6, #0
 801c48c:	7888      	ldrb	r0, [r1, #2]
 801c48e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c492:	eb02 090c 	add.w	r9, r2, ip
 801c496:	f2c0 8084 	blt.w	801c5a2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801c49a:	42b7      	cmp	r7, r6
 801c49c:	f340 8081 	ble.w	801c5a2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801c4a0:	f1bb 0f00 	cmp.w	fp, #0
 801c4a4:	db79      	blt.n	801c59a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801c4a6:	455b      	cmp	r3, fp
 801c4a8:	dd77      	ble.n	801c59a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801c4aa:	f812 200c 	ldrb.w	r2, [r2, ip]
 801c4ae:	9201      	str	r2, [sp, #4]
 801c4b0:	f899 2001 	ldrb.w	r2, [r9, #1]
 801c4b4:	9202      	str	r2, [sp, #8]
 801c4b6:	f899 2002 	ldrb.w	r2, [r9, #2]
 801c4ba:	9203      	str	r2, [sp, #12]
 801c4bc:	f11b 0201 	adds.w	r2, fp, #1
 801c4c0:	d476      	bmi.n	801c5b0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801c4c2:	4293      	cmp	r3, r2
 801c4c4:	dd74      	ble.n	801c5b0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801c4c6:	9a04      	ldr	r2, [sp, #16]
 801c4c8:	2a00      	cmp	r2, #0
 801c4ca:	d071      	beq.n	801c5b0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801c4cc:	f899 8003 	ldrb.w	r8, [r9, #3]
 801c4d0:	f899 c004 	ldrb.w	ip, [r9, #4]
 801c4d4:	f899 a005 	ldrb.w	sl, [r9, #5]
 801c4d8:	3601      	adds	r6, #1
 801c4da:	d471      	bmi.n	801c5c0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801c4dc:	42b7      	cmp	r7, r6
 801c4de:	dd6f      	ble.n	801c5c0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801c4e0:	9a05      	ldr	r2, [sp, #20]
 801c4e2:	2a00      	cmp	r2, #0
 801c4e4:	d06c      	beq.n	801c5c0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801c4e6:	f1bb 0f00 	cmp.w	fp, #0
 801c4ea:	db65      	blt.n	801c5b8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801c4ec:	455b      	cmp	r3, fp
 801c4ee:	dd63      	ble.n	801c5b8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801c4f0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801c4f4:	f819 e002 	ldrb.w	lr, [r9, r2]
 801c4f8:	2203      	movs	r2, #3
 801c4fa:	fb03 9602 	mla	r6, r3, r2, r9
 801c4fe:	7877      	ldrb	r7, [r6, #1]
 801c500:	78b6      	ldrb	r6, [r6, #2]
 801c502:	f11b 0b01 	adds.w	fp, fp, #1
 801c506:	d40c      	bmi.n	801c522 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801c508:	455b      	cmp	r3, fp
 801c50a:	dd0a      	ble.n	801c522 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801c50c:	9a04      	ldr	r2, [sp, #16]
 801c50e:	b142      	cbz	r2, 801c522 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801c510:	2203      	movs	r2, #3
 801c512:	fb13 2002 	smlabb	r0, r3, r2, r2
 801c516:	f819 5000 	ldrb.w	r5, [r9, r0]
 801c51a:	fb03 9002 	mla	r0, r3, r2, r9
 801c51e:	7904      	ldrb	r4, [r0, #4]
 801c520:	7940      	ldrb	r0, [r0, #5]
 801c522:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c526:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c52a:	fb03 fb02 	mul.w	fp, r3, r2
 801c52e:	011b      	lsls	r3, r3, #4
 801c530:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801c534:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 801c538:	eba3 030b 	sub.w	r3, r3, fp
 801c53c:	b292      	uxth	r2, r2
 801c53e:	b29b      	uxth	r3, r3
 801c540:	eba9 0902 	sub.w	r9, r9, r2
 801c544:	9304      	str	r3, [sp, #16]
 801c546:	fa1f f989 	uxth.w	r9, r9
 801c54a:	fb03 f808 	mul.w	r8, r3, r8
 801c54e:	9b01      	ldr	r3, [sp, #4]
 801c550:	fb09 8803 	mla	r8, r9, r3, r8
 801c554:	9b04      	ldr	r3, [sp, #16]
 801c556:	fb03 fc0c 	mul.w	ip, r3, ip
 801c55a:	9b02      	ldr	r3, [sp, #8]
 801c55c:	fb02 880e 	mla	r8, r2, lr, r8
 801c560:	fb09 cc03 	mla	ip, r9, r3, ip
 801c564:	9b04      	ldr	r3, [sp, #16]
 801c566:	fb0b 8805 	mla	r8, fp, r5, r8
 801c56a:	fb02 c707 	mla	r7, r2, r7, ip
 801c56e:	fb03 f30a 	mul.w	r3, r3, sl
 801c572:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c576:	fb0b 7404 	mla	r4, fp, r4, r7
 801c57a:	f881 8000 	strb.w	r8, [r1]
 801c57e:	1224      	asrs	r4, r4, #8
 801c580:	704c      	strb	r4, [r1, #1]
 801c582:	9c03      	ldr	r4, [sp, #12]
 801c584:	fb09 3904 	mla	r9, r9, r4, r3
 801c588:	fb02 9206 	mla	r2, r2, r6, r9
 801c58c:	fb0b 2000 	mla	r0, fp, r0, r2
 801c590:	1200      	asrs	r0, r0, #8
 801c592:	7088      	strb	r0, [r1, #2]
 801c594:	b007      	add	sp, #28
 801c596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c59a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801c59e:	9501      	str	r5, [sp, #4]
 801c5a0:	e78c      	b.n	801c4bc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801c5a2:	4682      	mov	sl, r0
 801c5a4:	46a4      	mov	ip, r4
 801c5a6:	46a8      	mov	r8, r5
 801c5a8:	9501      	str	r5, [sp, #4]
 801c5aa:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801c5ae:	e793      	b.n	801c4d8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801c5b0:	4682      	mov	sl, r0
 801c5b2:	46a4      	mov	ip, r4
 801c5b4:	46a8      	mov	r8, r5
 801c5b6:	e78f      	b.n	801c4d8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801c5b8:	4606      	mov	r6, r0
 801c5ba:	4627      	mov	r7, r4
 801c5bc:	46ae      	mov	lr, r5
 801c5be:	e7a0      	b.n	801c502 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801c5c0:	4606      	mov	r6, r0
 801c5c2:	4627      	mov	r7, r4
 801c5c4:	46ae      	mov	lr, r5
 801c5c6:	e7ac      	b.n	801c522 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801c5c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5cc:	b09b      	sub	sp, #108	@ 0x6c
 801c5ce:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c5d0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801c5d2:	9019      	str	r0, [sp, #100]	@ 0x64
 801c5d4:	9109      	str	r1, [sp, #36]	@ 0x24
 801c5d6:	6850      	ldr	r0, [r2, #4]
 801c5d8:	9306      	str	r3, [sp, #24]
 801c5da:	6812      	ldr	r2, [r2, #0]
 801c5dc:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801c5e0:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 801c5e4:	fb00 1303 	mla	r3, r0, r3, r1
 801c5e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c5ec:	18d3      	adds	r3, r2, r3
 801c5ee:	9307      	str	r3, [sp, #28]
 801c5f0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c5f2:	681b      	ldr	r3, [r3, #0]
 801c5f4:	9308      	str	r3, [sp, #32]
 801c5f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	dc03      	bgt.n	801c604 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c5fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	f340 81ab 	ble.w	801c95a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801c604:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c606:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c60a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c60e:	1e48      	subs	r0, r1, #1
 801c610:	1e55      	subs	r5, r2, #1
 801c612:	9b06      	ldr	r3, [sp, #24]
 801c614:	2b00      	cmp	r3, #0
 801c616:	f340 80b1 	ble.w	801c77c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c61a:	ea5f 462b 	movs.w	r6, fp, asr #16
 801c61e:	ea4f 4324 	mov.w	r3, r4, asr #16
 801c622:	d406      	bmi.n	801c632 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c624:	4286      	cmp	r6, r0
 801c626:	da04      	bge.n	801c632 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c628:	2b00      	cmp	r3, #0
 801c62a:	db02      	blt.n	801c632 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c62c:	42ab      	cmp	r3, r5
 801c62e:	f2c0 80a6 	blt.w	801c77e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801c632:	3601      	adds	r6, #1
 801c634:	f100 8097 	bmi.w	801c766 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801c638:	42b1      	cmp	r1, r6
 801c63a:	f2c0 8094 	blt.w	801c766 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801c63e:	3301      	adds	r3, #1
 801c640:	f100 8091 	bmi.w	801c766 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801c644:	429a      	cmp	r2, r3
 801c646:	f2c0 808e 	blt.w	801c766 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801c64a:	9b06      	ldr	r3, [sp, #24]
 801c64c:	9e07      	ldr	r6, [sp, #28]
 801c64e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c652:	2b00      	cmp	r3, #0
 801c654:	f340 80b0 	ble.w	801c7b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c658:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801c65a:	1425      	asrs	r5, r4, #16
 801c65c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c65e:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801c662:	68c7      	ldr	r7, [r0, #12]
 801c664:	ea5f 402b 	movs.w	r0, fp, asr #16
 801c668:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801c66c:	689b      	ldr	r3, [r3, #8]
 801c66e:	f100 80ea 	bmi.w	801c846 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c672:	f103 3cff 	add.w	ip, r3, #4294967295
 801c676:	4560      	cmp	r0, ip
 801c678:	f280 80e5 	bge.w	801c846 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c67c:	2d00      	cmp	r5, #0
 801c67e:	f2c0 80e2 	blt.w	801c846 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c682:	f107 3cff 	add.w	ip, r7, #4294967295
 801c686:	4565      	cmp	r5, ip
 801c688:	f280 80dd 	bge.w	801c846 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c68c:	b21b      	sxth	r3, r3
 801c68e:	fb05 0003 	mla	r0, r5, r3, r0
 801c692:	9d08      	ldr	r5, [sp, #32]
 801c694:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c698:	182f      	adds	r7, r5, r0
 801c69a:	5c2d      	ldrb	r5, [r5, r0]
 801c69c:	7878      	ldrb	r0, [r7, #1]
 801c69e:	f897 e002 	ldrb.w	lr, [r7, #2]
 801c6a2:	900c      	str	r0, [sp, #48]	@ 0x30
 801c6a4:	f897 9003 	ldrb.w	r9, [r7, #3]
 801c6a8:	f897 8004 	ldrb.w	r8, [r7, #4]
 801c6ac:	f897 a005 	ldrb.w	sl, [r7, #5]
 801c6b0:	b1c9      	cbz	r1, 801c6e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801c6b2:	f04f 0c03 	mov.w	ip, #3
 801c6b6:	f06f 0004 	mvn.w	r0, #4
 801c6ba:	3705      	adds	r7, #5
 801c6bc:	fb13 030c 	smlabb	r3, r3, ip, r0
 801c6c0:	eb07 0c03 	add.w	ip, r7, r3
 801c6c4:	5cfb      	ldrb	r3, [r7, r3]
 801c6c6:	930d      	str	r3, [sp, #52]	@ 0x34
 801c6c8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801c6cc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c6ce:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801c6d2:	9311      	str	r3, [sp, #68]	@ 0x44
 801c6d4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801c6d8:	930e      	str	r3, [sp, #56]	@ 0x38
 801c6da:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801c6de:	9310      	str	r3, [sp, #64]	@ 0x40
 801c6e0:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801c6e4:	9312      	str	r3, [sp, #72]	@ 0x48
 801c6e6:	b292      	uxth	r2, r2
 801c6e8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801c6ea:	b289      	uxth	r1, r1
 801c6ec:	fb02 f301 	mul.w	r3, r2, r1
 801c6f0:	0112      	lsls	r2, r2, #4
 801c6f2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801c6f6:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801c6fa:	1ad2      	subs	r2, r2, r3
 801c6fc:	b289      	uxth	r1, r1
 801c6fe:	b292      	uxth	r2, r2
 801c700:	1a7f      	subs	r7, r7, r1
 801c702:	fb02 f909 	mul.w	r9, r2, r9
 801c706:	b2bf      	uxth	r7, r7
 801c708:	fb02 f808 	mul.w	r8, r2, r8
 801c70c:	fb02 fa0a 	mul.w	sl, r2, sl
 801c710:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c712:	fb07 9905 	mla	r9, r7, r5, r9
 801c716:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801c718:	fb07 8800 	mla	r8, r7, r0, r8
 801c71c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c71e:	fb07 aa0e 	mla	sl, r7, lr, sl
 801c722:	fb01 9905 	mla	r9, r1, r5, r9
 801c726:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801c728:	fb01 8800 	mla	r8, r1, r0, r8
 801c72c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c72e:	fb01 a102 	mla	r1, r1, r2, sl
 801c732:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c734:	fb03 9905 	mla	r9, r3, r5, r9
 801c738:	fb03 8800 	mla	r8, r3, r0, r8
 801c73c:	fb03 1302 	mla	r3, r3, r2, r1
 801c740:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c744:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c748:	121b      	asrs	r3, r3, #8
 801c74a:	f886 9000 	strb.w	r9, [r6]
 801c74e:	f886 8001 	strb.w	r8, [r6, #1]
 801c752:	70b3      	strb	r3, [r6, #2]
 801c754:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c756:	3603      	adds	r6, #3
 801c758:	449b      	add	fp, r3
 801c75a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c75c:	441c      	add	r4, r3
 801c75e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c760:	3b01      	subs	r3, #1
 801c762:	930a      	str	r3, [sp, #40]	@ 0x28
 801c764:	e774      	b.n	801c650 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c766:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c768:	449b      	add	fp, r3
 801c76a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c76c:	441c      	add	r4, r3
 801c76e:	9b06      	ldr	r3, [sp, #24]
 801c770:	3b01      	subs	r3, #1
 801c772:	9306      	str	r3, [sp, #24]
 801c774:	9b07      	ldr	r3, [sp, #28]
 801c776:	3303      	adds	r3, #3
 801c778:	9307      	str	r3, [sp, #28]
 801c77a:	e74a      	b.n	801c612 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c77c:	d024      	beq.n	801c7c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801c77e:	9b06      	ldr	r3, [sp, #24]
 801c780:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801c782:	3b01      	subs	r3, #1
 801c784:	fb00 b003 	mla	r0, r0, r3, fp
 801c788:	1400      	asrs	r0, r0, #16
 801c78a:	f53f af5e 	bmi.w	801c64a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c78e:	3901      	subs	r1, #1
 801c790:	4288      	cmp	r0, r1
 801c792:	f6bf af5a 	bge.w	801c64a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c796:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801c798:	fb01 4303 	mla	r3, r1, r3, r4
 801c79c:	141b      	asrs	r3, r3, #16
 801c79e:	f53f af54 	bmi.w	801c64a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c7a2:	3a01      	subs	r2, #1
 801c7a4:	4293      	cmp	r3, r2
 801c7a6:	f6bf af50 	bge.w	801c64a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c7aa:	9b07      	ldr	r3, [sp, #28]
 801c7ac:	f8dd e018 	ldr.w	lr, [sp, #24]
 801c7b0:	1cde      	adds	r6, r3, #3
 801c7b2:	f1be 0f00 	cmp.w	lr, #0
 801c7b6:	dc5f      	bgt.n	801c878 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c7b8:	9b06      	ldr	r3, [sp, #24]
 801c7ba:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c7be:	9b07      	ldr	r3, [sp, #28]
 801c7c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c7c4:	4423      	add	r3, r4
 801c7c6:	9307      	str	r3, [sp, #28]
 801c7c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	f340 80c5 	ble.w	801c95a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801c7d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c7d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c7d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c7da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c7de:	eef0 6a62 	vmov.f32	s13, s5
 801c7e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c7e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c7ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c7ee:	ee16 ba90 	vmov	fp, s13
 801c7f2:	eef0 6a43 	vmov.f32	s13, s6
 801c7f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c7fa:	ee16 4a90 	vmov	r4, s13
 801c7fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c802:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c806:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c80a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c80e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c812:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c816:	ee12 2a90 	vmov	r2, s5
 801c81a:	eef0 2a47 	vmov.f32	s5, s14
 801c81e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c822:	ee13 2a10 	vmov	r2, s6
 801c826:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c828:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c82a:	eeb0 3a67 	vmov.f32	s6, s15
 801c82e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c832:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c836:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c838:	3b01      	subs	r3, #1
 801c83a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c83c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c83e:	bf08      	it	eq
 801c840:	4613      	moveq	r3, r2
 801c842:	9306      	str	r3, [sp, #24]
 801c844:	e6d7      	b.n	801c5f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c846:	f110 0c01 	adds.w	ip, r0, #1
 801c84a:	d483      	bmi.n	801c754 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801c84c:	4563      	cmp	r3, ip
 801c84e:	db81      	blt.n	801c754 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801c850:	f115 0c01 	adds.w	ip, r5, #1
 801c854:	f53f af7e 	bmi.w	801c754 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801c858:	4567      	cmp	r7, ip
 801c85a:	f6ff af7b 	blt.w	801c754 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801c85e:	b23f      	sxth	r7, r7
 801c860:	b21b      	sxth	r3, r3
 801c862:	9700      	str	r7, [sp, #0]
 801c864:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801c868:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801c86c:	9a08      	ldr	r2, [sp, #32]
 801c86e:	4631      	mov	r1, r6
 801c870:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c872:	f7ff fdf9 	bl	801c468 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801c876:	e76d      	b.n	801c754 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801c878:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801c87a:	ea4f 402b 	mov.w	r0, fp, asr #16
 801c87e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801c882:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801c886:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801c88a:	1421      	asrs	r1, r4, #16
 801c88c:	930a      	str	r3, [sp, #40]	@ 0x28
 801c88e:	fb0c 0101 	mla	r1, ip, r1, r0
 801c892:	9808      	ldr	r0, [sp, #32]
 801c894:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c898:	1845      	adds	r5, r0, r1
 801c89a:	5c40      	ldrb	r0, [r0, r1]
 801c89c:	796f      	ldrb	r7, [r5, #5]
 801c89e:	7869      	ldrb	r1, [r5, #1]
 801c8a0:	f895 8002 	ldrb.w	r8, [r5, #2]
 801c8a4:	f895 a003 	ldrb.w	sl, [r5, #3]
 801c8a8:	f895 9004 	ldrb.w	r9, [r5, #4]
 801c8ac:	970c      	str	r7, [sp, #48]	@ 0x30
 801c8ae:	b1a2      	cbz	r2, 801c8da <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801c8b0:	2703      	movs	r7, #3
 801c8b2:	f06f 0304 	mvn.w	r3, #4
 801c8b6:	3505      	adds	r5, #5
 801c8b8:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801c8bc:	eb05 070c 	add.w	r7, r5, ip
 801c8c0:	f815 500c 	ldrb.w	r5, [r5, ip]
 801c8c4:	9513      	str	r5, [sp, #76]	@ 0x4c
 801c8c6:	787d      	ldrb	r5, [r7, #1]
 801c8c8:	9515      	str	r5, [sp, #84]	@ 0x54
 801c8ca:	78bd      	ldrb	r5, [r7, #2]
 801c8cc:	9517      	str	r5, [sp, #92]	@ 0x5c
 801c8ce:	78fd      	ldrb	r5, [r7, #3]
 801c8d0:	9514      	str	r5, [sp, #80]	@ 0x50
 801c8d2:	793d      	ldrb	r5, [r7, #4]
 801c8d4:	9516      	str	r5, [sp, #88]	@ 0x58
 801c8d6:	797d      	ldrb	r5, [r7, #5]
 801c8d8:	9518      	str	r5, [sp, #96]	@ 0x60
 801c8da:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801c8de:	b292      	uxth	r2, r2
 801c8e0:	3603      	adds	r6, #3
 801c8e2:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c8e6:	fb03 f502 	mul.w	r5, r3, r2
 801c8ea:	011b      	lsls	r3, r3, #4
 801c8ec:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801c8f0:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 801c8f4:	1b5b      	subs	r3, r3, r5
 801c8f6:	b292      	uxth	r2, r2
 801c8f8:	b29b      	uxth	r3, r3
 801c8fa:	1abf      	subs	r7, r7, r2
 801c8fc:	fb03 f909 	mul.w	r9, r3, r9
 801c900:	b2bf      	uxth	r7, r7
 801c902:	fb03 fa0a 	mul.w	sl, r3, sl
 801c906:	fb07 9901 	mla	r9, r7, r1, r9
 801c90a:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801c90c:	fb07 aa00 	mla	sl, r7, r0, sl
 801c910:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c912:	fb02 9901 	mla	r9, r2, r1, r9
 801c916:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801c918:	fb02 aa00 	mla	sl, r2, r0, sl
 801c91c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c91e:	fb05 9901 	mla	r9, r5, r1, r9
 801c922:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c924:	fb05 aa00 	mla	sl, r5, r0, sl
 801c928:	434b      	muls	r3, r1
 801c92a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c92c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c930:	fb07 3308 	mla	r3, r7, r8, r3
 801c934:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c938:	f806 ac06 	strb.w	sl, [r6, #-6]
 801c93c:	fb02 3201 	mla	r2, r2, r1, r3
 801c940:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c942:	f806 9c05 	strb.w	r9, [r6, #-5]
 801c946:	fb05 2503 	mla	r5, r5, r3, r2
 801c94a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c94c:	122d      	asrs	r5, r5, #8
 801c94e:	449b      	add	fp, r3
 801c950:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c952:	f806 5c04 	strb.w	r5, [r6, #-4]
 801c956:	441c      	add	r4, r3
 801c958:	e72b      	b.n	801c7b2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801c95a:	b01b      	add	sp, #108	@ 0x6c
 801c95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c960 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801c960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c964:	b087      	sub	sp, #28
 801c966:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801c96a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801c96e:	fb05 7003 	mla	r0, r5, r3, r7
 801c972:	2d00      	cmp	r5, #0
 801c974:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801c978:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801c97c:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801c980:	f2c0 811f 	blt.w	801cbc2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801c984:	45a8      	cmp	r8, r5
 801c986:	f340 811c 	ble.w	801cbc2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801c98a:	2f00      	cmp	r7, #0
 801c98c:	f2c0 8117 	blt.w	801cbbe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801c990:	42bb      	cmp	r3, r7
 801c992:	f340 8114 	ble.w	801cbbe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801c996:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801c99a:	1c7a      	adds	r2, r7, #1
 801c99c:	f100 8114 	bmi.w	801cbc8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801c9a0:	4293      	cmp	r3, r2
 801c9a2:	f340 8111 	ble.w	801cbc8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801c9a6:	2c00      	cmp	r4, #0
 801c9a8:	f000 8110 	beq.w	801cbcc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801c9ac:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801c9b0:	3501      	adds	r5, #1
 801c9b2:	f100 810f 	bmi.w	801cbd4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801c9b6:	45a8      	cmp	r8, r5
 801c9b8:	f340 810c 	ble.w	801cbd4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801c9bc:	f1be 0f00 	cmp.w	lr, #0
 801c9c0:	f000 810b 	beq.w	801cbda <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801c9c4:	2f00      	cmp	r7, #0
 801c9c6:	f2c0 8103 	blt.w	801cbd0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801c9ca:	42bb      	cmp	r3, r7
 801c9cc:	f340 8100 	ble.w	801cbd0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801c9d0:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801c9d4:	3701      	adds	r7, #1
 801c9d6:	f100 8103 	bmi.w	801cbe0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801c9da:	42bb      	cmp	r3, r7
 801c9dc:	f340 8100 	ble.w	801cbe0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801c9e0:	2c00      	cmp	r4, #0
 801c9e2:	f000 80ff 	beq.w	801cbe4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801c9e6:	3301      	adds	r3, #1
 801c9e8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801c9ec:	fa1f fc84 	uxth.w	ip, r4
 801c9f0:	fa1f fe8e 	uxth.w	lr, lr
 801c9f4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801c9f8:	fb0c f90e 	mul.w	r9, ip, lr
 801c9fc:	0e13      	lsrs	r3, r2, #24
 801c9fe:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801ca02:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801ca06:	9302      	str	r3, [sp, #8]
 801ca08:	ebac 0709 	sub.w	r7, ip, r9
 801ca0c:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801ca10:	fa1f f48e 	uxth.w	r4, lr
 801ca14:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801ca18:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801ca1c:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801ca20:	fb0a fe0e 	mul.w	lr, sl, lr
 801ca24:	1b1b      	subs	r3, r3, r4
 801ca26:	fb0a f606 	mul.w	r6, sl, r6
 801ca2a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801ca2e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ca32:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801ca36:	b29b      	uxth	r3, r3
 801ca38:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ca3c:	b2bf      	uxth	r7, r7
 801ca3e:	9301      	str	r3, [sp, #4]
 801ca40:	44e6      	add	lr, ip
 801ca42:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801ca46:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ca4a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ca4e:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801ca52:	9303      	str	r3, [sp, #12]
 801ca54:	0a33      	lsrs	r3, r6, #8
 801ca56:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801ca5a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801ca5e:	9304      	str	r3, [sp, #16]
 801ca60:	fb0b f606 	mul.w	r6, fp, r6
 801ca64:	fb0b f000 	mul.w	r0, fp, r0
 801ca68:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801ca6c:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801ca70:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ca74:	44b6      	add	lr, r6
 801ca76:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801ca7a:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801ca7e:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801ca82:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801ca86:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ca8a:	fb08 f606 	mul.w	r6, r8, r6
 801ca8e:	0a03      	lsrs	r3, r0, #8
 801ca90:	fb08 f505 	mul.w	r5, r8, r5
 801ca94:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ca98:	0a30      	lsrs	r0, r6, #8
 801ca9a:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801ca9e:	9305      	str	r3, [sp, #20]
 801caa0:	0e13      	lsrs	r3, r2, #24
 801caa2:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801caa6:	fb0e fe07 	mul.w	lr, lr, r7
 801caaa:	4430      	add	r0, r6
 801caac:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801cab0:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801cab4:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801cab8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801cabc:	0a00      	lsrs	r0, r0, #8
 801cabe:	435e      	muls	r6, r3
 801cac0:	0a2d      	lsrs	r5, r5, #8
 801cac2:	435a      	muls	r2, r3
 801cac4:	9b03      	ldr	r3, [sp, #12]
 801cac6:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801caca:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801cace:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801cad2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cad6:	44b4      	add	ip, r6
 801cad8:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801cadc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cae0:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801cae4:	9e01      	ldr	r6, [sp, #4]
 801cae6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801caea:	fb03 ee06 	mla	lr, r3, r6, lr
 801caee:	9b04      	ldr	r3, [sp, #16]
 801caf0:	0a12      	lsrs	r2, r2, #8
 801caf2:	fb0c ee09 	mla	lr, ip, r9, lr
 801caf6:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801cafa:	9b05      	ldr	r3, [sp, #20]
 801cafc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801cb00:	fb00 ee04 	mla	lr, r0, r4, lr
 801cb04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cb08:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801cb0c:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801cb10:	9b01      	ldr	r3, [sp, #4]
 801cb12:	fb07 fe0e 	mul.w	lr, r7, lr
 801cb16:	fb07 f70b 	mul.w	r7, r7, fp
 801cb1a:	fb03 ee06 	mla	lr, r3, r6, lr
 801cb1e:	fb03 730a 	mla	r3, r3, sl, r7
 801cb22:	fb09 e202 	mla	r2, r9, r2, lr
 801cb26:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801cb2a:	fb04 2e0e 	mla	lr, r4, lr, r2
 801cb2e:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 801cb32:	fb04 3408 	mla	r4, r4, r8, r3
 801cb36:	9b02      	ldr	r3, [sp, #8]
 801cb38:	b292      	uxth	r2, r2
 801cb3a:	fb09 4903 	mla	r9, r9, r3, r4
 801cb3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cb42:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801cb46:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801cb4a:	fb09 f902 	mul.w	r9, r9, r2
 801cb4e:	ea40 0e0e 	orr.w	lr, r0, lr
 801cb52:	f109 0301 	add.w	r3, r9, #1
 801cb56:	fa5f f08e 	uxtb.w	r0, lr
 801cb5a:	fb10 f002 	smulbb	r0, r0, r2
 801cb5e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801cb62:	780b      	ldrb	r3, [r1, #0]
 801cb64:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801cb68:	fa5f f989 	uxtb.w	r9, r9
 801cb6c:	fb03 0309 	mla	r3, r3, r9, r0
 801cb70:	b29b      	uxth	r3, r3
 801cb72:	1c58      	adds	r0, r3, #1
 801cb74:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801cb78:	7848      	ldrb	r0, [r1, #1]
 801cb7a:	fb10 f009 	smulbb	r0, r0, r9
 801cb7e:	121b      	asrs	r3, r3, #8
 801cb80:	700b      	strb	r3, [r1, #0]
 801cb82:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801cb86:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801cb8a:	fb03 0302 	mla	r3, r3, r2, r0
 801cb8e:	b29b      	uxth	r3, r3
 801cb90:	1c58      	adds	r0, r3, #1
 801cb92:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801cb96:	121b      	asrs	r3, r3, #8
 801cb98:	704b      	strb	r3, [r1, #1]
 801cb9a:	788b      	ldrb	r3, [r1, #2]
 801cb9c:	fb13 f909 	smulbb	r9, r3, r9
 801cba0:	fb0e 9e02 	mla	lr, lr, r2, r9
 801cba4:	fa1f fe8e 	uxth.w	lr, lr
 801cba8:	f10e 0301 	add.w	r3, lr, #1
 801cbac:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801cbb0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cbb4:	f881 e002 	strb.w	lr, [r1, #2]
 801cbb8:	b007      	add	sp, #28
 801cbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbbe:	2600      	movs	r6, #0
 801cbc0:	e6eb      	b.n	801c99a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801cbc2:	2000      	movs	r0, #0
 801cbc4:	4606      	mov	r6, r0
 801cbc6:	e6f3      	b.n	801c9b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801cbc8:	2000      	movs	r0, #0
 801cbca:	e6f1      	b.n	801c9b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801cbcc:	4620      	mov	r0, r4
 801cbce:	e6ef      	b.n	801c9b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801cbd0:	2500      	movs	r5, #0
 801cbd2:	e6ff      	b.n	801c9d4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801cbd4:	2200      	movs	r2, #0
 801cbd6:	4615      	mov	r5, r2
 801cbd8:	e708      	b.n	801c9ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801cbda:	4672      	mov	r2, lr
 801cbdc:	4675      	mov	r5, lr
 801cbde:	e705      	b.n	801c9ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801cbe0:	2200      	movs	r2, #0
 801cbe2:	e703      	b.n	801c9ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801cbe4:	4622      	mov	r2, r4
 801cbe6:	e701      	b.n	801c9ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801cbe8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbec:	b09d      	sub	sp, #116	@ 0x74
 801cbee:	9219      	str	r2, [sp, #100]	@ 0x64
 801cbf0:	9307      	str	r3, [sp, #28]
 801cbf2:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801cbf4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 801cbf8:	901b      	str	r0, [sp, #108]	@ 0x6c
 801cbfa:	931a      	str	r3, [sp, #104]	@ 0x68
 801cbfc:	6850      	ldr	r0, [r2, #4]
 801cbfe:	9117      	str	r1, [sp, #92]	@ 0x5c
 801cc00:	6812      	ldr	r2, [r2, #0]
 801cc02:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 801cc06:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 801cc0a:	fb00 1303 	mla	r3, r0, r3, r1
 801cc0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc12:	18d3      	adds	r3, r2, r3
 801cc14:	930a      	str	r3, [sp, #40]	@ 0x28
 801cc16:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801cc18:	681b      	ldr	r3, [r3, #0]
 801cc1a:	9310      	str	r3, [sp, #64]	@ 0x40
 801cc1c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801cc20:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cc22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	dc03      	bgt.n	801cc30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cc28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	f340 8368 	ble.w	801d300 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801cc30:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801cc32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cc36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cc3a:	1e48      	subs	r0, r1, #1
 801cc3c:	1e57      	subs	r7, r2, #1
 801cc3e:	9b07      	ldr	r3, [sp, #28]
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	f340 8187 	ble.w	801cf54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801cc46:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801cc4a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801cc4e:	d406      	bmi.n	801cc5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cc50:	4584      	cmp	ip, r0
 801cc52:	da04      	bge.n	801cc5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	db02      	blt.n	801cc5e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cc58:	42bb      	cmp	r3, r7
 801cc5a:	f2c0 817c 	blt.w	801cf56 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801cc5e:	f11c 0c01 	adds.w	ip, ip, #1
 801cc62:	f100 816c 	bmi.w	801cf3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801cc66:	4561      	cmp	r1, ip
 801cc68:	f2c0 8169 	blt.w	801cf3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801cc6c:	3301      	adds	r3, #1
 801cc6e:	f100 8166 	bmi.w	801cf3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801cc72:	429a      	cmp	r2, r3
 801cc74:	f2c0 8163 	blt.w	801cf3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801cc78:	9b07      	ldr	r3, [sp, #28]
 801cc7a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801cc7c:	9318      	str	r3, [sp, #96]	@ 0x60
 801cc7e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	f340 8186 	ble.w	801cf92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801cc86:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801cc88:	142a      	asrs	r2, r5, #16
 801cc8a:	ea4f 4026 	mov.w	r0, r6, asr #16
 801cc8e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801cc92:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801cc96:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801cc9a:	f100 81cb 	bmi.w	801d034 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801cc9e:	f10e 38ff 	add.w	r8, lr, #4294967295
 801cca2:	4542      	cmp	r2, r8
 801cca4:	f280 81c6 	bge.w	801d034 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801cca8:	2800      	cmp	r0, #0
 801ccaa:	f2c0 81c3 	blt.w	801d034 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801ccae:	f103 38ff 	add.w	r8, r3, #4294967295
 801ccb2:	4540      	cmp	r0, r8
 801ccb4:	f280 81be 	bge.w	801d034 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801ccb8:	fa0f f38e 	sxth.w	r3, lr
 801ccbc:	fb00 2203 	mla	r2, r0, r3, r2
 801ccc0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ccc2:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801ccc6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801ccca:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801ccce:	2900      	cmp	r1, #0
 801ccd0:	f000 81a6 	beq.w	801d020 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801ccd4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ccd8:	900c      	str	r0, [sp, #48]	@ 0x30
 801ccda:	0e00      	lsrs	r0, r0, #24
 801ccdc:	9013      	str	r0, [sp, #76]	@ 0x4c
 801ccde:	f1bc 0f00 	cmp.w	ip, #0
 801cce2:	d00f      	beq.n	801cd04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801cce4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801cce8:	3b01      	subs	r3, #1
 801ccea:	009b      	lsls	r3, r3, #2
 801ccec:	3304      	adds	r3, #4
 801ccee:	eb08 0003 	add.w	r0, r8, r3
 801ccf2:	f858 3003 	ldr.w	r3, [r8, r3]
 801ccf6:	9308      	str	r3, [sp, #32]
 801ccf8:	0e1b      	lsrs	r3, r3, #24
 801ccfa:	9311      	str	r3, [sp, #68]	@ 0x44
 801ccfc:	6843      	ldr	r3, [r0, #4]
 801ccfe:	930d      	str	r3, [sp, #52]	@ 0x34
 801cd00:	0e1b      	lsrs	r3, r3, #24
 801cd02:	9314      	str	r3, [sp, #80]	@ 0x50
 801cd04:	b289      	uxth	r1, r1
 801cd06:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801cd08:	fa1f fc8c 	uxth.w	ip, ip
 801cd0c:	0108      	lsls	r0, r1, #4
 801cd0e:	fb01 f90c 	mul.w	r9, r1, ip
 801cd12:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801cd16:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801cd1a:	eba0 0809 	sub.w	r8, r0, r9
 801cd1e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801cd20:	fa1f f18c 	uxth.w	r1, ip
 801cd24:	fa1f f888 	uxth.w	r8, r8
 801cd28:	1a5b      	subs	r3, r3, r1
 801cd2a:	fb08 f000 	mul.w	r0, r8, r0
 801cd2e:	b29b      	uxth	r3, r3
 801cd30:	fb03 000e 	mla	r0, r3, lr, r0
 801cd34:	fb01 0004 	mla	r0, r1, r4, r0
 801cd38:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801cd3a:	fb09 0004 	mla	r0, r9, r4, r0
 801cd3e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801cd42:	2800      	cmp	r0, #0
 801cd44:	f000 80f2 	beq.w	801cf2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801cd48:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801cd4c:	d01b      	beq.n	801cd86 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801cd4e:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801cd52:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801cd56:	fb0e fa0a 	mul.w	sl, lr, sl
 801cd5a:	fb0e fe02 	mul.w	lr, lr, r2
 801cd5e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801cd62:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801cd66:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801cd6a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801cd6e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801cd72:	4452      	add	r2, sl
 801cd74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cd78:	0a12      	lsrs	r2, r2, #8
 801cd7a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801cd7e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801cd82:	ea42 020c 	orr.w	r2, r2, ip
 801cd86:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cd88:	2cff      	cmp	r4, #255	@ 0xff
 801cd8a:	d021      	beq.n	801cdd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801cd8c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801cd8e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801cd92:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cd94:	fb04 fb0b 	mul.w	fp, r4, fp
 801cd98:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801cd9a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801cd9e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cda0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801cda4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cda8:	fb04 fa0a 	mul.w	sl, r4, sl
 801cdac:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cdb0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801cdb4:	44de      	add	lr, fp
 801cdb6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cdba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cdbe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cdc2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cdc6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801cdca:	ea4e 040a 	orr.w	r4, lr, sl
 801cdce:	940c      	str	r4, [sp, #48]	@ 0x30
 801cdd0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801cdd2:	2cff      	cmp	r4, #255	@ 0xff
 801cdd4:	d021      	beq.n	801ce1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801cdd6:	9c08      	ldr	r4, [sp, #32]
 801cdd8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801cddc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801cdde:	fb04 fb0b 	mul.w	fp, r4, fp
 801cde2:	9c08      	ldr	r4, [sp, #32]
 801cde4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801cde8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801cdea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801cdee:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cdf2:	fb04 fa0a 	mul.w	sl, r4, sl
 801cdf6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cdfa:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801cdfe:	44de      	add	lr, fp
 801ce00:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ce04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ce08:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ce0c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ce10:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ce14:	ea4e 040a 	orr.w	r4, lr, sl
 801ce18:	9408      	str	r4, [sp, #32]
 801ce1a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ce1c:	2cff      	cmp	r4, #255	@ 0xff
 801ce1e:	d021      	beq.n	801ce64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ce20:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ce22:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801ce26:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ce28:	fb04 fb0b 	mul.w	fp, r4, fp
 801ce2c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ce2e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ce32:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ce34:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ce38:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ce3c:	fb04 fa0a 	mul.w	sl, r4, sl
 801ce40:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ce44:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ce48:	44de      	add	lr, fp
 801ce4a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ce4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ce52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ce56:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ce5a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ce5e:	ea4e 040a 	orr.w	r4, lr, sl
 801ce62:	940d      	str	r4, [sp, #52]	@ 0x34
 801ce64:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ce66:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801ce6a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ce6e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ce72:	9c08      	ldr	r4, [sp, #32]
 801ce74:	fb08 fc0c 	mul.w	ip, r8, ip
 801ce78:	fb03 cc0e 	mla	ip, r3, lr, ip
 801ce7c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801ce80:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801ce82:	fb01 cc0e 	mla	ip, r1, lr, ip
 801ce86:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801ce8a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ce8c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801ce90:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801ce94:	fb08 f80e 	mul.w	r8, r8, lr
 801ce98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ce9c:	fb03 8202 	mla	r2, r3, r2, r8
 801cea0:	9b08      	ldr	r3, [sp, #32]
 801cea2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cea6:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 801ceaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ceac:	fb01 220a 	mla	r2, r1, sl, r2
 801ceb0:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 801ceb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ceb6:	fb09 2901 	mla	r9, r9, r1, r2
 801ceba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cebc:	4343      	muls	r3, r0
 801cebe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801cec2:	1c58      	adds	r0, r3, #1
 801cec4:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801cec8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801cecc:	783b      	ldrb	r3, [r7, #0]
 801cece:	ea4c 0c09 	orr.w	ip, ip, r9
 801ced2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801ced6:	fa5f f28c 	uxtb.w	r2, ip
 801ceda:	b2c0      	uxtb	r0, r0
 801cedc:	fb12 f201 	smulbb	r2, r2, r1
 801cee0:	fb03 2300 	mla	r3, r3, r0, r2
 801cee4:	b29b      	uxth	r3, r3
 801cee6:	1c5a      	adds	r2, r3, #1
 801cee8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ceec:	787a      	ldrb	r2, [r7, #1]
 801ceee:	fb12 f200 	smulbb	r2, r2, r0
 801cef2:	121b      	asrs	r3, r3, #8
 801cef4:	703b      	strb	r3, [r7, #0]
 801cef6:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801cefa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801cefe:	fb03 2301 	mla	r3, r3, r1, r2
 801cf02:	b29b      	uxth	r3, r3
 801cf04:	1c5a      	adds	r2, r3, #1
 801cf06:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cf0a:	121b      	asrs	r3, r3, #8
 801cf0c:	707b      	strb	r3, [r7, #1]
 801cf0e:	78bb      	ldrb	r3, [r7, #2]
 801cf10:	fb13 f000 	smulbb	r0, r3, r0
 801cf14:	fb0c 0c01 	mla	ip, ip, r1, r0
 801cf18:	fa1f fc8c 	uxth.w	ip, ip
 801cf1c:	f10c 0301 	add.w	r3, ip, #1
 801cf20:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801cf24:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801cf28:	f887 c002 	strb.w	ip, [r7, #2]
 801cf2c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801cf2e:	3703      	adds	r7, #3
 801cf30:	441d      	add	r5, r3
 801cf32:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801cf34:	441e      	add	r6, r3
 801cf36:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801cf38:	3b01      	subs	r3, #1
 801cf3a:	9318      	str	r3, [sp, #96]	@ 0x60
 801cf3c:	e69f      	b.n	801cc7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cf3e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801cf40:	441d      	add	r5, r3
 801cf42:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801cf44:	441e      	add	r6, r3
 801cf46:	9b07      	ldr	r3, [sp, #28]
 801cf48:	3b01      	subs	r3, #1
 801cf4a:	9307      	str	r3, [sp, #28]
 801cf4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cf4e:	3303      	adds	r3, #3
 801cf50:	930a      	str	r3, [sp, #40]	@ 0x28
 801cf52:	e674      	b.n	801cc3e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801cf54:	d025      	beq.n	801cfa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801cf56:	9b07      	ldr	r3, [sp, #28]
 801cf58:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 801cf5a:	3b01      	subs	r3, #1
 801cf5c:	fb00 5003 	mla	r0, r0, r3, r5
 801cf60:	1400      	asrs	r0, r0, #16
 801cf62:	f53f ae89 	bmi.w	801cc78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cf66:	3901      	subs	r1, #1
 801cf68:	4288      	cmp	r0, r1
 801cf6a:	f6bf ae85 	bge.w	801cc78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cf6e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801cf70:	fb01 6303 	mla	r3, r1, r3, r6
 801cf74:	141b      	asrs	r3, r3, #16
 801cf76:	f53f ae7f 	bmi.w	801cc78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cf7a:	3a01      	subs	r2, #1
 801cf7c:	4293      	cmp	r3, r2
 801cf7e:	f6bf ae7b 	bge.w	801cc78 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801cf82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cf84:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801cf88:	f103 0e03 	add.w	lr, r3, #3
 801cf8c:	f1bb 0f00 	cmp.w	fp, #0
 801cf90:	dc6e      	bgt.n	801d070 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801cf92:	9b07      	ldr	r3, [sp, #28]
 801cf94:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801cf98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cf9a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cf9e:	4423      	add	r3, r4
 801cfa0:	930a      	str	r3, [sp, #40]	@ 0x28
 801cfa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	f340 81ab 	ble.w	801d300 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801cfaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801cfae:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801cfb0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cfb4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cfb8:	eef0 6a62 	vmov.f32	s13, s5
 801cfbc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cfc0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cfc4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cfc8:	ee16 5a90 	vmov	r5, s13
 801cfcc:	eef0 6a43 	vmov.f32	s13, s6
 801cfd0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cfd4:	ee16 6a90 	vmov	r6, s13
 801cfd8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cfdc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cfe0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cfe4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cfe8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cfec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cff0:	ee12 2a90 	vmov	r2, s5
 801cff4:	eef0 2a47 	vmov.f32	s5, s14
 801cff8:	fb92 f3f3 	sdiv	r3, r2, r3
 801cffc:	ee13 2a10 	vmov	r2, s6
 801d000:	9329      	str	r3, [sp, #164]	@ 0xa4
 801d002:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d004:	eeb0 3a67 	vmov.f32	s6, s15
 801d008:	fb92 f3f3 	sdiv	r3, r2, r3
 801d00c:	932a      	str	r3, [sp, #168]	@ 0xa8
 801d00e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d010:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d012:	3b01      	subs	r3, #1
 801d014:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d016:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d018:	bf08      	it	eq
 801d01a:	4613      	moveq	r3, r2
 801d01c:	9307      	str	r3, [sp, #28]
 801d01e:	e600      	b.n	801cc22 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d020:	f1bc 0f00 	cmp.w	ip, #0
 801d024:	f43f ae6e 	beq.w	801cd04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d028:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801d02c:	9308      	str	r3, [sp, #32]
 801d02e:	0e1b      	lsrs	r3, r3, #24
 801d030:	9311      	str	r3, [sp, #68]	@ 0x44
 801d032:	e667      	b.n	801cd04 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d034:	f112 0801 	adds.w	r8, r2, #1
 801d038:	f53f af78 	bmi.w	801cf2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d03c:	45c6      	cmp	lr, r8
 801d03e:	f6ff af75 	blt.w	801cf2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d042:	f110 0801 	adds.w	r8, r0, #1
 801d046:	f53f af71 	bmi.w	801cf2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d04a:	4543      	cmp	r3, r8
 801d04c:	f6ff af6e 	blt.w	801cf2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d050:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801d052:	b21b      	sxth	r3, r3
 801d054:	9201      	str	r2, [sp, #4]
 801d056:	9300      	str	r3, [sp, #0]
 801d058:	fa0f f38e 	sxth.w	r3, lr
 801d05c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d05e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d062:	e9cd c404 	strd	ip, r4, [sp, #16]
 801d066:	4639      	mov	r1, r7
 801d068:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801d06a:	f7ff fc79 	bl	801c960 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801d06e:	e75d      	b.n	801cf2c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d070:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801d072:	142f      	asrs	r7, r5, #16
 801d074:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d076:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d07a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801d07e:	1433      	asrs	r3, r6, #16
 801d080:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d084:	fb02 7303 	mla	r3, r2, r3, r7
 801d088:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801d08c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d090:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d094:	2900      	cmp	r1, #0
 801d096:	f000 812a 	beq.w	801d2ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801d09a:	687c      	ldr	r4, [r7, #4]
 801d09c:	940e      	str	r4, [sp, #56]	@ 0x38
 801d09e:	0e24      	lsrs	r4, r4, #24
 801d0a0:	9415      	str	r4, [sp, #84]	@ 0x54
 801d0a2:	b178      	cbz	r0, 801d0c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d0a4:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801d0a8:	3a01      	subs	r2, #1
 801d0aa:	0092      	lsls	r2, r2, #2
 801d0ac:	3204      	adds	r2, #4
 801d0ae:	eb07 0802 	add.w	r8, r7, r2
 801d0b2:	58ba      	ldr	r2, [r7, r2]
 801d0b4:	9209      	str	r2, [sp, #36]	@ 0x24
 801d0b6:	0e12      	lsrs	r2, r2, #24
 801d0b8:	9212      	str	r2, [sp, #72]	@ 0x48
 801d0ba:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801d0be:	920f      	str	r2, [sp, #60]	@ 0x3c
 801d0c0:	0e12      	lsrs	r2, r2, #24
 801d0c2:	9216      	str	r2, [sp, #88]	@ 0x58
 801d0c4:	b289      	uxth	r1, r1
 801d0c6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d0c8:	b280      	uxth	r0, r0
 801d0ca:	fb01 f900 	mul.w	r9, r1, r0
 801d0ce:	0109      	lsls	r1, r1, #4
 801d0d0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d0d4:	eba1 0809 	sub.w	r8, r1, r9
 801d0d8:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 801d0dc:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801d0de:	b280      	uxth	r0, r0
 801d0e0:	fa1f f888 	uxth.w	r8, r8
 801d0e4:	1a12      	subs	r2, r2, r0
 801d0e6:	fb08 f101 	mul.w	r1, r8, r1
 801d0ea:	b292      	uxth	r2, r2
 801d0ec:	fb02 110c 	mla	r1, r2, ip, r1
 801d0f0:	fb00 1104 	mla	r1, r0, r4, r1
 801d0f4:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d0f6:	fb09 1104 	mla	r1, r9, r4, r1
 801d0fa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d0fe:	2900      	cmp	r1, #0
 801d100:	f000 80ec 	beq.w	801d2dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801d104:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801d108:	d019      	beq.n	801d13e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801d10a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d10e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d112:	fb0c fa0a 	mul.w	sl, ip, sl
 801d116:	fb0c fc03 	mul.w	ip, ip, r3
 801d11a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d11e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d122:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801d126:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d12a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d12e:	4453      	add	r3, sl
 801d130:	0a3f      	lsrs	r7, r7, #8
 801d132:	0a1b      	lsrs	r3, r3, #8
 801d134:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801d138:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d13c:	433b      	orrs	r3, r7
 801d13e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d140:	2cff      	cmp	r4, #255	@ 0xff
 801d142:	d020      	beq.n	801d186 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801d144:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d146:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d14a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d14c:	4367      	muls	r7, r4
 801d14e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d150:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d154:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d158:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d15a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d15e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d162:	fb04 fa0a 	mul.w	sl, r4, sl
 801d166:	44bc      	add	ip, r7
 801d168:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d16c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d170:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d174:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d178:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d17c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d180:	ea4c 040a 	orr.w	r4, ip, sl
 801d184:	940e      	str	r4, [sp, #56]	@ 0x38
 801d186:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d188:	2cff      	cmp	r4, #255	@ 0xff
 801d18a:	d020      	beq.n	801d1ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801d18c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d18e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d192:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d194:	4367      	muls	r7, r4
 801d196:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d198:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d19c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d1a0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d1a2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d1a6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d1aa:	fb04 fa0a 	mul.w	sl, r4, sl
 801d1ae:	44bc      	add	ip, r7
 801d1b0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d1b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d1b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d1bc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d1c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d1c4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d1c8:	ea4c 040a 	orr.w	r4, ip, sl
 801d1cc:	9409      	str	r4, [sp, #36]	@ 0x24
 801d1ce:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d1d0:	2cff      	cmp	r4, #255	@ 0xff
 801d1d2:	d020      	beq.n	801d216 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801d1d4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d1d6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d1da:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d1dc:	4367      	muls	r7, r4
 801d1de:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d1e0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d1e4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d1e8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d1ea:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d1ee:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d1f2:	fb04 fa0a 	mul.w	sl, r4, sl
 801d1f6:	44bc      	add	ip, r7
 801d1f8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d1fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d200:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d204:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d208:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d20c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d210:	ea4c 040a 	orr.w	r4, ip, sl
 801d214:	940f      	str	r4, [sp, #60]	@ 0x3c
 801d216:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d218:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801d21c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d220:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d224:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d226:	fb08 f707 	mul.w	r7, r8, r7
 801d22a:	fb02 770c 	mla	r7, r2, ip, r7
 801d22e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d232:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d234:	fb00 770c 	mla	r7, r0, ip, r7
 801d238:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d23c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d23e:	fb09 770c 	mla	r7, r9, ip, r7
 801d242:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801d246:	fb08 f80c 	mul.w	r8, r8, ip
 801d24a:	0a3f      	lsrs	r7, r7, #8
 801d24c:	fb02 8303 	mla	r3, r2, r3, r8
 801d250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d252:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801d256:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801d25a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d25c:	fb00 330a 	mla	r3, r0, sl, r3
 801d260:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801d264:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801d266:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d26a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d26c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d270:	434b      	muls	r3, r1
 801d272:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d276:	1c59      	adds	r1, r3, #1
 801d278:	ea47 070c 	orr.w	r7, r7, ip
 801d27c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d280:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d284:	b2fa      	uxtb	r2, r7
 801d286:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d28a:	fb12 f200 	smulbb	r2, r2, r0
 801d28e:	b2c9      	uxtb	r1, r1
 801d290:	fb03 2301 	mla	r3, r3, r1, r2
 801d294:	b29b      	uxth	r3, r3
 801d296:	1c5a      	adds	r2, r3, #1
 801d298:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d29c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801d2a0:	fb12 f201 	smulbb	r2, r2, r1
 801d2a4:	121b      	asrs	r3, r3, #8
 801d2a6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d2aa:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801d2ae:	0c3f      	lsrs	r7, r7, #16
 801d2b0:	fb03 2300 	mla	r3, r3, r0, r2
 801d2b4:	b29b      	uxth	r3, r3
 801d2b6:	1c5a      	adds	r2, r3, #1
 801d2b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d2bc:	121b      	asrs	r3, r3, #8
 801d2be:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d2c2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801d2c6:	fb13 f101 	smulbb	r1, r3, r1
 801d2ca:	fb07 1700 	mla	r7, r7, r0, r1
 801d2ce:	b2bf      	uxth	r7, r7
 801d2d0:	1c79      	adds	r1, r7, #1
 801d2d2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801d2d6:	123f      	asrs	r7, r7, #8
 801d2d8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801d2dc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d2de:	f10e 0e03 	add.w	lr, lr, #3
 801d2e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d2e6:	441d      	add	r5, r3
 801d2e8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d2ea:	441e      	add	r6, r3
 801d2ec:	e64e      	b.n	801cf8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801d2ee:	2800      	cmp	r0, #0
 801d2f0:	f43f aee8 	beq.w	801d0c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d2f4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801d2f8:	9209      	str	r2, [sp, #36]	@ 0x24
 801d2fa:	0e12      	lsrs	r2, r2, #24
 801d2fc:	9212      	str	r2, [sp, #72]	@ 0x48
 801d2fe:	e6e1      	b.n	801d0c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d300:	b01d      	add	sp, #116	@ 0x74
 801d302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d306 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801d306:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d30a:	b087      	sub	sp, #28
 801d30c:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801d310:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801d314:	fb05 7003 	mla	r0, r5, r3, r7
 801d318:	2d00      	cmp	r5, #0
 801d31a:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801d31e:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801d322:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801d326:	f2c0 810a 	blt.w	801d53e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801d32a:	45a8      	cmp	r8, r5
 801d32c:	f340 8107 	ble.w	801d53e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801d330:	2f00      	cmp	r7, #0
 801d332:	f2c0 8102 	blt.w	801d53a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801d336:	42bb      	cmp	r3, r7
 801d338:	f340 80ff 	ble.w	801d53a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801d33c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801d340:	1c7a      	adds	r2, r7, #1
 801d342:	f100 80ff 	bmi.w	801d544 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801d346:	4293      	cmp	r3, r2
 801d348:	f340 80fc 	ble.w	801d544 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801d34c:	2c00      	cmp	r4, #0
 801d34e:	f000 80fb 	beq.w	801d548 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801d352:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d356:	3501      	adds	r5, #1
 801d358:	f100 80fa 	bmi.w	801d550 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801d35c:	45a8      	cmp	r8, r5
 801d35e:	f340 80f7 	ble.w	801d550 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801d362:	f1be 0f00 	cmp.w	lr, #0
 801d366:	f000 80f6 	beq.w	801d556 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801d36a:	2f00      	cmp	r7, #0
 801d36c:	f2c0 80ee 	blt.w	801d54c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801d370:	42bb      	cmp	r3, r7
 801d372:	f340 80eb 	ble.w	801d54c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801d376:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801d37a:	3701      	adds	r7, #1
 801d37c:	f100 80ee 	bmi.w	801d55c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801d380:	42bb      	cmp	r3, r7
 801d382:	f340 80eb 	ble.w	801d55c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801d386:	2c00      	cmp	r4, #0
 801d388:	f000 80ea 	beq.w	801d560 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801d38c:	3301      	adds	r3, #1
 801d38e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d392:	fa1f fc84 	uxth.w	ip, r4
 801d396:	fa1f fe8e 	uxth.w	lr, lr
 801d39a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801d39e:	fb0c f90e 	mul.w	r9, ip, lr
 801d3a2:	0e13      	lsrs	r3, r2, #24
 801d3a4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801d3a8:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801d3ac:	9302      	str	r3, [sp, #8]
 801d3ae:	ebac 0709 	sub.w	r7, ip, r9
 801d3b2:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801d3b6:	fa1f f48e 	uxth.w	r4, lr
 801d3ba:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801d3be:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d3c2:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801d3c6:	fb0a fe0e 	mul.w	lr, sl, lr
 801d3ca:	1b1b      	subs	r3, r3, r4
 801d3cc:	fb0a f606 	mul.w	r6, sl, r6
 801d3d0:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801d3d4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801d3d8:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801d3dc:	b29b      	uxth	r3, r3
 801d3de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d3e2:	b2bf      	uxth	r7, r7
 801d3e4:	9301      	str	r3, [sp, #4]
 801d3e6:	44e6      	add	lr, ip
 801d3e8:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801d3ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d3f0:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d3f4:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801d3f8:	9303      	str	r3, [sp, #12]
 801d3fa:	0a33      	lsrs	r3, r6, #8
 801d3fc:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801d400:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d404:	9304      	str	r3, [sp, #16]
 801d406:	fb0b f606 	mul.w	r6, fp, r6
 801d40a:	fb0b f000 	mul.w	r0, fp, r0
 801d40e:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801d412:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d416:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d41a:	44b6      	add	lr, r6
 801d41c:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801d420:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801d424:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801d428:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801d42c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d430:	fb08 f606 	mul.w	r6, r8, r6
 801d434:	0a03      	lsrs	r3, r0, #8
 801d436:	fb08 f505 	mul.w	r5, r8, r5
 801d43a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d43e:	0a30      	lsrs	r0, r6, #8
 801d440:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d444:	9305      	str	r3, [sp, #20]
 801d446:	0e13      	lsrs	r3, r2, #24
 801d448:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d44c:	fb0e fe07 	mul.w	lr, lr, r7
 801d450:	4430      	add	r0, r6
 801d452:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801d456:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801d45a:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801d45e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d462:	0a00      	lsrs	r0, r0, #8
 801d464:	435e      	muls	r6, r3
 801d466:	0a2d      	lsrs	r5, r5, #8
 801d468:	435a      	muls	r2, r3
 801d46a:	9b03      	ldr	r3, [sp, #12]
 801d46c:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801d470:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d474:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d478:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d47c:	44b4      	add	ip, r6
 801d47e:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801d482:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d486:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801d48a:	9e01      	ldr	r6, [sp, #4]
 801d48c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d490:	fb03 ee06 	mla	lr, r3, r6, lr
 801d494:	9b04      	ldr	r3, [sp, #16]
 801d496:	0a12      	lsrs	r2, r2, #8
 801d498:	fb0c ee09 	mla	lr, ip, r9, lr
 801d49c:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801d4a0:	9b05      	ldr	r3, [sp, #20]
 801d4a2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d4a6:	fb00 ee04 	mla	lr, r0, r4, lr
 801d4aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d4ae:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801d4b2:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801d4b6:	9b01      	ldr	r3, [sp, #4]
 801d4b8:	fb07 fe0e 	mul.w	lr, r7, lr
 801d4bc:	fb07 f70b 	mul.w	r7, r7, fp
 801d4c0:	fb03 ee06 	mla	lr, r3, r6, lr
 801d4c4:	fb03 730a 	mla	r3, r3, sl, r7
 801d4c8:	fb09 e202 	mla	r2, r9, r2, lr
 801d4cc:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801d4d0:	fb04 2e0e 	mla	lr, r4, lr, r2
 801d4d4:	fb04 3408 	mla	r4, r4, r8, r3
 801d4d8:	9b02      	ldr	r3, [sp, #8]
 801d4da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d4de:	fb09 4903 	mla	r9, r9, r3, r4
 801d4e2:	780b      	ldrb	r3, [r1, #0]
 801d4e4:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801d4e8:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801d4ec:	ea40 0e0e 	orr.w	lr, r0, lr
 801d4f0:	fa5f f989 	uxtb.w	r9, r9
 801d4f4:	fb03 f209 	mul.w	r2, r3, r9
 801d4f8:	1c53      	adds	r3, r2, #1
 801d4fa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d4fe:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801d502:	700b      	strb	r3, [r1, #0]
 801d504:	784b      	ldrb	r3, [r1, #1]
 801d506:	fb03 f309 	mul.w	r3, r3, r9
 801d50a:	1c5a      	adds	r2, r3, #1
 801d50c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d510:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801d514:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801d518:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d51c:	704b      	strb	r3, [r1, #1]
 801d51e:	788b      	ldrb	r3, [r1, #2]
 801d520:	fb03 f909 	mul.w	r9, r3, r9
 801d524:	f109 0301 	add.w	r3, r9, #1
 801d528:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801d52c:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801d530:	f881 e002 	strb.w	lr, [r1, #2]
 801d534:	b007      	add	sp, #28
 801d536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d53a:	2600      	movs	r6, #0
 801d53c:	e700      	b.n	801d340 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801d53e:	2000      	movs	r0, #0
 801d540:	4606      	mov	r6, r0
 801d542:	e708      	b.n	801d356 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801d544:	2000      	movs	r0, #0
 801d546:	e706      	b.n	801d356 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801d548:	4620      	mov	r0, r4
 801d54a:	e704      	b.n	801d356 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801d54c:	2500      	movs	r5, #0
 801d54e:	e714      	b.n	801d37a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801d550:	2200      	movs	r2, #0
 801d552:	4615      	mov	r5, r2
 801d554:	e71d      	b.n	801d392 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801d556:	4672      	mov	r2, lr
 801d558:	4675      	mov	r5, lr
 801d55a:	e71a      	b.n	801d392 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801d55c:	2200      	movs	r2, #0
 801d55e:	e718      	b.n	801d392 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801d560:	4622      	mov	r2, r4
 801d562:	e716      	b.n	801d392 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801d564 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d568:	b099      	sub	sp, #100	@ 0x64
 801d56a:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 801d56e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801d570:	9017      	str	r0, [sp, #92]	@ 0x5c
 801d572:	9306      	str	r3, [sp, #24]
 801d574:	6850      	ldr	r0, [r2, #4]
 801d576:	6812      	ldr	r2, [r2, #0]
 801d578:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 801d57c:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 801d580:	fb00 1303 	mla	r3, r0, r3, r1
 801d584:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d588:	18d3      	adds	r3, r2, r3
 801d58a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d58c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d58e:	681b      	ldr	r3, [r3, #0]
 801d590:	930e      	str	r3, [sp, #56]	@ 0x38
 801d592:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d594:	2b00      	cmp	r3, #0
 801d596:	dc03      	bgt.n	801d5a0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d598:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d59a:	2b00      	cmp	r3, #0
 801d59c:	f340 8360 	ble.w	801dc60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801d5a0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d5a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d5a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d5aa:	1e48      	subs	r0, r1, #1
 801d5ac:	1e57      	subs	r7, r2, #1
 801d5ae:	9b06      	ldr	r3, [sp, #24]
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	f340 817b 	ble.w	801d8ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801d5b6:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801d5ba:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d5be:	d406      	bmi.n	801d5ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d5c0:	4584      	cmp	ip, r0
 801d5c2:	da04      	bge.n	801d5ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	db02      	blt.n	801d5ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d5c8:	42bb      	cmp	r3, r7
 801d5ca:	f2c0 8170 	blt.w	801d8ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d5ce:	f11c 0c01 	adds.w	ip, ip, #1
 801d5d2:	f100 8160 	bmi.w	801d896 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801d5d6:	4561      	cmp	r1, ip
 801d5d8:	f2c0 815d 	blt.w	801d896 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801d5dc:	3301      	adds	r3, #1
 801d5de:	f100 815a 	bmi.w	801d896 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801d5e2:	429a      	cmp	r2, r3
 801d5e4:	f2c0 8157 	blt.w	801d896 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801d5e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801d5ec:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801d5ee:	f1b8 0f00 	cmp.w	r8, #0
 801d5f2:	f340 8179 	ble.w	801d8e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801d5f6:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801d5f8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801d5fc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d5fe:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d602:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801d606:	142a      	asrs	r2, r5, #16
 801d608:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d60c:	689b      	ldr	r3, [r3, #8]
 801d60e:	f100 81be 	bmi.w	801d98e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d612:	f103 39ff 	add.w	r9, r3, #4294967295
 801d616:	454a      	cmp	r2, r9
 801d618:	f280 81b9 	bge.w	801d98e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d61c:	f1bc 0f00 	cmp.w	ip, #0
 801d620:	f2c0 81b5 	blt.w	801d98e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d624:	f10e 39ff 	add.w	r9, lr, #4294967295
 801d628:	45cc      	cmp	ip, r9
 801d62a:	f280 81b0 	bge.w	801d98e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d62e:	b21b      	sxth	r3, r3
 801d630:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d632:	fb0c 2203 	mla	r2, ip, r3, r2
 801d636:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801d63a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d63e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801d642:	2900      	cmp	r1, #0
 801d644:	f000 8197 	beq.w	801d976 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801d648:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801d64c:	940a      	str	r4, [sp, #40]	@ 0x28
 801d64e:	0e24      	lsrs	r4, r4, #24
 801d650:	9411      	str	r4, [sp, #68]	@ 0x44
 801d652:	b180      	cbz	r0, 801d676 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801d654:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801d658:	3b01      	subs	r3, #1
 801d65a:	009b      	lsls	r3, r3, #2
 801d65c:	3304      	adds	r3, #4
 801d65e:	eb09 0c03 	add.w	ip, r9, r3
 801d662:	f859 3003 	ldr.w	r3, [r9, r3]
 801d666:	9307      	str	r3, [sp, #28]
 801d668:	0e1b      	lsrs	r3, r3, #24
 801d66a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d66c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801d670:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d672:	0e1b      	lsrs	r3, r3, #24
 801d674:	9312      	str	r3, [sp, #72]	@ 0x48
 801d676:	b289      	uxth	r1, r1
 801d678:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d67a:	b280      	uxth	r0, r0
 801d67c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d67e:	fb01 fa00 	mul.w	sl, r1, r0
 801d682:	0109      	lsls	r1, r1, #4
 801d684:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801d688:	eba1 090a 	sub.w	r9, r1, sl
 801d68c:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801d690:	b280      	uxth	r0, r0
 801d692:	fa1f f989 	uxth.w	r9, r9
 801d696:	1a09      	subs	r1, r1, r0
 801d698:	fb09 f303 	mul.w	r3, r9, r3
 801d69c:	b289      	uxth	r1, r1
 801d69e:	fb01 330e 	mla	r3, r1, lr, r3
 801d6a2:	fb00 3304 	mla	r3, r0, r4, r3
 801d6a6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d6a8:	fb0a 3304 	mla	r3, sl, r4, r3
 801d6ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	f000 80e8 	beq.w	801d886 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d6b6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801d6ba:	d01b      	beq.n	801d6f4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801d6bc:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 801d6c0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d6c4:	fb0e fb0b 	mul.w	fp, lr, fp
 801d6c8:	fb0e fe02 	mul.w	lr, lr, r2
 801d6cc:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801d6d0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d6d4:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801d6d8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801d6dc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d6e0:	445a      	add	r2, fp
 801d6e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d6e6:	0a12      	lsrs	r2, r2, #8
 801d6e8:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d6ec:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801d6f0:	ea42 020c 	orr.w	r2, r2, ip
 801d6f4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d6f6:	2cff      	cmp	r4, #255	@ 0xff
 801d6f8:	d021      	beq.n	801d73e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801d6fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d6fc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d700:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d702:	fb04 fc0c 	mul.w	ip, r4, ip
 801d706:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d708:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801d70c:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801d710:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d712:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801d716:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d71a:	fb04 fb0b 	mul.w	fp, r4, fp
 801d71e:	44e6      	add	lr, ip
 801d720:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801d724:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d728:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801d72c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d730:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801d734:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801d738:	ea4e 040b 	orr.w	r4, lr, fp
 801d73c:	940a      	str	r4, [sp, #40]	@ 0x28
 801d73e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d740:	2cff      	cmp	r4, #255	@ 0xff
 801d742:	d021      	beq.n	801d788 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801d744:	9c07      	ldr	r4, [sp, #28]
 801d746:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d74a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d74c:	fb04 fc0c 	mul.w	ip, r4, ip
 801d750:	9c07      	ldr	r4, [sp, #28]
 801d752:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801d756:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801d75a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d75c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801d760:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d764:	fb04 fb0b 	mul.w	fp, r4, fp
 801d768:	44e6      	add	lr, ip
 801d76a:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801d76e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d772:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801d776:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d77a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801d77e:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801d782:	ea4e 040b 	orr.w	r4, lr, fp
 801d786:	9407      	str	r4, [sp, #28]
 801d788:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d78a:	2cff      	cmp	r4, #255	@ 0xff
 801d78c:	d021      	beq.n	801d7d2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801d78e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d790:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d794:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d796:	fb04 fc0c 	mul.w	ip, r4, ip
 801d79a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d79c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801d7a0:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801d7a4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d7a6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801d7aa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d7ae:	fb04 fb0b 	mul.w	fp, r4, fp
 801d7b2:	44e6      	add	lr, ip
 801d7b4:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801d7b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d7bc:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801d7c0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d7c4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801d7c8:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801d7cc:	ea4e 040b 	orr.w	r4, lr, fp
 801d7d0:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d7d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d7d4:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801d7d8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d7dc:	2bff      	cmp	r3, #255	@ 0xff
 801d7de:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d7e2:	9c07      	ldr	r4, [sp, #28]
 801d7e4:	fb09 fc0c 	mul.w	ip, r9, ip
 801d7e8:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d7ec:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d7f0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d7f2:	fb00 cc0e 	mla	ip, r0, lr, ip
 801d7f6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d7fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d7fc:	fb0a cc0e 	mla	ip, sl, lr, ip
 801d800:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801d804:	fb09 f90e 	mul.w	r9, r9, lr
 801d808:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d80c:	fb01 9202 	mla	r2, r1, r2, r9
 801d810:	9907      	ldr	r1, [sp, #28]
 801d812:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d816:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 801d81a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d81c:	fb00 220b 	mla	r2, r0, fp, r2
 801d820:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 801d824:	fb0a 2a00 	mla	sl, sl, r0, r2
 801d828:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d82c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d830:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d834:	fa5f f08c 	uxtb.w	r0, ip
 801d838:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801d83c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d840:	f000 80a2 	beq.w	801d988 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801d844:	43db      	mvns	r3, r3
 801d846:	783a      	ldrb	r2, [r7, #0]
 801d848:	f897 a002 	ldrb.w	sl, [r7, #2]
 801d84c:	b2db      	uxtb	r3, r3
 801d84e:	fb02 fe03 	mul.w	lr, r2, r3
 801d852:	fb0a fa03 	mul.w	sl, sl, r3
 801d856:	f10e 0201 	add.w	r2, lr, #1
 801d85a:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801d85e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d862:	703a      	strb	r2, [r7, #0]
 801d864:	787a      	ldrb	r2, [r7, #1]
 801d866:	fb02 f003 	mul.w	r0, r2, r3
 801d86a:	f10a 0301 	add.w	r3, sl, #1
 801d86e:	1c42      	adds	r2, r0, #1
 801d870:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801d874:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801d878:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d87c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d880:	707a      	strb	r2, [r7, #1]
 801d882:	f887 c002 	strb.w	ip, [r7, #2]
 801d886:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d888:	3703      	adds	r7, #3
 801d88a:	f108 38ff 	add.w	r8, r8, #4294967295
 801d88e:	441d      	add	r5, r3
 801d890:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d892:	441e      	add	r6, r3
 801d894:	e6ab      	b.n	801d5ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d896:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d898:	441d      	add	r5, r3
 801d89a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d89c:	441e      	add	r6, r3
 801d89e:	9b06      	ldr	r3, [sp, #24]
 801d8a0:	3b01      	subs	r3, #1
 801d8a2:	9306      	str	r3, [sp, #24]
 801d8a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d8a6:	3303      	adds	r3, #3
 801d8a8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d8aa:	e680      	b.n	801d5ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d8ac:	d024      	beq.n	801d8f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801d8ae:	9b06      	ldr	r3, [sp, #24]
 801d8b0:	9825      	ldr	r0, [sp, #148]	@ 0x94
 801d8b2:	3b01      	subs	r3, #1
 801d8b4:	fb00 5003 	mla	r0, r0, r3, r5
 801d8b8:	1400      	asrs	r0, r0, #16
 801d8ba:	f53f ae95 	bmi.w	801d5e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d8be:	3901      	subs	r1, #1
 801d8c0:	4288      	cmp	r0, r1
 801d8c2:	f6bf ae91 	bge.w	801d5e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d8c6:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801d8c8:	fb01 6303 	mla	r3, r1, r3, r6
 801d8cc:	141b      	asrs	r3, r3, #16
 801d8ce:	f53f ae8b 	bmi.w	801d5e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d8d2:	3a01      	subs	r2, #1
 801d8d4:	4293      	cmp	r3, r2
 801d8d6:	f6bf ae87 	bge.w	801d5e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d8da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d8dc:	f8dd b018 	ldr.w	fp, [sp, #24]
 801d8e0:	1cdf      	adds	r7, r3, #3
 801d8e2:	f1bb 0f00 	cmp.w	fp, #0
 801d8e6:	dc6e      	bgt.n	801d9c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801d8e8:	9b06      	ldr	r3, [sp, #24]
 801d8ea:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d8f0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d8f4:	4423      	add	r3, r4
 801d8f6:	9309      	str	r3, [sp, #36]	@ 0x24
 801d8f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	f340 81b0 	ble.w	801dc60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801d900:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d904:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d906:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d90a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d90e:	eef0 6a62 	vmov.f32	s13, s5
 801d912:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d916:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d91a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d91e:	ee16 5a90 	vmov	r5, s13
 801d922:	eef0 6a43 	vmov.f32	s13, s6
 801d926:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d92a:	ee16 6a90 	vmov	r6, s13
 801d92e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d932:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d936:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d93a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d93e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d942:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d946:	ee12 2a90 	vmov	r2, s5
 801d94a:	eef0 2a47 	vmov.f32	s5, s14
 801d94e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d952:	ee13 2a10 	vmov	r2, s6
 801d956:	9325      	str	r3, [sp, #148]	@ 0x94
 801d958:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d95a:	eeb0 3a67 	vmov.f32	s6, s15
 801d95e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d962:	9326      	str	r3, [sp, #152]	@ 0x98
 801d964:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d966:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d968:	3b01      	subs	r3, #1
 801d96a:	9315      	str	r3, [sp, #84]	@ 0x54
 801d96c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d96e:	bf08      	it	eq
 801d970:	4613      	moveq	r3, r2
 801d972:	9306      	str	r3, [sp, #24]
 801d974:	e60d      	b.n	801d592 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d976:	2800      	cmp	r0, #0
 801d978:	f43f ae7d 	beq.w	801d676 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801d97c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d980:	9307      	str	r3, [sp, #28]
 801d982:	0e1b      	lsrs	r3, r3, #24
 801d984:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d986:	e676      	b.n	801d676 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801d988:	7038      	strb	r0, [r7, #0]
 801d98a:	7079      	strb	r1, [r7, #1]
 801d98c:	e779      	b.n	801d882 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801d98e:	f112 0901 	adds.w	r9, r2, #1
 801d992:	f53f af78 	bmi.w	801d886 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d996:	454b      	cmp	r3, r9
 801d998:	f6ff af75 	blt.w	801d886 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d99c:	f11c 0901 	adds.w	r9, ip, #1
 801d9a0:	f53f af71 	bmi.w	801d886 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d9a4:	45ce      	cmp	lr, r9
 801d9a6:	f6ff af6e 	blt.w	801d886 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d9aa:	b21b      	sxth	r3, r3
 801d9ac:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801d9b0:	fa0f f28e 	sxth.w	r2, lr
 801d9b4:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801d9b8:	9200      	str	r2, [sp, #0]
 801d9ba:	4639      	mov	r1, r7
 801d9bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d9be:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801d9c0:	f7ff fca1 	bl	801d306 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801d9c4:	e75f      	b.n	801d886 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d9c6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d9c8:	1429      	asrs	r1, r5, #16
 801d9ca:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d9cc:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801d9d0:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801d9d4:	1433      	asrs	r3, r6, #16
 801d9d6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d9da:	fb0c 1303 	mla	r3, ip, r3, r1
 801d9de:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d9e0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801d9e4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d9e8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d9ec:	2a00      	cmp	r2, #0
 801d9ee:	f000 8129 	beq.w	801dc44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801d9f2:	684c      	ldr	r4, [r1, #4]
 801d9f4:	940c      	str	r4, [sp, #48]	@ 0x30
 801d9f6:	0e24      	lsrs	r4, r4, #24
 801d9f8:	9413      	str	r4, [sp, #76]	@ 0x4c
 801d9fa:	b198      	cbz	r0, 801da24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801d9fc:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 801da00:	f10c 3cff 	add.w	ip, ip, #4294967295
 801da04:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801da08:	f10c 0c04 	add.w	ip, ip, #4
 801da0c:	eb01 080c 	add.w	r8, r1, ip
 801da10:	f851 100c 	ldr.w	r1, [r1, ip]
 801da14:	9108      	str	r1, [sp, #32]
 801da16:	0e09      	lsrs	r1, r1, #24
 801da18:	9110      	str	r1, [sp, #64]	@ 0x40
 801da1a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801da1e:	910d      	str	r1, [sp, #52]	@ 0x34
 801da20:	0e09      	lsrs	r1, r1, #24
 801da22:	9114      	str	r1, [sp, #80]	@ 0x50
 801da24:	b292      	uxth	r2, r2
 801da26:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801da28:	b280      	uxth	r0, r0
 801da2a:	fb02 f900 	mul.w	r9, r2, r0
 801da2e:	0112      	lsls	r2, r2, #4
 801da30:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801da34:	eba2 0809 	sub.w	r8, r2, r9
 801da38:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801da3c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801da3e:	b280      	uxth	r0, r0
 801da40:	fa1f f888 	uxth.w	r8, r8
 801da44:	1a09      	subs	r1, r1, r0
 801da46:	fb08 f202 	mul.w	r2, r8, r2
 801da4a:	b289      	uxth	r1, r1
 801da4c:	fb01 220e 	mla	r2, r1, lr, r2
 801da50:	fb00 2204 	mla	r2, r0, r4, r2
 801da54:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801da56:	fb09 2204 	mla	r2, r9, r4, r2
 801da5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801da5e:	2a00      	cmp	r2, #0
 801da60:	f000 80e8 	beq.w	801dc34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801da64:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801da68:	d01b      	beq.n	801daa2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801da6a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801da6e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801da72:	fb0e fa0a 	mul.w	sl, lr, sl
 801da76:	fb0e fe03 	mul.w	lr, lr, r3
 801da7a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801da7e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801da82:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801da86:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801da8a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801da8e:	4453      	add	r3, sl
 801da90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801da94:	0a1b      	lsrs	r3, r3, #8
 801da96:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801da9a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801da9e:	ea43 030c 	orr.w	r3, r3, ip
 801daa2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801daa4:	2cff      	cmp	r4, #255	@ 0xff
 801daa6:	d021      	beq.n	801daec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801daa8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801daaa:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801daae:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dab0:	fb04 fc0c 	mul.w	ip, r4, ip
 801dab4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801dab6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801daba:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801dabe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801dac0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801dac4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dac8:	fb04 fa0a 	mul.w	sl, r4, sl
 801dacc:	44e6      	add	lr, ip
 801dace:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801dad2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dad6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801dada:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dade:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801dae2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801dae6:	ea4e 040a 	orr.w	r4, lr, sl
 801daea:	940c      	str	r4, [sp, #48]	@ 0x30
 801daec:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801daee:	2cff      	cmp	r4, #255	@ 0xff
 801daf0:	d021      	beq.n	801db36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801daf2:	9c08      	ldr	r4, [sp, #32]
 801daf4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801daf8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801dafa:	fb04 fc0c 	mul.w	ip, r4, ip
 801dafe:	9c08      	ldr	r4, [sp, #32]
 801db00:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801db04:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801db06:	fb04 fa0e 	mul.w	sl, r4, lr
 801db0a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801db0e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801db12:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801db16:	44e6      	add	lr, ip
 801db18:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801db1c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801db20:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801db24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801db28:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801db2c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801db30:	ea4e 040a 	orr.w	r4, lr, sl
 801db34:	9408      	str	r4, [sp, #32]
 801db36:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801db38:	2cff      	cmp	r4, #255	@ 0xff
 801db3a:	d021      	beq.n	801db80 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801db3c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801db3e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801db42:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801db44:	fb04 fc0c 	mul.w	ip, r4, ip
 801db48:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801db4a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801db4e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801db52:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801db54:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801db58:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801db5c:	fb04 fa0a 	mul.w	sl, r4, sl
 801db60:	44e6      	add	lr, ip
 801db62:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801db66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801db6a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801db6e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801db72:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801db76:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801db7a:	ea4e 040a 	orr.w	r4, lr, sl
 801db7e:	940d      	str	r4, [sp, #52]	@ 0x34
 801db80:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801db82:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801db86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801db8a:	2aff      	cmp	r2, #255	@ 0xff
 801db8c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801db90:	9c08      	ldr	r4, [sp, #32]
 801db92:	fb08 fc0c 	mul.w	ip, r8, ip
 801db96:	fb01 cc0e 	mla	ip, r1, lr, ip
 801db9a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801db9e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801dba0:	fb00 cc0e 	mla	ip, r0, lr, ip
 801dba4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801dba8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801dbaa:	fb09 cc0e 	mla	ip, r9, lr, ip
 801dbae:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801dbb2:	fb08 f80e 	mul.w	r8, r8, lr
 801dbb6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dbba:	fb01 8303 	mla	r3, r1, r3, r8
 801dbbe:	9908      	ldr	r1, [sp, #32]
 801dbc0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dbc4:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801dbc8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801dbca:	fb00 330a 	mla	r3, r0, sl, r3
 801dbce:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 801dbd2:	fb09 3e0e 	mla	lr, r9, lr, r3
 801dbd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dbda:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801dbde:	ea4c 0c0e 	orr.w	ip, ip, lr
 801dbe2:	fa5f f08c 	uxtb.w	r0, ip
 801dbe6:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801dbea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801dbee:	d032      	beq.n	801dc56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801dbf0:	43d2      	mvns	r2, r2
 801dbf2:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801dbf6:	b2d2      	uxtb	r2, r2
 801dbf8:	fb0e fe02 	mul.w	lr, lr, r2
 801dbfc:	f10e 0301 	add.w	r3, lr, #1
 801dc00:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801dc04:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801dc08:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801dc0c:	4350      	muls	r0, r2
 801dc0e:	f807 3c03 	strb.w	r3, [r7, #-3]
 801dc12:	1c43      	adds	r3, r0, #1
 801dc14:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801dc18:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801dc1c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801dc20:	4353      	muls	r3, r2
 801dc22:	f807 1c02 	strb.w	r1, [r7, #-2]
 801dc26:	1c5a      	adds	r2, r3, #1
 801dc28:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801dc2c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801dc30:	f807 cc01 	strb.w	ip, [r7, #-1]
 801dc34:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801dc36:	3703      	adds	r7, #3
 801dc38:	f10b 3bff 	add.w	fp, fp, #4294967295
 801dc3c:	441d      	add	r5, r3
 801dc3e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801dc40:	441e      	add	r6, r3
 801dc42:	e64e      	b.n	801d8e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801dc44:	2800      	cmp	r0, #0
 801dc46:	f43f aeed 	beq.w	801da24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801dc4a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801dc4e:	9108      	str	r1, [sp, #32]
 801dc50:	0e09      	lsrs	r1, r1, #24
 801dc52:	9110      	str	r1, [sp, #64]	@ 0x40
 801dc54:	e6e6      	b.n	801da24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801dc56:	f807 0c03 	strb.w	r0, [r7, #-3]
 801dc5a:	f807 1c02 	strb.w	r1, [r7, #-2]
 801dc5e:	e7e7      	b.n	801dc30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801dc60:	b019      	add	sp, #100	@ 0x64
 801dc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801dc68 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801dc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc6c:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 801dc70:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801dc74:	2c00      	cmp	r4, #0
 801dc76:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801dc7a:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 801dc7e:	fb00 4e03 	mla	lr, r0, r3, r4
 801dc82:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801dc86:	f2c0 80b8 	blt.w	801ddfa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801dc8a:	45a1      	cmp	r9, r4
 801dc8c:	f340 80b5 	ble.w	801ddfa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801dc90:	2800      	cmp	r0, #0
 801dc92:	f2c0 80b2 	blt.w	801ddfa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801dc96:	4580      	cmp	r8, r0
 801dc98:	f340 80af 	ble.w	801ddfa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801dc9c:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801dca0:	f01e 0f01 	tst.w	lr, #1
 801dca4:	5d56      	ldrb	r6, [r2, r5]
 801dca6:	bf0c      	ite	eq
 801dca8:	f006 060f 	andeq.w	r6, r6, #15
 801dcac:	1136      	asrne	r6, r6, #4
 801dcae:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801dcb2:	b2f6      	uxtb	r6, r6
 801dcb4:	f114 0a01 	adds.w	sl, r4, #1
 801dcb8:	f100 80a1 	bmi.w	801ddfe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801dcbc:	45d1      	cmp	r9, sl
 801dcbe:	f340 809e 	ble.w	801ddfe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801dcc2:	2800      	cmp	r0, #0
 801dcc4:	f2c0 809b 	blt.w	801ddfe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801dcc8:	4580      	cmp	r8, r0
 801dcca:	f340 8098 	ble.w	801ddfe <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801dcce:	2f00      	cmp	r7, #0
 801dcd0:	f000 8097 	beq.w	801de02 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801dcd4:	f10e 0b01 	add.w	fp, lr, #1
 801dcd8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801dcdc:	f01b 0f01 	tst.w	fp, #1
 801dce0:	5d55      	ldrb	r5, [r2, r5]
 801dce2:	bf0c      	ite	eq
 801dce4:	f005 050f 	andeq.w	r5, r5, #15
 801dce8:	112d      	asrne	r5, r5, #4
 801dcea:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801dcee:	b2ed      	uxtb	r5, r5
 801dcf0:	f1bc 0f00 	cmp.w	ip, #0
 801dcf4:	f000 8089 	beq.w	801de0a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801dcf8:	2c00      	cmp	r4, #0
 801dcfa:	f100 0001 	add.w	r0, r0, #1
 801dcfe:	f2c0 8082 	blt.w	801de06 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801dd02:	45a1      	cmp	r9, r4
 801dd04:	dd7f      	ble.n	801de06 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801dd06:	2800      	cmp	r0, #0
 801dd08:	db7d      	blt.n	801de06 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801dd0a:	4580      	cmp	r8, r0
 801dd0c:	dd7b      	ble.n	801de06 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801dd0e:	eb03 0b0e 	add.w	fp, r3, lr
 801dd12:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801dd16:	f01b 0f01 	tst.w	fp, #1
 801dd1a:	5d14      	ldrb	r4, [r2, r4]
 801dd1c:	bf0c      	ite	eq
 801dd1e:	f004 040f 	andeq.w	r4, r4, #15
 801dd22:	1124      	asrne	r4, r4, #4
 801dd24:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801dd28:	b2e4      	uxtb	r4, r4
 801dd2a:	f1ba 0f00 	cmp.w	sl, #0
 801dd2e:	db6f      	blt.n	801de10 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801dd30:	45d1      	cmp	r9, sl
 801dd32:	dd6d      	ble.n	801de10 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801dd34:	2800      	cmp	r0, #0
 801dd36:	db6b      	blt.n	801de10 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801dd38:	4580      	cmp	r8, r0
 801dd3a:	dd69      	ble.n	801de10 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801dd3c:	2f00      	cmp	r7, #0
 801dd3e:	d069      	beq.n	801de14 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801dd40:	3301      	adds	r3, #1
 801dd42:	449e      	add	lr, r3
 801dd44:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801dd48:	f01e 0f01 	tst.w	lr, #1
 801dd4c:	5cd0      	ldrb	r0, [r2, r3]
 801dd4e:	bf0c      	ite	eq
 801dd50:	f000 000f 	andeq.w	r0, r0, #15
 801dd54:	1100      	asrne	r0, r0, #4
 801dd56:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801dd5a:	b2c3      	uxtb	r3, r0
 801dd5c:	b2ba      	uxth	r2, r7
 801dd5e:	fa1f fc8c 	uxth.w	ip, ip
 801dd62:	fb02 f00c 	mul.w	r0, r2, ip
 801dd66:	0112      	lsls	r2, r2, #4
 801dd68:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801dd6c:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801dd70:	1a12      	subs	r2, r2, r0
 801dd72:	fa1f fc8c 	uxth.w	ip, ip
 801dd76:	b292      	uxth	r2, r2
 801dd78:	eba7 070c 	sub.w	r7, r7, ip
 801dd7c:	436a      	muls	r2, r5
 801dd7e:	b2bf      	uxth	r7, r7
 801dd80:	fb06 2207 	mla	r2, r6, r7, r2
 801dd84:	fb0c 2404 	mla	r4, ip, r4, r2
 801dd88:	fb00 4303 	mla	r3, r0, r3, r4
 801dd8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dd90:	b38b      	cbz	r3, 801ddf6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801dd92:	4a21      	ldr	r2, [pc, #132]	@ (801de18 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801dd94:	6814      	ldr	r4, [r2, #0]
 801dd96:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 801dd9a:	b2e5      	uxtb	r5, r4
 801dd9c:	4353      	muls	r3, r2
 801dd9e:	1c5a      	adds	r2, r3, #1
 801dda0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801dda4:	1212      	asrs	r2, r2, #8
 801dda6:	b290      	uxth	r0, r2
 801dda8:	43d2      	mvns	r2, r2
 801ddaa:	fb15 f500 	smulbb	r5, r5, r0
 801ddae:	b2d3      	uxtb	r3, r2
 801ddb0:	780a      	ldrb	r2, [r1, #0]
 801ddb2:	fb02 5203 	mla	r2, r2, r3, r5
 801ddb6:	b292      	uxth	r2, r2
 801ddb8:	1c55      	adds	r5, r2, #1
 801ddba:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801ddbe:	784d      	ldrb	r5, [r1, #1]
 801ddc0:	fb15 f503 	smulbb	r5, r5, r3
 801ddc4:	1212      	asrs	r2, r2, #8
 801ddc6:	700a      	strb	r2, [r1, #0]
 801ddc8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801ddcc:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801ddd0:	fb02 5200 	mla	r2, r2, r0, r5
 801ddd4:	b292      	uxth	r2, r2
 801ddd6:	1c55      	adds	r5, r2, #1
 801ddd8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801dddc:	1212      	asrs	r2, r2, #8
 801ddde:	704a      	strb	r2, [r1, #1]
 801dde0:	788a      	ldrb	r2, [r1, #2]
 801dde2:	fb12 f303 	smulbb	r3, r2, r3
 801dde6:	fb04 3300 	mla	r3, r4, r0, r3
 801ddea:	b29b      	uxth	r3, r3
 801ddec:	1c5a      	adds	r2, r3, #1
 801ddee:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ddf2:	121b      	asrs	r3, r3, #8
 801ddf4:	708b      	strb	r3, [r1, #2]
 801ddf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ddfa:	2600      	movs	r6, #0
 801ddfc:	e75a      	b.n	801dcb4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801ddfe:	2500      	movs	r5, #0
 801de00:	e776      	b.n	801dcf0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801de02:	463d      	mov	r5, r7
 801de04:	e774      	b.n	801dcf0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801de06:	2400      	movs	r4, #0
 801de08:	e78f      	b.n	801dd2a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801de0a:	4663      	mov	r3, ip
 801de0c:	4664      	mov	r4, ip
 801de0e:	e7a5      	b.n	801dd5c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801de10:	2300      	movs	r3, #0
 801de12:	e7a3      	b.n	801dd5c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801de14:	463b      	mov	r3, r7
 801de16:	e7a1      	b.n	801dd5c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801de18:	24025150 	.word	0x24025150

0801de1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801de1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de20:	b097      	sub	sp, #92	@ 0x5c
 801de22:	9214      	str	r2, [sp, #80]	@ 0x50
 801de24:	9309      	str	r3, [sp, #36]	@ 0x24
 801de26:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801de28:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801de2c:	9015      	str	r0, [sp, #84]	@ 0x54
 801de2e:	910c      	str	r1, [sp, #48]	@ 0x30
 801de30:	6850      	ldr	r0, [r2, #4]
 801de32:	930e      	str	r3, [sp, #56]	@ 0x38
 801de34:	6812      	ldr	r2, [r2, #0]
 801de36:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 801de3a:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 801de3e:	fb00 1303 	mla	r3, r0, r3, r1
 801de42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801de46:	eb02 0a03 	add.w	sl, r2, r3
 801de4a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801de4c:	689b      	ldr	r3, [r3, #8]
 801de4e:	3301      	adds	r3, #1
 801de50:	f023 0301 	bic.w	r3, r3, #1
 801de54:	930f      	str	r3, [sp, #60]	@ 0x3c
 801de56:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801de58:	681f      	ldr	r7, [r3, #0]
 801de5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801de5c:	2b00      	cmp	r3, #0
 801de5e:	dc03      	bgt.n	801de68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801de60:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801de62:	2b00      	cmp	r3, #0
 801de64:	f340 8247 	ble.w	801e2f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801de68:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801de6a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801de6e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801de72:	1e48      	subs	r0, r1, #1
 801de74:	f102 3cff 	add.w	ip, r2, #4294967295
 801de78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801de7a:	2b00      	cmp	r3, #0
 801de7c:	f340 80e5 	ble.w	801e04a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801de80:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801de84:	ea4f 4326 	mov.w	r3, r6, asr #16
 801de88:	d406      	bmi.n	801de98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801de8a:	4586      	cmp	lr, r0
 801de8c:	da04      	bge.n	801de98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801de8e:	2b00      	cmp	r3, #0
 801de90:	db02      	blt.n	801de98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801de92:	4563      	cmp	r3, ip
 801de94:	f2c0 80da 	blt.w	801e04c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801de98:	f11e 0e01 	adds.w	lr, lr, #1
 801de9c:	f100 80cb 	bmi.w	801e036 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801dea0:	4571      	cmp	r1, lr
 801dea2:	f2c0 80c8 	blt.w	801e036 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801dea6:	3301      	adds	r3, #1
 801dea8:	f100 80c5 	bmi.w	801e036 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801deac:	429a      	cmp	r2, r3
 801deae:	f2c0 80c2 	blt.w	801e036 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801deb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801deb4:	46d0      	mov	r8, sl
 801deb6:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801deba:	930d      	str	r3, [sp, #52]	@ 0x34
 801debc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801debe:	2b00      	cmp	r3, #0
 801dec0:	f340 80e3 	ble.w	801e08a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801dec4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dec6:	1430      	asrs	r0, r6, #16
 801dec8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801decc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ded0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801ded4:	142b      	asrs	r3, r5, #16
 801ded6:	f100 812e 	bmi.w	801e136 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801deda:	f10c 3bff 	add.w	fp, ip, #4294967295
 801dede:	455b      	cmp	r3, fp
 801dee0:	f280 8129 	bge.w	801e136 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801dee4:	2800      	cmp	r0, #0
 801dee6:	f2c0 8126 	blt.w	801e136 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801deea:	f10e 3bff 	add.w	fp, lr, #4294967295
 801deee:	4558      	cmp	r0, fp
 801def0:	f280 8121 	bge.w	801e136 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801def4:	fb00 3309 	mla	r3, r0, r9, r3
 801def8:	0858      	lsrs	r0, r3, #1
 801defa:	07dc      	lsls	r4, r3, #31
 801defc:	f817 c000 	ldrb.w	ip, [r7, r0]
 801df00:	bf54      	ite	pl
 801df02:	f00c 0c0f 	andpl.w	ip, ip, #15
 801df06:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801df0a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801df0e:	fa5f fc8c 	uxtb.w	ip, ip
 801df12:	2a00      	cmp	r2, #0
 801df14:	f000 80fe 	beq.w	801e114 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801df18:	1c58      	adds	r0, r3, #1
 801df1a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801df1e:	07c0      	lsls	r0, r0, #31
 801df20:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801df24:	bf54      	ite	pl
 801df26:	f00e 0e0f 	andpl.w	lr, lr, #15
 801df2a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801df2e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801df32:	fa5f f08e 	uxtb.w	r0, lr
 801df36:	9010      	str	r0, [sp, #64]	@ 0x40
 801df38:	b1d9      	cbz	r1, 801df72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801df3a:	444b      	add	r3, r9
 801df3c:	0858      	lsrs	r0, r3, #1
 801df3e:	07dc      	lsls	r4, r3, #31
 801df40:	f103 0301 	add.w	r3, r3, #1
 801df44:	5c38      	ldrb	r0, [r7, r0]
 801df46:	bf54      	ite	pl
 801df48:	f000 000f 	andpl.w	r0, r0, #15
 801df4c:	1100      	asrmi	r0, r0, #4
 801df4e:	07dc      	lsls	r4, r3, #31
 801df50:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801df54:	b2c0      	uxtb	r0, r0
 801df56:	900a      	str	r0, [sp, #40]	@ 0x28
 801df58:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801df5c:	f817 e000 	ldrb.w	lr, [r7, r0]
 801df60:	bf54      	ite	pl
 801df62:	f00e 030f 	andpl.w	r3, lr, #15
 801df66:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801df6a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801df6e:	b2db      	uxtb	r3, r3
 801df70:	9311      	str	r3, [sp, #68]	@ 0x44
 801df72:	b292      	uxth	r2, r2
 801df74:	b289      	uxth	r1, r1
 801df76:	0113      	lsls	r3, r2, #4
 801df78:	fb02 f001 	mul.w	r0, r2, r1
 801df7c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801df7e:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801df82:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801df86:	1a1b      	subs	r3, r3, r0
 801df88:	b289      	uxth	r1, r1
 801df8a:	b29b      	uxth	r3, r3
 801df8c:	ebae 0e01 	sub.w	lr, lr, r1
 801df90:	4353      	muls	r3, r2
 801df92:	fa1f fe8e 	uxth.w	lr, lr
 801df96:	fb0c 320e 	mla	r2, ip, lr, r3
 801df9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801df9c:	fb01 2203 	mla	r2, r1, r3, r2
 801dfa0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801dfa2:	fb00 2203 	mla	r2, r0, r3, r2
 801dfa6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801dfaa:	2a00      	cmp	r2, #0
 801dfac:	d039      	beq.n	801e022 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801dfae:	4bc7      	ldr	r3, [pc, #796]	@ (801e2cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801dfb0:	6819      	ldr	r1, [r3, #0]
 801dfb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dfb4:	fa5f fc81 	uxtb.w	ip, r1
 801dfb8:	435a      	muls	r2, r3
 801dfba:	1c53      	adds	r3, r2, #1
 801dfbc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801dfc0:	1212      	asrs	r2, r2, #8
 801dfc2:	b290      	uxth	r0, r2
 801dfc4:	43d2      	mvns	r2, r2
 801dfc6:	fb1c fc00 	smulbb	ip, ip, r0
 801dfca:	b2d3      	uxtb	r3, r2
 801dfcc:	f898 2000 	ldrb.w	r2, [r8]
 801dfd0:	fb02 c203 	mla	r2, r2, r3, ip
 801dfd4:	b292      	uxth	r2, r2
 801dfd6:	f102 0c01 	add.w	ip, r2, #1
 801dfda:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801dfde:	f898 c001 	ldrb.w	ip, [r8, #1]
 801dfe2:	fb1c fc03 	smulbb	ip, ip, r3
 801dfe6:	1212      	asrs	r2, r2, #8
 801dfe8:	f888 2000 	strb.w	r2, [r8]
 801dfec:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801dff0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801dff4:	fb02 c200 	mla	r2, r2, r0, ip
 801dff8:	b292      	uxth	r2, r2
 801dffa:	f102 0c01 	add.w	ip, r2, #1
 801dffe:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e002:	1212      	asrs	r2, r2, #8
 801e004:	f888 2001 	strb.w	r2, [r8, #1]
 801e008:	f898 2002 	ldrb.w	r2, [r8, #2]
 801e00c:	fb12 f303 	smulbb	r3, r2, r3
 801e010:	fb01 3300 	mla	r3, r1, r0, r3
 801e014:	b29b      	uxth	r3, r3
 801e016:	1c5a      	adds	r2, r3, #1
 801e018:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e01c:	121b      	asrs	r3, r3, #8
 801e01e:	f888 3002 	strb.w	r3, [r8, #2]
 801e022:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e024:	f108 0803 	add.w	r8, r8, #3
 801e028:	441d      	add	r5, r3
 801e02a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e02c:	441e      	add	r6, r3
 801e02e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e030:	3b01      	subs	r3, #1
 801e032:	930d      	str	r3, [sp, #52]	@ 0x34
 801e034:	e742      	b.n	801debc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e036:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e038:	f10a 0a03 	add.w	sl, sl, #3
 801e03c:	441d      	add	r5, r3
 801e03e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e040:	441e      	add	r6, r3
 801e042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e044:	3b01      	subs	r3, #1
 801e046:	9309      	str	r3, [sp, #36]	@ 0x24
 801e048:	e716      	b.n	801de78 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e04a:	d024      	beq.n	801e096 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e04c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e04e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801e050:	3b01      	subs	r3, #1
 801e052:	fb00 5003 	mla	r0, r0, r3, r5
 801e056:	1400      	asrs	r0, r0, #16
 801e058:	f53f af2b 	bmi.w	801deb2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e05c:	3901      	subs	r1, #1
 801e05e:	4288      	cmp	r0, r1
 801e060:	f6bf af27 	bge.w	801deb2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e064:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801e066:	fb01 6303 	mla	r3, r1, r3, r6
 801e06a:	141b      	asrs	r3, r3, #16
 801e06c:	f53f af21 	bmi.w	801deb2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e070:	3a01      	subs	r2, #1
 801e072:	4293      	cmp	r3, r2
 801e074:	f6bf af1d 	bge.w	801deb2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e078:	f10a 0e03 	add.w	lr, sl, #3
 801e07c:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 801e080:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801e084:	f1b8 0f00 	cmp.w	r8, #0
 801e088:	dc76      	bgt.n	801e178 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801e08a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e08c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e090:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e094:	44a2      	add	sl, r4
 801e096:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e098:	2b00      	cmp	r3, #0
 801e09a:	f340 812c 	ble.w	801e2f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801e09e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e0a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e0a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e0a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e0ac:	eef0 6a62 	vmov.f32	s13, s5
 801e0b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e0b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e0b8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e0bc:	ee16 5a90 	vmov	r5, s13
 801e0c0:	eef0 6a43 	vmov.f32	s13, s6
 801e0c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e0c8:	ee16 6a90 	vmov	r6, s13
 801e0cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e0d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e0d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e0d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e0dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e0e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e0e4:	ee12 2a90 	vmov	r2, s5
 801e0e8:	eef0 2a47 	vmov.f32	s5, s14
 801e0ec:	fb92 f3f3 	sdiv	r3, r2, r3
 801e0f0:	ee13 2a10 	vmov	r2, s6
 801e0f4:	9323      	str	r3, [sp, #140]	@ 0x8c
 801e0f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e0f8:	eeb0 3a67 	vmov.f32	s6, s15
 801e0fc:	fb92 f3f3 	sdiv	r3, r2, r3
 801e100:	9324      	str	r3, [sp, #144]	@ 0x90
 801e102:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e104:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e106:	3b01      	subs	r3, #1
 801e108:	930c      	str	r3, [sp, #48]	@ 0x30
 801e10a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e10c:	bf08      	it	eq
 801e10e:	4613      	moveq	r3, r2
 801e110:	9309      	str	r3, [sp, #36]	@ 0x24
 801e112:	e6a2      	b.n	801de5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e114:	2900      	cmp	r1, #0
 801e116:	f43f af2c 	beq.w	801df72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e11a:	eb09 0003 	add.w	r0, r9, r3
 801e11e:	0843      	lsrs	r3, r0, #1
 801e120:	07c0      	lsls	r0, r0, #31
 801e122:	5cfb      	ldrb	r3, [r7, r3]
 801e124:	bf54      	ite	pl
 801e126:	f003 030f 	andpl.w	r3, r3, #15
 801e12a:	111b      	asrmi	r3, r3, #4
 801e12c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e130:	b2db      	uxtb	r3, r3
 801e132:	930a      	str	r3, [sp, #40]	@ 0x28
 801e134:	e71d      	b.n	801df72 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e136:	f113 0b01 	adds.w	fp, r3, #1
 801e13a:	f53f af72 	bmi.w	801e022 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e13e:	45dc      	cmp	ip, fp
 801e140:	f6ff af6f 	blt.w	801e022 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e144:	f110 0b01 	adds.w	fp, r0, #1
 801e148:	f53f af6b 	bmi.w	801e022 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e14c:	45de      	cmp	lr, fp
 801e14e:	f6ff af68 	blt.w	801e022 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e152:	9302      	str	r3, [sp, #8]
 801e154:	fa0f f38e 	sxth.w	r3, lr
 801e158:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e15a:	9301      	str	r3, [sp, #4]
 801e15c:	fa0f f38c 	sxth.w	r3, ip
 801e160:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801e164:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e168:	9300      	str	r3, [sp, #0]
 801e16a:	463a      	mov	r2, r7
 801e16c:	464b      	mov	r3, r9
 801e16e:	4641      	mov	r1, r8
 801e170:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e172:	f7ff fd79 	bl	801dc68 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801e176:	e754      	b.n	801e022 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e178:	142a      	asrs	r2, r5, #16
 801e17a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e17e:	1433      	asrs	r3, r6, #16
 801e180:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e184:	fb09 2303 	mla	r3, r9, r3, r2
 801e188:	085a      	lsrs	r2, r3, #1
 801e18a:	07dc      	lsls	r4, r3, #31
 801e18c:	5cba      	ldrb	r2, [r7, r2]
 801e18e:	bf54      	ite	pl
 801e190:	f002 020f 	andpl.w	r2, r2, #15
 801e194:	1112      	asrmi	r2, r2, #4
 801e196:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e19a:	b2d2      	uxtb	r2, r2
 801e19c:	2900      	cmp	r1, #0
 801e19e:	f000 8097 	beq.w	801e2d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801e1a2:	f103 0b01 	add.w	fp, r3, #1
 801e1a6:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801e1aa:	f01b 0f01 	tst.w	fp, #1
 801e1ae:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e1b2:	bf0c      	ite	eq
 801e1b4:	f00c 0c0f 	andeq.w	ip, ip, #15
 801e1b8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801e1bc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e1c0:	fa5f f48c 	uxtb.w	r4, ip
 801e1c4:	9412      	str	r4, [sp, #72]	@ 0x48
 801e1c6:	b300      	cbz	r0, 801e20a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e1c8:	444b      	add	r3, r9
 801e1ca:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e1ce:	07dc      	lsls	r4, r3, #31
 801e1d0:	f103 0301 	add.w	r3, r3, #1
 801e1d4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e1d8:	bf54      	ite	pl
 801e1da:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e1de:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e1e2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e1e6:	fa5f f48c 	uxtb.w	r4, ip
 801e1ea:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e1ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e1f0:	07dc      	lsls	r4, r3, #31
 801e1f2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e1f6:	bf54      	ite	pl
 801e1f8:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e1fc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e200:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e204:	fa5f f38c 	uxtb.w	r3, ip
 801e208:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e20a:	b289      	uxth	r1, r1
 801e20c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e20e:	b280      	uxth	r0, r0
 801e210:	fb01 f300 	mul.w	r3, r1, r0
 801e214:	0109      	lsls	r1, r1, #4
 801e216:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801e21a:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 801e21e:	1ac9      	subs	r1, r1, r3
 801e220:	b280      	uxth	r0, r0
 801e222:	b289      	uxth	r1, r1
 801e224:	ebac 0c00 	sub.w	ip, ip, r0
 801e228:	4361      	muls	r1, r4
 801e22a:	fa1f fc8c 	uxth.w	ip, ip
 801e22e:	fb02 120c 	mla	r2, r2, ip, r1
 801e232:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e234:	fb00 2001 	mla	r0, r0, r1, r2
 801e238:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e23a:	fb03 0302 	mla	r3, r3, r2, r0
 801e23e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e242:	2b00      	cmp	r3, #0
 801e244:	d039      	beq.n	801e2ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801e246:	4a21      	ldr	r2, [pc, #132]	@ (801e2cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801e248:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801e24c:	6810      	ldr	r0, [r2, #0]
 801e24e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e250:	fa5f fc80 	uxtb.w	ip, r0
 801e254:	4353      	muls	r3, r2
 801e256:	1c5a      	adds	r2, r3, #1
 801e258:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e25c:	121b      	asrs	r3, r3, #8
 801e25e:	b29a      	uxth	r2, r3
 801e260:	43db      	mvns	r3, r3
 801e262:	fb1c fc02 	smulbb	ip, ip, r2
 801e266:	b2db      	uxtb	r3, r3
 801e268:	fb01 c103 	mla	r1, r1, r3, ip
 801e26c:	b289      	uxth	r1, r1
 801e26e:	f101 0c01 	add.w	ip, r1, #1
 801e272:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801e276:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801e27a:	fb1c fc03 	smulbb	ip, ip, r3
 801e27e:	1209      	asrs	r1, r1, #8
 801e280:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801e284:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801e288:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801e28c:	fb01 c102 	mla	r1, r1, r2, ip
 801e290:	b289      	uxth	r1, r1
 801e292:	f101 0c01 	add.w	ip, r1, #1
 801e296:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801e29a:	1209      	asrs	r1, r1, #8
 801e29c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801e2a0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801e2a4:	fb11 f303 	smulbb	r3, r1, r3
 801e2a8:	fb00 3002 	mla	r0, r0, r2, r3
 801e2ac:	b280      	uxth	r0, r0
 801e2ae:	1c42      	adds	r2, r0, #1
 801e2b0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e2b4:	1200      	asrs	r0, r0, #8
 801e2b6:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801e2ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e2bc:	f10e 0e03 	add.w	lr, lr, #3
 801e2c0:	f108 38ff 	add.w	r8, r8, #4294967295
 801e2c4:	441d      	add	r5, r3
 801e2c6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e2c8:	441e      	add	r6, r3
 801e2ca:	e6db      	b.n	801e084 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801e2cc:	24025150 	.word	0x24025150
 801e2d0:	2800      	cmp	r0, #0
 801e2d2:	d09a      	beq.n	801e20a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e2d4:	444b      	add	r3, r9
 801e2d6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e2da:	07db      	lsls	r3, r3, #31
 801e2dc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e2e0:	bf54      	ite	pl
 801e2e2:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e2e6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e2ea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e2ee:	fa5f f38c 	uxtb.w	r3, ip
 801e2f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e2f4:	e789      	b.n	801e20a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e2f6:	b017      	add	sp, #92	@ 0x5c
 801e2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e2fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801e2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e300:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 801e304:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801e308:	2d00      	cmp	r5, #0
 801e30a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801e30e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801e312:	fb04 5e03 	mla	lr, r4, r3, r5
 801e316:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801e31a:	f2c0 80b1 	blt.w	801e480 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e31e:	45a9      	cmp	r9, r5
 801e320:	f340 80ae 	ble.w	801e480 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e324:	2c00      	cmp	r4, #0
 801e326:	f2c0 80ab 	blt.w	801e480 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e32a:	45a0      	cmp	r8, r4
 801e32c:	f340 80a8 	ble.w	801e480 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e330:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801e334:	f01e 0f01 	tst.w	lr, #1
 801e338:	5d97      	ldrb	r7, [r2, r6]
 801e33a:	bf0c      	ite	eq
 801e33c:	f007 070f 	andeq.w	r7, r7, #15
 801e340:	113f      	asrne	r7, r7, #4
 801e342:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801e346:	b2ff      	uxtb	r7, r7
 801e348:	f115 0a01 	adds.w	sl, r5, #1
 801e34c:	f100 809a 	bmi.w	801e484 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e350:	45d1      	cmp	r9, sl
 801e352:	f340 8097 	ble.w	801e484 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e356:	2c00      	cmp	r4, #0
 801e358:	f2c0 8094 	blt.w	801e484 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e35c:	45a0      	cmp	r8, r4
 801e35e:	f340 8091 	ble.w	801e484 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e362:	2800      	cmp	r0, #0
 801e364:	f000 8090 	beq.w	801e488 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801e368:	f10e 0b01 	add.w	fp, lr, #1
 801e36c:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801e370:	f01b 0f01 	tst.w	fp, #1
 801e374:	5d96      	ldrb	r6, [r2, r6]
 801e376:	bf0c      	ite	eq
 801e378:	f006 060f 	andeq.w	r6, r6, #15
 801e37c:	1136      	asrne	r6, r6, #4
 801e37e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801e382:	b2f6      	uxtb	r6, r6
 801e384:	f1bc 0f00 	cmp.w	ip, #0
 801e388:	f000 8082 	beq.w	801e490 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801e38c:	2d00      	cmp	r5, #0
 801e38e:	f104 0401 	add.w	r4, r4, #1
 801e392:	db7b      	blt.n	801e48c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e394:	45a9      	cmp	r9, r5
 801e396:	dd79      	ble.n	801e48c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e398:	2c00      	cmp	r4, #0
 801e39a:	db77      	blt.n	801e48c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e39c:	45a0      	cmp	r8, r4
 801e39e:	dd75      	ble.n	801e48c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e3a0:	eb03 0b0e 	add.w	fp, r3, lr
 801e3a4:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801e3a8:	f01b 0f01 	tst.w	fp, #1
 801e3ac:	5d55      	ldrb	r5, [r2, r5]
 801e3ae:	bf0c      	ite	eq
 801e3b0:	f005 050f 	andeq.w	r5, r5, #15
 801e3b4:	112d      	asrne	r5, r5, #4
 801e3b6:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801e3ba:	b2ed      	uxtb	r5, r5
 801e3bc:	f1ba 0f00 	cmp.w	sl, #0
 801e3c0:	db69      	blt.n	801e496 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e3c2:	45d1      	cmp	r9, sl
 801e3c4:	dd67      	ble.n	801e496 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e3c6:	2c00      	cmp	r4, #0
 801e3c8:	db65      	blt.n	801e496 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e3ca:	45a0      	cmp	r8, r4
 801e3cc:	dd63      	ble.n	801e496 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e3ce:	2800      	cmp	r0, #0
 801e3d0:	d063      	beq.n	801e49a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801e3d2:	3301      	adds	r3, #1
 801e3d4:	449e      	add	lr, r3
 801e3d6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801e3da:	f01e 0f01 	tst.w	lr, #1
 801e3de:	5cd4      	ldrb	r4, [r2, r3]
 801e3e0:	bf0c      	ite	eq
 801e3e2:	f004 040f 	andeq.w	r4, r4, #15
 801e3e6:	1124      	asrne	r4, r4, #4
 801e3e8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801e3ec:	b2e3      	uxtb	r3, r4
 801e3ee:	b282      	uxth	r2, r0
 801e3f0:	fa1f fc8c 	uxth.w	ip, ip
 801e3f4:	fb02 f40c 	mul.w	r4, r2, ip
 801e3f8:	0112      	lsls	r2, r2, #4
 801e3fa:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801e3fe:	fa1f f08c 	uxth.w	r0, ip
 801e402:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 801e406:	1b12      	subs	r2, r2, r4
 801e408:	ebac 0c00 	sub.w	ip, ip, r0
 801e40c:	b292      	uxth	r2, r2
 801e40e:	fa1f fc8c 	uxth.w	ip, ip
 801e412:	4372      	muls	r2, r6
 801e414:	fb07 220c 	mla	r2, r7, ip, r2
 801e418:	fb00 2005 	mla	r0, r0, r5, r2
 801e41c:	fb04 0303 	mla	r3, r4, r3, r0
 801e420:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e424:	b353      	cbz	r3, 801e47c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801e426:	4a1e      	ldr	r2, [pc, #120]	@ (801e4a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801e428:	7808      	ldrb	r0, [r1, #0]
 801e42a:	6814      	ldr	r4, [r2, #0]
 801e42c:	b29a      	uxth	r2, r3
 801e42e:	43db      	mvns	r3, r3
 801e430:	b2e5      	uxtb	r5, r4
 801e432:	b2db      	uxtb	r3, r3
 801e434:	fb15 f502 	smulbb	r5, r5, r2
 801e438:	fb00 5003 	mla	r0, r0, r3, r5
 801e43c:	b280      	uxth	r0, r0
 801e43e:	1c45      	adds	r5, r0, #1
 801e440:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801e444:	784d      	ldrb	r5, [r1, #1]
 801e446:	fb15 f503 	smulbb	r5, r5, r3
 801e44a:	1200      	asrs	r0, r0, #8
 801e44c:	7008      	strb	r0, [r1, #0]
 801e44e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801e452:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801e456:	fb00 5002 	mla	r0, r0, r2, r5
 801e45a:	b280      	uxth	r0, r0
 801e45c:	1c45      	adds	r5, r0, #1
 801e45e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801e462:	1200      	asrs	r0, r0, #8
 801e464:	7048      	strb	r0, [r1, #1]
 801e466:	7888      	ldrb	r0, [r1, #2]
 801e468:	fb10 f303 	smulbb	r3, r0, r3
 801e46c:	fb04 3202 	mla	r2, r4, r2, r3
 801e470:	b292      	uxth	r2, r2
 801e472:	1c53      	adds	r3, r2, #1
 801e474:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e478:	1212      	asrs	r2, r2, #8
 801e47a:	708a      	strb	r2, [r1, #2]
 801e47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e480:	2700      	movs	r7, #0
 801e482:	e761      	b.n	801e348 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801e484:	2600      	movs	r6, #0
 801e486:	e77d      	b.n	801e384 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801e488:	4606      	mov	r6, r0
 801e48a:	e77b      	b.n	801e384 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801e48c:	2500      	movs	r5, #0
 801e48e:	e795      	b.n	801e3bc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801e490:	4663      	mov	r3, ip
 801e492:	4665      	mov	r5, ip
 801e494:	e7ab      	b.n	801e3ee <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801e496:	2300      	movs	r3, #0
 801e498:	e7a9      	b.n	801e3ee <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801e49a:	4603      	mov	r3, r0
 801e49c:	e7a7      	b.n	801e3ee <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801e49e:	bf00      	nop
 801e4a0:	24025150 	.word	0x24025150

0801e4a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4a8:	b093      	sub	sp, #76	@ 0x4c
 801e4aa:	461c      	mov	r4, r3
 801e4ac:	920c      	str	r2, [sp, #48]	@ 0x30
 801e4ae:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e4b0:	9011      	str	r0, [sp, #68]	@ 0x44
 801e4b2:	9107      	str	r1, [sp, #28]
 801e4b4:	6850      	ldr	r0, [r2, #4]
 801e4b6:	6812      	ldr	r2, [r2, #0]
 801e4b8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801e4bc:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 801e4c0:	fb00 1303 	mla	r3, r0, r3, r1
 801e4c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e4c8:	eb02 0b03 	add.w	fp, r2, r3
 801e4cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e4ce:	689b      	ldr	r3, [r3, #8]
 801e4d0:	3301      	adds	r3, #1
 801e4d2:	f023 0301 	bic.w	r3, r3, #1
 801e4d6:	9309      	str	r3, [sp, #36]	@ 0x24
 801e4d8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e4da:	f8d3 8000 	ldr.w	r8, [r3]
 801e4de:	9b07      	ldr	r3, [sp, #28]
 801e4e0:	2b00      	cmp	r3, #0
 801e4e2:	dc03      	bgt.n	801e4ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e4e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e4e6:	2b00      	cmp	r3, #0
 801e4e8:	f340 822b 	ble.w	801e942 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801e4ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e4ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e4f2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e4f6:	1e48      	subs	r0, r1, #1
 801e4f8:	1e57      	subs	r7, r2, #1
 801e4fa:	2c00      	cmp	r4, #0
 801e4fc:	f340 80d7 	ble.w	801e6ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801e500:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801e504:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e508:	d406      	bmi.n	801e518 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e50a:	4584      	cmp	ip, r0
 801e50c:	da04      	bge.n	801e518 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e50e:	2b00      	cmp	r3, #0
 801e510:	db02      	blt.n	801e518 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e512:	42bb      	cmp	r3, r7
 801e514:	f2c0 80cc 	blt.w	801e6b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801e518:	f11c 0c01 	adds.w	ip, ip, #1
 801e51c:	f100 80bf 	bmi.w	801e69e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e520:	4561      	cmp	r1, ip
 801e522:	f2c0 80bc 	blt.w	801e69e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e526:	3301      	adds	r3, #1
 801e528:	f100 80b9 	bmi.w	801e69e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e52c:	429a      	cmp	r2, r3
 801e52e:	f2c0 80b6 	blt.w	801e69e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e532:	46a2      	mov	sl, r4
 801e534:	465f      	mov	r7, fp
 801e536:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801e53a:	f1ba 0f00 	cmp.w	sl, #0
 801e53e:	f340 80d4 	ble.w	801e6ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801e542:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801e546:	1430      	asrs	r0, r6, #16
 801e548:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801e54c:	9308      	str	r3, [sp, #32]
 801e54e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e550:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801e554:	142b      	asrs	r3, r5, #16
 801e556:	f100 8124 	bmi.w	801e7a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801e55a:	f10c 32ff 	add.w	r2, ip, #4294967295
 801e55e:	4293      	cmp	r3, r2
 801e560:	f280 811f 	bge.w	801e7a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801e564:	2800      	cmp	r0, #0
 801e566:	f2c0 811c 	blt.w	801e7a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801e56a:	f10e 32ff 	add.w	r2, lr, #4294967295
 801e56e:	4290      	cmp	r0, r2
 801e570:	f280 8117 	bge.w	801e7a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801e574:	fb00 3309 	mla	r3, r0, r9, r3
 801e578:	0858      	lsrs	r0, r3, #1
 801e57a:	07da      	lsls	r2, r3, #31
 801e57c:	9a08      	ldr	r2, [sp, #32]
 801e57e:	f818 c000 	ldrb.w	ip, [r8, r0]
 801e582:	bf54      	ite	pl
 801e584:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e588:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e58c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e590:	fa5f fc8c 	uxtb.w	ip, ip
 801e594:	2a00      	cmp	r2, #0
 801e596:	f000 80ed 	beq.w	801e774 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801e59a:	1c58      	adds	r0, r3, #1
 801e59c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801e5a0:	07c0      	lsls	r0, r0, #31
 801e5a2:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801e5a6:	bf54      	ite	pl
 801e5a8:	f00e 0e0f 	andpl.w	lr, lr, #15
 801e5ac:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801e5b0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801e5b4:	fa5f fe8e 	uxtb.w	lr, lr
 801e5b8:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 801e5bc:	b1c9      	cbz	r1, 801e5f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e5be:	444b      	add	r3, r9
 801e5c0:	0858      	lsrs	r0, r3, #1
 801e5c2:	07da      	lsls	r2, r3, #31
 801e5c4:	f818 0000 	ldrb.w	r0, [r8, r0]
 801e5c8:	bf54      	ite	pl
 801e5ca:	f000 000f 	andpl.w	r0, r0, #15
 801e5ce:	1100      	asrmi	r0, r0, #4
 801e5d0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e5d4:	b2c0      	uxtb	r0, r0
 801e5d6:	900a      	str	r0, [sp, #40]	@ 0x28
 801e5d8:	1c58      	adds	r0, r3, #1
 801e5da:	0843      	lsrs	r3, r0, #1
 801e5dc:	07c2      	lsls	r2, r0, #31
 801e5de:	f818 3003 	ldrb.w	r3, [r8, r3]
 801e5e2:	bf54      	ite	pl
 801e5e4:	f003 030f 	andpl.w	r3, r3, #15
 801e5e8:	111b      	asrmi	r3, r3, #4
 801e5ea:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e5ee:	b2db      	uxtb	r3, r3
 801e5f0:	930e      	str	r3, [sp, #56]	@ 0x38
 801e5f2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e5f6:	b289      	uxth	r1, r1
 801e5f8:	fb02 f301 	mul.w	r3, r2, r1
 801e5fc:	0112      	lsls	r2, r2, #4
 801e5fe:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801e602:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 801e606:	1ad2      	subs	r2, r2, r3
 801e608:	b289      	uxth	r1, r1
 801e60a:	b292      	uxth	r2, r2
 801e60c:	1a40      	subs	r0, r0, r1
 801e60e:	fa1f fe80 	uxth.w	lr, r0
 801e612:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e614:	4342      	muls	r2, r0
 801e616:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801e61a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e61c:	fb01 c102 	mla	r1, r1, r2, ip
 801e620:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e622:	fb03 1302 	mla	r3, r3, r2, r1
 801e626:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e62a:	b383      	cbz	r3, 801e68e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e62c:	4ac6      	ldr	r2, [pc, #792]	@ (801e948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801e62e:	2bff      	cmp	r3, #255	@ 0xff
 801e630:	6812      	ldr	r2, [r2, #0]
 801e632:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801e636:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801e63a:	b2d2      	uxtb	r2, r2
 801e63c:	f000 80ac 	beq.w	801e798 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801e640:	b299      	uxth	r1, r3
 801e642:	43db      	mvns	r3, r3
 801e644:	f897 c000 	ldrb.w	ip, [r7]
 801e648:	fb12 f201 	smulbb	r2, r2, r1
 801e64c:	b2db      	uxtb	r3, r3
 801e64e:	fb10 f001 	smulbb	r0, r0, r1
 801e652:	fb0c 2203 	mla	r2, ip, r3, r2
 801e656:	fb1e f101 	smulbb	r1, lr, r1
 801e65a:	b292      	uxth	r2, r2
 801e65c:	f102 0c01 	add.w	ip, r2, #1
 801e660:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e664:	1212      	asrs	r2, r2, #8
 801e666:	703a      	strb	r2, [r7, #0]
 801e668:	787a      	ldrb	r2, [r7, #1]
 801e66a:	fb02 0003 	mla	r0, r2, r3, r0
 801e66e:	b280      	uxth	r0, r0
 801e670:	1c42      	adds	r2, r0, #1
 801e672:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e676:	78ba      	ldrb	r2, [r7, #2]
 801e678:	fb02 1303 	mla	r3, r2, r3, r1
 801e67c:	1200      	asrs	r0, r0, #8
 801e67e:	b29b      	uxth	r3, r3
 801e680:	7078      	strb	r0, [r7, #1]
 801e682:	f103 0e01 	add.w	lr, r3, #1
 801e686:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801e68a:	121b      	asrs	r3, r3, #8
 801e68c:	70bb      	strb	r3, [r7, #2]
 801e68e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e690:	3703      	adds	r7, #3
 801e692:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e696:	441d      	add	r5, r3
 801e698:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e69a:	441e      	add	r6, r3
 801e69c:	e74d      	b.n	801e53a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e69e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e6a0:	3c01      	subs	r4, #1
 801e6a2:	f10b 0b03 	add.w	fp, fp, #3
 801e6a6:	441d      	add	r5, r3
 801e6a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e6aa:	441e      	add	r6, r3
 801e6ac:	e725      	b.n	801e4fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801e6ae:	d021      	beq.n	801e6f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801e6b0:	1e63      	subs	r3, r4, #1
 801e6b2:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801e6b4:	fb00 5003 	mla	r0, r0, r3, r5
 801e6b8:	1400      	asrs	r0, r0, #16
 801e6ba:	f53f af3a 	bmi.w	801e532 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e6be:	3901      	subs	r1, #1
 801e6c0:	4288      	cmp	r0, r1
 801e6c2:	f6bf af36 	bge.w	801e532 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e6c6:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801e6c8:	fb01 6303 	mla	r3, r1, r3, r6
 801e6cc:	141b      	asrs	r3, r3, #16
 801e6ce:	f53f af30 	bmi.w	801e532 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e6d2:	3a01      	subs	r2, #1
 801e6d4:	4293      	cmp	r3, r2
 801e6d6:	f6bf af2c 	bge.w	801e532 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e6da:	f10b 0c03 	add.w	ip, fp, #3
 801e6de:	46a6      	mov	lr, r4
 801e6e0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801e6e4:	f1be 0f00 	cmp.w	lr, #0
 801e6e8:	dc79      	bgt.n	801e7de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801e6ea:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801e6ee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e6f2:	44a3      	add	fp, r4
 801e6f4:	9b07      	ldr	r3, [sp, #28]
 801e6f6:	2b00      	cmp	r3, #0
 801e6f8:	f340 8123 	ble.w	801e942 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801e6fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e700:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e702:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e706:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e70a:	eef0 6a62 	vmov.f32	s13, s5
 801e70e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e712:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e716:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e71a:	ee16 5a90 	vmov	r5, s13
 801e71e:	eef0 6a43 	vmov.f32	s13, s6
 801e722:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e726:	ee16 6a90 	vmov	r6, s13
 801e72a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e72e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e732:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e736:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e73a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e73e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e742:	ee12 2a90 	vmov	r2, s5
 801e746:	eef0 2a47 	vmov.f32	s5, s14
 801e74a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e74e:	ee13 2a10 	vmov	r2, s6
 801e752:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e754:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e756:	eeb0 3a67 	vmov.f32	s6, s15
 801e75a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e75e:	9320      	str	r3, [sp, #128]	@ 0x80
 801e760:	9b07      	ldr	r3, [sp, #28]
 801e762:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e764:	3b01      	subs	r3, #1
 801e766:	9307      	str	r3, [sp, #28]
 801e768:	bf08      	it	eq
 801e76a:	4614      	moveq	r4, r2
 801e76c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e76e:	bf18      	it	ne
 801e770:	461c      	movne	r4, r3
 801e772:	e6b4      	b.n	801e4de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e774:	2900      	cmp	r1, #0
 801e776:	f43f af3c 	beq.w	801e5f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e77a:	eb09 0003 	add.w	r0, r9, r3
 801e77e:	0843      	lsrs	r3, r0, #1
 801e780:	07c0      	lsls	r0, r0, #31
 801e782:	f818 3003 	ldrb.w	r3, [r8, r3]
 801e786:	bf54      	ite	pl
 801e788:	f003 030f 	andpl.w	r3, r3, #15
 801e78c:	111b      	asrmi	r3, r3, #4
 801e78e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e792:	b2db      	uxtb	r3, r3
 801e794:	930a      	str	r3, [sp, #40]	@ 0x28
 801e796:	e72c      	b.n	801e5f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e798:	703a      	strb	r2, [r7, #0]
 801e79a:	7078      	strb	r0, [r7, #1]
 801e79c:	f887 e002 	strb.w	lr, [r7, #2]
 801e7a0:	e775      	b.n	801e68e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e7a2:	1c5a      	adds	r2, r3, #1
 801e7a4:	f53f af73 	bmi.w	801e68e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e7a8:	4594      	cmp	ip, r2
 801e7aa:	f6ff af70 	blt.w	801e68e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e7ae:	1c42      	adds	r2, r0, #1
 801e7b0:	f53f af6d 	bmi.w	801e68e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e7b4:	4596      	cmp	lr, r2
 801e7b6:	f6ff af6a 	blt.w	801e68e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e7ba:	9302      	str	r3, [sp, #8]
 801e7bc:	fa0f f38e 	sxth.w	r3, lr
 801e7c0:	9a08      	ldr	r2, [sp, #32]
 801e7c2:	9301      	str	r3, [sp, #4]
 801e7c4:	fa0f f38c 	sxth.w	r3, ip
 801e7c8:	9105      	str	r1, [sp, #20]
 801e7ca:	4639      	mov	r1, r7
 801e7cc:	9300      	str	r3, [sp, #0]
 801e7ce:	464b      	mov	r3, r9
 801e7d0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801e7d4:	4642      	mov	r2, r8
 801e7d6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e7d8:	f7ff fd90 	bl	801e2fc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801e7dc:	e757      	b.n	801e68e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e7de:	142a      	asrs	r2, r5, #16
 801e7e0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e7e4:	1433      	asrs	r3, r6, #16
 801e7e6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801e7ea:	fb09 2303 	mla	r3, r9, r3, r2
 801e7ee:	085a      	lsrs	r2, r3, #1
 801e7f0:	07d9      	lsls	r1, r3, #31
 801e7f2:	f818 2002 	ldrb.w	r2, [r8, r2]
 801e7f6:	bf54      	ite	pl
 801e7f8:	f002 020f 	andpl.w	r2, r2, #15
 801e7fc:	1112      	asrmi	r2, r2, #4
 801e7fe:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e802:	b2d2      	uxtb	r2, r2
 801e804:	2800      	cmp	r0, #0
 801e806:	f000 8085 	beq.w	801e914 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801e80a:	f103 0a01 	add.w	sl, r3, #1
 801e80e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801e812:	f01a 0f01 	tst.w	sl, #1
 801e816:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e81a:	bf0c      	ite	eq
 801e81c:	f001 010f 	andeq.w	r1, r1, #15
 801e820:	1109      	asrne	r1, r1, #4
 801e822:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e826:	b2c9      	uxtb	r1, r1
 801e828:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e82a:	b1df      	cbz	r7, 801e864 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801e82c:	444b      	add	r3, r9
 801e82e:	0859      	lsrs	r1, r3, #1
 801e830:	f013 0f01 	tst.w	r3, #1
 801e834:	f103 0301 	add.w	r3, r3, #1
 801e838:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e83c:	bf0c      	ite	eq
 801e83e:	f001 010f 	andeq.w	r1, r1, #15
 801e842:	1109      	asrne	r1, r1, #4
 801e844:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e848:	b2c9      	uxtb	r1, r1
 801e84a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e84c:	0859      	lsrs	r1, r3, #1
 801e84e:	07db      	lsls	r3, r3, #31
 801e850:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e854:	bf54      	ite	pl
 801e856:	f001 010f 	andpl.w	r1, r1, #15
 801e85a:	1109      	asrmi	r1, r1, #4
 801e85c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e860:	b2c9      	uxtb	r1, r1
 801e862:	9110      	str	r1, [sp, #64]	@ 0x40
 801e864:	b280      	uxth	r0, r0
 801e866:	b2bf      	uxth	r7, r7
 801e868:	fb00 f307 	mul.w	r3, r0, r7
 801e86c:	0100      	lsls	r0, r0, #4
 801e86e:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801e872:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 801e876:	1ac0      	subs	r0, r0, r3
 801e878:	b2bf      	uxth	r7, r7
 801e87a:	b280      	uxth	r0, r0
 801e87c:	1bc9      	subs	r1, r1, r7
 801e87e:	fa1f fa81 	uxth.w	sl, r1
 801e882:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e884:	4348      	muls	r0, r1
 801e886:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e888:	fb02 020a 	mla	r2, r2, sl, r0
 801e88c:	fb07 2701 	mla	r7, r7, r1, r2
 801e890:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e892:	fb03 7302 	mla	r3, r3, r2, r7
 801e896:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e89a:	b393      	cbz	r3, 801e902 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801e89c:	4a2a      	ldr	r2, [pc, #168]	@ (801e948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801e89e:	2bff      	cmp	r3, #255	@ 0xff
 801e8a0:	6811      	ldr	r1, [r2, #0]
 801e8a2:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801e8a6:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801e8aa:	b2c9      	uxtb	r1, r1
 801e8ac:	d042      	beq.n	801e934 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801e8ae:	b298      	uxth	r0, r3
 801e8b0:	43db      	mvns	r3, r3
 801e8b2:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801e8b6:	fb11 f100 	smulbb	r1, r1, r0
 801e8ba:	b2db      	uxtb	r3, r3
 801e8bc:	fb17 f700 	smulbb	r7, r7, r0
 801e8c0:	fb02 1103 	mla	r1, r2, r3, r1
 801e8c4:	fb1a f000 	smulbb	r0, sl, r0
 801e8c8:	b289      	uxth	r1, r1
 801e8ca:	1c4a      	adds	r2, r1, #1
 801e8cc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e8d0:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801e8d4:	fb02 7703 	mla	r7, r2, r3, r7
 801e8d8:	1209      	asrs	r1, r1, #8
 801e8da:	b2bf      	uxth	r7, r7
 801e8dc:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801e8e0:	1c7a      	adds	r2, r7, #1
 801e8e2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e8e6:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801e8ea:	fb02 0303 	mla	r3, r2, r3, r0
 801e8ee:	123f      	asrs	r7, r7, #8
 801e8f0:	b29b      	uxth	r3, r3
 801e8f2:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801e8f6:	1c5a      	adds	r2, r3, #1
 801e8f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e8fc:	121b      	asrs	r3, r3, #8
 801e8fe:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801e902:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e904:	f10c 0c03 	add.w	ip, ip, #3
 801e908:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e90c:	441d      	add	r5, r3
 801e90e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e910:	441e      	add	r6, r3
 801e912:	e6e7      	b.n	801e6e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801e914:	2f00      	cmp	r7, #0
 801e916:	d0a5      	beq.n	801e864 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801e918:	444b      	add	r3, r9
 801e91a:	0859      	lsrs	r1, r3, #1
 801e91c:	07db      	lsls	r3, r3, #31
 801e91e:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e922:	bf54      	ite	pl
 801e924:	f001 010f 	andpl.w	r1, r1, #15
 801e928:	1109      	asrmi	r1, r1, #4
 801e92a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e92e:	b2c9      	uxtb	r1, r1
 801e930:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e932:	e797      	b.n	801e864 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801e934:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801e938:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801e93c:	f80c ac01 	strb.w	sl, [ip, #-1]
 801e940:	e7df      	b.n	801e902 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801e942:	b013      	add	sp, #76	@ 0x4c
 801e944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e948:	24025150 	.word	0x24025150

0801e94c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 801e94c:	b530      	push	{r4, r5, lr}
 801e94e:	b29d      	uxth	r5, r3
 801e950:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801e954:	780c      	ldrb	r4, [r1, #0]
 801e956:	b298      	uxth	r0, r3
 801e958:	7813      	ldrb	r3, [r2, #0]
 801e95a:	fb14 f405 	smulbb	r4, r4, r5
 801e95e:	fb13 f300 	smulbb	r3, r3, r0
 801e962:	441c      	add	r4, r3
 801e964:	b2a4      	uxth	r4, r4
 801e966:	1c63      	adds	r3, r4, #1
 801e968:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801e96c:	7853      	ldrb	r3, [r2, #1]
 801e96e:	fb13 f300 	smulbb	r3, r3, r0
 801e972:	1224      	asrs	r4, r4, #8
 801e974:	7014      	strb	r4, [r2, #0]
 801e976:	784c      	ldrb	r4, [r1, #1]
 801e978:	fb14 f405 	smulbb	r4, r4, r5
 801e97c:	441c      	add	r4, r3
 801e97e:	b2a4      	uxth	r4, r4
 801e980:	1c63      	adds	r3, r4, #1
 801e982:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801e986:	1224      	asrs	r4, r4, #8
 801e988:	7054      	strb	r4, [r2, #1]
 801e98a:	788b      	ldrb	r3, [r1, #2]
 801e98c:	7891      	ldrb	r1, [r2, #2]
 801e98e:	fb13 f305 	smulbb	r3, r3, r5
 801e992:	fb11 f000 	smulbb	r0, r1, r0
 801e996:	4403      	add	r3, r0
 801e998:	b29b      	uxth	r3, r3
 801e99a:	1c59      	adds	r1, r3, #1
 801e99c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801e9a0:	121b      	asrs	r3, r3, #8
 801e9a2:	7093      	strb	r3, [r2, #2]
 801e9a4:	bd30      	pop	{r4, r5, pc}
	...

0801e9a8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801e9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9ac:	461c      	mov	r4, r3
 801e9ae:	b08b      	sub	sp, #44	@ 0x2c
 801e9b0:	460e      	mov	r6, r1
 801e9b2:	4615      	mov	r5, r2
 801e9b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e9b6:	4682      	mov	sl, r0
 801e9b8:	6861      	ldr	r1, [r4, #4]
 801e9ba:	aa06      	add	r2, sp, #24
 801e9bc:	6820      	ldr	r0, [r4, #0]
 801e9be:	2702      	movs	r7, #2
 801e9c0:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 801e9c4:	3504      	adds	r5, #4
 801e9c6:	c203      	stmia	r2!, {r0, r1}
 801e9c8:	6818      	ldr	r0, [r3, #0]
 801e9ca:	aa08      	add	r2, sp, #32
 801e9cc:	6859      	ldr	r1, [r3, #4]
 801e9ce:	c203      	stmia	r2!, {r0, r1}
 801e9d0:	a806      	add	r0, sp, #24
 801e9d2:	f7f3 fe63 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e9d6:	4621      	mov	r1, r4
 801e9d8:	a808      	add	r0, sp, #32
 801e9da:	f7f3 fe87 	bl	80126ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e9de:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e9e2:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 801e9e6:	f002 0301 	and.w	r3, r2, #1
 801e9ea:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801e9ee:	9302      	str	r3, [sp, #8]
 801e9f0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e9f4:	f003 0101 	and.w	r1, r3, #1
 801e9f8:	9101      	str	r1, [sp, #4]
 801e9fa:	9801      	ldr	r0, [sp, #4]
 801e9fc:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801ea00:	4403      	add	r3, r0
 801ea02:	fb01 2303 	mla	r3, r1, r3, r2
 801ea06:	fb93 f3f7 	sdiv	r3, r3, r7
 801ea0a:	441e      	add	r6, r3
 801ea0c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801ea10:	441a      	add	r2, r3
 801ea12:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801ea16:	4419      	add	r1, r3
 801ea18:	4b70      	ldr	r3, [pc, #448]	@ (801ebdc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801ea1a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ea1e:	6818      	ldr	r0, [r3, #0]
 801ea20:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 801ea24:	6803      	ldr	r3, [r0, #0]
 801ea26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ea28:	4798      	blx	r3
 801ea2a:	4a6d      	ldr	r2, [pc, #436]	@ (801ebe0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 801ea2c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801ea30:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801ea34:	8813      	ldrh	r3, [r2, #0]
 801ea36:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801ea3a:	fb03 1404 	mla	r4, r3, r4, r1
 801ea3e:	4611      	mov	r1, r2
 801ea40:	fb0b f303 	mul.w	r3, fp, r3
 801ea44:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ea48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ea4c:	4404      	add	r4, r0
 801ea4e:	4423      	add	r3, r4
 801ea50:	d073      	beq.n	801eb3a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 801ea52:	9705      	str	r7, [sp, #20]
 801ea54:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801ea58:	9b03      	ldr	r3, [sp, #12]
 801ea5a:	429c      	cmp	r4, r3
 801ea5c:	f080 80b5 	bcs.w	801ebca <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801ea60:	9b02      	ldr	r3, [sp, #8]
 801ea62:	b35b      	cbz	r3, 801eabc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 801ea64:	7831      	ldrb	r1, [r6, #0]
 801ea66:	4622      	mov	r2, r4
 801ea68:	1c77      	adds	r7, r6, #1
 801ea6a:	3403      	adds	r4, #3
 801ea6c:	f001 010f 	and.w	r1, r1, #15
 801ea70:	f108 3bff 	add.w	fp, r8, #4294967295
 801ea74:	464b      	mov	r3, r9
 801ea76:	4650      	mov	r0, sl
 801ea78:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ea7c:	4429      	add	r1, r5
 801ea7e:	f7ff ff65 	bl	801e94c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801ea82:	f1bb 0f01 	cmp.w	fp, #1
 801ea86:	dd1c      	ble.n	801eac2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801ea88:	7839      	ldrb	r1, [r7, #0]
 801ea8a:	4622      	mov	r2, r4
 801ea8c:	464b      	mov	r3, r9
 801ea8e:	4650      	mov	r0, sl
 801ea90:	0909      	lsrs	r1, r1, #4
 801ea92:	f1ab 0b02 	sub.w	fp, fp, #2
 801ea96:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ea9a:	4429      	add	r1, r5
 801ea9c:	f7ff ff56 	bl	801e94c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801eaa0:	f817 1b01 	ldrb.w	r1, [r7], #1
 801eaa4:	1ce2      	adds	r2, r4, #3
 801eaa6:	464b      	mov	r3, r9
 801eaa8:	f001 010f 	and.w	r1, r1, #15
 801eaac:	4650      	mov	r0, sl
 801eaae:	3406      	adds	r4, #6
 801eab0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801eab4:	4429      	add	r1, r5
 801eab6:	f7ff ff49 	bl	801e94c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801eaba:	e7e2      	b.n	801ea82 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801eabc:	4637      	mov	r7, r6
 801eabe:	46c3      	mov	fp, r8
 801eac0:	e7df      	b.n	801ea82 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801eac2:	d10a      	bne.n	801eada <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 801eac4:	7839      	ldrb	r1, [r7, #0]
 801eac6:	4622      	mov	r2, r4
 801eac8:	3403      	adds	r4, #3
 801eaca:	464b      	mov	r3, r9
 801eacc:	0909      	lsrs	r1, r1, #4
 801eace:	4650      	mov	r0, sl
 801ead0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ead4:	4429      	add	r1, r5
 801ead6:	f7ff ff39 	bl	801e94c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801eada:	9b04      	ldr	r3, [sp, #16]
 801eadc:	9a01      	ldr	r2, [sp, #4]
 801eade:	881b      	ldrh	r3, [r3, #0]
 801eae0:	eba3 0308 	sub.w	r3, r3, r8
 801eae4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eae8:	441c      	add	r4, r3
 801eaea:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801eaee:	4413      	add	r3, r2
 801eaf0:	9a05      	ldr	r2, [sp, #20]
 801eaf2:	fb93 f3f2 	sdiv	r3, r3, r2
 801eaf6:	441e      	add	r6, r3
 801eaf8:	e7ae      	b.n	801ea58 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 801eafa:	4632      	mov	r2, r6
 801eafc:	46c4      	mov	ip, r8
 801eafe:	e037      	b.n	801eb70 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801eb00:	d10e      	bne.n	801eb20 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 801eb02:	7812      	ldrb	r2, [r2, #0]
 801eb04:	3003      	adds	r0, #3
 801eb06:	0912      	lsrs	r2, r2, #4
 801eb08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801eb0c:	18ac      	adds	r4, r5, r2
 801eb0e:	5caa      	ldrb	r2, [r5, r2]
 801eb10:	f800 2c03 	strb.w	r2, [r0, #-3]
 801eb14:	7862      	ldrb	r2, [r4, #1]
 801eb16:	f800 2c02 	strb.w	r2, [r0, #-2]
 801eb1a:	78a2      	ldrb	r2, [r4, #2]
 801eb1c:	f800 2c01 	strb.w	r2, [r0, #-1]
 801eb20:	880c      	ldrh	r4, [r1, #0]
 801eb22:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801eb26:	eba4 0408 	sub.w	r4, r4, r8
 801eb2a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801eb2e:	4404      	add	r4, r0
 801eb30:	9801      	ldr	r0, [sp, #4]
 801eb32:	4402      	add	r2, r0
 801eb34:	fb92 f2f7 	sdiv	r2, r2, r7
 801eb38:	4416      	add	r6, r2
 801eb3a:	429c      	cmp	r4, r3
 801eb3c:	d245      	bcs.n	801ebca <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801eb3e:	9a02      	ldr	r2, [sp, #8]
 801eb40:	2a00      	cmp	r2, #0
 801eb42:	d0da      	beq.n	801eafa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 801eb44:	7830      	ldrb	r0, [r6, #0]
 801eb46:	1c72      	adds	r2, r6, #1
 801eb48:	3403      	adds	r4, #3
 801eb4a:	f000 000f 	and.w	r0, r0, #15
 801eb4e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eb52:	eb05 0c00 	add.w	ip, r5, r0
 801eb56:	5c28      	ldrb	r0, [r5, r0]
 801eb58:	f804 0c03 	strb.w	r0, [r4, #-3]
 801eb5c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801eb60:	f804 0c02 	strb.w	r0, [r4, #-2]
 801eb64:	f89c 0002 	ldrb.w	r0, [ip, #2]
 801eb68:	f108 3cff 	add.w	ip, r8, #4294967295
 801eb6c:	f804 0c01 	strb.w	r0, [r4, #-1]
 801eb70:	f1bc 0f01 	cmp.w	ip, #1
 801eb74:	4620      	mov	r0, r4
 801eb76:	f104 0406 	add.w	r4, r4, #6
 801eb7a:	ddc1      	ble.n	801eb00 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 801eb7c:	7810      	ldrb	r0, [r2, #0]
 801eb7e:	f1ac 0c02 	sub.w	ip, ip, #2
 801eb82:	0900      	lsrs	r0, r0, #4
 801eb84:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eb88:	eb05 0e00 	add.w	lr, r5, r0
 801eb8c:	5c28      	ldrb	r0, [r5, r0]
 801eb8e:	f804 0c06 	strb.w	r0, [r4, #-6]
 801eb92:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801eb96:	f804 0c05 	strb.w	r0, [r4, #-5]
 801eb9a:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801eb9e:	f804 0c04 	strb.w	r0, [r4, #-4]
 801eba2:	f812 0b01 	ldrb.w	r0, [r2], #1
 801eba6:	f000 000f 	and.w	r0, r0, #15
 801ebaa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ebae:	eb05 0e00 	add.w	lr, r5, r0
 801ebb2:	5c28      	ldrb	r0, [r5, r0]
 801ebb4:	f804 0c03 	strb.w	r0, [r4, #-3]
 801ebb8:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801ebbc:	f804 0c02 	strb.w	r0, [r4, #-2]
 801ebc0:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801ebc4:	f804 0c01 	strb.w	r0, [r4, #-1]
 801ebc8:	e7d2      	b.n	801eb70 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801ebca:	4b04      	ldr	r3, [pc, #16]	@ (801ebdc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801ebcc:	6818      	ldr	r0, [r3, #0]
 801ebce:	6803      	ldr	r3, [r0, #0]
 801ebd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ebd2:	4798      	blx	r3
 801ebd4:	b00b      	add	sp, #44	@ 0x2c
 801ebd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebda:	bf00      	nop
 801ebdc:	24025140 	.word	0x24025140
 801ebe0:	2402513a 	.word	0x2402513a

0801ebe4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 801ebe4:	b530      	push	{r4, r5, lr}
 801ebe6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 801ebea:	780d      	ldrb	r5, [r1, #0]
 801ebec:	28ff      	cmp	r0, #255	@ 0xff
 801ebee:	d107      	bne.n	801ec00 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801ebf0:	2bff      	cmp	r3, #255	@ 0xff
 801ebf2:	d105      	bne.n	801ec00 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801ebf4:	7015      	strb	r5, [r2, #0]
 801ebf6:	784b      	ldrb	r3, [r1, #1]
 801ebf8:	7053      	strb	r3, [r2, #1]
 801ebfa:	788b      	ldrb	r3, [r1, #2]
 801ebfc:	7093      	strb	r3, [r2, #2]
 801ebfe:	bd30      	pop	{r4, r5, pc}
 801ec00:	fb10 f003 	smulbb	r0, r0, r3
 801ec04:	b283      	uxth	r3, r0
 801ec06:	1c58      	adds	r0, r3, #1
 801ec08:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ec0c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ec10:	b284      	uxth	r4, r0
 801ec12:	43c0      	mvns	r0, r0
 801ec14:	fb15 f504 	smulbb	r5, r5, r4
 801ec18:	b2c3      	uxtb	r3, r0
 801ec1a:	7810      	ldrb	r0, [r2, #0]
 801ec1c:	fb00 5003 	mla	r0, r0, r3, r5
 801ec20:	b280      	uxth	r0, r0
 801ec22:	1c45      	adds	r5, r0, #1
 801ec24:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801ec28:	7855      	ldrb	r5, [r2, #1]
 801ec2a:	fb15 f503 	smulbb	r5, r5, r3
 801ec2e:	1200      	asrs	r0, r0, #8
 801ec30:	7010      	strb	r0, [r2, #0]
 801ec32:	7848      	ldrb	r0, [r1, #1]
 801ec34:	fb00 5004 	mla	r0, r0, r4, r5
 801ec38:	b280      	uxth	r0, r0
 801ec3a:	1c45      	adds	r5, r0, #1
 801ec3c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801ec40:	1200      	asrs	r0, r0, #8
 801ec42:	7050      	strb	r0, [r2, #1]
 801ec44:	7888      	ldrb	r0, [r1, #2]
 801ec46:	7891      	ldrb	r1, [r2, #2]
 801ec48:	fb11 f303 	smulbb	r3, r1, r3
 801ec4c:	fb00 3304 	mla	r3, r0, r4, r3
 801ec50:	b29b      	uxth	r3, r3
 801ec52:	1c59      	adds	r1, r3, #1
 801ec54:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801ec58:	121b      	asrs	r3, r3, #8
 801ec5a:	e7cf      	b.n	801ebfc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

0801ec5c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801ec5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec60:	461d      	mov	r5, r3
 801ec62:	b08f      	sub	sp, #60	@ 0x3c
 801ec64:	460c      	mov	r4, r1
 801ec66:	4616      	mov	r6, r2
 801ec68:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ec6a:	4680      	mov	r8, r0
 801ec6c:	6869      	ldr	r1, [r5, #4]
 801ec6e:	aa0a      	add	r2, sp, #40	@ 0x28
 801ec70:	6828      	ldr	r0, [r5, #0]
 801ec72:	3604      	adds	r6, #4
 801ec74:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 801ec78:	4f57      	ldr	r7, [pc, #348]	@ (801edd8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 801ec7a:	c203      	stmia	r2!, {r0, r1}
 801ec7c:	6818      	ldr	r0, [r3, #0]
 801ec7e:	aa0c      	add	r2, sp, #48	@ 0x30
 801ec80:	6859      	ldr	r1, [r3, #4]
 801ec82:	c203      	stmia	r2!, {r0, r1}
 801ec84:	a80a      	add	r0, sp, #40	@ 0x28
 801ec86:	f7f3 fd09 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ec8a:	4629      	mov	r1, r5
 801ec8c:	a80c      	add	r0, sp, #48	@ 0x30
 801ec8e:	2502      	movs	r5, #2
 801ec90:	f7f3 fd2c 	bl	80126ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ec94:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801ec98:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 801ec9c:	f002 0301 	and.w	r3, r2, #1
 801eca0:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 801eca4:	9304      	str	r3, [sp, #16]
 801eca6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801ecaa:	f003 0101 	and.w	r1, r3, #1
 801ecae:	9103      	str	r1, [sp, #12]
 801ecb0:	9803      	ldr	r0, [sp, #12]
 801ecb2:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801ecb6:	4403      	add	r3, r0
 801ecb8:	6838      	ldr	r0, [r7, #0]
 801ecba:	fb01 2303 	mla	r3, r1, r3, r2
 801ecbe:	fb93 f3f5 	sdiv	r3, r3, r5
 801ecc2:	18e5      	adds	r5, r4, r3
 801ecc4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801ecc8:	441a      	add	r2, r3
 801ecca:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801ecce:	4419      	add	r1, r3
 801ecd0:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801ecd4:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 801ecd8:	6803      	ldr	r3, [r0, #0]
 801ecda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ecdc:	4798      	blx	r3
 801ecde:	4a3f      	ldr	r2, [pc, #252]	@ (801eddc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 801ece0:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 801ece4:	8813      	ldrh	r3, [r2, #0]
 801ece6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801ecea:	9207      	str	r2, [sp, #28]
 801ecec:	fb03 1404 	mla	r4, r3, r4, r1
 801ecf0:	fb0a f303 	mul.w	r3, sl, r3
 801ecf4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ecf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ecfc:	4404      	add	r4, r0
 801ecfe:	18e3      	adds	r3, r4, r3
 801ed00:	e9cd 3705 	strd	r3, r7, [sp, #20]
 801ed04:	9b05      	ldr	r3, [sp, #20]
 801ed06:	429c      	cmp	r4, r3
 801ed08:	d25d      	bcs.n	801edc6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 801ed0a:	9b04      	ldr	r3, [sp, #16]
 801ed0c:	2b00      	cmp	r3, #0
 801ed0e:	d037      	beq.n	801ed80 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 801ed10:	782b      	ldrb	r3, [r5, #0]
 801ed12:	1c6f      	adds	r7, r5, #1
 801ed14:	f003 030f 	and.w	r3, r3, #15
 801ed18:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ed1c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ed1e:	0e1b      	lsrs	r3, r3, #24
 801ed20:	d006      	beq.n	801ed30 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 801ed22:	9300      	str	r3, [sp, #0]
 801ed24:	4622      	mov	r2, r4
 801ed26:	464b      	mov	r3, r9
 801ed28:	a909      	add	r1, sp, #36	@ 0x24
 801ed2a:	4640      	mov	r0, r8
 801ed2c:	f7ff ff5a 	bl	801ebe4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801ed30:	3403      	adds	r4, #3
 801ed32:	f10b 3aff 	add.w	sl, fp, #4294967295
 801ed36:	f1ba 0f01 	cmp.w	sl, #1
 801ed3a:	dd24      	ble.n	801ed86 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 801ed3c:	783b      	ldrb	r3, [r7, #0]
 801ed3e:	091b      	lsrs	r3, r3, #4
 801ed40:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ed44:	9308      	str	r3, [sp, #32]
 801ed46:	0e1b      	lsrs	r3, r3, #24
 801ed48:	d006      	beq.n	801ed58 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 801ed4a:	9300      	str	r3, [sp, #0]
 801ed4c:	4622      	mov	r2, r4
 801ed4e:	464b      	mov	r3, r9
 801ed50:	a908      	add	r1, sp, #32
 801ed52:	4640      	mov	r0, r8
 801ed54:	f7ff ff46 	bl	801ebe4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801ed58:	f817 3b01 	ldrb.w	r3, [r7], #1
 801ed5c:	f003 030f 	and.w	r3, r3, #15
 801ed60:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ed64:	9309      	str	r3, [sp, #36]	@ 0x24
 801ed66:	0e1b      	lsrs	r3, r3, #24
 801ed68:	d006      	beq.n	801ed78 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 801ed6a:	9300      	str	r3, [sp, #0]
 801ed6c:	1ce2      	adds	r2, r4, #3
 801ed6e:	464b      	mov	r3, r9
 801ed70:	a909      	add	r1, sp, #36	@ 0x24
 801ed72:	4640      	mov	r0, r8
 801ed74:	f7ff ff36 	bl	801ebe4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801ed78:	3406      	adds	r4, #6
 801ed7a:	f1aa 0a02 	sub.w	sl, sl, #2
 801ed7e:	e7da      	b.n	801ed36 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801ed80:	462f      	mov	r7, r5
 801ed82:	46da      	mov	sl, fp
 801ed84:	e7d7      	b.n	801ed36 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801ed86:	d10e      	bne.n	801eda6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 801ed88:	783b      	ldrb	r3, [r7, #0]
 801ed8a:	091b      	lsrs	r3, r3, #4
 801ed8c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ed90:	9309      	str	r3, [sp, #36]	@ 0x24
 801ed92:	0e1b      	lsrs	r3, r3, #24
 801ed94:	d006      	beq.n	801eda4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 801ed96:	9300      	str	r3, [sp, #0]
 801ed98:	4622      	mov	r2, r4
 801ed9a:	464b      	mov	r3, r9
 801ed9c:	a909      	add	r1, sp, #36	@ 0x24
 801ed9e:	4640      	mov	r0, r8
 801eda0:	f7ff ff20 	bl	801ebe4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801eda4:	3403      	adds	r4, #3
 801eda6:	9b07      	ldr	r3, [sp, #28]
 801eda8:	9a03      	ldr	r2, [sp, #12]
 801edaa:	881b      	ldrh	r3, [r3, #0]
 801edac:	eba3 030b 	sub.w	r3, r3, fp
 801edb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801edb4:	441c      	add	r4, r3
 801edb6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801edba:	4413      	add	r3, r2
 801edbc:	2202      	movs	r2, #2
 801edbe:	fb93 f3f2 	sdiv	r3, r3, r2
 801edc2:	441d      	add	r5, r3
 801edc4:	e79e      	b.n	801ed04 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 801edc6:	9b06      	ldr	r3, [sp, #24]
 801edc8:	6818      	ldr	r0, [r3, #0]
 801edca:	6803      	ldr	r3, [r0, #0]
 801edcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801edce:	4798      	blx	r3
 801edd0:	b00f      	add	sp, #60	@ 0x3c
 801edd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edd6:	bf00      	nop
 801edd8:	24025140 	.word	0x24025140
 801eddc:	2402513a 	.word	0x2402513a

0801ede0 <CRC_Lock>:
 801ede0:	4a2d      	ldr	r2, [pc, #180]	@ (801ee98 <CRC_Lock+0xb8>)
 801ede2:	b530      	push	{r4, r5, lr}
 801ede4:	6813      	ldr	r3, [r2, #0]
 801ede6:	f24c 2540 	movw	r5, #49728	@ 0xc240
 801edea:	f023 0301 	bic.w	r3, r3, #1
 801edee:	6013      	str	r3, [r2, #0]
 801edf0:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 801edf4:	4b29      	ldr	r3, [pc, #164]	@ (801ee9c <CRC_Lock+0xbc>)
 801edf6:	681c      	ldr	r4, [r3, #0]
 801edf8:	4014      	ands	r4, r2
 801edfa:	42ac      	cmp	r4, r5
 801edfc:	d005      	beq.n	801ee0a <CRC_Lock+0x2a>
 801edfe:	681c      	ldr	r4, [r3, #0]
 801ee00:	f24c 2570 	movw	r5, #49776	@ 0xc270
 801ee04:	4014      	ands	r4, r2
 801ee06:	42ac      	cmp	r4, r5
 801ee08:	d125      	bne.n	801ee56 <CRC_Lock+0x76>
 801ee0a:	4b25      	ldr	r3, [pc, #148]	@ (801eea0 <CRC_Lock+0xc0>)
 801ee0c:	681b      	ldr	r3, [r3, #0]
 801ee0e:	2b00      	cmp	r3, #0
 801ee10:	d139      	bne.n	801ee86 <CRC_Lock+0xa6>
 801ee12:	4b24      	ldr	r3, [pc, #144]	@ (801eea4 <CRC_Lock+0xc4>)
 801ee14:	681a      	ldr	r2, [r3, #0]
 801ee16:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801ee1a:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 801ee1e:	d00d      	beq.n	801ee3c <CRC_Lock+0x5c>
 801ee20:	681a      	ldr	r2, [r3, #0]
 801ee22:	f240 4483 	movw	r4, #1155	@ 0x483
 801ee26:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801ee2a:	42a2      	cmp	r2, r4
 801ee2c:	d006      	beq.n	801ee3c <CRC_Lock+0x5c>
 801ee2e:	681b      	ldr	r3, [r3, #0]
 801ee30:	f240 4285 	movw	r2, #1157	@ 0x485
 801ee34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ee38:	4293      	cmp	r3, r2
 801ee3a:	d124      	bne.n	801ee86 <CRC_Lock+0xa6>
 801ee3c:	4b1a      	ldr	r3, [pc, #104]	@ (801eea8 <CRC_Lock+0xc8>)
 801ee3e:	2201      	movs	r2, #1
 801ee40:	601a      	str	r2, [r3, #0]
 801ee42:	681a      	ldr	r2, [r3, #0]
 801ee44:	2a00      	cmp	r2, #0
 801ee46:	d1fc      	bne.n	801ee42 <CRC_Lock+0x62>
 801ee48:	4b18      	ldr	r3, [pc, #96]	@ (801eeac <CRC_Lock+0xcc>)
 801ee4a:	6018      	str	r0, [r3, #0]
 801ee4c:	6818      	ldr	r0, [r3, #0]
 801ee4e:	1a43      	subs	r3, r0, r1
 801ee50:	4258      	negs	r0, r3
 801ee52:	4158      	adcs	r0, r3
 801ee54:	e00e      	b.n	801ee74 <CRC_Lock+0x94>
 801ee56:	681b      	ldr	r3, [r3, #0]
 801ee58:	4013      	ands	r3, r2
 801ee5a:	f24d 2220 	movw	r2, #53792	@ 0xd220
 801ee5e:	4293      	cmp	r3, r2
 801ee60:	d111      	bne.n	801ee86 <CRC_Lock+0xa6>
 801ee62:	4b13      	ldr	r3, [pc, #76]	@ (801eeb0 <CRC_Lock+0xd0>)
 801ee64:	f240 4286 	movw	r2, #1158	@ 0x486
 801ee68:	681b      	ldr	r3, [r3, #0]
 801ee6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ee6e:	4293      	cmp	r3, r2
 801ee70:	d001      	beq.n	801ee76 <CRC_Lock+0x96>
 801ee72:	2000      	movs	r0, #0
 801ee74:	bd30      	pop	{r4, r5, pc}
 801ee76:	4b0f      	ldr	r3, [pc, #60]	@ (801eeb4 <CRC_Lock+0xd4>)
 801ee78:	2201      	movs	r2, #1
 801ee7a:	601a      	str	r2, [r3, #0]
 801ee7c:	681a      	ldr	r2, [r3, #0]
 801ee7e:	2a00      	cmp	r2, #0
 801ee80:	d1fc      	bne.n	801ee7c <CRC_Lock+0x9c>
 801ee82:	4b0d      	ldr	r3, [pc, #52]	@ (801eeb8 <CRC_Lock+0xd8>)
 801ee84:	e7e1      	b.n	801ee4a <CRC_Lock+0x6a>
 801ee86:	4b0d      	ldr	r3, [pc, #52]	@ (801eebc <CRC_Lock+0xdc>)
 801ee88:	2201      	movs	r2, #1
 801ee8a:	601a      	str	r2, [r3, #0]
 801ee8c:	681a      	ldr	r2, [r3, #0]
 801ee8e:	2a00      	cmp	r2, #0
 801ee90:	d1fc      	bne.n	801ee8c <CRC_Lock+0xac>
 801ee92:	4b0b      	ldr	r3, [pc, #44]	@ (801eec0 <CRC_Lock+0xe0>)
 801ee94:	e7d9      	b.n	801ee4a <CRC_Lock+0x6a>
 801ee96:	bf00      	nop
 801ee98:	e0002000 	.word	0xe0002000
 801ee9c:	e000ed00 	.word	0xe000ed00
 801eea0:	e0042000 	.word	0xe0042000
 801eea4:	5c001000 	.word	0x5c001000
 801eea8:	58024c08 	.word	0x58024c08
 801eeac:	58024c00 	.word	0x58024c00
 801eeb0:	46008ff0 	.word	0x46008ff0
 801eeb4:	46024c08 	.word	0x46024c08
 801eeb8:	46024c00 	.word	0x46024c00
 801eebc:	40023008 	.word	0x40023008
 801eec0:	40023000 	.word	0x40023000

0801eec4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801eec4:	6101      	str	r1, [r0, #16]
 801eec6:	4770      	bx	lr

0801eec8 <_ZN8touchgfx8Gestures4tickEv>:
 801eec8:	7b83      	ldrb	r3, [r0, #14]
 801eeca:	b14b      	cbz	r3, 801eee0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801eecc:	8903      	ldrh	r3, [r0, #8]
 801eece:	3301      	adds	r3, #1
 801eed0:	b29b      	uxth	r3, r3
 801eed2:	2b07      	cmp	r3, #7
 801eed4:	8103      	strh	r3, [r0, #8]
 801eed6:	bf81      	itttt	hi
 801eed8:	2300      	movhi	r3, #0
 801eeda:	8143      	strhhi	r3, [r0, #10]
 801eedc:	8183      	strhhi	r3, [r0, #12]
 801eede:	7383      	strbhi	r3, [r0, #14]
 801eee0:	4770      	bx	lr
	...

0801eee4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801eee4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801eee8:	4698      	mov	r8, r3
 801eeea:	8883      	ldrh	r3, [r0, #4]
 801eeec:	4604      	mov	r4, r0
 801eeee:	4617      	mov	r7, r2
 801eef0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801eef4:	eba8 0303 	sub.w	r3, r8, r3
 801eef8:	4a19      	ldr	r2, [pc, #100]	@ (801ef60 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801eefa:	460e      	mov	r6, r1
 801eefc:	b21b      	sxth	r3, r3
 801eefe:	88c1      	ldrh	r1, [r0, #6]
 801ef00:	9200      	str	r2, [sp, #0]
 801ef02:	2000      	movs	r0, #0
 801ef04:	2b00      	cmp	r3, #0
 801ef06:	8aa2      	ldrh	r2, [r4, #20]
 801ef08:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 801ef0c:	bfb8      	it	lt
 801ef0e:	425b      	neglt	r3, r3
 801ef10:	f88d 0004 	strb.w	r0, [sp, #4]
 801ef14:	f8ad 1008 	strh.w	r1, [sp, #8]
 801ef18:	b21b      	sxth	r3, r3
 801ef1a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801ef1e:	f8ad 500c 	strh.w	r5, [sp, #12]
 801ef22:	4293      	cmp	r3, r2
 801ef24:	dc07      	bgt.n	801ef36 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801ef26:	1a69      	subs	r1, r5, r1
 801ef28:	b209      	sxth	r1, r1
 801ef2a:	2900      	cmp	r1, #0
 801ef2c:	bfb8      	it	lt
 801ef2e:	4249      	neglt	r1, r1
 801ef30:	b209      	sxth	r1, r1
 801ef32:	428a      	cmp	r2, r1
 801ef34:	da10      	bge.n	801ef58 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801ef36:	6920      	ldr	r0, [r4, #16]
 801ef38:	4669      	mov	r1, sp
 801ef3a:	eba8 0606 	sub.w	r6, r8, r6
 801ef3e:	1bef      	subs	r7, r5, r7
 801ef40:	6803      	ldr	r3, [r0, #0]
 801ef42:	685b      	ldr	r3, [r3, #4]
 801ef44:	4798      	blx	r3
 801ef46:	2300      	movs	r3, #0
 801ef48:	2001      	movs	r0, #1
 801ef4a:	8166      	strh	r6, [r4, #10]
 801ef4c:	8123      	strh	r3, [r4, #8]
 801ef4e:	81a7      	strh	r7, [r4, #12]
 801ef50:	f8a4 8004 	strh.w	r8, [r4, #4]
 801ef54:	80e5      	strh	r5, [r4, #6]
 801ef56:	73a0      	strb	r0, [r4, #14]
 801ef58:	b004      	add	sp, #16
 801ef5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ef5e:	bf00      	nop
 801ef60:	08023f74 	.word	0x08023f74

0801ef64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801ef64:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef66:	461e      	mov	r6, r3
 801ef68:	1e4b      	subs	r3, r1, #1
 801ef6a:	b085      	sub	sp, #20
 801ef6c:	4604      	mov	r4, r0
 801ef6e:	2b01      	cmp	r3, #1
 801ef70:	460d      	mov	r5, r1
 801ef72:	4617      	mov	r7, r2
 801ef74:	d84b      	bhi.n	801f00e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801ef76:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ef7a:	1cd3      	adds	r3, r2, #3
 801ef7c:	b29b      	uxth	r3, r3
 801ef7e:	2b06      	cmp	r3, #6
 801ef80:	d916      	bls.n	801efb0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801ef82:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 801f024 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801ef86:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ef8a:	f8cd c004 	str.w	ip, [sp, #4]
 801ef8e:	f04f 0c00 	mov.w	ip, #0
 801ef92:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ef96:	6900      	ldr	r0, [r0, #16]
 801ef98:	f8ad 100c 	strh.w	r1, [sp, #12]
 801ef9c:	a901      	add	r1, sp, #4
 801ef9e:	f88d c008 	strb.w	ip, [sp, #8]
 801efa2:	f8ad 200a 	strh.w	r2, [sp, #10]
 801efa6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801efaa:	6803      	ldr	r3, [r0, #0]
 801efac:	689b      	ldr	r3, [r3, #8]
 801efae:	4798      	blx	r3
 801efb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801efb4:	1cd3      	adds	r3, r2, #3
 801efb6:	b29b      	uxth	r3, r3
 801efb8:	2b06      	cmp	r3, #6
 801efba:	d916      	bls.n	801efea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801efbc:	f8df c064 	ldr.w	ip, [pc, #100]	@ 801f024 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801efc0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801efc4:	f8cd c004 	str.w	ip, [sp, #4]
 801efc8:	f04f 0c01 	mov.w	ip, #1
 801efcc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801efd0:	6920      	ldr	r0, [r4, #16]
 801efd2:	f8ad 100c 	strh.w	r1, [sp, #12]
 801efd6:	a901      	add	r1, sp, #4
 801efd8:	f88d c008 	strb.w	ip, [sp, #8]
 801efdc:	f8ad 200a 	strh.w	r2, [sp, #10]
 801efe0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801efe4:	6803      	ldr	r3, [r0, #0]
 801efe6:	689b      	ldr	r3, [r3, #8]
 801efe8:	4798      	blx	r3
 801efea:	4b0d      	ldr	r3, [pc, #52]	@ (801f020 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801efec:	a901      	add	r1, sp, #4
 801efee:	6920      	ldr	r0, [r4, #16]
 801eff0:	9301      	str	r3, [sp, #4]
 801eff2:	2300      	movs	r3, #0
 801eff4:	f88d 5008 	strb.w	r5, [sp, #8]
 801eff8:	f8ad 700a 	strh.w	r7, [sp, #10]
 801effc:	f8ad 600c 	strh.w	r6, [sp, #12]
 801f000:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f004:	6803      	ldr	r3, [r0, #0]
 801f006:	681b      	ldr	r3, [r3, #0]
 801f008:	4798      	blx	r3
 801f00a:	b005      	add	sp, #20
 801f00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f00e:	2900      	cmp	r1, #0
 801f010:	d1eb      	bne.n	801efea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801f012:	80a2      	strh	r2, [r4, #4]
 801f014:	80c6      	strh	r6, [r0, #6]
 801f016:	60a1      	str	r1, [r4, #8]
 801f018:	81a1      	strh	r1, [r4, #12]
 801f01a:	73a1      	strb	r1, [r4, #14]
 801f01c:	e7e5      	b.n	801efea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801f01e:	bf00      	nop
 801f020:	08023f60 	.word	0x08023f60
 801f024:	08023f88 	.word	0x08023f88

0801f028 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 801f028:	10c9      	asrs	r1, r1, #3
 801f02a:	2900      	cmp	r1, #0
 801f02c:	bfb8      	it	lt
 801f02e:	4249      	neglt	r1, r1
 801f030:	2801      	cmp	r0, #1
 801f032:	d108      	bne.n	801f046 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 801f034:	f3c1 0008 	ubfx	r0, r1, #0, #9
 801f038:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 801f03c:	4601      	mov	r1, r0
 801f03e:	dd02      	ble.n	801f046 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 801f040:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 801f044:	4770      	bx	lr
 801f046:	29ff      	cmp	r1, #255	@ 0xff
 801f048:	bfa8      	it	ge
 801f04a:	21ff      	movge	r1, #255	@ 0xff
 801f04c:	4608      	mov	r0, r1
 801f04e:	4770      	bx	lr

0801f050 <_ZN8touchgfx10Rasterizer6lineToEii>:
 801f050:	b410      	push	{r4}
 801f052:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801f056:	429c      	cmp	r4, r3
 801f058:	d803      	bhi.n	801f062 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 801f05a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f05e:	f7f1 be57 	b.w	8010d10 <_ZN8touchgfx7Outline6lineToEii>
 801f062:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f066:	4770      	bx	lr

0801f068 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 801f068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f06c:	b08b      	sub	sp, #44	@ 0x2c
 801f06e:	4606      	mov	r6, r0
 801f070:	468a      	mov	sl, r1
 801f072:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801f076:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801f07a:	9308      	str	r3, [sp, #32]
 801f07c:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801f080:	9309      	str	r3, [sp, #36]	@ 0x24
 801f082:	f7f1 ffb0 	bl	8010fe6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 801f086:	68b5      	ldr	r5, [r6, #8]
 801f088:	4604      	mov	r4, r0
 801f08a:	2d00      	cmp	r5, #0
 801f08c:	d044      	beq.n	801f118 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801f08e:	6873      	ldr	r3, [r6, #4]
 801f090:	42ab      	cmp	r3, r5
 801f092:	d33d      	bcc.n	801f110 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 801f094:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801f098:	f04f 0800 	mov.w	r8, #0
 801f09c:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 801f0a0:	eb02 0b03 	add.w	fp, r2, r3
 801f0a4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801f0a8:	fb02 1203 	mla	r2, r2, r3, r1
 801f0ac:	9205      	str	r2, [sp, #20]
 801f0ae:	1e6a      	subs	r2, r5, #1
 801f0b0:	9204      	str	r2, [sp, #16]
 801f0b2:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 801f0b6:	f9b4 7000 	ldrsh.w	r7, [r4]
 801f0ba:	454b      	cmp	r3, r9
 801f0bc:	463a      	mov	r2, r7
 801f0be:	d008      	beq.n	801f0d2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 801f0c0:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 801f0c4:	eb03 0b09 	add.w	fp, r3, r9
 801f0c8:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 801f0cc:	fb03 1309 	mla	r3, r3, r9, r1
 801f0d0:	9305      	str	r3, [sp, #20]
 801f0d2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f0d6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801f0da:	4498      	add	r8, r3
 801f0dc:	9b04      	ldr	r3, [sp, #16]
 801f0de:	3b01      	subs	r3, #1
 801f0e0:	9304      	str	r3, [sp, #16]
 801f0e2:	9b04      	ldr	r3, [sp, #16]
 801f0e4:	3301      	adds	r3, #1
 801f0e6:	d015      	beq.n	801f114 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 801f0e8:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 801f0ec:	42bb      	cmp	r3, r7
 801f0ee:	d117      	bne.n	801f120 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 801f0f0:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801f0f4:	9b04      	ldr	r3, [sp, #16]
 801f0f6:	4548      	cmp	r0, r9
 801f0f8:	f103 33ff 	add.w	r3, r3, #4294967295
 801f0fc:	d17d      	bne.n	801f1fa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 801f0fe:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 801f102:	4401      	add	r1, r0
 801f104:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f108:	4480      	add	r8, r0
 801f10a:	e7e9      	b.n	801f0e0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 801f10c:	461f      	mov	r7, r3
 801f10e:	e042      	b.n	801f196 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 801f110:	2000      	movs	r0, #0
 801f112:	e002      	b.n	801f11a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 801f114:	2900      	cmp	r1, #0
 801f116:	d16d      	bne.n	801f1f4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 801f118:	2001      	movs	r0, #1
 801f11a:	b00b      	add	sp, #44	@ 0x2c
 801f11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f120:	b379      	cbz	r1, 801f182 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 801f122:	2f00      	cmp	r7, #0
 801f124:	db29      	blt.n	801f17a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801f126:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 801f12a:	42bb      	cmp	r3, r7
 801f12c:	dd25      	ble.n	801f17a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801f12e:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 801f132:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 801f136:	f7ff ff77 	bl	801f028 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 801f13a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f13c:	fb10 f003 	smulbb	r0, r0, r3
 801f140:	b280      	uxth	r0, r0
 801f142:	1c41      	adds	r1, r0, #1
 801f144:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f148:	1209      	asrs	r1, r1, #8
 801f14a:	f011 0fff 	tst.w	r1, #255	@ 0xff
 801f14e:	d014      	beq.n	801f17a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801f150:	b2c9      	uxtb	r1, r1
 801f152:	9808      	ldr	r0, [sp, #32]
 801f154:	b2ba      	uxth	r2, r7
 801f156:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 801f158:	9102      	str	r1, [sp, #8]
 801f15a:	2101      	movs	r1, #1
 801f15c:	4413      	add	r3, r2
 801f15e:	4402      	add	r2, r0
 801f160:	9101      	str	r1, [sp, #4]
 801f162:	fa0f f18b 	sxth.w	r1, fp
 801f166:	f8da 0000 	ldr.w	r0, [sl]
 801f16a:	b21b      	sxth	r3, r3
 801f16c:	9100      	str	r1, [sp, #0]
 801f16e:	b212      	sxth	r2, r2
 801f170:	6941      	ldr	r1, [r0, #20]
 801f172:	4650      	mov	r0, sl
 801f174:	460d      	mov	r5, r1
 801f176:	9905      	ldr	r1, [sp, #20]
 801f178:	47a8      	blx	r5
 801f17a:	9b04      	ldr	r3, [sp, #16]
 801f17c:	1c7a      	adds	r2, r7, #1
 801f17e:	3301      	adds	r3, #1
 801f180:	d0ca      	beq.n	801f118 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801f182:	f9b4 7000 	ldrsh.w	r7, [r4]
 801f186:	1abb      	subs	r3, r7, r2
 801f188:	2b00      	cmp	r3, #0
 801f18a:	dd31      	ble.n	801f1f0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f18c:	2a00      	cmp	r2, #0
 801f18e:	dabd      	bge.n	801f10c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 801f190:	2f00      	cmp	r7, #0
 801f192:	dd2d      	ble.n	801f1f0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f194:	2200      	movs	r2, #0
 801f196:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 801f19a:	19d1      	adds	r1, r2, r7
 801f19c:	4299      	cmp	r1, r3
 801f19e:	db02      	blt.n	801f1a6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 801f1a0:	1a9f      	subs	r7, r3, r2
 801f1a2:	2f00      	cmp	r7, #0
 801f1a4:	dd24      	ble.n	801f1f0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f1a6:	ea4f 1188 	mov.w	r1, r8, lsl #6
 801f1aa:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 801f1ae:	f7ff ff3b 	bl	801f028 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 801f1b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f1b4:	fb10 f003 	smulbb	r0, r0, r3
 801f1b8:	b280      	uxth	r0, r0
 801f1ba:	1c41      	adds	r1, r0, #1
 801f1bc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f1c0:	1209      	asrs	r1, r1, #8
 801f1c2:	f011 0fff 	tst.w	r1, #255	@ 0xff
 801f1c6:	d013      	beq.n	801f1f0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f1c8:	b292      	uxth	r2, r2
 801f1ca:	9808      	ldr	r0, [sp, #32]
 801f1cc:	b2c9      	uxtb	r1, r1
 801f1ce:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 801f1d0:	b23f      	sxth	r7, r7
 801f1d2:	4413      	add	r3, r2
 801f1d4:	9102      	str	r1, [sp, #8]
 801f1d6:	4402      	add	r2, r0
 801f1d8:	fa0f f18b 	sxth.w	r1, fp
 801f1dc:	f8da 0000 	ldr.w	r0, [sl]
 801f1e0:	b21b      	sxth	r3, r3
 801f1e2:	9100      	str	r1, [sp, #0]
 801f1e4:	b212      	sxth	r2, r2
 801f1e6:	9701      	str	r7, [sp, #4]
 801f1e8:	9905      	ldr	r1, [sp, #20]
 801f1ea:	6947      	ldr	r7, [r0, #20]
 801f1ec:	4650      	mov	r0, sl
 801f1ee:	47b8      	blx	r7
 801f1f0:	464b      	mov	r3, r9
 801f1f2:	e75e      	b.n	801f0b2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 801f1f4:	2f00      	cmp	r7, #0
 801f1f6:	da96      	bge.n	801f126 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 801f1f8:	e78e      	b.n	801f118 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801f1fa:	2900      	cmp	r1, #0
 801f1fc:	d0f8      	beq.n	801f1f0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f1fe:	e790      	b.n	801f122 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0801f200 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 801f200:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801f204:	461e      	mov	r6, r3
 801f206:	4b36      	ldr	r3, [pc, #216]	@ (801f2e0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 801f208:	2500      	movs	r5, #0
 801f20a:	f100 0814 	add.w	r8, r0, #20
 801f20e:	4604      	mov	r4, r0
 801f210:	4617      	mov	r7, r2
 801f212:	e9c0 3100 	strd	r3, r1, [r0]
 801f216:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801f21a:	8185      	strh	r5, [r0, #12]
 801f21c:	8103      	strh	r3, [r0, #8]
 801f21e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801f222:	81c5      	strh	r5, [r0, #14]
 801f224:	7283      	strb	r3, [r0, #10]
 801f226:	8205      	strh	r5, [r0, #16]
 801f228:	8245      	strh	r5, [r0, #18]
 801f22a:	4640      	mov	r0, r8
 801f22c:	f7f1 f8b6 	bl	801039c <_ZN8touchgfx7OutlineC1Ev>
 801f230:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 801f234:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 801f238:	466b      	mov	r3, sp
 801f23a:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 801f23e:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 801f242:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 801f246:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 801f24a:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 801f24e:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 801f252:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 801f256:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 801f25a:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 801f25e:	6830      	ldr	r0, [r6, #0]
 801f260:	6871      	ldr	r1, [r6, #4]
 801f262:	8872      	ldrh	r2, [r6, #2]
 801f264:	8835      	ldrh	r5, [r6, #0]
 801f266:	c303      	stmia	r3!, {r0, r1}
 801f268:	887b      	ldrh	r3, [r7, #2]
 801f26a:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 801f26e:	4413      	add	r3, r2
 801f270:	883a      	ldrh	r2, [r7, #0]
 801f272:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801f276:	442a      	add	r2, r5
 801f278:	81e3      	strh	r3, [r4, #14]
 801f27a:	8220      	strh	r0, [r4, #16]
 801f27c:	4668      	mov	r0, sp
 801f27e:	81a2      	strh	r2, [r4, #12]
 801f280:	8261      	strh	r1, [r4, #18]
 801f282:	4639      	mov	r1, r7
 801f284:	f7f3 fa32 	bl	80126ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f288:	f104 000c 	add.w	r0, r4, #12
 801f28c:	f7f3 fa06 	bl	801269c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f290:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801f294:	f8bd 2000 	ldrh.w	r2, [sp]
 801f298:	4640      	mov	r0, r8
 801f29a:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 801f29e:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 801f2a2:	f7f1 f85f 	bl	8010364 <_ZN8touchgfx7Outline5resetEv>
 801f2a6:	f9bd 3000 	ldrsh.w	r3, [sp]
 801f2aa:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 801f2ae:	4620      	mov	r0, r4
 801f2b0:	015b      	lsls	r3, r3, #5
 801f2b2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801f2b4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801f2b8:	015b      	lsls	r3, r3, #5
 801f2ba:	6523      	str	r3, [r4, #80]	@ 0x50
 801f2bc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801f2c0:	015b      	lsls	r3, r3, #5
 801f2c2:	6563      	str	r3, [r4, #84]	@ 0x54
 801f2c4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801f2c8:	015b      	lsls	r3, r3, #5
 801f2ca:	65a3      	str	r3, [r4, #88]	@ 0x58
 801f2cc:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 801f2d0:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 801f2d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801f2d8:	b002      	add	sp, #8
 801f2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f2de:	bf00      	nop
 801f2e0:	08024200 	.word	0x08024200

0801f2e4 <_ZN8touchgfx6Canvas5closeEv>:
 801f2e4:	b538      	push	{r3, r4, r5, lr}
 801f2e6:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 801f2ea:	4604      	mov	r4, r0
 801f2ec:	b193      	cbz	r3, 801f314 <_ZN8touchgfx6Canvas5closeEv+0x30>
 801f2ee:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 801f2f2:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 801f2f6:	4213      	tst	r3, r2
 801f2f8:	d10c      	bne.n	801f314 <_ZN8touchgfx6Canvas5closeEv+0x30>
 801f2fa:	f100 0514 	add.w	r5, r0, #20
 801f2fe:	b123      	cbz	r3, 801f30a <_ZN8touchgfx6Canvas5closeEv+0x26>
 801f300:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 801f304:	4628      	mov	r0, r5
 801f306:	f7ff fea3 	bl	801f050 <_ZN8touchgfx10Rasterizer6lineToEii>
 801f30a:	4628      	mov	r0, r5
 801f30c:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 801f310:	f7ff fe9e 	bl	801f050 <_ZN8touchgfx10Rasterizer6lineToEii>
 801f314:	2300      	movs	r3, #0
 801f316:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 801f31a:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 801f31e:	4298      	cmp	r0, r3
 801f320:	bf34      	ite	cc
 801f322:	2000      	movcc	r0, #0
 801f324:	2001      	movcs	r0, #1
 801f326:	bd38      	pop	{r3, r4, r5, pc}

0801f328 <_ZN8touchgfx6Canvas6renderEh>:
 801f328:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801f32c:	7a85      	ldrb	r5, [r0, #10]
 801f32e:	4604      	mov	r4, r0
 801f330:	4369      	muls	r1, r5
 801f332:	1c4d      	adds	r5, r1, #1
 801f334:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801f338:	122d      	asrs	r5, r5, #8
 801f33a:	f000 8098 	beq.w	801f46e <_ZN8touchgfx6Canvas6renderEh+0x146>
 801f33e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 801f342:	2b00      	cmp	r3, #0
 801f344:	f000 8093 	beq.w	801f46e <_ZN8touchgfx6Canvas6renderEh+0x146>
 801f348:	f7ff ffcc 	bl	801f2e4 <_ZN8touchgfx6Canvas5closeEv>
 801f34c:	4607      	mov	r7, r0
 801f34e:	2800      	cmp	r0, #0
 801f350:	d045      	beq.n	801f3de <_ZN8touchgfx6Canvas6renderEh+0xb6>
 801f352:	6860      	ldr	r0, [r4, #4]
 801f354:	4e47      	ldr	r6, [pc, #284]	@ (801f474 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 801f356:	6803      	ldr	r3, [r0, #0]
 801f358:	6837      	ldr	r7, [r6, #0]
 801f35a:	689b      	ldr	r3, [r3, #8]
 801f35c:	4798      	blx	r3
 801f35e:	4601      	mov	r1, r0
 801f360:	4638      	mov	r0, r7
 801f362:	f7ef f961 	bl	800e628 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 801f366:	4607      	mov	r7, r0
 801f368:	f7e4 fbdc 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 801f36c:	6803      	ldr	r3, [r0, #0]
 801f36e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f370:	4798      	blx	r3
 801f372:	4680      	mov	r8, r0
 801f374:	f7e4 fbd6 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 801f378:	6803      	ldr	r3, [r0, #0]
 801f37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f37c:	4798      	blx	r3
 801f37e:	280b      	cmp	r0, #11
 801f380:	d85a      	bhi.n	801f438 <_ZN8touchgfx6Canvas6renderEh+0x110>
 801f382:	e8df f000 	tbb	[pc, r0]
 801f386:	5b50      	.short	0x5b50
 801f388:	3059066b 	.word	0x3059066b
 801f38c:	64646440 	.word	0x64646440
 801f390:	6464      	.short	0x6464
 801f392:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801f396:	2208      	movs	r2, #8
 801f398:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f39c:	fb91 f2f2 	sdiv	r2, r1, r2
 801f3a0:	fb08 2303 	mla	r3, r8, r3, r2
 801f3a4:	441f      	add	r7, r3
 801f3a6:	424b      	negs	r3, r1
 801f3a8:	f001 0107 	and.w	r1, r1, #7
 801f3ac:	f003 0307 	and.w	r3, r3, #7
 801f3b0:	bf58      	it	pl
 801f3b2:	4259      	negpl	r1, r3
 801f3b4:	b2c9      	uxtb	r1, r1
 801f3b6:	b2ed      	uxtb	r5, r5
 801f3b8:	463a      	mov	r2, r7
 801f3ba:	fa0f f388 	sxth.w	r3, r8
 801f3be:	f104 0014 	add.w	r0, r4, #20
 801f3c2:	e9cd 1500 	strd	r1, r5, [sp]
 801f3c6:	6861      	ldr	r1, [r4, #4]
 801f3c8:	f7ff fe4e 	bl	801f068 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 801f3cc:	4607      	mov	r7, r0
 801f3ce:	6860      	ldr	r0, [r4, #4]
 801f3d0:	6803      	ldr	r3, [r0, #0]
 801f3d2:	691b      	ldr	r3, [r3, #16]
 801f3d4:	4798      	blx	r3
 801f3d6:	6830      	ldr	r0, [r6, #0]
 801f3d8:	6803      	ldr	r3, [r0, #0]
 801f3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f3dc:	4798      	blx	r3
 801f3de:	4638      	mov	r0, r7
 801f3e0:	b002      	add	sp, #8
 801f3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f3e6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801f3ea:	2204      	movs	r2, #4
 801f3ec:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f3f0:	fb91 f2f2 	sdiv	r2, r1, r2
 801f3f4:	fb08 2303 	mla	r3, r8, r3, r2
 801f3f8:	441f      	add	r7, r3
 801f3fa:	424b      	negs	r3, r1
 801f3fc:	f001 0103 	and.w	r1, r1, #3
 801f400:	f003 0303 	and.w	r3, r3, #3
 801f404:	e7d4      	b.n	801f3b0 <_ZN8touchgfx6Canvas6renderEh+0x88>
 801f406:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801f40a:	2202      	movs	r2, #2
 801f40c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f410:	2900      	cmp	r1, #0
 801f412:	fb91 f2f2 	sdiv	r2, r1, r2
 801f416:	f001 0101 	and.w	r1, r1, #1
 801f41a:	fb08 2303 	mla	r3, r8, r3, r2
 801f41e:	bfb8      	it	lt
 801f420:	4249      	neglt	r1, r1
 801f422:	441f      	add	r7, r3
 801f424:	e7c6      	b.n	801f3b4 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 801f426:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f42a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f42e:	fb08 f303 	mul.w	r3, r8, r3
 801f432:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801f436:	441f      	add	r7, r3
 801f438:	2100      	movs	r1, #0
 801f43a:	e7bc      	b.n	801f3b6 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 801f43c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f440:	2103      	movs	r1, #3
 801f442:	fb08 f203 	mul.w	r2, r8, r3
 801f446:	89a3      	ldrh	r3, [r4, #12]
 801f448:	fb13 2301 	smlabb	r3, r3, r1, r2
 801f44c:	e7f3      	b.n	801f436 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801f44e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f452:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f456:	fb08 2303 	mla	r3, r8, r3, r2
 801f45a:	e7ec      	b.n	801f436 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801f45c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f464:	fb08 f303 	mul.w	r3, r8, r3
 801f468:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801f46c:	e7e3      	b.n	801f436 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801f46e:	2701      	movs	r7, #1
 801f470:	e7b5      	b.n	801f3de <_ZN8touchgfx6Canvas6renderEh+0xb6>
 801f472:	bf00      	nop
 801f474:	24025140 	.word	0x24025140

0801f478 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 801f478:	4b06      	ldr	r3, [pc, #24]	@ (801f494 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 801f47a:	b510      	push	{r4, lr}
 801f47c:	781b      	ldrb	r3, [r3, #0]
 801f47e:	2b01      	cmp	r3, #1
 801f480:	d107      	bne.n	801f492 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 801f482:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801f486:	680b      	ldr	r3, [r1, #0]
 801f488:	6814      	ldr	r4, [r2, #0]
 801f48a:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 801f48e:	6013      	str	r3, [r2, #0]
 801f490:	600c      	str	r4, [r1, #0]
 801f492:	bd10      	pop	{r4, pc}
 801f494:	24025138 	.word	0x24025138

0801f498 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 801f498:	b513      	push	{r0, r1, r4, lr}
 801f49a:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 801f49e:	4604      	mov	r4, r0
 801f4a0:	e9cd 2100 	strd	r2, r1, [sp]
 801f4a4:	b9a3      	cbnz	r3, 801f4d0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 801f4a6:	466a      	mov	r2, sp
 801f4a8:	a901      	add	r1, sp, #4
 801f4aa:	4620      	mov	r0, r4
 801f4ac:	f7ff ffe4 	bl	801f478 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801f4b0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801f4b2:	9901      	ldr	r1, [sp, #4]
 801f4b4:	9a00      	ldr	r2, [sp, #0]
 801f4b6:	1ac9      	subs	r1, r1, r3
 801f4b8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801f4ba:	1ad2      	subs	r2, r2, r3
 801f4bc:	9101      	str	r1, [sp, #4]
 801f4be:	2a00      	cmp	r2, #0
 801f4c0:	9200      	str	r2, [sp, #0]
 801f4c2:	da0b      	bge.n	801f4dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 801f4c4:	2301      	movs	r3, #1
 801f4c6:	2900      	cmp	r1, #0
 801f4c8:	da0e      	bge.n	801f4e8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 801f4ca:	f043 0304 	orr.w	r3, r3, #4
 801f4ce:	e013      	b.n	801f4f8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 801f4d0:	f7ff ff08 	bl	801f2e4 <_ZN8touchgfx6Canvas5closeEv>
 801f4d4:	2800      	cmp	r0, #0
 801f4d6:	d1e6      	bne.n	801f4a6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 801f4d8:	b002      	add	sp, #8
 801f4da:	bd10      	pop	{r4, pc}
 801f4dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801f4de:	429a      	cmp	r2, r3
 801f4e0:	bfac      	ite	ge
 801f4e2:	2302      	movge	r3, #2
 801f4e4:	2300      	movlt	r3, #0
 801f4e6:	e7ee      	b.n	801f4c6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 801f4e8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 801f4ea:	4281      	cmp	r1, r0
 801f4ec:	bfac      	ite	ge
 801f4ee:	2008      	movge	r0, #8
 801f4f0:	2000      	movlt	r0, #0
 801f4f2:	4318      	orrs	r0, r3
 801f4f4:	b2c3      	uxtb	r3, r0
 801f4f6:	b158      	cbz	r0, 801f510 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 801f4f8:	2200      	movs	r2, #0
 801f4fa:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 801f4fe:	9901      	ldr	r1, [sp, #4]
 801f500:	9a00      	ldr	r2, [sp, #0]
 801f502:	66e1      	str	r1, [r4, #108]	@ 0x6c
 801f504:	6722      	str	r2, [r4, #112]	@ 0x70
 801f506:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 801f50a:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 801f50e:	e7e3      	b.n	801f4d8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 801f510:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 801f514:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 801f518:	4298      	cmp	r0, r3
 801f51a:	d803      	bhi.n	801f524 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 801f51c:	f104 0014 	add.w	r0, r4, #20
 801f520:	f7f1 fc10 	bl	8010d44 <_ZN8touchgfx7Outline6moveToEii>
 801f524:	2301      	movs	r3, #1
 801f526:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 801f52a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 801f52e:	2300      	movs	r3, #0
 801f530:	e7e5      	b.n	801f4fe <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0801f532 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 801f532:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f534:	ab02      	add	r3, sp, #8
 801f536:	4604      	mov	r4, r0
 801f538:	9101      	str	r1, [sp, #4]
 801f53a:	a901      	add	r1, sp, #4
 801f53c:	f843 2d08 	str.w	r2, [r3, #-8]!
 801f540:	461a      	mov	r2, r3
 801f542:	f7ff ff99 	bl	801f478 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801f546:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801f548:	9901      	ldr	r1, [sp, #4]
 801f54a:	9a00      	ldr	r2, [sp, #0]
 801f54c:	1ac9      	subs	r1, r1, r3
 801f54e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801f550:	1ad2      	subs	r2, r2, r3
 801f552:	9101      	str	r1, [sp, #4]
 801f554:	2a00      	cmp	r2, #0
 801f556:	9200      	str	r2, [sp, #0]
 801f558:	db1c      	blt.n	801f594 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 801f55a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801f55c:	429a      	cmp	r2, r3
 801f55e:	bfac      	ite	ge
 801f560:	2002      	movge	r0, #2
 801f562:	2000      	movlt	r0, #0
 801f564:	2900      	cmp	r1, #0
 801f566:	db17      	blt.n	801f598 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 801f568:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801f56a:	4299      	cmp	r1, r3
 801f56c:	bfac      	ite	ge
 801f56e:	2308      	movge	r3, #8
 801f570:	2300      	movlt	r3, #0
 801f572:	4303      	orrs	r3, r0
 801f574:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 801f578:	b2dd      	uxtb	r5, r3
 801f57a:	b978      	cbnz	r0, 801f59c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 801f57c:	f104 0014 	add.w	r0, r4, #20
 801f580:	f7ff fd66 	bl	801f050 <_ZN8touchgfx10Rasterizer6lineToEii>
 801f584:	9b01      	ldr	r3, [sp, #4]
 801f586:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 801f58a:	6623      	str	r3, [r4, #96]	@ 0x60
 801f58c:	9b00      	ldr	r3, [sp, #0]
 801f58e:	6663      	str	r3, [r4, #100]	@ 0x64
 801f590:	b002      	add	sp, #8
 801f592:	bd70      	pop	{r4, r5, r6, pc}
 801f594:	2001      	movs	r0, #1
 801f596:	e7e5      	b.n	801f564 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 801f598:	2304      	movs	r3, #4
 801f59a:	e7ea      	b.n	801f572 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 801f59c:	b113      	cbz	r3, 801f5a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 801f59e:	ea10 0305 	ands.w	r3, r0, r5
 801f5a2:	d11c      	bne.n	801f5de <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 801f5a4:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 801f5a8:	f104 0614 	add.w	r6, r4, #20
 801f5ac:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 801f5b0:	b98b      	cbnz	r3, 801f5d6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 801f5b2:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 801f5b6:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 801f5ba:	4298      	cmp	r0, r3
 801f5bc:	d802      	bhi.n	801f5c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 801f5be:	4630      	mov	r0, r6
 801f5c0:	f7f1 fbc0 	bl	8010d44 <_ZN8touchgfx7Outline6moveToEii>
 801f5c4:	2301      	movs	r3, #1
 801f5c6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 801f5ca:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 801f5ce:	4630      	mov	r0, r6
 801f5d0:	e9dd 2100 	ldrd	r2, r1, [sp]
 801f5d4:	e7d4      	b.n	801f580 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 801f5d6:	4630      	mov	r0, r6
 801f5d8:	f7ff fd3a 	bl	801f050 <_ZN8touchgfx10Rasterizer6lineToEii>
 801f5dc:	e7f7      	b.n	801f5ce <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 801f5de:	461d      	mov	r5, r3
 801f5e0:	e7d0      	b.n	801f584 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0801f5e4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 801f5e4:	b538      	push	{r3, r4, r5, lr}
 801f5e6:	ed2d 8b10 	vpush	{d8-d15}
 801f5ea:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 801f5ee:	4605      	mov	r5, r0
 801f5f0:	eeb0 ca40 	vmov.f32	s24, s0
 801f5f4:	460c      	mov	r4, r1
 801f5f6:	eef0 ca60 	vmov.f32	s25, s1
 801f5fa:	ed9f ba57 	vldr	s22, [pc, #348]	@ 801f758 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 801f5fe:	eeb0 da41 	vmov.f32	s26, s2
 801f602:	eef0 da61 	vmov.f32	s27, s3
 801f606:	eeb0 ea42 	vmov.f32	s28, s4
 801f60a:	eef0 ea62 	vmov.f32	s29, s5
 801f60e:	eef0 aa6b 	vmov.f32	s21, s23
 801f612:	2c08      	cmp	r4, #8
 801f614:	d86e      	bhi.n	801f6f4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 801f616:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 801f61a:	ee7d 7aee 	vsub.f32	s15, s27, s29
 801f61e:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 801f622:	ee3e 7aec 	vsub.f32	s14, s29, s25
 801f626:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 801f62a:	ee3c fa0d 	vadd.f32	s30, s24, s26
 801f62e:	ee7c faad 	vadd.f32	s31, s25, s27
 801f632:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f636:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 801f63a:	ee3d aaae 	vadd.f32	s20, s27, s29
 801f63e:	ee2f fa2b 	vmul.f32	s30, s30, s23
 801f642:	ee6f faab 	vmul.f32	s31, s31, s23
 801f646:	ee69 9aab 	vmul.f32	s19, s19, s23
 801f64a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f64e:	ee2a aa2b 	vmul.f32	s20, s20, s23
 801f652:	ee7f 8a29 	vadd.f32	s17, s30, s19
 801f656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f65a:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 801f65e:	ee68 8aab 	vmul.f32	s17, s17, s23
 801f662:	bf48      	it	mi
 801f664:	eef1 7a67 	vnegmi.f32	s15, s15
 801f668:	ee29 9a2b 	vmul.f32	s18, s18, s23
 801f66c:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 801f670:	eef4 7acb 	vcmpe.f32	s15, s22
 801f674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f678:	dd3f      	ble.n	801f6fa <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 801f67a:	ee27 7a07 	vmul.f32	s14, s14, s14
 801f67e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f682:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801f686:	ee27 7a06 	vmul.f32	s14, s14, s12
 801f68a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f692:	d847      	bhi.n	801f724 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 801f694:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 801f698:	ee3e 0aed 	vsub.f32	s0, s29, s27
 801f69c:	f000 fa78 	bl	801fb90 <atan2f>
 801f6a0:	eeb0 8a40 	vmov.f32	s16, s0
 801f6a4:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 801f6a8:	ee3d 0aec 	vsub.f32	s0, s27, s25
 801f6ac:	f000 fa70 	bl	801fb90 <atan2f>
 801f6b0:	ee38 0a40 	vsub.f32	s0, s16, s0
 801f6b4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 801f75c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 801f6b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6c0:	bf48      	it	mi
 801f6c2:	eeb1 0a40 	vnegmi.f32	s0, s0
 801f6c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6ce:	bfa4      	itt	ge
 801f6d0:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 801f760 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 801f6d4:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 801f6d8:	eddf 7a22 	vldr	s15, [pc, #136]	@ 801f764 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 801f6dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6e4:	d51e      	bpl.n	801f724 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 801f6e6:	eef0 0a49 	vmov.f32	s1, s18
 801f6ea:	4628      	mov	r0, r5
 801f6ec:	eeb0 0a68 	vmov.f32	s0, s17
 801f6f0:	f7ef fe1a 	bl	800f328 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801f6f4:	ecbd 8b10 	vpop	{d8-d15}
 801f6f8:	bd38      	pop	{r3, r4, r5, pc}
 801f6fa:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 801f6fe:	eeb0 7a68 	vmov.f32	s14, s17
 801f702:	eef0 6a49 	vmov.f32	s13, s18
 801f706:	eea7 7aea 	vfms.f32	s14, s15, s21
 801f70a:	ee7c 7aae 	vadd.f32	s15, s25, s29
 801f70e:	eee7 6aea 	vfms.f32	s13, s15, s21
 801f712:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801f716:	eee7 7a07 	vfma.f32	s15, s14, s14
 801f71a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801f71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f722:	d9e0      	bls.n	801f6e6 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 801f724:	3401      	adds	r4, #1
 801f726:	eef0 0a6c 	vmov.f32	s1, s25
 801f72a:	eeb0 0a4c 	vmov.f32	s0, s24
 801f72e:	4628      	mov	r0, r5
 801f730:	4621      	mov	r1, r4
 801f732:	eef0 2a49 	vmov.f32	s5, s18
 801f736:	eeb0 2a68 	vmov.f32	s4, s17
 801f73a:	eef0 1a6f 	vmov.f32	s3, s31
 801f73e:	eeb0 1a4f 	vmov.f32	s2, s30
 801f742:	f7ff ff4f 	bl	801f5e4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 801f746:	eef0 da4a 	vmov.f32	s27, s20
 801f74a:	eeb0 da69 	vmov.f32	s26, s19
 801f74e:	eef0 ca49 	vmov.f32	s25, s18
 801f752:	eeb0 ca68 	vmov.f32	s24, s17
 801f756:	e75c      	b.n	801f612 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 801f758:	2edbe6ff 	.word	0x2edbe6ff
 801f75c:	40490fdb 	.word	0x40490fdb
 801f760:	40c90fdb 	.word	0x40c90fdb
 801f764:	3dcccccd 	.word	0x3dcccccd

0801f768 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 801f768:	b530      	push	{r4, r5, lr}
 801f76a:	ed2d 8b10 	vpush	{d8-d15}
 801f76e:	eef0 8a40 	vmov.f32	s17, s0
 801f772:	b085      	sub	sp, #20
 801f774:	eef0 9a60 	vmov.f32	s19, s1
 801f778:	4604      	mov	r4, r0
 801f77a:	eef0 fa41 	vmov.f32	s31, s2
 801f77e:	460d      	mov	r5, r1
 801f780:	eeb0 fa61 	vmov.f32	s30, s3
 801f784:	eef0 ba42 	vmov.f32	s23, s4
 801f788:	eeb0 ca62 	vmov.f32	s24, s5
 801f78c:	eef0 aa43 	vmov.f32	s21, s6
 801f790:	eeb0 ba63 	vmov.f32	s22, s7
 801f794:	2d08      	cmp	r5, #8
 801f796:	f200 8113 	bhi.w	801f9c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 801f79a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801f79e:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 801f7a2:	ee7f 6aab 	vadd.f32	s13, s31, s23
 801f7a6:	ee38 daaf 	vadd.f32	s26, s17, s31
 801f7aa:	ee26 6a27 	vmul.f32	s12, s12, s15
 801f7ae:	ee7c ca0b 	vadd.f32	s25, s24, s22
 801f7b2:	ee2d da27 	vmul.f32	s26, s26, s15
 801f7b6:	ed8d 6a01 	vstr	s12, [sp, #4]
 801f7ba:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801f7be:	ee6c caa7 	vmul.f32	s25, s25, s15
 801f7c2:	eeb0 ea4d 	vmov.f32	s28, s26
 801f7c6:	ee79 da8f 	vadd.f32	s27, s19, s30
 801f7ca:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 801f7ce:	eea6 eaa7 	vfma.f32	s28, s13, s15
 801f7d2:	ee66 6a27 	vmul.f32	s13, s12, s15
 801f7d6:	ee6d daa7 	vmul.f32	s27, s27, s15
 801f7da:	edcd 6a03 	vstr	s13, [sp, #12]
 801f7de:	eef0 6a6c 	vmov.f32	s13, s25
 801f7e2:	eef0 ea6d 	vmov.f32	s29, s27
 801f7e6:	ee2e ea27 	vmul.f32	s28, s28, s15
 801f7ea:	eee7 6a27 	vfma.f32	s13, s14, s15
 801f7ee:	eee7 ea27 	vfma.f32	s29, s14, s15
 801f7f2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801f7f6:	ee6e eaa7 	vmul.f32	s29, s29, s15
 801f7fa:	eef0 6a67 	vmov.f32	s13, s15
 801f7fe:	ed8d 7a02 	vstr	s14, [sp, #8]
 801f802:	ed9d 7a03 	vldr	s14, [sp, #12]
 801f806:	ee3e 9a07 	vadd.f32	s18, s28, s14
 801f80a:	ed9d 7a02 	vldr	s14, [sp, #8]
 801f80e:	ee3e aa87 	vadd.f32	s20, s29, s14
 801f812:	ee29 9a27 	vmul.f32	s18, s18, s15
 801f816:	ee2a aa27 	vmul.f32	s20, s20, s15
 801f81a:	2d00      	cmp	r5, #0
 801f81c:	f000 810b 	beq.w	801fa36 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801f820:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 801f824:	eddf 4a95 	vldr	s9, [pc, #596]	@ 801fa7c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 801f828:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 801f82c:	ee7b 7a69 	vsub.f32	s15, s22, s19
 801f830:	ee3f 6aea 	vsub.f32	s12, s31, s21
 801f834:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801f838:	ee3b 5aea 	vsub.f32	s10, s23, s21
 801f83c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f840:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 801f844:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 801f848:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801f84c:	eea5 6a27 	vfma.f32	s12, s10, s15
 801f850:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 801f854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f858:	bf48      	it	mi
 801f85a:	eeb1 7a47 	vnegmi.f32	s14, s14
 801f85e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801f862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f866:	eeb4 7ae4 	vcmpe.f32	s14, s9
 801f86a:	bf48      	it	mi
 801f86c:	eeb1 6a46 	vnegmi.f32	s12, s12
 801f870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f874:	f340 80a8 	ble.w	801f9c8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 801f878:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801f87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f880:	dd5a      	ble.n	801f938 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 801f882:	ee65 5aa5 	vmul.f32	s11, s11, s11
 801f886:	ee37 7a06 	vadd.f32	s14, s14, s12
 801f88a:	eee7 5aa7 	vfma.f32	s11, s15, s15
 801f88e:	ee27 7a07 	vmul.f32	s14, s14, s14
 801f892:	ee65 7a85 	vmul.f32	s15, s11, s10
 801f896:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f89e:	f200 80ca 	bhi.w	801fa36 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801f8a2:	ee7b 0aef 	vsub.f32	s1, s23, s31
 801f8a6:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 801f8aa:	f000 f971 	bl	801fb90 <atan2f>
 801f8ae:	eeb0 8a40 	vmov.f32	s16, s0
 801f8b2:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 801f8b6:	ee3f 0a69 	vsub.f32	s0, s30, s19
 801f8ba:	f000 f969 	bl	801fb90 <atan2f>
 801f8be:	ee38 fa40 	vsub.f32	s30, s16, s0
 801f8c2:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 801f8c6:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 801f8ca:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 801f8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8d2:	bf48      	it	mi
 801f8d4:	eeb1 fa4f 	vnegmi.f32	s30, s30
 801f8d8:	f000 f95a 	bl	801fb90 <atan2f>
 801f8dc:	ee30 0a48 	vsub.f32	s0, s0, s16
 801f8e0:	eddf 7a67 	vldr	s15, [pc, #412]	@ 801fa80 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 801f8e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8ec:	eeb4 fae7 	vcmpe.f32	s30, s15
 801f8f0:	eddf 7a63 	vldr	s15, [pc, #396]	@ 801fa80 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 801f8f4:	bf48      	it	mi
 801f8f6:	eeb1 0a40 	vnegmi.f32	s0, s0
 801f8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f902:	eddf 7a60 	vldr	s15, [pc, #384]	@ 801fa84 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 801f906:	bfa4      	itt	ge
 801f908:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 801fa88 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 801f90c:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 801f910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f914:	bfa4      	itt	ge
 801f916:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 801fa88 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 801f91a:	ee37 0a40 	vsubge.f32	s0, s14, s0
 801f91e:	ee3f 0a00 	vadd.f32	s0, s30, s0
 801f922:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f92a:	f140 8084 	bpl.w	801fa36 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801f92e:	eef0 0a4a 	vmov.f32	s1, s20
 801f932:	eeb0 0a49 	vmov.f32	s0, s18
 801f936:	e040      	b.n	801f9ba <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 801f938:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f93c:	ee27 7a07 	vmul.f32	s14, s14, s14
 801f940:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801f944:	ee67 7a85 	vmul.f32	s15, s15, s10
 801f948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f950:	d871      	bhi.n	801fa36 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801f952:	ee7b 0aef 	vsub.f32	s1, s23, s31
 801f956:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 801f95a:	f000 f919 	bl	801fb90 <atan2f>
 801f95e:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 801f962:	eeb0 8a40 	vmov.f32	s16, s0
 801f966:	ee3f 0a69 	vsub.f32	s0, s30, s19
 801f96a:	f000 f911 	bl	801fb90 <atan2f>
 801f96e:	ee38 0a40 	vsub.f32	s0, s16, s0
 801f972:	eddf 7a43 	vldr	s15, [pc, #268]	@ 801fa80 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 801f976:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f97e:	bf48      	it	mi
 801f980:	eeb1 0a40 	vnegmi.f32	s0, s0
 801f984:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f98c:	bfa4      	itt	ge
 801f98e:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 801fa88 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 801f992:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 801f996:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801fa84 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 801f99a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f9a2:	d548      	bpl.n	801fa36 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801f9a4:	eef0 0a4f 	vmov.f32	s1, s30
 801f9a8:	4620      	mov	r0, r4
 801f9aa:	eeb0 0a6f 	vmov.f32	s0, s31
 801f9ae:	f7ef fcbb 	bl	800f328 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801f9b2:	eef0 0a4c 	vmov.f32	s1, s24
 801f9b6:	eeb0 0a6b 	vmov.f32	s0, s23
 801f9ba:	4620      	mov	r0, r4
 801f9bc:	f7ef fcb4 	bl	800f328 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801f9c0:	b005      	add	sp, #20
 801f9c2:	ecbd 8b10 	vpop	{d8-d15}
 801f9c6:	bd30      	pop	{r4, r5, pc}
 801f9c8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 801fa7c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 801f9cc:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801f9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f9d4:	dd19      	ble.n	801fa0a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 801f9d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f9da:	ee26 7a06 	vmul.f32	s14, s12, s12
 801f9de:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801f9e2:	ee67 7a85 	vmul.f32	s15, s15, s10
 801f9e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f9ee:	d822      	bhi.n	801fa36 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801f9f0:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 801f9f4:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 801f9f8:	f000 f8ca 	bl	801fb90 <atan2f>
 801f9fc:	ee7b 0aef 	vsub.f32	s1, s23, s31
 801fa00:	eeb0 8a40 	vmov.f32	s16, s0
 801fa04:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 801fa08:	e7af      	b.n	801f96a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 801fa0a:	ee78 7aaa 	vadd.f32	s15, s17, s21
 801fa0e:	eeb0 7a49 	vmov.f32	s14, s18
 801fa12:	eeb0 6a4a 	vmov.f32	s12, s20
 801fa16:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801fa1a:	ee79 7a8b 	vadd.f32	s15, s19, s22
 801fa1e:	eea7 6ae6 	vfms.f32	s12, s15, s13
 801fa22:	ee66 7a06 	vmul.f32	s15, s12, s12
 801fa26:	eee7 7a07 	vfma.f32	s15, s14, s14
 801fa2a:	eef4 7ac5 	vcmpe.f32	s15, s10
 801fa2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fa32:	f67f af7c 	bls.w	801f92e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 801fa36:	3501      	adds	r5, #1
 801fa38:	eef0 0a69 	vmov.f32	s1, s19
 801fa3c:	eeb0 0a68 	vmov.f32	s0, s17
 801fa40:	4620      	mov	r0, r4
 801fa42:	4629      	mov	r1, r5
 801fa44:	eef0 3a4a 	vmov.f32	s7, s20
 801fa48:	eeb0 3a49 	vmov.f32	s6, s18
 801fa4c:	eef0 2a6e 	vmov.f32	s5, s29
 801fa50:	eeb0 2a4e 	vmov.f32	s4, s28
 801fa54:	eef0 1a6d 	vmov.f32	s3, s27
 801fa58:	eeb0 1a4d 	vmov.f32	s2, s26
 801fa5c:	f7ff fe84 	bl	801f768 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 801fa60:	eeb0 ca6c 	vmov.f32	s24, s25
 801fa64:	eddd ba01 	vldr	s23, [sp, #4]
 801fa68:	eef0 9a4a 	vmov.f32	s19, s20
 801fa6c:	ed9d fa02 	vldr	s30, [sp, #8]
 801fa70:	eef0 8a49 	vmov.f32	s17, s18
 801fa74:	eddd fa03 	vldr	s31, [sp, #12]
 801fa78:	e68c      	b.n	801f794 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 801fa7a:	bf00      	nop
 801fa7c:	2edbe6ff 	.word	0x2edbe6ff
 801fa80:	40490fdb 	.word	0x40490fdb
 801fa84:	3dcccccd 	.word	0x3dcccccd
 801fa88:	40c90fdb 	.word	0x40c90fdb

0801fa8c <_ZN8touchgfx6CanvasD1Ev>:
 801fa8c:	4b04      	ldr	r3, [pc, #16]	@ (801faa0 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 801fa8e:	b510      	push	{r4, lr}
 801fa90:	4604      	mov	r4, r0
 801fa92:	f840 3b14 	str.w	r3, [r0], #20
 801fa96:	f7f0 fc5d 	bl	8010354 <_ZN8touchgfx7OutlineD1Ev>
 801fa9a:	4620      	mov	r0, r4
 801fa9c:	bd10      	pop	{r4, pc}
 801fa9e:	bf00      	nop
 801faa0:	08024200 	.word	0x08024200

0801faa4 <_ZN8touchgfx6CanvasD0Ev>:
 801faa4:	b510      	push	{r4, lr}
 801faa6:	4604      	mov	r4, r0
 801faa8:	f7ff fff0 	bl	801fa8c <_ZN8touchgfx6CanvasD1Ev>
 801faac:	2174      	movs	r1, #116	@ 0x74
 801faae:	4620      	mov	r0, r4
 801fab0:	f000 f826 	bl	801fb00 <_ZdlPvj>
 801fab4:	4620      	mov	r0, r4
 801fab6:	bd10      	pop	{r4, pc}

0801fab8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801fab8:	790b      	ldrb	r3, [r1, #4]
 801faba:	2b00      	cmp	r3, #0
 801fabc:	bf0c      	ite	eq
 801fabe:	2301      	moveq	r3, #1
 801fac0:	2300      	movne	r3, #0
 801fac2:	b570      	push	{r4, r5, r6, lr}
 801fac4:	4604      	mov	r4, r0
 801fac6:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801faca:	460e      	mov	r6, r1
 801facc:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 801fad0:	d109      	bne.n	801fae6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801fad2:	b14d      	cbz	r5, 801fae8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801fad4:	7933      	ldrb	r3, [r6, #4]
 801fad6:	2b01      	cmp	r3, #1
 801fad8:	d10c      	bne.n	801faf4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801fada:	6823      	ldr	r3, [r4, #0]
 801fadc:	4620      	mov	r0, r4
 801fade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801fae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fae4:	4718      	bx	r3
 801fae6:	b12d      	cbz	r5, 801faf4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801fae8:	6823      	ldr	r3, [r4, #0]
 801faea:	4620      	mov	r0, r4
 801faec:	695b      	ldr	r3, [r3, #20]
 801faee:	4798      	blx	r3
 801faf0:	2d00      	cmp	r5, #0
 801faf2:	d1ef      	bne.n	801fad4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801faf4:	bd70      	pop	{r4, r5, r6, pc}

0801faf6 <__aeabi_atexit>:
 801faf6:	460b      	mov	r3, r1
 801faf8:	4601      	mov	r1, r0
 801fafa:	4618      	mov	r0, r3
 801fafc:	f000 bcb8 	b.w	8020470 <__cxa_atexit>

0801fb00 <_ZdlPvj>:
 801fb00:	f000 b829 	b.w	801fb56 <_ZdlPv>

0801fb04 <__cxa_guard_acquire>:
 801fb04:	6802      	ldr	r2, [r0, #0]
 801fb06:	07d2      	lsls	r2, r2, #31
 801fb08:	4603      	mov	r3, r0
 801fb0a:	d405      	bmi.n	801fb18 <__cxa_guard_acquire+0x14>
 801fb0c:	7842      	ldrb	r2, [r0, #1]
 801fb0e:	b102      	cbz	r2, 801fb12 <__cxa_guard_acquire+0xe>
 801fb10:	deff      	udf	#255	@ 0xff
 801fb12:	2001      	movs	r0, #1
 801fb14:	7058      	strb	r0, [r3, #1]
 801fb16:	4770      	bx	lr
 801fb18:	2000      	movs	r0, #0
 801fb1a:	4770      	bx	lr

0801fb1c <__cxa_guard_release>:
 801fb1c:	2301      	movs	r3, #1
 801fb1e:	6003      	str	r3, [r0, #0]
 801fb20:	4770      	bx	lr

0801fb22 <_Znwj>:
 801fb22:	2801      	cmp	r0, #1
 801fb24:	bf38      	it	cc
 801fb26:	2001      	movcc	r0, #1
 801fb28:	b510      	push	{r4, lr}
 801fb2a:	4604      	mov	r4, r0
 801fb2c:	4620      	mov	r0, r4
 801fb2e:	f000 fba3 	bl	8020278 <malloc>
 801fb32:	b100      	cbz	r0, 801fb36 <_Znwj+0x14>
 801fb34:	bd10      	pop	{r4, pc}
 801fb36:	f000 f823 	bl	801fb80 <_ZSt15get_new_handlerv>
 801fb3a:	b908      	cbnz	r0, 801fb40 <_Znwj+0x1e>
 801fb3c:	f000 fb71 	bl	8020222 <abort>
 801fb40:	4780      	blx	r0
 801fb42:	e7f3      	b.n	801fb2c <_Znwj+0xa>

0801fb44 <__cxa_pure_virtual>:
 801fb44:	b508      	push	{r3, lr}
 801fb46:	f000 f815 	bl	801fb74 <_ZSt9terminatev>

0801fb4a <_ZSt17__throw_bad_allocv>:
 801fb4a:	b508      	push	{r3, lr}
 801fb4c:	f000 fb69 	bl	8020222 <abort>

0801fb50 <_ZSt20__throw_length_errorPKc>:
 801fb50:	b508      	push	{r3, lr}
 801fb52:	f000 fb66 	bl	8020222 <abort>

0801fb56 <_ZdlPv>:
 801fb56:	f000 bb97 	b.w	8020288 <free>

0801fb5a <_ZN10__cxxabiv111__terminateEPFvvE>:
 801fb5a:	b508      	push	{r3, lr}
 801fb5c:	4780      	blx	r0
 801fb5e:	f000 fb60 	bl	8020222 <abort>
	...

0801fb64 <_ZSt13get_terminatev>:
 801fb64:	4b02      	ldr	r3, [pc, #8]	@ (801fb70 <_ZSt13get_terminatev+0xc>)
 801fb66:	6818      	ldr	r0, [r3, #0]
 801fb68:	f3bf 8f5b 	dmb	ish
 801fb6c:	4770      	bx	lr
 801fb6e:	bf00      	nop
 801fb70:	240000d8 	.word	0x240000d8

0801fb74 <_ZSt9terminatev>:
 801fb74:	b508      	push	{r3, lr}
 801fb76:	f7ff fff5 	bl	801fb64 <_ZSt13get_terminatev>
 801fb7a:	f7ff ffee 	bl	801fb5a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801fb80 <_ZSt15get_new_handlerv>:
 801fb80:	4b02      	ldr	r3, [pc, #8]	@ (801fb8c <_ZSt15get_new_handlerv+0xc>)
 801fb82:	6818      	ldr	r0, [r3, #0]
 801fb84:	f3bf 8f5b 	dmb	ish
 801fb88:	4770      	bx	lr
 801fb8a:	bf00      	nop
 801fb8c:	24025a74 	.word	0x24025a74

0801fb90 <atan2f>:
 801fb90:	f000 b9ce 	b.w	801ff30 <__ieee754_atan2f>

0801fb94 <sqrtf>:
 801fb94:	b508      	push	{r3, lr}
 801fb96:	ed2d 8b02 	vpush	{d8}
 801fb9a:	eeb0 8a40 	vmov.f32	s16, s0
 801fb9e:	f000 f9c4 	bl	801ff2a <__ieee754_sqrtf>
 801fba2:	eeb4 8a48 	vcmp.f32	s16, s16
 801fba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbaa:	d60c      	bvs.n	801fbc6 <sqrtf+0x32>
 801fbac:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801fbcc <sqrtf+0x38>
 801fbb0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801fbb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbb8:	d505      	bpl.n	801fbc6 <sqrtf+0x32>
 801fbba:	f000 fee1 	bl	8020980 <__errno>
 801fbbe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801fbc2:	2321      	movs	r3, #33	@ 0x21
 801fbc4:	6003      	str	r3, [r0, #0]
 801fbc6:	ecbd 8b02 	vpop	{d8}
 801fbca:	bd08      	pop	{r3, pc}
 801fbcc:	00000000 	.word	0x00000000

0801fbd0 <sinf_poly>:
 801fbd0:	07cb      	lsls	r3, r1, #31
 801fbd2:	d412      	bmi.n	801fbfa <sinf_poly+0x2a>
 801fbd4:	ee21 5b00 	vmul.f64	d5, d1, d0
 801fbd8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801fbdc:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801fbe0:	eea6 7b01 	vfma.f64	d7, d6, d1
 801fbe4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801fbe8:	ee21 1b05 	vmul.f64	d1, d1, d5
 801fbec:	eea6 0b05 	vfma.f64	d0, d6, d5
 801fbf0:	eea7 0b01 	vfma.f64	d0, d7, d1
 801fbf4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801fbf8:	4770      	bx	lr
 801fbfa:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801fbfe:	ee21 5b01 	vmul.f64	d5, d1, d1
 801fc02:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801fc06:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801fc0a:	eea1 7b06 	vfma.f64	d7, d1, d6
 801fc0e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801fc12:	eea1 0b06 	vfma.f64	d0, d1, d6
 801fc16:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801fc1a:	ee21 1b05 	vmul.f64	d1, d1, d5
 801fc1e:	eea5 0b06 	vfma.f64	d0, d5, d6
 801fc22:	e7e5      	b.n	801fbf0 <sinf_poly+0x20>
 801fc24:	0000      	movs	r0, r0
	...

0801fc28 <sinf>:
 801fc28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fc2a:	ee10 4a10 	vmov	r4, s0
 801fc2e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801fc32:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801fc36:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801fc3a:	eef0 7a40 	vmov.f32	s15, s0
 801fc3e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801fc42:	d218      	bcs.n	801fc76 <sinf+0x4e>
 801fc44:	ee26 1b06 	vmul.f64	d1, d6, d6
 801fc48:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801fc4c:	d20a      	bcs.n	801fc64 <sinf+0x3c>
 801fc4e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801fc52:	d103      	bne.n	801fc5c <sinf+0x34>
 801fc54:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801fc58:	ed8d 1a01 	vstr	s2, [sp, #4]
 801fc5c:	eeb0 0a67 	vmov.f32	s0, s15
 801fc60:	b003      	add	sp, #12
 801fc62:	bd30      	pop	{r4, r5, pc}
 801fc64:	483a      	ldr	r0, [pc, #232]	@ (801fd50 <sinf+0x128>)
 801fc66:	eeb0 0b46 	vmov.f64	d0, d6
 801fc6a:	2100      	movs	r1, #0
 801fc6c:	b003      	add	sp, #12
 801fc6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fc72:	f7ff bfad 	b.w	801fbd0 <sinf_poly>
 801fc76:	f240 422e 	movw	r2, #1070	@ 0x42e
 801fc7a:	4293      	cmp	r3, r2
 801fc7c:	d824      	bhi.n	801fcc8 <sinf+0xa0>
 801fc7e:	4b34      	ldr	r3, [pc, #208]	@ (801fd50 <sinf+0x128>)
 801fc80:	ed93 7b08 	vldr	d7, [r3, #32]
 801fc84:	ee26 7b07 	vmul.f64	d7, d6, d7
 801fc88:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801fc8c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801fc90:	ee17 1a90 	vmov	r1, s15
 801fc94:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801fc98:	1609      	asrs	r1, r1, #24
 801fc9a:	ee07 1a90 	vmov	s15, r1
 801fc9e:	f001 0203 	and.w	r2, r1, #3
 801fca2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801fca6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801fcaa:	ed92 0b00 	vldr	d0, [r2]
 801fcae:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801fcb2:	f011 0f02 	tst.w	r1, #2
 801fcb6:	eea5 6b47 	vfms.f64	d6, d5, d7
 801fcba:	bf08      	it	eq
 801fcbc:	4618      	moveq	r0, r3
 801fcbe:	ee26 1b06 	vmul.f64	d1, d6, d6
 801fcc2:	ee20 0b06 	vmul.f64	d0, d0, d6
 801fcc6:	e7d1      	b.n	801fc6c <sinf+0x44>
 801fcc8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801fccc:	d237      	bcs.n	801fd3e <sinf+0x116>
 801fcce:	4921      	ldr	r1, [pc, #132]	@ (801fd54 <sinf+0x12c>)
 801fcd0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801fcd4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801fcd8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801fcdc:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801fce0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801fce4:	6a10      	ldr	r0, [r2, #32]
 801fce6:	6912      	ldr	r2, [r2, #16]
 801fce8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801fcec:	40ab      	lsls	r3, r5
 801fcee:	fba0 5003 	umull	r5, r0, r0, r3
 801fcf2:	4359      	muls	r1, r3
 801fcf4:	fbe3 0102 	umlal	r0, r1, r3, r2
 801fcf8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801fcfc:	0f9d      	lsrs	r5, r3, #30
 801fcfe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801fd02:	1ac9      	subs	r1, r1, r3
 801fd04:	f7e0 fcca 	bl	800069c <__aeabi_l2d>
 801fd08:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801fd0c:	4b10      	ldr	r3, [pc, #64]	@ (801fd50 <sinf+0x128>)
 801fd0e:	f004 0203 	and.w	r2, r4, #3
 801fd12:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801fd16:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801fd48 <sinf+0x120>
 801fd1a:	ed92 0b00 	vldr	d0, [r2]
 801fd1e:	ec41 0b17 	vmov	d7, r0, r1
 801fd22:	f014 0f02 	tst.w	r4, #2
 801fd26:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fd2a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801fd2e:	4629      	mov	r1, r5
 801fd30:	bf08      	it	eq
 801fd32:	4618      	moveq	r0, r3
 801fd34:	ee27 1b07 	vmul.f64	d1, d7, d7
 801fd38:	ee20 0b07 	vmul.f64	d0, d0, d7
 801fd3c:	e796      	b.n	801fc6c <sinf+0x44>
 801fd3e:	b003      	add	sp, #12
 801fd40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fd44:	f000 b8e2 	b.w	801ff0c <__math_invalidf>
 801fd48:	54442d18 	.word	0x54442d18
 801fd4c:	3c1921fb 	.word	0x3c1921fb
 801fd50:	08024270 	.word	0x08024270
 801fd54:	0802420c 	.word	0x0802420c

0801fd58 <sinf_poly>:
 801fd58:	07cb      	lsls	r3, r1, #31
 801fd5a:	d412      	bmi.n	801fd82 <sinf_poly+0x2a>
 801fd5c:	ee21 5b00 	vmul.f64	d5, d1, d0
 801fd60:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801fd64:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801fd68:	eea6 7b01 	vfma.f64	d7, d6, d1
 801fd6c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801fd70:	ee21 1b05 	vmul.f64	d1, d1, d5
 801fd74:	eea6 0b05 	vfma.f64	d0, d6, d5
 801fd78:	eea7 0b01 	vfma.f64	d0, d7, d1
 801fd7c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801fd80:	4770      	bx	lr
 801fd82:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801fd86:	ee21 5b01 	vmul.f64	d5, d1, d1
 801fd8a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801fd8e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801fd92:	eea1 7b06 	vfma.f64	d7, d1, d6
 801fd96:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801fd9a:	eea1 0b06 	vfma.f64	d0, d1, d6
 801fd9e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801fda2:	ee21 1b05 	vmul.f64	d1, d1, d5
 801fda6:	eea5 0b06 	vfma.f64	d0, d5, d6
 801fdaa:	e7e5      	b.n	801fd78 <sinf_poly+0x20>
 801fdac:	0000      	movs	r0, r0
	...

0801fdb0 <cosf>:
 801fdb0:	b538      	push	{r3, r4, r5, lr}
 801fdb2:	ee10 4a10 	vmov	r4, s0
 801fdb6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801fdba:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801fdbe:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801fdc2:	d21f      	bcs.n	801fe04 <cosf+0x54>
 801fdc4:	ee27 7b07 	vmul.f64	d7, d7, d7
 801fdc8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801fdcc:	f0c0 8082 	bcc.w	801fed4 <cosf+0x124>
 801fdd0:	ee27 4b07 	vmul.f64	d4, d7, d7
 801fdd4:	4b44      	ldr	r3, [pc, #272]	@ (801fee8 <cosf+0x138>)
 801fdd6:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 801fdda:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801fdde:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 801fde2:	eea7 6b05 	vfma.f64	d6, d7, d5
 801fde6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 801fdea:	eea7 0b05 	vfma.f64	d0, d7, d5
 801fdee:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 801fdf2:	ee27 7b04 	vmul.f64	d7, d7, d4
 801fdf6:	eea4 0b05 	vfma.f64	d0, d4, d5
 801fdfa:	eea6 0b07 	vfma.f64	d0, d6, d7
 801fdfe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801fe02:	bd38      	pop	{r3, r4, r5, pc}
 801fe04:	f240 422e 	movw	r2, #1070	@ 0x42e
 801fe08:	4293      	cmp	r3, r2
 801fe0a:	d829      	bhi.n	801fe60 <cosf+0xb0>
 801fe0c:	4b36      	ldr	r3, [pc, #216]	@ (801fee8 <cosf+0x138>)
 801fe0e:	ed93 6b08 	vldr	d6, [r3, #32]
 801fe12:	ee27 6b06 	vmul.f64	d6, d7, d6
 801fe16:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801fe1a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801fe1e:	ee16 1a90 	vmov	r1, s13
 801fe22:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801fe26:	1609      	asrs	r1, r1, #24
 801fe28:	ee06 1a90 	vmov	s13, r1
 801fe2c:	f001 0203 	and.w	r2, r1, #3
 801fe30:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801fe34:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801fe38:	ed92 0b00 	vldr	d0, [r2]
 801fe3c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 801fe40:	f011 0f02 	tst.w	r1, #2
 801fe44:	f081 0101 	eor.w	r1, r1, #1
 801fe48:	eea5 7b46 	vfms.f64	d7, d5, d6
 801fe4c:	bf08      	it	eq
 801fe4e:	4618      	moveq	r0, r3
 801fe50:	ee27 1b07 	vmul.f64	d1, d7, d7
 801fe54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fe58:	ee20 0b07 	vmul.f64	d0, d0, d7
 801fe5c:	f7ff bf7c 	b.w	801fd58 <sinf_poly>
 801fe60:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801fe64:	d232      	bcs.n	801fecc <cosf+0x11c>
 801fe66:	4921      	ldr	r1, [pc, #132]	@ (801feec <cosf+0x13c>)
 801fe68:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801fe6c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801fe70:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801fe74:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801fe78:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801fe7c:	6a10      	ldr	r0, [r2, #32]
 801fe7e:	6912      	ldr	r2, [r2, #16]
 801fe80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801fe84:	40ab      	lsls	r3, r5
 801fe86:	fba0 5003 	umull	r5, r0, r0, r3
 801fe8a:	4359      	muls	r1, r3
 801fe8c:	fbe3 0102 	umlal	r0, r1, r3, r2
 801fe90:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801fe94:	0f9d      	lsrs	r5, r3, #30
 801fe96:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801fe9a:	1ac9      	subs	r1, r1, r3
 801fe9c:	f7e0 fbfe 	bl	800069c <__aeabi_l2d>
 801fea0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801fea4:	4b10      	ldr	r3, [pc, #64]	@ (801fee8 <cosf+0x138>)
 801fea6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 801fee0 <cosf+0x130>
 801feaa:	ec41 0b17 	vmov	d7, r0, r1
 801feae:	f004 0203 	and.w	r2, r4, #3
 801feb2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801feb6:	ed92 0b00 	vldr	d0, [r2]
 801feba:	ee27 7b06 	vmul.f64	d7, d7, d6
 801febe:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801fec2:	f014 0f02 	tst.w	r4, #2
 801fec6:	f085 0101 	eor.w	r1, r5, #1
 801feca:	e7bf      	b.n	801fe4c <cosf+0x9c>
 801fecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fed0:	f000 b81c 	b.w	801ff0c <__math_invalidf>
 801fed4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801fed8:	e793      	b.n	801fe02 <cosf+0x52>
 801feda:	bf00      	nop
 801fedc:	f3af 8000 	nop.w
 801fee0:	54442d18 	.word	0x54442d18
 801fee4:	3c1921fb 	.word	0x3c1921fb
 801fee8:	08024270 	.word	0x08024270
 801feec:	0802420c 	.word	0x0802420c

0801fef0 <with_errnof>:
 801fef0:	b510      	push	{r4, lr}
 801fef2:	ed2d 8b02 	vpush	{d8}
 801fef6:	eeb0 8a40 	vmov.f32	s16, s0
 801fefa:	4604      	mov	r4, r0
 801fefc:	f000 fd40 	bl	8020980 <__errno>
 801ff00:	eeb0 0a48 	vmov.f32	s0, s16
 801ff04:	ecbd 8b02 	vpop	{d8}
 801ff08:	6004      	str	r4, [r0, #0]
 801ff0a:	bd10      	pop	{r4, pc}

0801ff0c <__math_invalidf>:
 801ff0c:	eef0 7a40 	vmov.f32	s15, s0
 801ff10:	ee30 7a40 	vsub.f32	s14, s0, s0
 801ff14:	eef4 7a67 	vcmp.f32	s15, s15
 801ff18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff1c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801ff20:	d602      	bvs.n	801ff28 <__math_invalidf+0x1c>
 801ff22:	2021      	movs	r0, #33	@ 0x21
 801ff24:	f7ff bfe4 	b.w	801fef0 <with_errnof>
 801ff28:	4770      	bx	lr

0801ff2a <__ieee754_sqrtf>:
 801ff2a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801ff2e:	4770      	bx	lr

0801ff30 <__ieee754_atan2f>:
 801ff30:	ee10 2a90 	vmov	r2, s1
 801ff34:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 801ff38:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801ff3c:	b510      	push	{r4, lr}
 801ff3e:	eef0 7a40 	vmov.f32	s15, s0
 801ff42:	d806      	bhi.n	801ff52 <__ieee754_atan2f+0x22>
 801ff44:	ee10 0a10 	vmov	r0, s0
 801ff48:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801ff4c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ff50:	d904      	bls.n	801ff5c <__ieee754_atan2f+0x2c>
 801ff52:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801ff56:	eeb0 0a67 	vmov.f32	s0, s15
 801ff5a:	bd10      	pop	{r4, pc}
 801ff5c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801ff60:	d103      	bne.n	801ff6a <__ieee754_atan2f+0x3a>
 801ff62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ff66:	f000 b881 	b.w	802006c <atanf>
 801ff6a:	1794      	asrs	r4, r2, #30
 801ff6c:	f004 0402 	and.w	r4, r4, #2
 801ff70:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801ff74:	b93b      	cbnz	r3, 801ff86 <__ieee754_atan2f+0x56>
 801ff76:	2c02      	cmp	r4, #2
 801ff78:	d05c      	beq.n	8020034 <__ieee754_atan2f+0x104>
 801ff7a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8020048 <__ieee754_atan2f+0x118>
 801ff7e:	2c03      	cmp	r4, #3
 801ff80:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801ff84:	e7e7      	b.n	801ff56 <__ieee754_atan2f+0x26>
 801ff86:	b939      	cbnz	r1, 801ff98 <__ieee754_atan2f+0x68>
 801ff88:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802004c <__ieee754_atan2f+0x11c>
 801ff8c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8020050 <__ieee754_atan2f+0x120>
 801ff90:	2800      	cmp	r0, #0
 801ff92:	fe67 7a87 	vselge.f32	s15, s15, s14
 801ff96:	e7de      	b.n	801ff56 <__ieee754_atan2f+0x26>
 801ff98:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801ff9c:	d110      	bne.n	801ffc0 <__ieee754_atan2f+0x90>
 801ff9e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ffa2:	f104 34ff 	add.w	r4, r4, #4294967295
 801ffa6:	d107      	bne.n	801ffb8 <__ieee754_atan2f+0x88>
 801ffa8:	2c02      	cmp	r4, #2
 801ffaa:	d846      	bhi.n	802003a <__ieee754_atan2f+0x10a>
 801ffac:	4b29      	ldr	r3, [pc, #164]	@ (8020054 <__ieee754_atan2f+0x124>)
 801ffae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801ffb2:	edd3 7a00 	vldr	s15, [r3]
 801ffb6:	e7ce      	b.n	801ff56 <__ieee754_atan2f+0x26>
 801ffb8:	2c02      	cmp	r4, #2
 801ffba:	d841      	bhi.n	8020040 <__ieee754_atan2f+0x110>
 801ffbc:	4b26      	ldr	r3, [pc, #152]	@ (8020058 <__ieee754_atan2f+0x128>)
 801ffbe:	e7f6      	b.n	801ffae <__ieee754_atan2f+0x7e>
 801ffc0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ffc4:	d0e0      	beq.n	801ff88 <__ieee754_atan2f+0x58>
 801ffc6:	1a5b      	subs	r3, r3, r1
 801ffc8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801ffcc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801ffd0:	da1a      	bge.n	8020008 <__ieee754_atan2f+0xd8>
 801ffd2:	2a00      	cmp	r2, #0
 801ffd4:	da01      	bge.n	801ffda <__ieee754_atan2f+0xaa>
 801ffd6:	313c      	adds	r1, #60	@ 0x3c
 801ffd8:	db19      	blt.n	802000e <__ieee754_atan2f+0xde>
 801ffda:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801ffde:	f000 f919 	bl	8020214 <fabsf>
 801ffe2:	f000 f843 	bl	802006c <atanf>
 801ffe6:	eef0 7a40 	vmov.f32	s15, s0
 801ffea:	2c01      	cmp	r4, #1
 801ffec:	d012      	beq.n	8020014 <__ieee754_atan2f+0xe4>
 801ffee:	2c02      	cmp	r4, #2
 801fff0:	d017      	beq.n	8020022 <__ieee754_atan2f+0xf2>
 801fff2:	2c00      	cmp	r4, #0
 801fff4:	d0af      	beq.n	801ff56 <__ieee754_atan2f+0x26>
 801fff6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802005c <__ieee754_atan2f+0x12c>
 801fffa:	ee77 7a87 	vadd.f32	s15, s15, s14
 801fffe:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8020060 <__ieee754_atan2f+0x130>
 8020002:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020006:	e7a6      	b.n	801ff56 <__ieee754_atan2f+0x26>
 8020008:	eddf 7a10 	vldr	s15, [pc, #64]	@ 802004c <__ieee754_atan2f+0x11c>
 802000c:	e7ed      	b.n	801ffea <__ieee754_atan2f+0xba>
 802000e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8020064 <__ieee754_atan2f+0x134>
 8020012:	e7ea      	b.n	801ffea <__ieee754_atan2f+0xba>
 8020014:	ee17 3a90 	vmov	r3, s15
 8020018:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802001c:	ee07 3a90 	vmov	s15, r3
 8020020:	e799      	b.n	801ff56 <__ieee754_atan2f+0x26>
 8020022:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802005c <__ieee754_atan2f+0x12c>
 8020026:	ee77 7a87 	vadd.f32	s15, s15, s14
 802002a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8020060 <__ieee754_atan2f+0x130>
 802002e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020032:	e790      	b.n	801ff56 <__ieee754_atan2f+0x26>
 8020034:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8020060 <__ieee754_atan2f+0x130>
 8020038:	e78d      	b.n	801ff56 <__ieee754_atan2f+0x26>
 802003a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8020068 <__ieee754_atan2f+0x138>
 802003e:	e78a      	b.n	801ff56 <__ieee754_atan2f+0x26>
 8020040:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8020064 <__ieee754_atan2f+0x134>
 8020044:	e787      	b.n	801ff56 <__ieee754_atan2f+0x26>
 8020046:	bf00      	nop
 8020048:	c0490fdb 	.word	0xc0490fdb
 802004c:	3fc90fdb 	.word	0x3fc90fdb
 8020050:	bfc90fdb 	.word	0xbfc90fdb
 8020054:	0802435c 	.word	0x0802435c
 8020058:	08024350 	.word	0x08024350
 802005c:	33bbbd2e 	.word	0x33bbbd2e
 8020060:	40490fdb 	.word	0x40490fdb
 8020064:	00000000 	.word	0x00000000
 8020068:	3f490fdb 	.word	0x3f490fdb

0802006c <atanf>:
 802006c:	b538      	push	{r3, r4, r5, lr}
 802006e:	ee10 5a10 	vmov	r5, s0
 8020072:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8020076:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802007a:	eef0 7a40 	vmov.f32	s15, s0
 802007e:	d30f      	bcc.n	80200a0 <atanf+0x34>
 8020080:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8020084:	d904      	bls.n	8020090 <atanf+0x24>
 8020086:	ee70 7a00 	vadd.f32	s15, s0, s0
 802008a:	eeb0 0a67 	vmov.f32	s0, s15
 802008e:	bd38      	pop	{r3, r4, r5, pc}
 8020090:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80201c8 <atanf+0x15c>
 8020094:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80201cc <atanf+0x160>
 8020098:	2d00      	cmp	r5, #0
 802009a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802009e:	e7f4      	b.n	802008a <atanf+0x1e>
 80200a0:	4b4b      	ldr	r3, [pc, #300]	@ (80201d0 <atanf+0x164>)
 80200a2:	429c      	cmp	r4, r3
 80200a4:	d810      	bhi.n	80200c8 <atanf+0x5c>
 80200a6:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80200aa:	d20a      	bcs.n	80200c2 <atanf+0x56>
 80200ac:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80201d4 <atanf+0x168>
 80200b0:	ee30 7a07 	vadd.f32	s14, s0, s14
 80200b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80200b8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80200bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200c0:	dce3      	bgt.n	802008a <atanf+0x1e>
 80200c2:	f04f 33ff 	mov.w	r3, #4294967295
 80200c6:	e013      	b.n	80200f0 <atanf+0x84>
 80200c8:	f000 f8a4 	bl	8020214 <fabsf>
 80200cc:	4b42      	ldr	r3, [pc, #264]	@ (80201d8 <atanf+0x16c>)
 80200ce:	429c      	cmp	r4, r3
 80200d0:	d84f      	bhi.n	8020172 <atanf+0x106>
 80200d2:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80200d6:	429c      	cmp	r4, r3
 80200d8:	d841      	bhi.n	802015e <atanf+0xf2>
 80200da:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80200de:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80200e2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80200e6:	2300      	movs	r3, #0
 80200e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80200ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80200f0:	1c5a      	adds	r2, r3, #1
 80200f2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80200f6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80201dc <atanf+0x170>
 80200fa:	eddf 5a39 	vldr	s11, [pc, #228]	@ 80201e0 <atanf+0x174>
 80200fe:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 80201e4 <atanf+0x178>
 8020102:	ee66 6a06 	vmul.f32	s13, s12, s12
 8020106:	eee6 5a87 	vfma.f32	s11, s13, s14
 802010a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80201e8 <atanf+0x17c>
 802010e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8020112:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80201ec <atanf+0x180>
 8020116:	eee7 5a26 	vfma.f32	s11, s14, s13
 802011a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80201f0 <atanf+0x184>
 802011e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8020122:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80201f4 <atanf+0x188>
 8020126:	eee7 5a26 	vfma.f32	s11, s14, s13
 802012a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80201f8 <atanf+0x18c>
 802012e:	eea6 5a87 	vfma.f32	s10, s13, s14
 8020132:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80201fc <atanf+0x190>
 8020136:	eea5 7a26 	vfma.f32	s14, s10, s13
 802013a:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8020200 <atanf+0x194>
 802013e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8020142:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8020204 <atanf+0x198>
 8020146:	eea5 7a26 	vfma.f32	s14, s10, s13
 802014a:	ee27 7a26 	vmul.f32	s14, s14, s13
 802014e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8020152:	ee27 7a87 	vmul.f32	s14, s15, s14
 8020156:	d121      	bne.n	802019c <atanf+0x130>
 8020158:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802015c:	e795      	b.n	802008a <atanf+0x1e>
 802015e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8020162:	ee30 7a67 	vsub.f32	s14, s0, s15
 8020166:	ee30 0a27 	vadd.f32	s0, s0, s15
 802016a:	2301      	movs	r3, #1
 802016c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020170:	e7be      	b.n	80200f0 <atanf+0x84>
 8020172:	4b25      	ldr	r3, [pc, #148]	@ (8020208 <atanf+0x19c>)
 8020174:	429c      	cmp	r4, r3
 8020176:	d80b      	bhi.n	8020190 <atanf+0x124>
 8020178:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802017c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020180:	eea0 7a27 	vfma.f32	s14, s0, s15
 8020184:	2302      	movs	r3, #2
 8020186:	ee70 6a67 	vsub.f32	s13, s0, s15
 802018a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802018e:	e7af      	b.n	80200f0 <atanf+0x84>
 8020190:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8020194:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020198:	2303      	movs	r3, #3
 802019a:	e7a9      	b.n	80200f0 <atanf+0x84>
 802019c:	4a1b      	ldr	r2, [pc, #108]	@ (802020c <atanf+0x1a0>)
 802019e:	491c      	ldr	r1, [pc, #112]	@ (8020210 <atanf+0x1a4>)
 80201a0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80201a4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80201a8:	edd3 6a00 	vldr	s13, [r3]
 80201ac:	ee37 7a66 	vsub.f32	s14, s14, s13
 80201b0:	2d00      	cmp	r5, #0
 80201b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80201b6:	edd2 7a00 	vldr	s15, [r2]
 80201ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80201be:	bfb8      	it	lt
 80201c0:	eef1 7a67 	vneglt.f32	s15, s15
 80201c4:	e761      	b.n	802008a <atanf+0x1e>
 80201c6:	bf00      	nop
 80201c8:	bfc90fdb 	.word	0xbfc90fdb
 80201cc:	3fc90fdb 	.word	0x3fc90fdb
 80201d0:	3edfffff 	.word	0x3edfffff
 80201d4:	7149f2ca 	.word	0x7149f2ca
 80201d8:	3f97ffff 	.word	0x3f97ffff
 80201dc:	3c8569d7 	.word	0x3c8569d7
 80201e0:	3d4bda59 	.word	0x3d4bda59
 80201e4:	bd6ef16b 	.word	0xbd6ef16b
 80201e8:	3d886b35 	.word	0x3d886b35
 80201ec:	3dba2e6e 	.word	0x3dba2e6e
 80201f0:	3e124925 	.word	0x3e124925
 80201f4:	3eaaaaab 	.word	0x3eaaaaab
 80201f8:	bd15a221 	.word	0xbd15a221
 80201fc:	bd9d8795 	.word	0xbd9d8795
 8020200:	bde38e38 	.word	0xbde38e38
 8020204:	be4ccccd 	.word	0xbe4ccccd
 8020208:	401bffff 	.word	0x401bffff
 802020c:	08024378 	.word	0x08024378
 8020210:	08024368 	.word	0x08024368

08020214 <fabsf>:
 8020214:	ee10 3a10 	vmov	r3, s0
 8020218:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802021c:	ee00 3a10 	vmov	s0, r3
 8020220:	4770      	bx	lr

08020222 <abort>:
 8020222:	b508      	push	{r3, lr}
 8020224:	2006      	movs	r0, #6
 8020226:	f000 fb39 	bl	802089c <raise>
 802022a:	2001      	movs	r0, #1
 802022c:	f7e1 fa24 	bl	8001678 <_exit>

08020230 <__assert_func>:
 8020230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020232:	4614      	mov	r4, r2
 8020234:	461a      	mov	r2, r3
 8020236:	4b09      	ldr	r3, [pc, #36]	@ (802025c <__assert_func+0x2c>)
 8020238:	681b      	ldr	r3, [r3, #0]
 802023a:	4605      	mov	r5, r0
 802023c:	68d8      	ldr	r0, [r3, #12]
 802023e:	b954      	cbnz	r4, 8020256 <__assert_func+0x26>
 8020240:	4b07      	ldr	r3, [pc, #28]	@ (8020260 <__assert_func+0x30>)
 8020242:	461c      	mov	r4, r3
 8020244:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020248:	9100      	str	r1, [sp, #0]
 802024a:	462b      	mov	r3, r5
 802024c:	4905      	ldr	r1, [pc, #20]	@ (8020264 <__assert_func+0x34>)
 802024e:	f000 f9c1 	bl	80205d4 <fiprintf>
 8020252:	f7ff ffe6 	bl	8020222 <abort>
 8020256:	4b04      	ldr	r3, [pc, #16]	@ (8020268 <__assert_func+0x38>)
 8020258:	e7f4      	b.n	8020244 <__assert_func+0x14>
 802025a:	bf00      	nop
 802025c:	240000e8 	.word	0x240000e8
 8020260:	080243c3 	.word	0x080243c3
 8020264:	08024395 	.word	0x08024395
 8020268:	08024388 	.word	0x08024388

0802026c <atexit>:
 802026c:	2300      	movs	r3, #0
 802026e:	4601      	mov	r1, r0
 8020270:	461a      	mov	r2, r3
 8020272:	4618      	mov	r0, r3
 8020274:	f000 bbc0 	b.w	80209f8 <__register_exitproc>

08020278 <malloc>:
 8020278:	4b02      	ldr	r3, [pc, #8]	@ (8020284 <malloc+0xc>)
 802027a:	4601      	mov	r1, r0
 802027c:	6818      	ldr	r0, [r3, #0]
 802027e:	f000 b82d 	b.w	80202dc <_malloc_r>
 8020282:	bf00      	nop
 8020284:	240000e8 	.word	0x240000e8

08020288 <free>:
 8020288:	4b02      	ldr	r3, [pc, #8]	@ (8020294 <free+0xc>)
 802028a:	4601      	mov	r1, r0
 802028c:	6818      	ldr	r0, [r3, #0]
 802028e:	f000 bc0f 	b.w	8020ab0 <_free_r>
 8020292:	bf00      	nop
 8020294:	240000e8 	.word	0x240000e8

08020298 <sbrk_aligned>:
 8020298:	b570      	push	{r4, r5, r6, lr}
 802029a:	4e0f      	ldr	r6, [pc, #60]	@ (80202d8 <sbrk_aligned+0x40>)
 802029c:	460c      	mov	r4, r1
 802029e:	6831      	ldr	r1, [r6, #0]
 80202a0:	4605      	mov	r5, r0
 80202a2:	b911      	cbnz	r1, 80202aa <sbrk_aligned+0x12>
 80202a4:	f000 fb4a 	bl	802093c <_sbrk_r>
 80202a8:	6030      	str	r0, [r6, #0]
 80202aa:	4621      	mov	r1, r4
 80202ac:	4628      	mov	r0, r5
 80202ae:	f000 fb45 	bl	802093c <_sbrk_r>
 80202b2:	1c43      	adds	r3, r0, #1
 80202b4:	d103      	bne.n	80202be <sbrk_aligned+0x26>
 80202b6:	f04f 34ff 	mov.w	r4, #4294967295
 80202ba:	4620      	mov	r0, r4
 80202bc:	bd70      	pop	{r4, r5, r6, pc}
 80202be:	1cc4      	adds	r4, r0, #3
 80202c0:	f024 0403 	bic.w	r4, r4, #3
 80202c4:	42a0      	cmp	r0, r4
 80202c6:	d0f8      	beq.n	80202ba <sbrk_aligned+0x22>
 80202c8:	1a21      	subs	r1, r4, r0
 80202ca:	4628      	mov	r0, r5
 80202cc:	f000 fb36 	bl	802093c <_sbrk_r>
 80202d0:	3001      	adds	r0, #1
 80202d2:	d1f2      	bne.n	80202ba <sbrk_aligned+0x22>
 80202d4:	e7ef      	b.n	80202b6 <sbrk_aligned+0x1e>
 80202d6:	bf00      	nop
 80202d8:	24025a78 	.word	0x24025a78

080202dc <_malloc_r>:
 80202dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80202e0:	1ccd      	adds	r5, r1, #3
 80202e2:	f025 0503 	bic.w	r5, r5, #3
 80202e6:	3508      	adds	r5, #8
 80202e8:	2d0c      	cmp	r5, #12
 80202ea:	bf38      	it	cc
 80202ec:	250c      	movcc	r5, #12
 80202ee:	2d00      	cmp	r5, #0
 80202f0:	4606      	mov	r6, r0
 80202f2:	db01      	blt.n	80202f8 <_malloc_r+0x1c>
 80202f4:	42a9      	cmp	r1, r5
 80202f6:	d904      	bls.n	8020302 <_malloc_r+0x26>
 80202f8:	230c      	movs	r3, #12
 80202fa:	6033      	str	r3, [r6, #0]
 80202fc:	2000      	movs	r0, #0
 80202fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80203d8 <_malloc_r+0xfc>
 8020306:	f000 f869 	bl	80203dc <__malloc_lock>
 802030a:	f8d8 3000 	ldr.w	r3, [r8]
 802030e:	461c      	mov	r4, r3
 8020310:	bb44      	cbnz	r4, 8020364 <_malloc_r+0x88>
 8020312:	4629      	mov	r1, r5
 8020314:	4630      	mov	r0, r6
 8020316:	f7ff ffbf 	bl	8020298 <sbrk_aligned>
 802031a:	1c43      	adds	r3, r0, #1
 802031c:	4604      	mov	r4, r0
 802031e:	d158      	bne.n	80203d2 <_malloc_r+0xf6>
 8020320:	f8d8 4000 	ldr.w	r4, [r8]
 8020324:	4627      	mov	r7, r4
 8020326:	2f00      	cmp	r7, #0
 8020328:	d143      	bne.n	80203b2 <_malloc_r+0xd6>
 802032a:	2c00      	cmp	r4, #0
 802032c:	d04b      	beq.n	80203c6 <_malloc_r+0xea>
 802032e:	6823      	ldr	r3, [r4, #0]
 8020330:	4639      	mov	r1, r7
 8020332:	4630      	mov	r0, r6
 8020334:	eb04 0903 	add.w	r9, r4, r3
 8020338:	f000 fb00 	bl	802093c <_sbrk_r>
 802033c:	4581      	cmp	r9, r0
 802033e:	d142      	bne.n	80203c6 <_malloc_r+0xea>
 8020340:	6821      	ldr	r1, [r4, #0]
 8020342:	1a6d      	subs	r5, r5, r1
 8020344:	4629      	mov	r1, r5
 8020346:	4630      	mov	r0, r6
 8020348:	f7ff ffa6 	bl	8020298 <sbrk_aligned>
 802034c:	3001      	adds	r0, #1
 802034e:	d03a      	beq.n	80203c6 <_malloc_r+0xea>
 8020350:	6823      	ldr	r3, [r4, #0]
 8020352:	442b      	add	r3, r5
 8020354:	6023      	str	r3, [r4, #0]
 8020356:	f8d8 3000 	ldr.w	r3, [r8]
 802035a:	685a      	ldr	r2, [r3, #4]
 802035c:	bb62      	cbnz	r2, 80203b8 <_malloc_r+0xdc>
 802035e:	f8c8 7000 	str.w	r7, [r8]
 8020362:	e00f      	b.n	8020384 <_malloc_r+0xa8>
 8020364:	6822      	ldr	r2, [r4, #0]
 8020366:	1b52      	subs	r2, r2, r5
 8020368:	d420      	bmi.n	80203ac <_malloc_r+0xd0>
 802036a:	2a0b      	cmp	r2, #11
 802036c:	d917      	bls.n	802039e <_malloc_r+0xc2>
 802036e:	1961      	adds	r1, r4, r5
 8020370:	42a3      	cmp	r3, r4
 8020372:	6025      	str	r5, [r4, #0]
 8020374:	bf18      	it	ne
 8020376:	6059      	strne	r1, [r3, #4]
 8020378:	6863      	ldr	r3, [r4, #4]
 802037a:	bf08      	it	eq
 802037c:	f8c8 1000 	streq.w	r1, [r8]
 8020380:	5162      	str	r2, [r4, r5]
 8020382:	604b      	str	r3, [r1, #4]
 8020384:	4630      	mov	r0, r6
 8020386:	f000 f82f 	bl	80203e8 <__malloc_unlock>
 802038a:	f104 000b 	add.w	r0, r4, #11
 802038e:	1d23      	adds	r3, r4, #4
 8020390:	f020 0007 	bic.w	r0, r0, #7
 8020394:	1ac2      	subs	r2, r0, r3
 8020396:	bf1c      	itt	ne
 8020398:	1a1b      	subne	r3, r3, r0
 802039a:	50a3      	strne	r3, [r4, r2]
 802039c:	e7af      	b.n	80202fe <_malloc_r+0x22>
 802039e:	6862      	ldr	r2, [r4, #4]
 80203a0:	42a3      	cmp	r3, r4
 80203a2:	bf0c      	ite	eq
 80203a4:	f8c8 2000 	streq.w	r2, [r8]
 80203a8:	605a      	strne	r2, [r3, #4]
 80203aa:	e7eb      	b.n	8020384 <_malloc_r+0xa8>
 80203ac:	4623      	mov	r3, r4
 80203ae:	6864      	ldr	r4, [r4, #4]
 80203b0:	e7ae      	b.n	8020310 <_malloc_r+0x34>
 80203b2:	463c      	mov	r4, r7
 80203b4:	687f      	ldr	r7, [r7, #4]
 80203b6:	e7b6      	b.n	8020326 <_malloc_r+0x4a>
 80203b8:	461a      	mov	r2, r3
 80203ba:	685b      	ldr	r3, [r3, #4]
 80203bc:	42a3      	cmp	r3, r4
 80203be:	d1fb      	bne.n	80203b8 <_malloc_r+0xdc>
 80203c0:	2300      	movs	r3, #0
 80203c2:	6053      	str	r3, [r2, #4]
 80203c4:	e7de      	b.n	8020384 <_malloc_r+0xa8>
 80203c6:	230c      	movs	r3, #12
 80203c8:	6033      	str	r3, [r6, #0]
 80203ca:	4630      	mov	r0, r6
 80203cc:	f000 f80c 	bl	80203e8 <__malloc_unlock>
 80203d0:	e794      	b.n	80202fc <_malloc_r+0x20>
 80203d2:	6005      	str	r5, [r0, #0]
 80203d4:	e7d6      	b.n	8020384 <_malloc_r+0xa8>
 80203d6:	bf00      	nop
 80203d8:	24025a7c 	.word	0x24025a7c

080203dc <__malloc_lock>:
 80203dc:	4801      	ldr	r0, [pc, #4]	@ (80203e4 <__malloc_lock+0x8>)
 80203de:	f000 bafa 	b.w	80209d6 <__retarget_lock_acquire_recursive>
 80203e2:	bf00      	nop
 80203e4:	24025bc0 	.word	0x24025bc0

080203e8 <__malloc_unlock>:
 80203e8:	4801      	ldr	r0, [pc, #4]	@ (80203f0 <__malloc_unlock+0x8>)
 80203ea:	f000 baf5 	b.w	80209d8 <__retarget_lock_release_recursive>
 80203ee:	bf00      	nop
 80203f0:	24025bc0 	.word	0x24025bc0

080203f4 <rand>:
 80203f4:	4b16      	ldr	r3, [pc, #88]	@ (8020450 <rand+0x5c>)
 80203f6:	b510      	push	{r4, lr}
 80203f8:	681c      	ldr	r4, [r3, #0]
 80203fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80203fc:	b9b3      	cbnz	r3, 802042c <rand+0x38>
 80203fe:	2018      	movs	r0, #24
 8020400:	f7ff ff3a 	bl	8020278 <malloc>
 8020404:	4602      	mov	r2, r0
 8020406:	6320      	str	r0, [r4, #48]	@ 0x30
 8020408:	b920      	cbnz	r0, 8020414 <rand+0x20>
 802040a:	4b12      	ldr	r3, [pc, #72]	@ (8020454 <rand+0x60>)
 802040c:	4812      	ldr	r0, [pc, #72]	@ (8020458 <rand+0x64>)
 802040e:	2152      	movs	r1, #82	@ 0x52
 8020410:	f7ff ff0e 	bl	8020230 <__assert_func>
 8020414:	4911      	ldr	r1, [pc, #68]	@ (802045c <rand+0x68>)
 8020416:	4b12      	ldr	r3, [pc, #72]	@ (8020460 <rand+0x6c>)
 8020418:	e9c0 1300 	strd	r1, r3, [r0]
 802041c:	4b11      	ldr	r3, [pc, #68]	@ (8020464 <rand+0x70>)
 802041e:	6083      	str	r3, [r0, #8]
 8020420:	230b      	movs	r3, #11
 8020422:	8183      	strh	r3, [r0, #12]
 8020424:	2100      	movs	r1, #0
 8020426:	2001      	movs	r0, #1
 8020428:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802042c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802042e:	480e      	ldr	r0, [pc, #56]	@ (8020468 <rand+0x74>)
 8020430:	690b      	ldr	r3, [r1, #16]
 8020432:	694c      	ldr	r4, [r1, #20]
 8020434:	4a0d      	ldr	r2, [pc, #52]	@ (802046c <rand+0x78>)
 8020436:	4358      	muls	r0, r3
 8020438:	fb02 0004 	mla	r0, r2, r4, r0
 802043c:	fba3 3202 	umull	r3, r2, r3, r2
 8020440:	3301      	adds	r3, #1
 8020442:	eb40 0002 	adc.w	r0, r0, r2
 8020446:	e9c1 3004 	strd	r3, r0, [r1, #16]
 802044a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802044e:	bd10      	pop	{r4, pc}
 8020450:	240000e8 	.word	0x240000e8
 8020454:	080243c4 	.word	0x080243c4
 8020458:	080243db 	.word	0x080243db
 802045c:	abcd330e 	.word	0xabcd330e
 8020460:	e66d1234 	.word	0xe66d1234
 8020464:	0005deec 	.word	0x0005deec
 8020468:	5851f42d 	.word	0x5851f42d
 802046c:	4c957f2d 	.word	0x4c957f2d

08020470 <__cxa_atexit>:
 8020470:	b510      	push	{r4, lr}
 8020472:	4604      	mov	r4, r0
 8020474:	4804      	ldr	r0, [pc, #16]	@ (8020488 <__cxa_atexit+0x18>)
 8020476:	4613      	mov	r3, r2
 8020478:	b120      	cbz	r0, 8020484 <__cxa_atexit+0x14>
 802047a:	460a      	mov	r2, r1
 802047c:	2002      	movs	r0, #2
 802047e:	4621      	mov	r1, r4
 8020480:	f000 faba 	bl	80209f8 <__register_exitproc>
 8020484:	bd10      	pop	{r4, pc}
 8020486:	bf00      	nop
 8020488:	080209f9 	.word	0x080209f9

0802048c <std>:
 802048c:	2300      	movs	r3, #0
 802048e:	b510      	push	{r4, lr}
 8020490:	4604      	mov	r4, r0
 8020492:	e9c0 3300 	strd	r3, r3, [r0]
 8020496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802049a:	6083      	str	r3, [r0, #8]
 802049c:	8181      	strh	r1, [r0, #12]
 802049e:	6643      	str	r3, [r0, #100]	@ 0x64
 80204a0:	81c2      	strh	r2, [r0, #14]
 80204a2:	6183      	str	r3, [r0, #24]
 80204a4:	4619      	mov	r1, r3
 80204a6:	2208      	movs	r2, #8
 80204a8:	305c      	adds	r0, #92	@ 0x5c
 80204aa:	f000 f9b5 	bl	8020818 <memset>
 80204ae:	4b0d      	ldr	r3, [pc, #52]	@ (80204e4 <std+0x58>)
 80204b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80204b2:	4b0d      	ldr	r3, [pc, #52]	@ (80204e8 <std+0x5c>)
 80204b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80204b6:	4b0d      	ldr	r3, [pc, #52]	@ (80204ec <std+0x60>)
 80204b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80204ba:	4b0d      	ldr	r3, [pc, #52]	@ (80204f0 <std+0x64>)
 80204bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80204be:	4b0d      	ldr	r3, [pc, #52]	@ (80204f4 <std+0x68>)
 80204c0:	6224      	str	r4, [r4, #32]
 80204c2:	429c      	cmp	r4, r3
 80204c4:	d006      	beq.n	80204d4 <std+0x48>
 80204c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80204ca:	4294      	cmp	r4, r2
 80204cc:	d002      	beq.n	80204d4 <std+0x48>
 80204ce:	33d0      	adds	r3, #208	@ 0xd0
 80204d0:	429c      	cmp	r4, r3
 80204d2:	d105      	bne.n	80204e0 <std+0x54>
 80204d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80204d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80204dc:	f000 ba7a 	b.w	80209d4 <__retarget_lock_init_recursive>
 80204e0:	bd10      	pop	{r4, pc}
 80204e2:	bf00      	nop
 80204e4:	08020635 	.word	0x08020635
 80204e8:	08020657 	.word	0x08020657
 80204ec:	0802068f 	.word	0x0802068f
 80204f0:	080206b3 	.word	0x080206b3
 80204f4:	24025a80 	.word	0x24025a80

080204f8 <stdio_exit_handler>:
 80204f8:	4a02      	ldr	r2, [pc, #8]	@ (8020504 <stdio_exit_handler+0xc>)
 80204fa:	4903      	ldr	r1, [pc, #12]	@ (8020508 <stdio_exit_handler+0x10>)
 80204fc:	4803      	ldr	r0, [pc, #12]	@ (802050c <stdio_exit_handler+0x14>)
 80204fe:	f000 b87b 	b.w	80205f8 <_fwalk_sglue>
 8020502:	bf00      	nop
 8020504:	240000dc 	.word	0x240000dc
 8020508:	080211ed 	.word	0x080211ed
 802050c:	240000ec 	.word	0x240000ec

08020510 <cleanup_stdio>:
 8020510:	6841      	ldr	r1, [r0, #4]
 8020512:	4b0c      	ldr	r3, [pc, #48]	@ (8020544 <cleanup_stdio+0x34>)
 8020514:	4299      	cmp	r1, r3
 8020516:	b510      	push	{r4, lr}
 8020518:	4604      	mov	r4, r0
 802051a:	d001      	beq.n	8020520 <cleanup_stdio+0x10>
 802051c:	f000 fe66 	bl	80211ec <_fflush_r>
 8020520:	68a1      	ldr	r1, [r4, #8]
 8020522:	4b09      	ldr	r3, [pc, #36]	@ (8020548 <cleanup_stdio+0x38>)
 8020524:	4299      	cmp	r1, r3
 8020526:	d002      	beq.n	802052e <cleanup_stdio+0x1e>
 8020528:	4620      	mov	r0, r4
 802052a:	f000 fe5f 	bl	80211ec <_fflush_r>
 802052e:	68e1      	ldr	r1, [r4, #12]
 8020530:	4b06      	ldr	r3, [pc, #24]	@ (802054c <cleanup_stdio+0x3c>)
 8020532:	4299      	cmp	r1, r3
 8020534:	d004      	beq.n	8020540 <cleanup_stdio+0x30>
 8020536:	4620      	mov	r0, r4
 8020538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802053c:	f000 be56 	b.w	80211ec <_fflush_r>
 8020540:	bd10      	pop	{r4, pc}
 8020542:	bf00      	nop
 8020544:	24025a80 	.word	0x24025a80
 8020548:	24025ae8 	.word	0x24025ae8
 802054c:	24025b50 	.word	0x24025b50

08020550 <global_stdio_init.part.0>:
 8020550:	b510      	push	{r4, lr}
 8020552:	4b0b      	ldr	r3, [pc, #44]	@ (8020580 <global_stdio_init.part.0+0x30>)
 8020554:	4c0b      	ldr	r4, [pc, #44]	@ (8020584 <global_stdio_init.part.0+0x34>)
 8020556:	4a0c      	ldr	r2, [pc, #48]	@ (8020588 <global_stdio_init.part.0+0x38>)
 8020558:	601a      	str	r2, [r3, #0]
 802055a:	4620      	mov	r0, r4
 802055c:	2200      	movs	r2, #0
 802055e:	2104      	movs	r1, #4
 8020560:	f7ff ff94 	bl	802048c <std>
 8020564:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8020568:	2201      	movs	r2, #1
 802056a:	2109      	movs	r1, #9
 802056c:	f7ff ff8e 	bl	802048c <std>
 8020570:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8020574:	2202      	movs	r2, #2
 8020576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802057a:	2112      	movs	r1, #18
 802057c:	f7ff bf86 	b.w	802048c <std>
 8020580:	24025bb8 	.word	0x24025bb8
 8020584:	24025a80 	.word	0x24025a80
 8020588:	080204f9 	.word	0x080204f9

0802058c <__sfp_lock_acquire>:
 802058c:	4801      	ldr	r0, [pc, #4]	@ (8020594 <__sfp_lock_acquire+0x8>)
 802058e:	f000 ba22 	b.w	80209d6 <__retarget_lock_acquire_recursive>
 8020592:	bf00      	nop
 8020594:	24025bc2 	.word	0x24025bc2

08020598 <__sfp_lock_release>:
 8020598:	4801      	ldr	r0, [pc, #4]	@ (80205a0 <__sfp_lock_release+0x8>)
 802059a:	f000 ba1d 	b.w	80209d8 <__retarget_lock_release_recursive>
 802059e:	bf00      	nop
 80205a0:	24025bc2 	.word	0x24025bc2

080205a4 <__sinit>:
 80205a4:	b510      	push	{r4, lr}
 80205a6:	4604      	mov	r4, r0
 80205a8:	f7ff fff0 	bl	802058c <__sfp_lock_acquire>
 80205ac:	6a23      	ldr	r3, [r4, #32]
 80205ae:	b11b      	cbz	r3, 80205b8 <__sinit+0x14>
 80205b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80205b4:	f7ff bff0 	b.w	8020598 <__sfp_lock_release>
 80205b8:	4b04      	ldr	r3, [pc, #16]	@ (80205cc <__sinit+0x28>)
 80205ba:	6223      	str	r3, [r4, #32]
 80205bc:	4b04      	ldr	r3, [pc, #16]	@ (80205d0 <__sinit+0x2c>)
 80205be:	681b      	ldr	r3, [r3, #0]
 80205c0:	2b00      	cmp	r3, #0
 80205c2:	d1f5      	bne.n	80205b0 <__sinit+0xc>
 80205c4:	f7ff ffc4 	bl	8020550 <global_stdio_init.part.0>
 80205c8:	e7f2      	b.n	80205b0 <__sinit+0xc>
 80205ca:	bf00      	nop
 80205cc:	08020511 	.word	0x08020511
 80205d0:	24025bb8 	.word	0x24025bb8

080205d4 <fiprintf>:
 80205d4:	b40e      	push	{r1, r2, r3}
 80205d6:	b503      	push	{r0, r1, lr}
 80205d8:	4601      	mov	r1, r0
 80205da:	ab03      	add	r3, sp, #12
 80205dc:	4805      	ldr	r0, [pc, #20]	@ (80205f4 <fiprintf+0x20>)
 80205de:	f853 2b04 	ldr.w	r2, [r3], #4
 80205e2:	6800      	ldr	r0, [r0, #0]
 80205e4:	9301      	str	r3, [sp, #4]
 80205e6:	f000 fad7 	bl	8020b98 <_vfiprintf_r>
 80205ea:	b002      	add	sp, #8
 80205ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80205f0:	b003      	add	sp, #12
 80205f2:	4770      	bx	lr
 80205f4:	240000e8 	.word	0x240000e8

080205f8 <_fwalk_sglue>:
 80205f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80205fc:	4607      	mov	r7, r0
 80205fe:	4688      	mov	r8, r1
 8020600:	4614      	mov	r4, r2
 8020602:	2600      	movs	r6, #0
 8020604:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020608:	f1b9 0901 	subs.w	r9, r9, #1
 802060c:	d505      	bpl.n	802061a <_fwalk_sglue+0x22>
 802060e:	6824      	ldr	r4, [r4, #0]
 8020610:	2c00      	cmp	r4, #0
 8020612:	d1f7      	bne.n	8020604 <_fwalk_sglue+0xc>
 8020614:	4630      	mov	r0, r6
 8020616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802061a:	89ab      	ldrh	r3, [r5, #12]
 802061c:	2b01      	cmp	r3, #1
 802061e:	d907      	bls.n	8020630 <_fwalk_sglue+0x38>
 8020620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020624:	3301      	adds	r3, #1
 8020626:	d003      	beq.n	8020630 <_fwalk_sglue+0x38>
 8020628:	4629      	mov	r1, r5
 802062a:	4638      	mov	r0, r7
 802062c:	47c0      	blx	r8
 802062e:	4306      	orrs	r6, r0
 8020630:	3568      	adds	r5, #104	@ 0x68
 8020632:	e7e9      	b.n	8020608 <_fwalk_sglue+0x10>

08020634 <__sread>:
 8020634:	b510      	push	{r4, lr}
 8020636:	460c      	mov	r4, r1
 8020638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802063c:	f000 f958 	bl	80208f0 <_read_r>
 8020640:	2800      	cmp	r0, #0
 8020642:	bfab      	itete	ge
 8020644:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8020646:	89a3      	ldrhlt	r3, [r4, #12]
 8020648:	181b      	addge	r3, r3, r0
 802064a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802064e:	bfac      	ite	ge
 8020650:	6563      	strge	r3, [r4, #84]	@ 0x54
 8020652:	81a3      	strhlt	r3, [r4, #12]
 8020654:	bd10      	pop	{r4, pc}

08020656 <__swrite>:
 8020656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802065a:	461f      	mov	r7, r3
 802065c:	898b      	ldrh	r3, [r1, #12]
 802065e:	05db      	lsls	r3, r3, #23
 8020660:	4605      	mov	r5, r0
 8020662:	460c      	mov	r4, r1
 8020664:	4616      	mov	r6, r2
 8020666:	d505      	bpl.n	8020674 <__swrite+0x1e>
 8020668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802066c:	2302      	movs	r3, #2
 802066e:	2200      	movs	r2, #0
 8020670:	f000 f92c 	bl	80208cc <_lseek_r>
 8020674:	89a3      	ldrh	r3, [r4, #12]
 8020676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802067a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802067e:	81a3      	strh	r3, [r4, #12]
 8020680:	4632      	mov	r2, r6
 8020682:	463b      	mov	r3, r7
 8020684:	4628      	mov	r0, r5
 8020686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802068a:	f000 b967 	b.w	802095c <_write_r>

0802068e <__sseek>:
 802068e:	b510      	push	{r4, lr}
 8020690:	460c      	mov	r4, r1
 8020692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020696:	f000 f919 	bl	80208cc <_lseek_r>
 802069a:	1c43      	adds	r3, r0, #1
 802069c:	89a3      	ldrh	r3, [r4, #12]
 802069e:	bf15      	itete	ne
 80206a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80206a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80206a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80206aa:	81a3      	strheq	r3, [r4, #12]
 80206ac:	bf18      	it	ne
 80206ae:	81a3      	strhne	r3, [r4, #12]
 80206b0:	bd10      	pop	{r4, pc}

080206b2 <__sclose>:
 80206b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80206b6:	f000 b8f9 	b.w	80208ac <_close_r>

080206ba <__swbuf_r>:
 80206ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206bc:	460e      	mov	r6, r1
 80206be:	4614      	mov	r4, r2
 80206c0:	4605      	mov	r5, r0
 80206c2:	b118      	cbz	r0, 80206cc <__swbuf_r+0x12>
 80206c4:	6a03      	ldr	r3, [r0, #32]
 80206c6:	b90b      	cbnz	r3, 80206cc <__swbuf_r+0x12>
 80206c8:	f7ff ff6c 	bl	80205a4 <__sinit>
 80206cc:	69a3      	ldr	r3, [r4, #24]
 80206ce:	60a3      	str	r3, [r4, #8]
 80206d0:	89a3      	ldrh	r3, [r4, #12]
 80206d2:	071a      	lsls	r2, r3, #28
 80206d4:	d501      	bpl.n	80206da <__swbuf_r+0x20>
 80206d6:	6923      	ldr	r3, [r4, #16]
 80206d8:	b943      	cbnz	r3, 80206ec <__swbuf_r+0x32>
 80206da:	4621      	mov	r1, r4
 80206dc:	4628      	mov	r0, r5
 80206de:	f000 f82b 	bl	8020738 <__swsetup_r>
 80206e2:	b118      	cbz	r0, 80206ec <__swbuf_r+0x32>
 80206e4:	f04f 37ff 	mov.w	r7, #4294967295
 80206e8:	4638      	mov	r0, r7
 80206ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80206ec:	6823      	ldr	r3, [r4, #0]
 80206ee:	6922      	ldr	r2, [r4, #16]
 80206f0:	1a98      	subs	r0, r3, r2
 80206f2:	6963      	ldr	r3, [r4, #20]
 80206f4:	b2f6      	uxtb	r6, r6
 80206f6:	4283      	cmp	r3, r0
 80206f8:	4637      	mov	r7, r6
 80206fa:	dc05      	bgt.n	8020708 <__swbuf_r+0x4e>
 80206fc:	4621      	mov	r1, r4
 80206fe:	4628      	mov	r0, r5
 8020700:	f000 fd74 	bl	80211ec <_fflush_r>
 8020704:	2800      	cmp	r0, #0
 8020706:	d1ed      	bne.n	80206e4 <__swbuf_r+0x2a>
 8020708:	68a3      	ldr	r3, [r4, #8]
 802070a:	3b01      	subs	r3, #1
 802070c:	60a3      	str	r3, [r4, #8]
 802070e:	6823      	ldr	r3, [r4, #0]
 8020710:	1c5a      	adds	r2, r3, #1
 8020712:	6022      	str	r2, [r4, #0]
 8020714:	701e      	strb	r6, [r3, #0]
 8020716:	6962      	ldr	r2, [r4, #20]
 8020718:	1c43      	adds	r3, r0, #1
 802071a:	429a      	cmp	r2, r3
 802071c:	d004      	beq.n	8020728 <__swbuf_r+0x6e>
 802071e:	89a3      	ldrh	r3, [r4, #12]
 8020720:	07db      	lsls	r3, r3, #31
 8020722:	d5e1      	bpl.n	80206e8 <__swbuf_r+0x2e>
 8020724:	2e0a      	cmp	r6, #10
 8020726:	d1df      	bne.n	80206e8 <__swbuf_r+0x2e>
 8020728:	4621      	mov	r1, r4
 802072a:	4628      	mov	r0, r5
 802072c:	f000 fd5e 	bl	80211ec <_fflush_r>
 8020730:	2800      	cmp	r0, #0
 8020732:	d0d9      	beq.n	80206e8 <__swbuf_r+0x2e>
 8020734:	e7d6      	b.n	80206e4 <__swbuf_r+0x2a>
	...

08020738 <__swsetup_r>:
 8020738:	b538      	push	{r3, r4, r5, lr}
 802073a:	4b29      	ldr	r3, [pc, #164]	@ (80207e0 <__swsetup_r+0xa8>)
 802073c:	4605      	mov	r5, r0
 802073e:	6818      	ldr	r0, [r3, #0]
 8020740:	460c      	mov	r4, r1
 8020742:	b118      	cbz	r0, 802074c <__swsetup_r+0x14>
 8020744:	6a03      	ldr	r3, [r0, #32]
 8020746:	b90b      	cbnz	r3, 802074c <__swsetup_r+0x14>
 8020748:	f7ff ff2c 	bl	80205a4 <__sinit>
 802074c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020750:	0719      	lsls	r1, r3, #28
 8020752:	d422      	bmi.n	802079a <__swsetup_r+0x62>
 8020754:	06da      	lsls	r2, r3, #27
 8020756:	d407      	bmi.n	8020768 <__swsetup_r+0x30>
 8020758:	2209      	movs	r2, #9
 802075a:	602a      	str	r2, [r5, #0]
 802075c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020760:	81a3      	strh	r3, [r4, #12]
 8020762:	f04f 30ff 	mov.w	r0, #4294967295
 8020766:	e033      	b.n	80207d0 <__swsetup_r+0x98>
 8020768:	0758      	lsls	r0, r3, #29
 802076a:	d512      	bpl.n	8020792 <__swsetup_r+0x5a>
 802076c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802076e:	b141      	cbz	r1, 8020782 <__swsetup_r+0x4a>
 8020770:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020774:	4299      	cmp	r1, r3
 8020776:	d002      	beq.n	802077e <__swsetup_r+0x46>
 8020778:	4628      	mov	r0, r5
 802077a:	f000 f999 	bl	8020ab0 <_free_r>
 802077e:	2300      	movs	r3, #0
 8020780:	6363      	str	r3, [r4, #52]	@ 0x34
 8020782:	89a3      	ldrh	r3, [r4, #12]
 8020784:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8020788:	81a3      	strh	r3, [r4, #12]
 802078a:	2300      	movs	r3, #0
 802078c:	6063      	str	r3, [r4, #4]
 802078e:	6923      	ldr	r3, [r4, #16]
 8020790:	6023      	str	r3, [r4, #0]
 8020792:	89a3      	ldrh	r3, [r4, #12]
 8020794:	f043 0308 	orr.w	r3, r3, #8
 8020798:	81a3      	strh	r3, [r4, #12]
 802079a:	6923      	ldr	r3, [r4, #16]
 802079c:	b94b      	cbnz	r3, 80207b2 <__swsetup_r+0x7a>
 802079e:	89a3      	ldrh	r3, [r4, #12]
 80207a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80207a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80207a8:	d003      	beq.n	80207b2 <__swsetup_r+0x7a>
 80207aa:	4621      	mov	r1, r4
 80207ac:	4628      	mov	r0, r5
 80207ae:	f000 fd6b 	bl	8021288 <__smakebuf_r>
 80207b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80207b6:	f013 0201 	ands.w	r2, r3, #1
 80207ba:	d00a      	beq.n	80207d2 <__swsetup_r+0x9a>
 80207bc:	2200      	movs	r2, #0
 80207be:	60a2      	str	r2, [r4, #8]
 80207c0:	6962      	ldr	r2, [r4, #20]
 80207c2:	4252      	negs	r2, r2
 80207c4:	61a2      	str	r2, [r4, #24]
 80207c6:	6922      	ldr	r2, [r4, #16]
 80207c8:	b942      	cbnz	r2, 80207dc <__swsetup_r+0xa4>
 80207ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80207ce:	d1c5      	bne.n	802075c <__swsetup_r+0x24>
 80207d0:	bd38      	pop	{r3, r4, r5, pc}
 80207d2:	0799      	lsls	r1, r3, #30
 80207d4:	bf58      	it	pl
 80207d6:	6962      	ldrpl	r2, [r4, #20]
 80207d8:	60a2      	str	r2, [r4, #8]
 80207da:	e7f4      	b.n	80207c6 <__swsetup_r+0x8e>
 80207dc:	2000      	movs	r0, #0
 80207de:	e7f7      	b.n	80207d0 <__swsetup_r+0x98>
 80207e0:	240000e8 	.word	0x240000e8

080207e4 <memmove>:
 80207e4:	4288      	cmp	r0, r1
 80207e6:	b510      	push	{r4, lr}
 80207e8:	eb01 0402 	add.w	r4, r1, r2
 80207ec:	d902      	bls.n	80207f4 <memmove+0x10>
 80207ee:	4284      	cmp	r4, r0
 80207f0:	4623      	mov	r3, r4
 80207f2:	d807      	bhi.n	8020804 <memmove+0x20>
 80207f4:	1e43      	subs	r3, r0, #1
 80207f6:	42a1      	cmp	r1, r4
 80207f8:	d008      	beq.n	802080c <memmove+0x28>
 80207fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80207fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020802:	e7f8      	b.n	80207f6 <memmove+0x12>
 8020804:	4402      	add	r2, r0
 8020806:	4601      	mov	r1, r0
 8020808:	428a      	cmp	r2, r1
 802080a:	d100      	bne.n	802080e <memmove+0x2a>
 802080c:	bd10      	pop	{r4, pc}
 802080e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020816:	e7f7      	b.n	8020808 <memmove+0x24>

08020818 <memset>:
 8020818:	4402      	add	r2, r0
 802081a:	4603      	mov	r3, r0
 802081c:	4293      	cmp	r3, r2
 802081e:	d100      	bne.n	8020822 <memset+0xa>
 8020820:	4770      	bx	lr
 8020822:	f803 1b01 	strb.w	r1, [r3], #1
 8020826:	e7f9      	b.n	802081c <memset+0x4>

08020828 <strncmp>:
 8020828:	b510      	push	{r4, lr}
 802082a:	b16a      	cbz	r2, 8020848 <strncmp+0x20>
 802082c:	3901      	subs	r1, #1
 802082e:	1884      	adds	r4, r0, r2
 8020830:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020834:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8020838:	429a      	cmp	r2, r3
 802083a:	d103      	bne.n	8020844 <strncmp+0x1c>
 802083c:	42a0      	cmp	r0, r4
 802083e:	d001      	beq.n	8020844 <strncmp+0x1c>
 8020840:	2a00      	cmp	r2, #0
 8020842:	d1f5      	bne.n	8020830 <strncmp+0x8>
 8020844:	1ad0      	subs	r0, r2, r3
 8020846:	bd10      	pop	{r4, pc}
 8020848:	4610      	mov	r0, r2
 802084a:	e7fc      	b.n	8020846 <strncmp+0x1e>

0802084c <_raise_r>:
 802084c:	291f      	cmp	r1, #31
 802084e:	b538      	push	{r3, r4, r5, lr}
 8020850:	4605      	mov	r5, r0
 8020852:	460c      	mov	r4, r1
 8020854:	d904      	bls.n	8020860 <_raise_r+0x14>
 8020856:	2316      	movs	r3, #22
 8020858:	6003      	str	r3, [r0, #0]
 802085a:	f04f 30ff 	mov.w	r0, #4294967295
 802085e:	bd38      	pop	{r3, r4, r5, pc}
 8020860:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8020862:	b112      	cbz	r2, 802086a <_raise_r+0x1e>
 8020864:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020868:	b94b      	cbnz	r3, 802087e <_raise_r+0x32>
 802086a:	4628      	mov	r0, r5
 802086c:	f000 f864 	bl	8020938 <_getpid_r>
 8020870:	4622      	mov	r2, r4
 8020872:	4601      	mov	r1, r0
 8020874:	4628      	mov	r0, r5
 8020876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802087a:	f000 b84b 	b.w	8020914 <_kill_r>
 802087e:	2b01      	cmp	r3, #1
 8020880:	d00a      	beq.n	8020898 <_raise_r+0x4c>
 8020882:	1c59      	adds	r1, r3, #1
 8020884:	d103      	bne.n	802088e <_raise_r+0x42>
 8020886:	2316      	movs	r3, #22
 8020888:	6003      	str	r3, [r0, #0]
 802088a:	2001      	movs	r0, #1
 802088c:	e7e7      	b.n	802085e <_raise_r+0x12>
 802088e:	2100      	movs	r1, #0
 8020890:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8020894:	4620      	mov	r0, r4
 8020896:	4798      	blx	r3
 8020898:	2000      	movs	r0, #0
 802089a:	e7e0      	b.n	802085e <_raise_r+0x12>

0802089c <raise>:
 802089c:	4b02      	ldr	r3, [pc, #8]	@ (80208a8 <raise+0xc>)
 802089e:	4601      	mov	r1, r0
 80208a0:	6818      	ldr	r0, [r3, #0]
 80208a2:	f7ff bfd3 	b.w	802084c <_raise_r>
 80208a6:	bf00      	nop
 80208a8:	240000e8 	.word	0x240000e8

080208ac <_close_r>:
 80208ac:	b538      	push	{r3, r4, r5, lr}
 80208ae:	4d06      	ldr	r5, [pc, #24]	@ (80208c8 <_close_r+0x1c>)
 80208b0:	2300      	movs	r3, #0
 80208b2:	4604      	mov	r4, r0
 80208b4:	4608      	mov	r0, r1
 80208b6:	602b      	str	r3, [r5, #0]
 80208b8:	f7e0 ff00 	bl	80016bc <_close>
 80208bc:	1c43      	adds	r3, r0, #1
 80208be:	d102      	bne.n	80208c6 <_close_r+0x1a>
 80208c0:	682b      	ldr	r3, [r5, #0]
 80208c2:	b103      	cbz	r3, 80208c6 <_close_r+0x1a>
 80208c4:	6023      	str	r3, [r4, #0]
 80208c6:	bd38      	pop	{r3, r4, r5, pc}
 80208c8:	24025bbc 	.word	0x24025bbc

080208cc <_lseek_r>:
 80208cc:	b538      	push	{r3, r4, r5, lr}
 80208ce:	4d07      	ldr	r5, [pc, #28]	@ (80208ec <_lseek_r+0x20>)
 80208d0:	4604      	mov	r4, r0
 80208d2:	4608      	mov	r0, r1
 80208d4:	4611      	mov	r1, r2
 80208d6:	2200      	movs	r2, #0
 80208d8:	602a      	str	r2, [r5, #0]
 80208da:	461a      	mov	r2, r3
 80208dc:	f7e0 fef8 	bl	80016d0 <_lseek>
 80208e0:	1c43      	adds	r3, r0, #1
 80208e2:	d102      	bne.n	80208ea <_lseek_r+0x1e>
 80208e4:	682b      	ldr	r3, [r5, #0]
 80208e6:	b103      	cbz	r3, 80208ea <_lseek_r+0x1e>
 80208e8:	6023      	str	r3, [r4, #0]
 80208ea:	bd38      	pop	{r3, r4, r5, pc}
 80208ec:	24025bbc 	.word	0x24025bbc

080208f0 <_read_r>:
 80208f0:	b538      	push	{r3, r4, r5, lr}
 80208f2:	4d07      	ldr	r5, [pc, #28]	@ (8020910 <_read_r+0x20>)
 80208f4:	4604      	mov	r4, r0
 80208f6:	4608      	mov	r0, r1
 80208f8:	4611      	mov	r1, r2
 80208fa:	2200      	movs	r2, #0
 80208fc:	602a      	str	r2, [r5, #0]
 80208fe:	461a      	mov	r2, r3
 8020900:	f7e0 fec0 	bl	8001684 <_read>
 8020904:	1c43      	adds	r3, r0, #1
 8020906:	d102      	bne.n	802090e <_read_r+0x1e>
 8020908:	682b      	ldr	r3, [r5, #0]
 802090a:	b103      	cbz	r3, 802090e <_read_r+0x1e>
 802090c:	6023      	str	r3, [r4, #0]
 802090e:	bd38      	pop	{r3, r4, r5, pc}
 8020910:	24025bbc 	.word	0x24025bbc

08020914 <_kill_r>:
 8020914:	b538      	push	{r3, r4, r5, lr}
 8020916:	4d07      	ldr	r5, [pc, #28]	@ (8020934 <_kill_r+0x20>)
 8020918:	2300      	movs	r3, #0
 802091a:	4604      	mov	r4, r0
 802091c:	4608      	mov	r0, r1
 802091e:	4611      	mov	r1, r2
 8020920:	602b      	str	r3, [r5, #0]
 8020922:	f7e0 fea1 	bl	8001668 <_kill>
 8020926:	1c43      	adds	r3, r0, #1
 8020928:	d102      	bne.n	8020930 <_kill_r+0x1c>
 802092a:	682b      	ldr	r3, [r5, #0]
 802092c:	b103      	cbz	r3, 8020930 <_kill_r+0x1c>
 802092e:	6023      	str	r3, [r4, #0]
 8020930:	bd38      	pop	{r3, r4, r5, pc}
 8020932:	bf00      	nop
 8020934:	24025bbc 	.word	0x24025bbc

08020938 <_getpid_r>:
 8020938:	f7e0 be94 	b.w	8001664 <_getpid>

0802093c <_sbrk_r>:
 802093c:	b538      	push	{r3, r4, r5, lr}
 802093e:	4d06      	ldr	r5, [pc, #24]	@ (8020958 <_sbrk_r+0x1c>)
 8020940:	2300      	movs	r3, #0
 8020942:	4604      	mov	r4, r0
 8020944:	4608      	mov	r0, r1
 8020946:	602b      	str	r3, [r5, #0]
 8020948:	f7e0 fec4 	bl	80016d4 <_sbrk>
 802094c:	1c43      	adds	r3, r0, #1
 802094e:	d102      	bne.n	8020956 <_sbrk_r+0x1a>
 8020950:	682b      	ldr	r3, [r5, #0]
 8020952:	b103      	cbz	r3, 8020956 <_sbrk_r+0x1a>
 8020954:	6023      	str	r3, [r4, #0]
 8020956:	bd38      	pop	{r3, r4, r5, pc}
 8020958:	24025bbc 	.word	0x24025bbc

0802095c <_write_r>:
 802095c:	b538      	push	{r3, r4, r5, lr}
 802095e:	4d07      	ldr	r5, [pc, #28]	@ (802097c <_write_r+0x20>)
 8020960:	4604      	mov	r4, r0
 8020962:	4608      	mov	r0, r1
 8020964:	4611      	mov	r1, r2
 8020966:	2200      	movs	r2, #0
 8020968:	602a      	str	r2, [r5, #0]
 802096a:	461a      	mov	r2, r3
 802096c:	f7e0 fe98 	bl	80016a0 <_write>
 8020970:	1c43      	adds	r3, r0, #1
 8020972:	d102      	bne.n	802097a <_write_r+0x1e>
 8020974:	682b      	ldr	r3, [r5, #0]
 8020976:	b103      	cbz	r3, 802097a <_write_r+0x1e>
 8020978:	6023      	str	r3, [r4, #0]
 802097a:	bd38      	pop	{r3, r4, r5, pc}
 802097c:	24025bbc 	.word	0x24025bbc

08020980 <__errno>:
 8020980:	4b01      	ldr	r3, [pc, #4]	@ (8020988 <__errno+0x8>)
 8020982:	6818      	ldr	r0, [r3, #0]
 8020984:	4770      	bx	lr
 8020986:	bf00      	nop
 8020988:	240000e8 	.word	0x240000e8

0802098c <__libc_init_array>:
 802098c:	b570      	push	{r4, r5, r6, lr}
 802098e:	4d0d      	ldr	r5, [pc, #52]	@ (80209c4 <__libc_init_array+0x38>)
 8020990:	4c0d      	ldr	r4, [pc, #52]	@ (80209c8 <__libc_init_array+0x3c>)
 8020992:	1b64      	subs	r4, r4, r5
 8020994:	10a4      	asrs	r4, r4, #2
 8020996:	2600      	movs	r6, #0
 8020998:	42a6      	cmp	r6, r4
 802099a:	d109      	bne.n	80209b0 <__libc_init_array+0x24>
 802099c:	4d0b      	ldr	r5, [pc, #44]	@ (80209cc <__libc_init_array+0x40>)
 802099e:	4c0c      	ldr	r4, [pc, #48]	@ (80209d0 <__libc_init_array+0x44>)
 80209a0:	f000 fcd0 	bl	8021344 <_init>
 80209a4:	1b64      	subs	r4, r4, r5
 80209a6:	10a4      	asrs	r4, r4, #2
 80209a8:	2600      	movs	r6, #0
 80209aa:	42a6      	cmp	r6, r4
 80209ac:	d105      	bne.n	80209ba <__libc_init_array+0x2e>
 80209ae:	bd70      	pop	{r4, r5, r6, pc}
 80209b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80209b4:	4798      	blx	r3
 80209b6:	3601      	adds	r6, #1
 80209b8:	e7ee      	b.n	8020998 <__libc_init_array+0xc>
 80209ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80209be:	4798      	blx	r3
 80209c0:	3601      	adds	r6, #1
 80209c2:	e7f2      	b.n	80209aa <__libc_init_array+0x1e>
 80209c4:	08024994 	.word	0x08024994
 80209c8:	08024994 	.word	0x08024994
 80209cc:	08024994 	.word	0x08024994
 80209d0:	080249b0 	.word	0x080249b0

080209d4 <__retarget_lock_init_recursive>:
 80209d4:	4770      	bx	lr

080209d6 <__retarget_lock_acquire_recursive>:
 80209d6:	4770      	bx	lr

080209d8 <__retarget_lock_release_recursive>:
 80209d8:	4770      	bx	lr

080209da <memcpy>:
 80209da:	440a      	add	r2, r1
 80209dc:	4291      	cmp	r1, r2
 80209de:	f100 33ff 	add.w	r3, r0, #4294967295
 80209e2:	d100      	bne.n	80209e6 <memcpy+0xc>
 80209e4:	4770      	bx	lr
 80209e6:	b510      	push	{r4, lr}
 80209e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80209ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80209f0:	4291      	cmp	r1, r2
 80209f2:	d1f9      	bne.n	80209e8 <memcpy+0xe>
 80209f4:	bd10      	pop	{r4, pc}
	...

080209f8 <__register_exitproc>:
 80209f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80209fc:	4d27      	ldr	r5, [pc, #156]	@ (8020a9c <__register_exitproc+0xa4>)
 80209fe:	4607      	mov	r7, r0
 8020a00:	6828      	ldr	r0, [r5, #0]
 8020a02:	4691      	mov	r9, r2
 8020a04:	460e      	mov	r6, r1
 8020a06:	4698      	mov	r8, r3
 8020a08:	f7ff ffe5 	bl	80209d6 <__retarget_lock_acquire_recursive>
 8020a0c:	4a24      	ldr	r2, [pc, #144]	@ (8020aa0 <__register_exitproc+0xa8>)
 8020a0e:	6814      	ldr	r4, [r2, #0]
 8020a10:	b93c      	cbnz	r4, 8020a22 <__register_exitproc+0x2a>
 8020a12:	4b24      	ldr	r3, [pc, #144]	@ (8020aa4 <__register_exitproc+0xac>)
 8020a14:	6013      	str	r3, [r2, #0]
 8020a16:	4a24      	ldr	r2, [pc, #144]	@ (8020aa8 <__register_exitproc+0xb0>)
 8020a18:	b112      	cbz	r2, 8020a20 <__register_exitproc+0x28>
 8020a1a:	6812      	ldr	r2, [r2, #0]
 8020a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8020a20:	4c20      	ldr	r4, [pc, #128]	@ (8020aa4 <__register_exitproc+0xac>)
 8020a22:	6863      	ldr	r3, [r4, #4]
 8020a24:	2b1f      	cmp	r3, #31
 8020a26:	dd06      	ble.n	8020a36 <__register_exitproc+0x3e>
 8020a28:	6828      	ldr	r0, [r5, #0]
 8020a2a:	f7ff ffd5 	bl	80209d8 <__retarget_lock_release_recursive>
 8020a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8020a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020a36:	b32f      	cbz	r7, 8020a84 <__register_exitproc+0x8c>
 8020a38:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8020a3c:	b968      	cbnz	r0, 8020a5a <__register_exitproc+0x62>
 8020a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8020aac <__register_exitproc+0xb4>)
 8020a40:	2b00      	cmp	r3, #0
 8020a42:	d0f1      	beq.n	8020a28 <__register_exitproc+0x30>
 8020a44:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8020a48:	f7ff fc16 	bl	8020278 <malloc>
 8020a4c:	2800      	cmp	r0, #0
 8020a4e:	d0eb      	beq.n	8020a28 <__register_exitproc+0x30>
 8020a50:	2300      	movs	r3, #0
 8020a52:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8020a56:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8020a5a:	6863      	ldr	r3, [r4, #4]
 8020a5c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8020a60:	2201      	movs	r2, #1
 8020a62:	409a      	lsls	r2, r3
 8020a64:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8020a68:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8020a6c:	4313      	orrs	r3, r2
 8020a6e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8020a72:	2f02      	cmp	r7, #2
 8020a74:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8020a78:	bf02      	ittt	eq
 8020a7a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8020a7e:	4313      	orreq	r3, r2
 8020a80:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8020a84:	6863      	ldr	r3, [r4, #4]
 8020a86:	6828      	ldr	r0, [r5, #0]
 8020a88:	1c5a      	adds	r2, r3, #1
 8020a8a:	3302      	adds	r3, #2
 8020a8c:	6062      	str	r2, [r4, #4]
 8020a8e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8020a92:	f7ff ffa1 	bl	80209d8 <__retarget_lock_release_recursive>
 8020a96:	2000      	movs	r0, #0
 8020a98:	e7cb      	b.n	8020a32 <__register_exitproc+0x3a>
 8020a9a:	bf00      	nop
 8020a9c:	24000138 	.word	0x24000138
 8020aa0:	24025c50 	.word	0x24025c50
 8020aa4:	24025bc4 	.word	0x24025bc4
 8020aa8:	08024434 	.word	0x08024434
 8020aac:	08020279 	.word	0x08020279

08020ab0 <_free_r>:
 8020ab0:	b538      	push	{r3, r4, r5, lr}
 8020ab2:	4605      	mov	r5, r0
 8020ab4:	2900      	cmp	r1, #0
 8020ab6:	d041      	beq.n	8020b3c <_free_r+0x8c>
 8020ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020abc:	1f0c      	subs	r4, r1, #4
 8020abe:	2b00      	cmp	r3, #0
 8020ac0:	bfb8      	it	lt
 8020ac2:	18e4      	addlt	r4, r4, r3
 8020ac4:	f7ff fc8a 	bl	80203dc <__malloc_lock>
 8020ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8020b40 <_free_r+0x90>)
 8020aca:	6813      	ldr	r3, [r2, #0]
 8020acc:	b933      	cbnz	r3, 8020adc <_free_r+0x2c>
 8020ace:	6063      	str	r3, [r4, #4]
 8020ad0:	6014      	str	r4, [r2, #0]
 8020ad2:	4628      	mov	r0, r5
 8020ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020ad8:	f7ff bc86 	b.w	80203e8 <__malloc_unlock>
 8020adc:	42a3      	cmp	r3, r4
 8020ade:	d908      	bls.n	8020af2 <_free_r+0x42>
 8020ae0:	6820      	ldr	r0, [r4, #0]
 8020ae2:	1821      	adds	r1, r4, r0
 8020ae4:	428b      	cmp	r3, r1
 8020ae6:	bf01      	itttt	eq
 8020ae8:	6819      	ldreq	r1, [r3, #0]
 8020aea:	685b      	ldreq	r3, [r3, #4]
 8020aec:	1809      	addeq	r1, r1, r0
 8020aee:	6021      	streq	r1, [r4, #0]
 8020af0:	e7ed      	b.n	8020ace <_free_r+0x1e>
 8020af2:	461a      	mov	r2, r3
 8020af4:	685b      	ldr	r3, [r3, #4]
 8020af6:	b10b      	cbz	r3, 8020afc <_free_r+0x4c>
 8020af8:	42a3      	cmp	r3, r4
 8020afa:	d9fa      	bls.n	8020af2 <_free_r+0x42>
 8020afc:	6811      	ldr	r1, [r2, #0]
 8020afe:	1850      	adds	r0, r2, r1
 8020b00:	42a0      	cmp	r0, r4
 8020b02:	d10b      	bne.n	8020b1c <_free_r+0x6c>
 8020b04:	6820      	ldr	r0, [r4, #0]
 8020b06:	4401      	add	r1, r0
 8020b08:	1850      	adds	r0, r2, r1
 8020b0a:	4283      	cmp	r3, r0
 8020b0c:	6011      	str	r1, [r2, #0]
 8020b0e:	d1e0      	bne.n	8020ad2 <_free_r+0x22>
 8020b10:	6818      	ldr	r0, [r3, #0]
 8020b12:	685b      	ldr	r3, [r3, #4]
 8020b14:	6053      	str	r3, [r2, #4]
 8020b16:	4408      	add	r0, r1
 8020b18:	6010      	str	r0, [r2, #0]
 8020b1a:	e7da      	b.n	8020ad2 <_free_r+0x22>
 8020b1c:	d902      	bls.n	8020b24 <_free_r+0x74>
 8020b1e:	230c      	movs	r3, #12
 8020b20:	602b      	str	r3, [r5, #0]
 8020b22:	e7d6      	b.n	8020ad2 <_free_r+0x22>
 8020b24:	6820      	ldr	r0, [r4, #0]
 8020b26:	1821      	adds	r1, r4, r0
 8020b28:	428b      	cmp	r3, r1
 8020b2a:	bf04      	itt	eq
 8020b2c:	6819      	ldreq	r1, [r3, #0]
 8020b2e:	685b      	ldreq	r3, [r3, #4]
 8020b30:	6063      	str	r3, [r4, #4]
 8020b32:	bf04      	itt	eq
 8020b34:	1809      	addeq	r1, r1, r0
 8020b36:	6021      	streq	r1, [r4, #0]
 8020b38:	6054      	str	r4, [r2, #4]
 8020b3a:	e7ca      	b.n	8020ad2 <_free_r+0x22>
 8020b3c:	bd38      	pop	{r3, r4, r5, pc}
 8020b3e:	bf00      	nop
 8020b40:	24025a7c 	.word	0x24025a7c

08020b44 <__sfputc_r>:
 8020b44:	6893      	ldr	r3, [r2, #8]
 8020b46:	3b01      	subs	r3, #1
 8020b48:	2b00      	cmp	r3, #0
 8020b4a:	b410      	push	{r4}
 8020b4c:	6093      	str	r3, [r2, #8]
 8020b4e:	da08      	bge.n	8020b62 <__sfputc_r+0x1e>
 8020b50:	6994      	ldr	r4, [r2, #24]
 8020b52:	42a3      	cmp	r3, r4
 8020b54:	db01      	blt.n	8020b5a <__sfputc_r+0x16>
 8020b56:	290a      	cmp	r1, #10
 8020b58:	d103      	bne.n	8020b62 <__sfputc_r+0x1e>
 8020b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020b5e:	f7ff bdac 	b.w	80206ba <__swbuf_r>
 8020b62:	6813      	ldr	r3, [r2, #0]
 8020b64:	1c58      	adds	r0, r3, #1
 8020b66:	6010      	str	r0, [r2, #0]
 8020b68:	7019      	strb	r1, [r3, #0]
 8020b6a:	4608      	mov	r0, r1
 8020b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020b70:	4770      	bx	lr

08020b72 <__sfputs_r>:
 8020b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b74:	4606      	mov	r6, r0
 8020b76:	460f      	mov	r7, r1
 8020b78:	4614      	mov	r4, r2
 8020b7a:	18d5      	adds	r5, r2, r3
 8020b7c:	42ac      	cmp	r4, r5
 8020b7e:	d101      	bne.n	8020b84 <__sfputs_r+0x12>
 8020b80:	2000      	movs	r0, #0
 8020b82:	e007      	b.n	8020b94 <__sfputs_r+0x22>
 8020b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b88:	463a      	mov	r2, r7
 8020b8a:	4630      	mov	r0, r6
 8020b8c:	f7ff ffda 	bl	8020b44 <__sfputc_r>
 8020b90:	1c43      	adds	r3, r0, #1
 8020b92:	d1f3      	bne.n	8020b7c <__sfputs_r+0xa>
 8020b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020b98 <_vfiprintf_r>:
 8020b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b9c:	460d      	mov	r5, r1
 8020b9e:	b09d      	sub	sp, #116	@ 0x74
 8020ba0:	4614      	mov	r4, r2
 8020ba2:	4698      	mov	r8, r3
 8020ba4:	4606      	mov	r6, r0
 8020ba6:	b118      	cbz	r0, 8020bb0 <_vfiprintf_r+0x18>
 8020ba8:	6a03      	ldr	r3, [r0, #32]
 8020baa:	b90b      	cbnz	r3, 8020bb0 <_vfiprintf_r+0x18>
 8020bac:	f7ff fcfa 	bl	80205a4 <__sinit>
 8020bb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020bb2:	07d9      	lsls	r1, r3, #31
 8020bb4:	d405      	bmi.n	8020bc2 <_vfiprintf_r+0x2a>
 8020bb6:	89ab      	ldrh	r3, [r5, #12]
 8020bb8:	059a      	lsls	r2, r3, #22
 8020bba:	d402      	bmi.n	8020bc2 <_vfiprintf_r+0x2a>
 8020bbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020bbe:	f7ff ff0a 	bl	80209d6 <__retarget_lock_acquire_recursive>
 8020bc2:	89ab      	ldrh	r3, [r5, #12]
 8020bc4:	071b      	lsls	r3, r3, #28
 8020bc6:	d501      	bpl.n	8020bcc <_vfiprintf_r+0x34>
 8020bc8:	692b      	ldr	r3, [r5, #16]
 8020bca:	b99b      	cbnz	r3, 8020bf4 <_vfiprintf_r+0x5c>
 8020bcc:	4629      	mov	r1, r5
 8020bce:	4630      	mov	r0, r6
 8020bd0:	f7ff fdb2 	bl	8020738 <__swsetup_r>
 8020bd4:	b170      	cbz	r0, 8020bf4 <_vfiprintf_r+0x5c>
 8020bd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020bd8:	07dc      	lsls	r4, r3, #31
 8020bda:	d504      	bpl.n	8020be6 <_vfiprintf_r+0x4e>
 8020bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8020be0:	b01d      	add	sp, #116	@ 0x74
 8020be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020be6:	89ab      	ldrh	r3, [r5, #12]
 8020be8:	0598      	lsls	r0, r3, #22
 8020bea:	d4f7      	bmi.n	8020bdc <_vfiprintf_r+0x44>
 8020bec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020bee:	f7ff fef3 	bl	80209d8 <__retarget_lock_release_recursive>
 8020bf2:	e7f3      	b.n	8020bdc <_vfiprintf_r+0x44>
 8020bf4:	2300      	movs	r3, #0
 8020bf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8020bf8:	2320      	movs	r3, #32
 8020bfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8020c02:	2330      	movs	r3, #48	@ 0x30
 8020c04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020db4 <_vfiprintf_r+0x21c>
 8020c08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020c0c:	f04f 0901 	mov.w	r9, #1
 8020c10:	4623      	mov	r3, r4
 8020c12:	469a      	mov	sl, r3
 8020c14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020c18:	b10a      	cbz	r2, 8020c1e <_vfiprintf_r+0x86>
 8020c1a:	2a25      	cmp	r2, #37	@ 0x25
 8020c1c:	d1f9      	bne.n	8020c12 <_vfiprintf_r+0x7a>
 8020c1e:	ebba 0b04 	subs.w	fp, sl, r4
 8020c22:	d00b      	beq.n	8020c3c <_vfiprintf_r+0xa4>
 8020c24:	465b      	mov	r3, fp
 8020c26:	4622      	mov	r2, r4
 8020c28:	4629      	mov	r1, r5
 8020c2a:	4630      	mov	r0, r6
 8020c2c:	f7ff ffa1 	bl	8020b72 <__sfputs_r>
 8020c30:	3001      	adds	r0, #1
 8020c32:	f000 80a7 	beq.w	8020d84 <_vfiprintf_r+0x1ec>
 8020c36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020c38:	445a      	add	r2, fp
 8020c3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8020c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8020c40:	2b00      	cmp	r3, #0
 8020c42:	f000 809f 	beq.w	8020d84 <_vfiprintf_r+0x1ec>
 8020c46:	2300      	movs	r3, #0
 8020c48:	f04f 32ff 	mov.w	r2, #4294967295
 8020c4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020c50:	f10a 0a01 	add.w	sl, sl, #1
 8020c54:	9304      	str	r3, [sp, #16]
 8020c56:	9307      	str	r3, [sp, #28]
 8020c58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020c5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8020c5e:	4654      	mov	r4, sl
 8020c60:	2205      	movs	r2, #5
 8020c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020c66:	4853      	ldr	r0, [pc, #332]	@ (8020db4 <_vfiprintf_r+0x21c>)
 8020c68:	f7df fb3a 	bl	80002e0 <memchr>
 8020c6c:	9a04      	ldr	r2, [sp, #16]
 8020c6e:	b9d8      	cbnz	r0, 8020ca8 <_vfiprintf_r+0x110>
 8020c70:	06d1      	lsls	r1, r2, #27
 8020c72:	bf44      	itt	mi
 8020c74:	2320      	movmi	r3, #32
 8020c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020c7a:	0713      	lsls	r3, r2, #28
 8020c7c:	bf44      	itt	mi
 8020c7e:	232b      	movmi	r3, #43	@ 0x2b
 8020c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020c84:	f89a 3000 	ldrb.w	r3, [sl]
 8020c88:	2b2a      	cmp	r3, #42	@ 0x2a
 8020c8a:	d015      	beq.n	8020cb8 <_vfiprintf_r+0x120>
 8020c8c:	9a07      	ldr	r2, [sp, #28]
 8020c8e:	4654      	mov	r4, sl
 8020c90:	2000      	movs	r0, #0
 8020c92:	f04f 0c0a 	mov.w	ip, #10
 8020c96:	4621      	mov	r1, r4
 8020c98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020c9c:	3b30      	subs	r3, #48	@ 0x30
 8020c9e:	2b09      	cmp	r3, #9
 8020ca0:	d94b      	bls.n	8020d3a <_vfiprintf_r+0x1a2>
 8020ca2:	b1b0      	cbz	r0, 8020cd2 <_vfiprintf_r+0x13a>
 8020ca4:	9207      	str	r2, [sp, #28]
 8020ca6:	e014      	b.n	8020cd2 <_vfiprintf_r+0x13a>
 8020ca8:	eba0 0308 	sub.w	r3, r0, r8
 8020cac:	fa09 f303 	lsl.w	r3, r9, r3
 8020cb0:	4313      	orrs	r3, r2
 8020cb2:	9304      	str	r3, [sp, #16]
 8020cb4:	46a2      	mov	sl, r4
 8020cb6:	e7d2      	b.n	8020c5e <_vfiprintf_r+0xc6>
 8020cb8:	9b03      	ldr	r3, [sp, #12]
 8020cba:	1d19      	adds	r1, r3, #4
 8020cbc:	681b      	ldr	r3, [r3, #0]
 8020cbe:	9103      	str	r1, [sp, #12]
 8020cc0:	2b00      	cmp	r3, #0
 8020cc2:	bfbb      	ittet	lt
 8020cc4:	425b      	neglt	r3, r3
 8020cc6:	f042 0202 	orrlt.w	r2, r2, #2
 8020cca:	9307      	strge	r3, [sp, #28]
 8020ccc:	9307      	strlt	r3, [sp, #28]
 8020cce:	bfb8      	it	lt
 8020cd0:	9204      	strlt	r2, [sp, #16]
 8020cd2:	7823      	ldrb	r3, [r4, #0]
 8020cd4:	2b2e      	cmp	r3, #46	@ 0x2e
 8020cd6:	d10a      	bne.n	8020cee <_vfiprintf_r+0x156>
 8020cd8:	7863      	ldrb	r3, [r4, #1]
 8020cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8020cdc:	d132      	bne.n	8020d44 <_vfiprintf_r+0x1ac>
 8020cde:	9b03      	ldr	r3, [sp, #12]
 8020ce0:	1d1a      	adds	r2, r3, #4
 8020ce2:	681b      	ldr	r3, [r3, #0]
 8020ce4:	9203      	str	r2, [sp, #12]
 8020ce6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020cea:	3402      	adds	r4, #2
 8020cec:	9305      	str	r3, [sp, #20]
 8020cee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8020dc4 <_vfiprintf_r+0x22c>
 8020cf2:	7821      	ldrb	r1, [r4, #0]
 8020cf4:	2203      	movs	r2, #3
 8020cf6:	4650      	mov	r0, sl
 8020cf8:	f7df faf2 	bl	80002e0 <memchr>
 8020cfc:	b138      	cbz	r0, 8020d0e <_vfiprintf_r+0x176>
 8020cfe:	9b04      	ldr	r3, [sp, #16]
 8020d00:	eba0 000a 	sub.w	r0, r0, sl
 8020d04:	2240      	movs	r2, #64	@ 0x40
 8020d06:	4082      	lsls	r2, r0
 8020d08:	4313      	orrs	r3, r2
 8020d0a:	3401      	adds	r4, #1
 8020d0c:	9304      	str	r3, [sp, #16]
 8020d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020d12:	4829      	ldr	r0, [pc, #164]	@ (8020db8 <_vfiprintf_r+0x220>)
 8020d14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020d18:	2206      	movs	r2, #6
 8020d1a:	f7df fae1 	bl	80002e0 <memchr>
 8020d1e:	2800      	cmp	r0, #0
 8020d20:	d03f      	beq.n	8020da2 <_vfiprintf_r+0x20a>
 8020d22:	4b26      	ldr	r3, [pc, #152]	@ (8020dbc <_vfiprintf_r+0x224>)
 8020d24:	bb1b      	cbnz	r3, 8020d6e <_vfiprintf_r+0x1d6>
 8020d26:	9b03      	ldr	r3, [sp, #12]
 8020d28:	3307      	adds	r3, #7
 8020d2a:	f023 0307 	bic.w	r3, r3, #7
 8020d2e:	3308      	adds	r3, #8
 8020d30:	9303      	str	r3, [sp, #12]
 8020d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d34:	443b      	add	r3, r7
 8020d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8020d38:	e76a      	b.n	8020c10 <_vfiprintf_r+0x78>
 8020d3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8020d3e:	460c      	mov	r4, r1
 8020d40:	2001      	movs	r0, #1
 8020d42:	e7a8      	b.n	8020c96 <_vfiprintf_r+0xfe>
 8020d44:	2300      	movs	r3, #0
 8020d46:	3401      	adds	r4, #1
 8020d48:	9305      	str	r3, [sp, #20]
 8020d4a:	4619      	mov	r1, r3
 8020d4c:	f04f 0c0a 	mov.w	ip, #10
 8020d50:	4620      	mov	r0, r4
 8020d52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020d56:	3a30      	subs	r2, #48	@ 0x30
 8020d58:	2a09      	cmp	r2, #9
 8020d5a:	d903      	bls.n	8020d64 <_vfiprintf_r+0x1cc>
 8020d5c:	2b00      	cmp	r3, #0
 8020d5e:	d0c6      	beq.n	8020cee <_vfiprintf_r+0x156>
 8020d60:	9105      	str	r1, [sp, #20]
 8020d62:	e7c4      	b.n	8020cee <_vfiprintf_r+0x156>
 8020d64:	fb0c 2101 	mla	r1, ip, r1, r2
 8020d68:	4604      	mov	r4, r0
 8020d6a:	2301      	movs	r3, #1
 8020d6c:	e7f0      	b.n	8020d50 <_vfiprintf_r+0x1b8>
 8020d6e:	ab03      	add	r3, sp, #12
 8020d70:	9300      	str	r3, [sp, #0]
 8020d72:	462a      	mov	r2, r5
 8020d74:	4b12      	ldr	r3, [pc, #72]	@ (8020dc0 <_vfiprintf_r+0x228>)
 8020d76:	a904      	add	r1, sp, #16
 8020d78:	4630      	mov	r0, r6
 8020d7a:	f3af 8000 	nop.w
 8020d7e:	4607      	mov	r7, r0
 8020d80:	1c78      	adds	r0, r7, #1
 8020d82:	d1d6      	bne.n	8020d32 <_vfiprintf_r+0x19a>
 8020d84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020d86:	07d9      	lsls	r1, r3, #31
 8020d88:	d405      	bmi.n	8020d96 <_vfiprintf_r+0x1fe>
 8020d8a:	89ab      	ldrh	r3, [r5, #12]
 8020d8c:	059a      	lsls	r2, r3, #22
 8020d8e:	d402      	bmi.n	8020d96 <_vfiprintf_r+0x1fe>
 8020d90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020d92:	f7ff fe21 	bl	80209d8 <__retarget_lock_release_recursive>
 8020d96:	89ab      	ldrh	r3, [r5, #12]
 8020d98:	065b      	lsls	r3, r3, #25
 8020d9a:	f53f af1f 	bmi.w	8020bdc <_vfiprintf_r+0x44>
 8020d9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020da0:	e71e      	b.n	8020be0 <_vfiprintf_r+0x48>
 8020da2:	ab03      	add	r3, sp, #12
 8020da4:	9300      	str	r3, [sp, #0]
 8020da6:	462a      	mov	r2, r5
 8020da8:	4b05      	ldr	r3, [pc, #20]	@ (8020dc0 <_vfiprintf_r+0x228>)
 8020daa:	a904      	add	r1, sp, #16
 8020dac:	4630      	mov	r0, r6
 8020dae:	f000 f879 	bl	8020ea4 <_printf_i>
 8020db2:	e7e4      	b.n	8020d7e <_vfiprintf_r+0x1e6>
 8020db4:	08024438 	.word	0x08024438
 8020db8:	08024442 	.word	0x08024442
 8020dbc:	00000000 	.word	0x00000000
 8020dc0:	08020b73 	.word	0x08020b73
 8020dc4:	0802443e 	.word	0x0802443e

08020dc8 <_printf_common>:
 8020dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020dcc:	4616      	mov	r6, r2
 8020dce:	4698      	mov	r8, r3
 8020dd0:	688a      	ldr	r2, [r1, #8]
 8020dd2:	690b      	ldr	r3, [r1, #16]
 8020dd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020dd8:	4293      	cmp	r3, r2
 8020dda:	bfb8      	it	lt
 8020ddc:	4613      	movlt	r3, r2
 8020dde:	6033      	str	r3, [r6, #0]
 8020de0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020de4:	4607      	mov	r7, r0
 8020de6:	460c      	mov	r4, r1
 8020de8:	b10a      	cbz	r2, 8020dee <_printf_common+0x26>
 8020dea:	3301      	adds	r3, #1
 8020dec:	6033      	str	r3, [r6, #0]
 8020dee:	6823      	ldr	r3, [r4, #0]
 8020df0:	0699      	lsls	r1, r3, #26
 8020df2:	bf42      	ittt	mi
 8020df4:	6833      	ldrmi	r3, [r6, #0]
 8020df6:	3302      	addmi	r3, #2
 8020df8:	6033      	strmi	r3, [r6, #0]
 8020dfa:	6825      	ldr	r5, [r4, #0]
 8020dfc:	f015 0506 	ands.w	r5, r5, #6
 8020e00:	d106      	bne.n	8020e10 <_printf_common+0x48>
 8020e02:	f104 0a19 	add.w	sl, r4, #25
 8020e06:	68e3      	ldr	r3, [r4, #12]
 8020e08:	6832      	ldr	r2, [r6, #0]
 8020e0a:	1a9b      	subs	r3, r3, r2
 8020e0c:	42ab      	cmp	r3, r5
 8020e0e:	dc26      	bgt.n	8020e5e <_printf_common+0x96>
 8020e10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8020e14:	6822      	ldr	r2, [r4, #0]
 8020e16:	3b00      	subs	r3, #0
 8020e18:	bf18      	it	ne
 8020e1a:	2301      	movne	r3, #1
 8020e1c:	0692      	lsls	r2, r2, #26
 8020e1e:	d42b      	bmi.n	8020e78 <_printf_common+0xb0>
 8020e20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8020e24:	4641      	mov	r1, r8
 8020e26:	4638      	mov	r0, r7
 8020e28:	47c8      	blx	r9
 8020e2a:	3001      	adds	r0, #1
 8020e2c:	d01e      	beq.n	8020e6c <_printf_common+0xa4>
 8020e2e:	6823      	ldr	r3, [r4, #0]
 8020e30:	6922      	ldr	r2, [r4, #16]
 8020e32:	f003 0306 	and.w	r3, r3, #6
 8020e36:	2b04      	cmp	r3, #4
 8020e38:	bf02      	ittt	eq
 8020e3a:	68e5      	ldreq	r5, [r4, #12]
 8020e3c:	6833      	ldreq	r3, [r6, #0]
 8020e3e:	1aed      	subeq	r5, r5, r3
 8020e40:	68a3      	ldr	r3, [r4, #8]
 8020e42:	bf0c      	ite	eq
 8020e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020e48:	2500      	movne	r5, #0
 8020e4a:	4293      	cmp	r3, r2
 8020e4c:	bfc4      	itt	gt
 8020e4e:	1a9b      	subgt	r3, r3, r2
 8020e50:	18ed      	addgt	r5, r5, r3
 8020e52:	2600      	movs	r6, #0
 8020e54:	341a      	adds	r4, #26
 8020e56:	42b5      	cmp	r5, r6
 8020e58:	d11a      	bne.n	8020e90 <_printf_common+0xc8>
 8020e5a:	2000      	movs	r0, #0
 8020e5c:	e008      	b.n	8020e70 <_printf_common+0xa8>
 8020e5e:	2301      	movs	r3, #1
 8020e60:	4652      	mov	r2, sl
 8020e62:	4641      	mov	r1, r8
 8020e64:	4638      	mov	r0, r7
 8020e66:	47c8      	blx	r9
 8020e68:	3001      	adds	r0, #1
 8020e6a:	d103      	bne.n	8020e74 <_printf_common+0xac>
 8020e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8020e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e74:	3501      	adds	r5, #1
 8020e76:	e7c6      	b.n	8020e06 <_printf_common+0x3e>
 8020e78:	18e1      	adds	r1, r4, r3
 8020e7a:	1c5a      	adds	r2, r3, #1
 8020e7c:	2030      	movs	r0, #48	@ 0x30
 8020e7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8020e82:	4422      	add	r2, r4
 8020e84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8020e88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8020e8c:	3302      	adds	r3, #2
 8020e8e:	e7c7      	b.n	8020e20 <_printf_common+0x58>
 8020e90:	2301      	movs	r3, #1
 8020e92:	4622      	mov	r2, r4
 8020e94:	4641      	mov	r1, r8
 8020e96:	4638      	mov	r0, r7
 8020e98:	47c8      	blx	r9
 8020e9a:	3001      	adds	r0, #1
 8020e9c:	d0e6      	beq.n	8020e6c <_printf_common+0xa4>
 8020e9e:	3601      	adds	r6, #1
 8020ea0:	e7d9      	b.n	8020e56 <_printf_common+0x8e>
	...

08020ea4 <_printf_i>:
 8020ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020ea8:	7e0f      	ldrb	r7, [r1, #24]
 8020eaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8020eac:	2f78      	cmp	r7, #120	@ 0x78
 8020eae:	4691      	mov	r9, r2
 8020eb0:	4680      	mov	r8, r0
 8020eb2:	460c      	mov	r4, r1
 8020eb4:	469a      	mov	sl, r3
 8020eb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8020eba:	d807      	bhi.n	8020ecc <_printf_i+0x28>
 8020ebc:	2f62      	cmp	r7, #98	@ 0x62
 8020ebe:	d80a      	bhi.n	8020ed6 <_printf_i+0x32>
 8020ec0:	2f00      	cmp	r7, #0
 8020ec2:	f000 80d2 	beq.w	802106a <_printf_i+0x1c6>
 8020ec6:	2f58      	cmp	r7, #88	@ 0x58
 8020ec8:	f000 80b9 	beq.w	802103e <_printf_i+0x19a>
 8020ecc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020ed0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8020ed4:	e03a      	b.n	8020f4c <_printf_i+0xa8>
 8020ed6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8020eda:	2b15      	cmp	r3, #21
 8020edc:	d8f6      	bhi.n	8020ecc <_printf_i+0x28>
 8020ede:	a101      	add	r1, pc, #4	@ (adr r1, 8020ee4 <_printf_i+0x40>)
 8020ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020ee4:	08020f3d 	.word	0x08020f3d
 8020ee8:	08020f51 	.word	0x08020f51
 8020eec:	08020ecd 	.word	0x08020ecd
 8020ef0:	08020ecd 	.word	0x08020ecd
 8020ef4:	08020ecd 	.word	0x08020ecd
 8020ef8:	08020ecd 	.word	0x08020ecd
 8020efc:	08020f51 	.word	0x08020f51
 8020f00:	08020ecd 	.word	0x08020ecd
 8020f04:	08020ecd 	.word	0x08020ecd
 8020f08:	08020ecd 	.word	0x08020ecd
 8020f0c:	08020ecd 	.word	0x08020ecd
 8020f10:	08021051 	.word	0x08021051
 8020f14:	08020f7b 	.word	0x08020f7b
 8020f18:	0802100b 	.word	0x0802100b
 8020f1c:	08020ecd 	.word	0x08020ecd
 8020f20:	08020ecd 	.word	0x08020ecd
 8020f24:	08021073 	.word	0x08021073
 8020f28:	08020ecd 	.word	0x08020ecd
 8020f2c:	08020f7b 	.word	0x08020f7b
 8020f30:	08020ecd 	.word	0x08020ecd
 8020f34:	08020ecd 	.word	0x08020ecd
 8020f38:	08021013 	.word	0x08021013
 8020f3c:	6833      	ldr	r3, [r6, #0]
 8020f3e:	1d1a      	adds	r2, r3, #4
 8020f40:	681b      	ldr	r3, [r3, #0]
 8020f42:	6032      	str	r2, [r6, #0]
 8020f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020f48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8020f4c:	2301      	movs	r3, #1
 8020f4e:	e09d      	b.n	802108c <_printf_i+0x1e8>
 8020f50:	6833      	ldr	r3, [r6, #0]
 8020f52:	6820      	ldr	r0, [r4, #0]
 8020f54:	1d19      	adds	r1, r3, #4
 8020f56:	6031      	str	r1, [r6, #0]
 8020f58:	0606      	lsls	r6, r0, #24
 8020f5a:	d501      	bpl.n	8020f60 <_printf_i+0xbc>
 8020f5c:	681d      	ldr	r5, [r3, #0]
 8020f5e:	e003      	b.n	8020f68 <_printf_i+0xc4>
 8020f60:	0645      	lsls	r5, r0, #25
 8020f62:	d5fb      	bpl.n	8020f5c <_printf_i+0xb8>
 8020f64:	f9b3 5000 	ldrsh.w	r5, [r3]
 8020f68:	2d00      	cmp	r5, #0
 8020f6a:	da03      	bge.n	8020f74 <_printf_i+0xd0>
 8020f6c:	232d      	movs	r3, #45	@ 0x2d
 8020f6e:	426d      	negs	r5, r5
 8020f70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020f74:	4859      	ldr	r0, [pc, #356]	@ (80210dc <_printf_i+0x238>)
 8020f76:	230a      	movs	r3, #10
 8020f78:	e011      	b.n	8020f9e <_printf_i+0xfa>
 8020f7a:	6821      	ldr	r1, [r4, #0]
 8020f7c:	6833      	ldr	r3, [r6, #0]
 8020f7e:	0608      	lsls	r0, r1, #24
 8020f80:	f853 5b04 	ldr.w	r5, [r3], #4
 8020f84:	d402      	bmi.n	8020f8c <_printf_i+0xe8>
 8020f86:	0649      	lsls	r1, r1, #25
 8020f88:	bf48      	it	mi
 8020f8a:	b2ad      	uxthmi	r5, r5
 8020f8c:	2f6f      	cmp	r7, #111	@ 0x6f
 8020f8e:	4853      	ldr	r0, [pc, #332]	@ (80210dc <_printf_i+0x238>)
 8020f90:	6033      	str	r3, [r6, #0]
 8020f92:	bf14      	ite	ne
 8020f94:	230a      	movne	r3, #10
 8020f96:	2308      	moveq	r3, #8
 8020f98:	2100      	movs	r1, #0
 8020f9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8020f9e:	6866      	ldr	r6, [r4, #4]
 8020fa0:	60a6      	str	r6, [r4, #8]
 8020fa2:	2e00      	cmp	r6, #0
 8020fa4:	bfa2      	ittt	ge
 8020fa6:	6821      	ldrge	r1, [r4, #0]
 8020fa8:	f021 0104 	bicge.w	r1, r1, #4
 8020fac:	6021      	strge	r1, [r4, #0]
 8020fae:	b90d      	cbnz	r5, 8020fb4 <_printf_i+0x110>
 8020fb0:	2e00      	cmp	r6, #0
 8020fb2:	d04b      	beq.n	802104c <_printf_i+0x1a8>
 8020fb4:	4616      	mov	r6, r2
 8020fb6:	fbb5 f1f3 	udiv	r1, r5, r3
 8020fba:	fb03 5711 	mls	r7, r3, r1, r5
 8020fbe:	5dc7      	ldrb	r7, [r0, r7]
 8020fc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020fc4:	462f      	mov	r7, r5
 8020fc6:	42bb      	cmp	r3, r7
 8020fc8:	460d      	mov	r5, r1
 8020fca:	d9f4      	bls.n	8020fb6 <_printf_i+0x112>
 8020fcc:	2b08      	cmp	r3, #8
 8020fce:	d10b      	bne.n	8020fe8 <_printf_i+0x144>
 8020fd0:	6823      	ldr	r3, [r4, #0]
 8020fd2:	07df      	lsls	r7, r3, #31
 8020fd4:	d508      	bpl.n	8020fe8 <_printf_i+0x144>
 8020fd6:	6923      	ldr	r3, [r4, #16]
 8020fd8:	6861      	ldr	r1, [r4, #4]
 8020fda:	4299      	cmp	r1, r3
 8020fdc:	bfde      	ittt	le
 8020fde:	2330      	movle	r3, #48	@ 0x30
 8020fe0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020fe4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020fe8:	1b92      	subs	r2, r2, r6
 8020fea:	6122      	str	r2, [r4, #16]
 8020fec:	f8cd a000 	str.w	sl, [sp]
 8020ff0:	464b      	mov	r3, r9
 8020ff2:	aa03      	add	r2, sp, #12
 8020ff4:	4621      	mov	r1, r4
 8020ff6:	4640      	mov	r0, r8
 8020ff8:	f7ff fee6 	bl	8020dc8 <_printf_common>
 8020ffc:	3001      	adds	r0, #1
 8020ffe:	d14a      	bne.n	8021096 <_printf_i+0x1f2>
 8021000:	f04f 30ff 	mov.w	r0, #4294967295
 8021004:	b004      	add	sp, #16
 8021006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802100a:	6823      	ldr	r3, [r4, #0]
 802100c:	f043 0320 	orr.w	r3, r3, #32
 8021010:	6023      	str	r3, [r4, #0]
 8021012:	4833      	ldr	r0, [pc, #204]	@ (80210e0 <_printf_i+0x23c>)
 8021014:	2778      	movs	r7, #120	@ 0x78
 8021016:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802101a:	6823      	ldr	r3, [r4, #0]
 802101c:	6831      	ldr	r1, [r6, #0]
 802101e:	061f      	lsls	r7, r3, #24
 8021020:	f851 5b04 	ldr.w	r5, [r1], #4
 8021024:	d402      	bmi.n	802102c <_printf_i+0x188>
 8021026:	065f      	lsls	r7, r3, #25
 8021028:	bf48      	it	mi
 802102a:	b2ad      	uxthmi	r5, r5
 802102c:	6031      	str	r1, [r6, #0]
 802102e:	07d9      	lsls	r1, r3, #31
 8021030:	bf44      	itt	mi
 8021032:	f043 0320 	orrmi.w	r3, r3, #32
 8021036:	6023      	strmi	r3, [r4, #0]
 8021038:	b11d      	cbz	r5, 8021042 <_printf_i+0x19e>
 802103a:	2310      	movs	r3, #16
 802103c:	e7ac      	b.n	8020f98 <_printf_i+0xf4>
 802103e:	4827      	ldr	r0, [pc, #156]	@ (80210dc <_printf_i+0x238>)
 8021040:	e7e9      	b.n	8021016 <_printf_i+0x172>
 8021042:	6823      	ldr	r3, [r4, #0]
 8021044:	f023 0320 	bic.w	r3, r3, #32
 8021048:	6023      	str	r3, [r4, #0]
 802104a:	e7f6      	b.n	802103a <_printf_i+0x196>
 802104c:	4616      	mov	r6, r2
 802104e:	e7bd      	b.n	8020fcc <_printf_i+0x128>
 8021050:	6833      	ldr	r3, [r6, #0]
 8021052:	6825      	ldr	r5, [r4, #0]
 8021054:	6961      	ldr	r1, [r4, #20]
 8021056:	1d18      	adds	r0, r3, #4
 8021058:	6030      	str	r0, [r6, #0]
 802105a:	062e      	lsls	r6, r5, #24
 802105c:	681b      	ldr	r3, [r3, #0]
 802105e:	d501      	bpl.n	8021064 <_printf_i+0x1c0>
 8021060:	6019      	str	r1, [r3, #0]
 8021062:	e002      	b.n	802106a <_printf_i+0x1c6>
 8021064:	0668      	lsls	r0, r5, #25
 8021066:	d5fb      	bpl.n	8021060 <_printf_i+0x1bc>
 8021068:	8019      	strh	r1, [r3, #0]
 802106a:	2300      	movs	r3, #0
 802106c:	6123      	str	r3, [r4, #16]
 802106e:	4616      	mov	r6, r2
 8021070:	e7bc      	b.n	8020fec <_printf_i+0x148>
 8021072:	6833      	ldr	r3, [r6, #0]
 8021074:	1d1a      	adds	r2, r3, #4
 8021076:	6032      	str	r2, [r6, #0]
 8021078:	681e      	ldr	r6, [r3, #0]
 802107a:	6862      	ldr	r2, [r4, #4]
 802107c:	2100      	movs	r1, #0
 802107e:	4630      	mov	r0, r6
 8021080:	f7df f92e 	bl	80002e0 <memchr>
 8021084:	b108      	cbz	r0, 802108a <_printf_i+0x1e6>
 8021086:	1b80      	subs	r0, r0, r6
 8021088:	6060      	str	r0, [r4, #4]
 802108a:	6863      	ldr	r3, [r4, #4]
 802108c:	6123      	str	r3, [r4, #16]
 802108e:	2300      	movs	r3, #0
 8021090:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021094:	e7aa      	b.n	8020fec <_printf_i+0x148>
 8021096:	6923      	ldr	r3, [r4, #16]
 8021098:	4632      	mov	r2, r6
 802109a:	4649      	mov	r1, r9
 802109c:	4640      	mov	r0, r8
 802109e:	47d0      	blx	sl
 80210a0:	3001      	adds	r0, #1
 80210a2:	d0ad      	beq.n	8021000 <_printf_i+0x15c>
 80210a4:	6823      	ldr	r3, [r4, #0]
 80210a6:	079b      	lsls	r3, r3, #30
 80210a8:	d413      	bmi.n	80210d2 <_printf_i+0x22e>
 80210aa:	68e0      	ldr	r0, [r4, #12]
 80210ac:	9b03      	ldr	r3, [sp, #12]
 80210ae:	4298      	cmp	r0, r3
 80210b0:	bfb8      	it	lt
 80210b2:	4618      	movlt	r0, r3
 80210b4:	e7a6      	b.n	8021004 <_printf_i+0x160>
 80210b6:	2301      	movs	r3, #1
 80210b8:	4632      	mov	r2, r6
 80210ba:	4649      	mov	r1, r9
 80210bc:	4640      	mov	r0, r8
 80210be:	47d0      	blx	sl
 80210c0:	3001      	adds	r0, #1
 80210c2:	d09d      	beq.n	8021000 <_printf_i+0x15c>
 80210c4:	3501      	adds	r5, #1
 80210c6:	68e3      	ldr	r3, [r4, #12]
 80210c8:	9903      	ldr	r1, [sp, #12]
 80210ca:	1a5b      	subs	r3, r3, r1
 80210cc:	42ab      	cmp	r3, r5
 80210ce:	dcf2      	bgt.n	80210b6 <_printf_i+0x212>
 80210d0:	e7eb      	b.n	80210aa <_printf_i+0x206>
 80210d2:	2500      	movs	r5, #0
 80210d4:	f104 0619 	add.w	r6, r4, #25
 80210d8:	e7f5      	b.n	80210c6 <_printf_i+0x222>
 80210da:	bf00      	nop
 80210dc:	08024449 	.word	0x08024449
 80210e0:	0802445a 	.word	0x0802445a

080210e4 <__sflush_r>:
 80210e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80210e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80210ec:	0716      	lsls	r6, r2, #28
 80210ee:	4605      	mov	r5, r0
 80210f0:	460c      	mov	r4, r1
 80210f2:	d454      	bmi.n	802119e <__sflush_r+0xba>
 80210f4:	684b      	ldr	r3, [r1, #4]
 80210f6:	2b00      	cmp	r3, #0
 80210f8:	dc02      	bgt.n	8021100 <__sflush_r+0x1c>
 80210fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80210fc:	2b00      	cmp	r3, #0
 80210fe:	dd48      	ble.n	8021192 <__sflush_r+0xae>
 8021100:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021102:	2e00      	cmp	r6, #0
 8021104:	d045      	beq.n	8021192 <__sflush_r+0xae>
 8021106:	2300      	movs	r3, #0
 8021108:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802110c:	682f      	ldr	r7, [r5, #0]
 802110e:	6a21      	ldr	r1, [r4, #32]
 8021110:	602b      	str	r3, [r5, #0]
 8021112:	d030      	beq.n	8021176 <__sflush_r+0x92>
 8021114:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021116:	89a3      	ldrh	r3, [r4, #12]
 8021118:	0759      	lsls	r1, r3, #29
 802111a:	d505      	bpl.n	8021128 <__sflush_r+0x44>
 802111c:	6863      	ldr	r3, [r4, #4]
 802111e:	1ad2      	subs	r2, r2, r3
 8021120:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021122:	b10b      	cbz	r3, 8021128 <__sflush_r+0x44>
 8021124:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021126:	1ad2      	subs	r2, r2, r3
 8021128:	2300      	movs	r3, #0
 802112a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802112c:	6a21      	ldr	r1, [r4, #32]
 802112e:	4628      	mov	r0, r5
 8021130:	47b0      	blx	r6
 8021132:	1c43      	adds	r3, r0, #1
 8021134:	89a3      	ldrh	r3, [r4, #12]
 8021136:	d106      	bne.n	8021146 <__sflush_r+0x62>
 8021138:	6829      	ldr	r1, [r5, #0]
 802113a:	291d      	cmp	r1, #29
 802113c:	d82b      	bhi.n	8021196 <__sflush_r+0xb2>
 802113e:	4a2a      	ldr	r2, [pc, #168]	@ (80211e8 <__sflush_r+0x104>)
 8021140:	410a      	asrs	r2, r1
 8021142:	07d6      	lsls	r6, r2, #31
 8021144:	d427      	bmi.n	8021196 <__sflush_r+0xb2>
 8021146:	2200      	movs	r2, #0
 8021148:	6062      	str	r2, [r4, #4]
 802114a:	04d9      	lsls	r1, r3, #19
 802114c:	6922      	ldr	r2, [r4, #16]
 802114e:	6022      	str	r2, [r4, #0]
 8021150:	d504      	bpl.n	802115c <__sflush_r+0x78>
 8021152:	1c42      	adds	r2, r0, #1
 8021154:	d101      	bne.n	802115a <__sflush_r+0x76>
 8021156:	682b      	ldr	r3, [r5, #0]
 8021158:	b903      	cbnz	r3, 802115c <__sflush_r+0x78>
 802115a:	6560      	str	r0, [r4, #84]	@ 0x54
 802115c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802115e:	602f      	str	r7, [r5, #0]
 8021160:	b1b9      	cbz	r1, 8021192 <__sflush_r+0xae>
 8021162:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021166:	4299      	cmp	r1, r3
 8021168:	d002      	beq.n	8021170 <__sflush_r+0x8c>
 802116a:	4628      	mov	r0, r5
 802116c:	f7ff fca0 	bl	8020ab0 <_free_r>
 8021170:	2300      	movs	r3, #0
 8021172:	6363      	str	r3, [r4, #52]	@ 0x34
 8021174:	e00d      	b.n	8021192 <__sflush_r+0xae>
 8021176:	2301      	movs	r3, #1
 8021178:	4628      	mov	r0, r5
 802117a:	47b0      	blx	r6
 802117c:	4602      	mov	r2, r0
 802117e:	1c50      	adds	r0, r2, #1
 8021180:	d1c9      	bne.n	8021116 <__sflush_r+0x32>
 8021182:	682b      	ldr	r3, [r5, #0]
 8021184:	2b00      	cmp	r3, #0
 8021186:	d0c6      	beq.n	8021116 <__sflush_r+0x32>
 8021188:	2b1d      	cmp	r3, #29
 802118a:	d001      	beq.n	8021190 <__sflush_r+0xac>
 802118c:	2b16      	cmp	r3, #22
 802118e:	d11e      	bne.n	80211ce <__sflush_r+0xea>
 8021190:	602f      	str	r7, [r5, #0]
 8021192:	2000      	movs	r0, #0
 8021194:	e022      	b.n	80211dc <__sflush_r+0xf8>
 8021196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802119a:	b21b      	sxth	r3, r3
 802119c:	e01b      	b.n	80211d6 <__sflush_r+0xf2>
 802119e:	690f      	ldr	r7, [r1, #16]
 80211a0:	2f00      	cmp	r7, #0
 80211a2:	d0f6      	beq.n	8021192 <__sflush_r+0xae>
 80211a4:	0793      	lsls	r3, r2, #30
 80211a6:	680e      	ldr	r6, [r1, #0]
 80211a8:	bf08      	it	eq
 80211aa:	694b      	ldreq	r3, [r1, #20]
 80211ac:	600f      	str	r7, [r1, #0]
 80211ae:	bf18      	it	ne
 80211b0:	2300      	movne	r3, #0
 80211b2:	eba6 0807 	sub.w	r8, r6, r7
 80211b6:	608b      	str	r3, [r1, #8]
 80211b8:	f1b8 0f00 	cmp.w	r8, #0
 80211bc:	dde9      	ble.n	8021192 <__sflush_r+0xae>
 80211be:	6a21      	ldr	r1, [r4, #32]
 80211c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80211c2:	4643      	mov	r3, r8
 80211c4:	463a      	mov	r2, r7
 80211c6:	4628      	mov	r0, r5
 80211c8:	47b0      	blx	r6
 80211ca:	2800      	cmp	r0, #0
 80211cc:	dc08      	bgt.n	80211e0 <__sflush_r+0xfc>
 80211ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80211d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80211d6:	81a3      	strh	r3, [r4, #12]
 80211d8:	f04f 30ff 	mov.w	r0, #4294967295
 80211dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80211e0:	4407      	add	r7, r0
 80211e2:	eba8 0800 	sub.w	r8, r8, r0
 80211e6:	e7e7      	b.n	80211b8 <__sflush_r+0xd4>
 80211e8:	dfbffffe 	.word	0xdfbffffe

080211ec <_fflush_r>:
 80211ec:	b538      	push	{r3, r4, r5, lr}
 80211ee:	690b      	ldr	r3, [r1, #16]
 80211f0:	4605      	mov	r5, r0
 80211f2:	460c      	mov	r4, r1
 80211f4:	b913      	cbnz	r3, 80211fc <_fflush_r+0x10>
 80211f6:	2500      	movs	r5, #0
 80211f8:	4628      	mov	r0, r5
 80211fa:	bd38      	pop	{r3, r4, r5, pc}
 80211fc:	b118      	cbz	r0, 8021206 <_fflush_r+0x1a>
 80211fe:	6a03      	ldr	r3, [r0, #32]
 8021200:	b90b      	cbnz	r3, 8021206 <_fflush_r+0x1a>
 8021202:	f7ff f9cf 	bl	80205a4 <__sinit>
 8021206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802120a:	2b00      	cmp	r3, #0
 802120c:	d0f3      	beq.n	80211f6 <_fflush_r+0xa>
 802120e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021210:	07d0      	lsls	r0, r2, #31
 8021212:	d404      	bmi.n	802121e <_fflush_r+0x32>
 8021214:	0599      	lsls	r1, r3, #22
 8021216:	d402      	bmi.n	802121e <_fflush_r+0x32>
 8021218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802121a:	f7ff fbdc 	bl	80209d6 <__retarget_lock_acquire_recursive>
 802121e:	4628      	mov	r0, r5
 8021220:	4621      	mov	r1, r4
 8021222:	f7ff ff5f 	bl	80210e4 <__sflush_r>
 8021226:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021228:	07da      	lsls	r2, r3, #31
 802122a:	4605      	mov	r5, r0
 802122c:	d4e4      	bmi.n	80211f8 <_fflush_r+0xc>
 802122e:	89a3      	ldrh	r3, [r4, #12]
 8021230:	059b      	lsls	r3, r3, #22
 8021232:	d4e1      	bmi.n	80211f8 <_fflush_r+0xc>
 8021234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021236:	f7ff fbcf 	bl	80209d8 <__retarget_lock_release_recursive>
 802123a:	e7dd      	b.n	80211f8 <_fflush_r+0xc>

0802123c <__swhatbuf_r>:
 802123c:	b570      	push	{r4, r5, r6, lr}
 802123e:	460c      	mov	r4, r1
 8021240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021244:	2900      	cmp	r1, #0
 8021246:	b096      	sub	sp, #88	@ 0x58
 8021248:	4615      	mov	r5, r2
 802124a:	461e      	mov	r6, r3
 802124c:	da0d      	bge.n	802126a <__swhatbuf_r+0x2e>
 802124e:	89a3      	ldrh	r3, [r4, #12]
 8021250:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021254:	f04f 0100 	mov.w	r1, #0
 8021258:	bf14      	ite	ne
 802125a:	2340      	movne	r3, #64	@ 0x40
 802125c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021260:	2000      	movs	r0, #0
 8021262:	6031      	str	r1, [r6, #0]
 8021264:	602b      	str	r3, [r5, #0]
 8021266:	b016      	add	sp, #88	@ 0x58
 8021268:	bd70      	pop	{r4, r5, r6, pc}
 802126a:	466a      	mov	r2, sp
 802126c:	f000 f848 	bl	8021300 <_fstat_r>
 8021270:	2800      	cmp	r0, #0
 8021272:	dbec      	blt.n	802124e <__swhatbuf_r+0x12>
 8021274:	9901      	ldr	r1, [sp, #4]
 8021276:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802127a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802127e:	4259      	negs	r1, r3
 8021280:	4159      	adcs	r1, r3
 8021282:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021286:	e7eb      	b.n	8021260 <__swhatbuf_r+0x24>

08021288 <__smakebuf_r>:
 8021288:	898b      	ldrh	r3, [r1, #12]
 802128a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802128c:	079d      	lsls	r5, r3, #30
 802128e:	4606      	mov	r6, r0
 8021290:	460c      	mov	r4, r1
 8021292:	d507      	bpl.n	80212a4 <__smakebuf_r+0x1c>
 8021294:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021298:	6023      	str	r3, [r4, #0]
 802129a:	6123      	str	r3, [r4, #16]
 802129c:	2301      	movs	r3, #1
 802129e:	6163      	str	r3, [r4, #20]
 80212a0:	b003      	add	sp, #12
 80212a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80212a4:	ab01      	add	r3, sp, #4
 80212a6:	466a      	mov	r2, sp
 80212a8:	f7ff ffc8 	bl	802123c <__swhatbuf_r>
 80212ac:	9f00      	ldr	r7, [sp, #0]
 80212ae:	4605      	mov	r5, r0
 80212b0:	4639      	mov	r1, r7
 80212b2:	4630      	mov	r0, r6
 80212b4:	f7ff f812 	bl	80202dc <_malloc_r>
 80212b8:	b948      	cbnz	r0, 80212ce <__smakebuf_r+0x46>
 80212ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80212be:	059a      	lsls	r2, r3, #22
 80212c0:	d4ee      	bmi.n	80212a0 <__smakebuf_r+0x18>
 80212c2:	f023 0303 	bic.w	r3, r3, #3
 80212c6:	f043 0302 	orr.w	r3, r3, #2
 80212ca:	81a3      	strh	r3, [r4, #12]
 80212cc:	e7e2      	b.n	8021294 <__smakebuf_r+0xc>
 80212ce:	89a3      	ldrh	r3, [r4, #12]
 80212d0:	6020      	str	r0, [r4, #0]
 80212d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80212d6:	81a3      	strh	r3, [r4, #12]
 80212d8:	9b01      	ldr	r3, [sp, #4]
 80212da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80212de:	b15b      	cbz	r3, 80212f8 <__smakebuf_r+0x70>
 80212e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80212e4:	4630      	mov	r0, r6
 80212e6:	f000 f81d 	bl	8021324 <_isatty_r>
 80212ea:	b128      	cbz	r0, 80212f8 <__smakebuf_r+0x70>
 80212ec:	89a3      	ldrh	r3, [r4, #12]
 80212ee:	f023 0303 	bic.w	r3, r3, #3
 80212f2:	f043 0301 	orr.w	r3, r3, #1
 80212f6:	81a3      	strh	r3, [r4, #12]
 80212f8:	89a3      	ldrh	r3, [r4, #12]
 80212fa:	431d      	orrs	r5, r3
 80212fc:	81a5      	strh	r5, [r4, #12]
 80212fe:	e7cf      	b.n	80212a0 <__smakebuf_r+0x18>

08021300 <_fstat_r>:
 8021300:	b538      	push	{r3, r4, r5, lr}
 8021302:	4d07      	ldr	r5, [pc, #28]	@ (8021320 <_fstat_r+0x20>)
 8021304:	2300      	movs	r3, #0
 8021306:	4604      	mov	r4, r0
 8021308:	4608      	mov	r0, r1
 802130a:	4611      	mov	r1, r2
 802130c:	602b      	str	r3, [r5, #0]
 802130e:	f7e0 f9d8 	bl	80016c2 <_fstat>
 8021312:	1c43      	adds	r3, r0, #1
 8021314:	d102      	bne.n	802131c <_fstat_r+0x1c>
 8021316:	682b      	ldr	r3, [r5, #0]
 8021318:	b103      	cbz	r3, 802131c <_fstat_r+0x1c>
 802131a:	6023      	str	r3, [r4, #0]
 802131c:	bd38      	pop	{r3, r4, r5, pc}
 802131e:	bf00      	nop
 8021320:	24025bbc 	.word	0x24025bbc

08021324 <_isatty_r>:
 8021324:	b538      	push	{r3, r4, r5, lr}
 8021326:	4d06      	ldr	r5, [pc, #24]	@ (8021340 <_isatty_r+0x1c>)
 8021328:	2300      	movs	r3, #0
 802132a:	4604      	mov	r4, r0
 802132c:	4608      	mov	r0, r1
 802132e:	602b      	str	r3, [r5, #0]
 8021330:	f7e0 f9cc 	bl	80016cc <_isatty>
 8021334:	1c43      	adds	r3, r0, #1
 8021336:	d102      	bne.n	802133e <_isatty_r+0x1a>
 8021338:	682b      	ldr	r3, [r5, #0]
 802133a:	b103      	cbz	r3, 802133e <_isatty_r+0x1a>
 802133c:	6023      	str	r3, [r4, #0]
 802133e:	bd38      	pop	{r3, r4, r5, pc}
 8021340:	24025bbc 	.word	0x24025bbc

08021344 <_init>:
 8021344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021346:	bf00      	nop
 8021348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802134a:	bc08      	pop	{r3}
 802134c:	469e      	mov	lr, r3
 802134e:	4770      	bx	lr

08021350 <_fini>:
 8021350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021352:	bf00      	nop
 8021354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021356:	bc08      	pop	{r3}
 8021358:	469e      	mov	lr, r3
 802135a:	4770      	bx	lr
