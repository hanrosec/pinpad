
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020fcc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030ec  08021270  08021270  00022270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000506  0802435c  0802435c  0002535c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08024864  08024864  00025864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00013880  90000000  90000000  00027000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000005e  90013880  90013880  0003a880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0802487c  0802487c  0003a8de  2**0
                  CONTENTS
  8 .ARM          00000008  0802487c  0802487c  0002587c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08024884  08024884  0003a8de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  08024884  08024884  00025884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .fini_array   00000008  080248a0  080248a0  000258a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .data         0000013c  24000000  080248a8  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          00025c38  2400013c  080249e4  0002613c  2**2
                  ALLOC
 14 ._user_heap_stack 00002004  24025d74  080249e4  00026d74  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  0003a8de  2**0
                  CONTENTS, READONLY
 16 BufferSection 00232800  d0000000  d0000000  0003b000  2**2
                  ALLOC
 17 .debug_info   000c9bce  00000000  00000000  0003a90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00016b37  00000000  00000000  001044da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003900  00000000  00000000  0011b018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00003d55  00000000  00000000  0011e918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00053176  00000000  00000000  0012266d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00067005  00000000  00000000  001757e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001e33ae  00000000  00000000  001dc7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000c2  00000000  00000000  003bfb96  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000a4e0  00000000  00000000  003bfc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loclists 0002093f  00000000  00000000  003ca138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 00000067  00000000  00000000  003eaa77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400013c 	.word	0x2400013c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08021254 	.word	0x08021254

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000140 	.word	0x24000140
 80002dc:	08021254 	.word	0x08021254

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00c ba00 	b.w	800cb00 <vTaskSetApplicationTaskTag>
 8000700:	08002011 	.word	0x08002011

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	224c      	movs	r2, #76	@ 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	a809      	add	r0, sp, #36	@ 0x24
 800070e:	f020 f80b 	bl	8020728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f020 f806 	bl	8020728 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800071c:	2004      	movs	r0, #4
 800071e:	f008 fb8d 	bl	8008e3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <SystemClock_Config+0xbc>)
 8000728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <SystemClock_Config+0xc0>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	0491      	lsls	r1, r2, #18
 8000750:	d5fc      	bpl.n	800074c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000756:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 800075a:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000762:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2301      	movs	r3, #1
 800076a:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800076e:	23a0      	movs	r3, #160	@ 0xa0
 8000770:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000774:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077a:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000782:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f008 fe58 	bl	8009438 <HAL_RCC_OscConfig>
 8000788:	b108      	cbz	r0, 800078e <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000790:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800079a:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007a0:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a4:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f009 f9e2 	bl	8009b70 <HAL_RCC_ClockConfig>
 80007ac:	4601      	mov	r1, r0
 80007ae:	b108      	cbz	r0, 80007b4 <SystemClock_Config+0xb0>
 80007b0:	b672      	cpsid	i
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007b8:	f009 f8ea 	bl	8009990 <HAL_RCC_MCOConfig>
}
 80007bc:	b01d      	add	sp, #116	@ 0x74
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	58000400 	.word	0x58000400
 80007c4:	58024800 	.word	0x58024800

080007c8 <main>:
{
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ce:	2210      	movs	r2, #16
 80007d0:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007d2:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007d6:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d8:	f01f ffa6 	bl	8020728 <memset>
  HAL_MPU_Disable();
 80007dc:	f005 fd4a 	bl	8006274 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007e0:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 80007e4:	4bbe      	ldr	r3, [pc, #760]	@ (8000ae0 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007e6:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e8:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ec:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007ee:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f2:	f005 fd5d 	bl	80062b0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007f6:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007fa:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007fe:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000802:	f005 fd55 	bl	80062b0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000806:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000808:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800080a:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800080e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000812:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000816:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000818:	2318      	movs	r3, #24
 800081a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081e:	f005 fd47 	bl	80062b0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000822:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000824:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000826:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800082a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800082e:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000830:	2312      	movs	r3, #18
 8000832:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800083c:	f005 fd38 	bl	80062b0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000840:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000844:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000846:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 800084a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800084c:	2311      	movs	r3, #17
 800084e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	f005 fd2d 	bl	80062b0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000856:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800085a:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800085e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000862:	4ba0      	ldr	r3, [pc, #640]	@ (8000ae4 <main+0x31c>)
 8000864:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000866:	230e      	movs	r3, #14
 8000868:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086c:	f005 fd20 	bl	80062b0 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000870:	4628      	mov	r0, r5
 8000872:	f005 fd0d 	bl	8006290 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000876:	4b9c      	ldr	r3, [pc, #624]	@ (8000ae8 <main+0x320>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800087e:	d111      	bne.n	80008a4 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000884:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000888:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800088c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800089a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800089c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008a4:	4a90      	ldr	r2, [pc, #576]	@ (8000ae8 <main+0x320>)
 80008a6:	6953      	ldr	r3, [r2, #20]
 80008a8:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80008ac:	d123      	bne.n	80008f6 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ba:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008be:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008c2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008c6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008cc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008d2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80008d8:	d2f9      	bcs.n	80008ce <main+0x106>
    } while(sets-- != 0U);
 80008da:	3b20      	subs	r3, #32
 80008dc:	f113 0f20 	cmn.w	r3, #32
 80008e0:	d1f2      	bne.n	80008c8 <main+0x100>
 80008e2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008e6:	6953      	ldr	r3, [r2, #20]
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008f2:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 80008f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008fa:	4d7c      	ldr	r5, [pc, #496]	@ (8000aec <main+0x324>)
 80008fc:	682c      	ldr	r4, [r5, #0]
 80008fe:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000902:	f000 82e3 	beq.w	8000ecc <main+0x704>
 8000906:	3b01      	subs	r3, #1
 8000908:	d2f8      	bcs.n	80008fc <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800090a:	b672      	cpsid	i
  while (1)
 800090c:	e7fe      	b.n	800090c <main+0x144>
 800090e:	b672      	cpsid	i
 8000910:	e7fe      	b.n	8000910 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000912:	4877      	ldr	r0, [pc, #476]	@ (8000af0 <main+0x328>)
 8000914:	4a77      	ldr	r2, [pc, #476]	@ (8000af4 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000916:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000918:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 800091a:	e9c0 2600 	strd	r2, r6, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800091e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000922:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000926:	f008 fba7 	bl	8009078 <HAL_QSPI_Init>
 800092a:	b108      	cbz	r0, 8000930 <main+0x168>
 800092c:	b672      	cpsid	i
  while (1)
 800092e:	e7fe      	b.n	800092e <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000930:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000934:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000936:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 800093a:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 800093e:	f004 ff79 	bl	8005834 <BSP_QSPI_Init>
 8000942:	b108      	cbz	r0, 8000948 <main+0x180>
 8000944:	b672      	cpsid	i
  while (1)
 8000946:	e7fe      	b.n	8000946 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000948:	f004 ff20 	bl	800578c <BSP_QSPI_EnableMemoryMappedMode>
 800094c:	4603      	mov	r3, r0
 800094e:	b108      	cbz	r0, 8000954 <main+0x18c>
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000954:	4868      	ldr	r0, [pc, #416]	@ (8000af8 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000956:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800095a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000b04 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 800095e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000962:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000966:	f005 fd30 	bl	80063ca <HAL_DMA2D_Init>
 800096a:	4604      	mov	r4, r0
 800096c:	b108      	cbz	r0, 8000972 <main+0x1aa>
 800096e:	b672      	cpsid	i
  while (1)
 8000970:	e7fe      	b.n	8000970 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000972:	4602      	mov	r2, r0
 8000974:	4639      	mov	r1, r7
 8000976:	4861      	ldr	r0, [pc, #388]	@ (8000afc <main+0x334>)
 8000978:	f006 fbca 	bl	8007110 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800097c:	2014      	movs	r0, #20
 800097e:	f005 fbfd 	bl	800617c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000982:	4639      	mov	r1, r7
 8000984:	462a      	mov	r2, r5
 8000986:	485d      	ldr	r0, [pc, #372]	@ (8000afc <main+0x334>)
 8000988:	f006 fbc2 	bl	8007110 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800098c:	200a      	movs	r0, #10
 800098e:	f005 fbf5 	bl	800617c <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000992:	2224      	movs	r2, #36	@ 0x24
 8000994:	4621      	mov	r1, r4
 8000996:	a817      	add	r0, sp, #92	@ 0x5c
 8000998:	f01f fec6 	bl	8020728 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800099c:	2218      	movs	r2, #24
 800099e:	4621      	mov	r1, r4
 80009a0:	a811      	add	r0, sp, #68	@ 0x44
 80009a2:	f01f fec1 	bl	8020728 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009a6:	2234      	movs	r2, #52	@ 0x34
 80009a8:	4621      	mov	r1, r4
 80009aa:	a82d      	add	r0, sp, #180	@ 0xb4
 80009ac:	f01f febc 	bl	8020728 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009b0:	4621      	mov	r1, r4
 80009b2:	222c      	movs	r2, #44	@ 0x2c
 80009b4:	a820      	add	r0, sp, #128	@ 0x80
 80009b6:	f01f feb7 	bl	8020728 <memset>
  hdsi.Instance = DSI;
 80009ba:	4f51      	ldr	r7, [pc, #324]	@ (8000b00 <main+0x338>)
 80009bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009c0:	a90e      	add	r1, sp, #56	@ 0x38
 80009c2:	4638      	mov	r0, r7
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009c4:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009c6:	e9c7 3400 	strd	r3, r4, [r7]
  PLLInit.PLLNDIV = 119;
 80009ca:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009cc:	e9c7 8502 	strd	r8, r5, [r7, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 80009d0:	e9cd 360e 	strd	r3, r6, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009d4:	f005 fe46 	bl	8006664 <HAL_DSI_Init>
 80009d8:	b108      	cbz	r0, 80009de <main+0x216>
 80009da:	b672      	cpsid	i
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80009de:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 80009e2:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009e6:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009ea:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 80009ee:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009f0:	a917      	add	r1, sp, #92	@ 0x5c
 80009f2:	4638      	mov	r0, r7
 80009f4:	f006 f862 	bl	8006abc <HAL_DSI_ConfigHostTimeouts>
 80009f8:	b108      	cbz	r0, 80009fe <main+0x236>
 80009fa:	b672      	cpsid	i
  while (1)
 80009fc:	e7fe      	b.n	80009fc <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 80009fe:	2321      	movs	r3, #33	@ 0x21
 8000a00:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a02:	260f      	movs	r6, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a04:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a06:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a0a:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000a0c:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a10:	4638      	mov	r0, r7
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a12:	e9cd 6313 	strd	r6, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a16:	f006 f814 	bl	8006a42 <HAL_DSI_ConfigPhyTimer>
 8000a1a:	b108      	cbz	r0, 8000a20 <main+0x258>
 8000a1c:	b672      	cpsid	i
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a20:	2104      	movs	r1, #4
 8000a22:	4837      	ldr	r0, [pc, #220]	@ (8000b00 <main+0x338>)
 8000a24:	f005 fffc 	bl	8006a20 <HAL_DSI_ConfigFlowControl>
 8000a28:	b108      	cbz	r0, 8000a2e <main+0x266>
 8000a2a:	b672      	cpsid	i
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a2e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000a32:	4833      	ldr	r0, [pc, #204]	@ (8000b00 <main+0x338>)
 8000a34:	f006 f9cb 	bl	8006dce <HAL_DSI_SetLowPowerRXFilter>
 8000a38:	4601      	mov	r1, r0
 8000a3a:	b108      	cbz	r0, 8000a40 <main+0x278>
 8000a3c:	b672      	cpsid	i
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a40:	482f      	ldr	r0, [pc, #188]	@ (8000b00 <main+0x338>)
 8000a42:	f005 fdac 	bl	800659e <HAL_DSI_ConfigErrorMonitor>
 8000a46:	b108      	cbz	r0, 8000a4c <main+0x284>
 8000a48:	b672      	cpsid	i
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a50:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a54:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a60:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a64:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a68:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a6c:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a74:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a78:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a80:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a88:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a90:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a92:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a9a:	4819      	ldr	r0, [pc, #100]	@ (8000b00 <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a9c:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aa0:	f005 ff8a 	bl	80069b8 <HAL_DSI_ConfigCommand>
 8000aa4:	b108      	cbz	r0, 8000aaa <main+0x2e2>
 8000aa6:	b672      	cpsid	i
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab0:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000ab2:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ab4:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab6:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000ab8:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000abc:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000abe:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000ac2:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000ac4:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ac8:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000acc:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <main+0x338>)
 8000ad2:	f005 feff 	bl	80068d4 <HAL_DSI_ConfigAdaptedCommandMode>
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	b1b0      	cbz	r0, 8000b08 <main+0x340>
 8000ada:	b672      	cpsid	i
  while (1)
 8000adc:	e7fe      	b.n	8000adc <main+0x314>
 8000ade:	bf00      	nop
 8000ae0:	0300001b 	.word	0x0300001b
 8000ae4:	10040000 	.word	0x10040000
 8000ae8:	e000ed00 	.word	0xe000ed00
 8000aec:	58024400 	.word	0x58024400
 8000af0:	240001c4 	.word	0x240001c4
 8000af4:	52005000 	.word	0x52005000
 8000af8:	24000404 	.word	0x24000404
 8000afc:	58021800 	.word	0x58021800
 8000b00:	240003e8 	.word	0x240003e8
 8000b04:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b08:	485b      	ldr	r0, [pc, #364]	@ (8000c78 <main+0x4b0>)
 8000b0a:	f005 fed2 	bl	80068b2 <HAL_DSI_SetGenericVCID>
 8000b0e:	4604      	mov	r4, r0
 8000b10:	b108      	cbz	r0, 8000b16 <main+0x34e>
 8000b12:	b672      	cpsid	i
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b16:	2234      	movs	r2, #52	@ 0x34
 8000b18:	4601      	mov	r1, r0
 8000b1a:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000b1c:	4d57      	ldr	r5, [pc, #348]	@ (8000c7c <main+0x4b4>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b1e:	f01f fe03 	bl	8020728 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b22:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8000cbc <main+0x4f4>
 8000b26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b2a:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000b2e:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b32:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000b34:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000b36:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b3a:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b42:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b46:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000b4a:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b4e:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b52:	f240 1893 	movw	r8, #403	@ 0x193
 8000b56:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b5a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000b5e:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b62:	f007 fe3b 	bl	80087dc <HAL_LTDC_Init>
 8000b66:	4602      	mov	r2, r0
 8000b68:	b108      	cbz	r0, 8000b6e <main+0x3a6>
 8000b6a:	b672      	cpsid	i
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000b6e:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000b70:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.WindowY1 = 480;
 8000b72:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000b76:	f8ad 20b0 	strh.w	r2, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000b7a:	f88d 20b2 	strb.w	r2, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000b7e:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000b80:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.WindowX1 = 400;
 8000b84:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b88:	2107      	movs	r1, #7
 8000b8a:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000b8e:	e9cd 0127 	strd	r0, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b92:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b96:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000b98:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9c:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b9e:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ba2:	f007 fee7 	bl	8008974 <HAL_LTDC_ConfigLayer>
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	b108      	cbz	r0, 8000bae <main+0x3e6>
 8000baa:	b672      	cpsid	i
  while (1)
 8000bac:	e7fe      	b.n	8000bac <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bae:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bb0:	4831      	ldr	r0, [pc, #196]	@ (8000c78 <main+0x4b0>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bb2:	6993      	ldr	r3, [r2, #24]
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000bba:	f005 ffe5 	bl	8006b88 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000bbe:	4930      	ldr	r1, [pc, #192]	@ (8000c80 <main+0x4b8>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc0:	4b30      	ldr	r3, [pc, #192]	@ (8000c84 <main+0x4bc>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bc2:	4831      	ldr	r0, [pc, #196]	@ (8000c88 <main+0x4c0>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc4:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bc6:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <main+0x4c4>)
  IOCtx.Address     = 0;
 8000bc8:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bca:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	@ (8000c90 <main+0x4c8>)
 8000bce:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bd0:	f004 fbd4 	bl	800537c <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000bd4:	4632      	mov	r2, r6
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	482b      	ldr	r0, [pc, #172]	@ (8000c88 <main+0x4c0>)
 8000bda:	f004 f83f 	bl	8004c5c <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000bde:	2328      	movs	r3, #40	@ 0x28
 8000be0:	2215      	movs	r2, #21
 8000be2:	4621      	mov	r1, r4
 8000be4:	4824      	ldr	r0, [pc, #144]	@ (8000c78 <main+0x4b0>)
 8000be6:	9400      	str	r4, [sp, #0]
 8000be8:	f006 f801 	bl	8006bee <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000bec:	a92d      	add	r1, sp, #180	@ 0xb4
 8000bee:	4822      	ldr	r0, [pc, #136]	@ (8000c78 <main+0x4b0>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000bf0:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000bf2:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000bf6:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000bfa:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000bfe:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c02:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c06:	f005 fed7 	bl	80069b8 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c10:	4628      	mov	r0, r5
 8000c12:	f007 fedd 	bl	80089d0 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c16:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000c18:	481e      	ldr	r0, [pc, #120]	@ (8000c94 <main+0x4cc>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1a:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c1c:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <main+0x4d0>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c26:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000c28:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c2a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c2e:	f005 fb6b 	bl	8006308 <HAL_CRC_Init>
 8000c32:	b108      	cbz	r0, 8000c38 <main+0x470>
 8000c34:	b672      	cpsid	i
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000c38:	4818      	ldr	r0, [pc, #96]	@ (8000c9c <main+0x4d4>)
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <main+0x4d8>)
 8000c3c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000c3e:	f006 ffb5 	bl	8007bac <HAL_JPEG_Init>
 8000c42:	b108      	cbz	r0, 8000c48 <main+0x480>
 8000c44:	b672      	cpsid	i
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <main+0x47e>
  MX_TouchGFX_Init();
 8000c48:	f000 fd8e 	bl	8001768 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c4c:	f000 fd8b 	bl	8001766 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c50:	f00a f9fc 	bl	800b04c <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c54:	4a13      	ldr	r2, [pc, #76]	@ (8000ca4 <main+0x4dc>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4813      	ldr	r0, [pc, #76]	@ (8000ca8 <main+0x4e0>)
 8000c5a:	f00a fa23 	bl	800b0a4 <osThreadNew>
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <main+0x4e4>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c60:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <main+0x4e8>)
 8000c62:	2100      	movs	r1, #0
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c64:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c66:	4813      	ldr	r0, [pc, #76]	@ (8000cb4 <main+0x4ec>)
 8000c68:	f00a fa1c 	bl	800b0a4 <osThreadNew>
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <main+0x4f0>)
 8000c6e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c70:	f00a f9fe 	bl	800b070 <osKernelStart>
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <main+0x4ac>
 8000c76:	bf00      	nop
 8000c78:	240003e8 	.word	0x240003e8
 8000c7c:	24000210 	.word	0x24000210
 8000c80:	24000158 	.word	0x24000158
 8000c84:	0800575d 	.word	0x0800575d
 8000c88:	24000168 	.word	0x24000168
 8000c8c:	08001d11 	.word	0x08001d11
 8000c90:	08001d49 	.word	0x08001d49
 8000c94:	2400046c 	.word	0x2400046c
 8000c98:	58024c00 	.word	0x58024c00
 8000c9c:	24000390 	.word	0x24000390
 8000ca0:	52003000 	.word	0x52003000
 8000ca4:	080212f8 	.word	0x080212f8
 8000ca8:	08001777 	.word	0x08001777
 8000cac:	2400018c 	.word	0x2400018c
 8000cb0:	080212d4 	.word	0x080212d4
 8000cb4:	080037ed 	.word	0x080037ed
 8000cb8:	24000188 	.word	0x24000188
 8000cbc:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	2214      	movs	r2, #20
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f01f fd2e 	bl	8020728 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ccc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cda:	488d      	ldr	r0, [pc, #564]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	f04f 0900 	mov.w	r9, #0
 8000ce0:	2603      	movs	r6, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce2:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cea:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000cf2:	2708      	movs	r7, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf8:	9304      	str	r3, [sp, #16]
 8000cfa:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	9305      	str	r3, [sp, #20]
 8000d12:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d28:	9306      	str	r3, [sp, #24]
 8000d2a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	9307      	str	r3, [sp, #28]
 8000d42:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d58:	9308      	str	r3, [sp, #32]
 8000d5a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000da2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000db0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	930c      	str	r3, [sp, #48]	@ 0x30
 8000dba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dbc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	930d      	str	r3, [sp, #52]	@ 0x34
 8000dd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000dd4:	f006 f99c 	bl	8007110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2108      	movs	r1, #8
 8000ddc:	484d      	ldr	r0, [pc, #308]	@ (8000f14 <main+0x74c>)
 8000dde:	f006 f997 	bl	8007110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de8:	484b      	ldr	r0, [pc, #300]	@ (8000f18 <main+0x750>)
 8000dea:	f006 f991 	bl	8007110 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000df2:	a92d      	add	r1, sp, #180	@ 0xb4
 8000df4:	4846      	ldr	r0, [pc, #280]	@ (8000f10 <main+0x748>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dfe:	f005 fffd 	bl	8006dfc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e04:	4845      	ldr	r0, [pc, #276]	@ (8000f1c <main+0x754>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e06:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	e9cd 992f 	strd	r9, r9, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f005 fff3 	bl	8006dfc <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e16:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e18:	483e      	ldr	r0, [pc, #248]	@ (8000f14 <main+0x74c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	e9cd 752d 	strd	r7, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	e9cd 562f 	strd	r5, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f005 ffeb 	bl	8006dfc <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e26:	a92d      	add	r1, sp, #180	@ 0xb4
 8000e28:	483b      	ldr	r0, [pc, #236]	@ (8000f18 <main+0x750>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	e9cd 962f 	strd	r9, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f005 ffe3 	bl	8006dfc <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e36:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e3a:	464a      	mov	r2, r9
 8000e3c:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e3e:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e40:	207a      	movs	r0, #122	@ 0x7a
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e42:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e46:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8000e4a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e4e:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e50:	402b      	ands	r3, r5
 8000e52:	9303      	str	r3, [sp, #12]
 8000e54:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e56:	f005 f9bb 	bl	80061d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e5a:	207a      	movs	r0, #122	@ 0x7a
 8000e5c:	f005 f9ea 	bl	8006234 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e60:	4a2f      	ldr	r2, [pc, #188]	@ (8000f20 <main+0x758>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e62:	4830      	ldr	r0, [pc, #192]	@ (8000f24 <main+0x75c>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e64:	a92d      	add	r1, sp, #180	@ 0xb4
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e66:	6813      	ldr	r3, [r2, #0]
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	6013      	str	r3, [r2, #0]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e72:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <main+0x760>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e74:	f8c0 901c 	str.w	r9, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e78:	f8c0 9028 	str.w	r9, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000e7c:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8000e7e:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000e82:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e86:	2320      	movs	r3, #32
 8000e88:	e9c0 8303 	strd	r8, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e8c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e90:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e98:	e9c0 2308 	strd	r2, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000e9c:	2307      	movs	r3, #7
  SdramTiming.RCDDelay = 2;
 8000e9e:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  SdramTiming.SelfRefreshTime = 4;
 8000ea2:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 8000ea6:	e9cd 3630 	strd	r3, r6, [sp, #192]	@ 0xc0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000eaa:	f009 fdf5 	bl	800aa98 <HAL_SDRAM_Init>
 8000eae:	4681      	mov	r9, r0
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	f47f ad2c 	bne.w	800090e <main+0x146>
  BSP_SDRAM_DeInit(0);
 8000eb6:	f004 fe77 	bl	8005ba8 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000eba:	4648      	mov	r0, r9
 8000ebc:	f004 fec2 	bl	8005c44 <BSP_SDRAM_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2800      	cmp	r0, #0
 8000ec4:	f43f ad25 	beq.w	8000912 <main+0x14a>
 8000ec8:	b672      	cpsid	i
  while (1)
 8000eca:	e7fe      	b.n	8000eca <main+0x702>
  HAL_Init();
 8000ecc:	f005 f916 	bl	80060fc <HAL_Init>
  SystemClock_Config();
 8000ed0:	f7ff fc18 	bl	8000704 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ed4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ed8:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000eda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ede:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000ee2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eea:	9302      	str	r3, [sp, #8]
 8000eec:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000eee:	f006 f91d 	bl	800712c <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ef2:	4621      	mov	r1, r4
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f006 f927 	bl	8007148 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000efa:	4c0c      	ldr	r4, [pc, #48]	@ (8000f2c <main+0x764>)
timeout = 0xFFFF;
 8000efc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	0412      	lsls	r2, r2, #16
 8000f04:	f53f aedc 	bmi.w	8000cc0 <main+0x4f8>
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	d2f9      	bcs.n	8000f00 <main+0x738>
 8000f0c:	b672      	cpsid	i
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <main+0x746>
 8000f10:	58022400 	.word	0x58022400
 8000f14:	58021800 	.word	0x58021800
 8000f18:	58021400 	.word	0x58021400
 8000f1c:	58020000 	.word	0x58020000
 8000f20:	52004000 	.word	0x52004000
 8000f24:	24000190 	.word	0x24000190
 8000f28:	52004140 	.word	0x52004140
 8000f2c:	58024400 	.word	0x58024400

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000f30:	6802      	ldr	r2, [r0, #0]
 8000f32:	4b03      	ldr	r3, [pc, #12]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d101      	bne.n	8000f3c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000f38:	f005 b90e 	b.w	8006158 <HAL_IncTick>
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40001000 	.word	0x40001000

08000f44 <Error_Handler>:
 8000f44:	b672      	cpsid	i
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <Error_Handler+0x2>

08000f48 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f48:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_MspInit+0x2c>)
{
 8000f4a:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f56:	f042 0202 	orr.w	r2, r2, #2
 8000f5a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f5e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f6e:	f005 b92f 	b.w	80061d0 <HAL_NVIC_SetPriority>
 8000f72:	bf00      	nop
 8000f74:	58024400 	.word	0x58024400

08000f78 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f78:	6802      	ldr	r2, [r0, #0]
{
 8000f7a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_CRC_MspInit+0x2c>)
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d10d      	bne.n	8000f9e <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f82:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000f86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f8a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000f8e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f9e:	b002      	add	sp, #8
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	58024c00 	.word	0x58024c00

08000fa8 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_DMA2D_MspInit+0x40>)
{
 8000faa:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000fac:	6802      	ldr	r2, [r0, #0]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d117      	bne.n	8000fe2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fb4:	2107      	movs	r1, #7
 8000fb6:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000fbc:	f042 0210 	orr.w	r2, r2, #16
 8000fc0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fc4:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fc6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fca:	f003 0310 	and.w	r3, r3, #16
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fd2:	f005 f8fd 	bl	80061d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fd6:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000fd8:	b003      	add	sp, #12
 8000fda:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fde:	f005 b929 	b.w	8006234 <HAL_NVIC_EnableIRQ>
}
 8000fe2:	b003      	add	sp, #12
 8000fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fe8:	52001000 	.word	0x52001000
 8000fec:	58024400 	.word	0x58024400

08000ff0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ff4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	2214      	movs	r2, #20
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	a803      	add	r0, sp, #12
 8000ffc:	f01f fb94 	bl	8020728 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	22c8      	movs	r2, #200	@ 0xc8
 8001002:	2100      	movs	r1, #0
 8001004:	a808      	add	r0, sp, #32
 8001006:	f01f fb8f 	bl	8020728 <memset>
  if(hdsi->Instance==DSI)
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001010:	d138      	bne.n	8001084 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001012:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001016:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001018:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800101a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101e:	f009 f82d 	bl	800a07c <HAL_RCCEx_PeriphCLKConfig>
 8001022:	b108      	cbz	r0, 8001028 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001024:	f7ff ff8e 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800102c:	a903      	add	r1, sp, #12
 800102e:	4817      	ldr	r0, [pc, #92]	@ (800108c <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001030:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001034:	f042 0210 	orr.w	r2, r2, #16
 8001038:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800103c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001040:	f002 0210 	and.w	r2, r2, #16
 8001044:	9201      	str	r2, [sp, #4]
 8001046:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001048:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800104c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001050:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001068:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800106e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001070:	f005 fec4 	bl	8006dfc <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001074:	207b      	movs	r0, #123	@ 0x7b
 8001076:	4622      	mov	r2, r4
 8001078:	2107      	movs	r1, #7
 800107a:	f005 f8a9 	bl	80061d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800107e:	207b      	movs	r0, #123	@ 0x7b
 8001080:	f005 f8d8 	bl	8006234 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001084:	b03a      	add	sp, #232	@ 0xe8
 8001086:	bd10      	pop	{r4, pc}
 8001088:	58024400 	.word	0x58024400
 800108c:	58022400 	.word	0x58022400

08001090 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001090:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8001092:	4b3c      	ldr	r3, [pc, #240]	@ (8001184 <HAL_JPEG_MspInit+0xf4>)
{
 8001094:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8001096:	6802      	ldr	r2, [r0, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	d170      	bne.n	800117e <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800109c:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800109e:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80010a0:	4c3a      	ldr	r4, [pc, #232]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010a2:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010aa:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8001198 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010ae:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010b0:	f042 0220 	orr.w	r2, r2, #32
 80010b4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010b8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010c6:	2311      	movs	r3, #17
 80010c8:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80010d2:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010d6:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80010d8:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80010da:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010de:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010e2:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80010e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80010ea:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010ee:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010f2:	f007 fcd8 	bl	8008aa6 <HAL_MDMA_Init>
 80010f6:	b108      	cbz	r0, 80010fc <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 80010f8:	f7ff ff24 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80010fc:	2200      	movs	r2, #0
 80010fe:	4823      	ldr	r0, [pc, #140]	@ (800118c <HAL_JPEG_MspInit+0xfc>)
 8001100:	4611      	mov	r1, r2
 8001102:	f007 fd5e 	bl	8008bc2 <HAL_MDMA_ConfigPostRequestMask>
 8001106:	b108      	cbz	r0, 800110c <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 8001108:	f7ff ff1c 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800110c:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800110e:	2313      	movs	r3, #19
 8001110:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001112:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001114:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001116:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800111a:	4c1e      	ldr	r4, [pc, #120]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800111c:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001120:	2300      	movs	r3, #0
 8001122:	22c0      	movs	r2, #192	@ 0xc0
 8001124:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001128:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800112a:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800112c:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001130:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001134:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001138:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800113c:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001140:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001142:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8001146:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800114a:	f007 fcac 	bl	8008aa6 <HAL_MDMA_Init>
 800114e:	b108      	cbz	r0, 8001154 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 8001150:	f7ff fef8 	bl	8000f44 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001154:	2200      	movs	r2, #0
 8001156:	480f      	ldr	r0, [pc, #60]	@ (8001194 <HAL_JPEG_MspInit+0x104>)
 8001158:	4611      	mov	r1, r2
 800115a:	f007 fd32 	bl	8008bc2 <HAL_MDMA_ConfigPostRequestMask>
 800115e:	b108      	cbz	r0, 8001164 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 8001160:	f7ff fef0 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001164:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2105      	movs	r1, #5
 800116a:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 800116c:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800116e:	f005 f82f 	bl	80061d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001172:	2079      	movs	r0, #121	@ 0x79
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
 8001174:	b003      	add	sp, #12
 8001176:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800117a:	f005 b85b 	b.w	8006234 <HAL_NVIC_EnableIRQ>
}
 800117e:	b003      	add	sp, #12
 8001180:	bd30      	pop	{r4, r5, pc}
 8001182:	bf00      	nop
 8001184:	52003000 	.word	0x52003000
 8001188:	58024400 	.word	0x58024400
 800118c:	24000324 	.word	0x24000324
 8001190:	520001c0 	.word	0x520001c0
 8001194:	240002b8 	.word	0x240002b8
 8001198:	52000200 	.word	0x52000200

0800119c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800119c:	b510      	push	{r4, lr}
 800119e:	b0b4      	sub	sp, #208	@ 0xd0
 80011a0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a2:	22c8      	movs	r2, #200	@ 0xc8
 80011a4:	2100      	movs	r1, #0
 80011a6:	a802      	add	r0, sp, #8
 80011a8:	f01f fabe 	bl	8020728 <memset>
  if(hltdc->Instance==LTDC)
 80011ac:	6822      	ldr	r2, [r4, #0]
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <HAL_LTDC_MspInit+0x74>)
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d12b      	bne.n	800120c <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80011b8:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011ba:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 80011c2:	23a1      	movs	r3, #161	@ 0xa1
 80011c4:	2205      	movs	r2, #5
 80011c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011ca:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80011cc:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80011d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011d4:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d8:	f008 ff50 	bl	800a07c <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	b108      	cbz	r0, 80011e2 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 80011de:	f7ff feb1 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011e4:	2058      	movs	r0, #88	@ 0x58
 80011e6:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80011ec:	f042 0208 	orr.w	r2, r2, #8
 80011f0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011f4:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001202:	f004 ffe5 	bl	80061d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001206:	2058      	movs	r0, #88	@ 0x58
 8001208:	f005 f814 	bl	8006234 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800120c:	b034      	add	sp, #208	@ 0xd0
 800120e:	bd10      	pop	{r4, pc}
 8001210:	50001000 	.word	0x50001000
 8001214:	58024400 	.word	0x58024400

08001218 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	b0bf      	sub	sp, #252	@ 0xfc
 800121c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121e:	2214      	movs	r2, #20
 8001220:	2100      	movs	r1, #0
 8001222:	a807      	add	r0, sp, #28
 8001224:	f01f fa80 	bl	8020728 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	22c8      	movs	r2, #200	@ 0xc8
 800122a:	2100      	movs	r1, #0
 800122c:	a80c      	add	r0, sp, #48	@ 0x30
 800122e:	f01f fa7b 	bl	8020728 <memset>
  if(hqspi->Instance==QUADSPI)
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	4b53      	ldr	r3, [pc, #332]	@ (8001384 <HAL_QSPI_MspInit+0x16c>)
 8001236:	429a      	cmp	r2, r3
 8001238:	f040 80a1 	bne.w	800137e <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800123c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001240:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001244:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f008 ff18 	bl	800a07c <HAL_RCCEx_PeriphCLKConfig>
 800124c:	b108      	cbz	r0, 8001252 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 800124e:	f7ff fe79 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001252:	4b4d      	ldr	r3, [pc, #308]	@ (8001388 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001258:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800125a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800125e:	a907      	add	r1, sp, #28
 8001260:	484a      	ldr	r0, [pc, #296]	@ (800138c <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001262:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001264:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001268:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800126c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001270:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001278:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800127c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001280:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001284:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001288:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800128c:	9202      	str	r2, [sp, #8]
 800128e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001290:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001294:	f042 0220 	orr.w	r2, r2, #32
 8001298:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800129c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012a0:	f002 0220 	and.w	r2, r2, #32
 80012a4:	9203      	str	r2, [sp, #12]
 80012a6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012b0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012b8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80012bc:	9204      	str	r2, [sp, #16]
 80012be:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012c4:	f042 0202 	orr.w	r2, r2, #2
 80012c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012d0:	f002 0202 	and.w	r2, r2, #2
 80012d4:	9205      	str	r2, [sp, #20]
 80012d6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012dc:	f042 0208 	orr.w	r2, r2, #8
 80012e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	9306      	str	r3, [sp, #24]
 80012ee:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80012f4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012fc:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fe:	f005 fd7d 	bl	8006dfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001302:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001304:	a907      	add	r1, sp, #28
 8001306:	4821      	ldr	r0, [pc, #132]	@ (800138c <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001308:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001312:	f005 fd73 	bl	8006dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001316:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001318:	a907      	add	r1, sp, #28
 800131a:	481d      	ldr	r0, [pc, #116]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800131c:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001326:	f005 fd69 	bl	8006dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800132a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800132e:	a907      	add	r1, sp, #28
 8001330:	4817      	ldr	r0, [pc, #92]	@ (8001390 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001332:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133c:	f005 fd5e 	bl	8006dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001340:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001342:	a907      	add	r1, sp, #28
 8001344:	4813      	ldr	r0, [pc, #76]	@ (8001394 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001346:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001350:	f005 fd54 	bl	8006dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001354:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	a907      	add	r1, sp, #28
 8001358:	480f      	ldr	r0, [pc, #60]	@ (8001398 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800135a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f005 fd4a 	bl	8006dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001368:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	a907      	add	r1, sp, #28
 800136e:	480b      	ldr	r0, [pc, #44]	@ (800139c <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001370:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f005 fd3f 	bl	8006dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800137e:	b03f      	add	sp, #252	@ 0xfc
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	bf00      	nop
 8001384:	52005000 	.word	0x52005000
 8001388:	58024400 	.word	0x58024400
 800138c:	58021800 	.word	0x58021800
 8001390:	58021400 	.word	0x58021400
 8001394:	58021c00 	.word	0x58021c00
 8001398:	58020400 	.word	0x58020400
 800139c:	58020c00 	.word	0x58020c00

080013a0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013a4:	2100      	movs	r1, #0
 80013a6:	2214      	movs	r2, #20
 80013a8:	a801      	add	r0, sp, #4
 80013aa:	f01f f9bd 	bl	8020728 <memset>
  if (FMC_Initialized) {
 80013ae:	4b3f      	ldr	r3, [pc, #252]	@ (80014ac <HAL_SDRAM_MspInit+0x10c>)
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	2900      	cmp	r1, #0
 80013b4:	d177      	bne.n	80014a6 <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80013b6:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80013ba:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	22c0      	movs	r2, #192	@ 0xc0
 80013be:	f01f f9b3 	bl	8020728 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013c6:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c8:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f008 fe55 	bl	800a07c <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	b108      	cbz	r0, 80013d8 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 80013d4:	f7ff fdb6 	bl	8000f44 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2600      	movs	r6, #0
 80013de:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80013e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e4:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013e6:	a901      	add	r1, sp, #4
 80013e8:	4832      	ldr	r0, [pc, #200]	@ (80014b4 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80013ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80013ee:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80013f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f6:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80013f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800140c:	f005 fcf6 	bl	8006dfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001410:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	a901      	add	r1, sp, #4
 8001414:	4828      	ldr	r0, [pc, #160]	@ (80014b8 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001416:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f005 fcec 	bl	8006dfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001424:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001428:	a901      	add	r1, sp, #4
 800142a:	4824      	ldr	r0, [pc, #144]	@ (80014bc <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001436:	f005 fce1 	bl	8006dfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800143a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800143e:	a901      	add	r1, sp, #4
 8001440:	481f      	ldr	r0, [pc, #124]	@ (80014c0 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001442:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800144c:	f005 fcd6 	bl	8006dfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001450:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001454:	a901      	add	r1, sp, #4
 8001456:	481b      	ldr	r0, [pc, #108]	@ (80014c4 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001458:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001462:	f005 fccb 	bl	8006dfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001466:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146a:	a901      	add	r1, sp, #4
 800146c:	4816      	ldr	r0, [pc, #88]	@ (80014c8 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800146e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001478:	f005 fcc0 	bl	8006dfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800147c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001480:	a901      	add	r1, sp, #4
 8001482:	4812      	ldr	r0, [pc, #72]	@ (80014cc <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001484:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800148e:	f005 fcb5 	bl	8006dfc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001492:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	a901      	add	r1, sp, #4
 8001496:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001498:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	f005 fcab 	bl	8006dfc <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014a6:	b039      	add	sp, #228	@ 0xe4
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24000494 	.word	0x24000494
 80014b0:	58024400 	.word	0x58024400
 80014b4:	58022000 	.word	0x58022000
 80014b8:	58020400 	.word	0x58020400
 80014bc:	58021000 	.word	0x58021000
 80014c0:	58021c00 	.word	0x58021c00
 80014c4:	58021800 	.word	0x58021800
 80014c8:	58020c00 	.word	0x58020c00
 80014cc:	58021400 	.word	0x58021400
 80014d0:	58020800 	.word	0x58020800

080014d4 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80014d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <HAL_SDRAM_MspDeInit+0x6c>)
 80014d6:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80014d8:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 80014da:	bb82      	cbnz	r2, 800153e <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 80014dc:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 80014de:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014e0:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 80014e4:	4818      	ldr	r0, [pc, #96]	@ (8001548 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 80014e6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 80014e8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 80014ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014f4:	f005 fd6a 	bl	8006fcc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 80014f8:	2160      	movs	r1, #96	@ 0x60
 80014fa:	4814      	ldr	r0, [pc, #80]	@ (800154c <HAL_SDRAM_MspDeInit+0x78>)
 80014fc:	f005 fd66 	bl	8006fcc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001500:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001504:	4812      	ldr	r0, [pc, #72]	@ (8001550 <HAL_SDRAM_MspDeInit+0x7c>)
 8001506:	f005 fd61 	bl	8006fcc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800150a:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 800150e:	4811      	ldr	r0, [pc, #68]	@ (8001554 <HAL_SDRAM_MspDeInit+0x80>)
 8001510:	f005 fd5c 	bl	8006fcc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001514:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001518:	480f      	ldr	r0, [pc, #60]	@ (8001558 <HAL_SDRAM_MspDeInit+0x84>)
 800151a:	f005 fd57 	bl	8006fcc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800151e:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001522:	480e      	ldr	r0, [pc, #56]	@ (800155c <HAL_SDRAM_MspDeInit+0x88>)
 8001524:	f005 fd52 	bl	8006fcc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001528:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <HAL_SDRAM_MspDeInit+0x8c>)
 800152e:	f005 fd4d 	bl	8006fcc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001532:	4621      	mov	r1, r4
 8001534:	480b      	ldr	r0, [pc, #44]	@ (8001564 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800153a:	f005 bd47 	b.w	8006fcc <HAL_GPIO_DeInit>
}
 800153e:	bd10      	pop	{r4, pc}
 8001540:	24000490 	.word	0x24000490
 8001544:	58024400 	.word	0x58024400
 8001548:	58022000 	.word	0x58022000
 800154c:	58020400 	.word	0x58020400
 8001550:	58021000 	.word	0x58021000
 8001554:	58021c00 	.word	0x58021c00
 8001558:	58021800 	.word	0x58021800
 800155c:	58020c00 	.word	0x58020c00
 8001560:	58021400 	.word	0x58021400
 8001564:	58020800 	.word	0x58020800

08001568 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001568:	280f      	cmp	r0, #15
{
 800156a:	b510      	push	{r4, lr}
 800156c:	4604      	mov	r4, r0
 800156e:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001570:	d902      	bls.n	8001578 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001574:	b00a      	add	sp, #40	@ 0x28
 8001576:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001578:	4601      	mov	r1, r0
 800157a:	2200      	movs	r2, #0
 800157c:	2036      	movs	r0, #54	@ 0x36
 800157e:	f004 fe27 	bl	80061d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001582:	2036      	movs	r0, #54	@ 0x36
 8001584:	f004 fe56 	bl	8006234 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800158a:	4669      	mov	r1, sp
 800158c:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 800158e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001590:	4b17      	ldr	r3, [pc, #92]	@ (80015f0 <HAL_InitTick+0x88>)
 8001592:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001596:	f042 0210 	orr.w	r2, r2, #16
 800159a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800159e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015aa:	f008 fc4d 	bl	8009e48 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015ae:	9b07      	ldr	r3, [sp, #28]
 80015b0:	b9c3      	cbnz	r3, 80015e4 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015b2:	f008 fc25 	bl	8009e00 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80015b6:	4c0f      	ldr	r4, [pc, #60]	@ (80015f4 <HAL_InitTick+0x8c>)
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <HAL_InitTick+0x90>)
 80015ba:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015bc:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80015c0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <HAL_InitTick+0x94>)
 80015c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80015c8:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80015ca:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80015cc:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015ce:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80015d0:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015d4:	f009 fc60 	bl	800ae98 <HAL_TIM_Base_Init>
 80015d8:	2800      	cmp	r0, #0
 80015da:	d1ca      	bne.n	8001572 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80015dc:	4620      	mov	r0, r4
 80015de:	f009 fb03 	bl	800abe8 <HAL_TIM_Base_Start_IT>
 80015e2:	e7c7      	b.n	8001574 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015e4:	f008 fc0c 	bl	8009e00 <HAL_RCC_GetPCLK1Freq>
 80015e8:	0040      	lsls	r0, r0, #1
 80015ea:	e7e4      	b.n	80015b6 <HAL_InitTick+0x4e>
 80015ec:	24000074 	.word	0x24000074
 80015f0:	58024400 	.word	0x58024400
 80015f4:	24000498 	.word	0x24000498
 80015f8:	40001000 	.word	0x40001000
 80015fc:	000f4240 	.word	0x000f4240

08001600 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler>

08001602 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler>

08001604 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler>

08001606 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <BusFault_Handler>

08001608 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <UsageFault_Handler>

0800160a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	4770      	bx	lr

0800160c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800160c:	4801      	ldr	r0, [pc, #4]	@ (8001614 <TIM6_DAC_IRQHandler+0x8>)
 800160e:	f009 bb2d 	b.w	800ac6c <HAL_TIM_IRQHandler>
 8001612:	bf00      	nop
 8001614:	24000498 	.word	0x24000498

08001618 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001618:	4801      	ldr	r0, [pc, #4]	@ (8001620 <LTDC_IRQHandler+0x8>)
 800161a:	f007 b94e 	b.w	80088ba <HAL_LTDC_IRQHandler>
 800161e:	bf00      	nop
 8001620:	24000210 	.word	0x24000210

08001624 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001624:	4801      	ldr	r0, [pc, #4]	@ (800162c <DMA2D_IRQHandler+0x8>)
 8001626:	f004 bf0f 	b.w	8006448 <HAL_DMA2D_IRQHandler>
 800162a:	bf00      	nop
 800162c:	24000404 	.word	0x24000404

08001630 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001630:	4801      	ldr	r0, [pc, #4]	@ (8001638 <JPEG_IRQHandler+0x8>)
 8001632:	f006 bff3 	b.w	800861c <HAL_JPEG_IRQHandler>
 8001636:	bf00      	nop
 8001638:	24000390 	.word	0x24000390

0800163c <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 800163c:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MDMA_IRQHandler+0x14>)
{
 800163e:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001640:	f007 fb44 	bl	8008ccc <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001644:	4803      	ldr	r0, [pc, #12]	@ (8001654 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 800164a:	f007 bb3f 	b.w	8008ccc <HAL_MDMA_IRQHandler>
 800164e:	bf00      	nop
 8001650:	240002b8 	.word	0x240002b8
 8001654:	24000324 	.word	0x24000324

08001658 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001658:	4801      	ldr	r0, [pc, #4]	@ (8001660 <DSI_IRQHandler+0x8>)
 800165a:	f005 b8b8 	b.w	80067ce <HAL_DSI_IRQHandler>
 800165e:	bf00      	nop
 8001660:	240003e8 	.word	0x240003e8

08001664 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001664:	2001      	movs	r0, #1
 8001666:	4770      	bx	lr

08001668 <_kill>:

int _kill(int pid, int sig)
{
 8001668:	b508      	push	{r3, lr}
	errno = EINVAL;
 800166a:	f01f f911 	bl	8020890 <__errno>
 800166e:	2316      	movs	r3, #22
 8001670:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001672:	f04f 30ff 	mov.w	r0, #4294967295
 8001676:	bd08      	pop	{r3, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b508      	push	{r3, lr}
	errno = EINVAL;
 800167a:	f01f f909 	bl	8020890 <__errno>
 800167e:	2316      	movs	r3, #22
 8001680:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001682:	e7fe      	b.n	8001682 <_exit+0xa>

08001684 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	460d      	mov	r5, r1
 8001688:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	460e      	mov	r6, r1
 800168c:	1b73      	subs	r3, r6, r5
 800168e:	429c      	cmp	r4, r3
 8001690:	dc01      	bgt.n	8001696 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001692:	4620      	mov	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001696:	f3af 8000 	nop.w
 800169a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	e7f5      	b.n	800168c <_read+0x8>

080016a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	460d      	mov	r5, r1
 80016a4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	460e      	mov	r6, r1
 80016a8:	1b73      	subs	r3, r6, r5
 80016aa:	429c      	cmp	r4, r3
 80016ac:	dc01      	bgt.n	80016b2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80016ae:	4620      	mov	r0, r4
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80016b2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80016b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	e7f5      	b.n	80016a8 <_write+0x8>

080016bc <_close>:

int _close(int file)
{
	return -1;
}
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	4770      	bx	lr

080016c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80016c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80016c6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80016c8:	604b      	str	r3, [r1, #4]
}
 80016ca:	4770      	bx	lr

080016cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80016cc:	2001      	movs	r0, #1
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80016d0:	2000      	movs	r0, #0
 80016d2:	4770      	bx	lr

080016d4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <_sbrk+0x30>)
{
 80016d6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80016d8:	6811      	ldr	r1, [r2, #0]
{
 80016da:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80016dc:	b909      	cbnz	r1, 80016e2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80016de:	490a      	ldr	r1, [pc, #40]	@ (8001708 <_sbrk+0x34>)
 80016e0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e2:	6810      	ldr	r0, [r2, #0]
 80016e4:	4909      	ldr	r1, [pc, #36]	@ (800170c <_sbrk+0x38>)
 80016e6:	4c0a      	ldr	r4, [pc, #40]	@ (8001710 <_sbrk+0x3c>)
 80016e8:	4403      	add	r3, r0
 80016ea:	1b09      	subs	r1, r1, r4
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d906      	bls.n	80016fe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80016f0:	f01f f8ce 	bl	8020890 <__errno>
 80016f4:	230c      	movs	r3, #12
 80016f6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80016fc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80016fe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001700:	e7fc      	b.n	80016fc <_sbrk+0x28>
 8001702:	bf00      	nop
 8001704:	240004e4 	.word	0x240004e4
 8001708:	24025d78 	.word	0x24025d78
 800170c:	24080000 	.word	0x24080000
 8001710:	00001000 	.word	0x00001000

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800174c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001718:	f004 fc80 	bl	800601c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	@ (8001754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	@ (8001760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f01f f8ab 	bl	802089c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff f83f 	bl	80007c8 <main>
  bx  lr
 800174a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001750:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001754:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001758:	080248a8 	.word	0x080248a8
  ldr r2, =_sbss
 800175c:	2400013c 	.word	0x2400013c
  ldr r4, =_ebss
 8001760:	24025d74 	.word	0x24025d74

08001764 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC3_IRQHandler>

08001766 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001766:	4770      	bx	lr

08001768 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001768:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800176a:	f001 fcb5 	bl	80030d8 <touchgfx_components_init>
    touchgfx_init();
}
 800176e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001772:	f001 bc39 	b.w	8002fe8 <touchgfx_init>

08001776 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001776:	f001 bcb1 	b.w	80030dc <touchgfx_taskEntry>

0800177a <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800177a:	6840      	ldr	r0, [r0, #4]
    }
 800177c:	4770      	bx	lr

0800177e <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800177e:	6041      	str	r1, [r0, #4]
    }
 8001780:	4770      	bx	lr

08001782 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001782:	1a52      	subs	r2, r2, r1
 8001784:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001788:	fbb2 f0f3 	udiv	r0, r2, r3
 800178c:	4770      	bx	lr
	...

08001790 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001790:	4b02      	ldr	r3, [pc, #8]	@ (800179c <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001792:	68c0      	ldr	r0, [r0, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001798:	4358      	muls	r0, r3
 800179a:	4770      	bx	lr
 800179c:	240004e8 	.word	0x240004e8

080017a0 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 80017a0:	4770      	bx	lr
	...

080017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 80017a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 80017a8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 80017ac:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 80017ae:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017b2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017be:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80017cc:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 80017d0:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 80017d6:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 80017d8:	2101      	movs	r1, #1
 80017da:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 80017dc:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	2210      	movs	r2, #16
 80017e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017e4:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80017e8:	fab2 f282 	clz	r2, r2
 80017ec:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 80017ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001828 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	b983      	cbnz	r3, 8001816 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 80017f4:	f008 fae2 	bl	8009dbc <HAL_RCC_GetHCLKFreq>
 80017f8:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 80017fa:	f008 f917 	bl	8009a2c <HAL_RCC_GetSysClockFreq>
 80017fe:	fbb0 f0f4 	udiv	r0, r0, r4
 8001802:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001806:	f009 fb47 	bl	800ae98 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800180a:	4806      	ldr	r0, [pc, #24]	@ (8001824 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 800180c:	b003      	add	sp, #12
 800180e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001812:	f009 b9af 	b.w	800ab74 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001816:	f008 faf3 	bl	8009e00 <HAL_RCC_GetPCLK1Freq>
 800181a:	0044      	lsls	r4, r0, #1
 800181c:	e7ed      	b.n	80017fa <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800181e:	bf00      	nop
 8001820:	58024400 	.word	0x58024400
 8001824:	240004e8 	.word	0x240004e8
 8001828:	080237ec 	.word	0x080237ec

0800182c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 800182c:	b510      	push	{r4, lr}
 800182e:	4604      	mov	r4, r0
 8001830:	2110      	movs	r1, #16
 8001832:	f01e f8ed 	bl	801fa10 <_ZdlPvj>
 8001836:	4620      	mov	r0, r4
 8001838:	bd10      	pop	{r4, pc}

0800183a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800183a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 800183c:	6803      	ldr	r3, [r0, #0]
{
 800183e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001840:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001842:	b131      	cbz	r1, 8001852 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001844:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001846:	4798      	blx	r3
 8001848:	6863      	ldr	r3, [r4, #4]
 800184a:	1b5b      	subs	r3, r3, r5
 800184c:	4403      	add	r3, r0
 800184e:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001850:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001852:	4798      	blx	r3
 8001854:	60a0      	str	r0, [r4, #8]
}
 8001856:	e7fb      	b.n	8001850 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001858 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001858:	4770      	bx	lr
	...

0800185c <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001860:	460f      	mov	r7, r1
 8001862:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001864:	781d      	ldrb	r5, [r3, #0]
 8001866:	b915      	cbnz	r5, 800186e <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001868:	2500      	movs	r5, #0
}
 800186a:	4628      	mov	r0, r5
 800186c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 800186e:	4c07      	ldr	r4, [pc, #28]	@ (800188c <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001870:	2000      	movs	r0, #0
 8001872:	4621      	mov	r1, r4
 8001874:	f004 fb76 	bl	8005f64 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f4      	beq.n	8001868 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 800187e:	6863      	ldr	r3, [r4, #4]
 8001880:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001882:	68a3      	ldr	r3, [r4, #8]
 8001884:	6033      	str	r3, [r6, #0]
            return true;
 8001886:	e7f0      	b.n	800186a <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001888:	24000544 	.word	0x24000544
 800188c:	24000534 	.word	0x24000534

08001890 <_ZN20STM32TouchControllerD0Ev>:
 8001890:	b510      	push	{r4, lr}
 8001892:	4604      	mov	r4, r0
 8001894:	2104      	movs	r1, #4
 8001896:	f01e f8bb 	bl	801fa10 <_ZdlPvj>
 800189a:	4620      	mov	r0, r4
 800189c:	bd10      	pop	{r4, pc}
	...

080018a0 <_ZN20STM32TouchController4initEv>:
{
 80018a0:	b508      	push	{r3, lr}
    hTS->Width = 800;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80018a4:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 80018a8:	2000      	movs	r0, #0
    hTS->Width = 800;
 80018aa:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80018ac:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018b0:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80018b4:	230c      	movs	r3, #12
 80018b6:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80018ba:	f004 fac3 	bl	8005e44 <BSP_TS_Init>
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <_ZN20STM32TouchController4initEv+0x40>)
 80018c0:	b910      	cbnz	r0, 80018c8 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1fb      	bne.n	80018c6 <_ZN20STM32TouchController4initEv+0x26>
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <_ZN20STM32TouchController4initEv+0x44>)
 80018d0:	212e      	movs	r1, #46	@ 0x2e
 80018d2:	4a05      	ldr	r2, [pc, #20]	@ (80018e8 <_ZN20STM32TouchController4initEv+0x48>)
 80018d4:	4805      	ldr	r0, [pc, #20]	@ (80018ec <_ZN20STM32TouchController4initEv+0x4c>)
 80018d6:	f01e fc33 	bl	8020140 <__assert_func>
 80018da:	bf00      	nop
 80018dc:	24000540 	.word	0x24000540
 80018e0:	24000544 	.word	0x24000544
 80018e4:	08021344 	.word	0x08021344
 80018e8:	08021357 	.word	0x08021357
 80018ec:	08021381 	.word	0x08021381

080018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 80018f0:	2803      	cmp	r0, #3
 80018f2:	d825      	bhi.n	8001940 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 80018f4:	e8df f000 	tbb	[pc, r0]
 80018f8:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80018fe:	2108      	movs	r1, #8
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	fab2 f282 	clz	r2, r2
 8001906:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001908:	480f      	ldr	r0, [pc, #60]	@ (8001948 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800190a:	f005 bc01 	b.w	8007110 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800190e:	4b0d      	ldr	r3, [pc, #52]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001910:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	fab2 f282 	clz	r2, r2
 800191a:	0952      	lsrs	r2, r2, #5
 800191c:	e7f4      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001920:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	fab2 f282 	clz	r2, r2
 800192a:	0952      	lsrs	r2, r2, #5
 800192c:	e7ec      	b.n	8001908 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800192e:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001930:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001934:	4805      	ldr	r0, [pc, #20]	@ (800194c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	fab2 f282 	clz	r2, r2
 800193c:	0952      	lsrs	r2, r2, #5
 800193e:	e7e4      	b.n	800190a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	24000548 	.word	0x24000548
 8001948:	58022400 	.word	0x58022400
 800194c:	58021400 	.word	0x58021400

08001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001950:	2803      	cmp	r0, #3
 8001952:	d825      	bhi.n	80019a0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001954:	e8df f000 	tbb	[pc, r0]
 8001958:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 800195e:	2108      	movs	r1, #8
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	3a00      	subs	r2, #0
 8001964:	bf18      	it	ne
 8001966:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001968:	480f      	ldr	r0, [pc, #60]	@ (80019a8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800196a:	f005 bbd1 	b.w	8007110 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001970:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	3a00      	subs	r2, #0
 8001978:	bf18      	it	ne
 800197a:	2201      	movne	r2, #1
 800197c:	e7f4      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 800197e:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001980:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	3a00      	subs	r2, #0
 8001988:	bf18      	it	ne
 800198a:	2201      	movne	r2, #1
 800198c:	e7ec      	b.n	8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001990:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	3a00      	subs	r2, #0
 800199a:	bf18      	it	ne
 800199c:	2201      	movne	r2, #1
 800199e:	e7e4      	b.n	800196a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	24000548 	.word	0x24000548
 80019a8:	58022400 	.word	0x58022400
 80019ac:	58021400 	.word	0x58021400

080019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80019b0:	2803      	cmp	r0, #3
 80019b2:	d811      	bhi.n	80019d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 80019b4:	e8df f000 	tbb	[pc, r0]
 80019b8:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019bc:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019be:	4807      	ldr	r0, [pc, #28]	@ (80019dc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019c0:	f005 bbab 	b.w	800711a <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80019c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c8:	e7f9      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019ce:	e7f6      	b.n	80019be <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 80019d6:	e7f3      	b.n	80019c0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	58022400 	.word	0x58022400
 80019e0:	58021400 	.word	0x58021400

080019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 80019e4:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 80019e6:	2803      	cmp	r0, #3
 80019e8:	d815      	bhi.n	8001a16 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 80019ea:	e8df f000 	tbb	[pc, r0]
 80019ee:	0a02      	.short	0x0a02
 80019f0:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019f2:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80019f4:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019f6:	f005 fb85 	bl	8007104 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 80019fa:	1e43      	subs	r3, r0, #1
 80019fc:	4258      	negs	r0, r3
 80019fe:	4158      	adcs	r0, r3
 8001a00:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001a02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a06:	e7f5      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001a08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a0c:	e7f2      	b.n	80019f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001a0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a12:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001a14:	e7ef      	b.n	80019f6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001a16:	2000      	movs	r0, #0
 8001a18:	e7ef      	b.n	80019fa <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001a1a:	bf00      	nop
 8001a1c:	58022400 	.word	0x58022400
 8001a20:	58021400 	.word	0x58021400

08001a24 <_ZN8touchgfx4GPIO4initEv>:
{
 8001a24:	b570      	push	{r4, r5, r6, lr}
 8001a26:	4d08      	ldr	r5, [pc, #32]	@ (8001a48 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001a28:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001a2a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001a2c:	b2e0      	uxtb	r0, r4
 8001a2e:	f7ff ffd9 	bl	80019e4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001a32:	b118      	cbz	r0, 8001a3c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001a34:	682b      	ldr	r3, [r5, #0]
 8001a36:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001a38:	bf18      	it	ne
 8001a3a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001a3c:	3401      	adds	r4, #1
 8001a3e:	3504      	adds	r5, #4
 8001a40:	2c05      	cmp	r4, #5
 8001a42:	d1f3      	bne.n	8001a2c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001a44:	bd70      	pop	{r4, r5, r6, pc}
 8001a46:	bf00      	nop
 8001a48:	24000548 	.word	0x24000548

08001a4c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001a4c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001a4e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001a52:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001a56:	4770      	bx	lr

08001a58 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001a58:	2000      	movs	r0, #0
 8001a5a:	4770      	bx	lr

08001a5c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001a5c:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001a5e:	3900      	subs	r1, #0
 8001a60:	4b02      	ldr	r3, [pc, #8]	@ (8001a6c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001a62:	bf18      	it	ne
 8001a64:	2101      	movne	r1, #1
 8001a66:	7019      	strb	r1, [r3, #0]
    }
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	24025157 	.word	0x24025157

08001a70 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001a70:	2000      	movs	r0, #0
 8001a72:	4770      	bx	lr

08001a74 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001a74:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001a76:	b10b      	cbz	r3, 8001a7c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001a78:	4608      	mov	r0, r1
 8001a7a:	4718      	bx	r3
        }
    }
 8001a7c:	4770      	bx	lr

08001a7e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001a7e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a82:	4770      	bx	lr

08001a84 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001a84:	6840      	ldr	r0, [r0, #4]
 8001a86:	6803      	ldr	r3, [r0, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4718      	bx	r3

08001a8c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001a8c:	4b01      	ldr	r3, [pc, #4]	@ (8001a94 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	2400056c 	.word	0x2400056c

08001a98 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001a98:	4770      	bx	lr

08001a9a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001a9a:	f001 bc1c 	b.w	80032d6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001a9e <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001a9e:	f001 bbab 	b.w	80031f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001aa2 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001aa2:	f001 bd7d 	b.w	80035a0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001aa6 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001aa6:	f001 bd6f 	b.w	8003588 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001aac <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001aac:	b510      	push	{r4, lr}
 8001aae:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001ab0:	f001 fd32 	bl	8003518 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001ab4:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001ab8:	b113      	cbz	r3, 8001ac0 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001aba:	4b02      	ldr	r3, [pc, #8]	@ (8001ac4 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
    }
}
 8001ac0:	bd10      	pop	{r4, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2400000c 	.word	0x2400000c

08001ac8 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001ac8:	f001 bb9e 	b.w	8003208 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001acc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001acc:	b510      	push	{r4, lr}
 8001ace:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001ad0:	f00c fcd0 	bl	800e474 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001ae0:	4718      	bx	r3

08001ae2 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001ae2:	b510      	push	{r4, lr}
 8001ae4:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001ae6:	f00c f84d 	bl	800db84 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001aea:	6860      	ldr	r0, [r4, #4]
 8001aec:	6803      	ldr	r3, [r0, #0]
    }
 8001aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	4718      	bx	r3

08001af6 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001af6:	f00b bf1b 	b.w	800d930 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001afa <_ZN11TouchGFXHALD0Ev>:
 8001afa:	b510      	push	{r4, lr}
 8001afc:	4604      	mov	r4, r0
 8001afe:	217c      	movs	r1, #124	@ 0x7c
 8001b00:	f01d ff86 	bl	801fa10 <_ZdlPvj>
 8001b04:	4620      	mov	r0, r4
 8001b06:	bd10      	pop	{r4, pc}

08001b08 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001b08:	4b02      	ldr	r3, [pc, #8]	@ (8001b14 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001b0e:	f00b bf4b 	b.w	800d9a8 <_ZN8touchgfx3HAL10beginFrameEv>
 8001b12:	bf00      	nop
 8001b14:	2400000c 	.word	0x2400000c

08001b18 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001b18:	b538      	push	{r3, r4, r5, lr}
 8001b1a:	4604      	mov	r4, r0
    mcuInstr.init();
 8001b1c:	4d06      	ldr	r5, [pc, #24]	@ (8001b38 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001b1e:	f001 fb9b 	bl	8003258 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001b22:	2300      	movs	r3, #0
    mcuInstr.init();
 8001b24:	4628      	mov	r0, r5
 8001b26:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001b2a:	f7ff fe3b 	bl	80017a4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001b2e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001b30:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001b32:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001b36:	bd38      	pop	{r3, r4, r5, pc}
 8001b38:	2400055c 	.word	0x2400055c

08001b3c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001b3c:	6803      	ldr	r3, [r0, #0]
{
 8001b3e:	4604      	mov	r4, r0
 8001b40:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b46:	4798      	blx	r3
    enableInterrupts();
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001b4e:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001b50:	f000 ff5c 	bl	8002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	4620      	mov	r0, r4
 8001b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5a:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2329      	movs	r3, #41	@ 0x29
 8001b60:	2215      	movs	r2, #21
 8001b62:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001b64:	9100      	str	r1, [sp, #0]
 8001b66:	f005 f842 	bl	8006bee <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001b6a:	f000 ff4f 	bl	8002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	4620      	mov	r0, r4
 8001b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b74:	4798      	blx	r3
    for (;;)
 8001b76:	e7f8      	b.n	8001b6a <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001b78:	240003e8 	.word	0x240003e8

08001b7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001b7c:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001b80:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001b82:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001b84:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001b88:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001b8a:	428c      	cmp	r4, r1
 8001b8c:	d009      	beq.n	8001ba2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001b8e:	b93a      	cbnz	r2, 8001ba0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b90:	490a      	ldr	r1, [pc, #40]	@ (8001bbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b92:	4a0b      	ldr	r2, [pc, #44]	@ (8001bc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b94:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b96:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001b98:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001b9a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b9c:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001b9e:	701a      	strb	r2, [r3, #0]
        }
    }
 8001ba0:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d0fc      	beq.n	8001ba0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ba6:	4a06      	ldr	r2, [pc, #24]	@ (8001bc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001ba8:	4904      	ldr	r1, [pc, #16]	@ (8001bbc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001baa:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001bac:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001bae:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001bb0:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	e7f3      	b.n	8001b9e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001bb6:	bf00      	nop
 8001bb8:	24025150 	.word	0x24025150
 8001bbc:	2402514e 	.word	0x2402514e
 8001bc0:	2402514c 	.word	0x2402514c

08001bc4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001bc4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	428b      	cmp	r3, r1
 8001bcc:	d803      	bhi.n	8001bd6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d905      	bls.n	8001be2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001bd8:	219e      	movs	r1, #158	@ 0x9e
 8001bda:	4a07      	ldr	r2, [pc, #28]	@ (8001bf8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001bdc:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001bde:	f01e faaf 	bl	8020140 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001be4:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001be6:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001be8:	801a      	strh	r2, [r3, #0]
    }
 8001bea:	bd08      	pop	{r3, pc}
 8001bec:	2402514c 	.word	0x2402514c
 8001bf0:	2402514e 	.word	0x2402514e
 8001bf4:	080213e4 	.word	0x080213e4
 8001bf8:	08021447 	.word	0x08021447
 8001bfc:	0802148a 	.word	0x0802148a
 8001c00:	24025152 	.word	0x24025152
 8001c04:	24025154 	.word	0x24025154

08001c08 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001c08:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001c0a:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001c0e:	b118      	cbz	r0, 8001c18 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001c10:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001c12:	6803      	ldr	r3, [r0, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4718      	bx	r3
    }
 8001c18:	4770      	bx	lr
	...

08001c1c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	460d      	mov	r5, r1
 8001c20:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001c24:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001c26:	b935      	cbnz	r5, 8001c36 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001c28:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001c2a:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001c30:	480a      	ldr	r0, [pc, #40]	@ (8001c5c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001c32:	f01e fa85 	bl	8020140 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001c36:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001c3a:	3a00      	subs	r2, #0
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001c3e:	bf18      	it	ne
 8001c40:	2201      	movne	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001c44:	6803      	ldr	r3, [r0, #0]
}
 8001c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c4e:	4718      	bx	r3
 8001c50:	2400056c 	.word	0x2400056c
 8001c54:	080214dd 	.word	0x080214dd
 8001c58:	08021515 	.word	0x08021515
 8001c5c:	0802148a 	.word	0x0802148a
 8001c60:	24025156 	.word	0x24025156

08001c64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8001c64:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001c68:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001c6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001c6e:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 8001c70:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001c74:	4a1d      	ldr	r2, [pc, #116]	@ (8001cec <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001c76:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001c78:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001c7c:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001c7e:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 8001c80:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001c84:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 8001c86:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 8001c8a:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c8c:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 8001c8e:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 8001c92:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001c96:	4a16      	ldr	r2, [pc, #88]	@ (8001cf0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c98:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8001c9c:	3520      	adds	r5, #32
          buttonController(0),
 8001c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8001ca2:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8001ca6:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8001caa:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8001cae:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001cb2:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8001cb6:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001cba:	6782      	str	r2, [r0, #120]	@ 0x78
 8001cbc:	b2ad      	uxth	r5, r5
        instance = this;
 8001cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cc0:	42b5      	cmp	r5, r6
        instance = this;
 8001cc2:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001cc6:	8015      	strh	r5, [r2, #0]
 8001cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8001cfc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8001cca:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001ccc:	bf28      	it	cs
 8001cce:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001d00 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cd2:	bf38      	it	cc
 8001cd4:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cd6:	8016      	strh	r6, [r2, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001cda:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001cde:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001ce0:	4a09      	ldr	r2, [pc, #36]	@ (8001d08 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001ce2:	7013      	strb	r3, [r2, #0]
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8001ce6:	6003      	str	r3, [r0, #0]
}
 8001ce8:	bd70      	pop	{r4, r5, r6, pc}
 8001cea:	bf00      	nop
 8001cec:	01000001 	.word	0x01000001
 8001cf0:	01010000 	.word	0x01010000
 8001cf4:	24025158 	.word	0x24025158
 8001cf8:	2402514c 	.word	0x2402514c
 8001cfc:	24025152 	.word	0x24025152
 8001d00:	2402514e 	.word	0x2402514e
 8001d04:	24025154 	.word	0x24025154
 8001d08:	24025150 	.word	0x24025150
 8001d0c:	0802156c 	.word	0x0802156c

08001d10 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001d10:	2b01      	cmp	r3, #1
    {
 8001d12:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001d14:	d80e      	bhi.n	8001d34 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	2215      	movs	r2, #21
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4601      	mov	r1, r0
 8001d20:	4808      	ldr	r0, [pc, #32]	@ (8001d44 <DSI_IO_Write+0x34>)
 8001d22:	f004 ff64 	bl	8006bee <HAL_DSI_ShortWrite>
 8001d26:	b118      	cbz	r0, 8001d30 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001d28:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001d30:	2000      	movs	r0, #0
 8001d32:	e7fb      	b.n	8001d2c <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001d34:	e9cd 1200 	strd	r1, r2, [sp]
 8001d38:	4601      	mov	r1, r0
 8001d3a:	2239      	movs	r2, #57	@ 0x39
 8001d3c:	4801      	ldr	r0, [pc, #4]	@ (8001d44 <DSI_IO_Write+0x34>)
 8001d3e:	f004 ff67 	bl	8006c10 <HAL_DSI_LongWrite>
 8001d42:	e7f0      	b.n	8001d26 <DSI_IO_Write+0x16>
 8001d44:	240003e8 	.word	0x240003e8

08001d48 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001d4a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001d4e:	2106      	movs	r1, #6
 8001d50:	9100      	str	r1, [sp, #0]
 8001d52:	4601      	mov	r1, r0
 8001d54:	4805      	ldr	r0, [pc, #20]	@ (8001d6c <DSI_IO_Read+0x24>)
 8001d56:	f004 ffbb 	bl	8006cd0 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8001d5a:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8001d5c:	bf14      	ite	ne
 8001d5e:	f06f 0007 	mvnne.w	r0, #7
 8001d62:	2000      	moveq	r0, #0
 8001d64:	b005      	add	sp, #20
 8001d66:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d6a:	bf00      	nop
 8001d6c:	240003e8 	.word	0x240003e8

08001d70 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 8001d72:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d76:	4c0b      	ldr	r4, [pc, #44]	@ (8001da4 <LCD_ReqTear+0x34>)
 8001d78:	2239      	movs	r2, #57	@ 0x39
 8001d7a:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8001d7c:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d80:	ab03      	add	r3, sp, #12
 8001d82:	4620      	mov	r0, r4
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	2344      	movs	r3, #68	@ 0x44
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	f004 ff40 	bl	8006c10 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001d90:	2100      	movs	r1, #0
 8001d92:	2335      	movs	r3, #53	@ 0x35
 8001d94:	2215      	movs	r2, #21
 8001d96:	4620      	mov	r0, r4
 8001d98:	9100      	str	r1, [sp, #0]
 8001d9a:	f004 ff28 	bl	8006bee <HAL_DSI_ShortWrite>
    }
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	bf00      	nop
 8001da4:	240003e8 	.word	0x240003e8

08001da8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001da8:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001daa:	f7ff ffe1 	bl	8001d70 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001dae:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001db8:	2201      	movs	r2, #1
 8001dba:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001dbe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001dca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001dce:	f042 0202 	orr.w	r2, r2, #2
 8001dd2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	4b02      	ldr	r3, [pc, #8]	@ (8001de4 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001dda:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ddc:	bd08      	pop	{r3, pc}
 8001dde:	bf00      	nop
 8001de0:	240003e8 	.word	0x240003e8
 8001de4:	50001000 	.word	0x50001000

08001de8 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001de8:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <LCD_ReqEnable+0x20>)
    {
 8001dea:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001dec:	7819      	ldrb	r1, [r3, #0]
 8001dee:	b939      	cbnz	r1, 8001e00 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001df0:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001df2:	4806      	ldr	r0, [pc, #24]	@ (8001e0c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001df4:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001df6:	2329      	movs	r3, #41	@ 0x29
 8001df8:	2215      	movs	r2, #21
 8001dfa:	9100      	str	r1, [sp, #0]
 8001dfc:	f004 fef7 	bl	8006bee <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001e00:	b003      	add	sp, #12
 8001e02:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e06:	bf00      	nop
 8001e08:	24000558 	.word	0x24000558
 8001e0c:	240003e8 	.word	0x240003e8

08001e10 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001e12:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	232a      	movs	r3, #42	@ 0x2a
 8001e18:	2239      	movs	r2, #57	@ 0x39
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2304      	movs	r3, #4
 8001e20:	4803      	ldr	r0, [pc, #12]	@ (8001e30 <LCD_SetUpdateRegionLeft+0x20>)
 8001e22:	f004 fef5 	bl	8006c10 <HAL_DSI_LongWrite>
    }
 8001e26:	b003      	add	sp, #12
 8001e28:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e2c:	24000008 	.word	0x24000008
 8001e30:	240003e8 	.word	0x240003e8

08001e34 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e34:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001e36:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	232a      	movs	r3, #42	@ 0x2a
 8001e3c:	2239      	movs	r2, #57	@ 0x39
 8001e3e:	2100      	movs	r1, #0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2304      	movs	r3, #4
 8001e44:	4803      	ldr	r0, [pc, #12]	@ (8001e54 <LCD_SetUpdateRegionRight+0x20>)
 8001e46:	f004 fee3 	bl	8006c10 <HAL_DSI_LongWrite>
    }
 8001e4a:	b003      	add	sp, #12
 8001e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e50:	24000004 	.word	0x24000004
 8001e54:	240003e8 	.word	0x240003e8

08001e58 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001e58:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001e5a:	4d14      	ldr	r5, [pc, #80]	@ (8001eac <HAL_DSI_TearingEffectCallback+0x54>)
 8001e5c:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff fd46 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001e64:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001e66:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001e70:	f000 fdc0 	bl	80029f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001e74:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001e76:	682a      	ldr	r2, [r5, #0]
 8001e78:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 8001e80:	b173      	cbz	r3, 8001ea0 <HAL_DSI_TearingEffectCallback+0x48>
 8001e82:	4d0c      	ldr	r5, [pc, #48]	@ (8001eb4 <HAL_DSI_TearingEffectCallback+0x5c>)
 8001e84:	782b      	ldrb	r3, [r5, #0]
 8001e86:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001e8a:	b94b      	cbnz	r3, 8001ea0 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_DSI_TearingEffectCallback+0x60>)
 8001e8e:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001e90:	f7ff ffbe 	bl	8001e10 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001e94:	4620      	mov	r0, r4
 8001e96:	f004 fe9a 	bl	8006bce <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001e9e:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ea0:	2000      	movs	r0, #0
    }
 8001ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001ea6:	f7ff bd53 	b.w	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001eaa:	bf00      	nop
 8001eac:	24025158 	.word	0x24025158
 8001eb0:	2400000c 	.word	0x2400000c
 8001eb4:	24000574 	.word	0x24000574
 8001eb8:	24000570 	.word	0x24000570

08001ebc <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001ec0:	4e48      	ldr	r6, [pc, #288]	@ (8001fe4 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001ec6:	7833      	ldrb	r3, [r6, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8088 	beq.w	8001fde <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 8001ece:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002008 <HAL_DSI_EndOfRefreshCallback+0x14c>
 8001ed2:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 800200c <HAL_DSI_EndOfRefreshCallback+0x150>
 8001ed6:	f8d9 5000 	ldr.w	r5, [r9]
 8001eda:	4f43      	ldr	r7, [pc, #268]	@ (8001fe8 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 8001edc:	2d00      	cmp	r5, #0
 8001ede:	d13e      	bne.n	8001f5e <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8001ee0:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001ee2:	4e42      	ldr	r6, [pc, #264]	@ (8001fec <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8001ee4:	f004 f94a 	bl	800617c <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	9500      	str	r5, [sp, #0]
 8001eec:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001ef0:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001ef2:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001ef6:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001efa:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001efe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f02:	f002 0208 	and.w	r2, r2, #8
 8001f06:	9200      	str	r2, [sp, #0]
 8001f08:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001f0a:	f8d8 2000 	ldr.w	r2, [r8]
 8001f0e:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001f12:	4837      	ldr	r0, [pc, #220]	@ (8001ff0 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001f14:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001f16:	4e37      	ldr	r6, [pc, #220]	@ (8001ff4 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8001f18:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8001f1a:	4837      	ldr	r0, [pc, #220]	@ (8001ff8 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f1c:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8001f20:	4836      	ldr	r0, [pc, #216]	@ (8001ffc <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f22:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001f26:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001f28:	f041 0101 	orr.w	r1, r1, #1
 8001f2c:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001f2e:	9501      	str	r5, [sp, #4]
 8001f30:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f34:	f042 0208 	orr.w	r2, r2, #8
 8001f38:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8001f48:	f7ff ff74 	bl	8001e34 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001f4c:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 8001f4e:	4620      	mov	r0, r4
                updateRegion = 1;
 8001f50:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001f54:	b005      	add	sp, #20
 8001f56:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001f5a:	f004 be38 	b.w	8006bce <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f5e:	6803      	ldr	r3, [r0, #0]
 8001f60:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f62:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f64:	9502      	str	r5, [sp, #8]
 8001f66:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f6a:	4c25      	ldr	r4, [pc, #148]	@ (8002000 <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f6c:	f022 0208 	bic.w	r2, r2, #8
 8001f70:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f74:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f78:	f002 0208 	and.w	r2, r2, #8
 8001f7c:	9202      	str	r2, [sp, #8]
 8001f7e:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f80:	f8d8 2000 	ldr.w	r2, [r8]
 8001f84:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f88:	4819      	ldr	r0, [pc, #100]	@ (8001ff0 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001f8a:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8001f8c:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8001f90:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001f92:	4819      	ldr	r0, [pc, #100]	@ (8001ff8 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f94:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 8001f98:	4818      	ldr	r0, [pc, #96]	@ (8001ffc <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f9a:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001f9e:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001fa0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001fa2:	f041 0101 	orr.w	r1, r1, #1
 8001fa6:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001fa8:	9503      	str	r5, [sp, #12]
 8001faa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001fae:	f042 0208 	orr.w	r2, r2, #8
 8001fb2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001fb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	9303      	str	r3, [sp, #12]
 8001fc0:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001fc2:	f7ff fcc5 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001fc6:	f7ff ff0f 	bl	8001de8 <LCD_ReqEnable>
        return instance;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 8001fcc:	7035      	strb	r5, [r6, #0]
 8001fce:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001fd0:	b128      	cbz	r0, 8001fde <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 8001fd2:	6803      	ldr	r3, [r0, #0]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
    }
 8001fd6:	b005      	add	sp, #20
 8001fd8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fdc:	4718      	bx	r3
 8001fde:	b005      	add	sp, #20
 8001fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fe4:	24000574 	.word	0x24000574
 8001fe8:	2400056c 	.word	0x2400056c
 8001fec:	01b201e2 	.word	0x01b201e2
 8001ff0:	50001000 	.word	0x50001000
 8001ff4:	019201e3 	.word	0x019201e3
 8001ff8:	01920003 	.word	0x01920003
 8001ffc:	09c004b3 	.word	0x09c004b3
 8002000:	019201e2 	.word	0x019201e2
 8002004:	24025158 	.word	0x24025158
 8002008:	24000570 	.word	0x24000570
 800200c:	24000210 	.word	0x24000210

08002010 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002010:	4601      	mov	r1, r0
 8002012:	b508      	push	{r3, lr}
        return instance;
 8002014:	4b03      	ldr	r3, [pc, #12]	@ (8002024 <IdleTaskHook+0x14>)
 8002016:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002018:	b101      	cbz	r1, 800201c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800201a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 800201c:	f00c fa44 	bl	800e4a8 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002020:	2001      	movs	r0, #1
 8002022:	bd08      	pop	{r3, pc}
 8002024:	24025158 	.word	0x24025158

08002028 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800202a:	2200      	movs	r2, #0
 800202c:	605a      	str	r2, [r3, #4]
          cc_in(0)
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	4a02      	ldr	r2, [pc, #8]	@ (800203c <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002032:	601a      	str	r2, [r3, #0]

}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	2400055c 	.word	0x2400055c
 800203c:	08021324 	.word	0x08021324

08002040 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002040:	6940      	ldr	r0, [r0, #20]
 8002042:	4770      	bx	lr

08002044 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8002044:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002048:	4770      	bx	lr

0800204a <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800204a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800204c:	b923      	cbnz	r3, 8002058 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 800204e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002050:	3800      	subs	r0, #0
 8002052:	bf18      	it	ne
 8002054:	2001      	movne	r0, #1
 8002056:	4770      	bx	lr
 8002058:	2001      	movs	r0, #1
}
 800205a:	4770      	bx	lr

0800205c <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 800205c:	6880      	ldr	r0, [r0, #8]
 800205e:	4770      	bx	lr

08002060 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002060:	4770      	bx	lr

08002062 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8002062:	3004      	adds	r0, #4
{
 8002064:	b510      	push	{r4, lr}
 8002066:	460c      	mov	r4, r1
    *data = videoInfo;
 8002068:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800206a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800206e:	bd10      	pop	{r4, pc}

08002070 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002070:	4770      	bx	lr
	...

08002074 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002074:	b508      	push	{r3, lr}
    assert(0);
 8002076:	4a03      	ldr	r2, [pc, #12]	@ (8002084 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002078:	f240 11c5 	movw	r1, #453	@ 0x1c5
 800207c:	4b02      	ldr	r3, [pc, #8]	@ (8002088 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800207e:	4803      	ldr	r0, [pc, #12]	@ (800208c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002080:	f01e f85e 	bl	8020140 <__assert_func>
 8002084:	0802163c 	.word	0x0802163c
 8002088:	080232eb 	.word	0x080232eb
 800208c:	08021697 	.word	0x08021697

08002090 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8002090:	b510      	push	{r4, lr}
 8002092:	4604      	mov	r4, r0
 8002094:	2148      	movs	r1, #72	@ 0x48
 8002096:	f01d fcbb 	bl	801fa10 <_ZdlPvj>
 800209a:	4620      	mov	r0, r4
 800209c:	bd10      	pop	{r4, pc}
	...

080020a0 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020a0:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020a4:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 80020a6:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80020a8:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020aa:	6003      	str	r3, [r0, #0]
 80020ac:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80020ae:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80020b2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80020b6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80020ba:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80020be:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80020c2:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 80020c6:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80020ca:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 80020ce:	2001      	movs	r0, #1
 80020d0:	f009 f8a6 	bl	800b220 <osSemaphoreNew>
 80020d4:	4b02      	ldr	r3, [pc, #8]	@ (80020e0 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 80020d6:	6018      	str	r0, [r3, #0]
}
 80020d8:	4620      	mov	r0, r4
 80020da:	bd10      	pop	{r4, pc}
 80020dc:	080218c4 	.word	0x080218c4
 80020e0:	24000594 	.word	0x24000594

080020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 80020e4:	b410      	push	{r4}
 80020e6:	460c      	mov	r4, r1
 80020e8:	4611      	mov	r1, r2
 80020ea:	461a      	mov	r2, r3
    if (reader != 0)
 80020ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80020ee:	b13b      	cbz	r3, 8002100 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80020f0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80020f2:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80020f4:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 80020f6:	4420      	add	r0, r4
}
 80020f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 80020fc:	f01e bb1c 	b.w	8020738 <strncmp>
        src = (const char*)movieData + offset;
 8002100:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002102:	e7f8      	b.n	80020f6 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002104 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002104:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 8002106:	b510      	push	{r4, lr}
    if (reader != 0)
 8002108:	b173      	cbz	r3, 8002128 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800210a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800210c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 800210e:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002110:	1853      	adds	r3, r2, r1
 8002112:	5c52      	ldrb	r2, [r2, r1]
 8002114:	7898      	ldrb	r0, [r3, #2]
 8002116:	785c      	ldrb	r4, [r3, #1]
 8002118:	0400      	lsls	r0, r0, #16
 800211a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 800211e:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002120:	78db      	ldrb	r3, [r3, #3]
 8002122:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002126:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 8002128:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800212a:	1853      	adds	r3, r2, r1
        val |= d[0];
 800212c:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 800212e:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002130:	7898      	ldrb	r0, [r3, #2]
 8002132:	0400      	lsls	r0, r0, #16
 8002134:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8002138:	e7f1      	b.n	800211e <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800213a <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800213a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800213c:	b143      	cbz	r3, 8002150 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800213e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002140:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002142:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002144:	185a      	adds	r2, r3, r1
 8002146:	5c58      	ldrb	r0, [r3, r1]
 8002148:	7852      	ldrb	r2, [r2, #1]
 800214a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800214e:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8002150:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002152:	185a      	adds	r2, r3, r1
        val |= d[0];
 8002154:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 8002156:	7853      	ldrb	r3, [r2, #1]
 8002158:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 800215c:	4770      	bx	lr
	...

08002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	4604      	mov	r4, r0
    if (reader != 0)
 8002164:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 8002166:	460d      	mov	r5, r1
 8002168:	4616      	mov	r6, r2
    if (reader != 0)
 800216a:	b1d8      	cbz	r0, 80021a4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 800216c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800216e:	4293      	cmp	r3, r2
 8002170:	d208      	bcs.n	8002184 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002172:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002174:	4a0d      	ldr	r2, [pc, #52]	@ (80021ac <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 8002176:	219f      	movs	r1, #159	@ 0x9f
 8002178:	480d      	ldr	r0, [pc, #52]	@ (80021b0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800217a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 800217e:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 8002180:	f01d ffde 	bl	8020140 <__assert_func>
        reader->seek(offset);
 8002184:	6803      	ldr	r3, [r0, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 800218a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800218c:	4632      	mov	r2, r6
 800218e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002190:	6803      	ldr	r3, [r0, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4798      	blx	r3
 8002196:	b910      	cbnz	r0, 800219e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002198:	230d      	movs	r3, #13
 800219a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 800219e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 80021a0:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80021a4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80021a6:	4408      	add	r0, r1
 80021a8:	e7fb      	b.n	80021a2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80021aa:	bf00      	nop
 80021ac:	080216fd 	.word	0x080216fd
 80021b0:	08021697 	.word	0x08021697
 80021b4:	080216ea 	.word	0x080216ea

080021b8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80021b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021bc:	6943      	ldr	r3, [r0, #20]
{
 80021be:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80021c0:	b92b      	cbnz	r3, 80021ce <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80021c2:	4b22      	ldr	r3, [pc, #136]	@ (800224c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80021c4:	21e5      	movs	r1, #229	@ 0xe5
 80021c6:	4a22      	ldr	r2, [pc, #136]	@ (8002250 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80021c8:	4822      	ldr	r0, [pc, #136]	@ (8002254 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80021ca:	f01d ffb9 	bl	8020140 <__assert_func>
    readData(currentMovieOffset, 8);
 80021ce:	2208      	movs	r2, #8
 80021d0:	6981      	ldr	r1, [r0, #24]
 80021d2:	f7ff ffc5 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80021d6:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80021d8:	f243 0630 	movw	r6, #12336	@ 0x3030
 80021dc:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80021e0:	3104      	adds	r1, #4
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7ff ff8e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80021e8:	69a3      	ldr	r3, [r4, #24]
 80021ea:	4418      	add	r0, r3
 80021ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80021ee:	f100 0208 	add.w	r2, r0, #8
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d306      	bcc.n	8002204 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 80021f6:	2301      	movs	r3, #1
    return false;
 80021f8:	2000      	movs	r0, #0
    frameNumber = 1;
 80021fa:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 80021fc:	6a23      	ldr	r3, [r4, #32]
 80021fe:	61a3      	str	r3, [r4, #24]
}
 8002200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002204:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002206:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800220a:	2208      	movs	r2, #8
 800220c:	4620      	mov	r0, r4
        frameNumber++;
 800220e:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002210:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002214:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002216:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8002218:	f7ff ffa2 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 800221c:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002220:	4620      	mov	r0, r4
 8002222:	4649      	mov	r1, r9
 8002224:	f7ff ff89 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002228:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 800222c:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800222e:	4620      	mov	r0, r4
 8002230:	f7ff ff83 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002234:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002238:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff ff62 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002240:	45b0      	cmp	r8, r6
 8002242:	d1d1      	bne.n	80021e8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002244:	42bd      	cmp	r5, r7
 8002246:	d1cf      	bne.n	80021e8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 8002248:	2001      	movs	r0, #1
 800224a:	e7d9      	b.n	8002200 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 800224c:	0802173f 	.word	0x0802173f
 8002250:	08021788 	.word	0x08021788
 8002254:	08021697 	.word	0x08021697

08002258 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002258:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 800225a:	6803      	ldr	r3, [r0, #0]
 800225c:	bf38      	it	cc
 800225e:	2101      	movcc	r1, #1
 8002260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 8002262:	b570      	push	{r4, r5, r6, lr}
 8002264:	460d      	mov	r5, r1
 8002266:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002268:	4798      	blx	r3
 800226a:	42a8      	cmp	r0, r5
 800226c:	d204      	bcs.n	8002278 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	4620      	mov	r0, r4
 8002272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002274:	4798      	blx	r3
 8002276:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002278:	1e6b      	subs	r3, r5, #1
 800227a:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 800227c:	2210      	movs	r2, #16
 800227e:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002280:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8002284:	f106 0108 	add.w	r1, r6, #8
 8002288:	f7ff ff6a 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 800228c:	f106 0110 	add.w	r1, r6, #16
 8002290:	4620      	mov	r0, r4
 8002292:	f7ff ff37 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002296:	6a23      	ldr	r3, [r4, #32]
 8002298:	3b04      	subs	r3, #4
 800229a:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 800229c:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80022a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80022a4:	2100      	movs	r1, #0
    readData(0, 72);
 80022a6:	2248      	movs	r2, #72	@ 0x48
{
 80022a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ac:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80022ae:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80022b0:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 80022b4:	f7ff ff54 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80022b8:	69a6      	ldr	r6, [r4, #24]
 80022ba:	2304      	movs	r3, #4
 80022bc:	4a63      	ldr	r2, [pc, #396]	@ (800244c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80022be:	4631      	mov	r1, r6
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7ff ff0f 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022c6:	b148      	cbz	r0, 80022dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80022c8:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80022ca:	4a61      	ldr	r2, [pc, #388]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022cc:	f240 112d 	movw	r1, #301	@ 0x12d
        lastError = AVI_ERROR_NOT_RIFF;
 80022d0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 80022d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002454 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80022d6:	4860      	ldr	r0, [pc, #384]	@ (8002458 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 80022d8:	f01d ff32 	bl	8020140 <__assert_func>
    currentMovieOffset += 8;
 80022dc:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80022e0:	2304      	movs	r3, #4
 80022e2:	4a5e      	ldr	r2, [pc, #376]	@ (800245c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80022e4:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80022e6:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80022e8:	f7ff fefc 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022ec:	b138      	cbz	r0, 80022fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80022ee:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 80022f0:	4a57      	ldr	r2, [pc, #348]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022f2:	f240 1135 	movw	r1, #309	@ 0x135
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80022f6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 80022fa:	4b59      	ldr	r3, [pc, #356]	@ (8002460 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 80022fc:	e7eb      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 80022fe:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002302:	2304      	movs	r3, #4
 8002304:	4a57      	ldr	r2, [pc, #348]	@ (8002464 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002306:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002308:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800230a:	f7ff feeb 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800230e:	4607      	mov	r7, r0
 8002310:	b138      	cbz	r0, 8002322 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002312:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002314:	4a4e      	ldr	r2, [pc, #312]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002316:	f44f 719e 	mov.w	r1, #316	@ 0x13c
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800231a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 800231e:	4b52      	ldr	r3, [pc, #328]	@ (8002468 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002320:	e7d9      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002322:	f106 0110 	add.w	r1, r6, #16
 8002326:	4620      	mov	r0, r4
 8002328:	f7ff feec 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 800232c:	4605      	mov	r5, r0
 800232e:	b920      	cbnz	r0, 800233a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002330:	4b4e      	ldr	r3, [pc, #312]	@ (800246c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002332:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8002336:	4a46      	ldr	r2, [pc, #280]	@ (8002450 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002338:	e7cd      	b.n	80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800233a:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 800233e:	2304      	movs	r3, #4
 8002340:	4a4b      	ldr	r2, [pc, #300]	@ (8002470 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002342:	4620      	mov	r0, r4
 8002344:	4641      	mov	r1, r8
 8002346:	f7ff fecd 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800234a:	2800      	cmp	r0, #0
 800234c:	d049      	beq.n	80023e2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 800234e:	2306      	movs	r3, #6
 8002350:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 8002354:	2304      	movs	r3, #4
 8002356:	4a47      	ldr	r2, [pc, #284]	@ (8002474 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8002358:	f106 0118 	add.w	r1, r6, #24
 800235c:	4620      	mov	r0, r4
 800235e:	f7ff fec1 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002362:	2800      	cmp	r0, #0
 8002364:	d03f      	beq.n	80023e6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8002366:	2307      	movs	r3, #7
 8002368:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 800236c:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800236e:	4f42      	ldr	r7, [pc, #264]	@ (8002478 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002370:	220c      	movs	r2, #12
 8002372:	4620      	mov	r0, r4
 8002374:	4629      	mov	r1, r5
 8002376:	f7ff fef3 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800237a:	f105 0608 	add.w	r6, r5, #8
 800237e:	2304      	movs	r3, #4
 8002380:	463a      	mov	r2, r7
 8002382:	4620      	mov	r0, r4
 8002384:	4631      	mov	r1, r6
 8002386:	f7ff fead 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800238a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800238e:	2800      	cmp	r0, #0
 8002390:	d048      	beq.n	8002424 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 8002392:	2b00      	cmp	r3, #0
 8002394:	d148      	bne.n	8002428 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8002396:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002398:	42ab      	cmp	r3, r5
 800239a:	d849      	bhi.n	8002430 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 800239c:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023a0:	3504      	adds	r5, #4
 80023a2:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80023a4:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7ff feac 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023ac:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023ae:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80023b0:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7ff fea6 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80023b8:	4406      	add	r6, r0
    readData(listOffset, 4);
 80023ba:	2204      	movs	r2, #4
 80023bc:	4620      	mov	r0, r4
 80023be:	4631      	mov	r1, r6
 80023c0:	f7ff fece 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80023c4:	2304      	movs	r3, #4
 80023c6:	4a2d      	ldr	r2, [pc, #180]	@ (800247c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80023c8:	4631      	mov	r1, r6
 80023ca:	4620      	mov	r0, r4
 80023cc:	f7ff fe8a 	bl	80020e4 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d138      	bne.n	8002446 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 80023d4:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80023d6:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 80023d8:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80023da:	69a3      	ldr	r3, [r4, #24]
 80023dc:	6223      	str	r3, [r4, #32]
}
 80023de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80023e2:	2701      	movs	r7, #1
 80023e4:	e7b6      	b.n	8002354 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 80023e6:	2f00      	cmp	r7, #0
 80023e8:	d0c0      	beq.n	800236c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80023ea:	f106 0120 	add.w	r1, r6, #32
 80023ee:	4620      	mov	r0, r4
 80023f0:	f7ff fe88 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 80023f8:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 80023fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002400:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002402:	4620      	mov	r0, r4
 8002404:	f7ff fe7e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002408:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 800240c:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800240e:	4620      	mov	r0, r4
 8002410:	f7ff fe78 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002414:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002418:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff fe72 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002420:	6120      	str	r0, [r4, #16]
 8002422:	e7a3      	b.n	800236c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0b9      	beq.n	800239c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002428:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800242a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 800242e:	e7d6      	b.n	80023de <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002430:	1d29      	adds	r1, r5, #4
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff fe66 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 8002438:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800243a:	220c      	movs	r2, #12
 800243c:	4620      	mov	r0, r4
 800243e:	4629      	mov	r1, r5
 8002440:	f7ff fe8e 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002444:	e799      	b.n	800237a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002446:	230b      	movs	r3, #11
 8002448:	e7ef      	b.n	800242a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 800244a:	bf00      	nop
 800244c:	080217bb 	.word	0x080217bb
 8002450:	080217d9 	.word	0x080217d9
 8002454:	080217c0 	.word	0x080217c0
 8002458:	08021697 	.word	0x08021697
 800245c:	08021806 	.word	0x08021806
 8002460:	0802180b 	.word	0x0802180b
 8002464:	08021823 	.word	0x08021823
 8002468:	08021828 	.word	0x08021828
 800246c:	0802183e 	.word	0x0802183e
 8002470:	0802184a 	.word	0x0802184a
 8002474:	0802184f 	.word	0x0802184f
 8002478:	08021854 	.word	0x08021854
 800247c:	08021859 	.word	0x08021859

08002480 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002480:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 8002484:	2200      	movs	r2, #0
 8002486:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 8002488:	f7ff bf0c 	b.w	80022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

0800248c <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 800248c:	b510      	push	{r4, lr}
    movieData = 0;
 800248e:	2300      	movs	r3, #0
{
 8002490:	4604      	mov	r4, r0
 8002492:	4608      	mov	r0, r1
    movieData = 0;
 8002494:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 8002496:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002498:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4798      	blx	r3
 800249e:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80024a0:	4620      	mov	r0, r4
}
 80024a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80024a6:	f7ff befd 	b.w	80022a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080024ac <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80024ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 80024ae:	4c14      	ldr	r4, [pc, #80]	@ (8002500 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 80024b0:	4d14      	ldr	r5, [pc, #80]	@ (8002504 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 80024b2:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 80024b4:	2400      	movs	r4, #0
 80024b6:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <JPEG_Decode_DMA+0x5c>)
 80024b8:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80024ba:	4b14      	ldr	r3, [pc, #80]	@ (800250c <JPEG_Decode_DMA+0x60>)
 80024bc:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80024be:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 80024c0:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 80024c2:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80024c4:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <JPEG_Decode_DMA+0x68>)
 80024c6:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80024c8:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <JPEG_Decode_DMA+0x6c>)
 80024ca:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 80024cc:	4b13      	ldr	r3, [pc, #76]	@ (800251c <JPEG_Decode_DMA+0x70>)
 80024ce:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80024d2:	682a      	ldr	r2, [r5, #0]
 80024d4:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80024d8:	701c      	strb	r4, [r3, #0]
 80024da:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 80024dc:	e9c3 4402 	strd	r4, r4, [r3, #8]
 80024e0:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80024e4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80024e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002524 <JPEG_Decode_DMA+0x78>)
 80024ea:	68d2      	ldr	r2, [r2, #12]
 80024ec:	436a      	muls	r2, r5
 80024ee:	9200      	str	r2, [sp, #0]
 80024f0:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f005 fd07 	bl	8007f08 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 80024fa:	4620      	mov	r0, r4
 80024fc:	b003      	add	sp, #12
 80024fe:	bd30      	pop	{r4, r5, pc}
 8002500:	24009bc0 	.word	0x24009bc0
 8002504:	24009b9c 	.word	0x24009b9c
 8002508:	24009bac 	.word	0x24009bac
 800250c:	24000590 	.word	0x24000590
 8002510:	24009bbc 	.word	0x24009bbc
 8002514:	24009bb4 	.word	0x24009bb4
 8002518:	24009bb8 	.word	0x24009bb8
 800251c:	24000598 	.word	0x24000598
 8002520:	24000010 	.word	0x24000010
 8002524:	24000578 	.word	0x24000578

08002528 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002528:	684b      	ldr	r3, [r1, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d115      	bne.n	800255a <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 800252e:	68cb      	ldr	r3, [r1, #12]
 8002530:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002532:	bf1e      	ittt	ne
 8002534:	f023 030f 	bicne.w	r3, r3, #15
 8002538:	3310      	addne	r3, #16
 800253a:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 800253c:	688b      	ldr	r3, [r1, #8]
 800253e:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8002540:	bf1e      	ittt	ne
 8002542:	f023 030f 	bicne.w	r3, r3, #15
 8002546:	3310      	addne	r3, #16
 8002548:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800254a:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 800254c:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800254e:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002550:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 8002552:	4353      	muls	r3, r2
 8002554:	4a0e      	ldr	r2, [pc, #56]	@ (8002590 <HAL_JPEG_InfoReadyCallback+0x68>)
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 800255a:	2b02      	cmp	r3, #2
 800255c:	d10e      	bne.n	800257c <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 800255e:	68cb      	ldr	r3, [r1, #12]
 8002560:	071a      	lsls	r2, r3, #28
 8002562:	d003      	beq.n	800256c <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002564:	f023 030f 	bic.w	r3, r3, #15
 8002568:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 800256a:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 800256c:	688b      	ldr	r3, [r1, #8]
 800256e:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002570:	bf1e      	ittt	ne
 8002572:	f023 0307 	bicne.w	r3, r3, #7
 8002576:	3308      	addne	r3, #8
 8002578:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 800257a:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1fc      	bne.n	800257a <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 8002580:	68cb      	ldr	r3, [r1, #12]
 8002582:	0758      	lsls	r0, r3, #29
 8002584:	d0f2      	beq.n	800256c <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002586:	f023 0307 	bic.w	r3, r3, #7
 800258a:	3308      	adds	r3, #8
 800258c:	e7ed      	b.n	800256a <HAL_JPEG_InfoReadyCallback+0x42>
 800258e:	bf00      	nop
 8002590:	24009ba4 	.word	0x24009ba4

08002594 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8002594:	4a0b      	ldr	r2, [pc, #44]	@ (80025c4 <HAL_JPEG_GetDataCallback+0x30>)
 8002596:	6813      	ldr	r3, [r2, #0]
 8002598:	440b      	add	r3, r1
    {
 800259a:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 800259c:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <HAL_JPEG_GetDataCallback+0x34>)
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d20c      	bcs.n	80025c0 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025a6:	4c09      	ldr	r4, [pc, #36]	@ (80025cc <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80025a8:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025aa:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025ac:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025b0:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025b2:	bf28      	it	cs
 80025b4:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80025b8:	6021      	str	r1, [r4, #0]
        }
    }
 80025ba:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80025bc:	f005 bd06 	b.w	8007fcc <HAL_JPEG_ConfigInputBuffer>
    }
 80025c0:	bc30      	pop	{r4, r5}
 80025c2:	4770      	bx	lr
 80025c4:	24009bbc 	.word	0x24009bbc
 80025c8:	24009bb8 	.word	0x24009bb8
 80025cc:	24009bb4 	.word	0x24009bb4

080025d0 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025d2:	4c20      	ldr	r4, [pc, #128]	@ (8002654 <HAL_JPEG_DataReadyCallback+0x84>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	4d20      	ldr	r5, [pc, #128]	@ (8002658 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 80025d8:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025da:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80025dc:	4f1f      	ldr	r7, [pc, #124]	@ (800265c <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80025e8:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 80025ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002660 <HAL_JPEG_DataReadyCallback+0x90>)
 80025ec:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 80025ee:	6822      	ldr	r2, [r4, #0]
 80025f0:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 80025f4:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	440a      	add	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d901      	bls.n	800260e <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	5ceb      	ldrb	r3, [r5, r3]
 8002614:	b133      	cbz	r3, 8002624 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002616:	2102      	movs	r1, #2
 8002618:	4630      	mov	r0, r6
 800261a:	f005 fca9 	bl	8007f70 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 800261e:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <HAL_JPEG_DataReadyCallback+0x94>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	4630      	mov	r0, r6
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 800262e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002632:	6869      	ldr	r1, [r5, #4]
 8002634:	435a      	muls	r2, r3
 8002636:	f005 fccc 	bl	8007fd2 <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 800263a:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <HAL_JPEG_DataReadyCallback+0x98>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	7a1a      	ldrb	r2, [r3, #8]
 8002640:	b93a      	cbnz	r2, 8002652 <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002642:	7a9b      	ldrb	r3, [r3, #10]
 8002644:	b92b      	cbnz	r3, 8002652 <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <HAL_JPEG_DataReadyCallback+0x9c>)
 8002648:	6818      	ldr	r0, [r3, #0]
        }
    }
 800264a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 800264e:	f008 be5d 	b.w	800b30c <osSemaphoreRelease>
    }
 8002652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002654:	24009b9c 	.word	0x24009b9c
 8002658:	24000010 	.word	0x24000010
 800265c:	24000578 	.word	0x24000578
 8002660:	24000598 	.word	0x24000598
 8002664:	24009bac 	.word	0x24009bac
 8002668:	24009ba0 	.word	0x24009ba0
 800266c:	24000594 	.word	0x24000594

08002670 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002670:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002672:	e7fe      	b.n	8002672 <HAL_JPEG_ErrorCallback+0x2>

08002674 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002674:	4b01      	ldr	r3, [pc, #4]	@ (800267c <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    }
 800267a:	4770      	bx	lr
 800267c:	24009bb0 	.word	0x24009bb0

08002680 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002680:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002682:	4d16      	ldr	r5, [pc, #88]	@ (80026dc <JPEG_OutputHandler+0x5c>)
{
 8002684:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002686:	682b      	ldr	r3, [r5, #0]
 8002688:	b113      	cbz	r3, 8002690 <JPEG_OutputHandler+0x10>
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <JPEG_OutputHandler+0x60>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	bb1b      	cbnz	r3, 80026d8 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002690:	4b14      	ldr	r3, [pc, #80]	@ (80026e4 <JPEG_OutputHandler+0x64>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	7a03      	ldrb	r3, [r0, #8]
 8002696:	b963      	cbnz	r3, 80026b2 <JPEG_OutputHandler+0x32>
 8002698:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <JPEG_OutputHandler+0x68>)
 800269a:	4a14      	ldr	r2, [pc, #80]	@ (80026ec <JPEG_OutputHandler+0x6c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d105      	bne.n	80026b2 <JPEG_OutputHandler+0x32>
 80026a6:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <JPEG_OutputHandler+0x60>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b913      	cbnz	r3, 80026b2 <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 80026ac:	6803      	ldr	r3, [r0, #0]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 80026b2:	4a0f      	ldr	r2, [pc, #60]	@ (80026f0 <JPEG_OutputHandler+0x70>)
 80026b4:	6813      	ldr	r3, [r2, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10c      	bne.n	80026d4 <JPEG_OutputHandler+0x54>
 80026ba:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <JPEG_OutputHandler+0x74>)
 80026bc:	490b      	ldr	r1, [pc, #44]	@ (80026ec <JPEG_OutputHandler+0x6c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	b933      	cbnz	r3, 80026d4 <JPEG_OutputHandler+0x54>
 80026c6:	682b      	ldr	r3, [r5, #0]
 80026c8:	b923      	cbnz	r3, 80026d4 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026ca:	2102      	movs	r1, #2
 80026cc:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 80026ce:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80026d0:	f005 fead 	bl	800842e <HAL_JPEG_Resume>
        return 1;
 80026d4:	2002      	movs	r0, #2
    }

    return 2;
}
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 80026d8:	2001      	movs	r0, #1
 80026da:	e7fc      	b.n	80026d6 <JPEG_OutputHandler+0x56>
 80026dc:	24009bb0 	.word	0x24009bb0
 80026e0:	2400058c 	.word	0x2400058c
 80026e4:	24009ba0 	.word	0x24009ba0
 80026e8:	24000590 	.word	0x24000590
 80026ec:	24000010 	.word	0x24000010
 80026f0:	24009bac 	.word	0x24009bac
 80026f4:	24009b9c 	.word	0x24009b9c

080026f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	4605      	mov	r5, r0
    if (length == 0)
 80026fc:	2a00      	cmp	r2, #0
 80026fe:	d035      	beq.n	800276c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002700:	2b00      	cmp	r3, #0
 8002702:	d033      	beq.n	800276c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002704:	481a      	ldr	r0, [pc, #104]	@ (8002770 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8002706:	2403      	movs	r4, #3
 8002708:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800270a:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 800270c:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 800270e:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002712:	bf18      	it	ne
 8002714:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002718:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 800271a:	bf18      	it	ne
 800271c:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 800271e:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002720:	0924      	lsrs	r4, r4, #4
 8002722:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002724:	692c      	ldr	r4, [r5, #16]
 8002726:	f014 040f 	ands.w	r4, r4, #15
 800272a:	bf18      	it	ne
 800272c:	f1c4 0410 	rsbne	r4, r4, #16
 8002730:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002732:	4810      	ldr	r0, [pc, #64]	@ (8002774 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002734:	f7ff feba 	bl	80024ac <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002738:	4c0f      	ldr	r4, [pc, #60]	@ (8002778 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 800273a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 800273c:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800273e:	4d0d      	ldr	r5, [pc, #52]	@ (8002774 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8002740:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002742:	4628      	mov	r0, r5
 8002744:	f7ff ff9c 	bl	8002680 <JPEG_OutputHandler>
 8002748:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d105      	bne.n	800275c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8002750:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002752:	f04f 31ff 	mov.w	r1, #4294967295
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	f008 fdac 	bl	800b2b4 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d1ef      	bne.n	8002742 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	4a07      	ldr	r2, [pc, #28]	@ (8002784 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002766:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002768:	4a07      	ldr	r2, [pc, #28]	@ (8002788 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 800276a:	6013      	str	r3, [r2, #0]
}
 800276c:	bd70      	pop	{r4, r5, r6, pc}
 800276e:	bf00      	nop
 8002770:	24000578 	.word	0x24000578
 8002774:	24000390 	.word	0x24000390
 8002778:	24009ba8 	.word	0x24009ba8
 800277c:	24009ba0 	.word	0x24009ba0
 8002780:	24000594 	.word	0x24000594
 8002784:	24009bb0 	.word	0x24009bb0
 8002788:	2400058c 	.word	0x2400058c

0800278c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 800278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002790:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002792:	6943      	ldr	r3, [r0, #20]
{
 8002794:	b085      	sub	sp, #20
 8002796:	4604      	mov	r4, r0
 8002798:	460f      	mov	r7, r1
 800279a:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800279c:	b92b      	cbnz	r3, 80027aa <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 800279e:	4b29      	ldr	r3, [pc, #164]	@ (8002844 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 80027a0:	21b1      	movs	r1, #177	@ 0xb1
 80027a2:	4a29      	ldr	r2, [pc, #164]	@ (8002848 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80027a4:	4829      	ldr	r0, [pc, #164]	@ (800284c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80027a6:	f01d fccb 	bl	8020140 <__assert_func>
    readData(currentMovieOffset, 8);
 80027aa:	2208      	movs	r2, #8
 80027ac:	6981      	ldr	r1, [r0, #24]
 80027ae:	f7ff fcd7 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027b2:	69a6      	ldr	r6, [r4, #24]
 80027b4:	4620      	mov	r0, r4
 80027b6:	4631      	mov	r1, r6
 80027b8:	f7ff fcbf 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027bc:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 80027be:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7ff fcba 	bl	800213a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027c6:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 80027c8:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff fc9a 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80027d0:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80027d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80027d6:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 80027d8:	1842      	adds	r2, r0, r1
 80027da:	429a      	cmp	r2, r3
 80027dc:	d226      	bcs.n	800282c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80027de:	f243 0330 	movw	r3, #12336	@ 0x3030
 80027e2:	459b      	cmp	fp, r3
 80027e4:	d117      	bne.n	8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80027e6:	f246 3364 	movw	r3, #25444	@ 0x6364
 80027ea:	459a      	cmp	sl, r3
 80027ec:	d113      	bne.n	8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 80027ee:	b190      	cbz	r0, 8002816 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027f0:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 80027f2:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff fcb3 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80027fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027fc:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80027fe:	462a      	mov	r2, r5
 8002800:	4620      	mov	r0, r4
 8002802:	f8cd 8000 	str.w	r8, [sp]
 8002806:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800280a:	463b      	mov	r3, r7
 800280c:	f7ff ff74 	bl	80026f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002810:	6963      	ldr	r3, [r4, #20]
 8002812:	3301      	adds	r3, #1
 8002814:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002816:	69a3      	ldr	r3, [r4, #24]
 8002818:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 800281a:	b905      	cbnz	r5, 800281e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 800281c:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800281e:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002820:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002822:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002826:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002828:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 800282a:	d109      	bne.n	8002840 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 800282c:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 800282e:	2001      	movs	r0, #1
        frameNumber = 1;
 8002830:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002832:	6a23      	ldr	r3, [r4, #32]
 8002834:	61a3      	str	r3, [r4, #24]
}
 8002836:	f080 0001 	eor.w	r0, r0, #1
 800283a:	b005      	add	sp, #20
 800283c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002840:	2000      	movs	r0, #0
 8002842:	e7f8      	b.n	8002836 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002844:	0802173f 	.word	0x0802173f
 8002848:	0802185e 	.word	0x0802185e
 800284c:	08021697 	.word	0x08021697

08002850 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002854:	6981      	ldr	r1, [r0, #24]
{
 8002856:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002858:	2208      	movs	r2, #8
 800285a:	f7ff fc81 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 800285e:	69a7      	ldr	r7, [r4, #24]
 8002860:	4620      	mov	r0, r4
 8002862:	1d39      	adds	r1, r7, #4
 8002864:	f7ff fc4e 	bl	8002104 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002868:	f107 0108 	add.w	r1, r7, #8
 800286c:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 800286e:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002870:	4620      	mov	r0, r4
 8002872:	f7ff fc75 	bl	8002160 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002876:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002878:	b16e      	cbz	r6, 8002896 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 800287a:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 800287c:	4c07      	ldr	r4, [pc, #28]	@ (800289c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 800287e:	4d08      	ldr	r5, [pc, #32]	@ (80028a0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002880:	4633      	mov	r3, r6
 8002882:	4807      	ldr	r0, [pc, #28]	@ (80028a0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002884:	f7ff fe12 	bl	80024ac <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002888:	4628      	mov	r0, r5
 800288a:	f7ff fef9 	bl	8002680 <JPEG_OutputHandler>
 800288e:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f8      	beq.n	8002888 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002896:	2001      	movs	r0, #1
 8002898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800289a:	bf00      	nop
 800289c:	24009ba8 	.word	0x24009ba8
 80028a0:	24000390 	.word	0x24000390

080028a4 <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <DMA2D_CopyBuffer+0x70>)
 80028a6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 80028aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028ac:	ea4f 130c 	mov.w	r3, ip, lsl #4
 80028b0:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028b2:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028b4:	4e18      	ldr	r6, [pc, #96]	@ (8002918 <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028b6:	4f19      	ldr	r7, [pc, #100]	@ (800291c <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 80028b8:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 80028bc:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028c0:	434d      	muls	r5, r1
 80028c2:	6911      	ldr	r1, [r2, #16]
 80028c4:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028c8:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 80028ca:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80028cc:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028ce:	683f      	ldr	r7, [r7, #0]
 80028d0:	68d3      	ldr	r3, [r2, #12]
 80028d2:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028d4:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 80028d6:	45bc      	cmp	ip, r7
 80028d8:	d317      	bcc.n	800290a <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028da:	6892      	ldr	r2, [r2, #8]
 80028dc:	f1c2 0210 	rsb	r2, r2, #16
 80028e0:	430a      	orrs	r2, r1
 80028e2:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002920 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028e6:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028ea:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028ec:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <DMA2D_CopyBuffer+0x74>)
 80028f0:	4421      	add	r1, r4
 80028f2:	4429      	add	r1, r5
 80028f4:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 80028f6:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 80028f8:	2300      	movs	r3, #0
 80028fa:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 80028fc:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <DMA2D_CopyBuffer+0x80>)
 80028fe:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002900:	6843      	ldr	r3, [r0, #4]
 8002902:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002904:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <DMA2D_CopyBuffer+0x84>)
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 800290a:	f041 0110 	orr.w	r1, r1, #16
 800290e:	6471      	str	r1, [r6, #68]	@ 0x44
 8002910:	e7e8      	b.n	80028e4 <DMA2D_CopyBuffer+0x40>
 8002912:	bf00      	nop
 8002914:	24000578 	.word	0x24000578
 8002918:	52001000 	.word	0x52001000
 800291c:	24009ba4 	.word	0x24009ba4
 8002920:	24009bc0 	.word	0x24009bc0
 8002924:	ff09000b 	.word	0xff09000b
 8002928:	00010201 	.word	0x00010201

0800292c <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 800292e:	2200      	movs	r2, #0
 8002930:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002932:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002934:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002936:	3101      	adds	r1, #1
 8002938:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 800293a:	6819      	ldr	r1, [r3, #0]
 800293c:	2901      	cmp	r1, #1
 800293e:	d900      	bls.n	8002942 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002940:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002942:	4b08      	ldr	r3, [pc, #32]	@ (8002964 <DMA2D_ExternalJobCompleted+0x38>)
 8002944:	4a08      	ldr	r2, [pc, #32]	@ (8002968 <DMA2D_ExternalJobCompleted+0x3c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68d2      	ldr	r2, [r2, #12]
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	68c2      	ldr	r2, [r0, #12]
 800294e:	429a      	cmp	r2, r3
 8002950:	d302      	bcc.n	8002958 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002952:	4b06      	ldr	r3, [pc, #24]	@ (800296c <DMA2D_ExternalJobCompleted+0x40>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002958:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <DMA2D_ExternalJobCompleted+0x44>)
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	f008 bcd6 	b.w	800b30c <osSemaphoreRelease>
 8002960:	24000590 	.word	0x24000590
 8002964:	24009ba4 	.word	0x24009ba4
 8002968:	24000578 	.word	0x24000578
 800296c:	2400058c 	.word	0x2400058c
 8002970:	24000594 	.word	0x24000594

08002974 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002974:	2101      	movs	r1, #1
 8002976:	2200      	movs	r2, #0
{
 8002978:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800297a:	4608      	mov	r0, r1
 800297c:	f008 fc50 	bl	800b220 <osSemaphoreNew>
 8002980:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002982:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002984:	b928      	cbnz	r0, 8002992 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002986:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002988:	2128      	movs	r1, #40	@ 0x28
 800298a:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800298c:	480a      	ldr	r0, [pc, #40]	@ (80029b8 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800298e:	f01d fbd7 	bl	8020140 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002992:	2200      	movs	r2, #0
 8002994:	2104      	movs	r1, #4
 8002996:	2001      	movs	r0, #1
 8002998:	f008 fce1 	bl	800b35e <osMessageQueueNew>
 800299c:	4b07      	ldr	r3, [pc, #28]	@ (80029bc <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800299e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 80029a0:	b918      	cbnz	r0, 80029aa <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 80029a2:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 80029a4:	212c      	movs	r1, #44	@ 0x2c
 80029a6:	4a03      	ldr	r2, [pc, #12]	@ (80029b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 80029a8:	e7f0      	b.n	800298c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 80029aa:	bd08      	pop	{r3, pc}
 80029ac:	24009bc8 	.word	0x24009bc8
 80029b0:	08021900 	.word	0x08021900
 80029b4:	08021949 	.word	0x08021949
 80029b8:	08021978 	.word	0x08021978
 80029bc:	24009bc4 	.word	0x24009bc4
 80029c0:	080219c1 	.word	0x080219c1

080029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 80029c4:	4b02      	ldr	r3, [pc, #8]	@ (80029d0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 80029c6:	f04f 31ff 	mov.w	r1, #4294967295
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	f008 bc72 	b.w	800b2b4 <osSemaphoreAcquire>
 80029d0:	24009bc8 	.word	0x24009bc8

080029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 80029d4:	4b01      	ldr	r3, [pc, #4]	@ (80029dc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	f008 bc98 	b.w	800b30c <osSemaphoreRelease>
 80029dc:	24009bc8 	.word	0x24009bc8

080029e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80029e0:	4b02      	ldr	r3, [pc, #8]	@ (80029ec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 80029e2:	2100      	movs	r1, #0
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	f008 bc65 	b.w	800b2b4 <osSemaphoreAcquire>
 80029ea:	bf00      	nop
 80029ec:	24009bc8 	.word	0x24009bc8

080029f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 80029f0:	f7ff bff0 	b.w	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080029f4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80029f4:	2300      	movs	r3, #0
 80029f6:	4803      	ldr	r0, [pc, #12]	@ (8002a04 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 80029f8:	4903      	ldr	r1, [pc, #12]	@ (8002a08 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 80029fa:	461a      	mov	r2, r3
 80029fc:	6800      	ldr	r0, [r0, #0]
 80029fe:	f008 bce9 	b.w	800b3d4 <osMessageQueuePut>
 8002a02:	bf00      	nop
 8002a04:	24009bc4 	.word	0x24009bc4
 8002a08:	24000030 	.word	0x24000030

08002a0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002a0c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002a0e:	2300      	movs	r3, #0
 8002a10:	4c07      	ldr	r4, [pc, #28]	@ (8002a30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002a12:	a901      	add	r1, sp, #4
 8002a14:	461a      	mov	r2, r3
 8002a16:	6820      	ldr	r0, [r4, #0]
 8002a18:	f008 fd0d 	bl	800b436 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a20:	2200      	movs	r2, #0
 8002a22:	a901      	add	r1, sp, #4
 8002a24:	6820      	ldr	r0, [r4, #0]
 8002a26:	f008 fd06 	bl	800b436 <osMessageQueueGet>
}
 8002a2a:	b002      	add	sp, #8
 8002a2c:	bd10      	pop	{r4, pc}
 8002a2e:	bf00      	nop
 8002a30:	24009bc4 	.word	0x24009bc4

08002a34 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002a34:	6803      	ldr	r3, [r0, #0]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a38:	4718      	bx	r3

08002a3a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	4770      	bx	lr

08002a3e <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002a3e:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002a42:	4770      	bx	lr

08002a44 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002a44:	b510      	push	{r4, lr}
 8002a46:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4c:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002a50:	f008 fba4 	bl	800b19c <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002a54:	6860      	ldr	r0, [r4, #4]
 8002a56:	6803      	ldr	r3, [r0, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4798      	blx	r3
 8002a5c:	b978      	cbnz	r0, 8002a7e <_ZN8STM32DMA5startEv+0x3a>
 8002a5e:	7a63      	ldrb	r3, [r4, #9]
 8002a60:	b16b      	cbz	r3, 8002a7e <_ZN8STM32DMA5startEv+0x3a>
 8002a62:	7a23      	ldrb	r3, [r4, #8]
 8002a64:	b95b      	cbnz	r3, 8002a7e <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002a66:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002a72:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002a7a:	f008 bbb2 	b.w	800b1e2 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002a7e:	490b      	ldr	r1, [pc, #44]	@ (8002aac <_ZN8STM32DMA5startEv+0x68>)
 8002a80:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab0 <_ZN8STM32DMA5startEv+0x6c>)
 8002a82:	680b      	ldr	r3, [r1, #0]
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	5cd3      	ldrb	r3, [r2, r3]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d1f2      	bne.n	8002a72 <_ZN8STM32DMA5startEv+0x2e>
 8002a8c:	7a20      	ldrb	r0, [r4, #8]
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d1ef      	bne.n	8002a72 <_ZN8STM32DMA5startEv+0x2e>
 8002a92:	7aa0      	ldrb	r0, [r4, #10]
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d1ec      	bne.n	8002a72 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002a98:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002a9a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002a9e:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002aa2:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002aa4:	f7ff fefe 	bl	80028a4 <DMA2D_CopyBuffer>
    }
 8002aa8:	e7e3      	b.n	8002a72 <_ZN8STM32DMA5startEv+0x2e>
 8002aaa:	bf00      	nop
 8002aac:	24000590 	.word	0x24000590
 8002ab0:	24000010 	.word	0x24000010

08002ab4 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002ab4:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002aba:	6003      	str	r3, [r0, #0]
 8002abc:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <_ZN8STM32DMAD1Ev+0x1c>)
 8002abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002ac2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ac6:	f3bf 8f6f 	isb	sy
}
 8002aca:	4770      	bx	lr
 8002acc:	08021b5c 	.word	0x08021b5c
 8002ad0:	e000e100 	.word	0xe000e100

08002ad4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002ad4:	b510      	push	{r4, lr}
 8002ad6:	4604      	mov	r4, r0
}
 8002ad8:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002adc:	f7ff ffea 	bl	8002ab4 <_ZN8STM32DMAD1Ev>
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	f01c ff95 	bl	801fa10 <_ZdlPvj>
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	bd10      	pop	{r4, pc}
	...

08002aec <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002aec:	4b0f      	ldr	r3, [pc, #60]	@ (8002b2c <_ZN8STM32DMA10initializeEv+0x40>)
{
 8002aee:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002af0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002af4:	f042 0210 	orr.w	r2, r2, #16
 8002af8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002afc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002b00:	f002 0210 	and.w	r2, r2, #16
 8002b04:	9201      	str	r2, [sp, #4]
 8002b06:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002b08:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b0a:	f042 0210 	orr.w	r2, r2, #16
 8002b0e:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002b10:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002b12:	f022 0210 	bic.w	r2, r2, #16
 8002b16:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002b18:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <_ZN8STM32DMA10initializeEv+0x44>)
 8002b1a:	4a06      	ldr	r2, [pc, #24]	@ (8002b34 <_ZN8STM32DMA10initializeEv+0x48>)
 8002b1c:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1e:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <_ZN8STM32DMA10initializeEv+0x4c>)
 8002b20:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b24:	609a      	str	r2, [r3, #8]
}
 8002b26:	b002      	add	sp, #8
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	58024400 	.word	0x58024400
 8002b30:	24000404 	.word	0x24000404
 8002b34:	08002d81 	.word	0x08002d81
 8002b38:	e000e100 	.word	0xe000e100

08002b3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002b3c:	b508      	push	{r3, lr}
    switch (format)
 8002b3e:	280a      	cmp	r0, #10
 8002b40:	d809      	bhi.n	8002b56 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002b42:	e8df f000 	tbb	[pc, r0]
 8002b46:	1006      	.short	0x1006
 8002b48:	0808080e 	.word	0x0808080e
 8002b4c:	10101008 	.word	0x10101008
 8002b50:	10          	.byte	0x10
 8002b51:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002b52:	2002      	movs	r0, #2
}
 8002b54:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002b56:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002b58:	2187      	movs	r1, #135	@ 0x87
 8002b5a:	4a05      	ldr	r2, [pc, #20]	@ (8002b70 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002b5c:	4805      	ldr	r0, [pc, #20]	@ (8002b74 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002b5e:	f01d faef 	bl	8020140 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002b62:	2000      	movs	r0, #0
 8002b64:	e7f6      	b.n	8002b54 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002b66:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002b68:	e7f4      	b.n	8002b54 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002b6a:	bf00      	nop
 8002b6c:	08021a03 	.word	0x08021a03
 8002b70:	08021a1e 	.word	0x08021a1e
 8002b74:	08021a69 	.word	0x08021a69

08002b78 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002b78:	b538      	push	{r3, r4, r5, lr}
 8002b7a:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002b7c:	7f88      	ldrb	r0, [r1, #30]
 8002b7e:	f7ff ffdd 	bl	8002b3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b82:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b84:	8aa5      	ldrh	r5, [r4, #20]
 8002b86:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b88:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b8a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b8e:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b92:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b94:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b96:	1b52      	subs	r2, r2, r5
 8002b98:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002b9a:	6825      	ldr	r5, [r4, #0]
 8002b9c:	2d08      	cmp	r5, #8
 8002b9e:	d10e      	bne.n	8002bbe <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ba0:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ba2:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ba4:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002ba8:	7f20      	ldrb	r0, [r4, #28]
 8002baa:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002bae:	61da      	str	r2, [r3, #28]
        return color;
 8002bb0:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002bb2:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002bb4:	4a07      	ldr	r2, [pc, #28]	@ (8002bd4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bb6:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002bb8:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002bba:	601a      	str	r2, [r3, #0]
    }
}
 8002bbc:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002bbe:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002bc0:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002bc2:	611a      	str	r2, [r3, #16]
 8002bc4:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002bc6:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002bc8:	4a03      	ldr	r2, [pc, #12]	@ (8002bd8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002bca:	e7f6      	b.n	8002bba <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002bcc:	52001000 	.word	0x52001000
 8002bd0:	00010009 	.word	0x00010009
 8002bd4:	00020201 	.word	0x00020201
 8002bd8:	00030201 	.word	0x00030201

08002bdc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002bdc:	b508      	push	{r3, lr}
    switch (format)
 8002bde:	280b      	cmp	r0, #11
 8002be0:	d80b      	bhi.n	8002bfa <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002be2:	e8df f000 	tbb	[pc, r0]
 8002be6:	1206      	.short	0x1206
 8002be8:	0a0a0a10 	.word	0x0a0a0a10
 8002bec:	0808080a 	.word	0x0808080a
 8002bf0:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002bf2:	2002      	movs	r0, #2
}
 8002bf4:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002bf6:	2005      	movs	r0, #5
        break;
 8002bf8:	e7fc      	b.n	8002bf4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002bfa:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002bfc:	2166      	movs	r1, #102	@ 0x66
 8002bfe:	4a05      	ldr	r2, [pc, #20]	@ (8002c14 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002c00:	4805      	ldr	r0, [pc, #20]	@ (8002c18 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002c02:	f01d fa9d 	bl	8020140 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002c06:	2000      	movs	r0, #0
 8002c08:	e7f4      	b.n	8002bf4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002c0a:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002c0c:	e7f2      	b.n	8002bf4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002c0e:	bf00      	nop
 8002c10:	08021a03 	.word	0x08021a03
 8002c14:	08021ab0 	.word	0x08021ab0
 8002c18:	08021a69 	.word	0x08021a69

08002c1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c20:	7f4f      	ldrb	r7, [r1, #29]
{
 8002c22:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c24:	4638      	mov	r0, r7
 8002c26:	f7ff ffd9 	bl	8002bdc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c2a:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002c2e:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c30:	4628      	mov	r0, r5
 8002c32:	f7ff ffd3 	bl	8002bdc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002c36:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002c38:	4628      	mov	r0, r5
 8002c3a:	f7ff ff7f 	bl	8002b3c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c3e:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002c42:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c46:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c4a:	4b45      	ldr	r3, [pc, #276]	@ (8002d60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002c4c:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c4e:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c50:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002c52:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002c54:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c56:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c5a:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c60:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c64:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c66:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c6a:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c6c:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002c6e:	f8d9 4000 	ldr.w	r4, [r9]
 8002c72:	f899 201c 	ldrb.w	r2, [r9, #28]
 8002c76:	2c80      	cmp	r4, #128	@ 0x80
 8002c78:	d022      	beq.n	8002cc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8002c7a:	d80f      	bhi.n	8002c9c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002c7c:	2c20      	cmp	r4, #32
 8002c7e:	d066      	beq.n	8002d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002c80:	2c40      	cmp	r4, #64	@ 0x40
 8002c82:	d064      	beq.n	8002d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002c84:	2c04      	cmp	r4, #4
 8002c86:	d05c      	beq.n	8002d42 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c88:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8002c8c:	4b34      	ldr	r3, [pc, #208]	@ (8002d60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002c8e:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c90:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002c94:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002c96:	d060      	beq.n	8002d5a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002c98:	4a32      	ldr	r2, [pc, #200]	@ (8002d64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002c9a:	e03f      	b.n	8002d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002c9c:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002ca0:	d004      	beq.n	8002cac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8002ca2:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8002ca6:	d1ef      	bne.n	8002c88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002ca8:	482f      	ldr	r0, [pc, #188]	@ (8002d68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002caa:	e000      	b.n	8002cae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cac:	482f      	ldr	r0, [pc, #188]	@ (8002d6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cae:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002cb2:	61da      	str	r2, [r3, #28]
 8002cb4:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002cb8:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cba:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cbc:	6159      	str	r1, [r3, #20]
 8002cbe:	e02c      	b.n	8002d1a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cc0:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002cc4:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cc8:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002ccc:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002cce:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002cd0:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002cd2:	1d21      	adds	r1, r4, #4
 8002cd4:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002cd6:	7821      	ldrb	r1, [r4, #0]
 8002cd8:	b141      	cbz	r1, 8002cec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002cda:	2901      	cmp	r1, #1
 8002cdc:	d021      	beq.n	8002d22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002cde:	4b24      	ldr	r3, [pc, #144]	@ (8002d70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8002ce0:	f240 1101 	movw	r1, #257	@ 0x101
 8002ce4:	4a23      	ldr	r2, [pc, #140]	@ (8002d74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002ce6:	4824      	ldr	r0, [pc, #144]	@ (8002d78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8002ce8:	f01d fa2a 	bl	8020140 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002cec:	69da      	ldr	r2, [r3, #28]
 8002cee:	8861      	ldrh	r1, [r4, #2]
 8002cf0:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002cf4:	3901      	subs	r1, #1
 8002cf6:	f022 0210 	bic.w	r2, r2, #16
 8002cfa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002cfe:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8002d00:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002d02:	4b17      	ldr	r3, [pc, #92]	@ (8002d60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d04:	69d9      	ldr	r1, [r3, #28]
 8002d06:	f041 0120 	orr.w	r1, r1, #32
 8002d0a:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002d0c:	69d9      	ldr	r1, [r3, #28]
 8002d0e:	0689      	lsls	r1, r1, #26
 8002d10:	d4fc      	bmi.n	8002d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002d12:	2110      	movs	r1, #16
 8002d14:	6099      	str	r1, [r3, #8]
            if (blend)
 8002d16:	2a00      	cmp	r2, #0
 8002d18:	d0be      	beq.n	8002c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002d1a:	4a18      	ldr	r2, [pc, #96]	@ (8002d7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002d1c:	601a      	str	r2, [r3, #0]
}
 8002d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d22:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8002d24:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d26:	8860      	ldrh	r0, [r4, #2]
 8002d28:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8002d2c:	bf18      	it	ne
 8002d2e:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002d30:	3801      	subs	r0, #1
 8002d32:	f021 0110 	bic.w	r1, r1, #16
 8002d36:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002d3a:	f041 0110 	orr.w	r1, r1, #16
 8002d3e:	61d9      	str	r1, [r3, #28]
                break;
 8002d40:	e7df      	b.n	8002d02 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d42:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d46:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002d4a:	61da      	str	r2, [r3, #28]
 8002d4c:	e7b5      	b.n	8002cba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8002d4e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002d52:	4b03      	ldr	r3, [pc, #12]	@ (8002d60 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002d54:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002d58:	e7f7      	b.n	8002d4a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002d5a:	f240 2201 	movw	r2, #513	@ 0x201
 8002d5e:	e7dd      	b.n	8002d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002d60:	52001000 	.word	0x52001000
 8002d64:	00010201 	.word	0x00010201
 8002d68:	00020009 	.word	0x00020009
 8002d6c:	0002000a 	.word	0x0002000a
 8002d70:	08021afa 	.word	0x08021afa
 8002d74:	08021b14 	.word	0x08021b14
 8002d78:	08021a69 	.word	0x08021a69
 8002d7c:	00020201 	.word	0x00020201

08002d80 <DMA2D_XferCpltCallback>:
 8002d80:	4b02      	ldr	r3, [pc, #8]	@ (8002d8c <DMA2D_XferCpltCallback+0xc>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002d86:	6803      	ldr	r3, [r0, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4718      	bx	r3
 8002d8c:	24025158 	.word	0x24025158

08002d90 <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8002d90:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8002d94:	b510      	push	{r4, lr}
 8002d96:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8002d98:	b9d3      	cbnz	r3, 8002dd0 <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8002d9a:	6803      	ldr	r3, [r0, #0]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9e:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8002da0:	4919      	ldr	r1, [pc, #100]	@ (8002e08 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002da2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e0c <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002da4:	680b      	ldr	r3, [r1, #0]
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	5cd3      	ldrb	r3, [r2, r3]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d12a      	bne.n	8002e04 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002dae:	4818      	ldr	r0, [pc, #96]	@ (8002e10 <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8002db0:	6800      	ldr	r0, [r0, #0]
 8002db2:	bb38      	cbnz	r0, 8002e04 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002db4:	7a20      	ldrb	r0, [r4, #8]
 8002db6:	bb28      	cbnz	r0, 8002e04 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002db8:	7aa0      	ldrb	r0, [r4, #10]
 8002dba:	bb18      	cbnz	r0, 8002e04 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dbc:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 8002dbe:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8002dc2:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dc4:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8002dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dcc:	f7ff bd6a 	b.w	80028a4 <DMA2D_CopyBuffer>
        if (isRunning)
 8002dd0:	7a03      	ldrb	r3, [r0, #8]
 8002dd2:	b143      	cbz	r3, 8002de6 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002dde:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002de2:	f7ff fda3 	bl	800292c <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8002de6:	6860      	ldr	r0, [r4, #4]
 8002de8:	6803      	ldr	r3, [r0, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4798      	blx	r3
 8002dee:	b948      	cbnz	r0, 8002e04 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002df0:	7a63      	ldrb	r3, [r4, #9]
 8002df2:	b13b      	cbz	r3, 8002e04 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8002df4:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8002df6:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8002dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8002e02:	4718      	bx	r3
    }
 8002e04:	bd10      	pop	{r4, pc}
 8002e06:	bf00      	nop
 8002e08:	24000590 	.word	0x24000590
 8002e0c:	24000010 	.word	0x24000010
 8002e10:	2400058c 	.word	0x2400058c

08002e14 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e18:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <_ZN8STM32DMAC1Ev+0x40>)
 8002e1a:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002e1c:	2600      	movs	r6, #0
 8002e1e:	4625      	mov	r5, r4
 8002e20:	2260      	movs	r2, #96	@ 0x60
 8002e22:	6060      	str	r0, [r4, #4]
 8002e24:	7226      	strb	r6, [r4, #8]
 8002e26:	7266      	strb	r6, [r4, #9]
 8002e28:	f845 3b20 	str.w	r3, [r5], #32
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	f00b fc7f 	bl	800e730 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002e32:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8002e36:	60ee      	str	r6, [r5, #12]
 8002e38:	3524      	adds	r5, #36	@ 0x24
 8002e3a:	429d      	cmp	r5, r3
 8002e3c:	d1fb      	bne.n	8002e36 <_ZN8STM32DMAC1Ev+0x22>
 8002e3e:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 8002e42:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002e44:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8002e48:	f008 f973 	bl	800b132 <osMutexNew>
 8002e4c:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 8002e50:	4620      	mov	r0, r4
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	08021b5c 	.word	0x08021b5c

08002e58 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002e58:	4b03      	ldr	r3, [pc, #12]	@ (8002e68 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	07d2      	lsls	r2, r2, #31
 8002e5e:	d4fc      	bmi.n	8002e5a <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e60:	2223      	movs	r2, #35	@ 0x23
 8002e62:	609a      	str	r2, [r3, #8]
}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	52001000 	.word	0x52001000

08002e6c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002e6c:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002e6e:	4c10      	ldr	r4, [pc, #64]	@ (8002eb0 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002e70:	6825      	ldr	r5, [r4, #0]
 8002e72:	07ed      	lsls	r5, r5, #31
 8002e74:	d4fc      	bmi.n	8002e70 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e76:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002e78:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8002e7a:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e7c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002e7e:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002e82:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002e86:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002e88:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002e8a:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8002e8c:	d00c      	beq.n	8002ea8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002e8e:	4909      	ldr	r1, [pc, #36]	@ (8002eb4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002e90:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e94:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002e96:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002e9a:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002e9c:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002e9e:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002ea0:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002ea2:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002ea4:	6023      	str	r3, [r4, #0]
    }
}
 8002ea6:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002ea8:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002eaa:	4b04      	ldr	r3, [pc, #16]	@ (8002ebc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002eac:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002eae:	e7f9      	b.n	8002ea4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002eb0:	52001000 	.word	0x52001000
 8002eb4:	00010009 	.word	0x00010009
 8002eb8:	00020001 	.word	0x00020001
 8002ebc:	00030001 	.word	0x00030001

08002ec0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	4770      	bx	lr

08002ec4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002ec4:	200c      	movs	r0, #12
 8002ec6:	4770      	bx	lr

08002ec8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002ec8:	230c      	movs	r3, #12
 8002eca:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002ece:	3008      	adds	r0, #8
 8002ed0:	4770      	bx	lr

08002ed2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002ed2:	230c      	movs	r3, #12
 8002ed4:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002ed8:	3008      	adds	r0, #8
 8002eda:	4770      	bx	lr

08002edc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002edc:	2001      	movs	r0, #1
 8002ede:	4770      	bx	lr

08002ee0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002ee0:	f44f 704a 	mov.w	r0, #808	@ 0x328
 8002ee4:	4770      	bx	lr

08002ee6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002ee6:	f44f 734a 	mov.w	r3, #808	@ 0x328
 8002eea:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002eee:	3008      	adds	r0, #8
 8002ef0:	4770      	bx	lr

08002ef2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002ef2:	f44f 734a 	mov.w	r3, #808	@ 0x328
 8002ef6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002efa:	3008      	adds	r0, #8
 8002efc:	4770      	bx	lr

08002efe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002efe:	2001      	movs	r0, #1
 8002f00:	4770      	bx	lr

08002f02 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002f02:	2010      	movs	r0, #16
 8002f04:	4770      	bx	lr

08002f06 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002f06:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002f0a:	3008      	adds	r0, #8
 8002f0c:	4770      	bx	lr

08002f0e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002f0e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002f12:	3008      	adds	r0, #8
 8002f14:	4770      	bx	lr

08002f16 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002f16:	4608      	mov	r0, r1
 8002f18:	f000 be40 	b.w	8003b9c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002f1c:	4b03      	ldr	r3, [pc, #12]	@ (8002f2c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002f1e:	b510      	push	{r4, lr}
 8002f20:	4604      	mov	r4, r0
 8002f22:	6003      	str	r3, [r0, #0]
 8002f24:	f00a fa5b 	bl	800d3de <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002f28:	4620      	mov	r0, r4
 8002f2a:	bd10      	pop	{r4, pc}
 8002f2c:	08021c14 	.word	0x08021c14

08002f30 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002f30:	b510      	push	{r4, lr}
 8002f32:	4604      	mov	r4, r0
 8002f34:	f7ff fff2 	bl	8002f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002f38:	2114      	movs	r1, #20
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f01c fd68 	bl	801fa10 <_ZdlPvj>
 8002f40:	4620      	mov	r0, r4
 8002f42:	bd10      	pop	{r4, pc}

08002f44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002f44:	4b03      	ldr	r3, [pc, #12]	@ (8002f54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002f46:	b510      	push	{r4, lr}
 8002f48:	4604      	mov	r4, r0
 8002f4a:	6003      	str	r3, [r0, #0]
 8002f4c:	f00a fa47 	bl	800d3de <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002f50:	4620      	mov	r0, r4
 8002f52:	bd10      	pop	{r4, pc}
 8002f54:	08021be0 	.word	0x08021be0

08002f58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002f58:	b510      	push	{r4, lr}
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	f7ff fff2 	bl	8002f44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002f60:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8002f64:	4620      	mov	r0, r4
 8002f66:	f01c fd53 	bl	801fa10 <_ZdlPvj>
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	bd10      	pop	{r4, pc}
	...

08002f70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002f70:	4b03      	ldr	r3, [pc, #12]	@ (8002f80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002f72:	b510      	push	{r4, lr}
 8002f74:	4604      	mov	r4, r0
 8002f76:	6003      	str	r3, [r0, #0]
 8002f78:	f00a fa31 	bl	800d3de <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	bd10      	pop	{r4, pc}
 8002f80:	08021bac 	.word	0x08021bac

08002f84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002f84:	b510      	push	{r4, lr}
 8002f86:	4604      	mov	r4, r0
 8002f88:	f7ff fff2 	bl	8002f70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002f8c:	2118      	movs	r1, #24
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f01c fd3e 	bl	801fa10 <_ZdlPvj>
 8002f94:	4620      	mov	r0, r4
 8002f96:	bd10      	pop	{r4, pc}

08002f98 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002f98:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <_ZN12FrontendHeapD1Ev+0x24>)
 8002f9a:	b510      	push	{r4, lr}
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	6003      	str	r3, [r0, #0]
 8002fa0:	f500 7057 	add.w	r0, r0, #860	@ 0x35c
 8002fa4:	f7ff ffba 	bl	8002f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fa8:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8002fac:	f7ff ffca 	bl	8002f44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fb0:	f104 0014 	add.w	r0, r4, #20
 8002fb4:	f7ff ffdc 	bl	8002f70 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fb8:	4620      	mov	r0, r4
 8002fba:	bd10      	pop	{r4, pc}
 8002fbc:	08021c48 	.word	0x08021c48

08002fc0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002fc0:	b508      	push	{r3, lr}
 8002fc2:	4802      	ldr	r0, [pc, #8]	@ (8002fcc <__tcf_0+0xc>)
 8002fc4:	f7ff ffe8 	bl	8002f98 <_ZN12FrontendHeapD1Ev>
 8002fc8:	bd08      	pop	{r3, pc}
 8002fca:	bf00      	nop
 8002fcc:	2400aa80 	.word	0x2400aa80

08002fd0 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	f7ff ffe0 	bl	8002f98 <_ZN12FrontendHeapD1Ev>
 8002fd8:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f01c fd17 	bl	801fa10 <_ZdlPvj>
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	bd10      	pop	{r4, pc}
	...

08002fe8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8002fe8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002fec:	f000 fc50 	bl	8003890 <_ZN14BitmapDatabase11getInstanceEv>
 8002ff0:	2400      	movs	r4, #0
 8002ff2:	4605      	mov	r5, r0
 8002ff4:	f000 fc50 	bl	8003898 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002ff8:	4623      	mov	r3, r4
 8002ffa:	4601      	mov	r1, r0
 8002ffc:	4622      	mov	r2, r4
 8002ffe:	4628      	mov	r0, r5
 8003000:	9400      	str	r4, [sp, #0]
 8003002:	f012 fd03 	bl	8015a0c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8003006:	4b27      	ldr	r3, [pc, #156]	@ (80030a4 <touchgfx_init+0xbc>)
 8003008:	4a27      	ldr	r2, [pc, #156]	@ (80030a8 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 800300a:	4620      	mov	r0, r4
        static FrontendHeap instance;
 800300c:	4d27      	ldr	r5, [pc, #156]	@ (80030ac <touchgfx_init+0xc4>)
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	f000 ffd0 	bl	8003fb4 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 8003014:	4b26      	ldr	r3, [pc, #152]	@ (80030b0 <touchgfx_init+0xc8>)
 8003016:	4a27      	ldr	r2, [pc, #156]	@ (80030b4 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8003018:	4827      	ldr	r0, [pc, #156]	@ (80030b8 <touchgfx_init+0xd0>)
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	f012 fba2 	bl	8015764 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	f3bf 8f5b 	dmb	ish
 8003026:	07db      	lsls	r3, r3, #31
 8003028:	d435      	bmi.n	8003096 <touchgfx_init+0xae>
 800302a:	4628      	mov	r0, r5
 800302c:	f01c fcf2 	bl	801fa14 <__cxa_guard_acquire>
 8003030:	b388      	cbz	r0, 8003096 <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8003032:	4c22      	ldr	r4, [pc, #136]	@ (80030bc <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8003034:	4b22      	ldr	r3, [pc, #136]	@ (80030c0 <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8003036:	f504 765d 	add.w	r6, r4, #884	@ 0x374
        : presenterStorage(pres),
 800303a:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 800303e:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8003042:	f504 7757 	add.w	r7, r4, #860	@ 0x35c
 8003046:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8003048:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800304a:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 800304e:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003050:	6126      	str	r6, [r4, #16]
 8003052:	f00a f9c5 	bl	800d3e0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003056:	4b1b      	ldr	r3, [pc, #108]	@ (80030c4 <touchgfx_init+0xdc>)
 8003058:	4640      	mov	r0, r8
 800305a:	6163      	str	r3, [r4, #20]
 800305c:	f00a f9c0 	bl	800d3e0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003060:	4b19      	ldr	r3, [pc, #100]	@ (80030c8 <touchgfx_init+0xe0>)
 8003062:	4638      	mov	r0, r7
 8003064:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003066:	f00a f9bb 	bl	800d3e0 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800306a:	4b18      	ldr	r3, [pc, #96]	@ (80030cc <touchgfx_init+0xe4>)
 800306c:	f504 705c 	add.w	r0, r4, #880	@ 0x370
 8003070:	f8c4 335c 	str.w	r3, [r4, #860]	@ 0x35c
 8003074:	f001 f822 	bl	80040bc <_ZN5ModelC1Ev>
 8003078:	4622      	mov	r2, r4
 800307a:	f504 715c 	add.w	r1, r4, #880	@ 0x370
 800307e:	4630      	mov	r0, r6
 8003080:	f001 f812 	bl	80040a8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8003084:	4630      	mov	r0, r6
 8003086:	f000 fd89 	bl	8003b9c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800308a:	4811      	ldr	r0, [pc, #68]	@ (80030d0 <touchgfx_init+0xe8>)
 800308c:	f01d f876 	bl	802017c <atexit>
 8003090:	4628      	mov	r0, r5
 8003092:	f01c fccb 	bl	801fa2c <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003096:	480f      	ldr	r0, [pc, #60]	@ (80030d4 <touchgfx_init+0xec>)
}
 8003098:	b002      	add	sp, #8
 800309a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800309e:	f7fe bd3b 	b.w	8001b18 <_ZN11TouchGFXHAL10initializeEv>
 80030a2:	bf00      	nop
 80030a4:	240251bc 	.word	0x240251bc
 80030a8:	24009c48 	.word	0x24009c48
 80030ac:	2400aa7c 	.word	0x2400aa7c
 80030b0:	24009c68 	.word	0x24009c68
 80030b4:	24009c4c 	.word	0x24009c4c
 80030b8:	24000034 	.word	0x24000034
 80030bc:	2400aa80 	.word	0x2400aa80
 80030c0:	08021c48 	.word	0x08021c48
 80030c4:	08021bac 	.word	0x08021bac
 80030c8:	08021be0 	.word	0x08021be0
 80030cc:	08021c14 	.word	0x08021c14
 80030d0:	08002fc1 	.word	0x08002fc1
 80030d4:	24009bcc 	.word	0x24009bcc

080030d8 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80030d8:	4770      	bx	lr
	...

080030dc <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80030dc:	4801      	ldr	r0, [pc, #4]	@ (80030e4 <touchgfx_taskEntry+0x8>)
 80030de:	f7fe bd2d 	b.w	8001b3c <_ZN11TouchGFXHAL9taskEntryEv>
 80030e2:	bf00      	nop
 80030e4:	24009bcc 	.word	0x24009bcc

080030e8 <_GLOBAL__sub_I_touchgfx_init>:
}
 80030e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 80030ea:	4c0e      	ldr	r4, [pc, #56]	@ (8003124 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 80030ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003128 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80030ee:	4e0f      	ldr	r6, [pc, #60]	@ (800312c <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80030f0:	4620      	mov	r0, r4
static LCD24bpp display;
 80030f2:	4d0f      	ldr	r5, [pc, #60]	@ (8003130 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80030f4:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80030f6:	f7ff fe8d 	bl	8002e14 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80030fa:	4628      	mov	r0, r5
 80030fc:	f015 fd3a 	bl	8018b74 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8003100:	480c      	ldr	r0, [pc, #48]	@ (8003134 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 8003102:	f010 fd19 	bl	8013b38 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8003106:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800310a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800310e:	4621      	mov	r1, r4
 8003110:	4809      	ldr	r0, [pc, #36]	@ (8003138 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 8003112:	e9cd 3200 	strd	r3, r2, [sp]
 8003116:	4633      	mov	r3, r6
 8003118:	462a      	mov	r2, r5
 800311a:	f7fe fda3 	bl	8001c64 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800311e:	b002      	add	sp, #8
 8003120:	bd70      	pop	{r4, r5, r6, pc}
 8003122:	bf00      	nop
 8003124:	24009cd0 	.word	0x24009cd0
 8003128:	080213d4 	.word	0x080213d4
 800312c:	2400aa78 	.word	0x2400aa78
 8003130:	24009c68 	.word	0x24009c68
 8003134:	24009c4c 	.word	0x24009c4c
 8003138:	24009bcc 	.word	0x24009bcc

0800313c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800313c:	4801      	ldr	r0, [pc, #4]	@ (8003144 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800313e:	f7ff bcb9 	b.w	8002ab4 <_ZN8STM32DMAD1Ev>
 8003142:	bf00      	nop
 8003144:	24009cd0 	.word	0x24009cd0

08003148 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003148:	2000      	movs	r0, #0
 800314a:	4770      	bx	lr

0800314c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800314c:	8081      	strh	r1, [r0, #4]
    }
 800314e:	4770      	bx	lr

08003150 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003150:	80c1      	strh	r1, [r0, #6]
    }
 8003152:	4770      	bx	lr

08003154 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003154:	8101      	strh	r1, [r0, #8]
    }
 8003156:	4770      	bx	lr

08003158 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003158:	8141      	strh	r1, [r0, #10]
    }
 800315a:	4770      	bx	lr

0800315c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800315c:	4770      	bx	lr

0800315e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800315e:	4770      	bx	lr

08003160 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003160:	4770      	bx	lr

08003162 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003162:	4770      	bx	lr

08003164 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003164:	4770      	bx	lr

08003166 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003166:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003168:	88c4      	ldrh	r4, [r0, #6]
 800316a:	6803      	ldr	r3, [r0, #0]
 800316c:	1b12      	subs	r2, r2, r4
 800316e:	8884      	ldrh	r4, [r0, #4]
 8003170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003172:	1b09      	subs	r1, r1, r4
 8003174:	b212      	sxth	r2, r2
    }
 8003176:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800317a:	b209      	sxth	r1, r1
 800317c:	4718      	bx	r3

0800317e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800317e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003182:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003184:	f04f 33ff 	mov.w	r3, #4294967295
 8003188:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800318a:	6813      	ldr	r3, [r2, #0]
 800318c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800318e:	6010      	str	r0, [r2, #0]
    }
 8003190:	4770      	bx	lr

08003192 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8003192:	2000      	movs	r0, #0
 8003194:	4770      	bx	lr

08003196 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8003196:	888b      	ldrh	r3, [r1, #4]
 8003198:	8083      	strh	r3, [r0, #4]
        return true;
    }
 800319a:	2001      	movs	r0, #1
 800319c:	4770      	bx	lr

0800319e <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800319e:	4770      	bx	lr

080031a0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80031a0:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 80031a4:	4770      	bx	lr

080031a6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 80031a6:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 80031aa:	4770      	bx	lr

080031ac <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80031ac:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80031ae:	b510      	push	{r4, lr}
        return rect.width;
 80031b0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 80031b4:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80031b8:	8002      	strh	r2, [r0, #0]
 80031ba:	8042      	strh	r2, [r0, #2]
 80031bc:	8084      	strh	r4, [r0, #4]
 80031be:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 80031c0:	bd10      	pop	{r4, pc}

080031c2 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80031c2:	2200      	movs	r2, #0
 80031c4:	8002      	strh	r2, [r0, #0]
 80031c6:	8042      	strh	r2, [r0, #2]
 80031c8:	8082      	strh	r2, [r0, #4]
 80031ca:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80031cc:	4770      	bx	lr

080031ce <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 80031ce:	7701      	strb	r1, [r0, #28]
    }
 80031d0:	4770      	bx	lr

080031d2 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 80031d2:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 80031d6:	4770      	bx	lr

080031d8 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80031d8:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 80031dc:	4770      	bx	lr

080031de <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 80031de:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80031e2:	4770      	bx	lr

080031e4 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80031e4:	2001      	movs	r0, #1
 80031e6:	4770      	bx	lr

080031e8 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80031e8:	3098      	adds	r0, #152	@ 0x98
 80031ea:	4770      	bx	lr

080031ec <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80031ec:	308c      	adds	r0, #140	@ 0x8c
 80031ee:	4770      	bx	lr

080031f0 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80031f0:	3084      	adds	r0, #132	@ 0x84
 80031f2:	4770      	bx	lr

080031f4 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 80031f4:	4770      	bx	lr
	...

080031f8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f8:	4b02      	ldr	r3, [pc, #8]	@ (8003204 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80031fa:	2290      	movs	r2, #144	@ 0x90
 80031fc:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000e100 	.word	0xe000e100

08003208 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8003208:	4770      	bx	lr

0800320a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 800320a:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 800320c:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 8003210:	4770      	bx	lr

08003212 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003212:	4770      	bx	lr

08003214 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003214:	4770      	bx	lr

08003216 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003216:	4770      	bx	lr

08003218 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8003218:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800321c:	4611      	mov	r1, r2
 800321e:	6840      	ldr	r0, [r0, #4]
 8003220:	6803      	ldr	r3, [r0, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4718      	bx	r3

08003226 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003226:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 800322a:	4770      	bx	lr

0800322c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800322c:	b510      	push	{r4, lr}
 800322e:	4604      	mov	r4, r0
 8003230:	2148      	movs	r1, #72	@ 0x48
 8003232:	f01c fbed 	bl	801fa10 <_ZdlPvj>
 8003236:	4620      	mov	r0, r4
 8003238:	bd10      	pop	{r4, pc}

0800323a <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 800323a:	b510      	push	{r4, lr}
 800323c:	4604      	mov	r4, r0
 800323e:	212c      	movs	r1, #44	@ 0x2c
 8003240:	f01c fbe6 	bl	801fa10 <_ZdlPvj>
 8003244:	4620      	mov	r0, r4
 8003246:	bd10      	pop	{r4, pc}

08003248 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003248:	b510      	push	{r4, lr}
 800324a:	4604      	mov	r4, r0
 800324c:	21bc      	movs	r1, #188	@ 0xbc
 800324e:	f01c fbdf 	bl	801fa10 <_ZdlPvj>
 8003252:	4620      	mov	r0, r4
 8003254:	bd10      	pop	{r4, pc}
	...

08003258 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003258:	b538      	push	{r3, r4, r5, lr}
 800325a:	4604      	mov	r4, r0
    HAL::initialize();
 800325c:	f00a fbbd 	bl	800d9da <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003264:	f00f fb3a 	bl	80128dc <_ZN8touchgfx11Application11getInstanceEv>
 8003268:	4601      	mov	r1, r0
 800326a:	4620      	mov	r0, r4
 800326c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	4908      	ldr	r1, [pc, #32]	@ (8003294 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8003272:	4620      	mov	r0, r4
 8003274:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8003278:	2300      	movs	r3, #0
 800327a:	461a      	mov	r2, r3
 800327c:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 800327e:	6863      	ldr	r3, [r4, #4]
 8003280:	4a05      	ldr	r2, [pc, #20]	@ (8003298 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8003282:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 8003284:	4b05      	ldr	r3, [pc, #20]	@ (800329c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003286:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003288:	4a05      	ldr	r2, [pc, #20]	@ (80032a0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 800328a:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 800328c:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 800328e:	4a05      	ldr	r2, [pc, #20]	@ (80032a4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8003290:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003292:	bd38      	pop	{r3, r4, r5, pc}
 8003294:	d0119400 	.word	0xd0119400
 8003298:	2400b058 	.word	0x2400b058
 800329c:	2400b010 	.word	0x2400b010
 80032a0:	d0000000 	.word	0xd0000000
 80032a4:	00119400 	.word	0x00119400

080032a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 80032a8:	b538      	push	{r3, r4, r5, lr}
 80032aa:	4604      	mov	r4, r0
 80032ac:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 80032ae:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80032b0:	f04f 31ff 	mov.w	r1, #4294967295
 80032b4:	f007 ff72 	bl	800b19c <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80032b8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80032ba:	f007 ff92 	bl	800b1e2 <osMutexRelease>
        streams[handle].isActive = false;
 80032be:	2324      	movs	r3, #36	@ 0x24
 80032c0:	fb03 4505 	mla	r5, r3, r5, r4
 80032c4:	2300      	movs	r3, #0
 80032c6:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 80032ca:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80032ce:	b90b      	cbnz	r3, 80032d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80032d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80032d2:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 80032d4:	bd38      	pop	{r3, r4, r5, pc}

080032d6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80032d6:	f00a bb31 	b.w	800d93c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080032da <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80032da:	f00a bc92 	b.w	800dc02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080032de <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80032de:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80032e2:	b112      	cbz	r2, 80032ea <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80032e4:	6803      	ldr	r3, [r0, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	4718      	bx	r3
    }
 80032ea:	4770      	bx	lr

080032ec <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80032ec:	4a12      	ldr	r2, [pc, #72]	@ (8003338 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80032ee:	6953      	ldr	r3, [r2, #20]
 80032f0:	03db      	lsls	r3, r3, #15
{
 80032f2:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80032f4:	d51e      	bpl.n	8003334 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80032f6:	2300      	movs	r3, #0
 80032f8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80032fc:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003300:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003304:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003308:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800330c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003310:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003312:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003316:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003318:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800331c:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800331e:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8003322:	d2f9      	bcs.n	8003318 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003324:	3b20      	subs	r3, #32
 8003326:	f113 0f20 	cmn.w	r3, #32
 800332a:	d1f2      	bne.n	8003312 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 800332c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003330:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003334:	bd70      	pop	{r4, r5, r6, pc}
 8003336:	bf00      	nop
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 800333c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800333e:	b131      	cbz	r1, 800334e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003340:	4b04      	ldr	r3, [pc, #16]	@ (8003354 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 8003342:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003346:	4a04      	ldr	r2, [pc, #16]	@ (8003358 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003348:	4804      	ldr	r0, [pc, #16]	@ (800335c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 800334a:	f01c fef9 	bl	8020140 <__assert_func>
    }
 800334e:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8003352:	bd08      	pop	{r3, pc}
 8003354:	08021c54 	.word	0x08021c54
 8003358:	08021c68 	.word	0x08021c68
 800335c:	08021df2 	.word	0x08021df2

08003360 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003360:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003362:	b131      	cbz	r1, 8003372 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003364:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8003366:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 800336a:	4a06      	ldr	r2, [pc, #24]	@ (8003384 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 800336c:	4806      	ldr	r0, [pc, #24]	@ (8003388 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 800336e:	f01c fee7 	bl	8020140 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8003372:	6840      	ldr	r0, [r0, #4]
 8003374:	4611      	mov	r1, r2
 8003376:	6803      	ldr	r3, [r0, #0]
    }
 8003378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 800337c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337e:	4718      	bx	r3
 8003380:	08021c54 	.word	0x08021c54
 8003384:	08021e3c 	.word	0x08021e3c
 8003388:	08021df2 	.word	0x08021df2

0800338c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 800338c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800338e:	b129      	cbz	r1, 800339c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8003390:	4b03      	ldr	r3, [pc, #12]	@ (80033a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 8003392:	2179      	movs	r1, #121	@ 0x79
 8003394:	4a03      	ldr	r2, [pc, #12]	@ (80033a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 8003396:	4804      	ldr	r0, [pc, #16]	@ (80033a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 8003398:	f01c fed2 	bl	8020140 <__assert_func>
    }
 800339c:	68c0      	ldr	r0, [r0, #12]
 800339e:	bd08      	pop	{r3, pc}
 80033a0:	08021c54 	.word	0x08021c54
 80033a4:	08021fea 	.word	0x08021fea
 80033a8:	08021df2 	.word	0x08021df2

080033ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 80033ac:	b510      	push	{r4, lr}
 80033ae:	4604      	mov	r4, r0
        assert(handle < no_streams);
 80033b0:	b129      	cbz	r1, 80033be <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 80033b2:	4b19      	ldr	r3, [pc, #100]	@ (8003418 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 80033b4:	21a2      	movs	r1, #162	@ 0xa2
 80033b6:	4a19      	ldr	r2, [pc, #100]	@ (800341c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 80033b8:	4819      	ldr	r0, [pc, #100]	@ (8003420 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 80033ba:	f01c fec1 	bl	8020140 <__assert_func>
        switch (cmd)
 80033be:	2a05      	cmp	r2, #5
 80033c0:	d815      	bhi.n	80033ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80033c2:	e8df f002 	tbb	[pc, r2]
 80033c6:	1103      	.short	0x1103
 80033c8:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80033cc:	6840      	ldr	r0, [r0, #4]
 80033ce:	6803      	ldr	r3, [r0, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	4798      	blx	r3
 80033d4:	b158      	cbz	r0, 80033ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80033dc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80033e0:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80033e2:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80033e6:	e002      	b.n	80033ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80033e8:	2300      	movs	r3, #0
 80033ea:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80033ee:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80033f0:	6203      	str	r3, [r0, #32]
 80033f2:	e7f5      	b.n	80033e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80033f4:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80033fc:	e7f0      	b.n	80033e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80033fe:	2300      	movs	r3, #0
 8003400:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 8003404:	2301      	movs	r3, #1
 8003406:	6203      	str	r3, [r0, #32]
            break;
 8003408:	e7f1      	b.n	80033ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 800340a:	3b00      	subs	r3, #0
 800340c:	bf18      	it	ne
 800340e:	2301      	movne	r3, #1
 8003410:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8003414:	e7eb      	b.n	80033ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003416:	bf00      	nop
 8003418:	08021c54 	.word	0x08021c54
 800341c:	0802219f 	.word	0x0802219f
 8003420:	08021df2 	.word	0x08021df2

08003424 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003424:	b510      	push	{r4, lr}
 8003426:	460c      	mov	r4, r1
 8003428:	4611      	mov	r1, r2
 800342a:	461a      	mov	r2, r3
        assert(handle < no_streams);
 800342c:	b12c      	cbz	r4, 800343a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 800342e:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8003430:	2190      	movs	r1, #144	@ 0x90
 8003432:	4a06      	ldr	r2, [pc, #24]	@ (800344c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003434:	4806      	ldr	r0, [pc, #24]	@ (8003450 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003436:	f01c fe83 	bl	8020140 <__assert_func>
        stream.frameNumber = 0;
 800343a:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 800343c:	6840      	ldr	r0, [r0, #4]
 800343e:	6803      	ldr	r3, [r0, #0]
    }
 8003440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	4718      	bx	r3
 8003448:	08021c54 	.word	0x08021c54
 800344c:	08022373 	.word	0x08022373
 8003450:	08021df2 	.word	0x08021df2

08003454 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003454:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003456:	b129      	cbz	r1, 8003464 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003458:	4b05      	ldr	r3, [pc, #20]	@ (8003470 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 800345a:	2182      	movs	r1, #130	@ 0x82
 800345c:	4a05      	ldr	r2, [pc, #20]	@ (8003474 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 800345e:	4806      	ldr	r0, [pc, #24]	@ (8003478 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003460:	f01c fe6e 	bl	8020140 <__assert_func>
        stream.tickCount = 0;
 8003464:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003468:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 800346c:	bd08      	pop	{r3, pc}
 800346e:	bf00      	nop
 8003470:	08021c54 	.word	0x08021c54
 8003474:	0802254e 	.word	0x0802254e
 8003478:	08021df2 	.word	0x08021df2

0800347c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 800347c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8003480:	b510      	push	{r4, lr}
 8003482:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8003484:	b153      	cbz	r3, 800349c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8003486:	f04f 31ff 	mov.w	r1, #4294967295
 800348a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800348c:	f007 fe86 	bl	800b19c <osMutexAcquire>
            firstDrawThisFrame = false;
 8003490:	2300      	movs	r3, #0
 8003492:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 8003496:	2301      	movs	r3, #1
 8003498:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 800349c:	bd10      	pop	{r4, pc}

0800349e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800349e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80034a2:	b11a      	cbz	r2, 80034ac <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80034a4:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80034a8:	b102      	cbz	r2, 80034ac <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80034aa:	6018      	str	r0, [r3, #0]
        }
    }
 80034ac:	4770      	bx	lr
	...

080034b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 80034b0:	b510      	push	{r4, lr}
 80034b2:	4604      	mov	r4, r0
 80034b4:	4610      	mov	r0, r2
        assert(handle < no_streams);
 80034b6:	b129      	cbz	r1, 80034c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 80034b8:	4b13      	ldr	r3, [pc, #76]	@ (8003508 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 80034ba:	21d0      	movs	r1, #208	@ 0xd0
 80034bc:	4a13      	ldr	r2, [pc, #76]	@ (800350c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 80034be:	4814      	ldr	r0, [pc, #80]	@ (8003510 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 80034c0:	f01c fe3e 	bl	8020140 <__assert_func>
        if (stream.isPlaying)
 80034c4:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80034c8:	b133      	cbz	r3, 80034d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 80034ca:	4b12      	ldr	r3, [pc, #72]	@ (8003514 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 80034d2:	6963      	ldr	r3, [r4, #20]
 80034d4:	4413      	add	r3, r2
 80034d6:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80034d8:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80034dc:	b90b      	cbnz	r3, 80034e2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80034de:	2001      	movs	r0, #1
    }
 80034e0:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80034e2:	68a3      	ldr	r3, [r4, #8]
 80034e4:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80034e6:	6803      	ldr	r3, [r0, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80034ec:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80034ee:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80034f2:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d1f1      	bne.n	80034de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 80034fa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1ee      	bne.n	80034e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 8003502:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8003506:	e7eb      	b.n	80034e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8003508:	08021c54 	.word	0x08021c54
 800350c:	0802270a 	.word	0x0802270a
 8003510:	08021df2 	.word	0x08021df2
 8003514:	24025158 	.word	0x24025158

08003518 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003518:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 800351a:	4c1a      	ldr	r4, [pc, #104]	@ (8003584 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 800351c:	4605      	mov	r5, r0
    HAL::endFrame();
 800351e:	f00a fa4f 	bl	800d9c0 <_ZN8touchgfx3HAL8endFrameEv>
 8003522:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003526:	b913      	cbnz	r3, 800352e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003528:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800352c:	b1ab      	cbz	r3, 800355a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 800352e:	69e1      	ldr	r1, [r4, #28]
 8003530:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003534:	4353      	muls	r3, r2
 8003536:	6922      	ldr	r2, [r4, #16]
 8003538:	434a      	muls	r2, r1
 800353a:	4293      	cmp	r3, r2
 800353c:	d30d      	bcc.n	800355a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 800353e:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8003542:	b138      	cbz	r0, 8003554 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 800354a:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 800354c:	bf98      	it	ls
 800354e:	f102 32ff 	addls.w	r2, r2, #4294967295
 8003552:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8003554:	2301      	movs	r3, #1
 8003556:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 800355a:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 800355c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 800355e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8003562:	f007 fed3 	bl	800b30c <osSemaphoreRelease>
        if (uiHasMutex)
 8003566:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800356a:	b12b      	cbz	r3, 8003578 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 800356c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800356e:	f007 fe38 	bl	800b1e2 <osMutexRelease>
            uiHasMutex = false;
 8003572:	2300      	movs	r3, #0
 8003574:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003578:	6868      	ldr	r0, [r5, #4]
 800357a:	6803      	ldr	r3, [r0, #0]
}
 800357c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	4718      	bx	r3
 8003584:	2400b010 	.word	0x2400b010

08003588 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003588:	4b04      	ldr	r3, [pc, #16]	@ (800359c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 800358a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800358e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003592:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003596:	f3bf 8f6f 	isb	sy
}
 800359a:	4770      	bx	lr
 800359c:	e000e100 	.word	0xe000e100

080035a0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035a0:	4b02      	ldr	r3, [pc, #8]	@ (80035ac <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80035a2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80035a6:	609a      	str	r2, [r3, #8]
}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	e000e100 	.word	0xe000e100

080035b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80035b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b2:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 80035b4:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 80035b8:	b9d8      	cbnz	r0, 80035f2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 80035ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80035be:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 80035c0:	2501      	movs	r5, #1
                streams[i] = Stream();
 80035c2:	60d8      	str	r0, [r3, #12]
 80035c4:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80035c6:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 80035ca:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80035cc:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 80035d0:	6158      	str	r0, [r3, #20]
 80035d2:	6198      	str	r0, [r3, #24]
 80035d4:	61d8      	str	r0, [r3, #28]
 80035d6:	6218      	str	r0, [r3, #32]
 80035d8:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 80035da:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 80035dc:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80035e0:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 80035e4:	443c      	add	r4, r7
 80035e6:	42a2      	cmp	r2, r4
 80035e8:	d90a      	bls.n	8003600 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80035ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003618 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 80035ec:	2152      	movs	r1, #82	@ 0x52
 80035ee:	4a0b      	ldr	r2, [pc, #44]	@ (800361c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 80035f0:	e003      	b.n	80035fa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80035f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 80035f4:	f240 11c5 	movw	r1, #453	@ 0x1c5
 80035f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80035fa:	480b      	ldr	r0, [pc, #44]	@ (8003628 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80035fc:	f01c fda0 	bl	8020140 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8003600:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003602:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003604:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8003608:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 800360c:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 800360e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 8003612:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003614:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003618:	08022a62 	.word	0x08022a62
 800361c:	08022a9d 	.word	0x08022a9d
 8003620:	080228ab 	.word	0x080228ab
 8003624:	080228db 	.word	0x080228db
 8003628:	08021df2 	.word	0x08021df2

0800362c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 800362c:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 800362e:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003630:	4e12      	ldr	r6, [pc, #72]	@ (800367c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8003632:	4604      	mov	r4, r0
 8003634:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003636:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003638:	6003      	str	r3, [r0, #0]
 800363a:	6833      	ldr	r3, [r6, #0]
 800363c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003640:	b10a      	cbz	r2, 8003646 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8003642:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003644:	b900      	cbnz	r0, 8003648 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003646:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003648:	6803      	ldr	r3, [r0, #0]
 800364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364c:	4798      	blx	r3
 800364e:	1e43      	subs	r3, r0, #1
 8003650:	425d      	negs	r5, r3
 8003652:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003654:	6833      	ldr	r3, [r6, #0]
 8003656:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003658:	b130      	cbz	r0, 8003668 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800365a:	6803      	ldr	r3, [r0, #0]
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	4798      	blx	r3
 8003660:	2801      	cmp	r0, #1
 8003662:	bf08      	it	eq
 8003664:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003668:	b92d      	cbnz	r5, 8003676 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 800366a:	4b06      	ldr	r3, [pc, #24]	@ (8003684 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 800366c:	2127      	movs	r1, #39	@ 0x27
 800366e:	4a06      	ldr	r2, [pc, #24]	@ (8003688 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003670:	4806      	ldr	r0, [pc, #24]	@ (800368c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8003672:	f01c fd65 	bl	8020140 <__assert_func>
    }
 8003676:	4620      	mov	r0, r4
 8003678:	bd70      	pop	{r4, r5, r6, pc}
 800367a:	bf00      	nop
 800367c:	24025158 	.word	0x24025158
 8003680:	08022d50 	.word	0x08022d50
 8003684:	08022c40 	.word	0x08022c40
 8003688:	08022c9e 	.word	0x08022c9e
 800368c:	08022cd7 	.word	0x08022cd7

08003690 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003690:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8003692:	4e24      	ldr	r6, [pc, #144]	@ (8003724 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 8003694:	6835      	ldr	r5, [r6, #0]
 8003696:	f3bf 8f5b 	dmb	ish
 800369a:	f015 0501 	ands.w	r5, r5, #1
 800369e:	d13f      	bne.n	8003720 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 80036a0:	4630      	mov	r0, r6
 80036a2:	f01c f9b7 	bl	801fa14 <__cxa_guard_acquire>
 80036a6:	2800      	cmp	r0, #0
 80036a8:	d03a      	beq.n	8003720 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 80036aa:	4c1f      	ldr	r4, [pc, #124]	@ (8003728 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 80036ac:	4b1f      	ldr	r3, [pc, #124]	@ (800372c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 80036ae:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 80036b2:	6125      	str	r5, [r4, #16]
 80036b4:	84e5      	strh	r5, [r4, #38]	@ 0x26
 80036b6:	62a5      	str	r5, [r4, #40]	@ 0x28
 80036b8:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 80036ba:	e9c4 3500 	strd	r3, r5, [r4]
 80036be:	e9c4 5502 	strd	r5, r5, [r4, #8]
 80036c2:	f010 fc98 	bl	8013ff6 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 80036c6:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80036ca:	f00c fbb7 	bl	800fe3c <_ZN8touchgfx12CanvasWidgetC1Ev>
 80036ce:	4b18      	ldr	r3, [pc, #96]	@ (8003730 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80036d0:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 80036d2:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80036d4:	4b17      	ldr	r3, [pc, #92]	@ (8003734 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 80036d6:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 80036da:	f7ff ffa7 	bl	800362c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 80036de:	4b16      	ldr	r3, [pc, #88]	@ (8003738 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 80036e0:	4816      	ldr	r0, [pc, #88]	@ (800373c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 80036e2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80036e6:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 80036e8:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 80036ec:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 80036f0:	2364      	movs	r3, #100	@ 0x64
 80036f2:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 80036f6:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 80036fa:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8003704:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003708:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 800370c:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8003710:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8003712:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003716:	f01c fd31 	bl	802017c <atexit>
 800371a:	4630      	mov	r0, r6
 800371c:	f01c f986 	bl	801fa2c <__cxa_guard_release>
}
 8003720:	4801      	ldr	r0, [pc, #4]	@ (8003728 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	2400af50 	.word	0x2400af50
 8003728:	2400af54 	.word	0x2400af54
 800372c:	08023b7c 	.word	0x08023b7c
 8003730:	08022d70 	.word	0x08022d70
 8003734:	08022de8 	.word	0x08022de8
 8003738:	08023bc8 	.word	0x08023bc8
 800373c:	080031f5 	.word	0x080031f5
 8003740:	08023c00 	.word	0x08023c00

08003744 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003748:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 800374a:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 800374c:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003750:	f04f 31ff 	mov.w	r1, #4294967295
 8003754:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003756:	f007 fdad 	bl	800b2b4 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 800375a:	f04f 31ff 	mov.w	r1, #4294967295
 800375e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003760:	f007 fd1c 	bl	800b19c <osMutexAcquire>
                if (stream.doDecode)
 8003764:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003768:	b343      	cbz	r3, 80037bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 800376a:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 800376c:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003770:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003772:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8003776:	f1b8 0f00 	cmp.w	r8, #0
 800377a:	d023      	beq.n	80037c4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	4641      	mov	r1, r8
 8003780:	4628      	mov	r0, r5
 8003782:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800378e:	9700      	str	r7, [sp, #0]
 8003790:	4628      	mov	r0, r5
 8003792:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003796:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800379a:	68a1      	ldr	r1, [r4, #8]
 800379c:	47c0      	blx	r8
                    stream.frameCount++;
 800379e:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80037a0:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 80037a4:	3301      	adds	r3, #1
 80037a6:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 80037a8:	b1f0      	cbz	r0, 80037e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80037aa:	682b      	ldr	r3, [r5, #0]
 80037ac:	4628      	mov	r0, r5
 80037ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b0:	4798      	blx	r3
 80037b2:	3801      	subs	r0, #1
                    stream.doDecode = false;
 80037b4:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80037b6:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 80037b8:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 80037bc:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80037be:	f007 fd10 	bl	800b1e2 <osMutexRelease>
        while (1)
 80037c2:	e7c5      	b.n	8003750 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 80037c4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80037c6:	2a00      	cmp	r2, #0
 80037c8:	d0de      	beq.n	8003788 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 80037ca:	4628      	mov	r0, r5
 80037cc:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 80037d0:	4798      	blx	r3
 80037d2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80037d4:	4401      	add	r1, r0
 80037d6:	4628      	mov	r0, r5
 80037d8:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 80037da:	6923      	ldr	r3, [r4, #16]
 80037dc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 80037de:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 80037e2:	4413      	add	r3, r2
 80037e4:	6123      	str	r3, [r4, #16]
 80037e6:	e7cf      	b.n	8003788 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 80037e8:	2001      	movs	r0, #1
 80037ea:	e7e3      	b.n	80037b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

080037ec <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 80037ec:	4801      	ldr	r0, [pc, #4]	@ (80037f4 <videoTaskFunc+0x8>)
{
 80037ee:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 80037f0:	f7ff ffa8 	bl	8003744 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 80037f4:	2400b010 	.word	0x2400b010

080037f8 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 80037f8:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 80037fa:	4814      	ldr	r0, [pc, #80]	@ (800384c <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 80037fc:	2500      	movs	r5, #0
 80037fe:	f7fe fc4f 	bl	80020a0 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003802:	4c13      	ldr	r4, [pc, #76]	@ (8003850 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8003804:	4b13      	ldr	r3, [pc, #76]	@ (8003854 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003806:	462a      	mov	r2, r5
 8003808:	4629      	mov	r1, r5
 800380a:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 800380c:	6023      	str	r3, [r4, #0]
 800380e:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003812:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003814:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003816:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003818:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 800381c:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003820:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003824:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003828:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 800382c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003830:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003834:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003838:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 800383c:	f007 fcf0 	bl	800b220 <osSemaphoreNew>
 8003840:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003842:	4628      	mov	r0, r5
 8003844:	f007 fc75 	bl	800b132 <osMutexNew>
 8003848:	6460      	str	r0, [r4, #68]	@ 0x44
}
 800384a:	bd38      	pop	{r3, r4, r5, pc}
 800384c:	2400b058 	.word	0x2400b058
 8003850:	2400b010 	.word	0x2400b010
 8003854:	08022e34 	.word	0x08022e34

08003858 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003858:	4770      	bx	lr

0800385a <_ZN23ApplicationFontProviderD0Ev>:
 800385a:	b510      	push	{r4, lr}
 800385c:	4604      	mov	r4, r0
 800385e:	2104      	movs	r1, #4
 8003860:	f01c f8d6 	bl	801fa10 <_ZdlPvj>
 8003864:	4620      	mov	r0, r4
 8003866:	bd10      	pop	{r4, pc}

08003868 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8003868:	2901      	cmp	r1, #1
{
 800386a:	b508      	push	{r3, lr}
    switch (typography)
 800386c:	d006      	beq.n	800387c <_ZN23ApplicationFontProvider7getFontEt+0x14>
 800386e:	2902      	cmp	r1, #2
 8003870:	d008      	beq.n	8003884 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8003872:	b959      	cbnz	r1, 800388c <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003874:	f000 fbea 	bl	800404c <_ZN17TypedTextDatabase8getFontsEv>
 8003878:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 800387a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800387c:	f000 fbe6 	bl	800404c <_ZN17TypedTextDatabase8getFontsEv>
 8003880:	6840      	ldr	r0, [r0, #4]
 8003882:	e7fa      	b.n	800387a <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003884:	f000 fbe2 	bl	800404c <_ZN17TypedTextDatabase8getFontsEv>
 8003888:	6880      	ldr	r0, [r0, #8]
 800388a:	e7f6      	b.n	800387a <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 800388c:	2000      	movs	r0, #0
 800388e:	e7f4      	b.n	800387a <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003890 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003890:	4800      	ldr	r0, [pc, #0]	@ (8003894 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003892:	4770      	bx	lr
 8003894:	08022e84 	.word	0x08022e84

08003898 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003898:	2002      	movs	r0, #2
 800389a:	4770      	bx	lr

0800389c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800389c:	b513      	push	{r0, r1, r4, lr}
 800389e:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80038a0:	b151      	cbz	r1, 80038b8 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80038a2:	6803      	ldr	r3, [r0, #0]
 80038a4:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 80038a6:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80038a8:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80038ac:	689c      	ldr	r4, [r3, #8]
 80038ae:	f10d 0303 	add.w	r3, sp, #3
 80038b2:	47a0      	blx	r4
        return glyph;
    }
 80038b4:	b002      	add	sp, #8
 80038b6:	bd10      	pop	{r4, pc}
            return 0;
 80038b8:	4608      	mov	r0, r1
 80038ba:	e7fb      	b.n	80038b4 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080038bc <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80038bc:	89c0      	ldrh	r0, [r0, #14]
 80038be:	4770      	bx	lr

080038c0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80038c0:	8a00      	ldrh	r0, [r0, #16]
 80038c2:	4770      	bx	lr

080038c4 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 80038c4:	88c0      	ldrh	r0, [r0, #6]
 80038c6:	4770      	bx	lr

080038c8 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 80038c8:	8880      	ldrh	r0, [r0, #4]
 80038ca:	4770      	bx	lr

080038cc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80038cc:	7a80      	ldrb	r0, [r0, #10]
    }
 80038ce:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80038d2:	4770      	bx	lr

080038d4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80038d4:	7a80      	ldrb	r0, [r0, #10]
    }
 80038d6:	09c0      	lsrs	r0, r0, #7
 80038d8:	4770      	bx	lr

080038da <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 80038da:	2000      	movs	r0, #0
 80038dc:	4770      	bx	lr
	...

080038e0 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 80038e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80038e8 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	00000000 	.word	0x00000000

080038ec <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80038ec:	4770      	bx	lr

080038ee <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80038ee:	b510      	push	{r4, lr}
 80038f0:	4604      	mov	r4, r0
    }
 80038f2:	2108      	movs	r1, #8
 80038f4:	f01c f88c 	bl	801fa10 <_ZdlPvj>
 80038f8:	4620      	mov	r0, r4
 80038fa:	bd10      	pop	{r4, pc}

080038fc <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80038fc:	4770      	bx	lr

080038fe <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80038fe:	4770      	bx	lr

08003900 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003900:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003904:	6808      	ldr	r0, [r1, #0]
 8003906:	6849      	ldr	r1, [r1, #4]
 8003908:	c303      	stmia	r3!, {r0, r1}
    }
 800390a:	4770      	bx	lr

0800390c <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800390c:	4770      	bx	lr

0800390e <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 800390e:	4770      	bx	lr

08003910 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003910:	6041      	str	r1, [r0, #4]
    }
 8003912:	4770      	bx	lr

08003914 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003914:	4770      	bx	lr
	...

08003918 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003918:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800391a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800391e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003922:	2300      	movs	r3, #0
 8003924:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003928:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800392c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	080039d9 	.word	0x080039d9

08003938 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003938:	2301      	movs	r3, #1
 800393a:	7203      	strb	r3, [r0, #8]
    }
 800393c:	4770      	bx	lr

0800393e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800393e:	4770      	bx	lr

08003940 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003940:	4770      	bx	lr

08003942 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003942:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003944:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003946:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003948:	68c2      	ldr	r2, [r0, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	1054      	asrs	r4, r2, #1
 800394e:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003952:	07d2      	lsls	r2, r2, #31
 8003954:	bf48      	it	mi
 8003956:	590a      	ldrmi	r2, [r1, r4]
    }
 8003958:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 800395c:	bf48      	it	mi
 800395e:	58d3      	ldrmi	r3, [r2, r3]
 8003960:	4718      	bx	r3

08003962 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003962:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003964:	6840      	ldr	r0, [r0, #4]
 8003966:	b130      	cbz	r0, 8003976 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	b91a      	cbnz	r2, 8003974 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 800396c:	68d8      	ldr	r0, [r3, #12]
 800396e:	f000 0001 	and.w	r0, r0, #1
 8003972:	4770      	bx	lr
 8003974:	2001      	movs	r0, #1
    }
 8003976:	4770      	bx	lr

08003978 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003978:	b510      	push	{r4, lr}
 800397a:	4604      	mov	r4, r0
 800397c:	210c      	movs	r1, #12
 800397e:	f01c f847 	bl	801fa10 <_ZdlPvj>
 8003982:	4620      	mov	r0, r4
 8003984:	bd10      	pop	{r4, pc}

08003986 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003986:	b510      	push	{r4, lr}
 8003988:	4604      	mov	r4, r0
 800398a:	2110      	movs	r1, #16
 800398c:	f01c f840 	bl	801fa10 <_ZdlPvj>
 8003990:	4620      	mov	r0, r4
 8003992:	bd10      	pop	{r4, pc}

08003994 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003994:	b510      	push	{r4, lr}
 8003996:	4604      	mov	r4, r0
 8003998:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800399c:	f01c f838 	bl	801fa10 <_ZdlPvj>
 80039a0:	4620      	mov	r0, r4
 80039a2:	bd10      	pop	{r4, pc}

080039a4 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80039a4:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 80039a6:	f00e ff99 	bl	80128dc <_ZN8touchgfx11Application11getInstanceEv>
 80039aa:	6803      	ldr	r3, [r0, #0]
    }
 80039ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 80039b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b2:	4718      	bx	r3

080039b4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 80039b4:	b510      	push	{r4, lr}
 80039b6:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 80039b8:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 80039bc:	b158      	cbz	r0, 80039d6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 80039be:	6803      	ldr	r3, [r0, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	4798      	blx	r3
 80039c4:	b138      	cbz	r0, 80039d6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 80039c6:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 80039ca:	6803      	ldr	r3, [r0, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 80039d6:	bd10      	pop	{r4, pc}

080039d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80039d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80039dc:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 80039e0:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80039e2:	68b0      	ldr	r0, [r6, #8]
 80039e4:	6803      	ldr	r3, [r0, #0]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4798      	blx	r3
 80039ea:	f5b0 7f4a 	cmp.w	r0, #808	@ 0x328
 80039ee:	d205      	bcs.n	80039fc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 80039f0:	4b44      	ldr	r3, [pc, #272]	@ (8003b04 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 80039f2:	21a3      	movs	r1, #163	@ 0xa3
 80039f4:	4a44      	ldr	r2, [pc, #272]	@ (8003b08 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80039f6:	4845      	ldr	r0, [pc, #276]	@ (8003b0c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80039f8:	f01c fba2 	bl	8020140 <__assert_func>
 80039fc:	6870      	ldr	r0, [r6, #4]
 80039fe:	6803      	ldr	r3, [r0, #0]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	4798      	blx	r3
 8003a04:	280f      	cmp	r0, #15
 8003a06:	d803      	bhi.n	8003a10 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8003a08:	4b41      	ldr	r3, [pc, #260]	@ (8003b10 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003a0a:	21a4      	movs	r1, #164	@ 0xa4
 8003a0c:	4a3e      	ldr	r2, [pc, #248]	@ (8003b08 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003a0e:	e7f2      	b.n	80039f6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003a10:	68f0      	ldr	r0, [r6, #12]
 8003a12:	6803      	ldr	r3, [r0, #0]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	4798      	blx	r3
 8003a18:	280b      	cmp	r0, #11
 8003a1a:	d803      	bhi.n	8003a24 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8003a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8003b14 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003a1e:	21a5      	movs	r1, #165	@ 0xa5
 8003a20:	4a39      	ldr	r2, [pc, #228]	@ (8003b08 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003a22:	e7e8      	b.n	80039f6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003a24:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8003b1c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003a28:	f00e ff58 	bl	80128dc <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003a2c:	3004      	adds	r0, #4
 8003a2e:	f00e ff7a 	bl	8012926 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003a32:	f8d9 0000 	ldr.w	r0, [r9]
 8003a36:	b110      	cbz	r0, 8003a3e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8003a38:	6803      	ldr	r3, [r0, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	4798      	blx	r3
    if (*currentTrans)
 8003a3e:	f8d9 0000 	ldr.w	r0, [r9]
 8003a42:	b110      	cbz	r0, 8003a4a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8003a44:	6803      	ldr	r3, [r0, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4798      	blx	r3
    if (*currentScreen)
 8003a4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b20 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8003a4e:	f8d8 0000 	ldr.w	r0, [r8]
 8003a52:	b110      	cbz	r0, 8003a5a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8003a54:	6803      	ldr	r3, [r0, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	4798      	blx	r3
    if (*currentPresenter)
 8003a5a:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003a5e:	b110      	cbz	r0, 8003a66 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8003a60:	6803      	ldr	r3, [r0, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4798      	blx	r3
    if (*currentScreen)
 8003a66:	f8d8 0000 	ldr.w	r0, [r8]
 8003a6a:	b110      	cbz	r0, 8003a72 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8003a6c:	6803      	ldr	r3, [r0, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4798      	blx	r3
    if (*currentPresenter)
 8003a72:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003a76:	b110      	cbz	r0, 8003a7e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8003a78:	6803      	ldr	r3, [r0, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003a7e:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003a80:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003a82:	f04f 0b00 	mov.w	fp, #0
 8003a86:	6803      	ldr	r3, [r0, #0]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	4798      	blx	r3
 8003a8c:	4b22      	ldr	r3, [pc, #136]	@ (8003b18 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8003a8e:	4604      	mov	r4, r0
 8003a90:	f8c0 b004 	str.w	fp, [r0, #4]
 8003a94:	f880 b008 	strb.w	fp, [r0, #8]
 8003a98:	4659      	mov	r1, fp
 8003a9a:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003a9c:	68b0      	ldr	r0, [r6, #8]
 8003a9e:	6803      	ldr	r3, [r0, #0]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	4798      	blx	r3
 8003aa4:	4605      	mov	r5, r0
 8003aa6:	f000 fc65 	bl	8004374 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003aaa:	6870      	ldr	r0, [r6, #4]
 8003aac:	4659      	mov	r1, fp
 8003aae:	6803      	ldr	r3, [r0, #0]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	4798      	blx	r3
 8003ab4:	4606      	mov	r6, r0
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f000 fb12 	bl	80040e0 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003abc:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003abe:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003ac2:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003ac4:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003ac8:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003acc:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003ad0:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003ad2:	f8c6 a008 	str.w	sl, [r6, #8]
 8003ad6:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003ad8:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003ada:	4798      	blx	r3
    newPresenter->activate();
 8003adc:	6833      	ldr	r3, [r6, #0]
 8003ade:	4630      	mov	r0, r6
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	f010 fee8 	bl	80148bc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	4620      	mov	r0, r4
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	4798      	blx	r3
    newTransition->invalidate();
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	4620      	mov	r0, r4
 8003af8:	695b      	ldr	r3, [r3, #20]
}
 8003afa:	b001      	add	sp, #4
 8003afc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b00:	4718      	bx	r3
 8003b02:	bf00      	nop
 8003b04:	08022ebc 	.word	0x08022ebc
 8003b08:	08022f4a 	.word	0x08022f4a
 8003b0c:	0802301c 	.word	0x0802301c
 8003b10:	08023071 	.word	0x08023071
 8003b14:	08023114 	.word	0x08023114
 8003b18:	0802322c 	.word	0x0802322c
 8003b1c:	240251a0 	.word	0x240251a0
 8003b20:	2402519c 	.word	0x2402519c

08003b24 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003b24:	4b04      	ldr	r3, [pc, #16]	@ (8003b38 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003b2c:	b10a      	cbz	r2, 8003b32 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8003b2e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003b30:	b900      	cbnz	r0, 8003b34 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8003b32:	6898      	ldr	r0, [r3, #8]
    }
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	24025158 	.word	0x24025158

08003b3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	4604      	mov	r4, r0
 8003b40:	4617      	mov	r7, r2
 8003b42:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8003b44:	f00e ff90 	bl	8012a68 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003b48:	4b10      	ldr	r3, [pc, #64]	@ (8003b8c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 8003b4a:	2500      	movs	r5, #0
        instance = this;
 8003b4c:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003b4e:	4629      	mov	r1, r5
      model(m)
 8003b50:	4b0f      	ldr	r3, [pc, #60]	@ (8003b90 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8003b52:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8003b54:	4b0f      	ldr	r3, [pc, #60]	@ (8003b94 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8003b56:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b98 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003b62:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8003b64:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8003b68:	689b      	ldr	r3, [r3, #8]
      model(m)
 8003b6a:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003b6e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8003b70:	4628      	mov	r0, r5
 8003b72:	f000 fa1f 	bl	8003fb4 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003b76:	f7ff ffd5 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 8003b7a:	f016 f8e2 	bl	8019d42 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8003b7e:	f7ff ffd1 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 8003b82:	f016 f955 	bl	8019e30 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
}
 8003b86:	4620      	mov	r0, r4
 8003b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	240251ac 	.word	0x240251ac
 8003b90:	080231d8 	.word	0x080231d8
 8003b94:	080231c0 	.word	0x080231c0
 8003b98:	24025158 	.word	0x24025158

08003b9c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003b9c:	4b06      	ldr	r3, [pc, #24]	@ (8003bb8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8003b9e:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003ba2:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003bac:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003bb0:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	080039d9 	.word	0x080039d9

08003bbc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003bbc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003bbe:	4770      	bx	lr

08003bc0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003bc0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003bc2:	4770      	bx	lr

08003bc4 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003bc4:	4770      	bx	lr

08003bc6 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003bc6:	888b      	ldrh	r3, [r1, #4]
 8003bc8:	69c0      	ldr	r0, [r0, #28]
 8003bca:	0adb      	lsrs	r3, r3, #11
 8003bcc:	680a      	ldr	r2, [r1, #0]
 8003bce:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8003bd2:	4410      	add	r0, r2
 8003bd4:	4770      	bx	lr

08003bd6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8003bd6:	b510      	push	{r4, lr}
 8003bd8:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8003bda:	b1ba      	cbz	r2, 8003c0c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003bdc:	7b10      	ldrb	r0, [r2, #12]
 8003bde:	b168      	cbz	r0, 8003bfc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003be0:	7b53      	ldrb	r3, [r2, #13]
 8003be2:	7ad2      	ldrb	r2, [r2, #11]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003bea:	431a      	orrs	r2, r3
 8003bec:	6a23      	ldr	r3, [r4, #32]
 8003bee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003bf2:	881a      	ldrh	r2, [r3, #0]
 8003bf4:	428a      	cmp	r2, r1
 8003bf6:	d102      	bne.n	8003bfe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003bf8:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8003bfc:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003bfe:	d805      	bhi.n	8003c0c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003c00:	3801      	subs	r0, #1
 8003c02:	3304      	adds	r3, #4
 8003c04:	b280      	uxth	r0, r0
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d1f3      	bne.n	8003bf2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003c0a:	e7f7      	b.n	8003bfc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	e7f5      	b.n	8003bfc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003c10 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003c10:	b510      	push	{r4, lr}
 8003c12:	4604      	mov	r4, r0
 8003c14:	212c      	movs	r1, #44	@ 0x2c
 8003c16:	f01b fefb 	bl	801fa10 <_ZdlPvj>
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	bd10      	pop	{r4, pc}
	...

08003c20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003c20:	b530      	push	{r4, r5, lr}
 8003c22:	b08b      	sub	sp, #44	@ 0x2c
 8003c24:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003c26:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8003c2a:	9508      	str	r5, [sp, #32]
 8003c2c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8003c30:	9507      	str	r5, [sp, #28]
 8003c32:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8003c36:	9506      	str	r5, [sp, #24]
 8003c38:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8003c3c:	9505      	str	r5, [sp, #20]
 8003c3e:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8003c42:	9504      	str	r5, [sp, #16]
 8003c44:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8003c48:	9503      	str	r5, [sp, #12]
 8003c4a:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8003c4e:	9502      	str	r5, [sp, #8]
 8003c50:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8003c54:	9501      	str	r5, [sp, #4]
 8003c56:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8003c5a:	9500      	str	r5, [sp, #0]
 8003c5c:	f010 fa88 	bl	8014170 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003c60:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8003c62:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003c64:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8003c66:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003c68:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8003c6a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003c6c:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8003c6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003c70:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8003c72:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003c74:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8003c76:	b00b      	add	sp, #44	@ 0x2c
 8003c78:	bd30      	pop	{r4, r5, pc}
 8003c7a:	bf00      	nop
 8003c7c:	08023250 	.word	0x08023250

08003c80 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003c80:	4770      	bx	lr

08003c82 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003c82:	4770      	bx	lr

08003c84 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003c84:	4770      	bx	lr

08003c86 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003c86:	4770      	bx	lr

08003c88 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003c88:	4770      	bx	lr

08003c8a <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8003c8a:	4770      	bx	lr

08003c8c <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8003c8c:	4770      	bx	lr

08003c8e <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8003c8e:	b510      	push	{r4, lr}
 8003c90:	4604      	mov	r4, r0
}
 8003c92:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 8003c96:	f01b febb 	bl	801fa10 <_ZdlPvj>
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	bd10      	pop	{r4, pc}
	...

08003ca0 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	4604      	mov	r4, r0
        : presenter(0)
 8003ca4:	2500      	movs	r5, #0
 8003ca6:	f010 fc5d 	bl	8014564 <_ZN8touchgfx6ScreenC1Ev>
 8003caa:	4b2b      	ldr	r3, [pc, #172]	@ (8003d58 <_ZN15Screen1ViewBaseC1Ev+0xb8>)
 8003cac:	4626      	mov	r6, r4
 8003cae:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8003cb0:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8003cb4:	f846 3b40 	str.w	r3, [r6], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003cb8:	4b28      	ldr	r3, [pc, #160]	@ (8003d5c <_ZN15Screen1ViewBaseC1Ev+0xbc>)
          cachedAbsX(0),
 8003cba:	6625      	str	r5, [r4, #96]	@ 0x60
        : color(col)
 8003cbc:	66a5      	str	r5, [r4, #104]	@ 0x68
        : x(0), y(0), width(0), height(0)
 8003cbe:	e9c4 3510 	strd	r3, r5, [r4, #64]	@ 0x40
          touchable(false),
 8003cc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cc6:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 8003cca:	23ff      	movs	r3, #255	@ 0xff
 8003ccc:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8003cd0:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
          parent(0),
 8003cd4:	e9c4 5514 	strd	r5, r5, [r4, #80]	@ 0x50
          nextDrawChainElement(0),
 8003cd8:	e9c4 5516 	strd	r5, r5, [r4, #88]	@ 0x58
 8003cdc:	f00c fa94 	bl	8010208 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003ce0:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 8003ce4:	f00c fa90 	bl	8010208 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003ce8:	f104 00fc 	add.w	r0, r4, #252	@ 0xfc
 8003cec:	f00c fa8c 	bl	8010208 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003cf0:	f504 70a2 	add.w	r0, r4, #324	@ 0x144
 8003cf4:	f00c fa88 	bl	8010208 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003cf8:	f504 70c6 	add.w	r0, r4, #396	@ 0x18c
 8003cfc:	f00c fa84 	bl	8010208 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003d00:	f504 70ea 	add.w	r0, r4, #468	@ 0x1d4
 8003d04:	f00c fa80 	bl	8010208 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003d08:	f504 7007 	add.w	r0, r4, #540	@ 0x21c
 8003d0c:	f00c fa7c 	bl	8010208 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003d10:	f504 7019 	add.w	r0, r4, #612	@ 0x264
 8003d14:	f00c fa78 	bl	8010208 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003d18:	f504 702b 	add.w	r0, r4, #684	@ 0x2ac
 8003d1c:	f00c fa74 	bl	8010208 <_ZN8touchgfx15ButtonWithLabelC1Ev>
        setX(x);
 8003d20:	4629      	mov	r1, r5
 8003d22:	4630      	mov	r0, r6
 8003d24:	f7ff fa12 	bl	800314c <_ZN8touchgfx8Drawable4setXEs>
        setY(y);
 8003d28:	4629      	mov	r1, r5
 8003d2a:	4630      	mov	r0, r6
 8003d2c:	f7ff fa10 	bl	8003150 <_ZN8touchgfx8Drawable4setYEs>
        setWidth(width);
 8003d30:	4630      	mov	r0, r6
 8003d32:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8003d36:	f7ff fa0d 	bl	8003154 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8003d40:	f7ff fa0a 	bl	8003158 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003d44:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003d48:	1d20      	adds	r0, r4, #4
 8003d4a:	4631      	mov	r1, r6
 8003d4c:	66a3      	str	r3, [r4, #104]	@ 0x68
 8003d4e:	f009 fb5b 	bl	800d408 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003d52:	4620      	mov	r0, r4
 8003d54:	bd70      	pop	{r4, r5, r6, pc}
 8003d56:	bf00      	nop
 8003d58:	080232b8 	.word	0x080232b8
 8003d5c:	08023c98 	.word	0x08023c98

08003d60 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003d60:	4770      	bx	lr
	...

08003d64 <_Z23getFont_verdana_10_4bppv>:
{
 8003d64:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003d66:	4d16      	ldr	r5, [pc, #88]	@ (8003dc0 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8003d68:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003d6a:	682c      	ldr	r4, [r5, #0]
 8003d6c:	f3bf 8f5b 	dmb	ish
 8003d70:	f014 0401 	ands.w	r4, r4, #1
 8003d74:	d120      	bne.n	8003db8 <_Z23getFont_verdana_10_4bppv+0x54>
 8003d76:	4628      	mov	r0, r5
 8003d78:	f01b fe4c 	bl	801fa14 <__cxa_guard_acquire>
 8003d7c:	b1e0      	cbz	r0, 8003db8 <_Z23getFont_verdana_10_4bppv+0x54>
 8003d7e:	233f      	movs	r3, #63	@ 0x3f
 8003d80:	2201      	movs	r2, #1
 8003d82:	4910      	ldr	r1, [pc, #64]	@ (8003dc4 <_Z23getFont_verdana_10_4bppv+0x60>)
 8003d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d86:	4b10      	ldr	r3, [pc, #64]	@ (8003dc8 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003d88:	4810      	ldr	r0, [pc, #64]	@ (8003dcc <_Z23getFont_verdana_10_4bppv+0x68>)
 8003d8a:	9308      	str	r3, [sp, #32]
 8003d8c:	4b10      	ldr	r3, [pc, #64]	@ (8003dd0 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003d8e:	940a      	str	r4, [sp, #40]	@ 0x28
 8003d90:	9405      	str	r4, [sp, #20]
 8003d92:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003d96:	2304      	movs	r3, #4
 8003d98:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003d9c:	230a      	movs	r3, #10
 8003d9e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003da8:	f7ff ff3a 	bl	8003c20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003dac:	4809      	ldr	r0, [pc, #36]	@ (8003dd4 <_Z23getFont_verdana_10_4bppv+0x70>)
 8003dae:	f01c f9e5 	bl	802017c <atexit>
 8003db2:	4628      	mov	r0, r5
 8003db4:	f01b fe3a 	bl	801fa2c <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8003db8:	4804      	ldr	r0, [pc, #16]	@ (8003dcc <_Z23getFont_verdana_10_4bppv+0x68>)
 8003dba:	b00f      	add	sp, #60	@ 0x3c
 8003dbc:	bd30      	pop	{r4, r5, pc}
 8003dbe:	bf00      	nop
 8003dc0:	2400b0a0 	.word	0x2400b0a0
 8003dc4:	080247b8 	.word	0x080247b8
 8003dc8:	08024864 	.word	0x08024864
 8003dcc:	2400b0a4 	.word	0x2400b0a4
 8003dd0:	08024870 	.word	0x08024870
 8003dd4:	08003d61 	.word	0x08003d61

08003dd8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 10, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003dd8:	4770      	bx	lr
	...

08003ddc <_Z23getFont_verdana_20_4bppv>:
{
 8003ddc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 10, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003dde:	4d16      	ldr	r5, [pc, #88]	@ (8003e38 <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 8003de0:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 10, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003de2:	682c      	ldr	r4, [r5, #0]
 8003de4:	f3bf 8f5b 	dmb	ish
 8003de8:	f014 0401 	ands.w	r4, r4, #1
 8003dec:	d121      	bne.n	8003e32 <_Z23getFont_verdana_20_4bppv+0x56>
 8003dee:	4628      	mov	r0, r5
 8003df0:	f01b fe10 	bl	801fa14 <__cxa_guard_acquire>
 8003df4:	b1e8      	cbz	r0, 8003e32 <_Z23getFont_verdana_20_4bppv+0x56>
 8003df6:	233f      	movs	r3, #63	@ 0x3f
 8003df8:	2201      	movs	r2, #1
 8003dfa:	4910      	ldr	r1, [pc, #64]	@ (8003e3c <_Z23getFont_verdana_20_4bppv+0x60>)
 8003dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dfe:	4b10      	ldr	r3, [pc, #64]	@ (8003e40 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003e00:	4810      	ldr	r0, [pc, #64]	@ (8003e44 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003e02:	9308      	str	r3, [sp, #32]
 8003e04:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003e06:	940a      	str	r4, [sp, #40]	@ 0x28
 8003e08:	9405      	str	r4, [sp, #20]
 8003e0a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003e0e:	2304      	movs	r3, #4
 8003e10:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003e14:	2314      	movs	r3, #20
 8003e16:	220a      	movs	r2, #10
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003e1e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003e22:	f7ff fefd 	bl	8003c20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003e26:	4809      	ldr	r0, [pc, #36]	@ (8003e4c <_Z23getFont_verdana_20_4bppv+0x70>)
 8003e28:	f01c f9a8 	bl	802017c <atexit>
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	f01b fdfd 	bl	801fa2c <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8003e32:	4804      	ldr	r0, [pc, #16]	@ (8003e44 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003e34:	b00f      	add	sp, #60	@ 0x3c
 8003e36:	bd30      	pop	{r4, r5, pc}
 8003e38:	2400b0d0 	.word	0x2400b0d0
 8003e3c:	080247c8 	.word	0x080247c8
 8003e40:	08024868 	.word	0x08024868
 8003e44:	2400b0d4 	.word	0x2400b0d4
 8003e48:	08024874 	.word	0x08024874
 8003e4c:	08003dd9 	.word	0x08003dd9

08003e50 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003e50:	4770      	bx	lr
	...

08003e54 <_Z23getFont_verdana_40_4bppv>:
{
 8003e54:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003e56:	4d16      	ldr	r5, [pc, #88]	@ (8003eb0 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8003e58:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003e5a:	682c      	ldr	r4, [r5, #0]
 8003e5c:	f3bf 8f5b 	dmb	ish
 8003e60:	f014 0401 	ands.w	r4, r4, #1
 8003e64:	d120      	bne.n	8003ea8 <_Z23getFont_verdana_40_4bppv+0x54>
 8003e66:	4628      	mov	r0, r5
 8003e68:	f01b fdd4 	bl	801fa14 <__cxa_guard_acquire>
 8003e6c:	b1e0      	cbz	r0, 8003ea8 <_Z23getFont_verdana_40_4bppv+0x54>
 8003e6e:	233f      	movs	r3, #63	@ 0x3f
 8003e70:	2201      	movs	r2, #1
 8003e72:	4910      	ldr	r1, [pc, #64]	@ (8003eb4 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003e74:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e76:	4b10      	ldr	r3, [pc, #64]	@ (8003eb8 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003e78:	4810      	ldr	r0, [pc, #64]	@ (8003ebc <_Z23getFont_verdana_40_4bppv+0x68>)
 8003e7a:	9308      	str	r3, [sp, #32]
 8003e7c:	4b10      	ldr	r3, [pc, #64]	@ (8003ec0 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003e7e:	940a      	str	r4, [sp, #40]	@ 0x28
 8003e80:	9405      	str	r4, [sp, #20]
 8003e82:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003e86:	2304      	movs	r3, #4
 8003e88:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003e8c:	2328      	movs	r3, #40	@ 0x28
 8003e8e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003e98:	f7ff fec2 	bl	8003c20 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003e9c:	4809      	ldr	r0, [pc, #36]	@ (8003ec4 <_Z23getFont_verdana_40_4bppv+0x70>)
 8003e9e:	f01c f96d 	bl	802017c <atexit>
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	f01b fdc2 	bl	801fa2c <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8003ea8:	4804      	ldr	r0, [pc, #16]	@ (8003ebc <_Z23getFont_verdana_40_4bppv+0x68>)
 8003eaa:	b00f      	add	sp, #60	@ 0x3c
 8003eac:	bd30      	pop	{r4, r5, pc}
 8003eae:	bf00      	nop
 8003eb0:	2400b100 	.word	0x2400b100
 8003eb4:	08024854 	.word	0x08024854
 8003eb8:	0802486c 	.word	0x0802486c
 8003ebc:	2400b104 	.word	0x2400b104
 8003ec0:	08024878 	.word	0x08024878
 8003ec4:	08003e51 	.word	0x08003e51

08003ec8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8003ec8:	2000      	movs	r0, #0
 8003eca:	4770      	bx	lr

08003ecc <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8003ecc:	2000      	movs	r0, #0
 8003ece:	4770      	bx	lr

08003ed0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003ed0:	b40e      	push	{r1, r2, r3}
 8003ed2:	b503      	push	{r0, r1, lr}
 8003ed4:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003ed6:	2100      	movs	r1, #0
{
 8003ed8:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003edc:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003ede:	f00f fc4b 	bl	8013778 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003ee2:	b002      	add	sp, #8
 8003ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ee8:	b003      	add	sp, #12
 8003eea:	4770      	bx	lr

08003eec <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003eec:	b40c      	push	{r2, r3}
 8003eee:	b507      	push	{r0, r1, r2, lr}
 8003ef0:	ab04      	add	r3, sp, #16
 8003ef2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003ef6:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003ef8:	f00f fc3e 	bl	8013778 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003efc:	b003      	add	sp, #12
 8003efe:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f02:	b002      	add	sp, #8
 8003f04:	4770      	bx	lr
	...

08003f08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003f08:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8003f0a:	b510      	push	{r4, lr}
 8003f0c:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003f0e:	b373      	cbz	r3, 8003f6e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003f10:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8003f12:	b92b      	cbnz	r3, 8003f20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003f14:	4b18      	ldr	r3, [pc, #96]	@ (8003f78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003f16:	21c5      	movs	r1, #197	@ 0xc5
 8003f18:	4a18      	ldr	r2, [pc, #96]	@ (8003f7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003f1a:	4819      	ldr	r0, [pc, #100]	@ (8003f80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003f1c:	f01c f910 	bl	8020140 <__assert_func>
            return buffer[pos];
 8003f20:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8003f22:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003f26:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8003f28:	b30b      	cbz	r3, 8003f6e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003f2a:	f011 f9df 	bl	80152ec <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003f2e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d803      	bhi.n	8003f3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003f34:	4b13      	ldr	r3, [pc, #76]	@ (8003f84 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003f36:	21cb      	movs	r1, #203	@ 0xcb
 8003f38:	4a13      	ldr	r2, [pc, #76]	@ (8003f88 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003f3a:	e7ee      	b.n	8003f1a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003f3c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003f3e:	f640 103f 	movw	r0, #2367	@ 0x93f
 8003f42:	1c53      	adds	r3, r2, #1
 8003f44:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003f46:	2b09      	cmp	r3, #9
 8003f48:	4619      	mov	r1, r3
 8003f4a:	bf88      	it	hi
 8003f4c:	f1a3 010a 	subhi.w	r1, r3, #10
 8003f50:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003f54:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8003f56:	4281      	cmp	r1, r0
 8003f58:	d109      	bne.n	8003f6e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8003f5a:	2b0a      	cmp	r3, #10
 8003f5c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003f60:	bf28      	it	cs
 8003f62:	2300      	movcs	r3, #0
            return buffer[pos];
 8003f64:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003f66:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003f6a:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8003f6c:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003f6e:	4620      	mov	r0, r4
}
 8003f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003f74:	f011 b8bc 	b.w	80150f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003f78:	080232e4 	.word	0x080232e4
 8003f7c:	080232ed 	.word	0x080232ed
 8003f80:	08023398 	.word	0x08023398
 8003f84:	080233f0 	.word	0x080233f0
 8003f88:	080233fe 	.word	0x080233fe

08003f8c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003f8c:	f011 b879 	b.w	8015082 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003f90 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8003f90:	b510      	push	{r4, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	ac02      	add	r4, sp, #8
 8003f96:	e884 0006 	stmia.w	r4, {r1, r2}
 8003f9a:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8003f9c:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003f9e:	4621      	mov	r1, r4
    va_start(pArg, format);
 8003fa0:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	9b08      	ldr	r3, [sp, #32]
 8003faa:	f00e f835 	bl	8012018 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003fae:	b006      	add	sp, #24
 8003fb0:	bd10      	pop	{r4, pc}
	...

08003fb4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003fb4:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003fb6:	bb18      	cbnz	r0, 8004000 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003fb8:	4b12      	ldr	r3, [pc, #72]	@ (8004004 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003fba:	4813      	ldr	r0, [pc, #76]	@ (8004008 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003fbc:	681c      	ldr	r4, [r3, #0]
 8003fbe:	4913      	ldr	r1, [pc, #76]	@ (800400c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003fc0:	b1b4      	cbz	r4, 8003ff0 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003fc2:	6822      	ldr	r2, [r4, #0]
 8003fc4:	4422      	add	r2, r4
 8003fc6:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003fc8:	6862      	ldr	r2, [r4, #4]
 8003fca:	4422      	add	r2, r4
 8003fcc:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003fce:	68a2      	ldr	r2, [r4, #8]
 8003fd0:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004010 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003fd8:	f000 f838 	bl	800404c <_ZN17TypedTextDatabase8getFontsEv>
 8003fdc:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003fde:	f000 f833 	bl	8004048 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8004014 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003fe4:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8004018 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003fe8:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003fea:	4b0c      	ldr	r3, [pc, #48]	@ (800401c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003fec:	8018      	strh	r0, [r3, #0]
    }
}
 8003fee:	e007      	b.n	8004000 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003ff2:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8004024 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003ff6:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8004028 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003ffa:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003ffc:	2c00      	cmp	r4, #0
 8003ffe:	d1e8      	bne.n	8003fd2 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004000:	bd38      	pop	{r3, r4, r5, pc}
 8004002:	bf00      	nop
 8004004:	2400b13c 	.word	0x2400b13c
 8004008:	2400b134 	.word	0x2400b134
 800400c:	2400b130 	.word	0x2400b130
 8004010:	2400b138 	.word	0x2400b138
 8004014:	240251b0 	.word	0x240251b0
 8004018:	240251b8 	.word	0x240251b8
 800401c:	240251b4 	.word	0x240251b4
 8004020:	900138a4 	.word	0x900138a4
 8004024:	90013880 	.word	0x90013880
 8004028:	900138c8 	.word	0x900138c8

0800402c <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800402c:	4b04      	ldr	r3, [pc, #16]	@ (8004040 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8004034:	4b03      	ldr	r3, [pc, #12]	@ (8004044 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	2400b130 	.word	0x2400b130
 8004044:	2400b134 	.word	0x2400b134

08004048 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8004048:	2009      	movs	r0, #9
 800404a:	4770      	bx	lr

0800404c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 800404c:	4800      	ldr	r0, [pc, #0]	@ (8004050 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800404e:	4770      	bx	lr
 8004050:	2400b140 	.word	0x2400b140

08004054 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004054:	b510      	push	{r4, lr}
};
 8004056:	4c05      	ldr	r4, [pc, #20]	@ (800406c <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8004058:	f7ff fec0 	bl	8003ddc <_Z23getFont_verdana_20_4bppv>
};
 800405c:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800405e:	f7ff fef9 	bl	8003e54 <_Z23getFont_verdana_40_4bppv>
};
 8004062:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8004064:	f7ff fe7e 	bl	8003d64 <_Z23getFont_verdana_10_4bppv>
};
 8004068:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800406a:	bd10      	pop	{r4, pc}
 800406c:	2400b140 	.word	0x2400b140

08004070 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8004070:	b510      	push	{r4, lr}
    pointArray = 0;
 8004072:	2400      	movs	r4, #0
 8004074:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8004076:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8004078:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 800407a:	601c      	str	r4, [r3, #0]
}
 800407c:	bd10      	pop	{r4, pc}

0800407e <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800407e:	4770      	bx	lr

08004080 <_ZN19FrontendApplicationD0Ev>:
 8004080:	b510      	push	{r4, lr}
 8004082:	4604      	mov	r4, r0
 8004084:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8004088:	f01b fcc2 	bl	801fa10 <_ZdlPvj>
 800408c:	4620      	mov	r0, r4
 800408e:	bd10      	pop	{r4, pc}

08004090 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8004090:	b510      	push	{r4, lr}
 8004092:	4604      	mov	r4, r0
    {
        model.tick();
 8004094:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8004098:	f000 f813 	bl	80040c2 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800409c:	4620      	mov	r0, r4
    }
 800409e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80040a2:	f00e bc9d 	b.w	80129e0 <_ZN8touchgfx11Application15handleTickEventEv>
	...

080040a8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80040a8:	b510      	push	{r4, lr}
 80040aa:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80040ac:	f7ff fd46 	bl	8003b3c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80040b0:	4b01      	ldr	r3, [pc, #4]	@ (80040b8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80040b2:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80040b4:	6023      	str	r3, [r4, #0]
}
 80040b6:	bd10      	pop	{r4, pc}
 80040b8:	080234d8 	.word	0x080234d8

080040bc <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80040bc:	2200      	movs	r2, #0
 80040be:	6002      	str	r2, [r0, #0]
{

}
 80040c0:	4770      	bx	lr

080040c2 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80040c2:	4770      	bx	lr

080040c4 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 80040c4:	4770      	bx	lr

080040c6 <_ZThn4_N16Screen1PresenterD1Ev>:
 80040c6:	3804      	subs	r0, #4
 80040c8:	4770      	bx	lr

080040ca <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 80040ca:	4770      	bx	lr

080040cc <_ZN16Screen1PresenterD0Ev>:
 80040cc:	b510      	push	{r4, lr}
 80040ce:	4604      	mov	r4, r0
 80040d0:	2110      	movs	r1, #16
 80040d2:	f01b fc9d 	bl	801fa10 <_ZdlPvj>
 80040d6:	4620      	mov	r0, r4
 80040d8:	bd10      	pop	{r4, pc}

080040da <_ZThn4_N16Screen1PresenterD0Ev>:
 80040da:	f1a0 0004 	sub.w	r0, r0, #4
 80040de:	e7f5      	b.n	80040cc <_ZN16Screen1PresenterD0Ev>

080040e0 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 80040e0:	2200      	movs	r2, #0
    : view(v)
 80040e2:	60c1      	str	r1, [r0, #12]
 80040e4:	6082      	str	r2, [r0, #8]
 80040e6:	4a02      	ldr	r2, [pc, #8]	@ (80040f0 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 80040e8:	6002      	str	r2, [r0, #0]
 80040ea:	3218      	adds	r2, #24
 80040ec:	6042      	str	r2, [r0, #4]
}
 80040ee:	4770      	bx	lr
 80040f0:	0802352c 	.word	0x0802352c

080040f4 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80040f4:	4770      	bx	lr

080040f6 <_ZN11Screen1View15handleTickEventEv>:
void Screen1View::buttonCallbackHandler(const touchgfx::AbstractButton& src) {
    shuffleButtons();
}

void Screen1View::handleTickEvent()
{
 80040f6:	b538      	push	{r3, r4, r5, lr}
 80040f8:	f500 7540 	add.w	r5, r0, #768	@ 0x300
 80040fc:	f500 7449 	add.w	r4, r0, #804	@ 0x324
    for(int i = 0; i<9; i++) {
    	buttons[i]->invalidate();
 8004100:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8004104:	6803      	ldr	r3, [r0, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	4798      	blx	r3
    for(int i = 0; i<9; i++) {
 800410a:	42a5      	cmp	r5, r4
 800410c:	d1f8      	bne.n	8004100 <_ZN11Screen1View15handleTickEventEv+0xa>
    }
}
 800410e:	bd38      	pop	{r3, r4, r5, pc}

08004110 <_ZN8touchgfx8CallbackI11Screen1ViewRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004110:	4770      	bx	lr

08004112 <_ZN8touchgfx8CallbackI11Screen1ViewRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8004112:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004114:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8004116:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004118:	68c2      	ldr	r2, [r0, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	1055      	asrs	r5, r2, #1
 800411e:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004122:	07d2      	lsls	r2, r2, #31
 8004124:	bf48      	it	mi
 8004126:	5962      	ldrmi	r2, [r4, r5]
    }
 8004128:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 800412a:	bf48      	it	mi
 800412c:	58d3      	ldrmi	r3, [r2, r3]
 800412e:	4718      	bx	r3

08004130 <_ZNK8touchgfx8CallbackI11Screen1ViewRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8004130:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004132:	6840      	ldr	r0, [r0, #4]
 8004134:	b130      	cbz	r0, 8004144 <_ZNK8touchgfx8CallbackI11Screen1ViewRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	b91a      	cbnz	r2, 8004142 <_ZNK8touchgfx8CallbackI11Screen1ViewRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 800413a:	68d8      	ldr	r0, [r3, #12]
 800413c:	f000 0001 	and.w	r0, r0, #1
 8004140:	4770      	bx	lr
 8004142:	2001      	movs	r0, #1
    }
 8004144:	4770      	bx	lr

08004146 <_ZN8touchgfx8CallbackI11Screen1ViewRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004146:	b510      	push	{r4, lr}
 8004148:	4604      	mov	r4, r0
 800414a:	2110      	movs	r1, #16
 800414c:	f01b fc60 	bl	801fa10 <_ZdlPvj>
 8004150:	4620      	mov	r0, r4
 8004152:	bd10      	pop	{r4, pc}

08004154 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8004154:	4b03      	ldr	r3, [pc, #12]	@ (8004164 <_ZN11Screen1ViewD1Ev+0x10>)
 8004156:	b510      	push	{r4, lr}
 8004158:	4604      	mov	r4, r0
 800415a:	6003      	str	r3, [r0, #0]
 800415c:	f7ff fd95 	bl	8003c8a <_ZN15Screen1ViewBaseD1Ev>
 8004160:	4620      	mov	r0, r4
 8004162:	bd10      	pop	{r4, pc}
 8004164:	08023670 	.word	0x08023670

08004168 <_ZN11Screen1ViewD0Ev>:
 8004168:	b510      	push	{r4, lr}
 800416a:	4604      	mov	r4, r0
 800416c:	f7ff fff2 	bl	8004154 <_ZN11Screen1ViewD1Ev>
 8004170:	f44f 714a 	mov.w	r1, #808	@ 0x328
 8004174:	4620      	mov	r0, r4
 8004176:	f01b fc4b 	bl	801fa10 <_ZdlPvj>
 800417a:	4620      	mov	r0, r4
 800417c:	bd10      	pop	{r4, pc}
	...

08004180 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8004180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return typedTextId < numberOfTypedTexts;
 8004182:	4b19      	ldr	r3, [pc, #100]	@ (80041e8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x68>)
 8004184:	4606      	mov	r6, r0
 8004186:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
    {
        if (typedText.hasValidId())
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	428b      	cmp	r3, r1
 800418c:	d92a      	bls.n	80041e4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800418e:	4b17      	ldr	r3, [pc, #92]	@ (80041ec <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	b92b      	cbnz	r3, 80041a0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8004194:	4b16      	ldr	r3, [pc, #88]	@ (80041f0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 8004196:	216c      	movs	r1, #108	@ 0x6c
 8004198:	4a16      	ldr	r2, [pc, #88]	@ (80041f4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 800419a:	4817      	ldr	r0, [pc, #92]	@ (80041f8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 800419c:	f01b ffd0 	bl	8020140 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 80041a0:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80041a4:	4b15      	ldr	r3, [pc, #84]	@ (80041fc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 80041ac:	4b14      	ldr	r3, [pc, #80]	@ (8004200 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	f7ff ff3c 	bl	800402c <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 80041b4:	682b      	ldr	r3, [r5, #0]
 80041b6:	4607      	mov	r7, r0
 80041b8:	4628      	mov	r0, r5
 80041ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041bc:	4798      	blx	r3
 80041be:	682b      	ldr	r3, [r5, #0]
 80041c0:	4604      	mov	r4, r0
 80041c2:	4639      	mov	r1, r7
 80041c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041c6:	4628      	mov	r0, r5
 80041c8:	4798      	blx	r3
 80041ca:	fb14 f400 	smulbb	r4, r4, r0
 80041ce:	682b      	ldr	r3, [r5, #0]
 80041d0:	4639      	mov	r1, r7
 80041d2:	b2a4      	uxth	r4, r4
 80041d4:	4628      	mov	r0, r5
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	4798      	blx	r3
 80041da:	1823      	adds	r3, r4, r0
 80041dc:	b21b      	sxth	r3, r3
 80041de:	f8a6 3046 	strh.w	r3, [r6, #70]	@ 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 80041e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041e4:	2300      	movs	r3, #0
 80041e6:	e7fa      	b.n	80041de <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5e>
 80041e8:	240251b4 	.word	0x240251b4
 80041ec:	240251b0 	.word	0x240251b0
 80041f0:	0802354c 	.word	0x0802354c
 80041f4:	0802358e 	.word	0x0802358e
 80041f8:	080235c9 	.word	0x080235c9
 80041fc:	240251b8 	.word	0x240251b8
 8004200:	240251bc 	.word	0x240251bc

08004204 <_ZNSt12_Vector_baseI5TEXTSSaIS0_EED1Ev>:
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }
#endif

      _GLIBCXX20_CONSTEXPR
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8004204:	b510      	push	{r4, lr}
 8004206:	4604      	mov	r4, r0
      {
	_M_deallocate(_M_impl._M_start,
 8004208:	6800      	ldr	r0, [r0, #0]
      _GLIBCXX20_CONSTEXPR
      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 800420a:	b118      	cbz	r0, 8004214 <_ZNSt12_Vector_baseI5TEXTSSaIS0_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800420c:	68a1      	ldr	r1, [r4, #8]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800420e:	1a09      	subs	r1, r1, r0
 8004210:	f01b fbfe 	bl	801fa10 <_ZdlPvj>
      }
 8004214:	4620      	mov	r0, r4
 8004216:	bd10      	pop	{r4, pc}

08004218 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI5TEXTSEEPT_PKS4_S7_S5_>:
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
	_GLIBCXX20_CONSTEXPR
	static _Tp*
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004218:	b510      	push	{r4, lr}
					       is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::value, "type must be assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 800421a:	1a0c      	subs	r4, r1, r0
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800421c:	4613      	mov	r3, r2
	  if (_Num)
 800421e:	d005      	beq.n	800422c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI5TEXTSEEPT_PKS4_S7_S5_+0x14>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004220:	4601      	mov	r1, r0
 8004222:	4622      	mov	r2, r4
 8004224:	4618      	mov	r0, r3
 8004226:	f01c fa65 	bl	80206f4 <memmove>
 800422a:	4603      	mov	r3, r0
	  return __result + _Num;
	}
 800422c:	1918      	adds	r0, r3, r4
 800422e:	bd10      	pop	{r4, pc}

08004230 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_>:
    _GLIBCXX20_CONSTEXPR
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (std::__addressof(__x) != this)
 8004230:	4281      	cmp	r1, r0
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      capacity() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_end_of_storage
			 - this->_M_impl._M_start); }
 8004232:	680a      	ldr	r2, [r1, #0]
    a = b;
    b = temp;
}

template<typename T>
void shuffle(const std::vector<T>& input, std::vector<T>& output) {
 8004234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004238:	4605      	mov	r5, r0
 800423a:	460c      	mov	r4, r1
 800423c:	d020      	beq.n	8004280 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x50>
 800423e:	688b      	ldr	r3, [r1, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004240:	e9d0 7800 	ldrd	r7, r8, [r0]
			 - this->_M_impl._M_start); }
 8004244:	1a9b      	subs	r3, r3, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004246:	eba8 0607 	sub.w	r6, r8, r7
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
	  if (__xlen > capacity())
 800424a:	429e      	cmp	r6, r3
 800424c:	d920      	bls.n	8004290 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x60>
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800424e:	2e00      	cmp	r6, #0
 8004250:	da01      	bge.n	8004256 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x26>
	    std::__throw_bad_alloc();
 8004252:	f01b fc02 	bl	801fa5a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8004256:	4630      	mov	r0, r6
 8004258:	f01b fbeb 	bl	801fa32 <_Znwj>
      if (std::is_constant_evaluated())
	return std::__copy_move<_IsMove, false, _Category>::
	  __copy_m(__first, __last, __result);
#endif
      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
			      _Category>::__copy_m(__first, __last, __result);
 800425c:	4641      	mov	r1, r8
 800425e:	4602      	mov	r2, r0
 8004260:	4605      	mov	r5, r0
 8004262:	4638      	mov	r0, r7
 8004264:	f7ff ffd8 	bl	8004218 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI5TEXTSEEPT_PKS4_S7_S5_>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004268:	6820      	ldr	r0, [r4, #0]
	if (__p)
 800426a:	b118      	cbz	r0, 8004274 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x44>
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
 800426c:	68a1      	ldr	r1, [r4, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800426e:	1a09      	subs	r1, r1, r0
 8004270:	f01b fbce 	bl	801fa10 <_ZdlPvj>
	      this->_M_impl._M_start = __tmp;
 8004274:	6025      	str	r5, [r4, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8004276:	4435      	add	r5, r6
 8004278:	60a5      	str	r5, [r4, #8]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
					  __x._M_impl._M_finish,
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	4433      	add	r3, r6
 800427e:	6063      	str	r3, [r4, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004280:	e9d4 3500 	ldrd	r3, r5, [r4]
 8004284:	1aed      	subs	r5, r5, r3
    output = input;

    int n = output.size();
    for (int i = n - 1; i > 0; --i) {
 8004286:	3d01      	subs	r5, #1
 8004288:	2d00      	cmp	r5, #0
 800428a:	dc15      	bgt.n	80042b8 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x88>
        int rand_index = rand() % (i + 1);
        T temp = output[i];
        output[i] = output[rand_index];
        output[rand_index] = temp;
    }
}
 800428c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004290:	684b      	ldr	r3, [r1, #4]
 8004292:	1a9b      	subs	r3, r3, r2
	  else if (size() >= __xlen)
 8004294:	429e      	cmp	r6, r3
 8004296:	d804      	bhi.n	80042a2 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x72>
 8004298:	4641      	mov	r1, r8
 800429a:	4638      	mov	r0, r7
 800429c:	f7ff ffbc 	bl	8004218 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI5TEXTSEEPT_PKS4_S7_S5_>
    {
#ifdef __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return std::__do_uninit_copy(__first, __last, __result);
#endif
      return std::uninitialized_copy(__first, __last, __result);
 80042a0:	e7eb      	b.n	800427a <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x4a>
 80042a2:	18f9      	adds	r1, r7, r3
 80042a4:	4638      	mov	r0, r7
 80042a6:	f7ff ffb7 	bl	8004218 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI5TEXTSEEPT_PKS4_S7_S5_>
 80042aa:	e9d4 0200 	ldrd	r0, r2, [r4]
 80042ae:	e9d5 3100 	ldrd	r3, r1, [r5]
 80042b2:	1a10      	subs	r0, r2, r0
 80042b4:	4418      	add	r0, r3
 80042b6:	e7f1      	b.n	800429c <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x6c>
        int rand_index = rand() % (i + 1);
 80042b8:	f01c f824 	bl	8020304 <rand>
 80042bc:	1c6a      	adds	r2, r5, #1
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	fb90 f6f2 	sdiv	r6, r0, r2
 80042c4:	fb06 0012 	mls	r0, r6, r2, r0
        T temp = output[i];
 80042c8:	5d59      	ldrb	r1, [r3, r5]
        output[i] = output[rand_index];
 80042ca:	5c1a      	ldrb	r2, [r3, r0]
 80042cc:	555a      	strb	r2, [r3, r5]
        output[rand_index] = temp;
 80042ce:	5419      	strb	r1, [r3, r0]
 80042d0:	e7d9      	b.n	8004286 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_+0x56>
	...

080042d4 <_ZNSt6vectorI5TEXTSSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>:

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	_GLIBCXX20_CONSTEXPR
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 80042d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80042d6:	1a54      	subs	r4, r2, r1
 80042d8:	4605      	mov	r5, r0
 80042da:	460e      	mov	r6, r1
 80042dc:	4617      	mov	r7, r2

      // Called by constructors to check initial size.
      static _GLIBCXX20_CONSTEXPR size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 80042de:	2c00      	cmp	r4, #0
 80042e0:	da02      	bge.n	80042e8 <_ZNSt6vectorI5TEXTSSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x14>
	  __throw_length_error(
 80042e2:	4809      	ldr	r0, [pc, #36]	@ (8004308 <_ZNSt6vectorI5TEXTSSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x34>)
 80042e4:	f01b fbbc 	bl	801fa60 <_ZSt20__throw_length_errorPKc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80042e8:	d00c      	beq.n	8004304 <_ZNSt6vectorI5TEXTSSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x30>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80042ea:	4620      	mov	r0, r4
 80042ec:	f01b fba1 	bl	801fa32 <_Znwj>
 80042f0:	4602      	mov	r2, r0
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80042f2:	4414      	add	r4, r2
 80042f4:	4639      	mov	r1, r7
 80042f6:	4630      	mov	r0, r6
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 80042f8:	602a      	str	r2, [r5, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 80042fa:	60ac      	str	r4, [r5, #8]
 80042fc:	f7ff ff8c 	bl	8004218 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI5TEXTSEEPT_PKS4_S7_S5_>
	  this->_M_impl._M_finish =
 8004300:	6068      	str	r0, [r5, #4]
	}
 8004302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004304:	4622      	mov	r2, r4
 8004306:	e7f4      	b.n	80042f2 <_ZNSt6vectorI5TEXTSSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0+0x1e>
 8004308:	0802361e 	.word	0x0802361e

0800430c <_ZN11Screen1View14shuffleButtonsEv>:
void Screen1View::shuffleButtons() {
 800430c:	b530      	push	{r4, r5, lr}
    std::vector<TEXTS> number_list = {T_NINE, T_EIGHT, T_SEVEN, T_SIX, T_FIVE, T_FOUR, T_THREE, T_TWO, T_ONE};
 800430e:	4a17      	ldr	r2, [pc, #92]	@ (800436c <_ZN11Screen1View14shuffleButtonsEv+0x60>)
void Screen1View::shuffleButtons() {
 8004310:	b087      	sub	sp, #28
 8004312:	4605      	mov	r5, r0
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004314:	2400      	movs	r4, #0
    std::vector<TEXTS> number_list = {T_NINE, T_EIGHT, T_SEVEN, T_SIX, T_FIVE, T_FOUR, T_THREE, T_TWO, T_ONE};
 8004316:	6810      	ldr	r0, [r2, #0]
 8004318:	ab03      	add	r3, sp, #12
 800431a:	6851      	ldr	r1, [r2, #4]
 800431c:	f505 7540 	add.w	r5, r5, #768	@ 0x300
 8004320:	7a12      	ldrb	r2, [r2, #8]
 8004322:	9402      	str	r4, [sp, #8]
 8004324:	c303      	stmia	r3!, {r0, r1}
	_M_range_initialize(__l.begin(), __l.end(),
 8004326:	a903      	add	r1, sp, #12
 8004328:	701a      	strb	r2, [r3, #0]
 800432a:	4668      	mov	r0, sp
 800432c:	f10d 0215 	add.w	r2, sp, #21
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004330:	e9cd 4400 	strd	r4, r4, [sp]
	_M_range_initialize(__l.begin(), __l.end(),
 8004334:	f7ff ffce 	bl	80042d4 <_ZNSt6vectorI5TEXTSSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
    shuffle(number_list, shuffled_numbers);
 8004338:	a903      	add	r1, sp, #12
 800433a:	4668      	mov	r0, sp
	: _M_start(), _M_finish(), _M_end_of_storage()
 800433c:	9405      	str	r4, [sp, #20]
 800433e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004342:	f7ff ff75 	bl	8004230 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_>
    	buttons[i]->setLabelText(touchgfx::TypedText(shuffled_numbers[i]));
 8004346:	9b03      	ldr	r3, [sp, #12]
 8004348:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800434c:	5d1b      	ldrb	r3, [r3, r4]
    for(int i = 0; i<9; i++) {
 800434e:	3401      	adds	r4, #1
    	buttons[i]->setLabelText(touchgfx::TypedText(shuffled_numbers[i]));
 8004350:	8703      	strh	r3, [r0, #56]	@ 0x38
        updateTextPosition();
 8004352:	f7ff ff15 	bl	8004180 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    for(int i = 0; i<9; i++) {
 8004356:	2c09      	cmp	r4, #9
 8004358:	d1f5      	bne.n	8004346 <_ZN11Screen1View14shuffleButtonsEv+0x3a>
      }
 800435a:	a803      	add	r0, sp, #12
 800435c:	f7ff ff52 	bl	8004204 <_ZNSt12_Vector_baseI5TEXTSSaIS0_EED1Ev>
 8004360:	4668      	mov	r0, sp
 8004362:	f7ff ff4f 	bl	8004204 <_ZNSt12_Vector_baseI5TEXTSSaIS0_EED1Ev>
}
 8004366:	b007      	add	sp, #28
 8004368:	bd30      	pop	{r4, r5, pc}
 800436a:	bf00      	nop
 800436c:	08021270 	.word	0x08021270

08004370 <_ZN11Screen1View21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:
    shuffleButtons();
 8004370:	f7ff bfcc 	b.w	800430c <_ZN11Screen1View14shuffleButtonsEv>

08004374 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View():
 8004374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004378:	b08b      	sub	sp, #44	@ 0x2c
 800437a:	4605      	mov	r5, r0
	buttonCallback(this, &Screen1View::buttonCallbackHandler)
 800437c:	f7ff fc90 	bl	8003ca0 <_ZN15Screen1ViewBaseC1Ev>
 8004380:	4b34      	ldr	r3, [pc, #208]	@ (8004454 <_ZN11Screen1ViewC1Ev+0xe0>)
    std::vector<TEXTS> number_list = {T_NINE, T_EIGHT, T_SEVEN, T_SIX, T_FIVE, T_FOUR, T_THREE, T_TWO, T_ONE};
 8004382:	4a35      	ldr	r2, [pc, #212]	@ (8004458 <_ZN11Screen1ViewC1Ev+0xe4>)
        : pobject(pObject), pmemfun(pmemfun_1)
 8004384:	2400      	movs	r4, #0
	buttonCallback(this, &Screen1View::buttonCallbackHandler)
 8004386:	602b      	str	r3, [r5, #0]
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8004388:	f04f 0a01 	mov.w	sl, #1
 800438c:	4b33      	ldr	r3, [pc, #204]	@ (800445c <_ZN11Screen1ViewC1Ev+0xe8>)
			button->setXY(buttonX, buttonY);
 800438e:	46a3      	mov	fp, r4
    std::vector<TEXTS> number_list = {T_NINE, T_EIGHT, T_SEVEN, T_SIX, T_FIVE, T_FOUR, T_THREE, T_TWO, T_ONE};
 8004390:	6810      	ldr	r0, [r2, #0]
 8004392:	6851      	ldr	r1, [r2, #4]
 8004394:	7a12      	ldrb	r2, [r2, #8]
 8004396:	f8c5 4300 	str.w	r4, [r5, #768]	@ 0x300
	: _M_start(), _M_finish(), _M_end_of_storage()
 800439a:	9406      	str	r4, [sp, #24]
 800439c:	e9c5 35bd 	strd	r3, r5, [r5, #756]	@ 0x2f4
 80043a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004460 <_ZN11Screen1ViewC1Ev+0xec>)
 80043a2:	f8c5 32fc 	str.w	r3, [r5, #764]	@ 0x2fc
 80043a6:	ab07      	add	r3, sp, #28
 80043a8:	c303      	stmia	r3!, {r0, r1}
	_M_range_initialize(__l.begin(), __l.end(),
 80043aa:	a907      	add	r1, sp, #28
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	a804      	add	r0, sp, #16
 80043b0:	f10d 0225 	add.w	r2, sp, #37	@ 0x25
	: _M_start(), _M_finish(), _M_end_of_storage()
 80043b4:	e9cd 4404 	strd	r4, r4, [sp, #16]
	_M_range_initialize(__l.begin(), __l.end(),
 80043b8:	f7ff ff8c 	bl	80042d4 <_ZNSt6vectorI5TEXTSSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag.isra.0>
    shuffle(number_list, shuffled_numbers);
 80043bc:	a907      	add	r1, sp, #28
 80043be:	a804      	add	r0, sp, #16
	: _M_start(), _M_finish(), _M_end_of_storage()
 80043c0:	9409      	str	r4, [sp, #36]	@ 0x24
 80043c2:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80043c6:	f7ff ff33 	bl	8004230 <_Z7shuffleI5TEXTSEvRKSt6vectorIT_SaIS2_EERS4_>
    int counter = 0;
 80043ca:	4623      	mov	r3, r4
			button->setXY(buttonX, buttonY);
 80043cc:	fa0f f984 	sxth.w	r9, r4
 80043d0:	4698      	mov	r8, r3
 80043d2:	2700      	movs	r7, #0
			ButtonWithLabel* button = new ButtonWithLabel();
 80043d4:	2048      	movs	r0, #72	@ 0x48
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	f01b fb2b 	bl	801fa32 <_Znwj>
 80043dc:	4606      	mov	r6, r0
 80043de:	f00b ff13 	bl	8010208 <_ZN8touchgfx15ButtonWithLabelC1Ev>
			button->setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_FILL_PRESSED_ID));
 80043e2:	a902      	add	r1, sp, #8
 80043e4:	aa03      	add	r2, sp, #12
 80043e6:	4630      	mov	r0, r6
        rect.x = x;
 80043e8:	80b7      	strh	r7, [r6, #4]
		for (int col = 0; col < 3; col++) {
 80043ea:	376e      	adds	r7, #110	@ 0x6e
        rect.y = y;
 80043ec:	f8a6 9006 	strh.w	r9, [r6, #6]
 80043f0:	f8ad b008 	strh.w	fp, [sp, #8]
 80043f4:	b2bf      	uxth	r7, r7
 80043f6:	f8ad a00c 	strh.w	sl, [sp, #12]
			button->setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_FILL_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_ICON_ROUNDED_SMALL_FILL_PRESSED_ID));
 80043fa:	f00b fd7c 	bl	800fef6 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
			button->setLabelText(touchgfx::TypedText(shuffled_numbers[counter]));
 80043fe:	9a07      	ldr	r2, [sp, #28]
 8004400:	4630      	mov	r0, r6
 8004402:	f812 2008 	ldrb.w	r2, [r2, r8]
 8004406:	8732      	strh	r2, [r6, #56]	@ 0x38
 8004408:	f7ff feba 	bl	8004180 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 800440c:	f04f 32ff 	mov.w	r2, #4294967295
 8004410:	4631      	mov	r1, r6
 8004412:	1d28      	adds	r0, r5, #4
        colorPressed = col;
 8004414:	e9c6 220f 	strd	r2, r2, [r6, #60]	@ 0x3c
			button->setAction(buttonCallback);
 8004418:	f505 723d 	add.w	r2, r5, #756	@ 0x2f4
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 800441c:	62b2      	str	r2, [r6, #40]	@ 0x28
 800441e:	f008 fff3 	bl	800d408 <_ZN8touchgfx9Container3addERNS_8DrawableE>
			buttons[counter] = button;
 8004422:	f505 7241 	add.w	r2, r5, #772	@ 0x304
		for (int col = 0; col < 3; col++) {
 8004426:	f5b7 7fa5 	cmp.w	r7, #330	@ 0x14a
 800442a:	9b01      	ldr	r3, [sp, #4]
			buttons[counter] = button;
 800442c:	f842 6028 	str.w	r6, [r2, r8, lsl #2]
			counter++;
 8004430:	f108 0801 	add.w	r8, r8, #1
		for (int col = 0; col < 3; col++) {
 8004434:	d1ce      	bne.n	80043d4 <_ZN11Screen1ViewC1Ev+0x60>
			counter++;
 8004436:	3303      	adds	r3, #3
	for (int row = 0; row < 3; row++) {
 8004438:	346e      	adds	r4, #110	@ 0x6e
 800443a:	2b09      	cmp	r3, #9
 800443c:	b2a4      	uxth	r4, r4
 800443e:	d1c5      	bne.n	80043cc <_ZN11Screen1ViewC1Ev+0x58>
      }
 8004440:	a807      	add	r0, sp, #28
 8004442:	f7ff fedf 	bl	8004204 <_ZNSt12_Vector_baseI5TEXTSSaIS0_EED1Ev>
 8004446:	a804      	add	r0, sp, #16
 8004448:	f7ff fedc 	bl	8004204 <_ZNSt12_Vector_baseI5TEXTSSaIS0_EED1Ev>
}
 800444c:	4628      	mov	r0, r5
 800444e:	b00b      	add	sp, #44	@ 0x2c
 8004450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004454:	08023670 	.word	0x08023670
 8004458:	08021270 	.word	0x08021270
 800445c:	08023658 	.word	0x08023658
 8004460:	08004371 	.word	0x08004371

08004464 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8004464:	f7ff bc12 	b.w	8003c8c <_ZN15Screen1ViewBase11setupScreenEv>

08004468 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004468:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800446a:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 800446e:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8004470:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8004472:	2302      	movs	r3, #2
 8004474:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8004476:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800447a:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 800447e:	4770      	bx	lr

08004480 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8004480:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8004484:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8004486:	bf04      	itt	eq
 8004488:	2300      	moveq	r3, #0
 800448a:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 800448e:	2000      	movs	r0, #0
 8004490:	4770      	bx	lr

08004492 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8004492:	2000      	movs	r0, #0
 8004494:	4770      	bx	lr

08004496 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004496:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004498:	6904      	ldr	r4, [r0, #16]
 800449a:	8900      	ldrh	r0, [r0, #8]
 800449c:	46a4      	mov	ip, r4
}
 800449e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80044a2:	4760      	bx	ip

080044a4 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80044a4:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80044a6:	68c4      	ldr	r4, [r0, #12]
 80044a8:	8900      	ldrh	r0, [r0, #8]
 80044aa:	46a4      	mov	ip, r4
}
 80044ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80044b0:	4760      	bx	ip

080044b2 <FT6X06_GestureConfig>:
{
 80044b2:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80044b4:	f100 0518 	add.w	r5, r0, #24
{
 80044b8:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80044ba:	7809      	ldrb	r1, [r1, #0]
 80044bc:	4628      	mov	r0, r5
 80044be:	f000 f911 	bl	80046e4 <ft6x06_radian_value>
 80044c2:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80044c4:	7931      	ldrb	r1, [r6, #4]
 80044c6:	4628      	mov	r0, r5
 80044c8:	f000 f918 	bl	80046fc <ft6x06_offset_left_right>
 80044cc:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80044ce:	7a31      	ldrb	r1, [r6, #8]
 80044d0:	4628      	mov	r0, r5
 80044d2:	f000 f91f 	bl	8004714 <ft6x06_offset_up_down>
 80044d6:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80044d8:	7b31      	ldrb	r1, [r6, #12]
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 f926 	bl	800472c <ft6x06_disatnce_left_right>
 80044e0:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80044e2:	7c31      	ldrb	r1, [r6, #16]
 80044e4:	4628      	mov	r0, r5
 80044e6:	f000 f92d 	bl	8004744 <ft6x06_distance_up_down>
 80044ea:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80044ec:	7d31      	ldrb	r1, [r6, #20]
 80044ee:	4628      	mov	r0, r5
 80044f0:	f000 f934 	bl	800475c <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 80044f4:	42c4      	cmn	r4, r0
}
 80044f6:	bf14      	ite	ne
 80044f8:	f04f 30ff 	movne.w	r0, #4294967295
 80044fc:	2000      	moveq	r0, #0
 80044fe:	bd70      	pop	{r4, r5, r6, pc}

08004500 <FT6X06_ReadID>:
{
 8004500:	b513      	push	{r0, r1, r4, lr}
 8004502:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8004504:	3018      	adds	r0, #24
 8004506:	f10d 0107 	add.w	r1, sp, #7
 800450a:	f000 f93f 	bl	800478c <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 800450e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004512:	6023      	str	r3, [r4, #0]
}
 8004514:	b002      	add	sp, #8
 8004516:	bd10      	pop	{r4, pc}

08004518 <FT6X06_GetState>:
{
 8004518:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800451a:	f100 0518 	add.w	r5, r0, #24
{
 800451e:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004520:	a901      	add	r1, sp, #4
 8004522:	4628      	mov	r0, r5
 8004524:	f000 f8d1 	bl	80046ca <ft6x06_td_status>
 8004528:	bb08      	cbnz	r0, 800456e <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800452a:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 800452e:	2b02      	cmp	r3, #2
 8004530:	bf98      	it	ls
 8004532:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004534:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8004536:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004538:	2103      	movs	r1, #3
 800453a:	4628      	mov	r0, r5
 800453c:	eb0d 0203 	add.w	r2, sp, r3
 8004540:	f000 f8b0 	bl	80046a4 <ft6x06_read_reg>
 8004544:	b9b0      	cbnz	r0, 8004574 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004546:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800454a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800454e:	021b      	lsls	r3, r3, #8
 8004550:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004554:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004556:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800455a:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800455c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004566:	4313      	orrs	r3, r2
 8004568:	60a3      	str	r3, [r4, #8]
}
 800456a:	b003      	add	sp, #12
 800456c:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 800456e:	f04f 30ff 	mov.w	r0, #4294967295
 8004572:	e7df      	b.n	8004534 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8004574:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004578:	e7f7      	b.n	800456a <FT6X06_GetState+0x52>

0800457a <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 800457a:	3018      	adds	r0, #24
 800457c:	f000 b8a0 	b.w	80046c0 <ft6x06_gest_id>

08004580 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8004580:	2101      	movs	r1, #1
 8004582:	3018      	adds	r0, #24
 8004584:	f000 b8f6 	b.w	8004774 <ft6x06_g_mode>

08004588 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8004588:	2100      	movs	r1, #0
 800458a:	3018      	adds	r0, #24
 800458c:	f000 b8f2 	b.w	8004774 <ft6x06_g_mode>

08004590 <FT6X06_Init>:
{
 8004590:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8004592:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8004596:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8004598:	b96b      	cbnz	r3, 80045b6 <FT6X06_Init+0x26>
    pObj->IO.Init();
 800459a:	6803      	ldr	r3, [r0, #0]
 800459c:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 800459e:	4620      	mov	r0, r4
 80045a0:	f7ff fff2 	bl	8004588 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 80045a4:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 80045a6:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 80045aa:	bf18      	it	ne
 80045ac:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 80045ae:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 80045b2:	4240      	negs	r0, r0
}
 80045b4:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 80045b6:	2000      	movs	r0, #0
  return ret;
 80045b8:	e7fc      	b.n	80045b4 <FT6X06_Init+0x24>

080045ba <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 80045ba:	2000      	movs	r0, #0
 80045bc:	4770      	bx	lr

080045be <FT6X06_GetMultiTouchState>:
{
 80045be:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80045c0:	f100 0518 	add.w	r5, r0, #24
{
 80045c4:	b085      	sub	sp, #20
 80045c6:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80045c8:	4628      	mov	r0, r5
 80045ca:	a901      	add	r1, sp, #4
 80045cc:	f000 f87d 	bl	80046ca <ft6x06_td_status>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	d145      	bne.n	8004660 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80045d4:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80045d8:	2b02      	cmp	r3, #2
 80045da:	bf98      	it	ls
 80045dc:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80045de:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80045e0:	230c      	movs	r3, #12
 80045e2:	aa01      	add	r2, sp, #4
 80045e4:	2103      	movs	r1, #3
 80045e6:	4628      	mov	r0, r5
 80045e8:	f000 f85c 	bl	80046a4 <ft6x06_read_reg>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d13a      	bne.n	8004666 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80045f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80045f4:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80045f8:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80045fa:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80045fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8004600:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004602:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004604:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004608:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800460c:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800460e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004612:	021b      	lsls	r3, r3, #8
 8004614:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004618:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800461a:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800461e:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8004620:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004624:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8004626:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800462a:	091b      	lsrs	r3, r3, #4
 800462c:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800462e:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8004630:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004632:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8004636:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004638:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 800463a:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800463e:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8004640:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004644:	021b      	lsls	r3, r3, #8
 8004646:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800464a:	430b      	orrs	r3, r1
 800464c:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 800464e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004652:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8004654:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004658:	091b      	lsrs	r3, r3, #4
 800465a:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 800465c:	b005      	add	sp, #20
 800465e:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004660:	f04f 30ff 	mov.w	r0, #4294967295
 8004664:	e7bb      	b.n	80045de <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8004666:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 800466a:	e7f7      	b.n	800465c <FT6X06_GetMultiTouchState+0x9e>

0800466c <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 800466c:	b190      	cbz	r0, 8004694 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 800466e:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8004670:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004672:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8004674:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8004676:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8004678:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800467a:	68ca      	ldr	r2, [r1, #12]
 800467c:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800467e:	690a      	ldr	r2, [r1, #16]
 8004680:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004682:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8004684:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8004686:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004688:	4a04      	ldr	r2, [pc, #16]	@ (800469c <FT6X06_RegisterBusIO+0x30>)
 800468a:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800468c:	4a04      	ldr	r2, [pc, #16]	@ (80046a0 <FT6X06_RegisterBusIO+0x34>)
 800468e:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8004690:	b103      	cbz	r3, 8004694 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8004692:	4718      	bx	r3
}
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	08004497 	.word	0x08004497
 80046a0:	080044a5 	.word	0x080044a5

080046a4 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80046a4:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80046a6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80046aa:	46a4      	mov	ip, r4
}
 80046ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80046b0:	4760      	bx	ip

080046b2 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80046b2:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80046b4:	6804      	ldr	r4, [r0, #0]
 80046b6:	6880      	ldr	r0, [r0, #8]
 80046b8:	46a4      	mov	ip, r4
}
 80046ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80046be:	4760      	bx	ip

080046c0 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80046c0:	2301      	movs	r3, #1
{
 80046c2:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80046c4:	4619      	mov	r1, r3
 80046c6:	f7ff bfed 	b.w	80046a4 <ft6x06_read_reg>

080046ca <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80046ca:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 80046cc:	460a      	mov	r2, r1
{
 80046ce:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 80046d0:	2301      	movs	r3, #1
 80046d2:	2102      	movs	r1, #2
 80046d4:	f7ff ffe6 	bl	80046a4 <ft6x06_read_reg>
  
  if(ret == 0)
 80046d8:	b918      	cbnz	r0, 80046e2 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 80046da:	7823      	ldrb	r3, [r4, #0]
 80046dc:	f003 030f 	and.w	r3, r3, #15
 80046e0:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 80046e2:	bd10      	pop	{r4, pc}

080046e4 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 80046e4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80046e6:	2301      	movs	r3, #1
{
 80046e8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80046ec:	f10d 0207 	add.w	r2, sp, #7
 80046f0:	2191      	movs	r1, #145	@ 0x91
 80046f2:	f7ff ffde 	bl	80046b2 <ft6x06_write_reg>
}
 80046f6:	b003      	add	sp, #12
 80046f8:	f85d fb04 	ldr.w	pc, [sp], #4

080046fc <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80046fc:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80046fe:	2301      	movs	r3, #1
{
 8004700:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8004704:	f10d 0207 	add.w	r2, sp, #7
 8004708:	2192      	movs	r1, #146	@ 0x92
 800470a:	f7ff ffd2 	bl	80046b2 <ft6x06_write_reg>
}
 800470e:	b003      	add	sp, #12
 8004710:	f85d fb04 	ldr.w	pc, [sp], #4

08004714 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004714:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004716:	2301      	movs	r3, #1
{
 8004718:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 800471c:	f10d 0207 	add.w	r2, sp, #7
 8004720:	2193      	movs	r1, #147	@ 0x93
 8004722:	f7ff ffc6 	bl	80046b2 <ft6x06_write_reg>
}
 8004726:	b003      	add	sp, #12
 8004728:	f85d fb04 	ldr.w	pc, [sp], #4

0800472c <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 800472c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 800472e:	2301      	movs	r3, #1
{
 8004730:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8004734:	f10d 0207 	add.w	r2, sp, #7
 8004738:	2194      	movs	r1, #148	@ 0x94
 800473a:	f7ff ffba 	bl	80046b2 <ft6x06_write_reg>
}
 800473e:	b003      	add	sp, #12
 8004740:	f85d fb04 	ldr.w	pc, [sp], #4

08004744 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004744:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004746:	2301      	movs	r3, #1
{
 8004748:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 800474c:	f10d 0207 	add.w	r2, sp, #7
 8004750:	2195      	movs	r1, #149	@ 0x95
 8004752:	f7ff ffae 	bl	80046b2 <ft6x06_write_reg>
}
 8004756:	b003      	add	sp, #12
 8004758:	f85d fb04 	ldr.w	pc, [sp], #4

0800475c <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 800475c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 800475e:	2301      	movs	r3, #1
{
 8004760:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004764:	f10d 0207 	add.w	r2, sp, #7
 8004768:	2196      	movs	r1, #150	@ 0x96
 800476a:	f7ff ffa2 	bl	80046b2 <ft6x06_write_reg>
}
 800476e:	b003      	add	sp, #12
 8004770:	f85d fb04 	ldr.w	pc, [sp], #4

08004774 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004774:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004776:	2301      	movs	r3, #1
{
 8004778:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 800477c:	f10d 0207 	add.w	r2, sp, #7
 8004780:	21a4      	movs	r1, #164	@ 0xa4
 8004782:	f7ff ff96 	bl	80046b2 <ft6x06_write_reg>
}
 8004786:	b003      	add	sp, #12
 8004788:	f85d fb04 	ldr.w	pc, [sp], #4

0800478c <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 800478c:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 800478e:	2301      	movs	r3, #1
 8004790:	21a8      	movs	r1, #168	@ 0xa8
 8004792:	f7ff bf87 	b.w	80046a4 <ft6x06_read_reg>
	...

08004798 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004798:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 800479a:	2201      	movs	r2, #1
 800479c:	4b07      	ldr	r3, [pc, #28]	@ (80047bc <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 800479e:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 80047a2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80047a4:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047a6:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 80047a8:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047ae:	f006 f9a9 	bl	800ab04 <HAL_SDRAM_SendCommand>
 80047b2:	3800      	subs	r0, #0
 80047b4:	bf18      	it	ne
 80047b6:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80047b8:	4240      	negs	r0, r0
 80047ba:	bd08      	pop	{r3, pc}
 80047bc:	2400b14c 	.word	0x2400b14c

080047c0 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80047c0:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80047c2:	2202      	movs	r2, #2
 80047c4:	4b08      	ldr	r3, [pc, #32]	@ (80047e8 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 80047c6:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 80047ca:	2101      	movs	r1, #1
 80047cc:	2200      	movs	r2, #0
 80047ce:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80047d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80047d6:	4619      	mov	r1, r3
 80047d8:	f006 f994 	bl	800ab04 <HAL_SDRAM_SendCommand>
 80047dc:	3800      	subs	r0, #0
 80047de:	bf18      	it	ne
 80047e0:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80047e2:	4240      	negs	r0, r0
 80047e4:	bd08      	pop	{r3, pc}
 80047e6:	bf00      	nop
 80047e8:	2400b14c 	.word	0x2400b14c

080047ec <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80047ec:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80047ee:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 80047f2:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80047f4:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 80047f6:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80047f8:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 80047fa:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 80047fc:	6991      	ldr	r1, [r2, #24]
 80047fe:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004800:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8004802:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004804:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004806:	4907      	ldr	r1, [pc, #28]	@ (8004824 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8004808:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 800480a:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800480c:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 800480e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004812:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004816:	f006 f975 	bl	800ab04 <HAL_SDRAM_SendCommand>
 800481a:	3800      	subs	r0, #0
 800481c:	bf18      	it	ne
 800481e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004820:	4240      	negs	r0, r0
 8004822:	bd10      	pop	{r4, pc}
 8004824:	2400b14c 	.word	0x2400b14c

08004828 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8004828:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 800482a:	4b08      	ldr	r3, [pc, #32]	@ (800484c <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 800482c:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8004830:	2108      	movs	r1, #8
 8004832:	2200      	movs	r2, #0
 8004834:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004838:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800483c:	4619      	mov	r1, r3
 800483e:	f006 f961 	bl	800ab04 <HAL_SDRAM_SendCommand>
 8004842:	3800      	subs	r0, #0
 8004844:	bf18      	it	ne
 8004846:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004848:	4240      	negs	r0, r0
 800484a:	bd08      	pop	{r3, pc}
 800484c:	2400b14c 	.word	0x2400b14c

08004850 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8004850:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8004852:	f006 f976 	bl	800ab42 <HAL_SDRAM_ProgramRefreshRate>
 8004856:	3800      	subs	r0, #0
 8004858:	bf18      	it	ne
 800485a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800485c:	4240      	negs	r0, r0
 800485e:	bd08      	pop	{r3, pc}

08004860 <IS42S32800J_Init>:
{
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004864:	6809      	ldr	r1, [r1, #0]
{
 8004866:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004868:	f7ff ff96 	bl	8004798 <IS42S32800J_ClockEnable>
 800486c:	b110      	cbz	r0, 8004874 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 800486e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004872:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8004874:	f001 fc7c 	bl	8006170 <HAL_GetTick>
 8004878:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800487a:	f001 fc79 	bl	8006170 <HAL_GetTick>
 800487e:	4286      	cmp	r6, r0
 8004880:	d0fb      	beq.n	800487a <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004882:	6821      	ldr	r1, [r4, #0]
 8004884:	4628      	mov	r0, r5
 8004886:	f7ff ff9b 	bl	80047c0 <IS42S32800J_Precharge>
 800488a:	2800      	cmp	r0, #0
 800488c:	d1ef      	bne.n	800486e <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 800488e:	4628      	mov	r0, r5
 8004890:	e9d4 1200 	ldrd	r1, r2, [r4]
 8004894:	f7ff ffc8 	bl	8004828 <IS42S32800J_RefreshMode>
 8004898:	2800      	cmp	r0, #0
 800489a:	d1e8      	bne.n	800486e <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 800489c:	4621      	mov	r1, r4
 800489e:	4628      	mov	r0, r5
 80048a0:	f7ff ffa4 	bl	80047ec <IS42S32800J_ModeRegConfig>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d1e2      	bne.n	800486e <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 80048a8:	68a1      	ldr	r1, [r4, #8]
 80048aa:	4628      	mov	r0, r5
 80048ac:	f7ff ffd0 	bl	8004850 <IS42S32800J_RefreshRate>
 80048b0:	3800      	subs	r0, #0
 80048b2:	bf18      	it	ne
 80048b4:	2001      	movne	r0, #1
 80048b6:	4240      	negs	r0, r0
  return ret;
 80048b8:	e7db      	b.n	8004872 <IS42S32800J_Init+0x12>

080048ba <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80048ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80048be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80048c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80048c6:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80048ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80048ce:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 80048d2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80048d6:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 80048d8:	2000      	movs	r0, #0
 80048da:	4770      	bx	lr

080048dc <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80048dc:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80048de:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 80048e2:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80048e4:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80048e8:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80048ea:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80048ec:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 80048ee:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80048f0:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80048f2:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 80048f4:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80048f6:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80048f8:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 80048fa:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80048fc:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 80048fe:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004900:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004902:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004906:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 800490a:	2310      	movs	r3, #16
 800490c:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800490e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004912:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8004914:	f240 1301 	movw	r3, #257	@ 0x101
 8004918:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800491a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800491e:	f004 fcf8 	bl	8009312 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8004922:	2800      	cmp	r0, #0

}
 8004924:	bf14      	ite	ne
 8004926:	f06f 0004 	mvnne.w	r0, #4
 800492a:	2000      	moveq	r0, #0
 800492c:	b015      	add	sp, #84	@ 0x54
 800492e:	f85d fb04 	ldr.w	pc, [sp], #4

08004932 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004932:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004934:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004938:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800493a:	bf08      	it	eq
 800493c:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004940:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004942:	bf18      	it	ne
 8004944:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004948:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800494a:	a906      	add	r1, sp, #24
{
 800494c:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800494e:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8004950:	2306      	movs	r3, #6
 8004952:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004954:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004956:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 800495a:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 800495c:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800495e:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004960:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004964:	f004 fbd4 	bl	8009110 <HAL_QSPI_Command>
 8004968:	bb20      	cbnz	r0, 80049b4 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800496a:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 800496e:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004970:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004972:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004976:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004978:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800497a:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 800497e:	f04f 0310 	mov.w	r3, #16
 8004982:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004986:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800498a:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800498c:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004990:	bf14      	ite	ne
 8004992:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8004996:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800499a:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800499c:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800499e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80049a2:	f004 fcb6 	bl	8009312 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 80049a6:	2800      	cmp	r0, #0
 80049a8:	bf14      	ite	ne
 80049aa:	f06f 0004 	mvnne.w	r0, #4
 80049ae:	2000      	moveq	r0, #0
}
 80049b0:	b015      	add	sp, #84	@ 0x54
 80049b2:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 80049b4:	f06f 0001 	mvn.w	r0, #1
 80049b8:	e7fa      	b.n	80049b0 <MT25TL01G_WriteEnable+0x7e>

080049ba <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80049ba:	2903      	cmp	r1, #3
{
 80049bc:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80049be:	bf08      	it	eq
 80049c0:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 80049c4:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80049c6:	bf18      	it	ne
 80049c8:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80049cc:	4604      	mov	r4, r0
 80049ce:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80049d0:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 80049d2:	23b7      	movs	r3, #183	@ 0xb7
 80049d4:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80049d6:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80049d8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80049dc:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80049de:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80049e0:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80049e2:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 80049e6:	f7ff ffa4 	bl	8004932 <MT25TL01G_WriteEnable>
 80049ea:	b118      	cbz	r0, 80049f4 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 80049ec:	f06f 0001 	mvn.w	r0, #1
}
 80049f0:	b00f      	add	sp, #60	@ 0x3c
 80049f2:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049f8:	4669      	mov	r1, sp
 80049fa:	4620      	mov	r0, r4
 80049fc:	f004 fb88 	bl	8009110 <HAL_QSPI_Command>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d1f3      	bne.n	80049ec <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8004a04:	4629      	mov	r1, r5
 8004a06:	4620      	mov	r0, r4
 8004a08:	f7ff ff68 	bl	80048dc <MT25TL01G_AutoPollingMemReady>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d0ef      	beq.n	80049f0 <MT25TL01G_Enter4BytesAddressMode+0x36>
 8004a10:	e7ec      	b.n	80049ec <MT25TL01G_Enter4BytesAddressMode+0x32>

08004a12 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004a12:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a14:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004a18:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a1e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004a20:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a22:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004a24:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004a26:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004a28:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004a2c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004a2e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004a30:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004a32:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a36:	f004 fb6b 	bl	8009110 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004a3a:	2800      	cmp	r0, #0
}
 8004a3c:	bf14      	ite	ne
 8004a3e:	f06f 0001 	mvnne.w	r0, #1
 8004a42:	2000      	moveq	r0, #0
 8004a44:	b00f      	add	sp, #60	@ 0x3c
 8004a46:	f85d fb04 	ldr.w	pc, [sp], #4

08004a4a <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004a4a:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004a50:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a52:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a56:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004a58:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a5a:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004a5c:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004a5e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004a60:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004a64:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004a66:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004a68:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004a6a:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a6e:	f004 fb4f 	bl	8009110 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004a72:	2800      	cmp	r0, #0
}
 8004a74:	bf14      	ite	ne
 8004a76:	f06f 0001 	mvnne.w	r0, #1
 8004a7a:	2000      	moveq	r0, #0
 8004a7c:	b00f      	add	sp, #60	@ 0x3c
 8004a7e:	f85d fb04 	ldr.w	pc, [sp], #4

08004a82 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004a82:	b500      	push	{lr}
 8004a84:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004a86:	2903      	cmp	r1, #3
 8004a88:	d80e      	bhi.n	8004aa8 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8004a8a:	e8df f001 	tbb	[pc, r1]
 8004a8e:	2902      	.short	0x2902
 8004a90:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004a92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a96:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8004a98:	230e      	movs	r3, #14
 8004a9a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004a9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004aa0:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004aa2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004aa6:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004aa8:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004aaa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004aae:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004ab2:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004ab4:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004ab6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004aba:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004abc:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004abe:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004ac2:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004ac4:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004ac6:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004ac8:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004acc:	f004 fc72 	bl	80093b4 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004ad0:	2800      	cmp	r0, #0
}
 8004ad2:	bf14      	ite	ne
 8004ad4:	f06f 0005 	mvnne.w	r0, #5
 8004ad8:	2000      	moveq	r0, #0
 8004ada:	b011      	add	sp, #68	@ 0x44
 8004adc:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004ae0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ae4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8004ae6:	233d      	movs	r3, #61	@ 0x3d
 8004ae8:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004aee:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004af0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004af4:	e7d7      	b.n	8004aa6 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004af6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004afa:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8004afc:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004afe:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004b00:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004b04:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004b06:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004b0a:	e7cc      	b.n	8004aa6 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004b0c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004b10:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004b12:	23ed      	movs	r3, #237	@ 0xed
 8004b14:	e7f3      	b.n	8004afe <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08004b16 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004b16:	b500      	push	{lr}
 8004b18:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004b1a:	2903      	cmp	r1, #3
 8004b1c:	d80e      	bhi.n	8004b3c <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8004b1e:	e8df f001 	tbb	[pc, r1]
 8004b22:	2502      	.short	0x2502
 8004b24:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b2a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8004b2c:	230c      	movs	r3, #12
 8004b2e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004b30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b34:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004b36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004b3a:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004b3c:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004b3e:	466a      	mov	r2, sp
 8004b40:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004b42:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004b44:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004b48:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004b4e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004b50:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004b54:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004b58:	f004 fc2c 	bl	80093b4 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004b5c:	2800      	cmp	r0, #0
}
 8004b5e:	bf14      	ite	ne
 8004b60:	f06f 0005 	mvnne.w	r0, #5
 8004b64:	2000      	moveq	r0, #0
 8004b66:	b011      	add	sp, #68	@ 0x44
 8004b68:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b70:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004b72:	23bc      	movs	r3, #188	@ 0xbc
 8004b74:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8004b76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b7a:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004b7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b80:	e7db      	b.n	8004b3a <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b86:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004b88:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004b8a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004b8c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004b90:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004b92:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004b96:	e7d0      	b.n	8004b3a <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004b98:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004b9c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004b9e:	23eb      	movs	r3, #235	@ 0xeb
 8004ba0:	e7f3      	b.n	8004b8a <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08004ba2 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004ba2:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004ba8:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004baa:	bf18      	it	ne
 8004bac:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004bb0:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004bb2:	bf08      	it	eq
 8004bb4:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bb8:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004bba:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8004bbc:	2366      	movs	r3, #102	@ 0x66
 8004bbe:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004bc0:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004bc2:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004bc6:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004bc8:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004bca:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004bcc:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bd0:	f004 fa9e 	bl	8009110 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004bd4:	2800      	cmp	r0, #0
}
 8004bd6:	bf14      	ite	ne
 8004bd8:	f06f 0001 	mvnne.w	r0, #1
 8004bdc:	2000      	moveq	r0, #0
 8004bde:	b00f      	add	sp, #60	@ 0x3c
 8004be0:	f85d fb04 	ldr.w	pc, [sp], #4

08004be4 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004be4:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004be6:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004bea:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004bec:	bf18      	it	ne
 8004bee:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004bf2:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004bf4:	bf08      	it	eq
 8004bf6:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bfa:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004bfc:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8004bfe:	2399      	movs	r3, #153	@ 0x99
 8004c00:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004c02:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004c04:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004c08:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004c0a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004c0c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004c0e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004c12:	f004 fa7d 	bl	8009110 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004c16:	2800      	cmp	r0, #0
}
 8004c18:	bf14      	ite	ne
 8004c1a:	f06f 0001 	mvnne.w	r0, #1
 8004c1e:	2000      	moveq	r0, #0
 8004c20:	b00f      	add	sp, #60	@ 0x3c
 8004c22:	f85d fb04 	ldr.w	pc, [sp], #4

08004c26 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004c26:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004c28:	6884      	ldr	r4, [r0, #8]
 8004c2a:	8800      	ldrh	r0, [r0, #0]
 8004c2c:	46a4      	mov	ip, r4
}
 8004c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004c32:	4760      	bx	ip

08004c34 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004c34:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004c36:	6844      	ldr	r4, [r0, #4]
 8004c38:	8800      	ldrh	r0, [r0, #0]
 8004c3a:	46a4      	mov	ip, r4
}
 8004c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004c40:	4760      	bx	ip

08004c42 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004c42:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004c44:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004c46:	4604      	mov	r4, r0
 8004c48:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8004c4a:	4798      	blx	r3
 8004c4c:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004c4e:	68e3      	ldr	r3, [r4, #12]
 8004c50:	4798      	blx	r3
 8004c52:	1b83      	subs	r3, r0, r6
 8004c54:	42ab      	cmp	r3, r5
 8004c56:	d3fa      	bcc.n	8004c4e <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8004c58:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c5c <OTM8009A_Init>:
{
 8004c5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c60:	2300      	movs	r3, #0
 8004c62:	f100 0510 	add.w	r5, r0, #16
{
 8004c66:	4607      	mov	r7, r0
 8004c68:	460e      	mov	r6, r1
 8004c6a:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4ade      	ldr	r2, [pc, #888]	@ (8004fe8 <OTM8009A_Init+0x38c>)
 8004c70:	4628      	mov	r0, r5
 8004c72:	f000 fb99 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004c76:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004c78:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004c7a:	4adc      	ldr	r2, [pc, #880]	@ (8004fec <OTM8009A_Init+0x390>)
 8004c7c:	21ff      	movs	r1, #255	@ 0xff
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f000 fb92 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c84:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004c86:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c88:	4ad9      	ldr	r2, [pc, #868]	@ (8004ff0 <OTM8009A_Init+0x394>)
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	f000 fb8b 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004c92:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c94:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004c96:	4ad7      	ldr	r2, [pc, #860]	@ (8004ff4 <OTM8009A_Init+0x398>)
 8004c98:	21ff      	movs	r1, #255	@ 0xff
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f000 fb84 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ca0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004ca2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ca4:	4ad2      	ldr	r2, [pc, #840]	@ (8004ff0 <OTM8009A_Init+0x394>)
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f000 fb7d 	bl	80053a8 <otm8009a_write_reg>
 8004cae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	4ad1      	ldr	r2, [pc, #836]	@ (8004ff8 <OTM8009A_Init+0x39c>)
 8004cb4:	21c4      	movs	r1, #196	@ 0xc4
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f000 fb76 	bl	80053a8 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004cbc:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004cbe:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	f7ff ffbe 	bl	8004c42 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	4acc      	ldr	r2, [pc, #816]	@ (8004ffc <OTM8009A_Init+0x3a0>)
 8004cca:	4628      	mov	r0, r5
 8004ccc:	4619      	mov	r1, r3
 8004cce:	f000 fb6b 	bl	80053a8 <otm8009a_write_reg>
 8004cd2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	4aca      	ldr	r2, [pc, #808]	@ (8005000 <OTM8009A_Init+0x3a4>)
 8004cd8:	21c4      	movs	r1, #196	@ 0xc4
 8004cda:	4628      	mov	r0, r5
 8004cdc:	f000 fb64 	bl	80053a8 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004ce0:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004ce2:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	f7ff ffac 	bl	8004c42 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004cea:	2300      	movs	r3, #0
 8004cec:	4ac5      	ldr	r2, [pc, #788]	@ (8005004 <OTM8009A_Init+0x3a8>)
 8004cee:	4628      	mov	r0, r5
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	f000 fb59 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004cf6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004cf8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004cfa:	4ac3      	ldr	r2, [pc, #780]	@ (8005008 <OTM8009A_Init+0x3ac>)
 8004cfc:	21c5      	movs	r1, #197	@ 0xc5
 8004cfe:	4628      	mov	r0, r5
 8004d00:	f000 fb52 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004d04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004d06:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004d08:	4ac0      	ldr	r2, [pc, #768]	@ (800500c <OTM8009A_Init+0x3b0>)
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f000 fb4b 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004d12:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004d14:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004d16:	4abe      	ldr	r2, [pc, #760]	@ (8005010 <OTM8009A_Init+0x3b4>)
 8004d18:	21c5      	movs	r1, #197	@ 0xc5
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	f000 fb44 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004d20:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004d22:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004d24:	4abb      	ldr	r2, [pc, #748]	@ (8005014 <OTM8009A_Init+0x3b8>)
 8004d26:	4619      	mov	r1, r3
 8004d28:	4628      	mov	r0, r5
 8004d2a:	f000 fb3d 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004d2e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004d30:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004d32:	4ab9      	ldr	r2, [pc, #740]	@ (8005018 <OTM8009A_Init+0x3bc>)
 8004d34:	21c0      	movs	r1, #192	@ 0xc0
 8004d36:	4628      	mov	r0, r5
 8004d38:	f000 fb36 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d3c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004d3e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d40:	4aa9      	ldr	r2, [pc, #676]	@ (8004fe8 <OTM8009A_Init+0x38c>)
 8004d42:	4619      	mov	r1, r3
 8004d44:	4628      	mov	r0, r5
 8004d46:	f000 fb2f 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004d4a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d4c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004d4e:	4ab3      	ldr	r2, [pc, #716]	@ (800501c <OTM8009A_Init+0x3c0>)
 8004d50:	21d9      	movs	r1, #217	@ 0xd9
 8004d52:	4628      	mov	r0, r5
 8004d54:	f000 fb28 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004d58:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004d5a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004d5c:	4ab0      	ldr	r2, [pc, #704]	@ (8005020 <OTM8009A_Init+0x3c4>)
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4628      	mov	r0, r5
 8004d62:	f000 fb21 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004d66:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004d68:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004d6a:	4aae      	ldr	r2, [pc, #696]	@ (8005024 <OTM8009A_Init+0x3c8>)
 8004d6c:	21c1      	movs	r1, #193	@ 0xc1
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f000 fb1a 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004d74:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004d76:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004d78:	4aab      	ldr	r2, [pc, #684]	@ (8005028 <OTM8009A_Init+0x3cc>)
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	f000 fb13 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004d82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004d84:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004d86:	4aa9      	ldr	r2, [pc, #676]	@ (800502c <OTM8009A_Init+0x3d0>)
 8004d88:	21c5      	movs	r1, #197	@ 0xc5
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	f000 fb0c 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004d90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004d92:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004d94:	4aa6      	ldr	r2, [pc, #664]	@ (8005030 <OTM8009A_Init+0x3d4>)
 8004d96:	4619      	mov	r1, r3
 8004d98:	4628      	mov	r0, r5
 8004d9a:	f000 fb05 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004d9e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004da0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004da2:	4a9b      	ldr	r2, [pc, #620]	@ (8005010 <OTM8009A_Init+0x3b4>)
 8004da4:	21c5      	movs	r1, #197	@ 0xc5
 8004da6:	4628      	mov	r0, r5
 8004da8:	f000 fafe 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004dac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004dae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004db0:	4a8d      	ldr	r2, [pc, #564]	@ (8004fe8 <OTM8009A_Init+0x38c>)
 8004db2:	4619      	mov	r1, r3
 8004db4:	4628      	mov	r0, r5
 8004db6:	f000 faf7 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004dba:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004dbc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004dbe:	4a9d      	ldr	r2, [pc, #628]	@ (8005034 <OTM8009A_Init+0x3d8>)
 8004dc0:	21d8      	movs	r1, #216	@ 0xd8
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f000 faf0 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004dc8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004dca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004dcc:	4a9a      	ldr	r2, [pc, #616]	@ (8005038 <OTM8009A_Init+0x3dc>)
 8004dce:	4619      	mov	r1, r3
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f000 fae9 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004dd6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004dd8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004dda:	4a98      	ldr	r2, [pc, #608]	@ (800503c <OTM8009A_Init+0x3e0>)
 8004ddc:	21c5      	movs	r1, #197	@ 0xc5
 8004dde:	4628      	mov	r0, r5
 8004de0:	f000 fae2 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004de4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004de6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004de8:	4a95      	ldr	r2, [pc, #596]	@ (8005040 <OTM8009A_Init+0x3e4>)
 8004dea:	4619      	mov	r1, r3
 8004dec:	4628      	mov	r0, r5
 8004dee:	f000 fadb 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004df2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004df4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004df6:	4a93      	ldr	r2, [pc, #588]	@ (8005044 <OTM8009A_Init+0x3e8>)
 8004df8:	21c0      	movs	r1, #192	@ 0xc0
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f000 fad4 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004e00:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004e02:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004e04:	4a90      	ldr	r2, [pc, #576]	@ (8005048 <OTM8009A_Init+0x3ec>)
 8004e06:	4619      	mov	r1, r3
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f000 facd 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004e0e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004e10:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004e12:	4a8e      	ldr	r2, [pc, #568]	@ (800504c <OTM8009A_Init+0x3f0>)
 8004e14:	21c5      	movs	r1, #197	@ 0xc5
 8004e16:	4628      	mov	r0, r5
 8004e18:	f000 fac6 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e1c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004e1e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e20:	4a8b      	ldr	r2, [pc, #556]	@ (8005050 <OTM8009A_Init+0x3f4>)
 8004e22:	4619      	mov	r1, r3
 8004e24:	4628      	mov	r0, r5
 8004e26:	f000 fabf 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004e2a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004e2c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004e2e:	4a89      	ldr	r2, [pc, #548]	@ (8005054 <OTM8009A_Init+0x3f8>)
 8004e30:	21c4      	movs	r1, #196	@ 0xc4
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 fab8 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004e38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004e3a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004e3c:	4a78      	ldr	r2, [pc, #480]	@ (8005020 <OTM8009A_Init+0x3c4>)
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4628      	mov	r0, r5
 8004e42:	f000 fab1 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004e46:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004e48:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004e4a:	4a83      	ldr	r2, [pc, #524]	@ (8005058 <OTM8009A_Init+0x3fc>)
 8004e4c:	21c1      	movs	r1, #193	@ 0xc1
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f000 faaa 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004e54:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004e56:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004e58:	4a80      	ldr	r2, [pc, #512]	@ (800505c <OTM8009A_Init+0x400>)
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	f000 faa3 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004e62:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004e64:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004e66:	4a7e      	ldr	r2, [pc, #504]	@ (8005060 <OTM8009A_Init+0x404>)
 8004e68:	21b3      	movs	r1, #179	@ 0xb3
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f000 fa9c 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004e72:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e74:	4a5e      	ldr	r2, [pc, #376]	@ (8004ff0 <OTM8009A_Init+0x394>)
 8004e76:	4619      	mov	r1, r3
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f000 fa95 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004e7e:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e80:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004e82:	4a78      	ldr	r2, [pc, #480]	@ (8005064 <OTM8009A_Init+0x408>)
 8004e84:	21ce      	movs	r1, #206	@ 0xce
 8004e86:	4628      	mov	r0, r5
 8004e88:	f000 fa8e 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e8c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004e8e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e90:	4a75      	ldr	r2, [pc, #468]	@ (8005068 <OTM8009A_Init+0x40c>)
 8004e92:	4619      	mov	r1, r3
 8004e94:	4628      	mov	r0, r5
 8004e96:	f000 fa87 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004e9a:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004e9c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004e9e:	4a73      	ldr	r2, [pc, #460]	@ (800506c <OTM8009A_Init+0x410>)
 8004ea0:	21ce      	movs	r1, #206	@ 0xce
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f000 fa80 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004ea8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004eaa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004eac:	4a70      	ldr	r2, [pc, #448]	@ (8005070 <OTM8009A_Init+0x414>)
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f000 fa79 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004eb6:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004eb8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004eba:	4a6e      	ldr	r2, [pc, #440]	@ (8005074 <OTM8009A_Init+0x418>)
 8004ebc:	21ce      	movs	r1, #206	@ 0xce
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f000 fa72 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004ec4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004ec6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004ec8:	4a6b      	ldr	r2, [pc, #428]	@ (8005078 <OTM8009A_Init+0x41c>)
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4628      	mov	r0, r5
 8004ece:	f000 fa6b 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004ed2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004ed4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004ed6:	4a69      	ldr	r2, [pc, #420]	@ (800507c <OTM8009A_Init+0x420>)
 8004ed8:	21cf      	movs	r1, #207	@ 0xcf
 8004eda:	4628      	mov	r0, r5
 8004edc:	f000 fa64 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004ee0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004ee2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004ee4:	4a66      	ldr	r2, [pc, #408]	@ (8005080 <OTM8009A_Init+0x424>)
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f000 fa5d 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004eee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004ef0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004ef2:	4a64      	ldr	r2, [pc, #400]	@ (8005084 <OTM8009A_Init+0x428>)
 8004ef4:	21cf      	movs	r1, #207	@ 0xcf
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f000 fa56 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004efc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004efe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004f00:	4a3b      	ldr	r2, [pc, #236]	@ (8004ff0 <OTM8009A_Init+0x394>)
 8004f02:	4619      	mov	r1, r3
 8004f04:	4628      	mov	r0, r5
 8004f06:	f000 fa4f 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004f0a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004f0c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004f0e:	4a5e      	ldr	r2, [pc, #376]	@ (8005088 <OTM8009A_Init+0x42c>)
 8004f10:	21cb      	movs	r1, #203	@ 0xcb
 8004f12:	4628      	mov	r0, r5
 8004f14:	f000 fa48 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004f18:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004f1a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004f1c:	4a5b      	ldr	r2, [pc, #364]	@ (800508c <OTM8009A_Init+0x430>)
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4628      	mov	r0, r5
 8004f22:	f000 fa41 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004f26:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004f28:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004f2a:	4a59      	ldr	r2, [pc, #356]	@ (8005090 <OTM8009A_Init+0x434>)
 8004f2c:	21cb      	movs	r1, #203	@ 0xcb
 8004f2e:	4628      	mov	r0, r5
 8004f30:	f000 fa3a 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004f34:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004f36:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004f38:	4a4b      	ldr	r2, [pc, #300]	@ (8005068 <OTM8009A_Init+0x40c>)
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	f000 fa33 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004f42:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004f44:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004f46:	4a53      	ldr	r2, [pc, #332]	@ (8005094 <OTM8009A_Init+0x438>)
 8004f48:	21cb      	movs	r1, #203	@ 0xcb
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f000 fa2c 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004f52:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f54:	4a46      	ldr	r2, [pc, #280]	@ (8005070 <OTM8009A_Init+0x414>)
 8004f56:	4619      	mov	r1, r3
 8004f58:	4628      	mov	r0, r5
 8004f5a:	f000 fa25 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004f5e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004f60:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004f62:	4a4d      	ldr	r2, [pc, #308]	@ (8005098 <OTM8009A_Init+0x43c>)
 8004f64:	21cb      	movs	r1, #203	@ 0xcb
 8004f66:	4628      	mov	r0, r5
 8004f68:	f000 fa1e 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f6c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004f6e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f70:	4a41      	ldr	r2, [pc, #260]	@ (8005078 <OTM8009A_Init+0x41c>)
 8004f72:	4619      	mov	r1, r3
 8004f74:	4628      	mov	r0, r5
 8004f76:	f000 fa17 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004f7a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004f7c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004f7e:	4a47      	ldr	r2, [pc, #284]	@ (800509c <OTM8009A_Init+0x440>)
 8004f80:	21cb      	movs	r1, #203	@ 0xcb
 8004f82:	4628      	mov	r0, r5
 8004f84:	f000 fa10 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004f88:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004f8a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004f8c:	4a3c      	ldr	r2, [pc, #240]	@ (8005080 <OTM8009A_Init+0x424>)
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4628      	mov	r0, r5
 8004f92:	f000 fa09 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004f96:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004f98:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004f9a:	4a41      	ldr	r2, [pc, #260]	@ (80050a0 <OTM8009A_Init+0x444>)
 8004f9c:	21cb      	movs	r1, #203	@ 0xcb
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f000 fa02 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004fa4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004fa6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004fa8:	4a3e      	ldr	r2, [pc, #248]	@ (80050a4 <OTM8009A_Init+0x448>)
 8004faa:	4619      	mov	r1, r3
 8004fac:	4628      	mov	r0, r5
 8004fae:	f000 f9fb 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004fb2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004fb4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004fb6:	4a3c      	ldr	r2, [pc, #240]	@ (80050a8 <OTM8009A_Init+0x44c>)
 8004fb8:	21cb      	movs	r1, #203	@ 0xcb
 8004fba:	4628      	mov	r0, r5
 8004fbc:	f000 f9f4 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004fc0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004fc2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004fc4:	4a39      	ldr	r2, [pc, #228]	@ (80050ac <OTM8009A_Init+0x450>)
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4628      	mov	r0, r5
 8004fca:	f000 f9ed 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004fce:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004fd0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004fd2:	4a37      	ldr	r2, [pc, #220]	@ (80050b0 <OTM8009A_Init+0x454>)
 8004fd4:	21cb      	movs	r1, #203	@ 0xcb
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	f000 f9e6 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004fdc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004fde:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004fe0:	4a03      	ldr	r2, [pc, #12]	@ (8004ff0 <OTM8009A_Init+0x394>)
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	e065      	b.n	80050b4 <OTM8009A_Init+0x458>
 8004fe8:	080237a9 	.word	0x080237a9
 8004fec:	080237a5 	.word	0x080237a5
 8004ff0:	080237aa 	.word	0x080237aa
 8004ff4:	080237a3 	.word	0x080237a3
 8004ff8:	080237ab 	.word	0x080237ab
 8004ffc:	080237ac 	.word	0x080237ac
 8005000:	080237ad 	.word	0x080237ad
 8005004:	080237ae 	.word	0x080237ae
 8005008:	080237af 	.word	0x080237af
 800500c:	080237b0 	.word	0x080237b0
 8005010:	080237b1 	.word	0x080237b1
 8005014:	080237b2 	.word	0x080237b2
 8005018:	080237b3 	.word	0x080237b3
 800501c:	080237b4 	.word	0x080237b4
 8005020:	080237b7 	.word	0x080237b7
 8005024:	080237b8 	.word	0x080237b8
 8005028:	080237b9 	.word	0x080237b9
 800502c:	080237ba 	.word	0x080237ba
 8005030:	080237bb 	.word	0x080237bb
 8005034:	080237a1 	.word	0x080237a1
 8005038:	080237bc 	.word	0x080237bc
 800503c:	080237bd 	.word	0x080237bd
 8005040:	080237be 	.word	0x080237be
 8005044:	080237bf 	.word	0x080237bf
 8005048:	080237c0 	.word	0x080237c0
 800504c:	080237c1 	.word	0x080237c1
 8005050:	080237b5 	.word	0x080237b5
 8005054:	080237c2 	.word	0x080237c2
 8005058:	080237c3 	.word	0x080237c3
 800505c:	080237c4 	.word	0x080237c4
 8005060:	0802379f 	.word	0x0802379f
 8005064:	08023799 	.word	0x08023799
 8005068:	080237c5 	.word	0x080237c5
 800506c:	0802378b 	.word	0x0802378b
 8005070:	080237c6 	.word	0x080237c6
 8005074:	0802377d 	.word	0x0802377d
 8005078:	080237c7 	.word	0x080237c7
 800507c:	08023773 	.word	0x08023773
 8005080:	080237c8 	.word	0x080237c8
 8005084:	080237d5 	.word	0x080237d5
 8005088:	08023769 	.word	0x08023769
 800508c:	080237c9 	.word	0x080237c9
 8005090:	0802375a 	.word	0x0802375a
 8005094:	0802374b 	.word	0x0802374b
 8005098:	08023741 	.word	0x08023741
 800509c:	08023732 	.word	0x08023732
 80050a0:	08023723 	.word	0x08023723
 80050a4:	080237ca 	.word	0x080237ca
 80050a8:	08023719 	.word	0x08023719
 80050ac:	080237cb 	.word	0x080237cb
 80050b0:	0802370f 	.word	0x0802370f
 80050b4:	f000 f978 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80050b8:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80050ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80050bc:	4a8e      	ldr	r2, [pc, #568]	@ (80052f8 <OTM8009A_Init+0x69c>)
 80050be:	21cc      	movs	r1, #204	@ 0xcc
 80050c0:	4628      	mov	r0, r5
 80050c2:	f000 f971 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80050c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80050c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80050ca:	4a8c      	ldr	r2, [pc, #560]	@ (80052fc <OTM8009A_Init+0x6a0>)
 80050cc:	4619      	mov	r1, r3
 80050ce:	4628      	mov	r0, r5
 80050d0:	f000 f96a 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80050d4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80050d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80050d8:	4a89      	ldr	r2, [pc, #548]	@ (8005300 <OTM8009A_Init+0x6a4>)
 80050da:	21cc      	movs	r1, #204	@ 0xcc
 80050dc:	4628      	mov	r0, r5
 80050de:	f000 f963 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80050e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80050e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80050e6:	4a87      	ldr	r2, [pc, #540]	@ (8005304 <OTM8009A_Init+0x6a8>)
 80050e8:	4619      	mov	r1, r3
 80050ea:	4628      	mov	r0, r5
 80050ec:	f000 f95c 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80050f0:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80050f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80050f4:	4a84      	ldr	r2, [pc, #528]	@ (8005308 <OTM8009A_Init+0x6ac>)
 80050f6:	21cc      	movs	r1, #204	@ 0xcc
 80050f8:	4628      	mov	r0, r5
 80050fa:	f000 f955 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80050fe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005100:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005102:	4a82      	ldr	r2, [pc, #520]	@ (800530c <OTM8009A_Init+0x6b0>)
 8005104:	4619      	mov	r1, r3
 8005106:	4628      	mov	r0, r5
 8005108:	f000 f94e 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800510c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800510e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005110:	4a7f      	ldr	r2, [pc, #508]	@ (8005310 <OTM8009A_Init+0x6b4>)
 8005112:	21cc      	movs	r1, #204	@ 0xcc
 8005114:	4628      	mov	r0, r5
 8005116:	f000 f947 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800511a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800511c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800511e:	4a7d      	ldr	r2, [pc, #500]	@ (8005314 <OTM8009A_Init+0x6b8>)
 8005120:	4619      	mov	r1, r3
 8005122:	4628      	mov	r0, r5
 8005124:	f000 f940 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005128:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800512a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800512c:	4a7a      	ldr	r2, [pc, #488]	@ (8005318 <OTM8009A_Init+0x6bc>)
 800512e:	21cc      	movs	r1, #204	@ 0xcc
 8005130:	4628      	mov	r0, r5
 8005132:	f000 f939 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005136:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005138:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800513a:	4a78      	ldr	r2, [pc, #480]	@ (800531c <OTM8009A_Init+0x6c0>)
 800513c:	4619      	mov	r1, r3
 800513e:	4628      	mov	r0, r5
 8005140:	f000 f932 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005144:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005146:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005148:	4a75      	ldr	r2, [pc, #468]	@ (8005320 <OTM8009A_Init+0x6c4>)
 800514a:	21cc      	movs	r1, #204	@ 0xcc
 800514c:	4628      	mov	r0, r5
 800514e:	f000 f92b 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005152:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005154:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005156:	4a73      	ldr	r2, [pc, #460]	@ (8005324 <OTM8009A_Init+0x6c8>)
 8005158:	4619      	mov	r1, r3
 800515a:	4628      	mov	r0, r5
 800515c:	f000 f924 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005160:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005162:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005164:	4a70      	ldr	r2, [pc, #448]	@ (8005328 <OTM8009A_Init+0x6cc>)
 8005166:	21c5      	movs	r1, #197	@ 0xc5
 8005168:	4628      	mov	r0, r5
 800516a:	f000 f91d 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800516e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005170:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005172:	4a6e      	ldr	r2, [pc, #440]	@ (800532c <OTM8009A_Init+0x6d0>)
 8005174:	4619      	mov	r1, r3
 8005176:	4628      	mov	r0, r5
 8005178:	f000 f916 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800517c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800517e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005180:	4a6b      	ldr	r2, [pc, #428]	@ (8005330 <OTM8009A_Init+0x6d4>)
 8005182:	21f5      	movs	r1, #245	@ 0xf5
 8005184:	4628      	mov	r0, r5
 8005186:	f000 f90f 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800518a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800518c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800518e:	4a69      	ldr	r2, [pc, #420]	@ (8005334 <OTM8009A_Init+0x6d8>)
 8005190:	4619      	mov	r1, r3
 8005192:	4628      	mov	r0, r5
 8005194:	f000 f908 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005198:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800519a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800519c:	4a66      	ldr	r2, [pc, #408]	@ (8005338 <OTM8009A_Init+0x6dc>)
 800519e:	21c6      	movs	r1, #198	@ 0xc6
 80051a0:	4628      	mov	r0, r5
 80051a2:	f000 f901 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051a6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80051a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051aa:	4a64      	ldr	r2, [pc, #400]	@ (800533c <OTM8009A_Init+0x6e0>)
 80051ac:	4619      	mov	r1, r3
 80051ae:	4628      	mov	r0, r5
 80051b0:	f000 f8fa 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80051b4:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80051b8:	4a61      	ldr	r2, [pc, #388]	@ (8005340 <OTM8009A_Init+0x6e4>)
 80051ba:	21ff      	movs	r1, #255	@ 0xff
 80051bc:	4628      	mov	r0, r5
 80051be:	f000 f8f3 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051c2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80051c4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051c6:	4a5d      	ldr	r2, [pc, #372]	@ (800533c <OTM8009A_Init+0x6e0>)
 80051c8:	4619      	mov	r1, r3
 80051ca:	4628      	mov	r0, r5
 80051cc:	f000 f8ec 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051d2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051d4:	4a59      	ldr	r2, [pc, #356]	@ (800533c <OTM8009A_Init+0x6e0>)
 80051d6:	4619      	mov	r1, r3
 80051d8:	4628      	mov	r0, r5
 80051da:	f000 f8e5 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80051de:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051e0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80051e2:	4a58      	ldr	r2, [pc, #352]	@ (8005344 <OTM8009A_Init+0x6e8>)
 80051e4:	21e1      	movs	r1, #225	@ 0xe1
 80051e6:	4628      	mov	r0, r5
 80051e8:	f000 f8de 	bl	80053a8 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051ec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80051ee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80051f0:	4a52      	ldr	r2, [pc, #328]	@ (800533c <OTM8009A_Init+0x6e0>)
 80051f2:	4619      	mov	r1, r3
 80051f4:	4628      	mov	r0, r5
 80051f6:	f000 f8d7 	bl	80053a8 <otm8009a_write_reg>
 80051fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 80051fc:	2310      	movs	r3, #16
 80051fe:	4a52      	ldr	r2, [pc, #328]	@ (8005348 <OTM8009A_Init+0x6ec>)
 8005200:	21e2      	movs	r1, #226	@ 0xe2
 8005202:	4628      	mov	r0, r5
 8005204:	f000 f8d0 	bl	80053a8 <otm8009a_write_reg>
 8005208:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800520a:	2300      	movs	r3, #0
 800520c:	4a4f      	ldr	r2, [pc, #316]	@ (800534c <OTM8009A_Init+0x6f0>)
 800520e:	2111      	movs	r1, #17
 8005210:	4628      	mov	r0, r5
 8005212:	f000 f8c9 	bl	80053a8 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8005216:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005218:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 800521a:	4638      	mov	r0, r7
 800521c:	f7ff fd11 	bl	8004c42 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8005220:	4f4b      	ldr	r7, [pc, #300]	@ (8005350 <OTM8009A_Init+0x6f4>)
 8005222:	2e00      	cmp	r6, #0
 8005224:	d061      	beq.n	80052ea <OTM8009A_Init+0x68e>
 8005226:	2e02      	cmp	r6, #2
 8005228:	d107      	bne.n	800523a <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800522a:	2300      	movs	r3, #0
 800522c:	4a49      	ldr	r2, [pc, #292]	@ (8005354 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800522e:	213a      	movs	r1, #58	@ 0x3a
 8005230:	4628      	mov	r0, r5
 8005232:	f000 f8b9 	bl	80053a8 <otm8009a_write_reg>
 8005236:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8005238:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800523a:	f1b8 0f01 	cmp.w	r8, #1
 800523e:	d157      	bne.n	80052f0 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005240:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005242:	f10d 0207 	add.w	r2, sp, #7
 8005246:	2136      	movs	r1, #54	@ 0x36
 8005248:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800524a:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800524e:	2300      	movs	r3, #0
 8005250:	f000 f8aa 	bl	80053a8 <otm8009a_write_reg>
 8005254:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005256:	2304      	movs	r3, #4
 8005258:	4a3f      	ldr	r2, [pc, #252]	@ (8005358 <OTM8009A_Init+0x6fc>)
 800525a:	212a      	movs	r1, #42	@ 0x2a
 800525c:	4628      	mov	r0, r5
 800525e:	f000 f8a3 	bl	80053a8 <otm8009a_write_reg>
 8005262:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005264:	2304      	movs	r3, #4
 8005266:	4a3d      	ldr	r2, [pc, #244]	@ (800535c <OTM8009A_Init+0x700>)
 8005268:	212b      	movs	r1, #43	@ 0x2b
 800526a:	4628      	mov	r0, r5
 800526c:	f000 f89c 	bl	80053a8 <otm8009a_write_reg>
 8005270:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8005272:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005276:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8005278:	2300      	movs	r3, #0
 800527a:	4a39      	ldr	r2, [pc, #228]	@ (8005360 <OTM8009A_Init+0x704>)
 800527c:	2151      	movs	r1, #81	@ 0x51
 800527e:	4628      	mov	r0, r5
 8005280:	f000 f892 	bl	80053a8 <otm8009a_write_reg>
 8005284:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005286:	4633      	mov	r3, r6
 8005288:	4a36      	ldr	r2, [pc, #216]	@ (8005364 <OTM8009A_Init+0x708>)
 800528a:	2153      	movs	r1, #83	@ 0x53
 800528c:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800528e:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005290:	f000 f88a 	bl	80053a8 <otm8009a_write_reg>
 8005294:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8005296:	4633      	mov	r3, r6
 8005298:	4a33      	ldr	r2, [pc, #204]	@ (8005368 <OTM8009A_Init+0x70c>)
 800529a:	2155      	movs	r1, #85	@ 0x55
 800529c:	4628      	mov	r0, r5
 800529e:	f000 f883 	bl	80053a8 <otm8009a_write_reg>
 80052a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80052a4:	4633      	mov	r3, r6
 80052a6:	4a31      	ldr	r2, [pc, #196]	@ (800536c <OTM8009A_Init+0x710>)
 80052a8:	215e      	movs	r1, #94	@ 0x5e
 80052aa:	4628      	mov	r0, r5
 80052ac:	f000 f87c 	bl	80053a8 <otm8009a_write_reg>
 80052b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80052b2:	4633      	mov	r3, r6
 80052b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005370 <OTM8009A_Init+0x714>)
 80052b6:	2129      	movs	r1, #41	@ 0x29
 80052b8:	4628      	mov	r0, r5
 80052ba:	f000 f875 	bl	80053a8 <otm8009a_write_reg>
 80052be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052c0:	4633      	mov	r3, r6
 80052c2:	4631      	mov	r1, r6
 80052c4:	4a1d      	ldr	r2, [pc, #116]	@ (800533c <OTM8009A_Init+0x6e0>)
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 f86e 	bl	80053a8 <otm8009a_write_reg>
 80052cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80052ce:	4633      	mov	r3, r6
 80052d0:	4a28      	ldr	r2, [pc, #160]	@ (8005374 <OTM8009A_Init+0x718>)
 80052d2:	212c      	movs	r1, #44	@ 0x2c
 80052d4:	4628      	mov	r0, r5
 80052d6:	f000 f867 	bl	80053a8 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 80052da:	42c4      	cmn	r4, r0
}
 80052dc:	bf14      	ite	ne
 80052de:	f04f 30ff 	movne.w	r0, #4294967295
 80052e2:	4630      	moveq	r0, r6
 80052e4:	b002      	add	sp, #8
 80052e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80052ea:	4633      	mov	r3, r6
 80052ec:	4a22      	ldr	r2, [pc, #136]	@ (8005378 <OTM8009A_Init+0x71c>)
 80052ee:	e79e      	b.n	800522e <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80052f0:	2300      	movs	r3, #0
 80052f2:	603b      	str	r3, [r7, #0]
 80052f4:	e7bf      	b.n	8005276 <OTM8009A_Init+0x61a>
 80052f6:	bf00      	nop
 80052f8:	08023705 	.word	0x08023705
 80052fc:	080237c9 	.word	0x080237c9
 8005300:	080236f6 	.word	0x080236f6
 8005304:	080237c5 	.word	0x080237c5
 8005308:	080236e7 	.word	0x080236e7
 800530c:	080237c6 	.word	0x080237c6
 8005310:	080236dd 	.word	0x080236dd
 8005314:	080237c7 	.word	0x080237c7
 8005318:	080236ce 	.word	0x080236ce
 800531c:	080237c8 	.word	0x080237c8
 8005320:	080236bf 	.word	0x080236bf
 8005324:	080237b5 	.word	0x080237b5
 8005328:	080237d6 	.word	0x080237d6
 800532c:	080237d7 	.word	0x080237d7
 8005330:	080237d8 	.word	0x080237d8
 8005334:	080237d9 	.word	0x080237d9
 8005338:	080237da 	.word	0x080237da
 800533c:	080237a9 	.word	0x080237a9
 8005340:	080236bc 	.word	0x080236bc
 8005344:	080236ac 	.word	0x080236ac
 8005348:	0802369c 	.word	0x0802369c
 800534c:	080237cc 	.word	0x080237cc
 8005350:	2400b15c 	.word	0x2400b15c
 8005354:	080237cd 	.word	0x080237cd
 8005358:	080237df 	.word	0x080237df
 800535c:	080237db 	.word	0x080237db
 8005360:	080237cf 	.word	0x080237cf
 8005364:	080237d0 	.word	0x080237d0
 8005368:	080237d1 	.word	0x080237d1
 800536c:	080237d2 	.word	0x080237d2
 8005370:	080237d3 	.word	0x080237d3
 8005374:	080237d4 	.word	0x080237d4
 8005378:	080237ce 	.word	0x080237ce

0800537c <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 800537c:	b160      	cbz	r0, 8005398 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 800537e:	684b      	ldr	r3, [r1, #4]
 8005380:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005382:	688b      	ldr	r3, [r1, #8]
 8005384:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8005386:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8005388:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 800538a:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 800538c:	4b04      	ldr	r3, [pc, #16]	@ (80053a0 <OTM8009A_RegisterBusIO+0x24>)
 800538e:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005390:	4b04      	ldr	r3, [pc, #16]	@ (80053a4 <OTM8009A_RegisterBusIO+0x28>)
 8005392:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8005394:	2000      	movs	r0, #0
 8005396:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8005398:	f04f 30ff 	mov.w	r0, #4294967295
}
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	08004c27 	.word	0x08004c27
 80053a4:	08004c35 	.word	0x08004c35

080053a8 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 80053a8:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80053aa:	6804      	ldr	r4, [r0, #0]
 80053ac:	6880      	ldr	r0, [r0, #8]
 80053ae:	46a4      	mov	ip, r4
}
 80053b0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80053b4:	4760      	bx	ip
	...

080053b8 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 80053b8:	4a10      	ldr	r2, [pc, #64]	@ (80053fc <BSP_I2C4_DeInit+0x44>)
{
 80053ba:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 80053bc:	6813      	ldr	r3, [r2, #0]
 80053be:	3b01      	subs	r3, #1
 80053c0:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 80053c2:	b10b      	cbz	r3, 80053c8 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 80053c4:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 80053c6:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80053c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80053cc:	480c      	ldr	r0, [pc, #48]	@ (8005400 <BSP_I2C4_DeInit+0x48>)
 80053ce:	f001 fdfd 	bl	8006fcc <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80053d2:	480b      	ldr	r0, [pc, #44]	@ (8005400 <BSP_I2C4_DeInit+0x48>)
 80053d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80053d8:	f001 fdf8 	bl	8006fcc <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80053dc:	4a09      	ldr	r2, [pc, #36]	@ (8005404 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80053de:	480a      	ldr	r0, [pc, #40]	@ (8005408 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 80053e0:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 80053e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80053ec:	f002 f832 	bl	8007454 <HAL_I2C_DeInit>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d0e7      	beq.n	80053c4 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 80053f4:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80053f8:	e7e5      	b.n	80053c6 <BSP_I2C4_DeInit+0xe>
 80053fa:	bf00      	nop
 80053fc:	2400bbc0 	.word	0x2400bbc0
 8005400:	58020c00 	.word	0x58020c00
 8005404:	58024400 	.word	0x58024400
 8005408:	2400b168 	.word	0x2400b168

0800540c <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800540c:	2300      	movs	r3, #0
 800540e:	2201      	movs	r2, #1
{
 8005410:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8005412:	6041      	str	r1, [r0, #4]
{
 8005414:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005416:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005418:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 800541c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005420:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8005424:	f001 ffc4 	bl	80073b0 <HAL_I2C_Init>
 8005428:	4601      	mov	r1, r0
 800542a:	b108      	cbz	r0, 8005430 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 800542c:	2001      	movs	r0, #1
}
 800542e:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8005430:	4620      	mov	r0, r4
 8005432:	f002 f9e6 	bl	8007802 <HAL_I2CEx_ConfigAnalogFilter>
 8005436:	4601      	mov	r1, r0
 8005438:	2800      	cmp	r0, #0
 800543a:	d1f7      	bne.n	800542c <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800543c:	4620      	mov	r0, r4
 800543e:	f002 fa06 	bl	800784e <HAL_I2CEx_ConfigDigitalFilter>
 8005442:	3800      	subs	r0, #0
 8005444:	bf18      	it	ne
 8005446:	2001      	movne	r0, #1
 8005448:	e7f1      	b.n	800542e <MX_I2C4_Init+0x22>
	...

0800544c <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 800544c:	4ba1      	ldr	r3, [pc, #644]	@ (80056d4 <BSP_I2C4_Init+0x288>)
 800544e:	48a2      	ldr	r0, [pc, #648]	@ (80056d8 <BSP_I2C4_Init+0x28c>)
{
 8005450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8005454:	6003      	str	r3, [r0, #0]
{
 8005456:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 8005458:	4ba0      	ldr	r3, [pc, #640]	@ (80056dc <BSP_I2C4_Init+0x290>)
 800545a:	681c      	ldr	r4, [r3, #0]
 800545c:	b11c      	cbz	r4, 8005466 <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 800545e:	2000      	movs	r0, #0
}
 8005460:	b013      	add	sp, #76	@ 0x4c
 8005462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 8005466:	2201      	movs	r2, #1
 8005468:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800546a:	f002 f9c5 	bl	80077f8 <HAL_I2C_GetState>
 800546e:	2800      	cmp	r0, #0
 8005470:	d1f5      	bne.n	800545e <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005472:	4d9b      	ldr	r5, [pc, #620]	@ (80056e0 <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005474:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005478:	2702      	movs	r7, #2
 800547a:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800547c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005480:	a90d      	add	r1, sp, #52	@ 0x34
 8005482:	4898      	ldr	r0, [pc, #608]	@ (80056e4 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005484:	f043 0308 	orr.w	r3, r3, #8
 8005488:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800548c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	930a      	str	r3, [sp, #40]	@ 0x28
 8005496:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005498:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800549c:	f043 0308 	orr.w	r3, r3, #8
 80054a0:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80054a4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80054a8:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80054b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80054b6:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80054ba:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80054be:	f001 fc9d 	bl	8006dfc <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80054c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80054c6:	a90d      	add	r1, sp, #52	@ 0x34
 80054c8:	4886      	ldr	r0, [pc, #536]	@ (80056e4 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80054ca:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80054cc:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80054d0:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80054d4:	f001 fc92 	bl	8006dfc <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80054d8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80054dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e0:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 80054e4:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80054e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80054ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 80054f0:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80054f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054f8:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 80054fc:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8005500:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005504:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005508:	f004 fc8c 	bl	8009e24 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800550c:	2800      	cmp	r0, #0
 800550e:	d06f      	beq.n	80055f0 <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005510:	4b75      	ldr	r3, [pc, #468]	@ (80056e8 <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 8005512:	4622      	mov	r2, r4
 8005514:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 8005516:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800551a:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800551e:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 80056f0 <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005522:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005526:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800552a:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 800552e:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005530:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005534:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 8005538:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 800553c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 8005540:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005542:	4b6a      	ldr	r3, [pc, #424]	@ (80056ec <BSP_I2C4_Init+0x2a0>)
 8005544:	681b      	ldr	r3, [r3, #0]
{
 8005546:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005548:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 800554c:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8005550:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8005554:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8005558:	d35d      	bcc.n	8005616 <BSP_I2C4_Init+0x1ca>
 800555a:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800555c:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800555e:	9d00      	ldr	r5, [sp, #0]
 8005560:	42bd      	cmp	r5, r7
 8005562:	d852      	bhi.n	800560a <BSP_I2C4_Init+0x1be>
 8005564:	42be      	cmp	r6, r7
 8005566:	d350      	bcc.n	800560a <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 8005568:	4591      	cmp	r9, r2
 800556a:	d04e      	beq.n	800560a <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800556c:	2514      	movs	r5, #20
 800556e:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 8005572:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8005574:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005576:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800557a:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800557c:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005580:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005584:	d93e      	bls.n	8005604 <BSP_I2C4_Init+0x1b8>
 8005586:	4a59      	ldr	r2, [pc, #356]	@ (80056ec <BSP_I2C4_Init+0x2a0>)
 8005588:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800558a:	4b58      	ldr	r3, [pc, #352]	@ (80056ec <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800558c:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 8005590:	f04f 32ff 	mov.w	r2, #4294967295
 8005594:	4956      	ldr	r1, [pc, #344]	@ (80056f0 <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005596:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005598:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800559a:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800559c:	0043      	lsls	r3, r0, #1
 800559e:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 80055a2:	e9cd 2501 	strd	r2, r5, [sp, #4]
 80055a6:	f10b 0b01 	add.w	fp, fp, #1
 80055aa:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 80055ae:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 80055b2:	9508      	str	r5, [sp, #32]
 80055b4:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80055b6:	9b05      	ldr	r3, [sp, #20]
 80055b8:	429f      	cmp	r7, r3
 80055ba:	d138      	bne.n	800562e <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 80055bc:	9b01      	ldr	r3, [sp, #4]
 80055be:	2b7f      	cmp	r3, #127	@ 0x7f
 80055c0:	d816      	bhi.n	80055f0 <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80055c2:	2114      	movs	r1, #20
 80055c4:	9a01      	ldr	r2, [sp, #4]
 80055c6:	4b4a      	ldr	r3, [pc, #296]	@ (80056f0 <BSP_I2C4_Init+0x2a4>)
 80055c8:	434a      	muls	r2, r1
 80055ca:	1899      	adds	r1, r3, r2
 80055cc:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80055ce:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80055d0:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80055d4:	684b      	ldr	r3, [r1, #4]
 80055d6:	051b      	lsls	r3, r3, #20
 80055d8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80055dc:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80055de:	688b      	ldr	r3, [r1, #8]
 80055e0:	041b      	lsls	r3, r3, #16
 80055e2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80055e6:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80055e8:	68cb      	ldr	r3, [r1, #12]
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80055ee:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80055f0:	4621      	mov	r1, r4
 80055f2:	4839      	ldr	r0, [pc, #228]	@ (80056d8 <BSP_I2C4_Init+0x28c>)
 80055f4:	f7ff ff0a 	bl	800540c <MX_I2C4_Init>
 80055f8:	2800      	cmp	r0, #0
 80055fa:	f43f af30 	beq.w	800545e <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 80055fe:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005602:	e72d      	b.n	8005460 <BSP_I2C4_Init+0x14>
 8005604:	4691      	mov	r9, r2
 8005606:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800560a:	f10e 0e01 	add.w	lr, lr, #1
 800560e:	440f      	add	r7, r1
 8005610:	f1be 0f10 	cmp.w	lr, #16
 8005614:	d1a3      	bne.n	800555e <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005616:	f1bc 0f10 	cmp.w	ip, #16
 800561a:	4488      	add	r8, r1
 800561c:	d196      	bne.n	800554c <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800561e:	3201      	adds	r2, #1
 8005620:	4401      	add	r1, r0
 8005622:	2a10      	cmp	r2, #16
 8005624:	d18f      	bne.n	8005546 <BSP_I2C4_Init+0xfa>
 8005626:	f1ba 0f00 	cmp.w	sl, #0
 800562a:	d1ac      	bne.n	8005586 <BSP_I2C4_Init+0x13a>
 800562c:	e7ad      	b.n	800558a <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800562e:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005630:	f04f 0c00 	mov.w	ip, #0
 8005634:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005636:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800563a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800563c:	441d      	add	r5, r3
 800563e:	441e      	add	r6, r3
 8005640:	9503      	str	r5, [sp, #12]
 8005642:	ebab 0503 	sub.w	r5, fp, r3
 8005646:	9607      	str	r6, [sp, #28]
 8005648:	006d      	lsls	r5, r5, #1
 800564a:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800564c:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800564e:	f240 5214 	movw	r2, #1300	@ 0x514
 8005652:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005656:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800565a:	4295      	cmp	r5, r2
 800565c:	d92f      	bls.n	80056be <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800565e:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005662:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8005666:	d22a      	bcs.n	80056be <BSP_I2C4_Init+0x272>
 8005668:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800566a:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800566e:	f8dd 9000 	ldr.w	r9, [sp]
 8005672:	442e      	add	r6, r5
 8005674:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005678:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 800567c:	f240 4212 	movw	r2, #1042	@ 0x412
 8005680:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8005684:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005688:	4592      	cmp	sl, r2
 800568a:	d811      	bhi.n	80056b0 <BSP_I2C4_Init+0x264>
 800568c:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8005690:	d30e      	bcc.n	80056b0 <BSP_I2C4_Init+0x264>
 8005692:	4580      	cmp	r8, r0
 8005694:	d90c      	bls.n	80056b0 <BSP_I2C4_Init+0x264>
              error = -error;
 8005696:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 800569a:	bf28      	it	cs
 800569c:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 800569e:	9a02      	ldr	r2, [sp, #8]
 80056a0:	4592      	cmp	sl, r2
 80056a2:	d205      	bcs.n	80056b0 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 80056a4:	9a04      	ldr	r2, [sp, #16]
 80056a6:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 80056a8:	9a06      	ldr	r2, [sp, #24]
 80056aa:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 80056ae:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80056b0:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 80056b4:	4498      	add	r8, r3
 80056b6:	441e      	add	r6, r3
 80056b8:	eba9 0903 	sub.w	r9, r9, r3
 80056bc:	d1dc      	bne.n	8005678 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80056be:	9a00      	ldr	r2, [sp, #0]
 80056c0:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 80056c4:	441d      	add	r5, r3
 80056c6:	eba2 0203 	sub.w	r2, r2, r3
 80056ca:	9200      	str	r2, [sp, #0]
 80056cc:	d1bf      	bne.n	800564e <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80056ce:	3701      	adds	r7, #1
 80056d0:	3114      	adds	r1, #20
 80056d2:	e770      	b.n	80055b6 <BSP_I2C4_Init+0x16a>
 80056d4:	58001c00 	.word	0x58001c00
 80056d8:	2400b168 	.word	0x2400b168
 80056dc:	2400bbc0 	.word	0x2400bbc0
 80056e0:	58024400 	.word	0x58024400
 80056e4:	58020c00 	.word	0x58020c00
 80056e8:	3b9aca00 	.word	0x3b9aca00
 80056ec:	2400b1bc 	.word	0x2400b1bc
 80056f0:	2400b1c0 	.word	0x2400b1c0

080056f4 <BSP_I2C4_WriteReg>:
{
 80056f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80056f6:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80056fa:	9200      	str	r2, [sp, #0]
 80056fc:	460a      	mov	r2, r1
 80056fe:	4601      	mov	r1, r0
 8005700:	4808      	ldr	r0, [pc, #32]	@ (8005724 <BSP_I2C4_WriteReg+0x30>)
 8005702:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005706:	2301      	movs	r3, #1
 8005708:	f001 febe 	bl	8007488 <HAL_I2C_Mem_Write>
 800570c:	b140      	cbz	r0, 8005720 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800570e:	4805      	ldr	r0, [pc, #20]	@ (8005724 <BSP_I2C4_WriteReg+0x30>)
 8005710:	f002 f875 	bl	80077fe <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005714:	2804      	cmp	r0, #4
 8005716:	bf14      	ite	ne
 8005718:	f06f 0003 	mvnne.w	r0, #3
 800571c:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8005720:	b004      	add	sp, #16
 8005722:	bd10      	pop	{r4, pc}
 8005724:	2400b168 	.word	0x2400b168

08005728 <BSP_I2C4_ReadReg>:
{
 8005728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800572a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800572e:	9200      	str	r2, [sp, #0]
 8005730:	460a      	mov	r2, r1
 8005732:	4601      	mov	r1, r0
 8005734:	4808      	ldr	r0, [pc, #32]	@ (8005758 <BSP_I2C4_ReadReg+0x30>)
 8005736:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800573a:	2301      	movs	r3, #1
 800573c:	f001 ff7e 	bl	800763c <HAL_I2C_Mem_Read>
 8005740:	b140      	cbz	r0, 8005754 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005742:	4805      	ldr	r0, [pc, #20]	@ (8005758 <BSP_I2C4_ReadReg+0x30>)
 8005744:	f002 f85b 	bl	80077fe <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005748:	2804      	cmp	r0, #4
 800574a:	bf14      	ite	ne
 800574c:	f06f 0003 	mvnne.w	r0, #3
 8005750:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8005754:	b004      	add	sp, #16
 8005756:	bd10      	pop	{r4, pc}
 8005758:	2400b168 	.word	0x2400b168

0800575c <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 800575c:	f000 bd08 	b.w	8006170 <HAL_GetTick>

08005760 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8005760:	4a09      	ldr	r2, [pc, #36]	@ (8005788 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005762:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 8005766:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8005768:	684a      	ldr	r2, [r1, #4]
 800576a:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 800576c:	2201      	movs	r2, #1
 800576e:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8005770:	688a      	ldr	r2, [r1, #8]
 8005772:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8005774:	680a      	ldr	r2, [r1, #0]
 8005776:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005778:	2200      	movs	r2, #0
 800577a:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800577e:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8005780:	68ca      	ldr	r2, [r1, #12]
 8005782:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8005784:	f003 bc78 	b.w	8009078 <HAL_QSPI_Init>
 8005788:	52005000 	.word	0x52005000

0800578c <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800578c:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800578e:	b988      	cbnz	r0, 80057b4 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005790:	4c0a      	ldr	r4, [pc, #40]	@ (80057bc <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8005792:	480b      	ldr	r0, [pc, #44]	@ (80057c0 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005794:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005796:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005798:	b94b      	cbnz	r3, 80057ae <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800579a:	f7ff f9bc 	bl	8004b16 <MT25TL01G_EnableMemoryMappedModeSTR>
 800579e:	b110      	cbz	r0, 80057a6 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80057a0:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 80057a4:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80057a6:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 80057a8:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80057aa:	7023      	strb	r3, [r4, #0]
 80057ac:	e7fa      	b.n	80057a4 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80057ae:	f7ff f968 	bl	8004a82 <MT25TL01G_EnableMemoryMappedModeDTR>
 80057b2:	e7f4      	b.n	800579e <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 80057b4:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80057b8:	e7f4      	b.n	80057a4 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 80057ba:	bf00      	nop
 80057bc:	2400bbc4 	.word	0x2400bbc4
 80057c0:	240001c4 	.word	0x240001c4

080057c4 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	460c      	mov	r4, r1
 80057c8:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80057ca:	bb30      	cbnz	r0, 800581a <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 80057cc:	4d17      	ldr	r5, [pc, #92]	@ (800582c <BSP_QSPI_ConfigFlash+0x68>)
 80057ce:	782b      	ldrb	r3, [r5, #0]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d025      	beq.n	8005820 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80057d4:	fab2 f382 	clz	r3, r2
 80057d8:	4e15      	ldr	r6, [pc, #84]	@ (8005830 <BSP_QSPI_ConfigFlash+0x6c>)
 80057da:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80057dc:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80057e2:	f003 fc49 	bl	8009078 <HAL_QSPI_Init>
 80057e6:	b9f0      	cbnz	r0, 8005826 <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 80057e8:	786b      	ldrb	r3, [r5, #1]
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d10f      	bne.n	800580e <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 80057ee:	2c03      	cmp	r4, #3
 80057f0:	d105      	bne.n	80057fe <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80057f2:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80057f4:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 80057f6:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80057f8:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80057fa:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 80057fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 80057fe:	4630      	mov	r0, r6
 8005800:	f7ff f923 	bl	8004a4a <MT25TL01G_ExitQPIMode>
 8005804:	2800      	cmp	r0, #0
 8005806:	d0f4      	beq.n	80057f2 <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005808:	f06f 0004 	mvn.w	r0, #4
 800580c:	e7f6      	b.n	80057fc <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 800580e:	2c03      	cmp	r4, #3
 8005810:	d1ef      	bne.n	80057f2 <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8005812:	4630      	mov	r0, r6
 8005814:	f7ff f8fd 	bl	8004a12 <MT25TL01G_EnterQPIMode>
 8005818:	e7f4      	b.n	8005804 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 800581a:	f06f 0001 	mvn.w	r0, #1
 800581e:	e7ed      	b.n	80057fc <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8005820:	f06f 0019 	mvn.w	r0, #25
 8005824:	e7ea      	b.n	80057fc <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005826:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800582a:	e7e7      	b.n	80057fc <BSP_QSPI_ConfigFlash+0x38>
 800582c:	2400bbc4 	.word	0x2400bbc4
 8005830:	240001c4 	.word	0x240001c4

08005834 <BSP_QSPI_Init>:
{
 8005834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005838:	460c      	mov	r4, r1
 800583a:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800583c:	2800      	cmp	r0, #0
 800583e:	f040 81ac 	bne.w	8005b9a <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8005842:	4d03      	ldr	r5, [pc, #12]	@ (8005850 <BSP_QSPI_Init+0x1c>)
 8005844:	782f      	ldrb	r7, [r5, #0]
 8005846:	b12f      	cbz	r7, 8005854 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8005848:	2000      	movs	r0, #0
}
 800584a:	b024      	add	sp, #144	@ 0x90
 800584c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005850:	2400bbc4 	.word	0x2400bbc4
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8005854:	4bc3      	ldr	r3, [pc, #780]	@ (8005b64 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005856:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800585a:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800585c:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 800585e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005862:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005866:	48c0      	ldr	r0, [pc, #768]	@ (8005b68 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005868:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 800586c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005870:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005874:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005878:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800587c:	9201      	str	r2, [sp, #4]
 800587e:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8005880:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005882:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005886:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8005888:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800588a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800588e:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8005890:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005894:	f042 0202 	orr.w	r2, r2, #2
 8005898:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800589c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058a0:	f002 0202 	and.w	r2, r2, #2
 80058a4:	9202      	str	r2, [sp, #8]
 80058a6:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 80058a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058b0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80058b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058b8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80058bc:	9203      	str	r2, [sp, #12]
 80058be:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 80058c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058c4:	f042 0208 	orr.w	r2, r2, #8
 80058c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80058cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058d0:	f002 0208 	and.w	r2, r2, #8
 80058d4:	9204      	str	r2, [sp, #16]
 80058d6:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 80058d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058dc:	f042 0220 	orr.w	r2, r2, #32
 80058e0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80058e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058e8:	f002 0220 	and.w	r2, r2, #32
 80058ec:	9205      	str	r2, [sp, #20]
 80058ee:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 80058f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80058f4:	f042 0220 	orr.w	r2, r2, #32
 80058f8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80058fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005900:	f002 0220 	and.w	r2, r2, #32
 8005904:	9206      	str	r2, [sp, #24]
 8005906:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8005908:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800590c:	f042 0220 	orr.w	r2, r2, #32
 8005910:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005914:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005918:	f002 0220 	and.w	r2, r2, #32
 800591c:	9207      	str	r2, [sp, #28]
 800591e:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8005920:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005928:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800592c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005930:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005934:	9208      	str	r2, [sp, #32]
 8005936:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8005938:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800593c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005940:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005944:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005948:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800594c:	9209      	str	r2, [sp, #36]	@ 0x24
 800594e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8005950:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005954:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005958:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800595c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005960:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005964:	920a      	str	r2, [sp, #40]	@ 0x28
 8005966:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8005968:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800596c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005970:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005974:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005978:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800597c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800597e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8005980:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005984:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005988:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800598c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005994:	930c      	str	r3, [sp, #48]	@ 0x30
 8005996:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005998:	2302      	movs	r3, #2
 800599a:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800599e:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80059a0:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80059a2:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80059a6:	f001 fa29 	bl	8006dfc <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80059aa:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80059ac:	a916      	add	r1, sp, #88	@ 0x58
 80059ae:	486f      	ldr	r0, [pc, #444]	@ (8005b6c <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80059b0:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80059b2:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80059b6:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80059ba:	f001 fa1f 	bl	8006dfc <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80059be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80059c2:	a916      	add	r1, sp, #88	@ 0x58
 80059c4:	486a      	ldr	r0, [pc, #424]	@ (8005b70 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80059c6:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80059c8:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80059ca:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80059cc:	f001 fa16 	bl	8006dfc <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80059d0:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80059d2:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80059d6:	4867      	ldr	r0, [pc, #412]	@ (8005b74 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80059d8:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80059dc:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80059de:	f001 fa0d 	bl	8006dfc <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80059e2:	a916      	add	r1, sp, #88	@ 0x58
 80059e4:	4864      	ldr	r0, [pc, #400]	@ (8005b78 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80059e6:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80059ea:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80059ee:	f001 fa05 	bl	8006dfc <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80059f2:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80059f4:	a916      	add	r1, sp, #88	@ 0x58
 80059f6:	485f      	ldr	r0, [pc, #380]	@ (8005b74 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80059f8:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80059fa:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80059fc:	f001 f9fe 	bl	8006dfc <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005a00:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005a02:	a916      	add	r1, sp, #88	@ 0x58
 8005a04:	485c      	ldr	r0, [pc, #368]	@ (8005b78 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005a06:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005a08:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005a0a:	f001 f9f7 	bl	8006dfc <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005a0e:	a916      	add	r1, sp, #88	@ 0x58
 8005a10:	4856      	ldr	r0, [pc, #344]	@ (8005b6c <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8005a12:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005a16:	f001 f9f1 	bl	8006dfc <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005a1a:	a916      	add	r1, sp, #88	@ 0x58
 8005a1c:	4856      	ldr	r0, [pc, #344]	@ (8005b78 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8005a1e:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005a22:	f001 f9eb 	bl	8006dfc <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005a26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005a2a:	a916      	add	r1, sp, #88	@ 0x58
 8005a2c:	484f      	ldr	r0, [pc, #316]	@ (8005b6c <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005a2e:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005a30:	f001 f9e4 	bl	8006dfc <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8005a34:	463a      	mov	r2, r7
 8005a36:	210f      	movs	r1, #15
 8005a38:	205c      	movs	r0, #92	@ 0x5c
 8005a3a:	f000 fbc9 	bl	80061d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005a3e:	205c      	movs	r0, #92	@ 0x5c
 8005a40:	f000 fbf8 	bl	8006234 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8005a44:	a811      	add	r0, sp, #68	@ 0x44
 8005a46:	f7fe ff38 	bl	80048ba <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005a4a:	7863      	ldrb	r3, [r4, #1]
 8005a4c:	4a4b      	ldr	r2, [pc, #300]	@ (8005b7c <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8005a4e:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005a52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a56:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a58:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005a5a:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005a5e:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8005a62:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005a66:	a90d      	add	r1, sp, #52	@ 0x34
 8005a68:	4845      	ldr	r0, [pc, #276]	@ (8005b80 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005a6a:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005a6c:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005a6e:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005a70:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005a72:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005a74:	f7ff fe74 	bl	8005760 <MX_QSPI_Init>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	f040 8091 	bne.w	8005ba0 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005a7e:	2103      	movs	r1, #3
 8005a80:	483f      	ldr	r0, [pc, #252]	@ (8005b80 <BSP_QSPI_Init+0x34c>)
 8005a82:	f7ff f88e 	bl	8004ba2 <MT25TL01G_ResetEnable>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	f040 8084 	bne.w	8005b94 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005a8c:	2103      	movs	r1, #3
 8005a8e:	483c      	ldr	r0, [pc, #240]	@ (8005b80 <BSP_QSPI_Init+0x34c>)
 8005a90:	f7ff f8a8 	bl	8004be4 <MT25TL01G_ResetMemory>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d17d      	bne.n	8005b94 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005a98:	7869      	ldrb	r1, [r5, #1]
 8005a9a:	4839      	ldr	r0, [pc, #228]	@ (8005b80 <BSP_QSPI_Init+0x34c>)
 8005a9c:	f7fe ff1e 	bl	80048dc <MT25TL01G_AutoPollingMemReady>
 8005aa0:	4601      	mov	r1, r0
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d176      	bne.n	8005b94 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005aa6:	4836      	ldr	r0, [pc, #216]	@ (8005b80 <BSP_QSPI_Init+0x34c>)
 8005aa8:	f7ff f87b 	bl	8004ba2 <MT25TL01G_ResetEnable>
 8005aac:	4601      	mov	r1, r0
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	d170      	bne.n	8005b94 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005ab2:	4833      	ldr	r0, [pc, #204]	@ (8005b80 <BSP_QSPI_Init+0x34c>)
 8005ab4:	f7ff f896 	bl	8004be4 <MT25TL01G_ResetMemory>
 8005ab8:	4601      	mov	r1, r0
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d16a      	bne.n	8005b94 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005abe:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8005ac0:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005ac2:	482f      	ldr	r0, [pc, #188]	@ (8005b80 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005ac4:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005ac6:	f7fe ff09 	bl	80048dc <MT25TL01G_AutoPollingMemReady>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d162      	bne.n	8005b94 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005ace:	7869      	ldrb	r1, [r5, #1]
 8005ad0:	482b      	ldr	r0, [pc, #172]	@ (8005b80 <BSP_QSPI_Init+0x34c>)
 8005ad2:	f7fe ff72 	bl	80049ba <MT25TL01G_Enter4BytesAddressMode>
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	d15c      	bne.n	8005b94 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005ada:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8005ade:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8005ae2:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ae4:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005ae8:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005aea:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005aec:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005aee:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005af0:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8005af4:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 8005af6:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005af8:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005afc:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005b00:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b04:	481e      	ldr	r0, [pc, #120]	@ (8005b80 <BSP_QSPI_Init+0x34c>)
 8005b06:	f003 fb03 	bl	8009110 <HAL_QSPI_Command>
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	d142      	bne.n	8005b94 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b12:	f10d 0102 	add.w	r1, sp, #2
 8005b16:	481a      	ldr	r0, [pc, #104]	@ (8005b80 <BSP_QSPI_Init+0x34c>)
 8005b18:	f003 fb9b 	bl	8009252 <HAL_QSPI_Receive>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d139      	bne.n	8005b94 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005b20:	7869      	ldrb	r1, [r5, #1]
 8005b22:	4817      	ldr	r0, [pc, #92]	@ (8005b80 <BSP_QSPI_Init+0x34c>)
 8005b24:	f7fe ff05 	bl	8004932 <MT25TL01G_WriteEnable>
 8005b28:	bba0      	cbnz	r0, 8005b94 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005b2a:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b30:	a916      	add	r1, sp, #88	@ 0x58
 8005b32:	4813      	ldr	r0, [pc, #76]	@ (8005b80 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005b34:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8005b36:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005b3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b3e:	051b      	lsls	r3, r3, #20
 8005b40:	0d1b      	lsrs	r3, r3, #20
 8005b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b4a:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b4e:	f003 fadf 	bl	8009110 <HAL_QSPI_Command>
 8005b52:	b9f8      	cbnz	r0, 8005b94 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b58:	f10d 0102 	add.w	r1, sp, #2
 8005b5c:	4808      	ldr	r0, [pc, #32]	@ (8005b80 <BSP_QSPI_Init+0x34c>)
 8005b5e:	f003 fb1c 	bl	800919a <HAL_QSPI_Transmit>
 8005b62:	e00f      	b.n	8005b84 <BSP_QSPI_Init+0x350>
 8005b64:	58024400 	.word	0x58024400
 8005b68:	58020400 	.word	0x58020400
 8005b6c:	58021800 	.word	0x58021800
 8005b70:	58020c00 	.word	0x58020c00
 8005b74:	58021c00 	.word	0x58021c00
 8005b78:	58021400 	.word	0x58021400
 8005b7c:	080237e4 	.word	0x080237e4
 8005b80:	240001c4 	.word	0x240001c4
 8005b84:	b930      	cbnz	r0, 8005b94 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8005b86:	7862      	ldrb	r2, [r4, #1]
 8005b88:	7821      	ldrb	r1, [r4, #0]
 8005b8a:	f7ff fe1b 	bl	80057c4 <BSP_QSPI_ConfigFlash>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	f43f ae5a 	beq.w	8005848 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b94:	f06f 0004 	mvn.w	r0, #4
 8005b98:	e657      	b.n	800584a <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 8005b9a:	f06f 0001 	mvn.w	r0, #1
 8005b9e:	e654      	b.n	800584a <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005ba0:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005ba4:	e651      	b.n	800584a <BSP_QSPI_Init+0x16>
 8005ba6:	bf00      	nop

08005ba8 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8005ba8:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8005baa:	4604      	mov	r4, r0
 8005bac:	b970      	cbnz	r0, 8005bcc <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8005bae:	4b09      	ldr	r3, [pc, #36]	@ (8005bd4 <BSP_SDRAM_DeInit+0x2c>)
 8005bb0:	4809      	ldr	r0, [pc, #36]	@ (8005bd8 <BSP_SDRAM_DeInit+0x30>)
 8005bb2:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8005bb4:	f004 ff98 	bl	800aae8 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8005bb8:	207a      	movs	r0, #122	@ 0x7a
 8005bba:	f000 fb49 	bl	8006250 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8005bbe:	4807      	ldr	r0, [pc, #28]	@ (8005bdc <BSP_SDRAM_DeInit+0x34>)
 8005bc0:	4b07      	ldr	r3, [pc, #28]	@ (8005be0 <BSP_SDRAM_DeInit+0x38>)
 8005bc2:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005bc4:	f002 ffde 	bl	8008b84 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8005bc8:	4620      	mov	r0, r4
}
 8005bca:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005bcc:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005bd0:	e7fb      	b.n	8005bca <BSP_SDRAM_DeInit+0x22>
 8005bd2:	bf00      	nop
 8005bd4:	52004140 	.word	0x52004140
 8005bd8:	2400bcc8 	.word	0x2400bcc8
 8005bdc:	2400bbd0 	.word	0x2400bbd0
 8005be0:	52000040 	.word	0x52000040

08005be4 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005be4:	2201      	movs	r2, #1
 8005be6:	4915      	ldr	r1, [pc, #84]	@ (8005c3c <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005be8:	4b15      	ldr	r3, [pc, #84]	@ (8005c40 <MX_SDRAM_Init+0x5c>)
{
 8005bea:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005bec:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005bf0:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005bf2:	2104      	movs	r1, #4
 8005bf4:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005bf6:	2440      	movs	r4, #64	@ 0x40
{
 8005bf8:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005bfa:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005bfe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8005c02:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005c06:	2200      	movs	r2, #0
 8005c08:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8005c0c:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005c10:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8005c14:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005c16:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005c18:	2207      	movs	r2, #7
 8005c1a:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8005c1c:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005c20:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8005c22:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005c24:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8005c28:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005c2c:	f004 ff34 	bl	800aa98 <HAL_SDRAM_Init>
}
 8005c30:	3800      	subs	r0, #0
 8005c32:	bf18      	it	ne
 8005c34:	2001      	movne	r0, #1
 8005c36:	b008      	add	sp, #32
 8005c38:	bd10      	pop	{r4, pc}
 8005c3a:	bf00      	nop
 8005c3c:	52004140 	.word	0x52004140
 8005c40:	2400bcc8 	.word	0x2400bcc8

08005c44 <BSP_SDRAM_Init>:
{
 8005c44:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005c46:	4605      	mov	r5, r0
{
 8005c48:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	f040 80dd 	bne.w	8005e0a <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8005c50:	4b71      	ldr	r3, [pc, #452]	@ (8005e18 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005c52:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005c54:	a909      	add	r1, sp, #36	@ 0x24
 8005c56:	4871      	ldr	r0, [pc, #452]	@ (8005e1c <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005c58:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005c5c:	4c70      	ldr	r4, [pc, #448]	@ (8005e20 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005c5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005c62:	4e70      	ldr	r6, [pc, #448]	@ (8005e24 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005c64:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005c68:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005c6c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005c70:	9201      	str	r2, [sp, #4]
 8005c72:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8005c74:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005c78:	f042 0201 	orr.w	r2, r2, #1
 8005c7c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005c80:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005c84:	f002 0201 	and.w	r2, r2, #1
 8005c88:	9202      	str	r2, [sp, #8]
 8005c8a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c90:	f042 0208 	orr.w	r2, r2, #8
 8005c94:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005c98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005c9c:	f002 0208 	and.w	r2, r2, #8
 8005ca0:	9203      	str	r2, [sp, #12]
 8005ca2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005ca4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ca8:	f042 0210 	orr.w	r2, r2, #16
 8005cac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005cb0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cb4:	f002 0210 	and.w	r2, r2, #16
 8005cb8:	9204      	str	r2, [sp, #16]
 8005cba:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005cbc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cc0:	f042 0220 	orr.w	r2, r2, #32
 8005cc4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005cc8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ccc:	f002 0220 	and.w	r2, r2, #32
 8005cd0:	9205      	str	r2, [sp, #20]
 8005cd2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005cd4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cdc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005ce0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ce4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005ce8:	9206      	str	r2, [sp, #24]
 8005cea:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005cec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cf0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005cf4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005cf8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005cfc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005d00:	9207      	str	r2, [sp, #28]
 8005d02:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005d04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d0c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005d10:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d1a:	9308      	str	r3, [sp, #32]
 8005d1c:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005d24:	230c      	movs	r3, #12
 8005d26:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005d2a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005d2e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005d30:	f001 f864 	bl	8006dfc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005d34:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005d38:	a909      	add	r1, sp, #36	@ 0x24
 8005d3a:	483b      	ldr	r0, [pc, #236]	@ (8005e28 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005d3c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005d3e:	f001 f85d 	bl	8006dfc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005d42:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005d46:	a909      	add	r1, sp, #36	@ 0x24
 8005d48:	4838      	ldr	r0, [pc, #224]	@ (8005e2c <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005d4a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005d4c:	f001 f856 	bl	8006dfc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005d50:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005d54:	a909      	add	r1, sp, #36	@ 0x24
 8005d56:	4836      	ldr	r0, [pc, #216]	@ (8005e30 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005d58:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005d5a:	f001 f84f 	bl	8006dfc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005d5e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005d62:	a909      	add	r1, sp, #36	@ 0x24
 8005d64:	4833      	ldr	r0, [pc, #204]	@ (8005e34 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005d66:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005d68:	f001 f848 	bl	8006dfc <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005d6c:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005d70:	a909      	add	r1, sp, #36	@ 0x24
 8005d72:	4831      	ldr	r0, [pc, #196]	@ (8005e38 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005d74:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005d76:	f001 f841 	bl	8006dfc <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005d7a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005d7e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005d82:	f240 2002 	movw	r0, #514	@ 0x202
 8005d86:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005d8a:	6334      	str	r4, [r6, #48]	@ 0x30
 8005d8c:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005d8e:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005d92:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005d96:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005d98:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005d9a:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8005d9c:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8005d9e:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005da2:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005da6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005daa:	4b24      	ldr	r3, [pc, #144]	@ (8005e3c <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005dac:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005dae:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8005db0:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8005db4:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005db8:	f002 fee4 	bl	8008b84 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f002 fe72 	bl	8008aa6 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8005dc2:	462a      	mov	r2, r5
 8005dc4:	210f      	movs	r1, #15
 8005dc6:	207a      	movs	r0, #122	@ 0x7a
 8005dc8:	f000 fa02 	bl	80061d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8005dcc:	207a      	movs	r0, #122	@ 0x7a
 8005dce:	f000 fa31 	bl	8006234 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	f7ff ff06 	bl	8005be4 <MX_SDRAM_Init>
 8005dd8:	b9d0      	cbnz	r0, 8005e10 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005dda:	4919      	ldr	r1, [pc, #100]	@ (8005e40 <BSP_SDRAM_Init+0x1fc>)
 8005ddc:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8005dde:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8005de2:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8005de6:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8005de8:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005dec:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8005dee:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005df2:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005df6:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005df8:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005dfa:	f7fe fd31 	bl	8004860 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	bf18      	it	ne
 8005e02:	f06f 0004 	mvnne.w	r0, #4
}
 8005e06:	b00f      	add	sp, #60	@ 0x3c
 8005e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005e0a:	f06f 0001 	mvn.w	r0, #1
 8005e0e:	e7fa      	b.n	8005e06 <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8005e10:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005e14:	e7f7      	b.n	8005e06 <BSP_SDRAM_Init+0x1c2>
 8005e16:	bf00      	nop
 8005e18:	58024400 	.word	0x58024400
 8005e1c:	58020c00 	.word	0x58020c00
 8005e20:	2400bc3c 	.word	0x2400bc3c
 8005e24:	2400bcc8 	.word	0x2400bcc8
 8005e28:	58021000 	.word	0x58021000
 8005e2c:	58021400 	.word	0x58021400
 8005e30:	58021800 	.word	0x58021800
 8005e34:	58021c00 	.word	0x58021c00
 8005e38:	58022000 	.word	0x58022000
 8005e3c:	52000040 	.word	0x52000040
 8005e40:	2400bca8 	.word	0x2400bca8

08005e44 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8005e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	460c      	mov	r4, r1
 8005e4a:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d15c      	bne.n	8005f0c <BSP_TS_Init+0xc8>
 8005e52:	680b      	ldr	r3, [r1, #0]
 8005e54:	1e5a      	subs	r2, r3, #1
 8005e56:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8005e5a:	d257      	bcs.n	8005f0c <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005e5c:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005e5e:	1e51      	subs	r1, r2, #1
 8005e60:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8005e64:	d252      	bcs.n	8005f0c <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8005e66:	4293      	cmp	r3, r2
 8005e68:	bf28      	it	cs
 8005e6a:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005e6c:	68e2      	ldr	r2, [r4, #12]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d84c      	bhi.n	8005f0c <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005e72:	2370      	movs	r3, #112	@ 0x70
 8005e74:	2254      	movs	r2, #84	@ 0x54
 8005e76:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005e7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005f50 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005e7e:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8005e82:	4b2e      	ldr	r3, [pc, #184]	@ (8005f3c <BSP_TS_Init+0xf8>)
 8005e84:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8005e86:	4b2e      	ldr	r3, [pc, #184]	@ (8005f40 <BSP_TS_Init+0xfc>)
 8005e88:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8005e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8005f44 <BSP_TS_Init+0x100>)
 8005e8c:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8005e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8005f48 <BSP_TS_Init+0x104>)
 8005e90:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8005e92:	4b2e      	ldr	r3, [pc, #184]	@ (8005f4c <BSP_TS_Init+0x108>)
 8005e94:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005e96:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005e9a:	a906      	add	r1, sp, #24
 8005e9c:	482c      	ldr	r0, [pc, #176]	@ (8005f50 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005e9e:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005ea2:	f7fe fbe3 	bl	800466c <FT6X06_RegisterBusIO>
 8005ea6:	b9c0      	cbnz	r0, 8005eda <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8005ea8:	4669      	mov	r1, sp
 8005eaa:	4829      	ldr	r0, [pc, #164]	@ (8005f50 <BSP_TS_Init+0x10c>)
 8005eac:	f7fe fb28 	bl	8004500 <FT6X06_ReadID>
 8005eb0:	b998      	cbnz	r0, 8005eda <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 8005eb2:	9b00      	ldr	r3, [sp, #0]
 8005eb4:	2b11      	cmp	r3, #17
 8005eb6:	d110      	bne.n	8005eda <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8005eb8:	a903      	add	r1, sp, #12
 8005eba:	4825      	ldr	r0, [pc, #148]	@ (8005f50 <BSP_TS_Init+0x10c>)
 8005ebc:	f7fe fad4 	bl	8004468 <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 8005ec0:	4f24      	ldr	r7, [pc, #144]	@ (8005f54 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8005ec2:	4b25      	ldr	r3, [pc, #148]	@ (8005f58 <BSP_TS_Init+0x114>)
 8005ec4:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8005f60 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8005ec8:	4821      	ldr	r0, [pc, #132]	@ (8005f50 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8005eca:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 8005ece:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4798      	blx	r3
 8005ed6:	4605      	mov	r5, r0
 8005ed8:	b1d8      	cbz	r0, 8005f12 <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 8005eda:	b116      	cbz	r6, 8005ee2 <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 8005edc:	f04f 35ff 	mov.w	r5, #4294967295
 8005ee0:	e010      	b.n	8005f04 <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 8005ee2:	2601      	movs	r6, #1
 8005ee4:	e7d7      	b.n	8005e96 <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005ee6:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005ee8:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005eea:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005eec:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005eee:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005ef0:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005ef2:	68e3      	ldr	r3, [r4, #12]
 8005ef4:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005ef6:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005ef8:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005efa:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005efc:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005efe:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005f00:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8005f04:	4628      	mov	r0, r5
 8005f06:	b00c      	add	sp, #48	@ 0x30
 8005f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005f0c:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8005f10:	e7f8      	b.n	8005f04 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005f12:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005f14:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005f16:	4e11      	ldr	r6, [pc, #68]	@ (8005f5c <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005f18:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005f1a:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8005f1c:	6863      	ldr	r3, [r4, #4]
 8005f1e:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8005f20:	68a3      	ldr	r3, [r4, #8]
 8005f22:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8005f24:	68e3      	ldr	r3, [r4, #12]
 8005f26:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005f28:	f8d8 3000 	ldr.w	r3, [r8]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	4798      	blx	r3
 8005f30:	2800      	cmp	r0, #0
 8005f32:	dad8      	bge.n	8005ee6 <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f34:	f06f 0504 	mvn.w	r5, #4
 8005f38:	e7e4      	b.n	8005f04 <BSP_TS_Init+0xc0>
 8005f3a:	bf00      	nop
 8005f3c:	0800544d 	.word	0x0800544d
 8005f40:	080053b9 	.word	0x080053b9
 8005f44:	08005729 	.word	0x08005729
 8005f48:	080056f5 	.word	0x080056f5
 8005f4c:	0800575d 	.word	0x0800575d
 8005f50:	2400bcfc 	.word	0x2400bcfc
 8005f54:	2400bd24 	.word	0x2400bd24
 8005f58:	24000038 	.word	0x24000038
 8005f5c:	2400bd28 	.word	0x2400bd28
 8005f60:	2400bd50 	.word	0x2400bd50

08005f64 <BSP_TS_GetState>:
{
 8005f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f66:	460c      	mov	r4, r1
 8005f68:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d14d      	bne.n	800600a <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8005f6e:	4b28      	ldr	r3, [pc, #160]	@ (8006010 <BSP_TS_GetState+0xac>)
 8005f70:	a901      	add	r1, sp, #4
 8005f72:	4a28      	ldr	r2, [pc, #160]	@ (8006014 <BSP_TS_GetState+0xb0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6810      	ldr	r0, [r2, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	4798      	blx	r3
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	db41      	blt.n	8006004 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005f80:	4925      	ldr	r1, [pc, #148]	@ (8006018 <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 8005f82:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005f84:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8005f86:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8005f88:	2e00      	cmp	r6, #0
 8005f8a:	d037      	beq.n	8005ffc <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005f8c:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8005f8e:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005f92:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 8005f96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005f9a:	bf1e      	ittt	ne
 8005f9c:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 8005f9e:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 8005fa0:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8005fa2:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8005fa6:	bf1c      	itt	ne
 8005fa8:	f10e 3cff 	addne.w	ip, lr, #4294967295
 8005fac:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8005fb0:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8005fb4:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8005fb6:	bf44      	itt	mi
 8005fb8:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 8005fbc:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005fbe:	680f      	ldr	r7, [r1, #0]
 8005fc0:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005fc2:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8005fc4:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005fc6:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8005fc8:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005fca:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005fce:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005fd2:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005fd4:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005fd6:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005fd8:	bf8c      	ite	hi
 8005fda:	eba2 0c05 	subhi.w	ip, r2, r5
 8005fde:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8005fe2:	4283      	cmp	r3, r0
 8005fe4:	bf8c      	ite	hi
 8005fe6:	1a1e      	subhi	r6, r3, r0
 8005fe8:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8005fea:	4567      	cmp	r7, ip
 8005fec:	d301      	bcc.n	8005ff2 <BSP_TS_GetState+0x8e>
 8005fee:	42b7      	cmp	r7, r6
 8005ff0:	d205      	bcs.n	8005ffe <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8005ff2:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8005ff4:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8005ff6:	2000      	movs	r0, #0
}
 8005ff8:	b005      	add	sp, #20
 8005ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8005ffc:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8005ffe:	e9c4 5001 	strd	r5, r0, [r4, #4]
 8006002:	e7f8      	b.n	8005ff6 <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006004:	f06f 0004 	mvn.w	r0, #4
 8006008:	e7f6      	b.n	8005ff8 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 800600a:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800600e:	e7f3      	b.n	8005ff8 <BSP_TS_GetState+0x94>
 8006010:	2400bd50 	.word	0x2400bd50
 8006014:	2400bd24 	.word	0x2400bd24
 8006018:	2400bd28 	.word	0x2400bd28

0800601c <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800601c:	4b2d      	ldr	r3, [pc, #180]	@ (80060d4 <SystemInit+0xb8>)
 800601e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006022:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8006026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	f042 0210 	orr.w	r2, r2, #16
 8006030:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006032:	4a29      	ldr	r2, [pc, #164]	@ (80060d8 <SystemInit+0xbc>)
 8006034:	6813      	ldr	r3, [r2, #0]
 8006036:	f003 030f 	and.w	r3, r3, #15
 800603a:	2b06      	cmp	r3, #6
 800603c:	d805      	bhi.n	800604a <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800603e:	6813      	ldr	r3, [r2, #0]
 8006040:	f023 030f 	bic.w	r3, r3, #15
 8006044:	f043 0307 	orr.w	r3, r3, #7
 8006048:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800604a:	4b24      	ldr	r3, [pc, #144]	@ (80060dc <SystemInit+0xc0>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	f042 0201 	orr.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006054:	2200      	movs	r2, #0
 8006056:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006058:	4a21      	ldr	r2, [pc, #132]	@ (80060e0 <SystemInit+0xc4>)
 800605a:	6819      	ldr	r1, [r3, #0]
 800605c:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800605e:	491e      	ldr	r1, [pc, #120]	@ (80060d8 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8006060:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006062:	680a      	ldr	r2, [r1, #0]
 8006064:	0712      	lsls	r2, r2, #28
 8006066:	d505      	bpl.n	8006074 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006068:	680a      	ldr	r2, [r1, #0]
 800606a:	f022 020f 	bic.w	r2, r2, #15
 800606e:	f042 0207 	orr.w	r2, r2, #7
 8006072:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006074:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006076:	491b      	ldr	r1, [pc, #108]	@ (80060e4 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8006078:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800607a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800607c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800607e:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006080:	4919      	ldr	r1, [pc, #100]	@ (80060e8 <SystemInit+0xcc>)
 8006082:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006084:	4919      	ldr	r1, [pc, #100]	@ (80060ec <SystemInit+0xd0>)
 8006086:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006088:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800608a:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800608c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800608e:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006090:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006092:	6819      	ldr	r1, [r3, #0]
 8006094:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8006098:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800609a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800609c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060a0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 80060a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80060ac:	4b10      	ldr	r3, [pc, #64]	@ (80060f0 <SystemInit+0xd4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	0c1b      	lsrs	r3, r3, #16
 80060b2:	041b      	lsls	r3, r3, #16
 80060b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060b8:	d203      	bcs.n	80060c2 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80060ba:	4b0e      	ldr	r3, [pc, #56]	@ (80060f4 <SystemInit+0xd8>)
 80060bc:	2201      	movs	r2, #1
 80060be:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80060c2:	4b0d      	ldr	r3, [pc, #52]	@ (80060f8 <SystemInit+0xdc>)
 80060c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80060c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80060ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80060ce:	4b01      	ldr	r3, [pc, #4]	@ (80060d4 <SystemInit+0xb8>)
 80060d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80060d2:	4770      	bx	lr
 80060d4:	e000ed00 	.word	0xe000ed00
 80060d8:	52002000 	.word	0x52002000
 80060dc:	58024400 	.word	0x58024400
 80060e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80060e4:	02020200 	.word	0x02020200
 80060e8:	01ff0000 	.word	0x01ff0000
 80060ec:	01010280 	.word	0x01010280
 80060f0:	5c001000 	.word	0x5c001000
 80060f4:	51008000 	.word	0x51008000
 80060f8:	52004000 	.word	0x52004000

080060fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060fc:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060fe:	2003      	movs	r0, #3
 8006100:	f000 f854 	bl	80061ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006104:	f003 fc92 	bl	8009a2c <HAL_RCC_GetSysClockFreq>
 8006108:	490f      	ldr	r1, [pc, #60]	@ (8006148 <HAL_Init+0x4c>)
 800610a:	4a10      	ldr	r2, [pc, #64]	@ (800614c <HAL_Init+0x50>)
 800610c:	698b      	ldr	r3, [r1, #24]
 800610e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006112:	5cd3      	ldrb	r3, [r2, r3]
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800611a:	698b      	ldr	r3, [r1, #24]
 800611c:	f003 030f 	and.w	r3, r3, #15
 8006120:	5cd3      	ldrb	r3, [r2, r3]
 8006122:	4a0b      	ldr	r2, [pc, #44]	@ (8006150 <HAL_Init+0x54>)
 8006124:	f003 031f 	and.w	r3, r3, #31
 8006128:	fa20 f303 	lsr.w	r3, r0, r3
 800612c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800612e:	4b09      	ldr	r3, [pc, #36]	@ (8006154 <HAL_Init+0x58>)
 8006130:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006132:	2000      	movs	r0, #0
 8006134:	f7fb fa18 	bl	8001568 <HAL_InitTick>
 8006138:	4604      	mov	r4, r0
 800613a:	b918      	cbnz	r0, 8006144 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800613c:	f7fa ff04 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006140:	4620      	mov	r0, r4
 8006142:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006144:	2401      	movs	r4, #1
 8006146:	e7fb      	b.n	8006140 <HAL_Init+0x44>
 8006148:	58024400 	.word	0x58024400
 800614c:	080237ec 	.word	0x080237ec
 8006150:	24000068 	.word	0x24000068
 8006154:	2400006c 	.word	0x2400006c

08006158 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006158:	4a03      	ldr	r2, [pc, #12]	@ (8006168 <HAL_IncTick+0x10>)
 800615a:	4b04      	ldr	r3, [pc, #16]	@ (800616c <HAL_IncTick+0x14>)
 800615c:	6811      	ldr	r1, [r2, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	440b      	add	r3, r1
 8006162:	6013      	str	r3, [r2, #0]
}
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	2400bd54 	.word	0x2400bd54
 800616c:	24000070 	.word	0x24000070

08006170 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006170:	4b01      	ldr	r3, [pc, #4]	@ (8006178 <HAL_GetTick+0x8>)
 8006172:	6818      	ldr	r0, [r3, #0]
}
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	2400bd54 	.word	0x2400bd54

0800617c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006180:	f7ff fff6 	bl	8006170 <HAL_GetTick>
 8006184:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006186:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006188:	bf1e      	ittt	ne
 800618a:	4b04      	ldrne	r3, [pc, #16]	@ (800619c <HAL_Delay+0x20>)
 800618c:	781b      	ldrbne	r3, [r3, #0]
 800618e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006190:	f7ff ffee 	bl	8006170 <HAL_GetTick>
 8006194:	1b43      	subs	r3, r0, r5
 8006196:	42a3      	cmp	r3, r4
 8006198:	d3fa      	bcc.n	8006190 <HAL_Delay+0x14>
  {
  }
}
 800619a:	bd38      	pop	{r3, r4, r5, pc}
 800619c:	24000070 	.word	0x24000070

080061a0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80061a0:	4b01      	ldr	r3, [pc, #4]	@ (80061a8 <HAL_GetREVID+0x8>)
 80061a2:	6818      	ldr	r0, [r3, #0]
}
 80061a4:	0c00      	lsrs	r0, r0, #16
 80061a6:	4770      	bx	lr
 80061a8:	5c001000 	.word	0x5c001000

080061ac <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061ac:	4907      	ldr	r1, [pc, #28]	@ (80061cc <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061ae:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061b0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061b2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80061ba:	0412      	lsls	r2, r2, #16
 80061bc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80061c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80061c8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80061ca:	4770      	bx	lr
 80061cc:	e000ed00 	.word	0xe000ed00

080061d0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061d0:	4b16      	ldr	r3, [pc, #88]	@ (800622c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061d2:	b530      	push	{r4, r5, lr}
 80061d4:	68dc      	ldr	r4, [r3, #12]
 80061d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061da:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061de:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	bf28      	it	cs
 80061e4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061e6:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061e8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061ec:	bf8c      	ite	hi
 80061ee:	3c03      	subhi	r4, #3
 80061f0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061f2:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80061f6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061f8:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061fc:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006200:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006204:	fa03 f304 	lsl.w	r3, r3, r4
 8006208:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800620c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006210:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8006212:	db06      	blt.n	8006222 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006214:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8006218:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800621c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006220:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006222:	f000 000f 	and.w	r0, r0, #15
 8006226:	4a02      	ldr	r2, [pc, #8]	@ (8006230 <HAL_NVIC_SetPriority+0x60>)
 8006228:	5413      	strb	r3, [r2, r0]
 800622a:	e7f9      	b.n	8006220 <HAL_NVIC_SetPriority+0x50>
 800622c:	e000ed00 	.word	0xe000ed00
 8006230:	e000ed14 	.word	0xe000ed14

08006234 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006234:	2800      	cmp	r0, #0
 8006236:	db07      	blt.n	8006248 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006238:	2301      	movs	r3, #1
 800623a:	0941      	lsrs	r1, r0, #5
 800623c:	f000 001f 	and.w	r0, r0, #31
 8006240:	4a02      	ldr	r2, [pc, #8]	@ (800624c <HAL_NVIC_EnableIRQ+0x18>)
 8006242:	4083      	lsls	r3, r0
 8006244:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	e000e100 	.word	0xe000e100

08006250 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006250:	2800      	cmp	r0, #0
 8006252:	db0c      	blt.n	800626e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006254:	0943      	lsrs	r3, r0, #5
 8006256:	2201      	movs	r2, #1
 8006258:	f000 001f 	and.w	r0, r0, #31
 800625c:	4904      	ldr	r1, [pc, #16]	@ (8006270 <HAL_NVIC_DisableIRQ+0x20>)
 800625e:	3320      	adds	r3, #32
 8006260:	4082      	lsls	r2, r0
 8006262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006266:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800626a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800626e:	4770      	bx	lr
 8006270:	e000e100 	.word	0xe000e100

08006274 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006274:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006278:	4b04      	ldr	r3, [pc, #16]	@ (800628c <HAL_MPU_Disable+0x18>)
 800627a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800627c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006280:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006282:	2200      	movs	r2, #0
 8006284:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	e000ed00 	.word	0xe000ed00

08006290 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006290:	4b06      	ldr	r3, [pc, #24]	@ (80062ac <HAL_MPU_Enable+0x1c>)
 8006292:	f040 0001 	orr.w	r0, r0, #1
 8006296:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800629a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800629c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80062a0:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80062a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80062a6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80062aa:	4770      	bx	lr
 80062ac:	e000ed00 	.word	0xe000ed00

080062b0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80062b0:	7843      	ldrb	r3, [r0, #1]
 80062b2:	4a14      	ldr	r2, [pc, #80]	@ (8006304 <HAL_MPU_ConfigRegion+0x54>)
{
 80062b4:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80062b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != 0UL)
 80062ba:	7801      	ldrb	r1, [r0, #0]
 80062bc:	b1e9      	cbz	r1, 80062fa <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80062be:	6843      	ldr	r3, [r0, #4]
 80062c0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80062c4:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80062c6:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80062c8:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80062ca:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80062ce:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80062d0:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80062d2:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80062d6:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80062d8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80062dc:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80062de:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80062e2:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80062e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80062e8:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80062ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80062ee:	7a01      	ldrb	r1, [r0, #8]
 80062f0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80062f4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80062f8:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80062fa:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 80062fe:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
}
 8006302:	e7f9      	b.n	80062f8 <HAL_MPU_ConfigRegion+0x48>
 8006304:	e000ed00 	.word	0xe000ed00

08006308 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006308:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800630a:	4604      	mov	r4, r0
 800630c:	b908      	cbnz	r0, 8006312 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800630e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006310:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006312:	7f43      	ldrb	r3, [r0, #29]
 8006314:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006318:	b913      	cbnz	r3, 8006320 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800631a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800631c:	f7fa fe2c 	bl	8000f78 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006320:	2302      	movs	r3, #2
 8006322:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006324:	7923      	ldrb	r3, [r4, #4]
 8006326:	b9e3      	cbnz	r3, 8006362 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	4a13      	ldr	r2, [pc, #76]	@ (8006378 <HAL_CRC_Init+0x70>)
 800632c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	f022 0218 	bic.w	r2, r2, #24
 8006334:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006336:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006338:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800633a:	b9d2      	cbnz	r2, 8006372 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800633c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006340:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8006342:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	6961      	ldr	r1, [r4, #20]
 8006348:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800634c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800634e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006350:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006358:	430a      	orrs	r2, r1
 800635a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800635c:	2301      	movs	r3, #1
 800635e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8006360:	e7d6      	b.n	8006310 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006362:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8006366:	4620      	mov	r0, r4
 8006368:	f000 f808 	bl	800637c <HAL_CRCEx_Polynomial_Set>
 800636c:	2800      	cmp	r0, #0
 800636e:	d0e2      	beq.n	8006336 <HAL_CRC_Init+0x2e>
 8006370:	e7cd      	b.n	800630e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006372:	6922      	ldr	r2, [r4, #16]
 8006374:	e7e4      	b.n	8006340 <HAL_CRC_Init+0x38>
 8006376:	bf00      	nop
 8006378:	04c11db7 	.word	0x04c11db7

0800637c <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800637c:	07cb      	lsls	r3, r1, #31
{
 800637e:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006380:	d50d      	bpl.n	800639e <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006382:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006384:	3b01      	subs	r3, #1
 8006386:	d31d      	bcc.n	80063c4 <HAL_CRCEx_Polynomial_Set+0x48>
 8006388:	fa21 f403 	lsr.w	r4, r1, r3
 800638c:	07e4      	lsls	r4, r4, #31
 800638e:	d5f9      	bpl.n	8006384 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8006390:	2a10      	cmp	r2, #16
 8006392:	d013      	beq.n	80063bc <HAL_CRCEx_Polynomial_Set+0x40>
 8006394:	2a10      	cmp	r2, #16
 8006396:	d804      	bhi.n	80063a2 <HAL_CRCEx_Polynomial_Set+0x26>
 8006398:	b13a      	cbz	r2, 80063aa <HAL_CRCEx_Polynomial_Set+0x2e>
 800639a:	2a08      	cmp	r2, #8
 800639c:	d010      	beq.n	80063c0 <HAL_CRCEx_Polynomial_Set+0x44>
 800639e:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80063a0:	e00b      	b.n	80063ba <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 80063a2:	2a18      	cmp	r2, #24
 80063a4:	d1fb      	bne.n	800639e <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 80063a6:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 80063a8:	d8f9      	bhi.n	800639e <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80063aa:	6800      	ldr	r0, [r0, #0]
 80063ac:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80063ae:	6883      	ldr	r3, [r0, #8]
 80063b0:	f023 0318 	bic.w	r3, r3, #24
 80063b4:	4313      	orrs	r3, r2
 80063b6:	6083      	str	r3, [r0, #8]
 80063b8:	2000      	movs	r0, #0
}
 80063ba:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 80063bc:	2b07      	cmp	r3, #7
 80063be:	e7f3      	b.n	80063a8 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 80063c0:	2b0f      	cmp	r3, #15
 80063c2:	e7f1      	b.n	80063a8 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 80063c4:	2a10      	cmp	r2, #16
 80063c6:	d1e5      	bne.n	8006394 <HAL_CRCEx_Polynomial_Set+0x18>
 80063c8:	e7e9      	b.n	800639e <HAL_CRCEx_Polynomial_Set+0x22>

080063ca <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80063ca:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80063cc:	4604      	mov	r4, r0
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d036      	beq.n	8006440 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80063d2:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 80063d6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80063da:	b91b      	cbnz	r3, 80063e4 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80063dc:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80063e0:	f7fa fde2 	bl	8000fa8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80063e4:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80063e6:	69e0      	ldr	r0, [r4, #28]
 80063e8:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80063ea:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80063f2:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80063f4:	6819      	ldr	r1, [r3, #0]
 80063f6:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80063fa:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80063fe:	430a      	orrs	r2, r1
 8006400:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006402:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006404:	68a2      	ldr	r2, [r4, #8]
 8006406:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 800640a:	4302      	orrs	r2, r0
 800640c:	f021 0101 	bic.w	r1, r1, #1
 8006410:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006412:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006414:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006416:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006418:	0c12      	lsrs	r2, r2, #16
 800641a:	0412      	lsls	r2, r2, #16
 800641c:	430a      	orrs	r2, r1
 800641e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006420:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006422:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8006426:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800642a:	0552      	lsls	r2, r2, #21
 800642c:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006430:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006432:	430a      	orrs	r2, r1
 8006434:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006436:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006438:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800643a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 800643e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006440:	2001      	movs	r0, #1
 8006442:	e7fc      	b.n	800643e <HAL_DMA2D_Init+0x74>

08006444 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8006444:	4770      	bx	lr

08006446 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8006446:	4770      	bx	lr

08006448 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006448:	6803      	ldr	r3, [r0, #0]
{
 800644a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800644c:	685e      	ldr	r6, [r3, #4]
{
 800644e:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006450:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006452:	07f2      	lsls	r2, r6, #31
 8006454:	d514      	bpl.n	8006480 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006456:	05e9      	lsls	r1, r5, #23
 8006458:	d512      	bpl.n	8006480 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006460:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006462:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8006464:	f042 0201 	orr.w	r2, r2, #1
 8006468:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800646a:	2201      	movs	r2, #1
 800646c:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800646e:	2304      	movs	r3, #4
 8006470:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006474:	2300      	movs	r3, #0
 8006476:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800647a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800647c:	b103      	cbz	r3, 8006480 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 800647e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006480:	06b2      	lsls	r2, r6, #26
 8006482:	d516      	bpl.n	80064b2 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006484:	04ab      	lsls	r3, r5, #18
 8006486:	d514      	bpl.n	80064b2 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006490:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006492:	2220      	movs	r2, #32
 8006494:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006496:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006498:	f043 0302 	orr.w	r3, r3, #2
 800649c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800649e:	2304      	movs	r3, #4
 80064a0:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80064a4:	2300      	movs	r3, #0
 80064a6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80064aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80064ac:	b10b      	cbz	r3, 80064b2 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 80064ae:	4620      	mov	r0, r4
 80064b0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80064b2:	0730      	lsls	r0, r6, #28
 80064b4:	d516      	bpl.n	80064e4 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80064b6:	0529      	lsls	r1, r5, #20
 80064b8:	d514      	bpl.n	80064e4 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80064ba:	6823      	ldr	r3, [r4, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80064c4:	2208      	movs	r2, #8
 80064c6:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80064c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064ca:	f043 0304 	orr.w	r3, r3, #4
 80064ce:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80064d0:	2304      	movs	r3, #4
 80064d2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80064d6:	2300      	movs	r3, #0
 80064d8:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80064dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80064de:	b10b      	cbz	r3, 80064e4 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80064e0:	4620      	mov	r0, r4
 80064e2:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80064e4:	0772      	lsls	r2, r6, #29
 80064e6:	d50b      	bpl.n	8006500 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80064e8:	056b      	lsls	r3, r5, #21
 80064ea:	d509      	bpl.n	8006500 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80064ec:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80064ee:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80064f8:	2204      	movs	r2, #4
 80064fa:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80064fc:	f7ff ffa2 	bl	8006444 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006500:	07b0      	lsls	r0, r6, #30
 8006502:	d514      	bpl.n	800652e <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006504:	05a9      	lsls	r1, r5, #22
 8006506:	d512      	bpl.n	800652e <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006510:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006512:	2202      	movs	r2, #2
 8006514:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006516:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006518:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800651a:	2301      	movs	r3, #1
 800651c:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006520:	2300      	movs	r3, #0
 8006522:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8006526:	6a23      	ldr	r3, [r4, #32]
 8006528:	b10b      	cbz	r3, 800652e <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800652a:	4620      	mov	r0, r4
 800652c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800652e:	06f2      	lsls	r2, r6, #27
 8006530:	d513      	bpl.n	800655a <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006532:	04eb      	lsls	r3, r5, #19
 8006534:	d511      	bpl.n	800655a <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006536:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006538:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006540:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006542:	2210      	movs	r2, #16
 8006544:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006546:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006548:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800654a:	2301      	movs	r3, #1
 800654c:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006550:	2300      	movs	r3, #0
 8006552:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006556:	f7ff ff76 	bl	8006446 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800655a:	bd70      	pop	{r4, r5, r6, pc}

0800655c <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 800655c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006560:	4607      	mov	r7, r0
 8006562:	460d      	mov	r5, r1
 8006564:	4614      	mov	r4, r2
 8006566:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006568:	f7ff fe02 	bl	8006170 <HAL_GetTick>
 800656c:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006572:	07d2      	lsls	r2, r2, #31
 8006574:	d50a      	bpl.n	800658c <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006576:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800657a:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 800657c:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800657e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006582:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8006586:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8006588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800658c:	f7ff fdf0 	bl	8006170 <HAL_GetTick>
 8006590:	eba0 0008 	sub.w	r0, r0, r8
 8006594:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006598:	d9e9      	bls.n	800656e <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 800659a:	2003      	movs	r0, #3
 800659c:	e7f4      	b.n	8006588 <DSI_ShortWrite.constprop.0+0x2c>

0800659e <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800659e:	7c03      	ldrb	r3, [r0, #16]
{
 80065a0:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d05b      	beq.n	800665e <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 80065a6:	6803      	ldr	r3, [r0, #0]
 80065a8:	2000      	movs	r0, #0
 80065aa:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80065ae:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80065b2:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 80065b4:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80065b6:	d507      	bpl.n	80065c8 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80065b8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80065bc:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 80065c0:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 80065c4:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80065c8:	0788      	lsls	r0, r1, #30
 80065ca:	d505      	bpl.n	80065d8 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80065cc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80065d0:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 80065d4:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80065d8:	0748      	lsls	r0, r1, #29
 80065da:	d505      	bpl.n	80065e8 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80065dc:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80065e0:	f040 0001 	orr.w	r0, r0, #1
 80065e4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80065e8:	0708      	lsls	r0, r1, #28
 80065ea:	d505      	bpl.n	80065f8 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80065ec:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80065f0:	f040 0002 	orr.w	r0, r0, #2
 80065f4:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80065f8:	06c8      	lsls	r0, r1, #27
 80065fa:	d505      	bpl.n	8006608 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80065fc:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006600:	f040 000c 	orr.w	r0, r0, #12
 8006604:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8006608:	0688      	lsls	r0, r1, #26
 800660a:	d505      	bpl.n	8006618 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800660c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006610:	f040 0010 	orr.w	r0, r0, #16
 8006614:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8006618:	0648      	lsls	r0, r1, #25
 800661a:	d505      	bpl.n	8006628 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800661c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006620:	f040 0020 	orr.w	r0, r0, #32
 8006624:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8006628:	0608      	lsls	r0, r1, #24
 800662a:	d505      	bpl.n	8006638 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800662c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006630:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8006634:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8006638:	05c8      	lsls	r0, r1, #23
 800663a:	d505      	bpl.n	8006648 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800663c:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006640:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8006644:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8006648:	0589      	lsls	r1, r1, #22
 800664a:	d505      	bpl.n	8006658 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800664c:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8006650:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8006654:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8006658:	2000      	movs	r0, #0
 800665a:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 800665c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800665e:	2002      	movs	r0, #2
}
 8006660:	4770      	bx	lr
	...

08006664 <HAL_DSI_Init>:
{
 8006664:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006666:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8006668:	4604      	mov	r4, r0
 800666a:	2800      	cmp	r0, #0
 800666c:	f000 80a9 	beq.w	80067c2 <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006670:	7c43      	ldrb	r3, [r0, #17]
 8006672:	b90b      	cbnz	r3, 8006678 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8006674:	f7fa fcbc 	bl	8000ff0 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006678:	2303      	movs	r3, #3
 800667a:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800667c:	2300      	movs	r3, #0
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006686:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800668a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800668e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006692:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800669a:	f7ff fd69 	bl	8006170 <HAL_GetTick>
 800669e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80066a0:	6822      	ldr	r2, [r4, #0]
 80066a2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 80066a6:	04d9      	lsls	r1, r3, #19
 80066a8:	d57a      	bpl.n	80067a0 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80066aa:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80066ae:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 80066b2:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 80066b6:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80066ba:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80066be:	e9d5 0300 	ldrd	r0, r3, [r5]
 80066c2:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80066c4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80066c8:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80066ca:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 80066ce:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80066d0:	430b      	orrs	r3, r1
 80066d2:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80066d6:	2300      	movs	r3, #0
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80066de:	f043 0301 	orr.w	r3, r3, #1
 80066e2:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 80066e6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	9301      	str	r3, [sp, #4]
 80066f0:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 80066f2:	f7ff fd43 	bl	800617c <HAL_Delay>
  tickstart = HAL_GetTick();
 80066f6:	f7ff fd3b 	bl	8006170 <HAL_GetTick>
 80066fa:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8006702:	05d2      	lsls	r2, r2, #23
 8006704:	d556      	bpl.n	80067b4 <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8006706:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800670a:	f246 10a8 	movw	r0, #25000	@ 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800670e:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8006710:	f042 0206 	orr.w	r2, r2, #6
 8006714:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8006718:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800671c:	f022 0203 	bic.w	r2, r2, #3
 8006720:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006724:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8006728:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800672a:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800672c:	f042 0201 	orr.w	r2, r2, #1
 8006730:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8006734:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006738:	f022 0203 	bic.w	r2, r2, #3
 800673c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006740:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006744:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006746:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006748:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006752:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006758:	491b      	ldr	r1, [pc, #108]	@ (80067c8 <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800675a:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800675c:	686a      	ldr	r2, [r5, #4]
 800675e:	2a01      	cmp	r2, #1
 8006760:	bf38      	it	cc
 8006762:	2201      	movcc	r2, #1
 8006764:	434a      	muls	r2, r1
 8006766:	68a9      	ldr	r1, [r5, #8]
 8006768:	f001 0103 	and.w	r1, r1, #3
 800676c:	408a      	lsls	r2, r1
 800676e:	6829      	ldr	r1, [r5, #0]
 8006770:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 8006772:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006774:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8006778:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800677c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8006780:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8006784:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8006788:	430a      	orrs	r2, r1
 800678a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 800678e:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006792:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 8006796:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8006798:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800679a:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800679c:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 800679e:	e007      	b.n	80067b0 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80067a0:	f7ff fce6 	bl	8006170 <HAL_GetTick>
 80067a4:	1b80      	subs	r0, r0, r6
 80067a6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80067aa:	f67f af79 	bls.w	80066a0 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 80067ae:	2003      	movs	r0, #3
}
 80067b0:	b002      	add	sp, #8
 80067b2:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80067b4:	f7ff fcdc 	bl	8006170 <HAL_GetTick>
 80067b8:	1b80      	subs	r0, r0, r6
 80067ba:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80067be:	d99d      	bls.n	80066fc <HAL_DSI_Init+0x98>
 80067c0:	e7f5      	b.n	80067ae <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 80067c2:	2001      	movs	r0, #1
 80067c4:	e7f4      	b.n	80067b0 <HAL_DSI_Init+0x14c>
 80067c6:	bf00      	nop
 80067c8:	003d0900 	.word	0x003d0900

080067cc <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 80067cc:	4770      	bx	lr

080067ce <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80067ce:	6803      	ldr	r3, [r0, #0]
 80067d0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80067d4:	07d1      	lsls	r1, r2, #31
{
 80067d6:	b510      	push	{r4, lr}
 80067d8:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80067da:	d508      	bpl.n	80067ee <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80067dc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80067e0:	07d2      	lsls	r2, r2, #31
 80067e2:	d504      	bpl.n	80067ee <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80067e4:	2201      	movs	r2, #1
 80067e6:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 80067ea:	f7fb fb35 	bl	8001e58 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80067f4:	0791      	lsls	r1, r2, #30
 80067f6:	d509      	bpl.n	800680c <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80067f8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80067fc:	0792      	lsls	r2, r2, #30
 80067fe:	d505      	bpl.n	800680c <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006800:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006802:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006804:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006808:	f7fb fb58 	bl	8001ebc <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 800680c:	69a3      	ldr	r3, [r4, #24]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d04e      	beq.n	80068b0 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8006812:	6821      	ldr	r1, [r4, #0]
 8006814:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006818:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 800681c:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800681e:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006822:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 8006826:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006828:	b291      	uxth	r1, r2
 800682a:	b119      	cbz	r1, 8006834 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800682c:	6961      	ldr	r1, [r4, #20]
 800682e:	f041 0101 	orr.w	r1, r1, #1
 8006832:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8006834:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 8006838:	d003      	beq.n	8006842 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800683a:	6962      	ldr	r2, [r4, #20]
 800683c:	f042 0202 	orr.w	r2, r2, #2
 8006840:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8006842:	07d8      	lsls	r0, r3, #31
 8006844:	d503      	bpl.n	800684e <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8006846:	6962      	ldr	r2, [r4, #20]
 8006848:	f042 0204 	orr.w	r2, r2, #4
 800684c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800684e:	0799      	lsls	r1, r3, #30
 8006850:	d503      	bpl.n	800685a <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8006852:	6962      	ldr	r2, [r4, #20]
 8006854:	f042 0208 	orr.w	r2, r2, #8
 8006858:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800685a:	f013 0f0c 	tst.w	r3, #12
 800685e:	d003      	beq.n	8006868 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8006860:	6962      	ldr	r2, [r4, #20]
 8006862:	f042 0210 	orr.w	r2, r2, #16
 8006866:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8006868:	06da      	lsls	r2, r3, #27
 800686a:	d503      	bpl.n	8006874 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800686c:	6962      	ldr	r2, [r4, #20]
 800686e:	f042 0220 	orr.w	r2, r2, #32
 8006872:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8006874:	0698      	lsls	r0, r3, #26
 8006876:	d503      	bpl.n	8006880 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006878:	6962      	ldr	r2, [r4, #20]
 800687a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800687e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8006880:	0659      	lsls	r1, r3, #25
 8006882:	d503      	bpl.n	800688c <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8006884:	6962      	ldr	r2, [r4, #20]
 8006886:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800688a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800688c:	061a      	lsls	r2, r3, #24
 800688e:	d503      	bpl.n	8006898 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8006890:	6962      	ldr	r2, [r4, #20]
 8006892:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006896:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8006898:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 800689c:	d003      	beq.n	80068a6 <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800689e:	6963      	ldr	r3, [r4, #20]
 80068a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068a4:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80068a6:	6963      	ldr	r3, [r4, #20]
 80068a8:	b113      	cbz	r3, 80068b0 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 80068aa:	4620      	mov	r0, r4
 80068ac:	f7ff ff8e 	bl	80067cc <HAL_DSI_ErrorCallback>
}
 80068b0:	bd10      	pop	{r4, pc}

080068b2 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80068b2:	7c02      	ldrb	r2, [r0, #16]
{
 80068b4:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80068b6:	2a01      	cmp	r2, #1
 80068b8:	d00a      	beq.n	80068d0 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80068ba:	6802      	ldr	r2, [r0, #0]
 80068bc:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80068be:	f020 0003 	bic.w	r0, r0, #3
 80068c2:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80068c4:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80068c6:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80068c8:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80068ca:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 80068cc:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80068ce:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80068d0:	2002      	movs	r0, #2
}
 80068d2:	4770      	bx	lr

080068d4 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80068d4:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80068d6:	7c03      	ldrb	r3, [r0, #16]
{
 80068d8:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d069      	beq.n	80069b2 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80068de:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80068e0:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80068e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068e4:	f042 0201 	orr.w	r2, r2, #1
 80068e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80068ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80068ee:	f022 0201 	bic.w	r2, r2, #1
 80068f2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80068f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80068fa:	f042 0201 	orr.w	r2, r2, #1
 80068fe:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8006902:	68da      	ldr	r2, [r3, #12]
 8006904:	f022 0203 	bic.w	r2, r2, #3
 8006908:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	4302      	orrs	r2, r0
 800690e:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006910:	695a      	ldr	r2, [r3, #20]
 8006912:	f022 0207 	bic.w	r2, r2, #7
 8006916:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006918:	6958      	ldr	r0, [r3, #20]
 800691a:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800691e:	432a      	orrs	r2, r5
 8006920:	694d      	ldr	r5, [r1, #20]
 8006922:	432a      	orrs	r2, r5
 8006924:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006926:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006928:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800692a:	691a      	ldr	r2, [r3, #16]
 800692c:	f022 020f 	bic.w	r2, r2, #15
 8006930:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006932:	691a      	ldr	r2, [r3, #16]
 8006934:	4302      	orrs	r2, r0
 8006936:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006938:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800693c:	f022 020e 	bic.w	r2, r2, #14
 8006940:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006944:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006948:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800694c:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800694e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8006952:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006954:	0c12      	lsrs	r2, r2, #16
 8006956:	0412      	lsls	r2, r2, #16
 8006958:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800695a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800695c:	4302      	orrs	r2, r0
 800695e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8006960:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006964:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006968:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800696c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8006970:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8006974:	432a      	orrs	r2, r5
 8006976:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8006978:	432a      	orrs	r2, r5
 800697a:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800697c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800697e:	432a      	orrs	r2, r5
 8006980:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006982:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006984:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8006988:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800698a:	f022 0201 	bic.w	r2, r2, #1
 800698e:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006990:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006992:	430a      	orrs	r2, r1
 8006994:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8006996:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800699a:	f042 0201 	orr.w	r2, r2, #1
 800699e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80069a2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80069a6:	f042 0202 	orr.w	r2, r2, #2
 80069aa:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 80069ae:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80069b0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80069b2:	2002      	movs	r0, #2
 80069b4:	e7fc      	b.n	80069b0 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

080069b8 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80069b8:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80069ba:	7c03      	ldrb	r3, [r0, #16]
{
 80069bc:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d029      	beq.n	8006a16 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80069c2:	6800      	ldr	r0, [r0, #0]
 80069c4:	4b15      	ldr	r3, [pc, #84]	@ (8006a1c <HAL_DSI_ConfigCommand+0x64>)
 80069c6:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80069c8:	4023      	ands	r3, r4
 80069ca:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80069cc:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80069ce:	e9d1 3500 	ldrd	r3, r5, [r1]
 80069d2:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 80069d4:	688d      	ldr	r5, [r1, #8]
 80069d6:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 80069d8:	68cd      	ldr	r5, [r1, #12]
 80069da:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 80069dc:	690d      	ldr	r5, [r1, #16]
 80069de:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 80069e0:	694d      	ldr	r5, [r1, #20]
 80069e2:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 80069e4:	698d      	ldr	r5, [r1, #24]
 80069e6:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 80069e8:	69cd      	ldr	r5, [r1, #28]
 80069ea:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 80069ec:	6a0d      	ldr	r5, [r1, #32]
 80069ee:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 80069f0:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80069f2:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 80069f4:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80069f6:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 80069f8:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80069fa:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 80069fc:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80069fe:	4323      	orrs	r3, r4
 8006a00:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8006a02:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8006a04:	f023 0302 	bic.w	r3, r3, #2
 8006a08:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8006a0a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8006a0c:	430b      	orrs	r3, r1
 8006a0e:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a10:	2000      	movs	r0, #0
 8006a12:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8006a14:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006a16:	2002      	movs	r0, #2
 8006a18:	e7fc      	b.n	8006a14 <HAL_DSI_ConfigCommand+0x5c>
 8006a1a:	bf00      	nop
 8006a1c:	fef080ff 	.word	0xfef080ff

08006a20 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006a20:	7c02      	ldrb	r2, [r0, #16]
{
 8006a22:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006a24:	2a01      	cmp	r2, #1
 8006a26:	d00a      	beq.n	8006a3e <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8006a28:	6802      	ldr	r2, [r0, #0]
 8006a2a:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8006a2c:	f020 001f 	bic.w	r0, r0, #31
 8006a30:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006a32:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8006a34:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a36:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 8006a38:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 8006a3a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006a3c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006a3e:	2002      	movs	r0, #2
}
 8006a40:	4770      	bx	lr

08006a42 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8006a42:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006a44:	7c03      	ldrb	r3, [r0, #16]
{
 8006a46:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d034      	beq.n	8006ab6 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8006a4c:	e9d1 0300 	ldrd	r0, r3, [r1]
 8006a50:	4298      	cmp	r0, r3
 8006a52:	bf38      	it	cc
 8006a54:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006a5c:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8006a60:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8006a64:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8006a68:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006a6c:	4302      	orrs	r2, r0
 8006a6e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8006a72:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006a76:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8006a7a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006a7e:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8006a82:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006a86:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006a88:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8006a8c:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006a8e:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006a90:	432a      	orrs	r2, r5
 8006a92:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a94:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8006a96:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8006a9a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006a9e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006aa2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8006aa6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006aaa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006aae:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 8006ab2:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8006ab4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006ab6:	2002      	movs	r0, #2
 8006ab8:	e7fc      	b.n	8006ab4 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08006abc <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8006abc:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006abe:	7c03      	ldrb	r3, [r0, #16]
{
 8006ac0:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d05b      	beq.n	8006b7e <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006ac6:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006ac8:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006aca:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006acc:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006ace:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006ad2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006ada:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006adc:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8006ade:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8006ae0:	b292      	uxth	r2, r2
 8006ae2:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006ae4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8006ae6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006aea:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8006aec:	4a25      	ldr	r2, [pc, #148]	@ (8006b84 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8006aee:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8006af0:	4010      	ands	r0, r2
 8006af2:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006af4:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8006af6:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006af8:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006afa:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8006afc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006afe:	4010      	ands	r0, r2
 8006b00:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006b02:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006b04:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006b06:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006b08:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8006b0a:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006b0e:	4010      	ands	r0, r2
 8006b10:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006b14:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006b18:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006b1a:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006b1c:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8006b20:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006b24:	4010      	ands	r0, r2
 8006b26:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8006b2a:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006b2e:	4328      	orrs	r0, r5
 8006b30:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8006b34:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006b38:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8006b3c:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006b40:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006b44:	698d      	ldr	r5, [r1, #24]
 8006b46:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006b48:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006b4a:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006b4c:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8006b50:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8006b54:	4010      	ands	r0, r2
 8006b56:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8006b5a:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8006b5e:	4328      	orrs	r0, r5
 8006b60:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006b64:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 8006b68:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006b6a:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8006b6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8006b70:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8006b74:	430a      	orrs	r2, r1
 8006b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 8006b7a:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8006b7c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006b7e:	2002      	movs	r0, #2
 8006b80:	e7fc      	b.n	8006b7c <HAL_DSI_ConfigHostTimeouts+0xc0>
 8006b82:	bf00      	nop
 8006b84:	ffff0000 	.word	0xffff0000

08006b88 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006b88:	7c03      	ldrb	r3, [r0, #16]
{
 8006b8a:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d01c      	beq.n	8006bca <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8006b90:	6802      	ldr	r2, [r0, #0]
 8006b92:	2300      	movs	r3, #0
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	6851      	ldr	r1, [r2, #4]
 8006b98:	f041 0101 	orr.w	r1, r1, #1
 8006b9c:	6051      	str	r1, [r2, #4]
 8006b9e:	6851      	ldr	r1, [r2, #4]
 8006ba0:	f001 0101 	and.w	r1, r1, #1
 8006ba4:	9100      	str	r1, [sp, #0]
 8006ba6:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 8006bae:	f041 0108 	orr.w	r1, r1, #8
 8006bb2:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 8006bb6:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006bba:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006bbc:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006bbe:	f002 0208 	and.w	r2, r2, #8
 8006bc2:	9201      	str	r2, [sp, #4]
 8006bc4:	9a01      	ldr	r2, [sp, #4]
}
 8006bc6:	b002      	add	sp, #8
 8006bc8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006bca:	2002      	movs	r0, #2
 8006bcc:	e7fb      	b.n	8006bc6 <HAL_DSI_Start+0x3e>

08006bce <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006bce:	7c02      	ldrb	r2, [r0, #16]
{
 8006bd0:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006bd2:	2a01      	cmp	r2, #1
 8006bd4:	d009      	beq.n	8006bea <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8006bd6:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006bd8:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8006bda:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 8006bde:	f042 0204 	orr.w	r2, r2, #4
 8006be2:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 8006be6:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006be8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006bea:	2002      	movs	r0, #2
}
 8006bec:	4770      	bx	lr

08006bee <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8006bee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006bf0:	7c05      	ldrb	r5, [r0, #16]
{
 8006bf2:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006bf4:	2d01      	cmp	r5, #1
 8006bf6:	d009      	beq.n	8006c0c <HAL_DSI_ShortWrite+0x1e>
 8006bf8:	2501      	movs	r5, #1
 8006bfa:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006bfc:	9d06      	ldr	r5, [sp, #24]
 8006bfe:	9500      	str	r5, [sp, #0]
 8006c00:	f7ff fcac 	bl	800655c <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006c04:	2300      	movs	r3, #0
 8006c06:	7423      	strb	r3, [r4, #16]

  return status;
}
 8006c08:	b003      	add	sp, #12
 8006c0a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006c0c:	2002      	movs	r0, #2
 8006c0e:	e7fb      	b.n	8006c08 <HAL_DSI_ShortWrite+0x1a>

08006c10 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8006c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c14:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c16:	7c03      	ldrb	r3, [r0, #16]
{
 8006c18:	4606      	mov	r6, r0
 8006c1a:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8006c1c:	2b01      	cmp	r3, #1
{
 8006c1e:	4615      	mov	r5, r2
 8006c20:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8006c24:	d052      	beq.n	8006ccc <HAL_DSI_LongWrite+0xbc>
 8006c26:	2301      	movs	r3, #1
 8006c28:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c2a:	f7ff faa1 	bl	8006170 <HAL_GetTick>
 8006c2e:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006c30:	6832      	ldr	r2, [r6, #0]
 8006c32:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8006c34:	f013 0a01 	ands.w	sl, r3, #1
 8006c38:	d019      	beq.n	8006c6e <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006c3a:	2c03      	cmp	r4, #3
 8006c3c:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8006c3e:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006c42:	bf28      	it	cs
 8006c44:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8006c46:	4283      	cmp	r3, r0
 8006c48:	d11d      	bne.n	8006c86 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8006c4a:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 8006c4c:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 8006c4e:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8006c52:	bb10      	cbnz	r0, 8006c9a <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8006c54:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006c56:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 8006c5a:	0223      	lsls	r3, r4, #8
 8006c5c:	0224      	lsls	r4, r4, #8
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 8006c64:	431d      	orrs	r5, r3
 8006c66:	4325      	orrs	r5, r4
 8006c68:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006c6a:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8006c6c:	e009      	b.n	8006c82 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006c6e:	f7ff fa7f 	bl	8006170 <HAL_GetTick>
 8006c72:	eba0 000b 	sub.w	r0, r0, fp
 8006c76:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006c7a:	d9d9      	bls.n	8006c30 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8006c7c:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006c7e:	f886 a010 	strb.w	sl, [r6, #16]
}
 8006c82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006c86:	f818 1003 	ldrb.w	r1, [r8, r3]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8006c90:	fa01 f10c 	lsl.w	r1, r1, ip
 8006c94:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 8006c98:	e7d5      	b.n	8006c46 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006c9a:	2804      	cmp	r0, #4
    fifoword = 0U;
 8006c9c:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006ca0:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 8006ca2:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006ca4:	bf28      	it	cs
 8006ca6:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006caa:	f813 8001 	ldrb.w	r8, [r3, r1]
 8006cae:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8006cb2:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006cb4:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8006cb8:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006cba:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8006cbe:	d1f4      	bne.n	8006caa <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8006cc0:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8006cc4:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 8006cc6:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 8006cca:	e7c2      	b.n	8006c52 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8006ccc:	2002      	movs	r0, #2
 8006cce:	e7d8      	b.n	8006c82 <HAL_DSI_LongWrite+0x72>

08006cd0 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8006cd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006cd4:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006cd6:	7c03      	ldrb	r3, [r0, #16]
{
 8006cd8:	4605      	mov	r5, r0
 8006cda:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8006cdc:	2b01      	cmp	r3, #1
{
 8006cde:	4617      	mov	r7, r2
 8006ce0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006ce4:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8006ce8:	d06f      	beq.n	8006dca <HAL_DSI_Read+0xfa>
 8006cea:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8006cec:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8006cee:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8006cf0:	d90d      	bls.n	8006d0e <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8006cf2:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8006cf6:	2237      	movs	r2, #55	@ 0x37
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	b2f3      	uxtb	r3, r6
 8006cfc:	f7ff fc2e 	bl	800655c <DSI_ShortWrite.constprop.0>
 8006d00:	b128      	cbz	r0, 8006d0e <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8006d02:	2300      	movs	r3, #0

      return HAL_ERROR;
 8006d04:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8006d06:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8006d08:	b003      	add	sp, #12
 8006d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8006d0e:	f1b9 0f06 	cmp.w	r9, #6
 8006d12:	d10f      	bne.n	8006d34 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8006d16:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8006d1e:	f043 0306 	orr.w	r3, r3, #6
 8006d22:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8006d24:	f7ff fa24 	bl	8006170 <HAL_GetTick>
 8006d28:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8006d2a:	2e00      	cmp	r6, #0
 8006d2c:	dc27      	bgt.n	8006d7e <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8006d2e:	2000      	movs	r0, #0
 8006d30:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8006d32:	e7e9      	b.n	8006d08 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8006d34:	f1b9 0f04 	cmp.w	r9, #4
 8006d38:	d105      	bne.n	8006d46 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d3a:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8006d3c:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d3e:	f044 0404 	orr.w	r4, r4, #4
 8006d42:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8006d44:	e7ee      	b.n	8006d24 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8006d46:	f1b9 0f14 	cmp.w	r9, #20
 8006d4a:	d108      	bne.n	8006d5e <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006d4c:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d50:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006d52:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d54:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8006d58:	f044 0414 	orr.w	r4, r4, #20
 8006d5c:	e7f1      	b.n	8006d42 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8006d5e:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 8006d62:	d1ce      	bne.n	8006d02 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006d64:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d68:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006d6a:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006d70:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006d74:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8006d78:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 8006d7c:	e7e1      	b.n	8006d42 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8006d7e:	682a      	ldr	r2, [r5, #0]
 8006d80:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8006d82:	f013 0310 	ands.w	r3, r3, #16
 8006d86:	d10d      	bne.n	8006da4 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006d88:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8006d8a:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006d8c:	4632      	mov	r2, r6
 8006d8e:	bf28      	it	cs
 8006d90:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8006d92:	00d9      	lsls	r1, r3, #3
 8006d94:	fa20 f101 	lsr.w	r1, r0, r1
 8006d98:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d1f8      	bne.n	8006d92 <HAL_DSI_Read+0xc2>
        pdata++;
 8006da0:	4417      	add	r7, r2
        datasize--;
 8006da2:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006da4:	f7ff f9e4 	bl	8006170 <HAL_GetTick>
 8006da8:	1b00      	subs	r0, r0, r4
 8006daa:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006dae:	d903      	bls.n	8006db8 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8006db0:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8006db2:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006db4:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8006db6:	e7a7      	b.n	8006d08 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8006db8:	682b      	ldr	r3, [r5, #0]
 8006dba:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006dbc:	0652      	lsls	r2, r2, #25
 8006dbe:	d4b4      	bmi.n	8006d2a <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8006dc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006dc4:	069b      	lsls	r3, r3, #26
 8006dc6:	d49c      	bmi.n	8006d02 <HAL_DSI_Read+0x32>
 8006dc8:	e7af      	b.n	8006d2a <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8006dca:	2002      	movs	r0, #2
 8006dcc:	e79c      	b.n	8006d08 <HAL_DSI_Read+0x38>

08006dce <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006dce:	7c02      	ldrb	r2, [r0, #16]
{
 8006dd0:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006dd2:	2a01      	cmp	r2, #1
 8006dd4:	d00f      	beq.n	8006df6 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8006dd6:	6802      	ldr	r2, [r0, #0]
 8006dd8:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8006ddc:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8006de0:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8006de4:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8006de8:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006dec:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8006dee:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 8006df2:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006df4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006df6:	2002      	movs	r0, #2
}
 8006df8:	4770      	bx	lr
	...

08006dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8006e00:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e02:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8006fc8 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e06:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e0a:	680a      	ldr	r2, [r1, #0]
 8006e0c:	fa32 f503 	lsrs.w	r5, r2, r3
 8006e10:	d102      	bne.n	8006e18 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8006e12:	b003      	add	sp, #12
 8006e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006e18:	2501      	movs	r5, #1
 8006e1a:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8006e1e:	ea18 0202 	ands.w	r2, r8, r2
 8006e22:	f000 80bb 	beq.w	8006f9c <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e26:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e28:	2703      	movs	r7, #3
 8006e2a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e2e:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e32:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e36:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e38:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e3c:	2f01      	cmp	r7, #1
 8006e3e:	d834      	bhi.n	8006eaa <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8006e40:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e42:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e46:	68cf      	ldr	r7, [r1, #12]
 8006e48:	fa07 f70e 	lsl.w	r7, r7, lr
 8006e4c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8006e50:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006e52:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006e54:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e58:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8006e5c:	409f      	lsls	r7, r3
 8006e5e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8006e62:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8006e64:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e66:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006e68:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006e6c:	688f      	ldr	r7, [r1, #8]
 8006e6e:	fa07 f70e 	lsl.w	r7, r7, lr
 8006e72:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8006e76:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e78:	d119      	bne.n	8006eae <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8006e7a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e7e:	f003 0a07 	and.w	sl, r3, #7
 8006e82:	f04f 0b0f 	mov.w	fp, #15
 8006e86:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8006e8a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8006e8e:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e92:	fa0b fb0a 	lsl.w	fp, fp, sl
 8006e96:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006e9a:	690f      	ldr	r7, [r1, #16]
 8006e9c:	fa07 f70a 	lsl.w	r7, r7, sl
 8006ea0:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8006ea4:	f8c8 7020 	str.w	r7, [r8, #32]
 8006ea8:	e001      	b.n	8006eae <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006eaa:	2d03      	cmp	r5, #3
 8006eac:	d1da      	bne.n	8006e64 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8006eae:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006eb0:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006eb4:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006eb8:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ebc:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8006ec0:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ec2:	d06b      	beq.n	8006f9c <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ec4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8006ec8:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006ecc:	f003 0c03 	and.w	ip, r3, #3
 8006ed0:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ed4:	f045 0502 	orr.w	r5, r5, #2
 8006ed8:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006edc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ee0:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8006ee4:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8006ee8:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006eec:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ef0:	f005 0502 	and.w	r5, r5, #2
 8006ef4:	9501      	str	r5, [sp, #4]
 8006ef6:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006ef8:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006efa:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006efe:	4d31      	ldr	r5, [pc, #196]	@ (8006fc4 <HAL_GPIO_Init+0x1c8>)
 8006f00:	42a8      	cmp	r0, r5
 8006f02:	d04d      	beq.n	8006fa0 <HAL_GPIO_Init+0x1a4>
 8006f04:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f08:	42a8      	cmp	r0, r5
 8006f0a:	d04b      	beq.n	8006fa4 <HAL_GPIO_Init+0x1a8>
 8006f0c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f10:	42a8      	cmp	r0, r5
 8006f12:	d049      	beq.n	8006fa8 <HAL_GPIO_Init+0x1ac>
 8006f14:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f18:	42a8      	cmp	r0, r5
 8006f1a:	d047      	beq.n	8006fac <HAL_GPIO_Init+0x1b0>
 8006f1c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f20:	42a8      	cmp	r0, r5
 8006f22:	d045      	beq.n	8006fb0 <HAL_GPIO_Init+0x1b4>
 8006f24:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f28:	42a8      	cmp	r0, r5
 8006f2a:	d043      	beq.n	8006fb4 <HAL_GPIO_Init+0x1b8>
 8006f2c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f30:	42a8      	cmp	r0, r5
 8006f32:	d041      	beq.n	8006fb8 <HAL_GPIO_Init+0x1bc>
 8006f34:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f38:	42a8      	cmp	r0, r5
 8006f3a:	d03f      	beq.n	8006fbc <HAL_GPIO_Init+0x1c0>
 8006f3c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f40:	42a8      	cmp	r0, r5
 8006f42:	d03d      	beq.n	8006fc0 <HAL_GPIO_Init+0x1c4>
 8006f44:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006f48:	42a8      	cmp	r0, r5
 8006f4a:	bf14      	ite	ne
 8006f4c:	250a      	movne	r5, #10
 8006f4e:	2509      	moveq	r5, #9
 8006f50:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f54:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f58:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f5c:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8006f5e:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8006f62:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8006f64:	bf0c      	ite	eq
 8006f66:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006f68:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f6a:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8006f6e:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8006f70:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8006f72:	bf0c      	ite	eq
 8006f74:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006f76:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f78:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8006f7c:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8006f7e:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8006f82:	bf0c      	ite	eq
 8006f84:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006f86:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f88:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8006f8a:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8006f8e:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8006f92:	bf54      	ite	pl
 8006f94:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8006f96:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8006f98:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	e734      	b.n	8006e0a <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006fa0:	2500      	movs	r5, #0
 8006fa2:	e7d5      	b.n	8006f50 <HAL_GPIO_Init+0x154>
 8006fa4:	2501      	movs	r5, #1
 8006fa6:	e7d3      	b.n	8006f50 <HAL_GPIO_Init+0x154>
 8006fa8:	2502      	movs	r5, #2
 8006faa:	e7d1      	b.n	8006f50 <HAL_GPIO_Init+0x154>
 8006fac:	2503      	movs	r5, #3
 8006fae:	e7cf      	b.n	8006f50 <HAL_GPIO_Init+0x154>
 8006fb0:	2504      	movs	r5, #4
 8006fb2:	e7cd      	b.n	8006f50 <HAL_GPIO_Init+0x154>
 8006fb4:	2505      	movs	r5, #5
 8006fb6:	e7cb      	b.n	8006f50 <HAL_GPIO_Init+0x154>
 8006fb8:	2506      	movs	r5, #6
 8006fba:	e7c9      	b.n	8006f50 <HAL_GPIO_Init+0x154>
 8006fbc:	2507      	movs	r5, #7
 8006fbe:	e7c7      	b.n	8006f50 <HAL_GPIO_Init+0x154>
 8006fc0:	2508      	movs	r5, #8
 8006fc2:	e7c5      	b.n	8006f50 <HAL_GPIO_Init+0x154>
 8006fc4:	58020000 	.word	0x58020000
 8006fc8:	58024400 	.word	0x58024400

08006fcc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8006fd0:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006fd2:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006fd6:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006fda:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006fde:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8006fe2:	fa31 f302 	lsrs.w	r3, r1, r2
 8006fe6:	d101      	bne.n	8006fec <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8006fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006fec:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8006ff0:	ea1c 0601 	ands.w	r6, ip, r1
 8006ff4:	d070      	beq.n	80070d8 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006ff6:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006ffa:	f002 0703 	and.w	r7, r2, #3
 8006ffe:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 8007002:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007004:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007008:	fa08 f907 	lsl.w	r9, r8, r7
 800700c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007010:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007014:	4b3a      	ldr	r3, [pc, #232]	@ (8007100 <HAL_GPIO_DeInit+0x134>)
 8007016:	4298      	cmp	r0, r3
 8007018:	d060      	beq.n	80070dc <HAL_GPIO_DeInit+0x110>
 800701a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800701e:	4298      	cmp	r0, r3
 8007020:	d05e      	beq.n	80070e0 <HAL_GPIO_DeInit+0x114>
 8007022:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007026:	4298      	cmp	r0, r3
 8007028:	d05c      	beq.n	80070e4 <HAL_GPIO_DeInit+0x118>
 800702a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800702e:	4298      	cmp	r0, r3
 8007030:	d05a      	beq.n	80070e8 <HAL_GPIO_DeInit+0x11c>
 8007032:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007036:	4298      	cmp	r0, r3
 8007038:	d058      	beq.n	80070ec <HAL_GPIO_DeInit+0x120>
 800703a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800703e:	4298      	cmp	r0, r3
 8007040:	d056      	beq.n	80070f0 <HAL_GPIO_DeInit+0x124>
 8007042:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007046:	4298      	cmp	r0, r3
 8007048:	d054      	beq.n	80070f4 <HAL_GPIO_DeInit+0x128>
 800704a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800704e:	4298      	cmp	r0, r3
 8007050:	d052      	beq.n	80070f8 <HAL_GPIO_DeInit+0x12c>
 8007052:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007056:	4298      	cmp	r0, r3
 8007058:	d050      	beq.n	80070fc <HAL_GPIO_DeInit+0x130>
 800705a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800705e:	4298      	cmp	r0, r3
 8007060:	bf0c      	ite	eq
 8007062:	2309      	moveq	r3, #9
 8007064:	230a      	movne	r3, #10
 8007066:	40bb      	lsls	r3, r7
 8007068:	4573      	cmp	r3, lr
 800706a:	d117      	bne.n	800709c <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800706c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8007070:	ea23 0306 	bic.w	r3, r3, r6
 8007074:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007078:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800707c:	ea23 0306 	bic.w	r3, r3, r6
 8007080:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8007084:	6863      	ldr	r3, [r4, #4]
 8007086:	ea23 0306 	bic.w	r3, r3, r6
 800708a:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	ea23 0306 	bic.w	r3, r3, r6
 8007092:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007094:	68ab      	ldr	r3, [r5, #8]
 8007096:	ea23 0309 	bic.w	r3, r3, r9
 800709a:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800709c:	0053      	lsls	r3, r2, #1
 800709e:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80070a0:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80070a2:	fa0b f303 	lsl.w	r3, fp, r3
 80070a6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80070aa:	431d      	orrs	r5, r3
 80070ac:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80070ae:	f002 0507 	and.w	r5, r2, #7
 80070b2:	6a37      	ldr	r7, [r6, #32]
 80070b4:	00ad      	lsls	r5, r5, #2
 80070b6:	fa08 f505 	lsl.w	r5, r8, r5
 80070ba:	ea27 0705 	bic.w	r7, r7, r5
 80070be:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070c0:	68c5      	ldr	r5, [r0, #12]
 80070c2:	ea25 0503 	bic.w	r5, r5, r3
 80070c6:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80070c8:	6845      	ldr	r5, [r0, #4]
 80070ca:	ea25 050c 	bic.w	r5, r5, ip
 80070ce:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80070d0:	6885      	ldr	r5, [r0, #8]
 80070d2:	ea25 0303 	bic.w	r3, r5, r3
 80070d6:	6083      	str	r3, [r0, #8]
    position++;
 80070d8:	3201      	adds	r2, #1
 80070da:	e782      	b.n	8006fe2 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80070dc:	2300      	movs	r3, #0
 80070de:	e7c2      	b.n	8007066 <HAL_GPIO_DeInit+0x9a>
 80070e0:	2301      	movs	r3, #1
 80070e2:	e7c0      	b.n	8007066 <HAL_GPIO_DeInit+0x9a>
 80070e4:	2302      	movs	r3, #2
 80070e6:	e7be      	b.n	8007066 <HAL_GPIO_DeInit+0x9a>
 80070e8:	2303      	movs	r3, #3
 80070ea:	e7bc      	b.n	8007066 <HAL_GPIO_DeInit+0x9a>
 80070ec:	2304      	movs	r3, #4
 80070ee:	e7ba      	b.n	8007066 <HAL_GPIO_DeInit+0x9a>
 80070f0:	2305      	movs	r3, #5
 80070f2:	e7b8      	b.n	8007066 <HAL_GPIO_DeInit+0x9a>
 80070f4:	2306      	movs	r3, #6
 80070f6:	e7b6      	b.n	8007066 <HAL_GPIO_DeInit+0x9a>
 80070f8:	2307      	movs	r3, #7
 80070fa:	e7b4      	b.n	8007066 <HAL_GPIO_DeInit+0x9a>
 80070fc:	2308      	movs	r3, #8
 80070fe:	e7b2      	b.n	8007066 <HAL_GPIO_DeInit+0x9a>
 8007100:	58020000 	.word	0x58020000

08007104 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007104:	6903      	ldr	r3, [r0, #16]
 8007106:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007108:	bf14      	ite	ne
 800710a:	2001      	movne	r0, #1
 800710c:	2000      	moveq	r0, #0
 800710e:	4770      	bx	lr

08007110 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007110:	b10a      	cbz	r2, 8007116 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007112:	6181      	str	r1, [r0, #24]
  }
}
 8007114:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007116:	0409      	lsls	r1, r1, #16
 8007118:	e7fb      	b.n	8007112 <HAL_GPIO_WritePin+0x2>

0800711a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800711a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800711c:	ea01 0203 	and.w	r2, r1, r3
 8007120:	ea21 0103 	bic.w	r1, r1, r3
 8007124:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007128:	6181      	str	r1, [r0, #24]
}
 800712a:	4770      	bx	lr

0800712c <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800712c:	4b04      	ldr	r3, [pc, #16]	@ (8007140 <HAL_HSEM_FastTake+0x14>)
 800712e:	3020      	adds	r0, #32
 8007130:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8007134:	4b03      	ldr	r3, [pc, #12]	@ (8007144 <HAL_HSEM_FastTake+0x18>)
 8007136:	1ac0      	subs	r0, r0, r3
 8007138:	bf18      	it	ne
 800713a:	2001      	movne	r0, #1
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	58026400 	.word	0x58026400
 8007144:	80000300 	.word	0x80000300

08007148 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007148:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 800714c:	4b01      	ldr	r3, [pc, #4]	@ (8007154 <HAL_HSEM_Release+0xc>)
 800714e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8007152:	4770      	bx	lr
 8007154:	58026400 	.word	0x58026400

08007158 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007158:	6803      	ldr	r3, [r0, #0]
 800715a:	699a      	ldr	r2, [r3, #24]
 800715c:	0791      	lsls	r1, r2, #30
 800715e:	d501      	bpl.n	8007164 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007160:	2200      	movs	r2, #0
 8007162:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007164:	699a      	ldr	r2, [r3, #24]
 8007166:	07d2      	lsls	r2, r2, #31
 8007168:	d403      	bmi.n	8007172 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800716a:	699a      	ldr	r2, [r3, #24]
 800716c:	f042 0201 	orr.w	r2, r2, #1
 8007170:	619a      	str	r2, [r3, #24]
  }
}
 8007172:	4770      	bx	lr

08007174 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007174:	b530      	push	{r4, r5, lr}
 8007176:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007178:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800717c:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800717e:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8007180:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8007186:	4a05      	ldr	r2, [pc, #20]	@ (800719c <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007188:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800718a:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800718e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8007192:	ea20 0002 	bic.w	r0, r0, r2
 8007196:	4303      	orrs	r3, r0
 8007198:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800719a:	bd30      	pop	{r4, r5, pc}
 800719c:	03ff63ff 	.word	0x03ff63ff

080071a0 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 80071a0:	6803      	ldr	r3, [r0, #0]
{
 80071a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80071a6:	699c      	ldr	r4, [r3, #24]
{
 80071a8:	4605      	mov	r5, r0
 80071aa:	460f      	mov	r7, r1
 80071ac:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80071ae:	f014 0410 	ands.w	r4, r4, #16
 80071b2:	d06f      	beq.n	8007294 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 80071b4:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071b6:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80071b8:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071ba:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	699a      	ldr	r2, [r3, #24]
 80071c0:	0690      	lsls	r0, r2, #26
 80071c2:	d461      	bmi.n	8007288 <I2C_IsErrorOccurred+0xe8>
 80071c4:	f1b8 0f00 	cmp.w	r8, #0
 80071c8:	d035      	beq.n	8007236 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 80071ca:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80071ce:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80071d0:	682e      	ldr	r6, [r5, #0]
 80071d2:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80071d4:	05d9      	lsls	r1, r3, #23
 80071d6:	d505      	bpl.n	80071e4 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80071d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80071dc:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80071e0:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80071e2:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80071e4:	055a      	lsls	r2, r3, #21
 80071e6:	d505      	bpl.n	80071f4 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80071e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80071ec:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80071f0:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80071f2:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80071f4:	059b      	lsls	r3, r3, #22
 80071f6:	d54f      	bpl.n	8007298 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80071f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80071fc:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007200:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8007202:	4628      	mov	r0, r5
 8007204:	f7ff ffa8 	bl	8007158 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007208:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800720a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800720c:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8007210:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8007214:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8007218:	f023 0301 	bic.w	r3, r3, #1
 800721c:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800721e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8007220:	4323      	orrs	r3, r4
 8007222:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007224:	2320      	movs	r3, #32
 8007226:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800722a:	2300      	movs	r3, #0
 800722c:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8007230:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8007234:	e032      	b.n	800729c <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8007236:	1c7a      	adds	r2, r7, #1
 8007238:	d0c1      	beq.n	80071be <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800723a:	f7fe ff99 	bl	8006170 <HAL_GetTick>
 800723e:	1b80      	subs	r0, r0, r6
 8007240:	42b8      	cmp	r0, r7
 8007242:	d801      	bhi.n	8007248 <I2C_IsErrorOccurred+0xa8>
 8007244:	2f00      	cmp	r7, #0
 8007246:	d1b9      	bne.n	80071bc <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800724c:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007250:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8007252:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007254:	0400      	lsls	r0, r0, #16
 8007256:	d50a      	bpl.n	800726e <I2C_IsErrorOccurred+0xce>
 8007258:	0449      	lsls	r1, r1, #17
 800725a:	d408      	bmi.n	800726e <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 800725c:	2a20      	cmp	r2, #32
 800725e:	d006      	beq.n	800726e <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007266:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8007268:	f7fe ff82 	bl	8006170 <HAL_GetTick>
 800726c:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800726e:	682b      	ldr	r3, [r5, #0]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	069b      	lsls	r3, r3, #26
 8007274:	d4a2      	bmi.n	80071bc <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007276:	f7fe ff7b 	bl	8006170 <HAL_GetTick>
 800727a:	1b80      	subs	r0, r0, r6
 800727c:	2819      	cmp	r0, #25
 800727e:	d9f6      	bls.n	800726e <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007280:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8007282:	f04f 0801 	mov.w	r8, #1
 8007286:	e799      	b.n	80071bc <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8007288:	f1b8 0f00 	cmp.w	r8, #0
 800728c:	d19d      	bne.n	80071ca <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800728e:	2220      	movs	r2, #32
 8007290:	61da      	str	r2, [r3, #28]
 8007292:	e79a      	b.n	80071ca <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8007294:	4620      	mov	r0, r4
 8007296:	e79b      	b.n	80071d0 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8007298:	2800      	cmp	r0, #0
 800729a:	d1b2      	bne.n	8007202 <I2C_IsErrorOccurred+0x62>
}
 800729c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080072a0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	4604      	mov	r4, r0
 80072a4:	460d      	mov	r5, r1
 80072a6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	079b      	lsls	r3, r3, #30
 80072ae:	d501      	bpl.n	80072b4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80072b0:	2000      	movs	r0, #0
 80072b2:	e01f      	b.n	80072f4 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072b4:	4632      	mov	r2, r6
 80072b6:	4629      	mov	r1, r5
 80072b8:	4620      	mov	r0, r4
 80072ba:	f7ff ff71 	bl	80071a0 <I2C_IsErrorOccurred>
 80072be:	b9c0      	cbnz	r0, 80072f2 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80072c0:	1c6a      	adds	r2, r5, #1
 80072c2:	d0f1      	beq.n	80072a8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c4:	f7fe ff54 	bl	8006170 <HAL_GetTick>
 80072c8:	1b80      	subs	r0, r0, r6
 80072ca:	42a8      	cmp	r0, r5
 80072cc:	d801      	bhi.n	80072d2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	d1ea      	bne.n	80072a8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f013 0302 	ands.w	r3, r3, #2
 80072da:	d1e5      	bne.n	80072a8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072dc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 80072de:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072e2:	f042 0220 	orr.w	r2, r2, #32
 80072e6:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80072e8:	2220      	movs	r2, #32
 80072ea:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ee:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80072f2:	2001      	movs	r0, #1
}
 80072f4:	bd70      	pop	{r4, r5, r6, pc}

080072f6 <I2C_WaitOnFlagUntilTimeout>:
{
 80072f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072fa:	9f06      	ldr	r7, [sp, #24]
 80072fc:	4604      	mov	r4, r0
 80072fe:	4688      	mov	r8, r1
 8007300:	4616      	mov	r6, r2
 8007302:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007304:	6822      	ldr	r2, [r4, #0]
 8007306:	6993      	ldr	r3, [r2, #24]
 8007308:	ea38 0303 	bics.w	r3, r8, r3
 800730c:	bf0c      	ite	eq
 800730e:	2301      	moveq	r3, #1
 8007310:	2300      	movne	r3, #0
 8007312:	42b3      	cmp	r3, r6
 8007314:	d001      	beq.n	800731a <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8007316:	2000      	movs	r0, #0
 8007318:	e01e      	b.n	8007358 <I2C_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 800731a:	1c6b      	adds	r3, r5, #1
 800731c:	d0f3      	beq.n	8007306 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800731e:	f7fe ff27 	bl	8006170 <HAL_GetTick>
 8007322:	1bc0      	subs	r0, r0, r7
 8007324:	42a8      	cmp	r0, r5
 8007326:	d801      	bhi.n	800732c <I2C_WaitOnFlagUntilTimeout+0x36>
 8007328:	2d00      	cmp	r5, #0
 800732a:	d1eb      	bne.n	8007304 <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	ea38 0303 	bics.w	r3, r8, r3
 8007334:	bf0c      	ite	eq
 8007336:	2301      	moveq	r3, #1
 8007338:	2300      	movne	r3, #0
 800733a:	42b3      	cmp	r3, r6
 800733c:	d1e2      	bne.n	8007304 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800733e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
          return HAL_ERROR;
 8007340:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007342:	f043 0320 	orr.w	r3, r3, #32
 8007346:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007348:	2320      	movs	r3, #32
 800734a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800734e:	2300      	movs	r3, #0
 8007350:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8007354:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8007358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800735c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	4604      	mov	r4, r0
 8007360:	460d      	mov	r5, r1
 8007362:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	069b      	lsls	r3, r3, #26
 800736a:	d501      	bpl.n	8007370 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800736c:	2000      	movs	r0, #0
 800736e:	e01d      	b.n	80073ac <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007370:	4632      	mov	r2, r6
 8007372:	4629      	mov	r1, r5
 8007374:	4620      	mov	r0, r4
 8007376:	f7ff ff13 	bl	80071a0 <I2C_IsErrorOccurred>
 800737a:	b9b0      	cbnz	r0, 80073aa <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800737c:	f7fe fef8 	bl	8006170 <HAL_GetTick>
 8007380:	1b80      	subs	r0, r0, r6
 8007382:	42a8      	cmp	r0, r5
 8007384:	d801      	bhi.n	800738a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8007386:	2d00      	cmp	r5, #0
 8007388:	d1ec      	bne.n	8007364 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	f013 0320 	ands.w	r3, r3, #32
 8007392:	d1e7      	bne.n	8007364 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007394:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007396:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800739a:	f042 0220 	orr.w	r2, r2, #32
 800739e:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073a0:	2220      	movs	r2, #32
 80073a2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80073aa:	2001      	movs	r0, #1
}
 80073ac:	bd70      	pop	{r4, r5, r6, pc}

080073ae <HAL_I2C_MspInit>:
}
 80073ae:	4770      	bx	lr

080073b0 <HAL_I2C_Init>:
{
 80073b0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80073b2:	4604      	mov	r4, r0
 80073b4:	2800      	cmp	r0, #0
 80073b6:	d04a      	beq.n	800744e <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073b8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80073bc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80073c0:	b91b      	cbnz	r3, 80073ca <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80073c2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80073c6:	f7ff fff2 	bl	80073ae <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80073ca:	2324      	movs	r3, #36	@ 0x24
 80073cc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	f022 0201 	bic.w	r2, r2, #1
 80073d8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80073da:	6862      	ldr	r2, [r4, #4]
 80073dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80073e0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80073e2:	689a      	ldr	r2, [r3, #8]
 80073e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073e8:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80073ea:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80073ee:	2901      	cmp	r1, #1
 80073f0:	d124      	bne.n	800743c <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80073f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80073f6:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80073f8:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073fa:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80073fc:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8007400:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007404:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800740c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800740e:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8007412:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007414:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007416:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800741a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800741c:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8007420:	430a      	orrs	r2, r1
 8007422:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	f042 0201 	orr.w	r2, r2, #1
 800742a:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800742c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800742e:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007430:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007434:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007436:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800743a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800743c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007440:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007442:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007444:	d1d8      	bne.n	80073f8 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007446:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800744a:	605a      	str	r2, [r3, #4]
 800744c:	e7d4      	b.n	80073f8 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800744e:	2001      	movs	r0, #1
 8007450:	e7f3      	b.n	800743a <HAL_I2C_Init+0x8a>

08007452 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 8007452:	4770      	bx	lr

08007454 <HAL_I2C_DeInit>:
{
 8007454:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8007456:	4604      	mov	r4, r0
 8007458:	b198      	cbz	r0, 8007482 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800745a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800745c:	2324      	movs	r3, #36	@ 0x24
 800745e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007462:	6813      	ldr	r3, [r2, #0]
 8007464:	f023 0301 	bic.w	r3, r3, #1
 8007468:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800746a:	f7ff fff2 	bl	8007452 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800746e:	2000      	movs	r0, #0
 8007470:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8007472:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8007476:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800747a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800747c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8007480:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007482:	2001      	movs	r0, #1
 8007484:	e7fc      	b.n	8007480 <HAL_I2C_DeInit+0x2c>
	...

08007488 <HAL_I2C_Mem_Write>:
{
 8007488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800748e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8007492:	4604      	mov	r4, r0
 8007494:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007496:	2b20      	cmp	r3, #32
{
 8007498:	4616      	mov	r6, r2
 800749a:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800749e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80074a2:	f040 80c6 	bne.w	8007632 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 80074a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074a8:	b113      	cbz	r3, 80074b0 <HAL_I2C_Mem_Write+0x28>
 80074aa:	f1ba 0f00 	cmp.w	sl, #0
 80074ae:	d106      	bne.n	80074be <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80074b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074b4:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80074b6:	2001      	movs	r0, #1
}
 80074b8:	b003      	add	sp, #12
 80074ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80074be:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	f000 80b5 	beq.w	8007632 <HAL_I2C_Mem_Write+0x1aa>
 80074c8:	f04f 0b01 	mov.w	fp, #1
 80074cc:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80074d0:	f7fe fe4e 	bl	8006170 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074d4:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80074d6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074d8:	9000      	str	r0, [sp, #0]
 80074da:	465a      	mov	r2, fp
 80074dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80074e0:	4620      	mov	r0, r4
 80074e2:	f7ff ff08 	bl	80072f6 <I2C_WaitOnFlagUntilTimeout>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	d1e5      	bne.n	80074b6 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074ea:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 80074ec:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80074ee:	fa5f f289 	uxtb.w	r2, r9
 80074f2:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074f4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074f8:	2340      	movs	r3, #64	@ 0x40
 80074fa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 80074fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007500:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007502:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8007504:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007506:	4b4c      	ldr	r3, [pc, #304]	@ (8007638 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8007508:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007512:	f7ff fe2f 	bl	8007174 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007516:	462a      	mov	r2, r5
 8007518:	4641      	mov	r1, r8
 800751a:	4620      	mov	r0, r4
 800751c:	f7ff fec0 	bl	80072a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007520:	bb18      	cbnz	r0, 800756a <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007522:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007526:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007528:	d115      	bne.n	8007556 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800752a:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800752c:	2200      	movs	r2, #0
 800752e:	2180      	movs	r1, #128	@ 0x80
 8007530:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007532:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007534:	4643      	mov	r3, r8
 8007536:	9500      	str	r5, [sp, #0]
 8007538:	f7ff fedd 	bl	80072f6 <I2C_WaitOnFlagUntilTimeout>
 800753c:	b9a8      	cbnz	r0, 800756a <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800753e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007540:	b29b      	uxth	r3, r3
 8007542:	2bff      	cmp	r3, #255	@ 0xff
 8007544:	d815      	bhi.n	8007572 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8007546:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007548:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800754c:	b292      	uxth	r2, r2
 800754e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007550:	b2d2      	uxtb	r2, r2
 8007552:	9000      	str	r0, [sp, #0]
 8007554:	e012      	b.n	800757c <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007556:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007558:	4641      	mov	r1, r8
 800755a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800755c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800755e:	462a      	mov	r2, r5
 8007560:	f7ff fe9e 	bl	80072a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007564:	b908      	cbnz	r0, 800756a <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007566:	6823      	ldr	r3, [r4, #0]
 8007568:	e7df      	b.n	800752a <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800756a:	2300      	movs	r3, #0
 800756c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007570:	e7a1      	b.n	80074b6 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007572:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007574:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007578:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800757a:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800757c:	4639      	mov	r1, r7
 800757e:	4620      	mov	r0, r4
 8007580:	f7ff fdf8 	bl	8007174 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007584:	462a      	mov	r2, r5
 8007586:	4641      	mov	r1, r8
 8007588:	4620      	mov	r0, r4
 800758a:	f7ff fe89 	bl	80072a0 <I2C_WaitOnTXISFlagUntilTimeout>
 800758e:	2800      	cmp	r0, #0
 8007590:	d191      	bne.n	80074b6 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007592:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007594:	6822      	ldr	r2, [r4, #0]
 8007596:	f813 1b01 	ldrb.w	r1, [r3], #1
 800759a:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800759c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800759e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80075a0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80075a2:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80075a4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80075a6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80075a8:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80075aa:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80075ae:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	b1b3      	cbz	r3, 80075e2 <HAL_I2C_Mem_Write+0x15a>
 80075b4:	b9aa      	cbnz	r2, 80075e2 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075b6:	4643      	mov	r3, r8
 80075b8:	2180      	movs	r1, #128	@ 0x80
 80075ba:	4620      	mov	r0, r4
 80075bc:	9500      	str	r5, [sp, #0]
 80075be:	f7ff fe9a 	bl	80072f6 <I2C_WaitOnFlagUntilTimeout>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	f47f af77 	bne.w	80074b6 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075c8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	2bff      	cmp	r3, #255	@ 0xff
 80075ce:	d928      	bls.n	8007622 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075d0:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80075d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075d6:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80075d8:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075da:	4639      	mov	r1, r7
 80075dc:	4620      	mov	r0, r4
 80075de:	f7ff fdc9 	bl	8007174 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80075e2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1cc      	bne.n	8007584 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075ea:	462a      	mov	r2, r5
 80075ec:	4641      	mov	r1, r8
 80075ee:	4620      	mov	r0, r4
 80075f0:	f7ff feb4 	bl	800735c <I2C_WaitOnSTOPFlagUntilTimeout>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	f47f af5e 	bne.w	80074b6 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	2120      	movs	r1, #32
 80075fe:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8007606:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800760a:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800760e:	f022 0201 	bic.w	r2, r2, #1
 8007612:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007614:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007618:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800761c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8007620:	e74a      	b.n	80074b8 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8007622:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007624:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8007628:	b292      	uxth	r2, r2
 800762a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	9000      	str	r0, [sp, #0]
 8007630:	e7d3      	b.n	80075da <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8007632:	2002      	movs	r0, #2
 8007634:	e740      	b.n	80074b8 <HAL_I2C_Mem_Write+0x30>
 8007636:	bf00      	nop
 8007638:	80002000 	.word	0x80002000

0800763c <HAL_I2C_Mem_Read>:
{
 800763c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007640:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007642:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8007646:	4604      	mov	r4, r0
 8007648:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800764a:	2b20      	cmp	r3, #32
{
 800764c:	4616      	mov	r6, r2
 800764e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8007652:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007656:	f040 80c9 	bne.w	80077ec <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800765a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800765c:	b113      	cbz	r3, 8007664 <HAL_I2C_Mem_Read+0x28>
 800765e:	f1ba 0f00 	cmp.w	sl, #0
 8007662:	d106      	bne.n	8007672 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007664:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007668:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800766a:	2001      	movs	r0, #1
}
 800766c:	b003      	add	sp, #12
 800766e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007672:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007676:	2b01      	cmp	r3, #1
 8007678:	f000 80b8 	beq.w	80077ec <HAL_I2C_Mem_Read+0x1b0>
 800767c:	f04f 0b01 	mov.w	fp, #1
 8007680:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8007684:	f7fe fd74 	bl	8006170 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007688:	2319      	movs	r3, #25
 800768a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800768c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800768e:	465a      	mov	r2, fp
 8007690:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007694:	4620      	mov	r0, r4
 8007696:	f7ff fe2e 	bl	80072f6 <I2C_WaitOnFlagUntilTimeout>
 800769a:	4603      	mov	r3, r0
 800769c:	2800      	cmp	r0, #0
 800769e:	d1e4      	bne.n	800766a <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80076a0:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 80076a2:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80076a4:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80076a6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076aa:	2240      	movs	r2, #64	@ 0x40
 80076ac:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 80076b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076b2:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80076b4:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80076b6:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80076b8:	4a4d      	ldr	r2, [pc, #308]	@ (80077f0 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 80076ba:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80076be:	9200      	str	r2, [sp, #0]
 80076c0:	fa5f f289 	uxtb.w	r2, r9
 80076c4:	f7ff fd56 	bl	8007174 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076c8:	462a      	mov	r2, r5
 80076ca:	4641      	mov	r1, r8
 80076cc:	4620      	mov	r0, r4
 80076ce:	f7ff fde7 	bl	80072a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80076d2:	bb20      	cbnz	r0, 800771e <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076d4:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076d8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076da:	d116      	bne.n	800770a <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076dc:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80076de:	2200      	movs	r2, #0
 80076e0:	2140      	movs	r1, #64	@ 0x40
 80076e2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076e4:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80076e6:	4643      	mov	r3, r8
 80076e8:	9500      	str	r5, [sp, #0]
 80076ea:	f7ff fe04 	bl	80072f6 <I2C_WaitOnFlagUntilTimeout>
 80076ee:	b9b0      	cbnz	r0, 800771e <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076f0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	2bff      	cmp	r3, #255	@ 0xff
 80076f6:	4b3f      	ldr	r3, [pc, #252]	@ (80077f4 <HAL_I2C_Mem_Read+0x1b8>)
 80076f8:	d815      	bhi.n	8007726 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80076fa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80076fc:	b292      	uxth	r2, r2
 80076fe:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007708:	e012      	b.n	8007730 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800770a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800770c:	4641      	mov	r1, r8
 800770e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007710:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007712:	462a      	mov	r2, r5
 8007714:	f7ff fdc4 	bl	80072a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007718:	b908      	cbnz	r0, 800771e <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	e7de      	b.n	80076dc <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800771e:	2300      	movs	r3, #0
 8007720:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007724:	e7a1      	b.n	800766a <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007726:	22ff      	movs	r2, #255	@ 0xff
 8007728:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007730:	4639      	mov	r1, r7
 8007732:	4620      	mov	r0, r4
 8007734:	f7ff fd1e 	bl	8007174 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007738:	4643      	mov	r3, r8
 800773a:	2200      	movs	r2, #0
 800773c:	2104      	movs	r1, #4
 800773e:	4620      	mov	r0, r4
 8007740:	9500      	str	r5, [sp, #0]
 8007742:	f7ff fdd8 	bl	80072f6 <I2C_WaitOnFlagUntilTimeout>
 8007746:	2800      	cmp	r0, #0
 8007748:	d18f      	bne.n	800766a <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800774e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007750:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007752:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8007754:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8007756:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8007758:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800775a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800775c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800775e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007760:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007762:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007764:	b29b      	uxth	r3, r3
 8007766:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007768:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800776a:	b29b      	uxth	r3, r3
 800776c:	b1b3      	cbz	r3, 800779c <HAL_I2C_Mem_Read+0x160>
 800776e:	b9aa      	cbnz	r2, 800779c <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007770:	4643      	mov	r3, r8
 8007772:	2180      	movs	r1, #128	@ 0x80
 8007774:	4620      	mov	r0, r4
 8007776:	9500      	str	r5, [sp, #0]
 8007778:	f7ff fdbd 	bl	80072f6 <I2C_WaitOnFlagUntilTimeout>
 800777c:	2800      	cmp	r0, #0
 800777e:	f47f af74 	bne.w	800766a <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007782:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007784:	b29b      	uxth	r3, r3
 8007786:	2bff      	cmp	r3, #255	@ 0xff
 8007788:	d928      	bls.n	80077dc <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800778a:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800778c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007790:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007792:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007794:	4639      	mov	r1, r7
 8007796:	4620      	mov	r0, r4
 8007798:	f7ff fcec 	bl	8007174 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800779c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800779e:	b29b      	uxth	r3, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1c9      	bne.n	8007738 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077a4:	462a      	mov	r2, r5
 80077a6:	4641      	mov	r1, r8
 80077a8:	4620      	mov	r0, r4
 80077aa:	f7ff fdd7 	bl	800735c <I2C_WaitOnSTOPFlagUntilTimeout>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	f47f af5b 	bne.w	800766a <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	2120      	movs	r1, #32
 80077b8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80077c0:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80077c4:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80077c8:	f022 0201 	bic.w	r2, r2, #1
 80077cc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80077ce:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80077d2:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077d6:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80077da:	e747      	b.n	800766c <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80077dc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 80077e2:	b292      	uxth	r2, r2
 80077e4:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077e6:	b2d2      	uxtb	r2, r2
 80077e8:	9000      	str	r0, [sp, #0]
 80077ea:	e7d3      	b.n	8007794 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 80077ec:	2002      	movs	r0, #2
 80077ee:	e73d      	b.n	800766c <HAL_I2C_Mem_Read+0x30>
 80077f0:	80002000 	.word	0x80002000
 80077f4:	80002400 	.word	0x80002400

080077f8 <HAL_I2C_GetState>:
  return hi2c->State;
 80077f8:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 80077fc:	4770      	bx	lr

080077fe <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80077fe:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 8007800:	4770      	bx	lr

08007802 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007802:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007804:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8007808:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800780a:	2a20      	cmp	r2, #32
 800780c:	b2d4      	uxtb	r4, r2
 800780e:	d11c      	bne.n	800784a <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007810:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8007814:	2a01      	cmp	r2, #1
 8007816:	d018      	beq.n	800784a <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007818:	2224      	movs	r2, #36	@ 0x24
 800781a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800781e:	6802      	ldr	r2, [r0, #0]
 8007820:	6810      	ldr	r0, [r2, #0]
 8007822:	f020 0001 	bic.w	r0, r0, #1
 8007826:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007828:	6810      	ldr	r0, [r2, #0]
 800782a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800782e:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007830:	6810      	ldr	r0, [r2, #0]
 8007832:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007834:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8007836:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007838:	6811      	ldr	r1, [r2, #0]
 800783a:	f041 0101 	orr.w	r1, r1, #1
 800783e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007840:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007844:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007848:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 800784a:	2002      	movs	r0, #2
 800784c:	e7fc      	b.n	8007848 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800784e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800784e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007850:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8007854:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007856:	2a20      	cmp	r2, #32
 8007858:	b2d4      	uxtb	r4, r2
 800785a:	d11b      	bne.n	8007894 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800785c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8007860:	2a01      	cmp	r2, #1
 8007862:	d017      	beq.n	8007894 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007864:	2224      	movs	r2, #36	@ 0x24
 8007866:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800786a:	6802      	ldr	r2, [r0, #0]
 800786c:	6810      	ldr	r0, [r2, #0]
 800786e:	f020 0001 	bic.w	r0, r0, #1
 8007872:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007874:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007876:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800787a:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800787e:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8007880:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007882:	6811      	ldr	r1, [r2, #0]
 8007884:	f041 0101 	orr.w	r1, r1, #1
 8007888:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800788a:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800788e:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007892:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8007894:	2002      	movs	r0, #2
 8007896:	e7fc      	b.n	8007892 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08007898 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8007898:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 800789a:	2401      	movs	r4, #1
 800789c:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 800789e:	2500      	movs	r5, #0
 80078a0:	194e      	adds	r6, r1, r5
 80078a2:	443d      	add	r5, r7
 80078a4:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 80078a6:	42be      	cmp	r6, r7
 80078a8:	d112      	bne.n	80078d0 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 80078aa:	2c10      	cmp	r4, #16
 80078ac:	d108      	bne.n	80078c0 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 80078ae:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80078b0:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 80078b2:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 80078b4:	601d      	str	r5, [r3, #0]
  p = 0;
 80078b6:	4623      	mov	r3, r4
  si = Huffsize[0];
 80078b8:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 80078ba:	5cc8      	ldrb	r0, [r1, r3]
 80078bc:	b9d8      	cbnz	r0, 80078f6 <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 80078be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 80078c0:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 80078c2:	3401      	adds	r4, #1
 80078c4:	19ee      	adds	r6, r5, r7
 80078c6:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80078ca:	d9e9      	bls.n	80078a0 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 80078cc:	2001      	movs	r0, #1
 80078ce:	e7f6      	b.n	80078be <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 80078d0:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 80078d4:	e7e7      	b.n	80078a6 <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 80078d6:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 80078da:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 80078dc:	5cc8      	ldrb	r0, [r1, r3]
 80078de:	19dc      	adds	r4, r3, r7
 80078e0:	42a8      	cmp	r0, r5
 80078e2:	d0f8      	beq.n	80078d6 <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 80078e4:	2d1f      	cmp	r5, #31
 80078e6:	d8f1      	bhi.n	80078cc <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80078e8:	fa06 f005 	lsl.w	r0, r6, r5
 80078ec:	42a0      	cmp	r0, r4
 80078ee:	d9ed      	bls.n	80078cc <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 80078f0:	0064      	lsls	r4, r4, #1
    si++;
 80078f2:	3501      	adds	r5, #1
 80078f4:	e7e1      	b.n	80078ba <JPEG_Bits_To_SizeCodes+0x22>
 80078f6:	1ae7      	subs	r7, r4, r3
 80078f8:	e7f0      	b.n	80078dc <JPEG_Bits_To_SizeCodes+0x44>

080078fa <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80078fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078fc:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8007900:	460d      	mov	r5, r1
 8007902:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8007904:	ab01      	add	r3, sp, #4
 8007906:	aa43      	add	r2, sp, #268	@ 0x10c
 8007908:	a902      	add	r1, sp, #8
 800790a:	f7ff ffc5 	bl	8007898 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800790e:	b938      	cbnz	r0, 8007920 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 8007910:	9e01      	ldr	r6, [sp, #4]
 8007912:	460b      	mov	r3, r1
 8007914:	f104 010f 	add.w	r1, r4, #15
 8007918:	360f      	adds	r6, #15
 800791a:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 800791c:	42a1      	cmp	r1, r4
 800791e:	d102      	bne.n	8007926 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007920:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8007924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 8007926:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800792a:	2e0b      	cmp	r6, #11
 800792c:	d80a      	bhi.n	8007944 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800792e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8007932:	f852 cb04 	ldr.w	ip, [r2], #4
 8007936:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800793a:	f813 7b01 	ldrb.w	r7, [r3], #1
 800793e:	3f01      	subs	r7, #1
 8007940:	55af      	strb	r7, [r5, r6]
      k++;
 8007942:	e7eb      	b.n	800791c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8007944:	2001      	movs	r0, #1
 8007946:	e7eb      	b.n	8007920 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

08007948 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8007948:	4603      	mov	r3, r0
 800794a:	4608      	mov	r0, r1
 800794c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800794e:	681c      	ldr	r4, [r3, #0]
{
 8007950:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8007952:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 8007956:	429a      	cmp	r2, r3
 8007958:	d125      	bne.n	80079a6 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800795a:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800795e:	a901      	add	r1, sp, #4
 8007960:	f7ff ffcb 	bl	80078fa <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8007964:	b9e8      	cbnz	r0, 80079a2 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 8007966:	aa01      	add	r2, sp, #4
 8007968:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800796c:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 8007970:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 8007972:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 8007974:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007976:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 8007978:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800797a:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 800797e:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007980:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007982:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007986:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 800798a:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800798c:	7b13      	ldrb	r3, [r2, #12]
 800798e:	021b      	lsls	r3, r3, #8
 8007990:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007994:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8007996:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800799a:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 800799e:	42b4      	cmp	r4, r6
 80079a0:	d1e9      	bne.n	8007976 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80079a2:	b011      	add	sp, #68	@ 0x44
 80079a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80079a6:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d102      	bne.n	80079b4 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80079ae:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 80079b2:	e7d4      	b.n	800795e <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 80079b4:	2001      	movs	r0, #1
 80079b6:	e7f4      	b.n	80079a2 <JPEG_Set_HuffDC_Mem+0x5a>

080079b8 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80079b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80079bc:	6804      	ldr	r4, [r0, #0]
{
 80079be:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 80079c2:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80079c4:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d149      	bne.n	8007a60 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80079cc:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80079d0:	466b      	mov	r3, sp
 80079d2:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 80079d6:	a901      	add	r1, sp, #4
 80079d8:	4630      	mov	r0, r6
 80079da:	f7ff ff5d 	bl	8007898 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80079de:	2800      	cmp	r0, #0
 80079e0:	d13a      	bne.n	8007a58 <JPEG_Set_HuffAC_Mem+0xa0>
 80079e2:	9b00      	ldr	r3, [sp, #0]
 80079e4:	460d      	mov	r5, r1
 80079e6:	f106 0c0f 	add.w	ip, r6, #15
 80079ea:	4617      	mov	r7, r2
 80079ec:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 80079ee:	f04f 0e0a 	mov.w	lr, #10
 80079f2:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80079f4:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 80079f6:	4561      	cmp	r1, ip
 80079f8:	d139      	bne.n	8007a6e <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 80079fa:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 80079fe:	a942      	add	r1, sp, #264	@ 0x108
 8007a00:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 8007a04:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8007a06:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8007a08:	6063      	str	r3, [r4, #4]
 8007a0a:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8007a0c:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 8007a10:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 8007a14:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8007a16:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007a1a:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8007a1c:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007a20:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8007a22:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007a26:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007a28:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 8007a2c:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007a2e:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 8007a32:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007a34:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007a36:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007a3a:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8007a3e:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007a40:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007a4a:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8007a4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a50:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8007a54:	42b4      	cmp	r4, r6
 8007a56:	d1e7      	bne.n	8007a28 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007a58:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 8007a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8007a60:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d10f      	bne.n	8007a88 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8007a68:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 8007a6c:	e7b0      	b.n	80079d0 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 8007a6e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 8007a72:	b15b      	cbz	r3, 8007a8c <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8007a74:	2bf0      	cmp	r3, #240	@ 0xf0
 8007a76:	d015      	beq.n	8007aa4 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 8007a78:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 8007a7a:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8007a84:	2ba1      	cmp	r3, #161	@ 0xa1
 8007a86:	d902      	bls.n	8007a8e <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 8007a88:	2001      	movs	r0, #1
 8007a8a:	e7e5      	b.n	8007a58 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 8007a8c:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007a8e:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 8007a92:	f857 8b04 	ldr.w	r8, [r7], #4
 8007a96:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007a9a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8007a9e:	3a01      	subs	r2, #1
 8007aa0:	54f2      	strb	r2, [r6, r3]
      k++;
 8007aa2:	e7a8      	b.n	80079f6 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 8007aa4:	23a1      	movs	r3, #161	@ 0xa1
 8007aa6:	e7f2      	b.n	8007a8e <JPEG_Set_HuffAC_Mem+0xd6>

08007aa8 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8007aa8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007aaa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007aae:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007ab0:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8007ab2:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007ab4:	f002 0203 	and.w	r2, r2, #3
 8007ab8:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	bf0c      	ite	eq
 8007abe:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8007ac2:	f022 0208 	bicne.w	r2, r2, #8
 8007ac6:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	f022 0201 	bic.w	r2, r2, #1
 8007ace:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007ad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ad2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007ad6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8007ad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ada:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8007ae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ae2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ae6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007ae8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aea:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007aee:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007af8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007afa:	f002 020c 	and.w	r2, r2, #12
 8007afe:	2a08      	cmp	r2, #8
 8007b00:	d104      	bne.n	8007b0c <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8007b02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b04:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007b08:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8007b0a:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8007b0c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007b0e:	f002 020c 	and.w	r2, r2, #12
 8007b12:	2a0c      	cmp	r2, #12
 8007b14:	d1f9      	bne.n	8007b0a <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007b16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b18:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007b1c:	e7f4      	b.n	8007b08 <JPEG_Init_Process+0x60>
	...

08007b20 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8007b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007b22:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 8007b24:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007b26:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007b28:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007b2a:	42aa      	cmp	r2, r5
 8007b2c:	d313      	bcc.n	8007b56 <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8007b2e:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007b30:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8007b32:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007b34:	428b      	cmp	r3, r1
 8007b36:	d30e      	bcc.n	8007b56 <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8007b38:	4f18      	ldr	r7, [pc, #96]	@ (8007b9c <JPEG_DMA_StartProcess+0x7c>)
 8007b3a:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007b3c:	4f18      	ldr	r7, [pc, #96]	@ (8007ba0 <JPEG_DMA_StartProcess+0x80>)
 8007b3e:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8007b40:	4e18      	ldr	r6, [pc, #96]	@ (8007ba4 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007b42:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8007b44:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8007b46:	4e18      	ldr	r6, [pc, #96]	@ (8007ba8 <JPEG_DMA_StartProcess+0x88>)
 8007b48:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8007b4a:	b105      	cbz	r5, 8007b4e <JPEG_DMA_StartProcess+0x2e>
 8007b4c:	b931      	cbnz	r1, 8007b5c <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007b4e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8007b50:	f043 0304 	orr.w	r3, r3, #4
 8007b54:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8007b56:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8007b58:	b003      	add	sp, #12
 8007b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007b5c:	fbb2 f6f5 	udiv	r6, r2, r5
 8007b60:	fb05 2516 	mls	r5, r5, r6, r2
 8007b64:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007b66:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007b68:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007b6a:	fbb3 f2f1 	udiv	r2, r3, r1
 8007b6e:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007b72:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007b74:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007b76:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8007b78:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8007b7a:	9500      	str	r5, [sp, #0]
 8007b7c:	69e2      	ldr	r2, [r4, #28]
 8007b7e:	f001 f848 	bl	8008c12 <HAL_MDMA_Start_IT>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d1e3      	bne.n	8007b4e <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007b86:	6822      	ldr	r2, [r4, #0]
 8007b88:	9500      	str	r5, [sp, #0]
 8007b8a:	3240      	adds	r2, #64	@ 0x40
 8007b8c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007b8e:	69a1      	ldr	r1, [r4, #24]
 8007b90:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007b92:	f001 f83e 	bl	8008c12 <HAL_MDMA_Start_IT>
 8007b96:	2800      	cmp	r0, #0
 8007b98:	d0de      	beq.n	8007b58 <JPEG_DMA_StartProcess+0x38>
 8007b9a:	e7d8      	b.n	8007b4e <JPEG_DMA_StartProcess+0x2e>
 8007b9c:	080080e3 	.word	0x080080e3
 8007ba0:	08007fdb 	.word	0x08007fdb
 8007ba4:	080085a1 	.word	0x080085a1
 8007ba8:	08008593 	.word	0x08008593

08007bac <HAL_JPEG_Init>:
{
 8007bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 8007bae:	4605      	mov	r5, r0
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	f000 80f2 	beq.w	8007d9a <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8007bb6:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8007bba:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007bbe:	b91b      	cbnz	r3, 8007bc8 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8007bc0:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8007bc4:	f7f9 fa64 	bl	8001090 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8007bc8:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8007bca:	2302      	movs	r3, #2
 8007bcc:	4a86      	ldr	r2, [pc, #536]	@ (8007de8 <HAL_JPEG_Init+0x23c>)
 8007bce:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 8007bd2:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 8007bd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007bd8:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 8007bdc:	f043 0301 	orr.w	r3, r3, #1
 8007be0:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	f023 0301 	bic.w	r3, r3, #1
 8007be8:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007bea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007bec:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8007bf0:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8007bf2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007bf4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007bf8:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8007bfa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c00:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007c02:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007c04:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007c08:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8007c0a:	4b78      	ldr	r3, [pc, #480]	@ (8007dec <HAL_JPEG_Init+0x240>)
 8007c0c:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8007c0e:	4b78      	ldr	r3, [pc, #480]	@ (8007df0 <HAL_JPEG_Init+0x244>)
 8007c10:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8007c12:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8007c14:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007c18:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 8007c1a:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007c1c:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007c1e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007c20:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8007c24:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8007c26:	4333      	orrs	r3, r6
 8007c28:	7c56      	ldrb	r6, [r2, #17]
 8007c2a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007c2e:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8007c32:	4281      	cmp	r1, r0
 8007c34:	d1f0      	bne.n	8007c18 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007c36:	4b6f      	ldr	r3, [pc, #444]	@ (8007df4 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8007c38:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 8007c3c:	4a6e      	ldr	r2, [pc, #440]	@ (8007df8 <HAL_JPEG_Init+0x24c>)
 8007c3e:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007c42:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 8007c46:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007c4e:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 8007c52:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8007c56:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007c5a:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 8007c5c:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007c5e:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007c62:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007c64:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8007c68:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8007c6c:	ea43 030c 	orr.w	r3, r3, ip
 8007c70:	f890 c011 	ldrb.w	ip, [r0, #17]
 8007c74:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007c78:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 8007c7c:	42be      	cmp	r6, r7
 8007c7e:	d1ec      	bne.n	8007c5a <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 8007c80:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8007c84:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 8007c88:	0c1b      	lsrs	r3, r3, #16
 8007c8a:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8007c8c:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 8007c90:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 8007c94:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007c98:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8007c9c:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007c9e:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007ca2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007ca4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8007ca8:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8007cac:	4333      	orrs	r3, r6
 8007cae:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 8007cb2:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007cb6:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8007cba:	4281      	cmp	r1, r0
 8007cbc:	d1ec      	bne.n	8007c98 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 8007cbe:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 8007cc2:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 8007cc6:	4a4d      	ldr	r2, [pc, #308]	@ (8007dfc <HAL_JPEG_Init+0x250>)
 8007cc8:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 8007ccc:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8007cce:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8007cd2:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8007cd6:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8007cda:	4013      	ands	r3, r2
  *address = value;
 8007cdc:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 8007ce6:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8007cea:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 8007cee:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 8007cf2:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8007cf6:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8007cf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8007cfc:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8007d00:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8007d04:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8007d06:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8007d0a:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 8007d0e:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007d12:	4b3b      	ldr	r3, [pc, #236]	@ (8007e00 <HAL_JPEG_Init+0x254>)
 8007d14:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8007d18:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8007d1c:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8007d20:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8007d24:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8007d26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8007d2a:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 8007d2e:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8007d32:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8007d34:	4a33      	ldr	r2, [pc, #204]	@ (8007e04 <HAL_JPEG_Init+0x258>)
 8007d36:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8007d3a:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 8007d3e:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007d42:	4b31      	ldr	r3, [pc, #196]	@ (8007e08 <HAL_JPEG_Init+0x25c>)
 8007d44:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 8007d48:	4b30      	ldr	r3, [pc, #192]	@ (8007e0c <HAL_JPEG_Init+0x260>)
 8007d4a:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 8007d4e:	4b30      	ldr	r3, [pc, #192]	@ (8007e10 <HAL_JPEG_Init+0x264>)
 8007d50:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8007d54:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8007d58:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8007d5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8007d5e:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007d62:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 8007d66:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007d68:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007d6c:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007d6e:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8007d72:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007d76:	4333      	orrs	r3, r6
 8007d78:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 8007d7c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007d80:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8007d84:	4281      	cmp	r1, r0
 8007d86:	d1ec      	bne.n	8007d62 <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8007d88:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8007d8c:	491a      	ldr	r1, [pc, #104]	@ (8007df8 <HAL_JPEG_Init+0x24c>)
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f7ff fe12 	bl	80079b8 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8007d94:	b118      	cbz	r0, 8007d9e <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8007d96:	2301      	movs	r3, #1
 8007d98:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 8007d9a:	2001      	movs	r0, #1
}
 8007d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8007d9e:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8007da2:	4918      	ldr	r1, [pc, #96]	@ (8007e04 <HAL_JPEG_Init+0x258>)
 8007da4:	4628      	mov	r0, r5
 8007da6:	f7ff fe07 	bl	80079b8 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d1f3      	bne.n	8007d96 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8007dae:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8007db2:	490d      	ldr	r1, [pc, #52]	@ (8007de8 <HAL_JPEG_Init+0x23c>)
 8007db4:	4628      	mov	r0, r5
 8007db6:	f7ff fdc7 	bl	8007948 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d1eb      	bne.n	8007d96 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8007dbe:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8007dc2:	4914      	ldr	r1, [pc, #80]	@ (8007e14 <HAL_JPEG_Init+0x268>)
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	f7ff fdbf 	bl	8007948 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d1e3      	bne.n	8007d96 <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8007dce:	6863      	ldr	r3, [r4, #4]
 8007dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dd4:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007dd6:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8007dd8:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8007dda:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007ddc:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8007de0:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8007de2:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 8007de4:	e7da      	b.n	8007d9c <HAL_JPEG_Init+0x1f0>
 8007de6:	bf00      	nop
 8007de8:	08023a3c 	.word	0x08023a3c
 8007dec:	0802383c 	.word	0x0802383c
 8007df0:	080237fc 	.word	0x080237fc
 8007df4:	0b0a0908 	.word	0x0b0a0908
 8007df8:	0802396e 	.word	0x0802396e
 8007dfc:	ffff0000 	.word	0xffff0000
 8007e00:	09080706 	.word	0x09080706
 8007e04:	080238bc 	.word	0x080238bc
 8007e08:	01000404 	.word	0x01000404
 8007e0c:	05070403 	.word	0x05070403
 8007e10:	04040201 	.word	0x04040201
 8007e14:	08023a20 	.word	0x08023a20

08007e18 <HAL_JPEG_GetInfo>:
{
 8007e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d06f      	beq.n	8007f00 <HAL_JPEG_GetInfo+0xe8>
 8007e20:	2900      	cmp	r1, #0
 8007e22:	d06d      	beq.n	8007f00 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8007e24:	6804      	ldr	r4, [r0, #0]
 8007e26:	6863      	ldr	r3, [r4, #4]
 8007e28:	f003 0303 	and.w	r3, r3, #3
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d047      	beq.n	8007ec0 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8007e30:	6863      	ldr	r3, [r4, #4]
 8007e32:	f013 0303 	ands.w	r3, r3, #3
 8007e36:	d005      	beq.n	8007e44 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8007e38:	6863      	ldr	r3, [r4, #4]
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d15e      	bne.n	8007f00 <HAL_JPEG_GetInfo+0xe8>
 8007e42:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007e44:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8007e46:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007e48:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007e4c:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007e4e:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007e50:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8007e52:	68e2      	ldr	r2, [r4, #12]
 8007e54:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007e58:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007e5a:	d13c      	bne.n	8007ed6 <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007e5c:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007e5e:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007e60:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007e64:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007e66:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007e68:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007e6a:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007e6e:	d129      	bne.n	8007ec4 <HAL_JPEG_GetInfo+0xac>
 8007e70:	4313      	orrs	r3, r2
 8007e72:	f013 0f0f 	tst.w	r3, #15
 8007e76:	bf0c      	ite	eq
 8007e78:	2301      	moveq	r3, #1
 8007e7a:	2300      	movne	r3, #0
 8007e7c:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8007e7e:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 8007e80:	2300      	movs	r3, #0
 8007e82:	3450      	adds	r4, #80	@ 0x50
 8007e84:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8007f04 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 8007e88:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007e8a:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 8007e8e:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 8007e92:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 8007e96:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 8007e9a:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8007e9c:	fa29 f206 	lsr.w	r2, r9, r6
 8007ea0:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 8007ea2:	2a01      	cmp	r2, #1
 8007ea4:	d119      	bne.n	8007eda <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 8007ea6:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 8007ea8:	3608      	adds	r6, #8
 8007eaa:	3701      	adds	r7, #1
 8007eac:	2e20      	cmp	r6, #32
 8007eae:	d1f5      	bne.n	8007e9c <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 8007eb0:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007eb2:	2d40      	cmp	r5, #64	@ 0x40
 8007eb4:	d1ed      	bne.n	8007e92 <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 8007eb6:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8007eb8:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8007eba:	610b      	str	r3, [r1, #16]
}
 8007ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	e7bf      	b.n	8007e44 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007ec4:	2d03      	cmp	r5, #3
 8007ec6:	d106      	bne.n	8007ed6 <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	f013 0f0f 	tst.w	r3, #15
 8007ece:	bf0c      	ite	eq
 8007ed0:	2301      	moveq	r3, #1
 8007ed2:	2300      	movne	r3, #0
 8007ed4:	e7d3      	b.n	8007e7e <HAL_JPEG_GetInfo+0x66>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e7d1      	b.n	8007e7e <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007eda:	fb0e fb02 	mul.w	fp, lr, r2
 8007ede:	f897 a000 	ldrb.w	sl, [r7]
 8007ee2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007ee4:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8007ee8:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8007eec:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 8007eee:	bf8b      	itete	hi
 8007ef0:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 8007ef4:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8007ef8:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8007efa:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8007efe:	e7d3      	b.n	8007ea8 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 8007f00:	2001      	movs	r0, #1
 8007f02:	e7db      	b.n	8007ebc <HAL_JPEG_GetInfo+0xa4>
 8007f04:	0802387c 	.word	0x0802387c

08007f08 <HAL_JPEG_Decode_DMA>:
{
 8007f08:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	b348      	cbz	r0, 8007f62 <HAL_JPEG_Decode_DMA+0x5a>
 8007f0e:	b341      	cbz	r1, 8007f62 <HAL_JPEG_Decode_DMA+0x5a>
 8007f10:	b33b      	cbz	r3, 8007f62 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 8007f12:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 8007f16:	2d01      	cmp	r5, #1
 8007f18:	d028      	beq.n	8007f6c <HAL_JPEG_Decode_DMA+0x64>
 8007f1a:	2501      	movs	r5, #1
 8007f1c:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8007f20:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 8007f24:	2d01      	cmp	r5, #1
 8007f26:	d11e      	bne.n	8007f66 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8007f28:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 8007f2a:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8007f2c:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8007f30:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8007f32:	f025 050f 	bic.w	r5, r5, #15
 8007f36:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8007f38:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8007f3a:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8007f3e:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8007f42:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8007f44:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 8007f46:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 8007f48:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 8007f4a:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 8007f4c:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 8007f4e:	f7ff fdab 	bl	8007aa8 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8007f52:	f7ff fde5 	bl	8007b20 <JPEG_DMA_StartProcess>
 8007f56:	b128      	cbz	r0, 8007f64 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007f58:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 8007f5a:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007f5e:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8007f62:	2001      	movs	r0, #1
}
 8007f64:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 8007f66:	2300      	movs	r3, #0
 8007f68:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 8007f6c:	2002      	movs	r0, #2
 8007f6e:	e7f9      	b.n	8007f64 <HAL_JPEG_Decode_DMA+0x5c>

08007f70 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8007f70:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007f72:	f003 030c 	and.w	r3, r3, #12
 8007f76:	2b0c      	cmp	r3, #12
 8007f78:	d10d      	bne.n	8007f96 <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8007f7a:	07cb      	lsls	r3, r1, #31
 8007f7c:	d503      	bpl.n	8007f86 <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8007f7e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007f80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007f84:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8007f86:	0789      	lsls	r1, r1, #30
 8007f88:	d503      	bpl.n	8007f92 <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8007f8a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007f8c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007f90:	6543      	str	r3, [r0, #84]	@ 0x54
}
 8007f92:	2000      	movs	r0, #0
 8007f94:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007f96:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007f98:	f003 030c 	and.w	r3, r3, #12
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d1f8      	bne.n	8007f92 <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8007fa0:	f011 0301 	ands.w	r3, r1, #1
 8007fa4:	d004      	beq.n	8007fb0 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8007fa6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007fa8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007fac:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8007fae:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8007fb0:	078a      	lsls	r2, r1, #30
 8007fb2:	d505      	bpl.n	8007fc0 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8007fb4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8007fb6:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8007fba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007fbe:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8007fc0:	6801      	ldr	r1, [r0, #0]
 8007fc2:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8007fc4:	ea22 0303 	bic.w	r3, r2, r3
 8007fc8:	630b      	str	r3, [r1, #48]	@ 0x30
 8007fca:	e7e2      	b.n	8007f92 <HAL_JPEG_Pause+0x22>

08007fcc <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8007fcc:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8007fce:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8007fd0:	4770      	bx	lr

08007fd2 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8007fd2:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8007fd4:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8007fd8:	4770      	bx	lr

08007fda <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007fda:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 8007fdc:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007fde:	6803      	ldr	r3, [r0, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	f022 0201 	bic.w	r2, r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007fe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fea:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007ff6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007ff8:	f043 0304 	orr.w	r3, r3, #4
 8007ffc:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8007ffe:	f7fa fb37 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 8008002:	bd08      	pop	{r3, pc}

08008004 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008004:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8008006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008008:	4604      	mov	r4, r0
 800800a:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800800c:	b922      	cbnz	r2, 8008018 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800800e:	2101      	movs	r1, #1
 8008010:	f7ff ffae 	bl	8007f70 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 8008014:	2200      	movs	r2, #0
 8008016:	e004      	b.n	8008022 <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008018:	6a03      	ldr	r3, [r0, #32]
 800801a:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800801c:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800801e:	d924      	bls.n	800806a <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008020:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8008022:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008024:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8008028:	d11e      	bne.n	8008068 <JPEG_ReadInputData+0x64>
 800802a:	b1ea      	cbz	r2, 8008068 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 800802c:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 8008030:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 8008032:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 8008036:	d827      	bhi.n	8008088 <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008038:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800803a:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800803c:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800803e:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008040:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 8008042:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008044:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008046:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800804a:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800804e:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008050:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8008054:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008058:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800805c:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800805e:	6a22      	ldr	r2, [r4, #32]
 8008060:	f102 0204 	add.w	r2, r2, #4
 8008064:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8008066:	d1e8      	bne.n	800803a <JPEG_ReadInputData+0x36>
}
 8008068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800806a:	429a      	cmp	r2, r3
 800806c:	d1d2      	bne.n	8008014 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800806e:	6a01      	ldr	r1, [r0, #32]
 8008070:	f7fa fa90 	bl	8002594 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8008074:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008076:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8008078:	bf84      	itt	hi
 800807a:	f023 0303 	bichi.w	r3, r3, #3
 800807e:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8008080:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 8008082:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8008084:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 8008086:	e7cc      	b.n	8008022 <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 8008088:	2a03      	cmp	r2, #3
 800808a:	d918      	bls.n	80080be <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800808c:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 800808e:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008090:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008092:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008094:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 8008096:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008098:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800809a:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800809e:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80080a2:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80080a4:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80080a8:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80080ac:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80080b0:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80080b2:	6a22      	ldr	r2, [r4, #32]
 80080b4:	f102 0204 	add.w	r2, r2, #4
 80080b8:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80080ba:	d1e8      	bne.n	800808e <JPEG_ReadInputData+0x8a>
 80080bc:	e7d4      	b.n	8008068 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 80080be:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80080c0:	6a25      	ldr	r5, [r4, #32]
 80080c2:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 80080c4:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80080c6:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 80080c8:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 80080ca:	fa05 f506 	lsl.w	r5, r5, r6
 80080ce:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 80080d2:	6a25      	ldr	r5, [r4, #32]
 80080d4:	f105 0501 	add.w	r5, r5, #1
 80080d8:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 80080da:	d1f1      	bne.n	80080c0 <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 80080dc:	6822      	ldr	r2, [r4, #0]
 80080de:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80080e0:	e7c2      	b.n	8008068 <JPEG_ReadInputData+0x64>

080080e2 <JPEG_MDMAInCpltCallback>:
{
 80080e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80080e4:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80080e6:	6822      	ldr	r2, [r4, #0]
 80080e8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80080ea:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 80080ee:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 80080f0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80080f2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80080f6:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 80080fa:	041b      	lsls	r3, r3, #16
 80080fc:	0c1b      	lsrs	r3, r3, #16
 80080fe:	2b0c      	cmp	r3, #12
 8008100:	d11a      	bne.n	8008138 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008102:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008104:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008106:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008108:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800810a:	695a      	ldr	r2, [r3, #20]
 800810c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800810e:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8008112:	1a9b      	subs	r3, r3, r2
 8008114:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008116:	6a21      	ldr	r1, [r4, #32]
 8008118:	f7fa fa3c 	bl	8002594 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 800811c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800811e:	42ab      	cmp	r3, r5
 8008120:	d327      	bcc.n	8008172 <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 8008122:	b95d      	cbnz	r5, 800813c <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008124:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 8008126:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008128:	f043 0304 	orr.w	r3, r3, #4
 800812c:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800812e:	2306      	movs	r3, #6
 8008130:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8008134:	f7fa fa9c 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 8008138:	b003      	add	sp, #12
 800813a:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800813c:	fbb3 f2f5 	udiv	r2, r3, r5
 8008140:	fb05 3212 	mls	r2, r5, r2, r3
 8008144:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8008146:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8008148:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800814a:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800814c:	04db      	lsls	r3, r3, #19
 800814e:	d40a      	bmi.n	8008166 <JPEG_MDMAInCpltCallback+0x84>
 8008150:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008152:	b143      	cbz	r3, 8008166 <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008154:	2101      	movs	r1, #1
 8008156:	3240      	adds	r2, #64	@ 0x40
 8008158:	9100      	str	r1, [sp, #0]
 800815a:	69a1      	ldr	r1, [r4, #24]
 800815c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800815e:	f000 fd58 	bl	8008c12 <HAL_MDMA_Start_IT>
 8008162:	2800      	cmp	r0, #0
 8008164:	d1de      	bne.n	8008124 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008166:	6822      	ldr	r2, [r4, #0]
 8008168:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800816a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800816e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008170:	e7e2      	b.n	8008138 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0e8      	beq.n	8008148 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8008176:	079a      	lsls	r2, r3, #30
 8008178:	d0e6      	beq.n	8008148 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800817a:	f023 0303 	bic.w	r3, r3, #3
 800817e:	3304      	adds	r3, #4
 8008180:	e7e1      	b.n	8008146 <JPEG_MDMAInCpltCallback+0x64>

08008182 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008182:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008186:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800818a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 800818c:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800818e:	4293      	cmp	r3, r2
 8008190:	d32a      	bcc.n	80081e8 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 8008192:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8008194:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 8008196:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008198:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 800819a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 800819c:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800819e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80081a0:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80081a2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80081a4:	69e0      	ldr	r0, [r4, #28]
 80081a6:	4428      	add	r0, r5
 80081a8:	ea4f 2513 	mov.w	r5, r3, lsr #8
 80081ac:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80081ae:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80081b0:	69e0      	ldr	r0, [r4, #28]
 80081b2:	4428      	add	r0, r5
 80081b4:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80081b8:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80081bc:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80081be:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80081c0:	69e0      	ldr	r0, [r4, #28]
 80081c2:	4428      	add	r0, r5
 80081c4:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 80081c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80081c8:	f103 0304 	add.w	r3, r3, #4
 80081cc:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 80081ce:	d1e1      	bne.n	8008194 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80081d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80081d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d106      	bne.n	80081e6 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80081d8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80081da:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80081dc:	4620      	mov	r0, r4
 80081de:	f7fa f9f7 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	6263      	str	r3, [r4, #36]	@ 0x24
}
 80081e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 80081e8:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d9fb      	bls.n	80081e6 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80081ee:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 80081f0:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 80081f2:	1a9b      	subs	r3, r3, r2
 80081f4:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 80081f6:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80081f8:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 80081fa:	d105      	bne.n	8008208 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 80081fc:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80081fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008200:	429f      	cmp	r7, r3
 8008202:	d119      	bne.n	8008238 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008204:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008206:	e7e9      	b.n	80081dc <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 8008208:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800820a:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800820c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800820e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008210:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008212:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008214:	69e1      	ldr	r1, [r4, #28]
 8008216:	4429      	add	r1, r5
 8008218:	0a1d      	lsrs	r5, r3, #8
 800821a:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800821c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800821e:	69e1      	ldr	r1, [r4, #28]
 8008220:	4429      	add	r1, r5
 8008222:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008224:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008226:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008228:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800822a:	69e1      	ldr	r1, [r4, #28]
 800822c:	4429      	add	r1, r5
 800822e:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 8008230:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008232:	3304      	adds	r3, #4
 8008234:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8008236:	e7de      	b.n	80081f6 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8008238:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800823a:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800823c:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800823e:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 8008240:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 8008242:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008244:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 8008246:	d114      	bne.n	8008272 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008248:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800824a:	4620      	mov	r0, r4
 800824c:	f7fa f9c0 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008250:	2300      	movs	r3, #0
 8008252:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8008254:	1d2b      	adds	r3, r5, #4
 8008256:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 8008258:	2b03      	cmp	r3, #3
 800825a:	d8c4      	bhi.n	80081e6 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800825c:	00da      	lsls	r2, r3, #3
 800825e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008260:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 8008262:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008264:	fa26 f202 	lsr.w	r2, r6, r2
 8008268:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 800826a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800826c:	3201      	adds	r2, #1
 800826e:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8008270:	e7f2      	b.n	8008258 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008272:	f002 0303 	and.w	r3, r2, #3
 8008276:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800827a:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800827c:	00db      	lsls	r3, r3, #3
 800827e:	fa26 f303 	lsr.w	r3, r6, r3
 8008282:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 8008286:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008288:	3301      	adds	r3, #1
 800828a:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800828c:	e7d9      	b.n	8008242 <JPEG_StoreOutputData+0xc0>

0800828e <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800828e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008290:	f003 0303 	and.w	r3, r3, #3
 8008294:	2b02      	cmp	r3, #2
{
 8008296:	b510      	push	{r4, lr}
 8008298:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800829a:	d114      	bne.n	80082c6 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800829c:	6803      	ldr	r3, [r0, #0]
 800829e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a0:	065b      	lsls	r3, r3, #25
 80082a2:	d510      	bpl.n	80082c6 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80082a4:	1d01      	adds	r1, r0, #4
 80082a6:	f7ff fdb7 	bl	8007e18 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 80082aa:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80082ac:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 80082ae:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80082b0:	f7fa f93a 	bl	8002528 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80082b4:	6823      	ldr	r3, [r4, #0]
 80082b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082bc:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80082be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082c4:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 80082c6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80082c8:	04d9      	lsls	r1, r3, #19
 80082ca:	d407      	bmi.n	80082dc <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082d0:	0792      	lsls	r2, r2, #30
 80082d2:	d544      	bpl.n	800835e <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80082d4:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 80082d6:	4620      	mov	r0, r4
 80082d8:	f7ff fe94 	bl	8008004 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80082dc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80082de:	0499      	lsls	r1, r3, #18
 80082e0:	d407      	bmi.n	80082f2 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082e6:	0712      	lsls	r2, r2, #28
 80082e8:	d53e      	bpl.n	8008368 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 80082ea:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 80082ec:	4620      	mov	r0, r4
 80082ee:	f7ff ff48 	bl	8008182 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082f6:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80082fa:	2a20      	cmp	r2, #32
 80082fc:	d13c      	bne.n	8008378 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	f022 0201 	bic.w	r2, r2, #1
 8008304:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008306:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008308:	f002 020c 	and.w	r2, r2, #12
 800830c:	2a08      	cmp	r2, #8
 800830e:	d103      	bne.n	8008318 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008310:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008312:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008316:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800831a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800831e:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8008320:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008322:	b133      	cbz	r3, 8008332 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008324:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008326:	4620      	mov	r0, r4
 8008328:	69e1      	ldr	r1, [r4, #28]
 800832a:	f7fa f951 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800832e:	2300      	movs	r3, #0
 8008330:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8008332:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008334:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008336:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008338:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800833c:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008340:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008342:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008344:	f04f 0200 	mov.w	r2, #0
 8008348:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800834c:	f04f 0201 	mov.w	r2, #1
 8008350:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008354:	d10d      	bne.n	8008372 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008356:	f7fa f98d 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800835a:	2001      	movs	r0, #1
}
 800835c:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800835e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008360:	0758      	lsls	r0, r3, #29
 8008362:	d5bb      	bpl.n	80082dc <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 8008364:	2101      	movs	r1, #1
 8008366:	e7b6      	b.n	80082d6 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8008368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800836a:	06db      	lsls	r3, r3, #27
 800836c:	d5c1      	bpl.n	80082f2 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 800836e:	2101      	movs	r1, #1
 8008370:	e7bc      	b.n	80082ec <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008372:	f7ff fe31 	bl	8007fd8 <HAL_JPEG_EncodeCpltCallback>
 8008376:	e7f0      	b.n	800835a <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 8008378:	2000      	movs	r0, #0
 800837a:	e7ef      	b.n	800835c <JPEG_Process+0xce>

0800837c <JPEG_DMA_PollResidualData>:
{
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	4604      	mov	r4, r0
 8008380:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008382:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8008384:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008386:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 800838a:	d122      	bne.n	80083d2 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800838c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800838e:	06d0      	lsls	r0, r2, #27
 8008390:	d51f      	bpl.n	80083d2 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 8008392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8008394:	69e1      	ldr	r1, [r4, #28]
 8008396:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008398:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800839a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800839c:	69e2      	ldr	r2, [r4, #28]
 800839e:	440a      	add	r2, r1
 80083a0:	0a19      	lsrs	r1, r3, #8
 80083a2:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80083a4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80083a6:	69e2      	ldr	r2, [r4, #28]
 80083a8:	440a      	add	r2, r1
 80083aa:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80083ac:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80083ae:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80083b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80083b2:	69e2      	ldr	r2, [r4, #28]
 80083b4:	440a      	add	r2, r1
 80083b6:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 80083b8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80083ba:	3304      	adds	r3, #4
 80083bc:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80083be:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80083c0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d105      	bne.n	80083d2 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80083c6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80083c8:	4620      	mov	r0, r4
 80083ca:	69e1      	ldr	r1, [r4, #28]
 80083cc:	f7fa f900 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 80083d0:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80083d2:	3e01      	subs	r6, #1
 80083d4:	d1d5      	bne.n	8008382 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80083d6:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 80083d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80083da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80083dc:	06c9      	lsls	r1, r1, #27
 80083de:	d501      	bpl.n	80083e4 <JPEG_DMA_PollResidualData+0x68>
 80083e0:	0492      	lsls	r2, r2, #18
 80083e2:	d420      	bmi.n	8008426 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	f022 0201 	bic.w	r2, r2, #1
 80083ea:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 80083ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80083ee:	b133      	cbz	r3, 80083fe <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80083f0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80083f2:	4620      	mov	r0, r4
 80083f4:	69e1      	ldr	r1, [r4, #28]
 80083f6:	f7fa f8eb 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80083fa:	2300      	movs	r3, #0
 80083fc:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 80083fe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008400:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008402:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008404:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008408:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800840c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800840e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008410:	f04f 0200 	mov.w	r2, #0
 8008414:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008418:	f04f 0201 	mov.w	r2, #1
 800841c:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008420:	d102      	bne.n	8008428 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008422:	f7fa f927 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
}
 8008426:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008428:	f7ff fdd6 	bl	8007fd8 <HAL_JPEG_EncodeCpltCallback>
}
 800842c:	e7fb      	b.n	8008426 <JPEG_DMA_PollResidualData+0xaa>

0800842e <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800842e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008430:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 8008434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008436:	4604      	mov	r4, r0
 8008438:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800843a:	d014      	beq.n	8008466 <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800843c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800843e:	f003 030c 	and.w	r3, r3, #12
 8008442:	2b0c      	cmp	r3, #12
 8008444:	d146      	bne.n	80084d4 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008446:	07cb      	lsls	r3, r1, #31
 8008448:	d520      	bpl.n	800848c <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800844a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800844c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008450:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008452:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8008454:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 8008456:	b941      	cbnz	r1, 800846a <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008458:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800845a:	f043 0304 	orr.w	r3, r3, #4
 800845e:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008460:	2306      	movs	r3, #6
 8008462:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8008466:	2001      	movs	r0, #1
 8008468:	e01d      	b.n	80084a6 <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 800846a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800846c:	fbb3 f2f1 	udiv	r2, r3, r1
 8008470:	fb01 3212 	mls	r2, r1, r2, r3
 8008474:	1a9b      	subs	r3, r3, r2
 8008476:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 8008478:	b143      	cbz	r3, 800848c <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800847a:	6822      	ldr	r2, [r4, #0]
 800847c:	2101      	movs	r1, #1
 800847e:	3240      	adds	r2, #64	@ 0x40
 8008480:	9100      	str	r1, [sp, #0]
 8008482:	69a1      	ldr	r1, [r4, #24]
 8008484:	f000 fbc5 	bl	8008c12 <HAL_MDMA_Start_IT>
 8008488:	2800      	cmp	r0, #0
 800848a:	d1e5      	bne.n	8008458 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800848c:	07a8      	lsls	r0, r5, #30
 800848e:	d509      	bpl.n	80084a4 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008490:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008492:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008496:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8008498:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800849a:	0419      	lsls	r1, r3, #16
 800849c:	d505      	bpl.n	80084aa <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 800849e:	4620      	mov	r0, r4
 80084a0:	f7ff ff6c 	bl	800837c <JPEG_DMA_PollResidualData>
  return HAL_OK;
 80084a4:	2000      	movs	r0, #0
}
 80084a6:	b003      	add	sp, #12
 80084a8:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 80084aa:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80084ac:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 80084ae:	2900      	cmp	r1, #0
 80084b0:	d0d2      	beq.n	8008458 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 80084b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80084b4:	fbb3 f2f1 	udiv	r2, r3, r1
 80084b8:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80084bc:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 80084be:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80084c0:	2201      	movs	r2, #1
 80084c2:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 80084c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80084c6:	9200      	str	r2, [sp, #0]
 80084c8:	69e2      	ldr	r2, [r4, #28]
 80084ca:	f000 fba2 	bl	8008c12 <HAL_MDMA_Start_IT>
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d0e8      	beq.n	80084a4 <HAL_JPEG_Resume+0x76>
 80084d2:	e7c1      	b.n	8008458 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80084d4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80084d6:	f003 030c 	and.w	r3, r3, #12
 80084da:	2b08      	cmp	r3, #8
 80084dc:	d1e2      	bne.n	80084a4 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80084de:	f011 0301 	ands.w	r3, r1, #1
 80084e2:	d004      	beq.n	80084ee <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 80084e4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80084e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084ea:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80084ec:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80084ee:	07aa      	lsls	r2, r5, #30
 80084f0:	d505      	bpl.n	80084fe <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80084f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80084f4:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80084f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80084fc:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 80084fe:	6821      	ldr	r1, [r4, #0]
 8008500:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008502:	4313      	orrs	r3, r2
 8008504:	630b      	str	r3, [r1, #48]	@ 0x30
 8008506:	e7cd      	b.n	80084a4 <HAL_JPEG_Resume+0x76>

08008508 <JPEG_DMA_EndProcess>:
{
 8008508:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800850a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 800850c:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800850e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800851c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800851e:	429a      	cmp	r2, r3
 8008520:	d105      	bne.n	800852e <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008522:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8008524:	69c1      	ldr	r1, [r0, #28]
 8008526:	f7fa f853 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 8008532:	f015 0510 	ands.w	r5, r5, #16
 8008536:	d124      	bne.n	8008582 <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 8008538:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800853a:	b12b      	cbz	r3, 8008548 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800853c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800853e:	4620      	mov	r0, r4
 8008540:	69e1      	ldr	r1, [r4, #28]
 8008542:	f7fa f845 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008546:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008548:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800854a:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800854c:	6813      	ldr	r3, [r2, #0]
 800854e:	f023 0301 	bic.w	r3, r3, #1
 8008552:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8008554:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008556:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008558:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800855c:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008560:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008562:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008564:	f04f 0200 	mov.w	r2, #0
 8008568:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800856c:	f04f 0201 	mov.w	r2, #1
 8008570:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008574:	d102      	bne.n	800857c <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008576:	f7fa f87d 	bl	8002674 <HAL_JPEG_DecodeCpltCallback>
}
 800857a:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800857c:	f7ff fd2c 	bl	8007fd8 <HAL_JPEG_EncodeCpltCallback>
 8008580:	e7fb      	b.n	800857a <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008582:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008584:	049b      	lsls	r3, r3, #18
 8008586:	d4f8      	bmi.n	800857a <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 8008588:	4620      	mov	r0, r4
}
 800858a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 800858e:	f7ff bef5 	b.w	800837c <JPEG_DMA_PollResidualData>

08008592 <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008592:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8008594:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008596:	041b      	lsls	r3, r3, #16
 8008598:	d501      	bpl.n	800859e <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800859a:	f7ff bfb5 	b.w	8008508 <JPEG_DMA_EndProcess>
}
 800859e:	4770      	bx	lr

080085a0 <JPEG_MDMAOutCpltCallback>:
{
 80085a0:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80085a2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085a8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80085ac:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 80085ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085b0:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 80085b4:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80085b8:	0412      	lsls	r2, r2, #16
 80085ba:	0c12      	lsrs	r2, r2, #16
 80085bc:	2a0c      	cmp	r2, #12
 80085be:	d125      	bne.n	800860c <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 80085c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085c2:	069a      	lsls	r2, r3, #26
 80085c4:	d424      	bmi.n	8008610 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80085c6:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80085c8:	4620      	mov	r0, r4
 80085ca:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 80085cc:	695a      	ldr	r2, [r3, #20]
 80085ce:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80085d0:	f3c2 0210 	ubfx	r2, r2, #0, #17
 80085d4:	1a9b      	subs	r3, r3, r2
 80085d6:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80085d8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80085da:	f7f9 fff9 	bl	80025d0 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80085de:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80085e0:	049b      	lsls	r3, r3, #18
 80085e2:	d415      	bmi.n	8008610 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80085e4:	6821      	ldr	r1, [r4, #0]
 80085e6:	2301      	movs	r3, #1
 80085e8:	3144      	adds	r1, #68	@ 0x44
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80085ee:	69e2      	ldr	r2, [r4, #28]
 80085f0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80085f2:	f000 fb0e 	bl	8008c12 <HAL_MDMA_Start_IT>
 80085f6:	b158      	cbz	r0, 8008610 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80085f8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 80085fa:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80085fc:	f043 0304 	orr.w	r3, r3, #4
 8008600:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008602:	2306      	movs	r3, #6
 8008604:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8008608:	f7fa f832 	bl	8002670 <HAL_JPEG_ErrorCallback>
}
 800860c:	b002      	add	sp, #8
 800860e:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008610:	6822      	ldr	r2, [r4, #0]
 8008612:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008614:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008618:	6313      	str	r3, [r2, #48]	@ 0x30
 800861a:	e7f7      	b.n	800860c <JPEG_MDMAOutCpltCallback+0x6c>

0800861c <HAL_JPEG_IRQHandler>:
{
 800861c:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800861e:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 8008622:	4604      	mov	r4, r0
  switch (hjpeg->State)
 8008624:	3b03      	subs	r3, #3
 8008626:	2b01      	cmp	r3, #1
 8008628:	d850      	bhi.n	80086cc <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800862a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800862c:	f003 030c 	and.w	r3, r3, #12
 8008630:	2b08      	cmp	r3, #8
 8008632:	d103      	bne.n	800863c <HAL_JPEG_IRQHandler+0x20>
}
 8008634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 8008638:	f7ff be29 	b.w	800828e <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800863c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800863e:	f003 030c 	and.w	r3, r3, #12
 8008642:	2b0c      	cmp	r3, #12
 8008644:	d142      	bne.n	80086cc <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008646:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008648:	f003 0303 	and.w	r3, r3, #3
 800864c:	2b02      	cmp	r3, #2
 800864e:	d114      	bne.n	800867a <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8008650:	6803      	ldr	r3, [r0, #0]
 8008652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008654:	0659      	lsls	r1, r3, #25
 8008656:	d510      	bpl.n	800867a <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8008658:	1d01      	adds	r1, r0, #4
 800865a:	f7ff fbdd 	bl	8007e18 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800865e:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008660:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8008662:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008664:	f7f9 ff60 	bl	8002528 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800866c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008670:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8008672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008674:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008678:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800867e:	0692      	lsls	r2, r2, #26
 8008680:	d524      	bpl.n	80086cc <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8008682:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8008684:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8008686:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800868a:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	f022 0201 	bic.w	r2, r2, #1
 8008692:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008696:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800869a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800869c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800869e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80086a2:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80086a4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d101      	bne.n	80086b0 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 80086ac:	f000 fafa 	bl	8008ca4 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 80086b0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80086b2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d103      	bne.n	80086c2 <HAL_JPEG_IRQHandler+0xa6>
}
 80086ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 80086be:	f000 baf1 	b.w	8008ca4 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 80086c2:	4620      	mov	r0, r4
}
 80086c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 80086c8:	f7ff bf1e 	b.w	8008508 <JPEG_DMA_EndProcess>
}
 80086cc:	bd10      	pop	{r4, pc}

080086ce <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80086ce:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80086d0:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80086d2:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80086d6:	3284      	adds	r2, #132	@ 0x84
 80086d8:	1883      	adds	r3, r0, r2
{
 80086da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80086de:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80086e0:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80086e4:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80086e6:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80086ea:	684c      	ldr	r4, [r1, #4]
 80086ec:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80086f0:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80086f4:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80086f8:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80086fa:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80086fc:	68c5      	ldr	r5, [r0, #12]
 80086fe:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8008702:	443d      	add	r5, r7
 8008704:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008708:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800870a:	68c6      	ldr	r6, [r0, #12]
 800870c:	68cd      	ldr	r5, [r1, #12]
 800870e:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8008712:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008714:	689d      	ldr	r5, [r3, #8]
 8008716:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800871a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800871c:	688d      	ldr	r5, [r1, #8]
 800871e:	68c7      	ldr	r7, [r0, #12]
 8008720:	3501      	adds	r5, #1
 8008722:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8008726:	443d      	add	r5, r7
 8008728:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800872c:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800872e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008730:	691d      	ldr	r5, [r3, #16]
 8008732:	f025 0507 	bic.w	r5, r5, #7
 8008736:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008738:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800873a:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800873c:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008740:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008744:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008748:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800874c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8008750:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8008754:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8008758:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800875a:	695d      	ldr	r5, [r3, #20]
 800875c:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8008760:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008762:	694d      	ldr	r5, [r1, #20]
 8008764:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008766:	69dd      	ldr	r5, [r3, #28]
 8008768:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800876c:	f025 0507 	bic.w	r5, r5, #7
 8008770:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008772:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8008776:	433d      	orrs	r5, r7
 8008778:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800877a:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800877c:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800877e:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008782:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008784:	b31e      	cbz	r6, 80087ce <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008786:	2e01      	cmp	r6, #1
 8008788:	d023      	beq.n	80087d2 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800878a:	1eb5      	subs	r5, r6, #2
 800878c:	2d02      	cmp	r5, #2
 800878e:	d922      	bls.n	80087d6 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8008790:	2e07      	cmp	r6, #7
 8008792:	bf14      	ite	ne
 8008794:	2501      	movne	r5, #1
 8008796:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008798:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800879a:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800879e:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80087a2:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80087a4:	62de      	str	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80087a6:	3407      	adds	r4, #7
 80087a8:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80087aa:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80087ac:	436e      	muls	r6, r5
 80087ae:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80087b2:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80087b4:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80087b6:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 80087ba:	f024 0407 	bic.w	r4, r4, #7
 80087be:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80087c0:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80087c2:	5883      	ldr	r3, [r0, r2]
 80087c4:	f043 0301 	orr.w	r3, r3, #1
 80087c8:	5083      	str	r3, [r0, r2]
}
 80087ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80087ce:	2504      	movs	r5, #4
 80087d0:	e7e2      	b.n	8008798 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80087d2:	2503      	movs	r5, #3
 80087d4:	e7e0      	b.n	8008798 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80087d6:	2502      	movs	r5, #2
 80087d8:	e7de      	b.n	8008798 <LTDC_SetConfig+0xca>
	...

080087dc <HAL_LTDC_Init>:
{
 80087dc:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80087de:	4604      	mov	r4, r0
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d063      	beq.n	80088ac <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80087e4:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 80087e8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80087ec:	b91b      	cbnz	r3, 80087f6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80087ee:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 80087f2:	f7f8 fcd3 	bl	800119c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80087f6:	2302      	movs	r3, #2
 80087f8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80087fc:	6823      	ldr	r3, [r4, #0]
 80087fe:	699a      	ldr	r2, [r3, #24]
 8008800:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008804:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008806:	6999      	ldr	r1, [r3, #24]
 8008808:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800880c:	4302      	orrs	r2, r0
 800880e:	68e0      	ldr	r0, [r4, #12]
 8008810:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008812:	6920      	ldr	r0, [r4, #16]
 8008814:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008816:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008818:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800881a:	4925      	ldr	r1, [pc, #148]	@ (80088b0 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800881c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800881e:	689a      	ldr	r2, [r3, #8]
 8008820:	400a      	ands	r2, r1
 8008822:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008824:	689a      	ldr	r2, [r3, #8]
 8008826:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800882a:	69a0      	ldr	r0, [r4, #24]
 800882c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800882e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008830:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008832:	68da      	ldr	r2, [r3, #12]
 8008834:	400a      	ands	r2, r1
 8008836:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008838:	68da      	ldr	r2, [r3, #12]
 800883a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800883e:	6a20      	ldr	r0, [r4, #32]
 8008840:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008842:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008844:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008846:	691a      	ldr	r2, [r3, #16]
 8008848:	400a      	ands	r2, r1
 800884a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800884c:	691a      	ldr	r2, [r3, #16]
 800884e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008852:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8008854:	4302      	orrs	r2, r0
 8008856:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008858:	695a      	ldr	r2, [r3, #20]
 800885a:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 800885c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800885e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008860:	695a      	ldr	r2, [r3, #20]
 8008862:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008866:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008868:	430a      	orrs	r2, r1
 800886a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800886c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800886e:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008872:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008876:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800887a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800887c:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800887e:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8008882:	432a      	orrs	r2, r5
 8008884:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008888:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800888a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800888e:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008892:	f042 0206 	orr.w	r2, r2, #6
 8008896:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8008898:	699a      	ldr	r2, [r3, #24]
 800889a:	f042 0201 	orr.w	r2, r2, #1
 800889e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80088a0:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80088a2:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80088a6:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80088ac:	2001      	movs	r0, #1
 80088ae:	e7fc      	b.n	80088aa <HAL_LTDC_Init+0xce>
 80088b0:	f000f800 	.word	0xf000f800

080088b4 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 80088b4:	4770      	bx	lr

080088b6 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 80088b6:	4770      	bx	lr

080088b8 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 80088b8:	4770      	bx	lr

080088ba <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80088ba:	6803      	ldr	r3, [r0, #0]
{
 80088bc:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80088be:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 80088c0:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80088c2:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80088c4:	0772      	lsls	r2, r6, #29
 80088c6:	d514      	bpl.n	80088f2 <HAL_LTDC_IRQHandler+0x38>
 80088c8:	0769      	lsls	r1, r5, #29
 80088ca:	d512      	bpl.n	80088f2 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80088cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088ce:	f022 0204 	bic.w	r2, r2, #4
 80088d2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80088d4:	2204      	movs	r2, #4
 80088d6:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80088d8:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80088dc:	f043 0301 	orr.w	r3, r3, #1
 80088e0:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 80088e4:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80088e6:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80088ea:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80088ee:	f7ff ffe1 	bl	80088b4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80088f2:	07b2      	lsls	r2, r6, #30
 80088f4:	d516      	bpl.n	8008924 <HAL_LTDC_IRQHandler+0x6a>
 80088f6:	07ab      	lsls	r3, r5, #30
 80088f8:	d514      	bpl.n	8008924 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80088fa:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80088fc:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80088fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008900:	f022 0202 	bic.w	r2, r2, #2
 8008904:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008906:	2202      	movs	r2, #2
 8008908:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800890a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800890e:	4313      	orrs	r3, r2
 8008910:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008914:	2304      	movs	r3, #4
 8008916:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800891a:	2300      	movs	r3, #0
 800891c:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008920:	f7ff ffc8 	bl	80088b4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008924:	07f0      	lsls	r0, r6, #31
 8008926:	d510      	bpl.n	800894a <HAL_LTDC_IRQHandler+0x90>
 8008928:	07e9      	lsls	r1, r5, #31
 800892a:	d50e      	bpl.n	800894a <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800892c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800892e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008932:	f022 0201 	bic.w	r2, r2, #1
 8008936:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008938:	2201      	movs	r2, #1
 800893a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800893c:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800893e:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008942:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8008946:	f7ff ffb6 	bl	80088b6 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800894a:	0732      	lsls	r2, r6, #28
 800894c:	d511      	bpl.n	8008972 <HAL_LTDC_IRQHandler+0xb8>
 800894e:	072b      	lsls	r3, r5, #28
 8008950:	d50f      	bpl.n	8008972 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008952:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008954:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008958:	f022 0208 	bic.w	r2, r2, #8
 800895c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800895e:	2208      	movs	r2, #8
 8008960:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8008962:	2301      	movs	r3, #1
 8008964:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008968:	2300      	movs	r3, #0
 800896a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800896e:	f7ff ffa3 	bl	80088b8 <HAL_LTDC_ReloadEventCallback>
}
 8008972:	bd70      	pop	{r4, r5, r6, pc}

08008974 <HAL_LTDC_ConfigLayer>:
{
 8008974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8008978:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800897c:	4606      	mov	r6, r0
 800897e:	460f      	mov	r7, r1
 8008980:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8008982:	2b01      	cmp	r3, #1
 8008984:	f04f 0002 	mov.w	r0, #2
 8008988:	d01f      	beq.n	80089ca <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800898a:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800898c:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008990:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008992:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008996:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800899a:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800899e:	3438      	adds	r4, #56	@ 0x38
 80089a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089ac:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80089ae:	4630      	mov	r0, r6
 80089b0:	4662      	mov	r2, ip
 80089b2:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80089b4:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80089b6:	f7ff fe8a 	bl	80086ce <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80089ba:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80089bc:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80089be:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80089c2:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80089c6:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 80089ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080089d0 <HAL_LTDC_SetPitch>:
{
 80089d0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 80089d2:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	f04f 0302 	mov.w	r3, #2
 80089dc:	d02c      	beq.n	8008a38 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80089de:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80089e0:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80089e4:	fb04 0402 	mla	r4, r4, r2, r0
 80089e8:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80089ea:	b33c      	cbz	r4, 8008a3c <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80089ec:	2c01      	cmp	r4, #1
 80089ee:	d027      	beq.n	8008a40 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80089f0:	1ea5      	subs	r5, r4, #2
 80089f2:	429d      	cmp	r5, r3
 80089f4:	d902      	bls.n	80089fc <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 80089f6:	2c07      	cmp	r4, #7
 80089f8:	bf18      	it	ne
 80089fa:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80089fc:	01d2      	lsls	r2, r2, #7
 80089fe:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8008a00:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008a02:	3284      	adds	r2, #132	@ 0x84
 8008a04:	4422      	add	r2, r4
 8008a06:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 8008a08:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 8008a0c:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 8008a10:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8008a12:	4c0c      	ldr	r4, [pc, #48]	@ (8008a44 <HAL_LTDC_SetPitch+0x74>)
 8008a14:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008a16:	f045 0501 	orr.w	r5, r5, #1
 8008a1a:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8008a1c:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8008a1e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8008a22:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8008a24:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008a26:	f043 0301 	orr.w	r3, r3, #1
 8008a2a:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8008a32:	2300      	movs	r3, #0
 8008a34:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8008a3c:	2304      	movs	r3, #4
 8008a3e:	e7dd      	b.n	80089fc <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e7db      	b.n	80089fc <HAL_LTDC_SetPitch+0x2c>
 8008a44:	50001000 	.word	0x50001000

08008a48 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8008a48:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008a4a:	6804      	ldr	r4, [r0, #0]
 8008a4c:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008a50:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8008a54:	6965      	ldr	r5, [r4, #20]
 8008a56:	ea4f 4555 	mov.w	r5, r5, lsr #17
 8008a5a:	ea4f 4545 	mov.w	r5, r5, lsl #17
 8008a5e:	ea45 0503 	orr.w	r5, r5, r3
 8008a62:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8008a64:	9d03      	ldr	r5, [sp, #12]
 8008a66:	6963      	ldr	r3, [r4, #20]
 8008a68:	f105 35ff 	add.w	r5, r5, #4294967295
 8008a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a70:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8008a74:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8008a76:	f04f 031f 	mov.w	r3, #31
 8008a7a:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 8008a7c:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 8008a7e:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8008a80:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008a82:	bf0c      	ite	eq
 8008a84:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8008a88:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8008a8c:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8008a90:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8008a92:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008a94:	bf0c      	ite	eq
 8008a96:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8008a9a:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 8008a9e:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8008aa0:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8008aa2:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8008aa4:	bd30      	pop	{r4, r5, pc}

08008aa6 <HAL_MDMA_Init>:
{
 8008aa6:	b538      	push	{r3, r4, r5, lr}
 8008aa8:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008aaa:	f7fd fb61 	bl	8006170 <HAL_GetTick>
 8008aae:	4605      	mov	r5, r0
  if(hmdma == NULL)
 8008ab0:	2c00      	cmp	r4, #0
 8008ab2:	d061      	beq.n	8008b78 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 8008ab4:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 8008ab6:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8008ab8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008abc:	2302      	movs	r3, #2
 8008abe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8008ac2:	68d3      	ldr	r3, [r2, #12]
 8008ac4:	f023 0301 	bic.w	r3, r3, #1
 8008ac8:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	07d2      	lsls	r2, r2, #31
 8008ad0:	d448      	bmi.n	8008b64 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008ad2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008ada:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8008ade:	430a      	orrs	r2, r1
 8008ae0:	69e1      	ldr	r1, [r4, #28]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	6a21      	ldr	r1, [r4, #32]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008aea:	430a      	orrs	r2, r1
 8008aec:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008aee:	430a      	orrs	r2, r1
 8008af0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008af2:	430a      	orrs	r2, r1
 8008af4:	68a1      	ldr	r1, [r4, #8]
 8008af6:	430a      	orrs	r2, r1
 8008af8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8008afa:	3901      	subs	r1, #1
 8008afc:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008b00:	6861      	ldr	r1, [r4, #4]
 8008b02:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008b06:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008b08:	d103      	bne.n	8008b12 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008b0a:	691a      	ldr	r2, [r3, #16]
 8008b0c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8008b10:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008b12:	2200      	movs	r2, #0
 8008b14:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008b16:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008b18:	2a00      	cmp	r2, #0
 8008b1a:	da04      	bge.n	8008b26 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008b1c:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008b1e:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008b20:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8008b24:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8008b26:	b292      	uxth	r2, r2
 8008b28:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008b2a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008b2c:	2a00      	cmp	r2, #0
 8008b2e:	da25      	bge.n	8008b7c <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008b30:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008b32:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008b34:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 8008b38:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008b3a:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008b3c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008b40:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008b44:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	d019      	beq.n	8008b80 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008b4c:	b2c9      	uxtb	r1, r1
 8008b4e:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8008b50:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 8008b52:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008b54:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 8008b56:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 8008b58:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8008b5a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8008b5e:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 8008b62:	e00a      	b.n	8008b7a <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8008b64:	f7fd fb04 	bl	8006170 <HAL_GetTick>
 8008b68:	1b40      	subs	r0, r0, r5
 8008b6a:	2805      	cmp	r0, #5
 8008b6c:	d9ad      	bls.n	8008aca <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008b6e:	2340      	movs	r3, #64	@ 0x40
 8008b70:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008b72:	2303      	movs	r3, #3
 8008b74:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8008b78:	2001      	movs	r0, #1
}
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008b7c:	6a18      	ldr	r0, [r3, #32]
 8008b7e:	e7dd      	b.n	8008b3c <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8008b80:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b82:	e7e5      	b.n	8008b50 <HAL_MDMA_Init+0xaa>

08008b84 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8008b84:	b1d8      	cbz	r0, 8008bbe <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 8008b86:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008b88:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 8008b8a:	68d3      	ldr	r3, [r2, #12]
 8008b8c:	f023 0301 	bic.w	r3, r3, #1
 8008b90:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8008b96:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8008b98:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8008b9a:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8008b9c:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8008b9e:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8008ba0:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8008ba2:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8008ba4:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8008ba6:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008ba8:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008baa:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8008bac:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8008bae:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 8008bb2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 8008bb6:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 8008bba:	4618      	mov	r0, r3
 8008bbc:	4770      	bx	lr
    return HAL_ERROR;
 8008bbe:	2001      	movs	r0, #1
}
 8008bc0:	4770      	bx	lr

08008bc2 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 8008bc2:	4603      	mov	r3, r0
{
 8008bc4:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 8008bc6:	b300      	cbz	r0, 8008c0a <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 8008bc8:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8008bcc:	2801      	cmp	r0, #1
 8008bce:	d01e      	beq.n	8008c0e <HAL_MDMA_ConfigPostRequestMask+0x4c>
 8008bd0:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008bd2:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 8008bd6:	42a5      	cmp	r5, r4
 8008bd8:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 8008bda:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008bde:	d112      	bne.n	8008c06 <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8008be0:	681c      	ldr	r4, [r3, #0]
 8008be2:	6925      	ldr	r5, [r4, #16]
 8008be4:	006d      	lsls	r5, r5, #1
 8008be6:	d407      	bmi.n	8008bf8 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 8008be8:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 8008bea:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008bec:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 8008bee:	b939      	cbnz	r1, 8008c00 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008bf0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 8008bf4:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008bf6:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008bfe:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8008c00:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008c04:	e7f6      	b.n	8008bf4 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 8008c06:	4620      	mov	r0, r4
 8008c08:	e7f6      	b.n	8008bf8 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 8008c0a:	2001      	movs	r0, #1
 8008c0c:	e7f7      	b.n	8008bfe <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 8008c0e:	2002      	movs	r0, #2
 8008c10:	e7f5      	b.n	8008bfe <HAL_MDMA_ConfigPostRequestMask+0x3c>

08008c12 <HAL_MDMA_Start_IT>:
{
 8008c12:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 8008c14:	4604      	mov	r4, r0
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d042      	beq.n	8008ca0 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 8008c1a:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 8008c1e:	2d01      	cmp	r5, #1
 8008c20:	d03c      	beq.n	8008c9c <HAL_MDMA_Start_IT+0x8a>
 8008c22:	2501      	movs	r5, #1
 8008c24:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008c28:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 8008c2c:	2d01      	cmp	r5, #1
 8008c2e:	f04f 0500 	mov.w	r5, #0
 8008c32:	d131      	bne.n	8008c98 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8008c34:	2602      	movs	r6, #2
 8008c36:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008c3a:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8008c3c:	6805      	ldr	r5, [r0, #0]
 8008c3e:	68ee      	ldr	r6, [r5, #12]
 8008c40:	f026 0601 	bic.w	r6, r6, #1
 8008c44:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8008c46:	9e06      	ldr	r6, [sp, #24]
 8008c48:	9600      	str	r6, [sp, #0]
 8008c4a:	f7ff fefd 	bl	8008a48 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8008c4e:	68eb      	ldr	r3, [r5, #12]
 8008c50:	f043 0306 	orr.w	r3, r3, #6
 8008c54:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 8008c56:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8008c58:	b11b      	cbz	r3, 8008c62 <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8008c5a:	68eb      	ldr	r3, [r5, #12]
 8008c5c:	f043 0310 	orr.w	r3, r3, #16
 8008c60:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008c62:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008c64:	b11b      	cbz	r3, 8008c6e <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8008c66:	68eb      	ldr	r3, [r5, #12]
 8008c68:	f043 0308 	orr.w	r3, r3, #8
 8008c6c:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 8008c6e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008c70:	b11b      	cbz	r3, 8008c7a <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8008c72:	68eb      	ldr	r3, [r5, #12]
 8008c74:	f043 0320 	orr.w	r3, r3, #32
 8008c78:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 8008c7a:	68eb      	ldr	r3, [r5, #12]
 8008c7c:	f043 0301 	orr.w	r3, r3, #1
 8008c80:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008c82:	6863      	ldr	r3, [r4, #4]
 8008c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c88:	d103      	bne.n	8008c92 <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8008c8a:	68eb      	ldr	r3, [r5, #12]
 8008c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c90:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8008c92:	2000      	movs	r0, #0
}
 8008c94:	b002      	add	sp, #8
 8008c96:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 8008c98:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 8008c9c:	2002      	movs	r0, #2
 8008c9e:	e7f9      	b.n	8008c94 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 8008ca0:	2001      	movs	r0, #1
 8008ca2:	e7f7      	b.n	8008c94 <HAL_MDMA_Start_IT+0x82>

08008ca4 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 8008ca4:	b128      	cbz	r0, 8008cb2 <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8008ca6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d003      	beq.n	8008cb6 <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8008cae:	2380      	movs	r3, #128	@ 0x80
 8008cb0:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 8008cb6:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008cb8:	2304      	movs	r3, #4
 8008cba:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 8008cbe:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 8008cc0:	68d3      	ldr	r3, [r2, #12]
 8008cc2:	f023 0301 	bic.w	r3, r3, #1
 8008cc6:	60d3      	str	r3, [r2, #12]
}
 8008cc8:	4770      	bx	lr
	...

08008ccc <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 8008ccc:	2300      	movs	r3, #0
{
 8008cce:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 8008cd0:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008cd2:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 8008cd6:	4b58      	ldr	r3, [pc, #352]	@ (8008e38 <HAL_MDMA_IRQHandler+0x16c>)
{
 8008cd8:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008cda:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8008cdc:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008cde:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008ce0:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008ce2:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 8008ce6:	3a40      	subs	r2, #64	@ 0x40
 8008ce8:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8008cec:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008cf0:	4202      	tst	r2, r0
 8008cf2:	f000 809e 	beq.w	8008e32 <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	07d1      	lsls	r1, r2, #31
 8008cfa:	d529      	bpl.n	8008d50 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8008cfc:	68da      	ldr	r2, [r3, #12]
 8008cfe:	0792      	lsls	r2, r2, #30
 8008d00:	d526      	bpl.n	8008d50 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8008d02:	68da      	ldr	r2, [r3, #12]
 8008d04:	f022 0202 	bic.w	r2, r2, #2
 8008d08:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 8008d0a:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008d0c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8008d0e:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008d10:	bf54      	ite	pl
 8008d12:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8008d16:	f041 0102 	orrmi.w	r1, r1, #2
 8008d1a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8008d1c:	0591      	lsls	r1, r2, #22
 8008d1e:	d503      	bpl.n	8008d28 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8008d20:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008d22:	f041 0104 	orr.w	r1, r1, #4
 8008d26:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8008d28:	05d0      	lsls	r0, r2, #23
 8008d2a:	d503      	bpl.n	8008d34 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8008d2c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008d2e:	f041 0108 	orr.w	r1, r1, #8
 8008d32:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8008d34:	0551      	lsls	r1, r2, #21
 8008d36:	d503      	bpl.n	8008d40 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8008d38:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008d3a:	f041 0110 	orr.w	r1, r1, #16
 8008d3e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8008d40:	0512      	lsls	r2, r2, #20
 8008d42:	d503      	bpl.n	8008d4c <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8008d44:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8008d46:	f042 0220 	orr.w	r2, r2, #32
 8008d4a:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	06d0      	lsls	r0, r2, #27
 8008d54:	d508      	bpl.n	8008d68 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8008d56:	68da      	ldr	r2, [r3, #12]
 8008d58:	0691      	lsls	r1, r2, #26
 8008d5a:	d505      	bpl.n	8008d68 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8008d5c:	2210      	movs	r2, #16
 8008d5e:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8008d60:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008d62:	b10b      	cbz	r3, 8008d68 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 8008d64:	4620      	mov	r0, r4
 8008d66:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	0712      	lsls	r2, r2, #28
 8008d6e:	d508      	bpl.n	8008d82 <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8008d70:	68da      	ldr	r2, [r3, #12]
 8008d72:	06d0      	lsls	r0, r2, #27
 8008d74:	d505      	bpl.n	8008d82 <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8008d76:	2208      	movs	r2, #8
 8008d78:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 8008d7a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008d7c:	b10b      	cbz	r3, 8008d82 <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 8008d7e:	4620      	mov	r0, r4
 8008d80:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	0751      	lsls	r1, r2, #29
 8008d88:	d508      	bpl.n	8008d9c <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8008d8a:	68da      	ldr	r2, [r3, #12]
 8008d8c:	0712      	lsls	r2, r2, #28
 8008d8e:	d505      	bpl.n	8008d9c <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8008d90:	2204      	movs	r2, #4
 8008d92:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008d94:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008d96:	b10b      	cbz	r3, 8008d9c <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8008d98:	4620      	mov	r0, r4
 8008d9a:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	0790      	lsls	r0, r2, #30
 8008da2:	d524      	bpl.n	8008dee <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8008da4:	68da      	ldr	r2, [r3, #12]
 8008da6:	0751      	lsls	r1, r2, #29
 8008da8:	d521      	bpl.n	8008dee <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8008daa:	68da      	ldr	r2, [r3, #12]
 8008dac:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8008db0:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8008db2:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8008db6:	2a04      	cmp	r2, #4
 8008db8:	f04f 0200 	mov.w	r2, #0
 8008dbc:	d10c      	bne.n	8008dd8 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 8008dbe:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 8008dc0:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8008dc4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8008dc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d031      	beq.n	8008e32 <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 8008dce:	4620      	mov	r0, r4
}
 8008dd0:	b003      	add	sp, #12
 8008dd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 8008dd6:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8008dd8:	2102      	movs	r1, #2
 8008dda:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 8008ddc:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 8008dde:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8008de2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8008de6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008de8:	b10b      	cbz	r3, 8008dee <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 8008dea:	4620      	mov	r0, r4
 8008dec:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8008dee:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8008df0:	b1fb      	cbz	r3, 8008e32 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 8008df2:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8008df6:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008dfa:	2304      	movs	r3, #4
 8008dfc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	68da      	ldr	r2, [r3, #12]
 8008e04:	f022 0201 	bic.w	r2, r2, #1
 8008e08:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 8008e0a:	9a01      	ldr	r2, [sp, #4]
 8008e0c:	3201      	adds	r2, #1
 8008e0e:	42aa      	cmp	r2, r5
 8008e10:	9201      	str	r2, [sp, #4]
 8008e12:	d802      	bhi.n	8008e1a <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8008e14:	68da      	ldr	r2, [r3, #12]
 8008e16:	07d2      	lsls	r2, r2, #31
 8008e18:	d4f7      	bmi.n	8008e0a <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008e24:	bf4c      	ite	mi
 8008e26:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8008e28:	2301      	movpl	r3, #1
 8008e2a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8008e2e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008e30:	e7cb      	b.n	8008dca <HAL_MDMA_IRQHandler+0xfe>
}
 8008e32:	b003      	add	sp, #12
 8008e34:	bd30      	pop	{r4, r5, pc}
 8008e36:	bf00      	nop
 8008e38:	2400006c 	.word	0x2400006c

08008e3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008e3c:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008e3e:	4d1c      	ldr	r5, [pc, #112]	@ (8008eb0 <HAL_PWREx_ConfigSupply+0x74>)
{
 8008e40:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008e42:	68eb      	ldr	r3, [r5, #12]
 8008e44:	f003 0307 	and.w	r3, r3, #7
 8008e48:	2b06      	cmp	r3, #6
 8008e4a:	d006      	beq.n	8008e5a <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008e4c:	68e8      	ldr	r0, [r5, #12]
 8008e4e:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8008e52:	1b00      	subs	r0, r0, r4
 8008e54:	bf18      	it	ne
 8008e56:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008e58:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008e5a:	68eb      	ldr	r3, [r5, #12]
 8008e5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008e60:	4303      	orrs	r3, r0
 8008e62:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8008e64:	f7fd f984 	bl	8006170 <HAL_GetTick>
 8008e68:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e6a:	686b      	ldr	r3, [r5, #4]
 8008e6c:	049a      	lsls	r2, r3, #18
 8008e6e:	d508      	bpl.n	8008e82 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008e70:	f1a4 031d 	sub.w	r3, r4, #29
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d90c      	bls.n	8008e92 <HAL_PWREx_ConfigSupply+0x56>
 8008e78:	3c2d      	subs	r4, #45	@ 0x2d
 8008e7a:	2c01      	cmp	r4, #1
 8008e7c:	d909      	bls.n	8008e92 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 8008e7e:	2000      	movs	r0, #0
 8008e80:	e7ea      	b.n	8008e58 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008e82:	f7fd f975 	bl	8006170 <HAL_GetTick>
 8008e86:	1b80      	subs	r0, r0, r6
 8008e88:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008e8c:	d9ed      	bls.n	8008e6a <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8008e8e:	2001      	movs	r0, #1
 8008e90:	e7e2      	b.n	8008e58 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8008e92:	f7fd f96d 	bl	8006170 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008e96:	4d06      	ldr	r5, [pc, #24]	@ (8008eb0 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8008e98:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008e9a:	68eb      	ldr	r3, [r5, #12]
 8008e9c:	03db      	lsls	r3, r3, #15
 8008e9e:	d4ee      	bmi.n	8008e7e <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008ea0:	f7fd f966 	bl	8006170 <HAL_GetTick>
 8008ea4:	1b00      	subs	r0, r0, r4
 8008ea6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008eaa:	d9f6      	bls.n	8008e9a <HAL_PWREx_ConfigSupply+0x5e>
 8008eac:	e7ef      	b.n	8008e8e <HAL_PWREx_ConfigSupply+0x52>
 8008eae:	bf00      	nop
 8008eb0:	58024800 	.word	0x58024800

08008eb4 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8008eb8:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 8008eba:	b136      	cbz	r6, 8008eca <QSPI_Config+0x16>
 8008ebc:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8008ec0:	d003      	beq.n	8008eca <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008ec2:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8008ec4:	6804      	ldr	r4, [r0, #0]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008eca:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008ece:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008ed2:	f1ba 0f00 	cmp.w	sl, #0
 8008ed6:	d04c      	beq.n	8008f72 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008ed8:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008eda:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008edc:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 8008ee0:	ea4a 0406 	orr.w	r4, sl, r6
 8008ee4:	680b      	ldr	r3, [r1, #0]
 8008ee6:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 8008eea:	ea44 0a02 	orr.w	sl, r4, r2
 8008eee:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008ef2:	f1be 0f00 	cmp.w	lr, #0
 8008ef6:	d024      	beq.n	8008f42 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008ef8:	688e      	ldr	r6, [r1, #8]
 8008efa:	ea4a 040e 	orr.w	r4, sl, lr
 8008efe:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f00:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008f02:	b19f      	cbz	r7, 8008f2c <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f04:	433b      	orrs	r3, r7
 8008f06:	4303      	orrs	r3, r0
 8008f08:	68c8      	ldr	r0, [r1, #12]
 8008f0a:	ea43 0309 	orr.w	r3, r3, r9
 8008f0e:	ea43 0308 	orr.w	r3, r3, r8
 8008f12:	4333      	orrs	r3, r6
 8008f14:	4303      	orrs	r3, r0
 8008f16:	ea43 030c 	orr.w	r3, r3, ip
 8008f1a:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008f1c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f20:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008f22:	d001      	beq.n	8008f28 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008f24:	684b      	ldr	r3, [r1, #4]
 8008f26:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8008f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f2c:	4303      	orrs	r3, r0
 8008f2e:	ea43 0309 	orr.w	r3, r3, r9
 8008f32:	ea43 0308 	orr.w	r3, r3, r8
 8008f36:	4333      	orrs	r3, r6
 8008f38:	ea43 030c 	orr.w	r3, r3, ip
 8008f3c:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f3e:	616b      	str	r3, [r5, #20]
 8008f40:	e7f2      	b.n	8008f28 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008f42:	b167      	cbz	r7, 8008f5e <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f44:	433b      	orrs	r3, r7
 8008f46:	4303      	orrs	r3, r0
 8008f48:	68c8      	ldr	r0, [r1, #12]
 8008f4a:	ea43 0309 	orr.w	r3, r3, r9
 8008f4e:	ea43 0308 	orr.w	r3, r3, r8
 8008f52:	4303      	orrs	r3, r0
 8008f54:	ea43 030c 	orr.w	r3, r3, ip
 8008f58:	ea43 030a 	orr.w	r3, r3, sl
 8008f5c:	e7de      	b.n	8008f1c <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f5e:	4303      	orrs	r3, r0
 8008f60:	ea43 0309 	orr.w	r3, r3, r9
 8008f64:	ea43 0408 	orr.w	r4, r3, r8
 8008f68:	ea44 030c 	orr.w	r3, r4, ip
 8008f6c:	ea43 030a 	orr.w	r3, r3, sl
 8008f70:	e7e5      	b.n	8008f3e <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008f72:	f1be 0f00 	cmp.w	lr, #0
 8008f76:	d02c      	beq.n	8008fd2 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008f78:	ea46 050e 	orr.w	r5, r6, lr
 8008f7c:	688b      	ldr	r3, [r1, #8]
 8008f7e:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f80:	694e      	ldr	r6, [r1, #20]
 8008f82:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008f84:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f86:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f8a:	04b6      	lsls	r6, r6, #18
 8008f8c:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f8e:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008f92:	b1a7      	cbz	r7, 8008fbe <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f94:	433b      	orrs	r3, r7
 8008f96:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008f98:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008f9c:	ea43 0308 	orr.w	r3, r3, r8
 8008fa0:	ea43 030e 	orr.w	r3, r3, lr
 8008fa4:	ea43 030c 	orr.w	r3, r3, ip
 8008fa8:	ea43 0300 	orr.w	r3, r3, r0
 8008fac:	ea43 0306 	orr.w	r3, r3, r6
 8008fb0:	ea43 0305 	orr.w	r3, r3, r5
 8008fb4:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008fb6:	d0b7      	beq.n	8008f28 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008fb8:	684b      	ldr	r3, [r1, #4]
 8008fba:	61a3      	str	r3, [r4, #24]
 8008fbc:	e7b4      	b.n	8008f28 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008fbe:	ea43 0308 	orr.w	r3, r3, r8
 8008fc2:	ea43 030e 	orr.w	r3, r3, lr
 8008fc6:	ea43 030c 	orr.w	r3, r3, ip
 8008fca:	4333      	orrs	r3, r6
 8008fcc:	432b      	orrs	r3, r5
 8008fce:	6163      	str	r3, [r4, #20]
 8008fd0:	e7aa      	b.n	8008f28 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008fd2:	b1d7      	cbz	r7, 800900a <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008fd4:	ea46 0307 	orr.w	r3, r6, r7
 8008fd8:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8008fda:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008fdc:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008fe0:	ea43 0302 	orr.w	r3, r3, r2
 8008fe4:	ea43 0304 	orr.w	r3, r3, r4
 8008fe8:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 8008fea:	ea43 0304 	orr.w	r3, r3, r4
 8008fee:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8008ff0:	ea43 0304 	orr.w	r3, r3, r4
 8008ff4:	68cc      	ldr	r4, [r1, #12]
 8008ff6:	ea43 0304 	orr.w	r3, r3, r4
 8008ffa:	694c      	ldr	r4, [r1, #20]
 8008ffc:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8009000:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009002:	d091      	beq.n	8008f28 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009004:	684b      	ldr	r3, [r1, #4]
 8009006:	6183      	str	r3, [r0, #24]
 8009008:	e78e      	b.n	8008f28 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800900a:	2e00      	cmp	r6, #0
 800900c:	d08c      	beq.n	8008f28 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800900e:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8009010:	6800      	ldr	r0, [r0, #0]
 8009012:	4333      	orrs	r3, r6
 8009014:	4313      	orrs	r3, r2
 8009016:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8009018:	4313      	orrs	r3, r2
 800901a:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 800901c:	4313      	orrs	r3, r2
 800901e:	694a      	ldr	r2, [r1, #20]
 8009020:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8009024:	6143      	str	r3, [r0, #20]
}
 8009026:	e77f      	b.n	8008f28 <QSPI_Config+0x74>

08009028 <QSPI_WaitFlagStateUntilTimeout>:
{
 8009028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800902c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009030:	4604      	mov	r4, r0
 8009032:	460e      	mov	r6, r1
 8009034:	4615      	mov	r5, r2
 8009036:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009038:	6822      	ldr	r2, [r4, #0]
 800903a:	6893      	ldr	r3, [r2, #8]
 800903c:	4233      	tst	r3, r6
 800903e:	bf14      	ite	ne
 8009040:	2301      	movne	r3, #1
 8009042:	2300      	moveq	r3, #0
 8009044:	42ab      	cmp	r3, r5
 8009046:	d101      	bne.n	800904c <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8009048:	2000      	movs	r0, #0
 800904a:	e012      	b.n	8009072 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800904c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009050:	d0f3      	beq.n	800903a <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009052:	f7fd f88d 	bl	8006170 <HAL_GetTick>
 8009056:	1bc0      	subs	r0, r0, r7
 8009058:	4540      	cmp	r0, r8
 800905a:	d802      	bhi.n	8009062 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800905c:	f1b8 0f00 	cmp.w	r8, #0
 8009060:	d1ea      	bne.n	8009038 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009062:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009064:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009066:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800906a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800906c:	f043 0301 	orr.w	r3, r3, #1
 8009070:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8009072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009078 <HAL_QSPI_Init>:
{
 8009078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800907a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800907c:	f7fd f878 	bl	8006170 <HAL_GetTick>
 8009080:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8009082:	2c00      	cmp	r4, #0
 8009084:	d03f      	beq.n	8009106 <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009086:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800908a:	b92b      	cbnz	r3, 8009098 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 800908c:	4620      	mov	r0, r4
 800908e:	f7f8 f8c3 	bl	8001218 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8009092:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009096:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009098:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800909a:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800909c:	68a3      	ldr	r3, [r4, #8]
 800909e:	680a      	ldr	r2, [r1, #0]
 80090a0:	3b01      	subs	r3, #1
 80090a2:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 80090a6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80090aa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80090ac:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80090ae:	2200      	movs	r2, #0
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	2120      	movs	r1, #32
 80090b4:	462b      	mov	r3, r5
 80090b6:	f7ff ffb7 	bl	8009028 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80090ba:	bb10      	cbnz	r0, 8009102 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80090bc:	6822      	ldr	r2, [r4, #0]
 80090be:	69e5      	ldr	r5, [r4, #28]
 80090c0:	68e3      	ldr	r3, [r4, #12]
 80090c2:	6811      	ldr	r1, [r2, #0]
 80090c4:	432b      	orrs	r3, r5
 80090c6:	6a25      	ldr	r5, [r4, #32]
 80090c8:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80090cc:	432b      	orrs	r3, r5
 80090ce:	6865      	ldr	r5, [r4, #4]
 80090d0:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 80090d4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80090d8:	430b      	orrs	r3, r1
 80090da:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80090dc:	6855      	ldr	r5, [r2, #4]
 80090de:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80090e2:	430b      	orrs	r3, r1
 80090e4:	6921      	ldr	r1, [r4, #16]
 80090e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80090ea:	4908      	ldr	r1, [pc, #32]	@ (800910c <HAL_QSPI_Init+0x94>)
 80090ec:	4029      	ands	r1, r5
 80090ee:	430b      	orrs	r3, r1
 80090f0:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80090f2:	6813      	ldr	r3, [r2, #0]
 80090f4:	f043 0301 	orr.w	r3, r3, #1
 80090f8:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80090fa:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80090fc:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80090fe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8009102:	b003      	add	sp, #12
 8009104:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8009106:	2001      	movs	r0, #1
 8009108:	e7fb      	b.n	8009102 <HAL_QSPI_Init+0x8a>
 800910a:	bf00      	nop
 800910c:	ffe0f8fe 	.word	0xffe0f8fe

08009110 <HAL_QSPI_Command>:
{
 8009110:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009114:	4604      	mov	r4, r0
 8009116:	468a      	mov	sl, r1
 8009118:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800911a:	f7fd f829 	bl	8006170 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800911e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009122:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 8009124:	2b01      	cmp	r3, #1
 8009126:	d036      	beq.n	8009196 <HAL_QSPI_Command+0x86>
 8009128:	2301      	movs	r3, #1
 800912a:	2602      	movs	r6, #2
 800912c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009130:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009134:	2b01      	cmp	r3, #1
 8009136:	fa5f f983 	uxtb.w	r9, r3
 800913a:	d128      	bne.n	800918e <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800913c:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800913e:	4603      	mov	r3, r0
 8009140:	2120      	movs	r1, #32
 8009142:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009144:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8009146:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800914a:	f8cd 8000 	str.w	r8, [sp]
 800914e:	f7ff ff6b 	bl	8009028 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009152:	4605      	mov	r5, r0
 8009154:	b9a0      	cbnz	r0, 8009180 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009156:	4602      	mov	r2, r0
 8009158:	4651      	mov	r1, sl
 800915a:	4620      	mov	r0, r4
 800915c:	f7ff feaa 	bl	8008eb4 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8009160:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8009164:	b953      	cbnz	r3, 800917c <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009166:	463b      	mov	r3, r7
 8009168:	464a      	mov	r2, r9
 800916a:	4631      	mov	r1, r6
 800916c:	4620      	mov	r0, r4
 800916e:	f8cd 8000 	str.w	r8, [sp]
 8009172:	f7ff ff59 	bl	8009028 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009176:	b960      	cbnz	r0, 8009192 <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800917c:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009180:	2300      	movs	r3, #0
 8009182:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009186:	4628      	mov	r0, r5
 8009188:	b002      	add	sp, #8
 800918a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800918e:	4635      	mov	r5, r6
 8009190:	e7f6      	b.n	8009180 <HAL_QSPI_Command+0x70>
 8009192:	4605      	mov	r5, r0
 8009194:	e7f4      	b.n	8009180 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8009196:	2502      	movs	r5, #2
 8009198:	e7f5      	b.n	8009186 <HAL_QSPI_Command+0x76>

0800919a <HAL_QSPI_Transmit>:
{
 800919a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800919e:	4604      	mov	r4, r0
 80091a0:	4688      	mov	r8, r1
 80091a2:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80091a4:	f7fc ffe4 	bl	8006170 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80091a8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80091ac:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80091ae:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d04c      	beq.n	800924e <HAL_QSPI_Transmit+0xb4>
 80091b4:	2301      	movs	r3, #1
 80091b6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80091ba:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80091be:	2b01      	cmp	r3, #1
 80091c0:	b2d8      	uxtb	r0, r3
 80091c2:	d142      	bne.n	800924a <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80091c4:	2300      	movs	r3, #0
 80091c6:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 80091c8:	f1b8 0f00 	cmp.w	r8, #0
 80091cc:	d038      	beq.n	8009240 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80091ce:	2312      	movs	r3, #18
 80091d0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80091d4:	692b      	ldr	r3, [r5, #16]
 80091d6:	3301      	adds	r3, #1
 80091d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80091da:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80091dc:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80091e0:	3301      	adds	r3, #1
 80091e2:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80091e4:	696b      	ldr	r3, [r5, #20]
 80091e6:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80091ea:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80091ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80091ee:	b99b      	cbnz	r3, 8009218 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80091f0:	4633      	mov	r3, r6
 80091f2:	2201      	movs	r2, #1
 80091f4:	2102      	movs	r1, #2
 80091f6:	4620      	mov	r0, r4
 80091f8:	9700      	str	r7, [sp, #0]
 80091fa:	f7ff ff15 	bl	8009028 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80091fe:	b910      	cbnz	r0, 8009206 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	2202      	movs	r2, #2
 8009204:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009206:	2301      	movs	r3, #1
 8009208:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800920c:	2300      	movs	r3, #0
 800920e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009212:	b002      	add	sp, #8
 8009214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8009218:	4633      	mov	r3, r6
 800921a:	2201      	movs	r2, #1
 800921c:	2104      	movs	r1, #4
 800921e:	4620      	mov	r0, r4
 8009220:	9700      	str	r7, [sp, #0]
 8009222:	f7ff ff01 	bl	8009028 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8009226:	2800      	cmp	r0, #0
 8009228:	d1ed      	bne.n	8009206 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800922a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 8009232:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009234:	3301      	adds	r3, #1
 8009236:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 8009238:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800923a:	3b01      	subs	r3, #1
 800923c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800923e:	e7d5      	b.n	80091ec <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009240:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009242:	f043 0308 	orr.w	r3, r3, #8
 8009246:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 8009248:	e7e0      	b.n	800920c <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800924a:	2002      	movs	r0, #2
 800924c:	e7de      	b.n	800920c <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800924e:	2002      	movs	r0, #2
 8009250:	e7df      	b.n	8009212 <HAL_QSPI_Transmit+0x78>

08009252 <HAL_QSPI_Receive>:
{
 8009252:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009256:	4604      	mov	r4, r0
 8009258:	4617      	mov	r7, r2
 800925a:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800925c:	f7fc ff88 	bl	8006170 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009260:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8009262:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009264:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 8009266:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800926a:	2b01      	cmp	r3, #1
 800926c:	d04f      	beq.n	800930e <HAL_QSPI_Receive+0xbc>
 800926e:	2301      	movs	r3, #1
 8009270:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009274:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009278:	2b01      	cmp	r3, #1
 800927a:	b2d8      	uxtb	r0, r3
 800927c:	d145      	bne.n	800930a <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800927e:	2300      	movs	r3, #0
 8009280:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8009282:	f1b8 0f00 	cmp.w	r8, #0
 8009286:	d03b      	beq.n	8009300 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8009288:	2322      	movs	r3, #34	@ 0x22
 800928a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800928e:	692b      	ldr	r3, [r5, #16]
 8009290:	3301      	adds	r3, #1
 8009292:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009294:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8009296:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800929a:	3301      	adds	r3, #1
 800929c:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800929e:	6969      	ldr	r1, [r5, #20]
 80092a0:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 80092a4:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 80092a8:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80092aa:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 80092ac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80092ae:	b99b      	cbnz	r3, 80092d8 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80092b0:	4633      	mov	r3, r6
 80092b2:	2201      	movs	r2, #1
 80092b4:	2102      	movs	r1, #2
 80092b6:	4620      	mov	r0, r4
 80092b8:	9700      	str	r7, [sp, #0]
 80092ba:	f7ff feb5 	bl	8009028 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80092be:	b910      	cbnz	r0, 80092c6 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	2202      	movs	r2, #2
 80092c4:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 80092c6:	2301      	movs	r3, #1
 80092c8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80092cc:	2300      	movs	r3, #0
 80092ce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80092d2:	b002      	add	sp, #8
 80092d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80092d8:	4633      	mov	r3, r6
 80092da:	2201      	movs	r2, #1
 80092dc:	2106      	movs	r1, #6
 80092de:	4620      	mov	r0, r4
 80092e0:	9700      	str	r7, [sp, #0]
 80092e2:	f7ff fea1 	bl	8009028 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d1ed      	bne.n	80092c6 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80092ea:	f895 2020 	ldrb.w	r2, [r5, #32]
 80092ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80092f0:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80092f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80092f4:	3301      	adds	r3, #1
 80092f6:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 80092f8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80092fa:	3b01      	subs	r3, #1
 80092fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80092fe:	e7d5      	b.n	80092ac <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009300:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009302:	f043 0308 	orr.w	r3, r3, #8
 8009306:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 8009308:	e7e0      	b.n	80092cc <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800930a:	2002      	movs	r0, #2
 800930c:	e7de      	b.n	80092cc <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800930e:	2002      	movs	r0, #2
 8009310:	e7df      	b.n	80092d2 <HAL_QSPI_Receive+0x80>

08009312 <HAL_QSPI_AutoPolling>:
{
 8009312:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009316:	4604      	mov	r4, r0
 8009318:	461f      	mov	r7, r3
 800931a:	4689      	mov	r9, r1
 800931c:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800931e:	f7fc ff27 	bl	8006170 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009322:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009326:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 8009328:	2b01      	cmp	r3, #1
 800932a:	d041      	beq.n	80093b0 <HAL_QSPI_AutoPolling+0x9e>
 800932c:	2301      	movs	r3, #1
 800932e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009332:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009336:	2b01      	cmp	r3, #1
 8009338:	fa5f f883 	uxtb.w	r8, r3
 800933c:	d136      	bne.n	80093ac <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800933e:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009340:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009342:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009344:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009346:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800934a:	4603      	mov	r3, r0
 800934c:	9700      	str	r7, [sp, #0]
 800934e:	4620      	mov	r0, r4
 8009350:	f7ff fe6a 	bl	8009028 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009354:	bb20      	cbnz	r0, 80093a0 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009356:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009358:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800935a:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800935c:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800935e:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8009360:	686b      	ldr	r3, [r5, #4]
 8009362:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8009364:	68ab      	ldr	r3, [r5, #8]
 8009366:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009368:	6813      	ldr	r3, [r2, #0]
 800936a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800936e:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009370:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009372:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009376:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009378:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800937c:	68eb      	ldr	r3, [r5, #12]
 800937e:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009382:	f7ff fd97 	bl	8008eb4 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8009386:	4633      	mov	r3, r6
 8009388:	4642      	mov	r2, r8
 800938a:	2108      	movs	r1, #8
 800938c:	4620      	mov	r0, r4
 800938e:	9700      	str	r7, [sp, #0]
 8009390:	f7ff fe4a 	bl	8009028 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8009394:	b920      	cbnz	r0, 80093a0 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	2208      	movs	r2, #8
 800939a:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800939c:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80093a0:	2300      	movs	r3, #0
 80093a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80093a6:	b003      	add	sp, #12
 80093a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 80093ac:	2002      	movs	r0, #2
 80093ae:	e7f7      	b.n	80093a0 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 80093b0:	2002      	movs	r0, #2
 80093b2:	e7f8      	b.n	80093a6 <HAL_QSPI_AutoPolling+0x94>

080093b4 <HAL_QSPI_MemoryMapped>:
{
 80093b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093b6:	4604      	mov	r4, r0
 80093b8:	4616      	mov	r6, r2
 80093ba:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80093bc:	f7fc fed8 	bl	8006170 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80093c0:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80093c4:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80093c6:	2a01      	cmp	r2, #1
 80093c8:	d033      	beq.n	8009432 <HAL_QSPI_MemoryMapped+0x7e>
 80093ca:	2201      	movs	r2, #1
 80093cc:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80093d0:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 80093d4:	2a01      	cmp	r2, #1
 80093d6:	d12a      	bne.n	800942e <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80093d8:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80093da:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80093dc:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80093de:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80093e0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80093e4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80093e6:	9100      	str	r1, [sp, #0]
 80093e8:	2120      	movs	r1, #32
 80093ea:	f7ff fe1d 	bl	8009028 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80093ee:	4605      	mov	r5, r0
 80093f0:	b9b8      	cbnz	r0, 8009422 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	6872      	ldr	r2, [r6, #4]
 80093f6:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80093f8:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80093fa:	f020 0008 	bic.w	r0, r0, #8
 80093fe:	ea40 0002 	orr.w	r0, r0, r2
 8009402:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8009404:	d107      	bne.n	8009416 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8009406:	6832      	ldr	r2, [r6, #0]
 8009408:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800940a:	2210      	movs	r2, #16
 800940c:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8009414:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8009416:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800941a:	4639      	mov	r1, r7
 800941c:	4620      	mov	r0, r4
 800941e:	f7ff fd49 	bl	8008eb4 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8009422:	2300      	movs	r3, #0
 8009424:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009428:	4628      	mov	r0, r5
 800942a:	b003      	add	sp, #12
 800942c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800942e:	2502      	movs	r5, #2
 8009430:	e7f7      	b.n	8009422 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8009432:	2502      	movs	r5, #2
 8009434:	e7f8      	b.n	8009428 <HAL_QSPI_MemoryMapped+0x74>
	...

08009438 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800943a:	4604      	mov	r4, r0
 800943c:	2800      	cmp	r0, #0
 800943e:	d074      	beq.n	800952a <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009440:	6803      	ldr	r3, [r0, #0]
 8009442:	07d8      	lsls	r0, r3, #31
 8009444:	d45e      	bmi.n	8009504 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	0799      	lsls	r1, r3, #30
 800944a:	f100 80ad 	bmi.w	80095a8 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	06da      	lsls	r2, r3, #27
 8009452:	d527      	bpl.n	80094a4 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009454:	4a9c      	ldr	r2, [pc, #624]	@ (80096c8 <HAL_RCC_OscConfig+0x290>)
 8009456:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009458:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800945a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800945e:	2b08      	cmp	r3, #8
 8009460:	d007      	beq.n	8009472 <HAL_RCC_OscConfig+0x3a>
 8009462:	2b18      	cmp	r3, #24
 8009464:	f040 8103 	bne.w	800966e <HAL_RCC_OscConfig+0x236>
 8009468:	f001 0303 	and.w	r3, r1, #3
 800946c:	2b01      	cmp	r3, #1
 800946e:	f040 80fe 	bne.w	800966e <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009472:	6813      	ldr	r3, [r2, #0]
 8009474:	05db      	lsls	r3, r3, #23
 8009476:	d502      	bpl.n	800947e <HAL_RCC_OscConfig+0x46>
 8009478:	69e3      	ldr	r3, [r4, #28]
 800947a:	2b80      	cmp	r3, #128	@ 0x80
 800947c:	d155      	bne.n	800952a <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800947e:	f7fc fe8f 	bl	80061a0 <HAL_GetREVID>
 8009482:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009486:	6a21      	ldr	r1, [r4, #32]
 8009488:	4298      	cmp	r0, r3
 800948a:	4b8f      	ldr	r3, [pc, #572]	@ (80096c8 <HAL_RCC_OscConfig+0x290>)
 800948c:	f200 80e8 	bhi.w	8009660 <HAL_RCC_OscConfig+0x228>
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	2920      	cmp	r1, #32
 8009494:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8009498:	bf0c      	ite	eq
 800949a:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800949e:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 80094a2:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	0719      	lsls	r1, r3, #28
 80094a8:	f100 8123 	bmi.w	80096f2 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	069a      	lsls	r2, r3, #26
 80094b0:	f100 8144 	bmi.w	800973c <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	075d      	lsls	r5, r3, #29
 80094b8:	d51e      	bpl.n	80094f8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80094ba:	4d84      	ldr	r5, [pc, #528]	@ (80096cc <HAL_RCC_OscConfig+0x294>)
 80094bc:	682b      	ldr	r3, [r5, #0]
 80094be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094c2:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80094c4:	f7fc fe54 	bl	8006170 <HAL_GetTick>
 80094c8:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80094ca:	682b      	ldr	r3, [r5, #0]
 80094cc:	05da      	lsls	r2, r3, #23
 80094ce:	f140 815a 	bpl.w	8009786 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094d2:	68a3      	ldr	r3, [r4, #8]
 80094d4:	4d7c      	ldr	r5, [pc, #496]	@ (80096c8 <HAL_RCC_OscConfig+0x290>)
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	f040 815c 	bne.w	8009794 <HAL_RCC_OscConfig+0x35c>
 80094dc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80094de:	f043 0301 	orr.w	r3, r3, #1
 80094e2:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094e4:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80094e8:	f7fc fe42 	bl	8006170 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094ec:	4e76      	ldr	r6, [pc, #472]	@ (80096c8 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80094ee:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094f0:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80094f2:	079b      	lsls	r3, r3, #30
 80094f4:	f140 8174 	bpl.w	80097e0 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094f8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80094fa:	2900      	cmp	r1, #0
 80094fc:	f040 8177 	bne.w	80097ee <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8009500:	2000      	movs	r0, #0
 8009502:	e02b      	b.n	800955c <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009504:	4a70      	ldr	r2, [pc, #448]	@ (80096c8 <HAL_RCC_OscConfig+0x290>)
 8009506:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009508:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800950a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800950e:	2b10      	cmp	r3, #16
 8009510:	d005      	beq.n	800951e <HAL_RCC_OscConfig+0xe6>
 8009512:	2b18      	cmp	r3, #24
 8009514:	d10b      	bne.n	800952e <HAL_RCC_OscConfig+0xf6>
 8009516:	f001 0303 	and.w	r3, r1, #3
 800951a:	2b02      	cmp	r3, #2
 800951c:	d107      	bne.n	800952e <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800951e:	6813      	ldr	r3, [r2, #0]
 8009520:	039a      	lsls	r2, r3, #14
 8009522:	d590      	bpl.n	8009446 <HAL_RCC_OscConfig+0xe>
 8009524:	6863      	ldr	r3, [r4, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d18d      	bne.n	8009446 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800952a:	2001      	movs	r0, #1
 800952c:	e016      	b.n	800955c <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800952e:	6863      	ldr	r3, [r4, #4]
 8009530:	4d65      	ldr	r5, [pc, #404]	@ (80096c8 <HAL_RCC_OscConfig+0x290>)
 8009532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009536:	d112      	bne.n	800955e <HAL_RCC_OscConfig+0x126>
 8009538:	682b      	ldr	r3, [r5, #0]
 800953a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800953e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009540:	f7fc fe16 	bl	8006170 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009544:	4e60      	ldr	r6, [pc, #384]	@ (80096c8 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8009546:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009548:	6833      	ldr	r3, [r6, #0]
 800954a:	039b      	lsls	r3, r3, #14
 800954c:	f53f af7b 	bmi.w	8009446 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009550:	f7fc fe0e 	bl	8006170 <HAL_GetTick>
 8009554:	1b40      	subs	r0, r0, r5
 8009556:	2864      	cmp	r0, #100	@ 0x64
 8009558:	d9f6      	bls.n	8009548 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800955a:	2003      	movs	r0, #3
}
 800955c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800955e:	b9a3      	cbnz	r3, 800958a <HAL_RCC_OscConfig+0x152>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009566:	602b      	str	r3, [r5, #0]
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800956e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009570:	f7fc fdfe 	bl	8006170 <HAL_GetTick>
 8009574:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009576:	682b      	ldr	r3, [r5, #0]
 8009578:	039f      	lsls	r7, r3, #14
 800957a:	f57f af64 	bpl.w	8009446 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800957e:	f7fc fdf7 	bl	8006170 <HAL_GetTick>
 8009582:	1b80      	subs	r0, r0, r6
 8009584:	2864      	cmp	r0, #100	@ 0x64
 8009586:	d9f6      	bls.n	8009576 <HAL_RCC_OscConfig+0x13e>
 8009588:	e7e7      	b.n	800955a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800958a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800958e:	682b      	ldr	r3, [r5, #0]
 8009590:	d103      	bne.n	800959a <HAL_RCC_OscConfig+0x162>
 8009592:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009596:	602b      	str	r3, [r5, #0]
 8009598:	e7ce      	b.n	8009538 <HAL_RCC_OscConfig+0x100>
 800959a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800959e:	602b      	str	r3, [r5, #0]
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80095a6:	e7ca      	b.n	800953e <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80095a8:	4947      	ldr	r1, [pc, #284]	@ (80096c8 <HAL_RCC_OscConfig+0x290>)
 80095aa:	68e2      	ldr	r2, [r4, #12]
 80095ac:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80095ae:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80095b0:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 80095b4:	d003      	beq.n	80095be <HAL_RCC_OscConfig+0x186>
 80095b6:	2b18      	cmp	r3, #24
 80095b8:	d12a      	bne.n	8009610 <HAL_RCC_OscConfig+0x1d8>
 80095ba:	0780      	lsls	r0, r0, #30
 80095bc:	d128      	bne.n	8009610 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80095be:	680b      	ldr	r3, [r1, #0]
 80095c0:	075b      	lsls	r3, r3, #29
 80095c2:	d501      	bpl.n	80095c8 <HAL_RCC_OscConfig+0x190>
 80095c4:	2a00      	cmp	r2, #0
 80095c6:	d0b0      	beq.n	800952a <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80095c8:	4d3f      	ldr	r5, [pc, #252]	@ (80096c8 <HAL_RCC_OscConfig+0x290>)
 80095ca:	682b      	ldr	r3, [r5, #0]
 80095cc:	f023 0319 	bic.w	r3, r3, #25
 80095d0:	4313      	orrs	r3, r2
 80095d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80095d4:	f7fc fdcc 	bl	8006170 <HAL_GetTick>
 80095d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095da:	682b      	ldr	r3, [r5, #0]
 80095dc:	075f      	lsls	r7, r3, #29
 80095de:	d511      	bpl.n	8009604 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095e0:	f7fc fdde 	bl	80061a0 <HAL_GetREVID>
 80095e4:	f241 0303 	movw	r3, #4099	@ 0x1003
 80095e8:	6922      	ldr	r2, [r4, #16]
 80095ea:	4298      	cmp	r0, r3
 80095ec:	686b      	ldr	r3, [r5, #4]
 80095ee:	d822      	bhi.n	8009636 <HAL_RCC_OscConfig+0x1fe>
 80095f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80095f4:	2a40      	cmp	r2, #64	@ 0x40
 80095f6:	bf0c      	ite	eq
 80095f8:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 80095fc:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8009600:	606b      	str	r3, [r5, #4]
 8009602:	e724      	b.n	800944e <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009604:	f7fc fdb4 	bl	8006170 <HAL_GetTick>
 8009608:	1b80      	subs	r0, r0, r6
 800960a:	2802      	cmp	r0, #2
 800960c:	d9e5      	bls.n	80095da <HAL_RCC_OscConfig+0x1a2>
 800960e:	e7a4      	b.n	800955a <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009610:	4d2d      	ldr	r5, [pc, #180]	@ (80096c8 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009612:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009614:	b1a2      	cbz	r2, 8009640 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009616:	f023 0319 	bic.w	r3, r3, #25
 800961a:	4313      	orrs	r3, r2
 800961c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800961e:	f7fc fda7 	bl	8006170 <HAL_GetTick>
 8009622:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	0758      	lsls	r0, r3, #29
 8009628:	d4da      	bmi.n	80095e0 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800962a:	f7fc fda1 	bl	8006170 <HAL_GetTick>
 800962e:	1b80      	subs	r0, r0, r6
 8009630:	2802      	cmp	r0, #2
 8009632:	d9f7      	bls.n	8009624 <HAL_RCC_OscConfig+0x1ec>
 8009634:	e791      	b.n	800955a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009636:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800963a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800963e:	e7df      	b.n	8009600 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 8009640:	f023 0301 	bic.w	r3, r3, #1
 8009644:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009646:	f7fc fd93 	bl	8006170 <HAL_GetTick>
 800964a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800964c:	682b      	ldr	r3, [r5, #0]
 800964e:	0759      	lsls	r1, r3, #29
 8009650:	f57f aefd 	bpl.w	800944e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009654:	f7fc fd8c 	bl	8006170 <HAL_GetTick>
 8009658:	1b80      	subs	r0, r0, r6
 800965a:	2802      	cmp	r0, #2
 800965c:	d9f6      	bls.n	800964c <HAL_RCC_OscConfig+0x214>
 800965e:	e77c      	b.n	800955a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009660:	68da      	ldr	r2, [r3, #12]
 8009662:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8009666:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800966a:	60da      	str	r2, [r3, #12]
 800966c:	e71a      	b.n	80094a4 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800966e:	69e3      	ldr	r3, [r4, #28]
 8009670:	4d15      	ldr	r5, [pc, #84]	@ (80096c8 <HAL_RCC_OscConfig+0x290>)
 8009672:	b36b      	cbz	r3, 80096d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8009674:	682b      	ldr	r3, [r5, #0]
 8009676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800967a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800967c:	f7fc fd78 	bl	8006170 <HAL_GetTick>
 8009680:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009682:	682b      	ldr	r3, [r5, #0]
 8009684:	05df      	lsls	r7, r3, #23
 8009686:	d511      	bpl.n	80096ac <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009688:	f7fc fd8a 	bl	80061a0 <HAL_GetREVID>
 800968c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009690:	6a22      	ldr	r2, [r4, #32]
 8009692:	4298      	cmp	r0, r3
 8009694:	d810      	bhi.n	80096b8 <HAL_RCC_OscConfig+0x280>
 8009696:	686b      	ldr	r3, [r5, #4]
 8009698:	2a20      	cmp	r2, #32
 800969a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800969e:	bf0c      	ite	eq
 80096a0:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 80096a4:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80096a8:	606b      	str	r3, [r5, #4]
 80096aa:	e6fb      	b.n	80094a4 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80096ac:	f7fc fd60 	bl	8006170 <HAL_GetTick>
 80096b0:	1b80      	subs	r0, r0, r6
 80096b2:	2802      	cmp	r0, #2
 80096b4:	d9e5      	bls.n	8009682 <HAL_RCC_OscConfig+0x24a>
 80096b6:	e750      	b.n	800955a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80096b8:	68eb      	ldr	r3, [r5, #12]
 80096ba:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80096be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80096c2:	60eb      	str	r3, [r5, #12]
 80096c4:	e6ee      	b.n	80094a4 <HAL_RCC_OscConfig+0x6c>
 80096c6:	bf00      	nop
 80096c8:	58024400 	.word	0x58024400
 80096cc:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80096d8:	f7fc fd4a 	bl	8006170 <HAL_GetTick>
 80096dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80096de:	682b      	ldr	r3, [r5, #0]
 80096e0:	05d8      	lsls	r0, r3, #23
 80096e2:	f57f aedf 	bpl.w	80094a4 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80096e6:	f7fc fd43 	bl	8006170 <HAL_GetTick>
 80096ea:	1b80      	subs	r0, r0, r6
 80096ec:	2802      	cmp	r0, #2
 80096ee:	d9f6      	bls.n	80096de <HAL_RCC_OscConfig+0x2a6>
 80096f0:	e733      	b.n	800955a <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80096f2:	6963      	ldr	r3, [r4, #20]
 80096f4:	4da5      	ldr	r5, [pc, #660]	@ (800998c <HAL_RCC_OscConfig+0x554>)
 80096f6:	b183      	cbz	r3, 800971a <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 80096f8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80096fa:	f043 0301 	orr.w	r3, r3, #1
 80096fe:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8009700:	f7fc fd36 	bl	8006170 <HAL_GetTick>
 8009704:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009706:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009708:	079b      	lsls	r3, r3, #30
 800970a:	f53f aecf 	bmi.w	80094ac <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800970e:	f7fc fd2f 	bl	8006170 <HAL_GetTick>
 8009712:	1b80      	subs	r0, r0, r6
 8009714:	2802      	cmp	r0, #2
 8009716:	d9f6      	bls.n	8009706 <HAL_RCC_OscConfig+0x2ce>
 8009718:	e71f      	b.n	800955a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800971a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800971c:	f023 0301 	bic.w	r3, r3, #1
 8009720:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8009722:	f7fc fd25 	bl	8006170 <HAL_GetTick>
 8009726:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009728:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800972a:	079f      	lsls	r7, r3, #30
 800972c:	f57f aebe 	bpl.w	80094ac <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009730:	f7fc fd1e 	bl	8006170 <HAL_GetTick>
 8009734:	1b80      	subs	r0, r0, r6
 8009736:	2802      	cmp	r0, #2
 8009738:	d9f6      	bls.n	8009728 <HAL_RCC_OscConfig+0x2f0>
 800973a:	e70e      	b.n	800955a <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800973c:	69a3      	ldr	r3, [r4, #24]
 800973e:	4d93      	ldr	r5, [pc, #588]	@ (800998c <HAL_RCC_OscConfig+0x554>)
 8009740:	b183      	cbz	r3, 8009764 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 8009742:	682b      	ldr	r3, [r5, #0]
 8009744:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009748:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800974a:	f7fc fd11 	bl	8006170 <HAL_GetTick>
 800974e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009750:	682b      	ldr	r3, [r5, #0]
 8009752:	0498      	lsls	r0, r3, #18
 8009754:	f53f aeae 	bmi.w	80094b4 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009758:	f7fc fd0a 	bl	8006170 <HAL_GetTick>
 800975c:	1b80      	subs	r0, r0, r6
 800975e:	2802      	cmp	r0, #2
 8009760:	d9f6      	bls.n	8009750 <HAL_RCC_OscConfig+0x318>
 8009762:	e6fa      	b.n	800955a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8009764:	682b      	ldr	r3, [r5, #0]
 8009766:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800976a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800976c:	f7fc fd00 	bl	8006170 <HAL_GetTick>
 8009770:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009772:	682b      	ldr	r3, [r5, #0]
 8009774:	0499      	lsls	r1, r3, #18
 8009776:	f57f ae9d 	bpl.w	80094b4 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800977a:	f7fc fcf9 	bl	8006170 <HAL_GetTick>
 800977e:	1b80      	subs	r0, r0, r6
 8009780:	2802      	cmp	r0, #2
 8009782:	d9f6      	bls.n	8009772 <HAL_RCC_OscConfig+0x33a>
 8009784:	e6e9      	b.n	800955a <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009786:	f7fc fcf3 	bl	8006170 <HAL_GetTick>
 800978a:	1b80      	subs	r0, r0, r6
 800978c:	2864      	cmp	r0, #100	@ 0x64
 800978e:	f67f ae9c 	bls.w	80094ca <HAL_RCC_OscConfig+0x92>
 8009792:	e6e2      	b.n	800955a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009794:	b9b3      	cbnz	r3, 80097c4 <HAL_RCC_OscConfig+0x38c>
 8009796:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009798:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800979c:	f023 0301 	bic.w	r3, r3, #1
 80097a0:	672b      	str	r3, [r5, #112]	@ 0x70
 80097a2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80097a4:	f023 0304 	bic.w	r3, r3, #4
 80097a8:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80097aa:	f7fc fce1 	bl	8006170 <HAL_GetTick>
 80097ae:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80097b0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80097b2:	0798      	lsls	r0, r3, #30
 80097b4:	f57f aea0 	bpl.w	80094f8 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097b8:	f7fc fcda 	bl	8006170 <HAL_GetTick>
 80097bc:	1b80      	subs	r0, r0, r6
 80097be:	42b8      	cmp	r0, r7
 80097c0:	d9f6      	bls.n	80097b0 <HAL_RCC_OscConfig+0x378>
 80097c2:	e6ca      	b.n	800955a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097c4:	2b05      	cmp	r3, #5
 80097c6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80097c8:	d103      	bne.n	80097d2 <HAL_RCC_OscConfig+0x39a>
 80097ca:	f043 0304 	orr.w	r3, r3, #4
 80097ce:	672b      	str	r3, [r5, #112]	@ 0x70
 80097d0:	e684      	b.n	80094dc <HAL_RCC_OscConfig+0xa4>
 80097d2:	f023 0301 	bic.w	r3, r3, #1
 80097d6:	672b      	str	r3, [r5, #112]	@ 0x70
 80097d8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80097da:	f023 0304 	bic.w	r3, r3, #4
 80097de:	e680      	b.n	80094e2 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097e0:	f7fc fcc6 	bl	8006170 <HAL_GetTick>
 80097e4:	1b40      	subs	r0, r0, r5
 80097e6:	42b8      	cmp	r0, r7
 80097e8:	f67f ae82 	bls.w	80094f0 <HAL_RCC_OscConfig+0xb8>
 80097ec:	e6b5      	b.n	800955a <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80097ee:	4d67      	ldr	r5, [pc, #412]	@ (800998c <HAL_RCC_OscConfig+0x554>)
 80097f0:	692b      	ldr	r3, [r5, #16]
 80097f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097f6:	2b18      	cmp	r3, #24
 80097f8:	d07a      	beq.n	80098f0 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 80097fa:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097fc:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 80097fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009802:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009804:	d167      	bne.n	80098d6 <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 8009806:	f7fc fcb3 	bl	8006170 <HAL_GetTick>
 800980a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	0199      	lsls	r1, r3, #6
 8009810:	d45b      	bmi.n	80098ca <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009812:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8009814:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009816:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800981a:	f023 0303 	bic.w	r3, r3, #3
 800981e:	4313      	orrs	r3, r2
 8009820:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009822:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009826:	62ab      	str	r3, [r5, #40]	@ 0x28
 8009828:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800982a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800982c:	3b01      	subs	r3, #1
 800982e:	3a01      	subs	r2, #1
 8009830:	025b      	lsls	r3, r3, #9
 8009832:	0412      	lsls	r2, r2, #16
 8009834:	b29b      	uxth	r3, r3
 8009836:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800983a:	4313      	orrs	r3, r2
 800983c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800983e:	3a01      	subs	r2, #1
 8009840:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009844:	4313      	orrs	r3, r2
 8009846:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009848:	3a01      	subs	r2, #1
 800984a:	0612      	lsls	r2, r2, #24
 800984c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009850:	4313      	orrs	r3, r2
 8009852:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8009854:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009856:	f023 0301 	bic.w	r3, r3, #1
 800985a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800985c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800985e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8009860:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009864:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009868:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800986c:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800986e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009870:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009872:	f023 030c 	bic.w	r3, r3, #12
 8009876:	4313      	orrs	r3, r2
 8009878:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800987a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800987c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800987e:	f023 0302 	bic.w	r3, r3, #2
 8009882:	4313      	orrs	r3, r2
 8009884:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009886:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800988c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800988e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009894:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009896:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800989c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800989e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80098a0:	f043 0301 	orr.w	r3, r3, #1
 80098a4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 80098a6:	682b      	ldr	r3, [r5, #0]
 80098a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80098ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80098ae:	f7fc fc5f 	bl	8006170 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80098b2:	4d36      	ldr	r5, [pc, #216]	@ (800998c <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 80098b4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80098b6:	682b      	ldr	r3, [r5, #0]
 80098b8:	019a      	lsls	r2, r3, #6
 80098ba:	f53f ae21 	bmi.w	8009500 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098be:	f7fc fc57 	bl	8006170 <HAL_GetTick>
 80098c2:	1b00      	subs	r0, r0, r4
 80098c4:	2802      	cmp	r0, #2
 80098c6:	d9f6      	bls.n	80098b6 <HAL_RCC_OscConfig+0x47e>
 80098c8:	e647      	b.n	800955a <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098ca:	f7fc fc51 	bl	8006170 <HAL_GetTick>
 80098ce:	1b80      	subs	r0, r0, r6
 80098d0:	2802      	cmp	r0, #2
 80098d2:	d99b      	bls.n	800980c <HAL_RCC_OscConfig+0x3d4>
 80098d4:	e641      	b.n	800955a <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 80098d6:	f7fc fc4b 	bl	8006170 <HAL_GetTick>
 80098da:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098dc:	682b      	ldr	r3, [r5, #0]
 80098de:	019b      	lsls	r3, r3, #6
 80098e0:	f57f ae0e 	bpl.w	8009500 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098e4:	f7fc fc44 	bl	8006170 <HAL_GetTick>
 80098e8:	1b00      	subs	r0, r0, r4
 80098ea:	2802      	cmp	r0, #2
 80098ec:	d9f6      	bls.n	80098dc <HAL_RCC_OscConfig+0x4a4>
 80098ee:	e634      	b.n	800955a <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098f0:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80098f2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80098f4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098f6:	f43f ae18 	beq.w	800952a <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098fa:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098fe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8009900:	4281      	cmp	r1, r0
 8009902:	f47f ae12 	bne.w	800952a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009906:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800990a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800990c:	428a      	cmp	r2, r1
 800990e:	f47f ae0c 	bne.w	800952a <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009912:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009914:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8009918:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800991a:	4291      	cmp	r1, r2
 800991c:	f47f ae05 	bne.w	800952a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009920:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009922:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8009926:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009928:	4291      	cmp	r1, r2
 800992a:	f47f adfe 	bne.w	800952a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800992e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009930:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8009934:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009936:	4291      	cmp	r1, r2
 8009938:	f47f adf7 	bne.w	800952a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800993c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800993e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009942:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009944:	4293      	cmp	r3, r2
 8009946:	f47f adf0 	bne.w	800952a <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800994a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800994c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800994e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009952:	429a      	cmp	r2, r3
 8009954:	f43f add4 	beq.w	8009500 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 8009958:	4d0c      	ldr	r5, [pc, #48]	@ (800998c <HAL_RCC_OscConfig+0x554>)
 800995a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800995c:	f023 0301 	bic.w	r3, r3, #1
 8009960:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8009962:	f7fc fc05 	bl	8006170 <HAL_GetTick>
 8009966:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009968:	f7fc fc02 	bl	8006170 <HAL_GetTick>
 800996c:	42b0      	cmp	r0, r6
 800996e:	d0fb      	beq.n	8009968 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009970:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009972:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8009974:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009978:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800997c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009980:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8009982:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009984:	f043 0301 	orr.w	r3, r3, #1
 8009988:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800998a:	e5b9      	b.n	8009500 <HAL_RCC_OscConfig+0xc8>
 800998c:	58024400 	.word	0x58024400

08009990 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009990:	b570      	push	{r4, r5, r6, lr}
 8009992:	4c23      	ldr	r4, [pc, #140]	@ (8009a20 <HAL_RCC_MCOConfig+0x90>)
 8009994:	b088      	sub	sp, #32
 8009996:	460e      	mov	r6, r1
 8009998:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800999a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800999e:	b9f8      	cbnz	r0, 80099e0 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 80099a0:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099a4:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80099a8:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 80099aa:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80099ae:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80099b2:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	9301      	str	r3, [sp, #4]
 80099ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099bc:	2302      	movs	r3, #2
 80099be:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099c2:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099c4:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80099c8:	4816      	ldr	r0, [pc, #88]	@ (8009a24 <HAL_RCC_MCOConfig+0x94>)
 80099ca:	f7fd fa17 	bl	8006dfc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80099ce:	6923      	ldr	r3, [r4, #16]
 80099d0:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 80099d4:	ea43 0106 	orr.w	r1, r3, r6
 80099d8:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80099da:	6121      	str	r1, [r4, #16]
  }
}
 80099dc:	b008      	add	sp, #32
 80099de:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 80099e0:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099e8:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80099ea:	480f      	ldr	r0, [pc, #60]	@ (8009a28 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 80099ec:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80099f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80099f4:	f003 0304 	and.w	r3, r3, #4
 80099f8:	9302      	str	r3, [sp, #8]
 80099fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099fc:	2302      	movs	r3, #2
 80099fe:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a02:	2300      	movs	r3, #0
 8009a04:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009a08:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009a0a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009a0c:	f7fd f9f6 	bl	8006dfc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009a10:	6923      	ldr	r3, [r4, #16]
 8009a12:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8009a16:	ea43 0106 	orr.w	r1, r3, r6
 8009a1a:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8009a1e:	e7dc      	b.n	80099da <HAL_RCC_MCOConfig+0x4a>
 8009a20:	58024400 	.word	0x58024400
 8009a24:	58020000 	.word	0x58020000
 8009a28:	58020800 	.word	0x58020800

08009a2c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a2c:	4b49      	ldr	r3, [pc, #292]	@ (8009b54 <HAL_RCC_GetSysClockFreq+0x128>)
 8009a2e:	691a      	ldr	r2, [r3, #16]
 8009a30:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8009a34:	2a10      	cmp	r2, #16
{
 8009a36:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a38:	f000 8088 	beq.w	8009b4c <HAL_RCC_GetSysClockFreq+0x120>
 8009a3c:	2a18      	cmp	r2, #24
 8009a3e:	d00c      	beq.n	8009a5a <HAL_RCC_GetSysClockFreq+0x2e>
 8009a40:	2a00      	cmp	r2, #0
 8009a42:	f040 8085 	bne.w	8009b50 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	4843      	ldr	r0, [pc, #268]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x12c>)
 8009a4a:	f012 0f20 	tst.w	r2, #32
 8009a4e:	d003      	beq.n	8009a58 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009a56:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8009a58:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a5a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009a5c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a5e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 8009a60:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009a64:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 8009a6a:	d0f5      	beq.n	8009a58 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a6c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a70:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a74:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a78:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a7c:	4362      	muls	r2, r4
 8009a7e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8009a82:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009a84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a88:	ee06 2a90 	vmov	s13, r2
 8009a8c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8009a90:	d04e      	beq.n	8009b30 <HAL_RCC_GetSysClockFreq+0x104>
 8009a92:	2902      	cmp	r1, #2
 8009a94:	d03e      	beq.n	8009b14 <HAL_RCC_GetSysClockFreq+0xe8>
 8009a96:	2900      	cmp	r1, #0
 8009a98:	d14a      	bne.n	8009b30 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	0692      	lsls	r2, r2, #26
 8009a9e:	d527      	bpl.n	8009af0 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009aa0:	6819      	ldr	r1, [r3, #0]
 8009aa2:	4a2d      	ldr	r2, [pc, #180]	@ (8009b58 <HAL_RCC_GetSysClockFreq+0x12c>)
 8009aa4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009aaa:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab0:	ee07 2a90 	vmov	s15, r2
 8009ab4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8009ab8:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8009abc:	ee07 3a10 	vmov	s14, r3
 8009ac0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009ac4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009ac8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009acc:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009ad0:	4b20      	ldr	r3, [pc, #128]	@ (8009b54 <HAL_RCC_GetSysClockFreq+0x128>)
 8009ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ad4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009ad8:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009ada:	ee07 3a10 	vmov	s14, r3
 8009ade:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009ae2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009ae6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8009aea:	ee17 0a90 	vmov	r0, s15
 8009aee:	e7b3      	b.n	8009a58 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af6:	ee07 3a90 	vmov	s15, r3
 8009afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b02:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009b06:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8009b5c <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b0a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8009b0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 8009b12:	e7dd      	b.n	8009ad0 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b1a:	ee07 3a90 	vmov	s15, r3
 8009b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b26:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009b2a:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8009b60 <HAL_RCC_GetSysClockFreq+0x134>
 8009b2e:	e7ec      	b.n	8009b0a <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b36:	ee07 3a90 	vmov	s15, r3
 8009b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b42:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009b46:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 8009b64 <HAL_RCC_GetSysClockFreq+0x138>
 8009b4a:	e7de      	b.n	8009b0a <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b4c:	4806      	ldr	r0, [pc, #24]	@ (8009b68 <HAL_RCC_GetSysClockFreq+0x13c>)
 8009b4e:	e783      	b.n	8009a58 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 8009b50:	4806      	ldr	r0, [pc, #24]	@ (8009b6c <HAL_RCC_GetSysClockFreq+0x140>)
 8009b52:	e781      	b.n	8009a58 <HAL_RCC_GetSysClockFreq+0x2c>
 8009b54:	58024400 	.word	0x58024400
 8009b58:	03d09000 	.word	0x03d09000
 8009b5c:	4c742400 	.word	0x4c742400
 8009b60:	4bbebc20 	.word	0x4bbebc20
 8009b64:	4a742400 	.word	0x4a742400
 8009b68:	017d7840 	.word	0x017d7840
 8009b6c:	003d0900 	.word	0x003d0900

08009b70 <HAL_RCC_ClockConfig>:
{
 8009b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b74:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8009b76:	4604      	mov	r4, r0
 8009b78:	b910      	cbnz	r0, 8009b80 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8009b7a:	2001      	movs	r0, #1
}
 8009b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009b80:	4a88      	ldr	r2, [pc, #544]	@ (8009da4 <HAL_RCC_ClockConfig+0x234>)
 8009b82:	6813      	ldr	r3, [r2, #0]
 8009b84:	f003 030f 	and.w	r3, r3, #15
 8009b88:	428b      	cmp	r3, r1
 8009b8a:	f0c0 8093 	bcc.w	8009cb4 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	075f      	lsls	r7, r3, #29
 8009b92:	f100 809b 	bmi.w	8009ccc <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b96:	071e      	lsls	r6, r3, #28
 8009b98:	d50b      	bpl.n	8009bb2 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009b9a:	4983      	ldr	r1, [pc, #524]	@ (8009da8 <HAL_RCC_ClockConfig+0x238>)
 8009b9c:	6960      	ldr	r0, [r4, #20]
 8009b9e:	69ca      	ldr	r2, [r1, #28]
 8009ba0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009ba4:	4290      	cmp	r0, r2
 8009ba6:	d904      	bls.n	8009bb2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009ba8:	69ca      	ldr	r2, [r1, #28]
 8009baa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009bae:	4302      	orrs	r2, r0
 8009bb0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bb2:	06d8      	lsls	r0, r3, #27
 8009bb4:	d50b      	bpl.n	8009bce <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009bb6:	497c      	ldr	r1, [pc, #496]	@ (8009da8 <HAL_RCC_ClockConfig+0x238>)
 8009bb8:	69a0      	ldr	r0, [r4, #24]
 8009bba:	69ca      	ldr	r2, [r1, #28]
 8009bbc:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009bc0:	4290      	cmp	r0, r2
 8009bc2:	d904      	bls.n	8009bce <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009bc4:	69ca      	ldr	r2, [r1, #28]
 8009bc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009bca:	4302      	orrs	r2, r0
 8009bcc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009bce:	0699      	lsls	r1, r3, #26
 8009bd0:	d50b      	bpl.n	8009bea <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009bd2:	4975      	ldr	r1, [pc, #468]	@ (8009da8 <HAL_RCC_ClockConfig+0x238>)
 8009bd4:	69e0      	ldr	r0, [r4, #28]
 8009bd6:	6a0a      	ldr	r2, [r1, #32]
 8009bd8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009bdc:	4290      	cmp	r0, r2
 8009bde:	d904      	bls.n	8009bea <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009be0:	6a0a      	ldr	r2, [r1, #32]
 8009be2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009be6:	4302      	orrs	r2, r0
 8009be8:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009bea:	079a      	lsls	r2, r3, #30
 8009bec:	d50b      	bpl.n	8009c06 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009bee:	496e      	ldr	r1, [pc, #440]	@ (8009da8 <HAL_RCC_ClockConfig+0x238>)
 8009bf0:	68e0      	ldr	r0, [r4, #12]
 8009bf2:	698a      	ldr	r2, [r1, #24]
 8009bf4:	f002 020f 	and.w	r2, r2, #15
 8009bf8:	4290      	cmp	r0, r2
 8009bfa:	d904      	bls.n	8009c06 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bfc:	698a      	ldr	r2, [r1, #24]
 8009bfe:	f022 020f 	bic.w	r2, r2, #15
 8009c02:	4302      	orrs	r2, r0
 8009c04:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c06:	07df      	lsls	r7, r3, #31
 8009c08:	d46e      	bmi.n	8009ce8 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	079e      	lsls	r6, r3, #30
 8009c0e:	f100 80a1 	bmi.w	8009d54 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009c12:	4964      	ldr	r1, [pc, #400]	@ (8009da4 <HAL_RCC_ClockConfig+0x234>)
 8009c14:	680a      	ldr	r2, [r1, #0]
 8009c16:	f002 020f 	and.w	r2, r2, #15
 8009c1a:	42aa      	cmp	r2, r5
 8009c1c:	f200 80a8 	bhi.w	8009d70 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009c20:	0758      	lsls	r0, r3, #29
 8009c22:	f100 80b1 	bmi.w	8009d88 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c26:	0719      	lsls	r1, r3, #28
 8009c28:	d50b      	bpl.n	8009c42 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c2a:	495f      	ldr	r1, [pc, #380]	@ (8009da8 <HAL_RCC_ClockConfig+0x238>)
 8009c2c:	6960      	ldr	r0, [r4, #20]
 8009c2e:	69ca      	ldr	r2, [r1, #28]
 8009c30:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009c34:	4290      	cmp	r0, r2
 8009c36:	d204      	bcs.n	8009c42 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c38:	69ca      	ldr	r2, [r1, #28]
 8009c3a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009c3e:	4302      	orrs	r2, r0
 8009c40:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c42:	06da      	lsls	r2, r3, #27
 8009c44:	d50b      	bpl.n	8009c5e <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009c46:	4958      	ldr	r1, [pc, #352]	@ (8009da8 <HAL_RCC_ClockConfig+0x238>)
 8009c48:	69a0      	ldr	r0, [r4, #24]
 8009c4a:	69ca      	ldr	r2, [r1, #28]
 8009c4c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009c50:	4290      	cmp	r0, r2
 8009c52:	d204      	bcs.n	8009c5e <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009c54:	69ca      	ldr	r2, [r1, #28]
 8009c56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009c5a:	4302      	orrs	r2, r0
 8009c5c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009c5e:	069b      	lsls	r3, r3, #26
 8009c60:	d50b      	bpl.n	8009c7a <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009c62:	4a51      	ldr	r2, [pc, #324]	@ (8009da8 <HAL_RCC_ClockConfig+0x238>)
 8009c64:	69e1      	ldr	r1, [r4, #28]
 8009c66:	6a13      	ldr	r3, [r2, #32]
 8009c68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009c6c:	4299      	cmp	r1, r3
 8009c6e:	d204      	bcs.n	8009c7a <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009c70:	6a13      	ldr	r3, [r2, #32]
 8009c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c76:	430b      	orrs	r3, r1
 8009c78:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009c7a:	f7ff fed7 	bl	8009a2c <HAL_RCC_GetSysClockFreq>
 8009c7e:	494a      	ldr	r1, [pc, #296]	@ (8009da8 <HAL_RCC_ClockConfig+0x238>)
 8009c80:	4a4a      	ldr	r2, [pc, #296]	@ (8009dac <HAL_RCC_ClockConfig+0x23c>)
 8009c82:	698b      	ldr	r3, [r1, #24]
 8009c84:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009c88:	5cd3      	ldrb	r3, [r2, r3]
 8009c8a:	f003 031f 	and.w	r3, r3, #31
 8009c8e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009c90:	698b      	ldr	r3, [r1, #24]
 8009c92:	f003 030f 	and.w	r3, r3, #15
 8009c96:	5cd3      	ldrb	r3, [r2, r3]
 8009c98:	4a45      	ldr	r2, [pc, #276]	@ (8009db0 <HAL_RCC_ClockConfig+0x240>)
 8009c9a:	f003 031f 	and.w	r3, r3, #31
 8009c9e:	fa20 f303 	lsr.w	r3, r0, r3
 8009ca2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8009ca4:	4b43      	ldr	r3, [pc, #268]	@ (8009db4 <HAL_RCC_ClockConfig+0x244>)
 8009ca6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8009ca8:	4b43      	ldr	r3, [pc, #268]	@ (8009db8 <HAL_RCC_ClockConfig+0x248>)
}
 8009caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8009cae:	6818      	ldr	r0, [r3, #0]
 8009cb0:	f7f7 bc5a 	b.w	8001568 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cb4:	6813      	ldr	r3, [r2, #0]
 8009cb6:	f023 030f 	bic.w	r3, r3, #15
 8009cba:	430b      	orrs	r3, r1
 8009cbc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cbe:	6813      	ldr	r3, [r2, #0]
 8009cc0:	f003 030f 	and.w	r3, r3, #15
 8009cc4:	428b      	cmp	r3, r1
 8009cc6:	f47f af58 	bne.w	8009b7a <HAL_RCC_ClockConfig+0xa>
 8009cca:	e760      	b.n	8009b8e <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009ccc:	4936      	ldr	r1, [pc, #216]	@ (8009da8 <HAL_RCC_ClockConfig+0x238>)
 8009cce:	6920      	ldr	r0, [r4, #16]
 8009cd0:	698a      	ldr	r2, [r1, #24]
 8009cd2:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009cd6:	4290      	cmp	r0, r2
 8009cd8:	f67f af5d 	bls.w	8009b96 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009cdc:	698a      	ldr	r2, [r1, #24]
 8009cde:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009ce2:	4302      	orrs	r2, r0
 8009ce4:	618a      	str	r2, [r1, #24]
 8009ce6:	e756      	b.n	8009b96 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8009da8 <HAL_RCC_ClockConfig+0x238>)
 8009cea:	68a1      	ldr	r1, [r4, #8]
 8009cec:	699a      	ldr	r2, [r3, #24]
 8009cee:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cf6:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009cf8:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009cfa:	2902      	cmp	r1, #2
 8009cfc:	d11d      	bne.n	8009d3a <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009cfe:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d02:	f43f af3a 	beq.w	8009b7a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d06:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d08:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d0c:	4f26      	ldr	r7, [pc, #152]	@ (8009da8 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009d0e:	f022 0207 	bic.w	r2, r2, #7
 8009d12:	430a      	orrs	r2, r1
 8009d14:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 8009d16:	f7fc fa2b 	bl	8006170 <HAL_GetTick>
 8009d1a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	6862      	ldr	r2, [r4, #4]
 8009d20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d24:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8009d28:	f43f af6f 	beq.w	8009c0a <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d2c:	f7fc fa20 	bl	8006170 <HAL_GetTick>
 8009d30:	1b80      	subs	r0, r0, r6
 8009d32:	4540      	cmp	r0, r8
 8009d34:	d9f2      	bls.n	8009d1c <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 8009d36:	2003      	movs	r0, #3
 8009d38:	e720      	b.n	8009b7c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009d3a:	2903      	cmp	r1, #3
 8009d3c:	d102      	bne.n	8009d44 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009d3e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8009d42:	e7de      	b.n	8009d02 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009d44:	2901      	cmp	r1, #1
 8009d46:	d102      	bne.n	8009d4e <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d48:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009d4c:	e7d9      	b.n	8009d02 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d4e:	f012 0f04 	tst.w	r2, #4
 8009d52:	e7d6      	b.n	8009d02 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009d54:	4914      	ldr	r1, [pc, #80]	@ (8009da8 <HAL_RCC_ClockConfig+0x238>)
 8009d56:	68e0      	ldr	r0, [r4, #12]
 8009d58:	698a      	ldr	r2, [r1, #24]
 8009d5a:	f002 020f 	and.w	r2, r2, #15
 8009d5e:	4290      	cmp	r0, r2
 8009d60:	f4bf af57 	bcs.w	8009c12 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d64:	698a      	ldr	r2, [r1, #24]
 8009d66:	f022 020f 	bic.w	r2, r2, #15
 8009d6a:	4302      	orrs	r2, r0
 8009d6c:	618a      	str	r2, [r1, #24]
 8009d6e:	e750      	b.n	8009c12 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d70:	680a      	ldr	r2, [r1, #0]
 8009d72:	f022 020f 	bic.w	r2, r2, #15
 8009d76:	432a      	orrs	r2, r5
 8009d78:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d7a:	680a      	ldr	r2, [r1, #0]
 8009d7c:	f002 020f 	and.w	r2, r2, #15
 8009d80:	42aa      	cmp	r2, r5
 8009d82:	f47f aefa 	bne.w	8009b7a <HAL_RCC_ClockConfig+0xa>
 8009d86:	e74b      	b.n	8009c20 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009d88:	4907      	ldr	r1, [pc, #28]	@ (8009da8 <HAL_RCC_ClockConfig+0x238>)
 8009d8a:	6920      	ldr	r0, [r4, #16]
 8009d8c:	698a      	ldr	r2, [r1, #24]
 8009d8e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009d92:	4290      	cmp	r0, r2
 8009d94:	f4bf af47 	bcs.w	8009c26 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009d98:	698a      	ldr	r2, [r1, #24]
 8009d9a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009d9e:	4302      	orrs	r2, r0
 8009da0:	618a      	str	r2, [r1, #24]
 8009da2:	e740      	b.n	8009c26 <HAL_RCC_ClockConfig+0xb6>
 8009da4:	52002000 	.word	0x52002000
 8009da8:	58024400 	.word	0x58024400
 8009dac:	080237ec 	.word	0x080237ec
 8009db0:	24000068 	.word	0x24000068
 8009db4:	2400006c 	.word	0x2400006c
 8009db8:	24000074 	.word	0x24000074

08009dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009dbc:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009dbe:	f7ff fe35 	bl	8009a2c <HAL_RCC_GetSysClockFreq>
 8009dc2:	4a0b      	ldr	r2, [pc, #44]	@ (8009df0 <HAL_RCC_GetHCLKFreq+0x34>)
 8009dc4:	490b      	ldr	r1, [pc, #44]	@ (8009df4 <HAL_RCC_GetHCLKFreq+0x38>)
 8009dc6:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009dc8:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009dca:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009dce:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009dd2:	5ccb      	ldrb	r3, [r1, r3]
 8009dd4:	f003 031f 	and.w	r3, r3, #31
 8009dd8:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ddc:	5c88      	ldrb	r0, [r1, r2]
 8009dde:	4a06      	ldr	r2, [pc, #24]	@ (8009df8 <HAL_RCC_GetHCLKFreq+0x3c>)
 8009de0:	f000 001f 	and.w	r0, r0, #31
 8009de4:	fa23 f000 	lsr.w	r0, r3, r0
 8009de8:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009dea:	4a04      	ldr	r2, [pc, #16]	@ (8009dfc <HAL_RCC_GetHCLKFreq+0x40>)
 8009dec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8009dee:	bd08      	pop	{r3, pc}
 8009df0:	58024400 	.word	0x58024400
 8009df4:	080237ec 	.word	0x080237ec
 8009df8:	24000068 	.word	0x24000068
 8009dfc:	2400006c 	.word	0x2400006c

08009e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e00:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009e02:	f7ff ffdb 	bl	8009dbc <HAL_RCC_GetHCLKFreq>
 8009e06:	4b05      	ldr	r3, [pc, #20]	@ (8009e1c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009e08:	4a05      	ldr	r2, [pc, #20]	@ (8009e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009e0a:	69db      	ldr	r3, [r3, #28]
 8009e0c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009e10:	5cd3      	ldrb	r3, [r2, r3]
 8009e12:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009e16:	40d8      	lsrs	r0, r3
 8009e18:	bd08      	pop	{r3, pc}
 8009e1a:	bf00      	nop
 8009e1c:	58024400 	.word	0x58024400
 8009e20:	080237ec 	.word	0x080237ec

08009e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e24:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009e26:	f7ff ffc9 	bl	8009dbc <HAL_RCC_GetHCLKFreq>
 8009e2a:	4b05      	ldr	r3, [pc, #20]	@ (8009e40 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009e2c:	4a05      	ldr	r2, [pc, #20]	@ (8009e44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009e34:	5cd3      	ldrb	r3, [r2, r3]
 8009e36:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009e3a:	40d8      	lsrs	r0, r3
 8009e3c:	bd08      	pop	{r3, pc}
 8009e3e:	bf00      	nop
 8009e40:	58024400 	.word	0x58024400
 8009e44:	080237ec 	.word	0x080237ec

08009e48 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009e48:	233f      	movs	r3, #63	@ 0x3f
 8009e4a:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009e4c:	4b11      	ldr	r3, [pc, #68]	@ (8009e94 <HAL_RCC_GetClockConfig+0x4c>)
 8009e4e:	691a      	ldr	r2, [r3, #16]
 8009e50:	f002 0207 	and.w	r2, r2, #7
 8009e54:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009e56:	699a      	ldr	r2, [r3, #24]
 8009e58:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8009e5c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009e5e:	699a      	ldr	r2, [r3, #24]
 8009e60:	f002 020f 	and.w	r2, r2, #15
 8009e64:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009e66:	699a      	ldr	r2, [r3, #24]
 8009e68:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009e6c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009e6e:	69da      	ldr	r2, [r3, #28]
 8009e70:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009e74:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009e76:	69da      	ldr	r2, [r3, #28]
 8009e78:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009e7c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009e7e:	6a1b      	ldr	r3, [r3, #32]
 8009e80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009e84:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009e86:	4b04      	ldr	r3, [pc, #16]	@ (8009e98 <HAL_RCC_GetClockConfig+0x50>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 030f 	and.w	r3, r3, #15
 8009e8e:	600b      	str	r3, [r1, #0]
}
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	58024400 	.word	0x58024400
 8009e98:	52002000 	.word	0x52002000

08009e9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e9e:	4c3a      	ldr	r4, [pc, #232]	@ (8009f88 <RCCEx_PLL2_Config+0xec>)
{
 8009ea0:	4606      	mov	r6, r0
 8009ea2:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ea4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009ea6:	f003 0303 	and.w	r3, r3, #3
 8009eaa:	2b03      	cmp	r3, #3
 8009eac:	d069      	beq.n	8009f82 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009eb4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009eb6:	f7fc f95b 	bl	8006170 <HAL_GetTick>
 8009eba:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	011a      	lsls	r2, r3, #4
 8009ec0:	d44b      	bmi.n	8009f5a <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009ec2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009ec4:	6832      	ldr	r2, [r6, #0]
 8009ec6:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009eca:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8009ece:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ed0:	68b3      	ldr	r3, [r6, #8]
 8009ed2:	68f2      	ldr	r2, [r6, #12]
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	3a01      	subs	r2, #1
 8009ed8:	025b      	lsls	r3, r3, #9
 8009eda:	0412      	lsls	r2, r2, #16
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	6872      	ldr	r2, [r6, #4]
 8009ee6:	3a01      	subs	r2, #1
 8009ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009eec:	4313      	orrs	r3, r2
 8009eee:	6932      	ldr	r2, [r6, #16]
 8009ef0:	3a01      	subs	r2, #1
 8009ef2:	0612      	lsls	r2, r2, #24
 8009ef4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009efc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009efe:	6972      	ldr	r2, [r6, #20]
 8009f00:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009f04:	4313      	orrs	r3, r2
 8009f06:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009f08:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009f0a:	69b2      	ldr	r2, [r6, #24]
 8009f0c:	f023 0320 	bic.w	r3, r3, #32
 8009f10:	4313      	orrs	r3, r2
 8009f12:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009f14:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009f16:	f023 0310 	bic.w	r3, r3, #16
 8009f1a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009f1c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009f1e:	69f2      	ldr	r2, [r6, #28]
 8009f20:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f24:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009f28:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009f2c:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009f2e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009f30:	f043 0310 	orr.w	r3, r3, #16
 8009f34:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009f36:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8009f38:	b9b5      	cbnz	r5, 8009f68 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009f3a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009f3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009f40:	4c11      	ldr	r4, [pc, #68]	@ (8009f88 <RCCEx_PLL2_Config+0xec>)
 8009f42:	6823      	ldr	r3, [r4, #0]
 8009f44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f48:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f4a:	f7fc f911 	bl	8006170 <HAL_GetTick>
 8009f4e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f50:	6823      	ldr	r3, [r4, #0]
 8009f52:	011b      	lsls	r3, r3, #4
 8009f54:	d50f      	bpl.n	8009f76 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8009f56:	2000      	movs	r0, #0
 8009f58:	e005      	b.n	8009f66 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f5a:	f7fc f909 	bl	8006170 <HAL_GetTick>
 8009f5e:	1bc0      	subs	r0, r0, r7
 8009f60:	2802      	cmp	r0, #2
 8009f62:	d9ab      	bls.n	8009ebc <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8009f64:	2003      	movs	r0, #3
}
 8009f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8009f68:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009f6a:	bf0c      	ite	eq
 8009f6c:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009f70:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8009f74:	e7e3      	b.n	8009f3e <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f76:	f7fc f8fb 	bl	8006170 <HAL_GetTick>
 8009f7a:	1b40      	subs	r0, r0, r5
 8009f7c:	2802      	cmp	r0, #2
 8009f7e:	d9e7      	bls.n	8009f50 <RCCEx_PLL2_Config+0xb4>
 8009f80:	e7f0      	b.n	8009f64 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8009f82:	2001      	movs	r0, #1
 8009f84:	e7ef      	b.n	8009f66 <RCCEx_PLL2_Config+0xca>
 8009f86:	bf00      	nop
 8009f88:	58024400 	.word	0x58024400

08009f8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f8e:	4c3a      	ldr	r4, [pc, #232]	@ (800a078 <RCCEx_PLL3_Config+0xec>)
{
 8009f90:	4606      	mov	r6, r0
 8009f92:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f94:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009f96:	f003 0303 	and.w	r3, r3, #3
 8009f9a:	2b03      	cmp	r3, #3
 8009f9c:	d069      	beq.n	800a072 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f9e:	6823      	ldr	r3, [r4, #0]
 8009fa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009fa4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fa6:	f7fc f8e3 	bl	8006170 <HAL_GetTick>
 8009faa:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	009a      	lsls	r2, r3, #2
 8009fb0:	d44b      	bmi.n	800a04a <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009fb2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009fb4:	6832      	ldr	r2, [r6, #0]
 8009fb6:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8009fba:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8009fbe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009fc0:	68b3      	ldr	r3, [r6, #8]
 8009fc2:	68f2      	ldr	r2, [r6, #12]
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	3a01      	subs	r2, #1
 8009fc8:	025b      	lsls	r3, r3, #9
 8009fca:	0412      	lsls	r2, r2, #16
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	6872      	ldr	r2, [r6, #4]
 8009fd6:	3a01      	subs	r2, #1
 8009fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	6932      	ldr	r2, [r6, #16]
 8009fe0:	3a01      	subs	r2, #1
 8009fe2:	0612      	lsls	r2, r2, #24
 8009fe4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009fec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009fee:	6972      	ldr	r2, [r6, #20]
 8009ff0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009ff8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009ffa:	69b2      	ldr	r2, [r6, #24]
 8009ffc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a000:	4313      	orrs	r3, r2
 800a002:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a004:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a006:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a00a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a00c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a00e:	69f2      	ldr	r2, [r6, #28]
 800a010:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a014:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a018:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a01c:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a01e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a024:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a026:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a028:	b9b5      	cbnz	r5, 800a058 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a02a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a02e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a030:	4c11      	ldr	r4, [pc, #68]	@ (800a078 <RCCEx_PLL3_Config+0xec>)
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a038:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a03a:	f7fc f899 	bl	8006170 <HAL_GetTick>
 800a03e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a040:	6823      	ldr	r3, [r4, #0]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	d50f      	bpl.n	800a066 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800a046:	2000      	movs	r0, #0
 800a048:	e005      	b.n	800a056 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a04a:	f7fc f891 	bl	8006170 <HAL_GetTick>
 800a04e:	1bc0      	subs	r0, r0, r7
 800a050:	2802      	cmp	r0, #2
 800a052:	d9ab      	bls.n	8009fac <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800a054:	2003      	movs	r0, #3
}
 800a056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800a058:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a05a:	bf0c      	ite	eq
 800a05c:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a060:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800a064:	e7e3      	b.n	800a02e <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a066:	f7fc f883 	bl	8006170 <HAL_GetTick>
 800a06a:	1b40      	subs	r0, r0, r5
 800a06c:	2802      	cmp	r0, #2
 800a06e:	d9e7      	bls.n	800a040 <RCCEx_PLL3_Config+0xb4>
 800a070:	e7f0      	b.n	800a054 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800a072:	2001      	movs	r0, #1
 800a074:	e7ef      	b.n	800a056 <RCCEx_PLL3_Config+0xca>
 800a076:	bf00      	nop
 800a078:	58024400 	.word	0x58024400

0800a07c <HAL_RCCEx_PeriphCLKConfig>:
{
 800a07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a080:	6803      	ldr	r3, [r0, #0]
{
 800a082:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a084:	011c      	lsls	r4, r3, #4
 800a086:	d51e      	bpl.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a088:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800a08a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a08e:	d02a      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a090:	d80f      	bhi.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800a092:	b1d3      	cbz	r3, 800a0ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800a094:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a098:	d01d      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800a09a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a09c:	682b      	ldr	r3, [r5, #0]
 800a09e:	05d8      	lsls	r0, r3, #23
 800a0a0:	d54f      	bpl.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a0a2:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800a0a4:	2b04      	cmp	r3, #4
 800a0a6:	d84b      	bhi.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800a0a8:	e8df f003 	tbb	[pc, r3]
 800a0ac:	27443d22 	.word	0x27443d22
 800a0b0:	27          	.byte	0x27
 800a0b1:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a0b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a0b6:	d1f0      	bne.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a0b8:	4a86      	ldr	r2, [pc, #536]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a0ba:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800a0bc:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a0be:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a0c2:	430b      	orrs	r3, r1
 800a0c4:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a0c6:	2600      	movs	r6, #0
 800a0c8:	e7e8      	b.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0ca:	4a82      	ldr	r2, [pc, #520]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a0cc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a0ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a0d4:	e7f0      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0d6:	2102      	movs	r1, #2
 800a0d8:	3008      	adds	r0, #8
 800a0da:	f7ff fedf 	bl	8009e9c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0de:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	d1db      	bne.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x20>
 800a0e4:	e7e8      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0e6:	2102      	movs	r1, #2
 800a0e8:	3028      	adds	r0, #40	@ 0x28
 800a0ea:	f7ff ff4f 	bl	8009f8c <RCCEx_PLL3_Config>
 800a0ee:	e7f6      	b.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0f0:	4a78      	ldr	r2, [pc, #480]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a0f2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a0f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a0fa:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800a0fc:	bb1c      	cbnz	r4, 800a146 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a0fe:	4a75      	ldr	r2, [pc, #468]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a100:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800a102:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a104:	f023 0307 	bic.w	r3, r3, #7
 800a108:	430b      	orrs	r3, r1
 800a10a:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	0599      	lsls	r1, r3, #22
 800a110:	d528      	bpl.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a112:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800a114:	2b80      	cmp	r3, #128	@ 0x80
 800a116:	d043      	beq.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800a118:	d817      	bhi.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800a11a:	b3a3      	cbz	r3, 800a186 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800a11c:	2b40      	cmp	r3, #64	@ 0x40
 800a11e:	d038      	beq.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a120:	2601      	movs	r6, #1
 800a122:	4634      	mov	r4, r6
 800a124:	e01e      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a126:	2100      	movs	r1, #0
 800a128:	f105 0008 	add.w	r0, r5, #8
 800a12c:	f7ff feb6 	bl	8009e9c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a130:	4604      	mov	r4, r0
        break;
 800a132:	e7e3      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a134:	2100      	movs	r1, #0
 800a136:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a13a:	f7ff ff27 	bl	8009f8c <RCCEx_PLL3_Config>
 800a13e:	e7f7      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a140:	2601      	movs	r6, #1
 800a142:	4634      	mov	r4, r6
 800a144:	e7e2      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a146:	4626      	mov	r6, r4
 800a148:	e7e0      	b.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a14a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a14c:	d002      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800a14e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a152:	d1e5      	bne.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800a154:	bb54      	cbnz	r4, 800a1ac <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a156:	4a5f      	ldr	r2, [pc, #380]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a158:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a15a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a15c:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800a160:	430b      	orrs	r3, r1
 800a162:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a164:	682b      	ldr	r3, [r5, #0]
 800a166:	055a      	lsls	r2, r3, #21
 800a168:	d531      	bpl.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a16a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800a16e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a172:	d049      	beq.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a174:	d81c      	bhi.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800a176:	2b00      	cmp	r3, #0
 800a178:	d039      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x172>
 800a17a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a17e:	d03c      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800a180:	2601      	movs	r6, #1
 800a182:	4634      	mov	r4, r6
 800a184:	e023      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a186:	4a53      	ldr	r2, [pc, #332]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a188:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a18a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a18e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a190:	e7e0      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a192:	2100      	movs	r1, #0
 800a194:	f105 0008 	add.w	r0, r5, #8
 800a198:	f7ff fe80 	bl	8009e9c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a19c:	4604      	mov	r4, r0
        break;
 800a19e:	e7d9      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a1a6:	f7ff fef1 	bl	8009f8c <RCCEx_PLL3_Config>
 800a1aa:	e7f7      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x120>
 800a1ac:	4626      	mov	r6, r4
 800a1ae:	e7d9      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a1b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a1b4:	d002      	beq.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x140>
 800a1b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a1ba:	d1e1      	bne.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800a1bc:	bb54      	cbnz	r4, 800a214 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a1be:	4a45      	ldr	r2, [pc, #276]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a1c0:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800a1c4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a1c6:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800a1ca:	430b      	orrs	r3, r1
 800a1cc:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a1ce:	682b      	ldr	r3, [r5, #0]
 800a1d0:	051b      	lsls	r3, r3, #20
 800a1d2:	d530      	bpl.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a1d4:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800a1d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1dc:	d045      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a1de:	d81b      	bhi.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800a1e0:	b3b3      	cbz	r3, 800a250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a1e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1e6:	d039      	beq.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800a1e8:	2601      	movs	r6, #1
 800a1ea:	4634      	mov	r4, r6
 800a1ec:	e023      	b.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1ee:	4a39      	ldr	r2, [pc, #228]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a1f0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a1f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a1f8:	e7e0      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	f105 0008 	add.w	r0, r5, #8
 800a200:	f7ff fe4c 	bl	8009e9c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a204:	4604      	mov	r4, r0
        break;
 800a206:	e7d9      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a208:	2100      	movs	r1, #0
 800a20a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a20e:	f7ff febd 	bl	8009f8c <RCCEx_PLL3_Config>
 800a212:	e7f7      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800a214:	4626      	mov	r6, r4
 800a216:	e7da      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a218:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a21c:	d002      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a21e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a222:	d1e1      	bne.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800a224:	bb3c      	cbnz	r4, 800a276 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a226:	4a2b      	ldr	r2, [pc, #172]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a228:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800a22c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a22e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800a232:	430b      	orrs	r3, r1
 800a234:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a236:	682b      	ldr	r3, [r5, #0]
 800a238:	019f      	lsls	r7, r3, #6
 800a23a:	d528      	bpl.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800a23c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800a23e:	2b20      	cmp	r3, #32
 800a240:	d03e      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800a242:	d81a      	bhi.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a244:	b1db      	cbz	r3, 800a27e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a246:	2b10      	cmp	r3, #16
 800a248:	d034      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800a24a:	2601      	movs	r6, #1
 800a24c:	4634      	mov	r4, r6
 800a24e:	e01e      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a250:	4a20      	ldr	r2, [pc, #128]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a252:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a258:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a25a:	e7e3      	b.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a25c:	2100      	movs	r1, #0
 800a25e:	f105 0008 	add.w	r0, r5, #8
 800a262:	f7ff fe1b 	bl	8009e9c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a266:	4604      	mov	r4, r0
        break;
 800a268:	e7dc      	b.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a26a:	2100      	movs	r1, #0
 800a26c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a270:	f7ff fe8c 	bl	8009f8c <RCCEx_PLL3_Config>
 800a274:	e7f7      	b.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a276:	4626      	mov	r6, r4
 800a278:	e7dd      	b.n	800a236 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800a27a:	2b30      	cmp	r3, #48	@ 0x30
 800a27c:	d1e5      	bne.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800a27e:	bb34      	cbnz	r4, 800a2ce <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a280:	4a14      	ldr	r2, [pc, #80]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a282:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a284:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a286:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a28a:	430b      	orrs	r3, r1
 800a28c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a28e:	682b      	ldr	r3, [r5, #0]
 800a290:	04d8      	lsls	r0, r3, #19
 800a292:	d530      	bpl.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800a294:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a29a:	f000 8097 	beq.w	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x350>
 800a29e:	d81b      	bhi.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f000 8086 	beq.w	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800a2a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2aa:	f000 8088 	beq.w	800a3be <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a2ae:	2601      	movs	r6, #1
 800a2b0:	4634      	mov	r4, r6
 800a2b2:	e020      	b.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2b4:	4a07      	ldr	r2, [pc, #28]	@ (800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a2b6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a2b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a2be:	e7de      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a2c0:	2102      	movs	r1, #2
 800a2c2:	f105 0008 	add.w	r0, r5, #8
 800a2c6:	f7ff fde9 	bl	8009e9c <RCCEx_PLL2_Config>
 800a2ca:	4604      	mov	r4, r0
        break;
 800a2cc:	e7d7      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a2ce:	4626      	mov	r6, r4
 800a2d0:	e7dd      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x212>
 800a2d2:	bf00      	nop
 800a2d4:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800a2d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a2dc:	d002      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800a2de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a2e2:	d1e4      	bne.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800a2e4:	2c00      	cmp	r4, #0
 800a2e6:	d177      	bne.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a2e8:	4a9e      	ldr	r2, [pc, #632]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a2ea:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800a2ec:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a2ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2f2:	430b      	orrs	r3, r1
 800a2f4:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a2f6:	682b      	ldr	r3, [r5, #0]
 800a2f8:	0499      	lsls	r1, r3, #18
 800a2fa:	d50c      	bpl.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a2fc:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800a2fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a302:	f000 8083 	beq.w	800a40c <HAL_RCCEx_PeriphCLKConfig+0x390>
 800a306:	d869      	bhi.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d06f      	beq.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x370>
 800a30c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a310:	d075      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a312:	2601      	movs	r6, #1
 800a314:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a316:	682b      	ldr	r3, [r5, #0]
 800a318:	045a      	lsls	r2, r3, #17
 800a31a:	d50e      	bpl.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a31c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800a320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a324:	f000 8093 	beq.w	800a44e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800a328:	d878      	bhi.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d07e      	beq.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800a32e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a332:	f000 8085 	beq.w	800a440 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800a336:	2601      	movs	r6, #1
 800a338:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a33a:	682b      	ldr	r3, [r5, #0]
 800a33c:	015b      	lsls	r3, r3, #5
 800a33e:	d515      	bpl.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800a340:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a342:	b14b      	cbz	r3, 800a358 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800a344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a348:	f040 8089 	bne.w	800a45e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a34c:	2101      	movs	r1, #1
 800a34e:	f105 0008 	add.w	r0, r5, #8
 800a352:	f7ff fda3 	bl	8009e9c <RCCEx_PLL2_Config>
 800a356:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a358:	2c00      	cmp	r4, #0
 800a35a:	f040 8083 	bne.w	800a464 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800a35e:	4a81      	ldr	r2, [pc, #516]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a360:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800a362:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a368:	430b      	orrs	r3, r1
 800a36a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a36c:	682b      	ldr	r3, [r5, #0]
 800a36e:	041f      	lsls	r7, r3, #16
 800a370:	d511      	bpl.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800a372:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a374:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a378:	d076      	beq.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a37a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a37e:	d079      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a380:	2b00      	cmp	r3, #0
 800a382:	d17e      	bne.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800a384:	2c00      	cmp	r4, #0
 800a386:	d17f      	bne.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a388:	4a76      	ldr	r2, [pc, #472]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a38a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800a38c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a38e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800a392:	430b      	orrs	r3, r1
 800a394:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a396:	682b      	ldr	r3, [r5, #0]
 800a398:	01d8      	lsls	r0, r3, #7
 800a39a:	f140 8085 	bpl.w	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800a39e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800a3a0:	2b03      	cmp	r3, #3
 800a3a2:	f200 80e5 	bhi.w	800a570 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800a3a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a3aa:	0076      	.short	0x0076
 800a3ac:	00d50071 	.word	0x00d50071
 800a3b0:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3b2:	4a6c      	ldr	r2, [pc, #432]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a3b4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a3b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a3bc:	e792      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3be:	2100      	movs	r1, #0
 800a3c0:	f105 0008 	add.w	r0, r5, #8
 800a3c4:	f7ff fd6a 	bl	8009e9c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a3c8:	4604      	mov	r4, r0
        break;
 800a3ca:	e78b      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a3d2:	f7ff fddb 	bl	8009f8c <RCCEx_PLL3_Config>
 800a3d6:	e7f7      	b.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a3d8:	4626      	mov	r6, r4
 800a3da:	e78c      	b.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a3dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a3e0:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800a3e4:	d002      	beq.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x370>
 800a3e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a3ea:	d192      	bne.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800a3ec:	b9a4      	cbnz	r4, 800a418 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a3ee:	4a5d      	ldr	r2, [pc, #372]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a3f0:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800a3f2:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a3f4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a3f8:	430b      	orrs	r3, r1
 800a3fa:	6513      	str	r3, [r2, #80]	@ 0x50
 800a3fc:	e78b      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3fe:	2101      	movs	r1, #1
 800a400:	f105 0008 	add.w	r0, r5, #8
 800a404:	f7ff fd4a 	bl	8009e9c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a408:	4604      	mov	r4, r0
        break;
 800a40a:	e7ef      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a40c:	2101      	movs	r1, #1
 800a40e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a412:	f7ff fdbb 	bl	8009f8c <RCCEx_PLL3_Config>
 800a416:	e7f7      	b.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800a418:	4626      	mov	r6, r4
 800a41a:	e77c      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a41c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a420:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800a424:	d002      	beq.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800a426:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a42a:	d184      	bne.n	800a336 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800a42c:	b9ac      	cbnz	r4, 800a45a <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a42e:	4a4d      	ldr	r2, [pc, #308]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a430:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800a434:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a436:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800a43a:	430b      	orrs	r3, r1
 800a43c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a43e:	e77c      	b.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a440:	2101      	movs	r1, #1
 800a442:	f105 0008 	add.w	r0, r5, #8
 800a446:	f7ff fd29 	bl	8009e9c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a44a:	4604      	mov	r4, r0
        break;
 800a44c:	e7ee      	b.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a44e:	2101      	movs	r1, #1
 800a450:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a454:	f7ff fd9a 	bl	8009f8c <RCCEx_PLL3_Config>
 800a458:	e7f7      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a45a:	4626      	mov	r6, r4
 800a45c:	e76d      	b.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800a45e:	2601      	movs	r6, #1
 800a460:	4634      	mov	r4, r6
 800a462:	e783      	b.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800a464:	4626      	mov	r6, r4
 800a466:	e781      	b.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a468:	4a3e      	ldr	r2, [pc, #248]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a46a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a46c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a470:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a472:	e787      	b.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a474:	2101      	movs	r1, #1
 800a476:	f105 0008 	add.w	r0, r5, #8
 800a47a:	f7ff fd0f 	bl	8009e9c <RCCEx_PLL2_Config>
 800a47e:	4604      	mov	r4, r0
        break;
 800a480:	e780      	b.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800a482:	2601      	movs	r6, #1
 800a484:	4634      	mov	r4, r6
 800a486:	e786      	b.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800a488:	4626      	mov	r6, r4
 800a48a:	e784      	b.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a48c:	4a35      	ldr	r2, [pc, #212]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a48e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a494:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a496:	2c00      	cmp	r4, #0
 800a498:	d16d      	bne.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a49a:	4a32      	ldr	r2, [pc, #200]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a49c:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800a49e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a4a0:	f023 0303 	bic.w	r3, r3, #3
 800a4a4:	430b      	orrs	r3, r1
 800a4a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	0259      	lsls	r1, r3, #9
 800a4ac:	d539      	bpl.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a4ae:	4f2e      	ldr	r7, [pc, #184]	@ (800a568 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4b6:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a4b8:	f7fb fe5a 	bl	8006170 <HAL_GetTick>
 800a4bc:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	05da      	lsls	r2, r3, #23
 800a4c2:	d55a      	bpl.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800a4c4:	2c00      	cmp	r4, #0
 800a4c6:	d176      	bne.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a4c8:	4b26      	ldr	r3, [pc, #152]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a4ca:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800a4ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a4d0:	4042      	eors	r2, r0
 800a4d2:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800a4d6:	d00b      	beq.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a4d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800a4da:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a4dc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800a4e0:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800a4e4:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a4e6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a4e8:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800a4ec:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800a4ee:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a4f0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a4f4:	d04a      	beq.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4f6:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800a4fa:	491a      	ldr	r1, [pc, #104]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a4fc:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800a500:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800a504:	d153      	bne.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0x532>
 800a506:	6908      	ldr	r0, [r1, #16]
 800a508:	4a18      	ldr	r2, [pc, #96]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800a50a:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800a50e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800a512:	4302      	orrs	r2, r0
 800a514:	610a      	str	r2, [r1, #16]
 800a516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a51a:	4a12      	ldr	r2, [pc, #72]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a51c:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800a51e:	430b      	orrs	r3, r1
 800a520:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a522:	682b      	ldr	r3, [r5, #0]
 800a524:	07d8      	lsls	r0, r3, #31
 800a526:	d50a      	bpl.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a528:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800a52c:	2b10      	cmp	r3, #16
 800a52e:	d05b      	beq.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800a530:	d843      	bhi.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800a532:	2b00      	cmp	r3, #0
 800a534:	d047      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800a536:	2b08      	cmp	r3, #8
 800a538:	d04f      	beq.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800a53a:	2601      	movs	r6, #1
 800a53c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a53e:	682b      	ldr	r3, [r5, #0]
 800a540:	0799      	lsls	r1, r3, #30
 800a542:	d567      	bpl.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a544:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800a546:	2b05      	cmp	r3, #5
 800a548:	d87a      	bhi.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800a54a:	e8df f003 	tbb	[pc, r3]
 800a54e:	555b      	.short	0x555b
 800a550:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a554:	2102      	movs	r1, #2
 800a556:	f105 0008 	add.w	r0, r5, #8
 800a55a:	f7ff fc9f 	bl	8009e9c <RCCEx_PLL2_Config>
 800a55e:	4604      	mov	r4, r0
        break;
 800a560:	e799      	b.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a562:	bf00      	nop
 800a564:	58024400 	.word	0x58024400
 800a568:	58024800 	.word	0x58024800
 800a56c:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800a570:	2601      	movs	r6, #1
 800a572:	4634      	mov	r4, r6
 800a574:	e798      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800a576:	4626      	mov	r6, r4
 800a578:	e796      	b.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a57a:	f7fb fdf9 	bl	8006170 <HAL_GetTick>
 800a57e:	eba0 0008 	sub.w	r0, r0, r8
 800a582:	2864      	cmp	r0, #100	@ 0x64
 800a584:	d99b      	bls.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800a586:	2603      	movs	r6, #3
 800a588:	4634      	mov	r4, r6
 800a58a:	e7ca      	b.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800a58c:	f7fb fdf0 	bl	8006170 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a590:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800a64c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800a594:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a596:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a59a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800a59e:	079b      	lsls	r3, r3, #30
 800a5a0:	d4a9      	bmi.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5a2:	f7fb fde5 	bl	8006170 <HAL_GetTick>
 800a5a6:	1bc0      	subs	r0, r0, r7
 800a5a8:	4548      	cmp	r0, r9
 800a5aa:	d9f6      	bls.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800a5ac:	e7eb      	b.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a5ae:	690a      	ldr	r2, [r1, #16]
 800a5b0:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800a5b4:	e7ae      	b.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a5b6:	4626      	mov	r6, r4
 800a5b8:	e7b3      	b.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a5ba:	f023 0208 	bic.w	r2, r3, #8
 800a5be:	2a20      	cmp	r2, #32
 800a5c0:	d001      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800a5c2:	2b18      	cmp	r3, #24
 800a5c4:	d1b9      	bne.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800a5c6:	b9ac      	cbnz	r4, 800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a5c8:	4a20      	ldr	r2, [pc, #128]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a5ca:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800a5ce:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a5d0:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800a5d4:	430b      	orrs	r3, r1
 800a5d6:	6553      	str	r3, [r2, #84]	@ 0x54
 800a5d8:	e7b1      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5da:	2101      	movs	r1, #1
 800a5dc:	f105 0008 	add.w	r0, r5, #8
 800a5e0:	f7ff fc5c 	bl	8009e9c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5e4:	4604      	mov	r4, r0
        break;
 800a5e6:	e7ee      	b.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a5ee:	f7ff fccd 	bl	8009f8c <RCCEx_PLL3_Config>
 800a5f2:	e7f7      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800a5f4:	4626      	mov	r6, r4
 800a5f6:	e7a2      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5f8:	2101      	movs	r1, #1
 800a5fa:	f105 0008 	add.w	r0, r5, #8
 800a5fe:	f7ff fc4d 	bl	8009e9c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a602:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a604:	b9fc      	cbnz	r4, 800a646 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a606:	4a11      	ldr	r2, [pc, #68]	@ (800a64c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a608:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800a60a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a60c:	f023 0307 	bic.w	r3, r3, #7
 800a610:	430b      	orrs	r3, r1
 800a612:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a614:	682b      	ldr	r3, [r5, #0]
 800a616:	075a      	lsls	r2, r3, #29
 800a618:	d52b      	bpl.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a61a:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800a61e:	2b05      	cmp	r3, #5
 800a620:	f200 816e 	bhi.w	800a900 <HAL_RCCEx_PeriphCLKConfig+0x884>
 800a624:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a628:	0014001a 	.word	0x0014001a
 800a62c:	001a0166 	.word	0x001a0166
 800a630:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a634:	2101      	movs	r1, #1
 800a636:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a63a:	f7ff fca7 	bl	8009f8c <RCCEx_PLL3_Config>
 800a63e:	e7e0      	b.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a640:	2601      	movs	r6, #1
 800a642:	4634      	mov	r4, r6
 800a644:	e7e6      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a646:	4626      	mov	r6, r4
 800a648:	e7e4      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a64a:	bf00      	nop
 800a64c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a650:	2101      	movs	r1, #1
 800a652:	f105 0008 	add.w	r0, r5, #8
 800a656:	f7ff fc21 	bl	8009e9c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a65a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a65c:	2c00      	cmp	r4, #0
 800a65e:	f040 8152 	bne.w	800a906 <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a662:	4aaa      	ldr	r2, [pc, #680]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a664:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800a668:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a66a:	f023 0307 	bic.w	r3, r3, #7
 800a66e:	430b      	orrs	r3, r1
 800a670:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a672:	682b      	ldr	r3, [r5, #0]
 800a674:	069b      	lsls	r3, r3, #26
 800a676:	d510      	bpl.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a678:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800a67c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a680:	f000 8160 	beq.w	800a944 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800a684:	f200 8144 	bhi.w	800a910 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 814a 	beq.w	800a922 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800a68e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a692:	f000 8150 	beq.w	800a936 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800a696:	2601      	movs	r6, #1
 800a698:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a69a:	682b      	ldr	r3, [r5, #0]
 800a69c:	065f      	lsls	r7, r3, #25
 800a69e:	d510      	bpl.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a6a0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800a6a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a6a8:	f000 816e 	beq.w	800a988 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800a6ac:	f200 8152 	bhi.w	800a954 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f000 8158 	beq.w	800a966 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800a6b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6ba:	f000 815e 	beq.w	800a97a <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a6be:	2601      	movs	r6, #1
 800a6c0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a6c2:	682b      	ldr	r3, [r5, #0]
 800a6c4:	0618      	lsls	r0, r3, #24
 800a6c6:	d510      	bpl.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a6c8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800a6cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a6d0:	f000 817c 	beq.w	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x950>
 800a6d4:	f200 8160 	bhi.w	800a998 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f000 8166 	beq.w	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800a6de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6e2:	f000 816c 	beq.w	800a9be <HAL_RCCEx_PeriphCLKConfig+0x942>
 800a6e6:	2601      	movs	r6, #1
 800a6e8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a6ea:	682b      	ldr	r3, [r5, #0]
 800a6ec:	0719      	lsls	r1, r3, #28
 800a6ee:	d514      	bpl.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a6f0:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800a6f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6f8:	d107      	bne.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a6fa:	2102      	movs	r1, #2
 800a6fc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a700:	f7ff fc44 	bl	8009f8c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a704:	2800      	cmp	r0, #0
 800a706:	bf18      	it	ne
 800a708:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a70a:	4a80      	ldr	r2, [pc, #512]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a70c:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800a710:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a712:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a716:	430b      	orrs	r3, r1
 800a718:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a71a:	682b      	ldr	r3, [r5, #0]
 800a71c:	06da      	lsls	r2, r3, #27
 800a71e:	d514      	bpl.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a720:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800a724:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a728:	d107      	bne.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a72a:	2102      	movs	r1, #2
 800a72c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a730:	f7ff fc2c 	bl	8009f8c <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a734:	2800      	cmp	r0, #0
 800a736:	bf18      	it	ne
 800a738:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a73a:	4a74      	ldr	r2, [pc, #464]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a73c:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800a740:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a742:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a746:	430b      	orrs	r3, r1
 800a748:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a74a:	682b      	ldr	r3, [r5, #0]
 800a74c:	031b      	lsls	r3, r3, #12
 800a74e:	d51b      	bpl.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800a750:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800a754:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800a758:	f000 8140 	beq.w	800a9dc <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a75c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800a760:	d007      	beq.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800a762:	2900      	cmp	r1, #0
 800a764:	f040 8140 	bne.w	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a768:	f105 0008 	add.w	r0, r5, #8
 800a76c:	f7ff fb96 	bl	8009e9c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a770:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a772:	2c00      	cmp	r4, #0
 800a774:	f040 813b 	bne.w	800a9ee <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a778:	4a64      	ldr	r2, [pc, #400]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a77a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800a77e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a780:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a784:	430b      	orrs	r3, r1
 800a786:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	035f      	lsls	r7, r3, #13
 800a78c:	d50f      	bpl.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800a78e:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800a792:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a796:	f000 813b 	beq.w	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800a79a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a79e:	f000 812d 	beq.w	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x980>
 800a7a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7a6:	f000 8124 	beq.w	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800a7aa:	2601      	movs	r6, #1
 800a7ac:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a7ae:	682b      	ldr	r3, [r5, #0]
 800a7b0:	03d8      	lsls	r0, r3, #15
 800a7b2:	d509      	bpl.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800a7b4:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f000 8133 	beq.w	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800a7bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7c0:	f000 813d 	beq.w	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800a7c4:	2601      	movs	r6, #1
 800a7c6:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a7c8:	682b      	ldr	r3, [r5, #0]
 800a7ca:	0099      	lsls	r1, r3, #2
 800a7cc:	d507      	bpl.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a7ce:	2102      	movs	r1, #2
 800a7d0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a7d4:	f7ff fbda 	bl	8009f8c <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	bf18      	it	ne
 800a7dc:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a7de:	e9d5 3100 	ldrd	r3, r1, [r5]
 800a7e2:	039a      	lsls	r2, r3, #14
 800a7e4:	f140 8143 	bpl.w	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800a7e8:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800a7ec:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a7f0:	f000 813f 	beq.w	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800a7f4:	f200 812c 	bhi.w	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	f000 812f 	beq.w	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800a7fe:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a800:	02df      	lsls	r7, r3, #11
 800a802:	d506      	bpl.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a804:	4841      	ldr	r0, [pc, #260]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a806:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800a808:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a80a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a80e:	4332      	orrs	r2, r6
 800a810:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a812:	00de      	lsls	r6, r3, #3
 800a814:	d507      	bpl.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a816:	483d      	ldr	r0, [pc, #244]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a818:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800a81c:	6902      	ldr	r2, [r0, #16]
 800a81e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a822:	4332      	orrs	r2, r6
 800a824:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a826:	0298      	lsls	r0, r3, #10
 800a828:	d506      	bpl.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a82a:	4838      	ldr	r0, [pc, #224]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a82c:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800a82e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a830:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a834:	4332      	orrs	r2, r6
 800a836:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a838:	005a      	lsls	r2, r3, #1
 800a83a:	d509      	bpl.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a83c:	4a33      	ldr	r2, [pc, #204]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a83e:	6910      	ldr	r0, [r2, #16]
 800a840:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800a844:	6110      	str	r0, [r2, #16]
 800a846:	6910      	ldr	r0, [r2, #16]
 800a848:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800a84c:	4330      	orrs	r0, r6
 800a84e:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a850:	2b00      	cmp	r3, #0
 800a852:	da06      	bge.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a854:	482d      	ldr	r0, [pc, #180]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a856:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a858:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800a85a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a85e:	4332      	orrs	r2, r6
 800a860:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a862:	021f      	lsls	r7, r3, #8
 800a864:	d507      	bpl.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a866:	4a29      	ldr	r2, [pc, #164]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a868:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800a86c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a86e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a872:	4303      	orrs	r3, r0
 800a874:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a876:	07ce      	lsls	r6, r1, #31
 800a878:	d506      	bpl.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a87a:	2100      	movs	r1, #0
 800a87c:	f105 0008 	add.w	r0, r5, #8
 800a880:	f7ff fb0c 	bl	8009e9c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a884:	4607      	mov	r7, r0
 800a886:	b900      	cbnz	r0, 800a88a <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800a888:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a88a:	686b      	ldr	r3, [r5, #4]
 800a88c:	079c      	lsls	r4, r3, #30
 800a88e:	d506      	bpl.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a890:	2101      	movs	r1, #1
 800a892:	f105 0008 	add.w	r0, r5, #8
 800a896:	f7ff fb01 	bl	8009e9c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a89a:	4606      	mov	r6, r0
 800a89c:	b900      	cbnz	r0, 800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800a89e:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a8a0:	686b      	ldr	r3, [r5, #4]
 800a8a2:	0758      	lsls	r0, r3, #29
 800a8a4:	d506      	bpl.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a8a6:	2102      	movs	r1, #2
 800a8a8:	f105 0008 	add.w	r0, r5, #8
 800a8ac:	f7ff faf6 	bl	8009e9c <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	b900      	cbnz	r0, 800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800a8b4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a8b6:	686b      	ldr	r3, [r5, #4]
 800a8b8:	0719      	lsls	r1, r3, #28
 800a8ba:	d506      	bpl.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8bc:	2100      	movs	r1, #0
 800a8be:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a8c2:	f7ff fb63 	bl	8009f8c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	b900      	cbnz	r0, 800a8cc <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800a8ca:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a8cc:	686b      	ldr	r3, [r5, #4]
 800a8ce:	06da      	lsls	r2, r3, #27
 800a8d0:	d506      	bpl.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8d2:	2101      	movs	r1, #1
 800a8d4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a8d8:	f7ff fb58 	bl	8009f8c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a8dc:	4604      	mov	r4, r0
 800a8de:	b900      	cbnz	r0, 800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800a8e0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a8e2:	686b      	ldr	r3, [r5, #4]
 800a8e4:	069b      	lsls	r3, r3, #26
 800a8e6:	f100 80ca 	bmi.w	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800a8ea:	1e20      	subs	r0, r4, #0
 800a8ec:	bf18      	it	ne
 800a8ee:	2001      	movne	r0, #1
}
 800a8f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8f4:	2101      	movs	r1, #1
 800a8f6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a8fa:	f7ff fb47 	bl	8009f8c <RCCEx_PLL3_Config>
 800a8fe:	e6ac      	b.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a900:	2601      	movs	r6, #1
 800a902:	4634      	mov	r4, r6
 800a904:	e6b5      	b.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800a906:	4626      	mov	r6, r4
 800a908:	e6b3      	b.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800a90a:	bf00      	nop
 800a90c:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a910:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a914:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800a918:	d003      	beq.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800a91a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a91e:	f47f aeba 	bne.w	800a696 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800a922:	b9ac      	cbnz	r4, 800a950 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a924:	4a5b      	ldr	r2, [pc, #364]	@ (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a926:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800a92a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a92c:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800a930:	430b      	orrs	r3, r1
 800a932:	6553      	str	r3, [r2, #84]	@ 0x54
 800a934:	e6b1      	b.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a936:	2100      	movs	r1, #0
 800a938:	f105 0008 	add.w	r0, r5, #8
 800a93c:	f7ff faae 	bl	8009e9c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a940:	4604      	mov	r4, r0
        break;
 800a942:	e7ee      	b.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a944:	2102      	movs	r1, #2
 800a946:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a94a:	f7ff fb1f 	bl	8009f8c <RCCEx_PLL3_Config>
 800a94e:	e7f7      	b.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a950:	4626      	mov	r6, r4
 800a952:	e6a2      	b.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a954:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a958:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800a95c:	d003      	beq.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800a95e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a962:	f47f aeac 	bne.w	800a6be <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800a966:	b9ac      	cbnz	r4, 800a994 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a968:	4a4a      	ldr	r2, [pc, #296]	@ (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a96a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800a96e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a970:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800a974:	430b      	orrs	r3, r1
 800a976:	6593      	str	r3, [r2, #88]	@ 0x58
 800a978:	e6a3      	b.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a97a:	2100      	movs	r1, #0
 800a97c:	f105 0008 	add.w	r0, r5, #8
 800a980:	f7ff fa8c 	bl	8009e9c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a984:	4604      	mov	r4, r0
        break;
 800a986:	e7ee      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a988:	2102      	movs	r1, #2
 800a98a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a98e:	f7ff fafd 	bl	8009f8c <RCCEx_PLL3_Config>
 800a992:	e7f7      	b.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800a994:	4626      	mov	r6, r4
 800a996:	e694      	b.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a998:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a99c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800a9a0:	d003      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800a9a2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a9a6:	f47f ae9e 	bne.w	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800a9aa:	b9ac      	cbnz	r4, 800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a9ac:	4a39      	ldr	r2, [pc, #228]	@ (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a9ae:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800a9b2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a9b4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800a9b8:	430b      	orrs	r3, r1
 800a9ba:	6593      	str	r3, [r2, #88]	@ 0x58
 800a9bc:	e695      	b.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9be:	2100      	movs	r1, #0
 800a9c0:	f105 0008 	add.w	r0, r5, #8
 800a9c4:	f7ff fa6a 	bl	8009e9c <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9c8:	4604      	mov	r4, r0
        break;
 800a9ca:	e7ee      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9cc:	2102      	movs	r1, #2
 800a9ce:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a9d2:	f7ff fadb 	bl	8009f8c <RCCEx_PLL3_Config>
 800a9d6:	e7f7      	b.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800a9d8:	4626      	mov	r6, r4
 800a9da:	e686      	b.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9dc:	2102      	movs	r1, #2
 800a9de:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a9e2:	f7ff fad3 	bl	8009f8c <RCCEx_PLL3_Config>
 800a9e6:	e6c3      	b.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800a9e8:	2601      	movs	r6, #1
 800a9ea:	4634      	mov	r4, r6
 800a9ec:	e6cc      	b.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800a9ee:	4626      	mov	r6, r4
 800a9f0:	e6ca      	b.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9f2:	4a28      	ldr	r2, [pc, #160]	@ (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a9f4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a9f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a9fc:	b97c      	cbnz	r4, 800aa1e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a9fe:	4a25      	ldr	r2, [pc, #148]	@ (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800aa00:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800aa04:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800aa06:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800aa0a:	430b      	orrs	r3, r1
 800aa0c:	6553      	str	r3, [r2, #84]	@ 0x54
 800aa0e:	e6ce      	b.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa10:	2101      	movs	r1, #1
 800aa12:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aa16:	f7ff fab9 	bl	8009f8c <RCCEx_PLL3_Config>
 800aa1a:	4604      	mov	r4, r0
        break;
 800aa1c:	e7ee      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x980>
 800aa1e:	4626      	mov	r6, r4
 800aa20:	e6c5      	b.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa22:	4a1c      	ldr	r2, [pc, #112]	@ (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800aa24:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800aa26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800aa2c:	b974      	cbnz	r4, 800aa4c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aa2e:	4a19      	ldr	r2, [pc, #100]	@ (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800aa30:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800aa32:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800aa34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa38:	430b      	orrs	r3, r1
 800aa3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa3c:	e6c4      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa3e:	2102      	movs	r1, #2
 800aa40:	f105 0008 	add.w	r0, r5, #8
 800aa44:	f7ff fa2a 	bl	8009e9c <RCCEx_PLL2_Config>
 800aa48:	4604      	mov	r4, r0
        break;
 800aa4a:	e7ef      	b.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800aa4c:	4626      	mov	r6, r4
 800aa4e:	e6bb      	b.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800aa50:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800aa54:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800aa58:	f47f aed1 	bne.w	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800aa5c:	2c00      	cmp	r4, #0
 800aa5e:	f47f aecf 	bne.w	800a800 <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aa62:	4c0c      	ldr	r4, [pc, #48]	@ (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800aa64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa66:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800aa6a:	4302      	orrs	r2, r0
 800aa6c:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800aa6e:	4634      	mov	r4, r6
 800aa70:	e6c6      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa72:	4f08      	ldr	r7, [pc, #32]	@ (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800aa74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa76:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800aa7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800aa7c:	e7ee      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa7e:	2102      	movs	r1, #2
 800aa80:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aa84:	f7ff fa82 	bl	8009f8c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	f43f af2e 	beq.w	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800aa8e:	2001      	movs	r0, #1
 800aa90:	e72e      	b.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800aa92:	bf00      	nop
 800aa94:	58024400 	.word	0x58024400

0800aa98 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800aa98:	b538      	push	{r3, r4, r5, lr}
 800aa9a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	b1f0      	cbz	r0, 800aade <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800aaa0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800aaa4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800aaa8:	b91b      	cbnz	r3, 800aab2 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800aaaa:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800aaae:	f7f6 fc77 	bl	80013a0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aab2:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aab4:	1d21      	adds	r1, r4, #4
 800aab6:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aab8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aabc:	f000 fa1f 	bl	800aefe <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800aac0:	6862      	ldr	r2, [r4, #4]
 800aac2:	4629      	mov	r1, r5
 800aac4:	6820      	ldr	r0, [r4, #0]
 800aac6:	f000 fa52 	bl	800af6e <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800aaca:	4a06      	ldr	r2, [pc, #24]	@ (800aae4 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800aacc:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800aace:	6813      	ldr	r3, [r2, #0]
 800aad0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aad4:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800aad6:	2301      	movs	r3, #1
 800aad8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800aadc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800aade:	2001      	movs	r0, #1
 800aae0:	e7fc      	b.n	800aadc <HAL_SDRAM_Init+0x44>
 800aae2:	bf00      	nop
 800aae4:	52004000 	.word	0x52004000

0800aae8 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800aae8:	b510      	push	{r4, lr}
 800aaea:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800aaec:	f7f6 fcf2 	bl	80014d4 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800aaf0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800aaf4:	f000 fa71 	bl	800afda <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800aaf8:	2000      	movs	r0, #0
 800aafa:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800aafe:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800ab02:	bd10      	pop	{r4, pc}

0800ab04 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800ab04:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ab06:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800ab0e:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ab10:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800ab12:	d010      	beq.n	800ab36 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800ab14:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800ab18:	2c01      	cmp	r4, #1
 800ab1a:	d110      	bne.n	800ab3e <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab1c:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ab1e:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab20:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ab24:	f000 fa68 	bl	800aff8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ab28:	6833      	ldr	r3, [r6, #0]
 800ab2a:	2b02      	cmp	r3, #2
 800ab2c:	d104      	bne.n	800ab38 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ab2e:	2305      	movs	r3, #5
 800ab30:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ab34:	2000      	movs	r0, #0
}
 800ab36:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800ab38:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800ab3c:	e7fa      	b.n	800ab34 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800ab3e:	2001      	movs	r0, #1
 800ab40:	e7f9      	b.n	800ab36 <HAL_SDRAM_SendCommand+0x32>

0800ab42 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ab42:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ab44:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800ab48:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	b2d8      	uxtb	r0, r3
 800ab4e:	d00d      	beq.n	800ab6c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800ab50:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	b2dd      	uxtb	r5, r3
 800ab58:	d109      	bne.n	800ab6e <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab5a:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ab5c:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab5e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ab62:	f000 fa5b 	bl	800b01c <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ab66:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ab68:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800ab6c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ab6e:	2001      	movs	r0, #1
 800ab70:	e7fc      	b.n	800ab6c <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800ab72 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ab72:	4770      	bx	lr

0800ab74 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab74:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d12f      	bne.n	800abdc <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab7c:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab7e:	4a18      	ldr	r2, [pc, #96]	@ (800abe0 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ab80:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab84:	6803      	ldr	r3, [r0, #0]
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d01a      	beq.n	800abc0 <HAL_TIM_Base_Start+0x4c>
 800ab8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab8e:	d017      	beq.n	800abc0 <HAL_TIM_Base_Start+0x4c>
 800ab90:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d013      	beq.n	800abc0 <HAL_TIM_Base_Start+0x4c>
 800ab98:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d00f      	beq.n	800abc0 <HAL_TIM_Base_Start+0x4c>
 800aba0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d00b      	beq.n	800abc0 <HAL_TIM_Base_Start+0x4c>
 800aba8:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800abac:	4293      	cmp	r3, r2
 800abae:	d007      	beq.n	800abc0 <HAL_TIM_Base_Start+0x4c>
 800abb0:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d003      	beq.n	800abc0 <HAL_TIM_Base_Start+0x4c>
 800abb8:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d107      	bne.n	800abd0 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abc0:	6899      	ldr	r1, [r3, #8]
 800abc2:	4a08      	ldr	r2, [pc, #32]	@ (800abe4 <HAL_TIM_Base_Start+0x70>)
 800abc4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abc6:	2a06      	cmp	r2, #6
 800abc8:	d006      	beq.n	800abd8 <HAL_TIM_Base_Start+0x64>
 800abca:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800abce:	d003      	beq.n	800abd8 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	f042 0201 	orr.w	r2, r2, #1
 800abd6:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800abd8:	2000      	movs	r0, #0
 800abda:	4770      	bx	lr
    return HAL_ERROR;
 800abdc:	2001      	movs	r0, #1
}
 800abde:	4770      	bx	lr
 800abe0:	40010000 	.word	0x40010000
 800abe4:	00010007 	.word	0x00010007

0800abe8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800abe8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800abec:	2b01      	cmp	r3, #1
 800abee:	d133      	bne.n	800ac58 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abf0:	2302      	movs	r3, #2
 800abf2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800abf6:	6803      	ldr	r3, [r0, #0]
 800abf8:	68da      	ldr	r2, [r3, #12]
 800abfa:	f042 0201 	orr.w	r2, r2, #1
 800abfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac00:	4a16      	ldr	r2, [pc, #88]	@ (800ac5c <HAL_TIM_Base_Start_IT+0x74>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d01a      	beq.n	800ac3c <HAL_TIM_Base_Start_IT+0x54>
 800ac06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac0a:	d017      	beq.n	800ac3c <HAL_TIM_Base_Start_IT+0x54>
 800ac0c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d013      	beq.n	800ac3c <HAL_TIM_Base_Start_IT+0x54>
 800ac14:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d00f      	beq.n	800ac3c <HAL_TIM_Base_Start_IT+0x54>
 800ac1c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d00b      	beq.n	800ac3c <HAL_TIM_Base_Start_IT+0x54>
 800ac24:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d007      	beq.n	800ac3c <HAL_TIM_Base_Start_IT+0x54>
 800ac2c:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d003      	beq.n	800ac3c <HAL_TIM_Base_Start_IT+0x54>
 800ac34:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d107      	bne.n	800ac4c <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac3c:	6899      	ldr	r1, [r3, #8]
 800ac3e:	4a08      	ldr	r2, [pc, #32]	@ (800ac60 <HAL_TIM_Base_Start_IT+0x78>)
 800ac40:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac42:	2a06      	cmp	r2, #6
 800ac44:	d006      	beq.n	800ac54 <HAL_TIM_Base_Start_IT+0x6c>
 800ac46:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800ac4a:	d003      	beq.n	800ac54 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	f042 0201 	orr.w	r2, r2, #1
 800ac52:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800ac54:	2000      	movs	r0, #0
 800ac56:	4770      	bx	lr
    return HAL_ERROR;
 800ac58:	2001      	movs	r0, #1
}
 800ac5a:	4770      	bx	lr
 800ac5c:	40010000 	.word	0x40010000
 800ac60:	00010007 	.word	0x00010007

0800ac64 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800ac64:	4770      	bx	lr

0800ac66 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800ac66:	4770      	bx	lr

0800ac68 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800ac68:	4770      	bx	lr

0800ac6a <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800ac6a:	4770      	bx	lr

0800ac6c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac6c:	6803      	ldr	r3, [r0, #0]
 800ac6e:	691a      	ldr	r2, [r3, #16]
 800ac70:	0791      	lsls	r1, r2, #30
{
 800ac72:	b510      	push	{r4, lr}
 800ac74:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac76:	d50f      	bpl.n	800ac98 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac78:	68da      	ldr	r2, [r3, #12]
 800ac7a:	0792      	lsls	r2, r2, #30
 800ac7c:	d50c      	bpl.n	800ac98 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac7e:	f06f 0202 	mvn.w	r2, #2
 800ac82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac84:	2201      	movs	r2, #1
 800ac86:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac88:	699b      	ldr	r3, [r3, #24]
 800ac8a:	0799      	lsls	r1, r3, #30
 800ac8c:	f000 8085 	beq.w	800ad9a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800ac90:	f7ff ffe9 	bl	800ac66 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac94:	2300      	movs	r3, #0
 800ac96:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac98:	6823      	ldr	r3, [r4, #0]
 800ac9a:	691a      	ldr	r2, [r3, #16]
 800ac9c:	0752      	lsls	r2, r2, #29
 800ac9e:	d510      	bpl.n	800acc2 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aca0:	68da      	ldr	r2, [r3, #12]
 800aca2:	0750      	lsls	r0, r2, #29
 800aca4:	d50d      	bpl.n	800acc2 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aca6:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800acaa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800acac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800acae:	2202      	movs	r2, #2
 800acb0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800acb2:	699b      	ldr	r3, [r3, #24]
 800acb4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800acb8:	d075      	beq.n	800ada6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800acba:	f7ff ffd4 	bl	800ac66 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acbe:	2300      	movs	r3, #0
 800acc0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	691a      	ldr	r2, [r3, #16]
 800acc6:	0711      	lsls	r1, r2, #28
 800acc8:	d50f      	bpl.n	800acea <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800acca:	68da      	ldr	r2, [r3, #12]
 800accc:	0712      	lsls	r2, r2, #28
 800acce:	d50c      	bpl.n	800acea <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800acd0:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800acd4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800acd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800acd8:	2204      	movs	r2, #4
 800acda:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800acdc:	69db      	ldr	r3, [r3, #28]
 800acde:	079b      	lsls	r3, r3, #30
 800ace0:	d067      	beq.n	800adb2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800ace2:	f7ff ffc0 	bl	800ac66 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ace6:	2300      	movs	r3, #0
 800ace8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800acea:	6823      	ldr	r3, [r4, #0]
 800acec:	691a      	ldr	r2, [r3, #16]
 800acee:	06d0      	lsls	r0, r2, #27
 800acf0:	d510      	bpl.n	800ad14 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800acf2:	68da      	ldr	r2, [r3, #12]
 800acf4:	06d1      	lsls	r1, r2, #27
 800acf6:	d50d      	bpl.n	800ad14 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800acf8:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800acfc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800acfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad00:	2208      	movs	r2, #8
 800ad02:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad04:	69db      	ldr	r3, [r3, #28]
 800ad06:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800ad0a:	d058      	beq.n	800adbe <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800ad0c:	f7ff ffab 	bl	800ac66 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad10:	2300      	movs	r3, #0
 800ad12:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	691a      	ldr	r2, [r3, #16]
 800ad18:	07d2      	lsls	r2, r2, #31
 800ad1a:	d508      	bpl.n	800ad2e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad1c:	68da      	ldr	r2, [r3, #12]
 800ad1e:	07d0      	lsls	r0, r2, #31
 800ad20:	d505      	bpl.n	800ad2e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad22:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad26:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad28:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad2a:	f7f6 f901 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad2e:	6823      	ldr	r3, [r4, #0]
 800ad30:	691a      	ldr	r2, [r3, #16]
 800ad32:	0611      	lsls	r1, r2, #24
 800ad34:	d508      	bpl.n	800ad48 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad36:	68da      	ldr	r2, [r3, #12]
 800ad38:	0612      	lsls	r2, r2, #24
 800ad3a:	d505      	bpl.n	800ad48 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 800ad40:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad42:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ad44:	f000 f8d9 	bl	800aefa <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ad48:	6823      	ldr	r3, [r4, #0]
 800ad4a:	691a      	ldr	r2, [r3, #16]
 800ad4c:	05d0      	lsls	r0, r2, #23
 800ad4e:	d508      	bpl.n	800ad62 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad50:	68da      	ldr	r2, [r3, #12]
 800ad52:	0611      	lsls	r1, r2, #24
 800ad54:	d505      	bpl.n	800ad62 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800ad5a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad5c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ad5e:	f000 f8cd 	bl	800aefc <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	691a      	ldr	r2, [r3, #16]
 800ad66:	0652      	lsls	r2, r2, #25
 800ad68:	d508      	bpl.n	800ad7c <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad6a:	68da      	ldr	r2, [r3, #12]
 800ad6c:	0650      	lsls	r0, r2, #25
 800ad6e:	d505      	bpl.n	800ad7c <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800ad74:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad76:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ad78:	f7ff ff77 	bl	800ac6a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad7c:	6823      	ldr	r3, [r4, #0]
 800ad7e:	691a      	ldr	r2, [r3, #16]
 800ad80:	0691      	lsls	r1, r2, #26
 800ad82:	d522      	bpl.n	800adca <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad84:	68da      	ldr	r2, [r3, #12]
 800ad86:	0692      	lsls	r2, r2, #26
 800ad88:	d51f      	bpl.n	800adca <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad8a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800ad8e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad90:	611a      	str	r2, [r3, #16]
}
 800ad92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800ad96:	f000 b8af 	b.w	800aef8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad9a:	f7ff ff63 	bl	800ac64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f7ff ff62 	bl	800ac68 <HAL_TIM_PWM_PulseFinishedCallback>
 800ada4:	e776      	b.n	800ac94 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ada6:	f7ff ff5d 	bl	800ac64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adaa:	4620      	mov	r0, r4
 800adac:	f7ff ff5c 	bl	800ac68 <HAL_TIM_PWM_PulseFinishedCallback>
 800adb0:	e785      	b.n	800acbe <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adb2:	f7ff ff57 	bl	800ac64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adb6:	4620      	mov	r0, r4
 800adb8:	f7ff ff56 	bl	800ac68 <HAL_TIM_PWM_PulseFinishedCallback>
 800adbc:	e793      	b.n	800ace6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adbe:	f7ff ff51 	bl	800ac64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adc2:	4620      	mov	r0, r4
 800adc4:	f7ff ff50 	bl	800ac68 <HAL_TIM_PWM_PulseFinishedCallback>
 800adc8:	e7a2      	b.n	800ad10 <HAL_TIM_IRQHandler+0xa4>
}
 800adca:	bd10      	pop	{r4, pc}

0800adcc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800adcc:	4a30      	ldr	r2, [pc, #192]	@ (800ae90 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800adce:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800add0:	4290      	cmp	r0, r2
 800add2:	d012      	beq.n	800adfa <TIM_Base_SetConfig+0x2e>
 800add4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800add8:	d00f      	beq.n	800adfa <TIM_Base_SetConfig+0x2e>
 800adda:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800adde:	4290      	cmp	r0, r2
 800ade0:	d00b      	beq.n	800adfa <TIM_Base_SetConfig+0x2e>
 800ade2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ade6:	4290      	cmp	r0, r2
 800ade8:	d007      	beq.n	800adfa <TIM_Base_SetConfig+0x2e>
 800adea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800adee:	4290      	cmp	r0, r2
 800adf0:	d003      	beq.n	800adfa <TIM_Base_SetConfig+0x2e>
 800adf2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800adf6:	4290      	cmp	r0, r2
 800adf8:	d119      	bne.n	800ae2e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800adfa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800adfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800ae00:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae02:	4a23      	ldr	r2, [pc, #140]	@ (800ae90 <TIM_Base_SetConfig+0xc4>)
 800ae04:	4290      	cmp	r0, r2
 800ae06:	d01d      	beq.n	800ae44 <TIM_Base_SetConfig+0x78>
 800ae08:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ae0c:	d01a      	beq.n	800ae44 <TIM_Base_SetConfig+0x78>
 800ae0e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ae12:	4290      	cmp	r0, r2
 800ae14:	d016      	beq.n	800ae44 <TIM_Base_SetConfig+0x78>
 800ae16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ae1a:	4290      	cmp	r0, r2
 800ae1c:	d012      	beq.n	800ae44 <TIM_Base_SetConfig+0x78>
 800ae1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ae22:	4290      	cmp	r0, r2
 800ae24:	d00e      	beq.n	800ae44 <TIM_Base_SetConfig+0x78>
 800ae26:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ae2a:	4290      	cmp	r0, r2
 800ae2c:	d00a      	beq.n	800ae44 <TIM_Base_SetConfig+0x78>
 800ae2e:	4a19      	ldr	r2, [pc, #100]	@ (800ae94 <TIM_Base_SetConfig+0xc8>)
 800ae30:	4290      	cmp	r0, r2
 800ae32:	d007      	beq.n	800ae44 <TIM_Base_SetConfig+0x78>
 800ae34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ae38:	4290      	cmp	r0, r2
 800ae3a:	d003      	beq.n	800ae44 <TIM_Base_SetConfig+0x78>
 800ae3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ae40:	4290      	cmp	r0, r2
 800ae42:	d103      	bne.n	800ae4c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae48:	68ca      	ldr	r2, [r1, #12]
 800ae4a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae4c:	694a      	ldr	r2, [r1, #20]
 800ae4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae52:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800ae54:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae56:	688b      	ldr	r3, [r1, #8]
 800ae58:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae5a:	680b      	ldr	r3, [r1, #0]
 800ae5c:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae5e:	4b0c      	ldr	r3, [pc, #48]	@ (800ae90 <TIM_Base_SetConfig+0xc4>)
 800ae60:	4298      	cmp	r0, r3
 800ae62:	d00f      	beq.n	800ae84 <TIM_Base_SetConfig+0xb8>
 800ae64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae68:	4298      	cmp	r0, r3
 800ae6a:	d00b      	beq.n	800ae84 <TIM_Base_SetConfig+0xb8>
 800ae6c:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 800ae70:	4298      	cmp	r0, r3
 800ae72:	d007      	beq.n	800ae84 <TIM_Base_SetConfig+0xb8>
 800ae74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae78:	4298      	cmp	r0, r3
 800ae7a:	d003      	beq.n	800ae84 <TIM_Base_SetConfig+0xb8>
 800ae7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae80:	4298      	cmp	r0, r3
 800ae82:	d101      	bne.n	800ae88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae84:	690b      	ldr	r3, [r1, #16]
 800ae86:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	6143      	str	r3, [r0, #20]
}
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	40010000 	.word	0x40010000
 800ae94:	40014000 	.word	0x40014000

0800ae98 <HAL_TIM_Base_Init>:
{
 800ae98:	b510      	push	{r4, lr}
  if (htim == NULL)
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	b350      	cbz	r0, 800aef4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ae9e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800aea2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800aea6:	b91b      	cbnz	r3, 800aeb0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800aea8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800aeac:	f7ff fe61 	bl	800ab72 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800aeb0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aeb2:	6820      	ldr	r0, [r4, #0]
 800aeb4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800aeb6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aeba:	f7ff ff87 	bl	800adcc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aebe:	2301      	movs	r3, #1
  return HAL_OK;
 800aec0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aec2:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aec6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800aeca:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800aece:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800aed2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800aed6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aeda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aede:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800aee2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800aee6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800aeea:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800aeee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800aef2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800aef4:	2001      	movs	r0, #1
 800aef6:	e7fc      	b.n	800aef2 <HAL_TIM_Base_Init+0x5a>

0800aef8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800aef8:	4770      	bx	lr

0800aefa <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800aefa:	4770      	bx	lr

0800aefc <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800aefc:	4770      	bx	lr

0800aefe <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800aefe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800af02:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800af06:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800af0a:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800af0e:	ea43 0308 	orr.w	r3, r3, r8
 800af12:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800af16:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800af1a:	6809      	ldr	r1, [r1, #0]
 800af1c:	b991      	cbnz	r1, 800af44 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800af1e:	ea43 030e 	orr.w	r3, r3, lr
 800af22:	6801      	ldr	r1, [r0, #0]
 800af24:	4313      	orrs	r3, r2
 800af26:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800af2a:	ea43 030c 	orr.w	r3, r3, ip
 800af2e:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800af32:	433b      	orrs	r3, r7
 800af34:	4333      	orrs	r3, r6
 800af36:	432b      	orrs	r3, r5
 800af38:	4323      	orrs	r3, r4
 800af3a:	430b      	orrs	r3, r1
 800af3c:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800af3e:	2000      	movs	r0, #0
 800af40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800af44:	6801      	ldr	r1, [r0, #0]
 800af46:	ea43 030e 	orr.w	r3, r3, lr
 800af4a:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800af4e:	430b      	orrs	r3, r1
 800af50:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800af52:	ea42 030c 	orr.w	r3, r2, ip
 800af56:	6841      	ldr	r1, [r0, #4]
 800af58:	433b      	orrs	r3, r7
 800af5a:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800af5e:	4333      	orrs	r3, r6
 800af60:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800af64:	432b      	orrs	r3, r5
 800af66:	4323      	orrs	r3, r4
 800af68:	4313      	orrs	r3, r2
 800af6a:	6043      	str	r3, [r0, #4]
 800af6c:	e7e7      	b.n	800af3e <FMC_SDRAM_Init+0x40>

0800af6e <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800af6e:	68cb      	ldr	r3, [r1, #12]
 800af70:	f103 3cff 	add.w	ip, r3, #4294967295
 800af74:	694b      	ldr	r3, [r1, #20]
{
 800af76:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800af78:	3b01      	subs	r3, #1
 800af7a:	680f      	ldr	r7, [r1, #0]
 800af7c:	684c      	ldr	r4, [r1, #4]
 800af7e:	688e      	ldr	r6, [r1, #8]
 800af80:	051b      	lsls	r3, r3, #20
 800af82:	690d      	ldr	r5, [r1, #16]
 800af84:	3c01      	subs	r4, #1
 800af86:	6989      	ldr	r1, [r1, #24]
 800af88:	3e01      	subs	r6, #1
 800af8a:	3d01      	subs	r5, #1
 800af8c:	3f01      	subs	r7, #1
 800af8e:	3901      	subs	r1, #1
 800af90:	0124      	lsls	r4, r4, #4
 800af92:	0236      	lsls	r6, r6, #8
 800af94:	042d      	lsls	r5, r5, #16
 800af96:	0609      	lsls	r1, r1, #24
 800af98:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800af9c:	b95a      	cbnz	r2, 800afb6 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800af9e:	433b      	orrs	r3, r7
 800afa0:	6882      	ldr	r2, [r0, #8]
 800afa2:	4323      	orrs	r3, r4
 800afa4:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800afa8:	4333      	orrs	r3, r6
 800afaa:	432b      	orrs	r3, r5
 800afac:	430b      	orrs	r3, r1
 800afae:	4313      	orrs	r3, r2
 800afb0:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800afb2:	2000      	movs	r0, #0
 800afb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800afb6:	6882      	ldr	r2, [r0, #8]
 800afb8:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800afbc:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800afc0:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800afc2:	ea44 0306 	orr.w	r3, r4, r6
 800afc6:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800afc8:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800afca:	68c2      	ldr	r2, [r0, #12]
 800afcc:	432b      	orrs	r3, r5
 800afce:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800afd2:	430b      	orrs	r3, r1
 800afd4:	4313      	orrs	r3, r2
 800afd6:	60c3      	str	r3, [r0, #12]
 800afd8:	e7eb      	b.n	800afb2 <FMC_SDRAM_Timing_Init+0x44>

0800afda <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800afda:	4603      	mov	r3, r0
 800afdc:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800afe0:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800afe4:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800afe8:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800afea:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800afee:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800aff0:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800aff2:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800aff4:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800aff6:	4770      	bx	lr

0800aff8 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800aff8:	6902      	ldr	r2, [r0, #16]
{
 800affa:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800affc:	e9d1 3400 	ldrd	r3, r4, [r1]
 800b000:	0d92      	lsrs	r2, r2, #22
 800b002:	4323      	orrs	r3, r4
 800b004:	68cc      	ldr	r4, [r1, #12]
 800b006:	0592      	lsls	r2, r2, #22
 800b008:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800b00c:	4313      	orrs	r3, r2
 800b00e:	688a      	ldr	r2, [r1, #8]
 800b010:	3a01      	subs	r2, #1
 800b012:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800b016:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800b018:	2000      	movs	r0, #0
 800b01a:	bd10      	pop	{r4, pc}

0800b01c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b01c:	6943      	ldr	r3, [r0, #20]
 800b01e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800b022:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800b026:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800b02a:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800b02c:	2000      	movs	r0, #0
 800b02e:	4770      	bx	lr

0800b030 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b030:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800b032:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b036:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b038:	f001 fede 	bl	800cdf8 <xTaskGetSchedulerState>
 800b03c:	2801      	cmp	r0, #1
 800b03e:	d003      	beq.n	800b048 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800b040:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800b044:	f000 bc46 	b.w	800b8d4 <xPortSysTickHandler>
}
 800b048:	bd08      	pop	{r3, pc}
	...

0800b04c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b04c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800b050:	b92b      	cbnz	r3, 800b05e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800b052:	4b06      	ldr	r3, [pc, #24]	@ (800b06c <osKernelInitialize+0x20>)
 800b054:	6818      	ldr	r0, [r3, #0]
 800b056:	b928      	cbnz	r0, 800b064 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b058:	2201      	movs	r2, #1
 800b05a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b05c:	4770      	bx	lr
    stat = osErrorISR;
 800b05e:	f06f 0005 	mvn.w	r0, #5
 800b062:	4770      	bx	lr
    } else {
      stat = osError;
 800b064:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	2400c418 	.word	0x2400c418

0800b070 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b070:	b510      	push	{r4, lr}
 800b072:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800b076:	b95c      	cbnz	r4, 800b090 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800b078:	4b08      	ldr	r3, [pc, #32]	@ (800b09c <osKernelStart+0x2c>)
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	2a01      	cmp	r2, #1
 800b07e:	d10a      	bne.n	800b096 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b080:	4a07      	ldr	r2, [pc, #28]	@ (800b0a0 <osKernelStart+0x30>)
 800b082:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b084:	2202      	movs	r2, #2
 800b086:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b088:	f001 fd56 	bl	800cb38 <vTaskStartScheduler>
      stat = osOK;
 800b08c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800b08e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800b090:	f06f 0005 	mvn.w	r0, #5
 800b094:	e7fb      	b.n	800b08e <osKernelStart+0x1e>
      stat = osError;
 800b096:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800b09a:	e7f8      	b.n	800b08e <osKernelStart+0x1e>
 800b09c:	2400c418 	.word	0x2400c418
 800b0a0:	e000ed00 	.word	0xe000ed00

0800b0a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0a6:	4614      	mov	r4, r2
 800b0a8:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b0aa:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b0ac:	460b      	mov	r3, r1
  hTask = NULL;
 800b0ae:	9205      	str	r2, [sp, #20]
 800b0b0:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800b0b4:	b9ca      	cbnz	r2, 800b0ea <osThreadNew+0x46>
 800b0b6:	b1c0      	cbz	r0, 800b0ea <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800b0b8:	b36c      	cbz	r4, 800b116 <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800b0ba:	69a5      	ldr	r5, [r4, #24]
 800b0bc:	2d00      	cmp	r5, #0
 800b0be:	bf08      	it	eq
 800b0c0:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b0c2:	1e69      	subs	r1, r5, #1
 800b0c4:	46ac      	mov	ip, r5
 800b0c6:	2937      	cmp	r1, #55	@ 0x37
 800b0c8:	d82a      	bhi.n	800b120 <osThreadNew+0x7c>
 800b0ca:	6861      	ldr	r1, [r4, #4]
 800b0cc:	07c9      	lsls	r1, r1, #31
 800b0ce:	d427      	bmi.n	800b120 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800b0d0:	6966      	ldr	r6, [r4, #20]
 800b0d2:	b16e      	cbz	r6, 800b0f0 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b0d4:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800b0d6:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b0d8:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800b0dc:	b157      	cbz	r7, 800b0f4 <osThreadNew+0x50>
 800b0de:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800b0e2:	d902      	bls.n	800b0ea <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b0e4:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b0e6:	b104      	cbz	r4, 800b0ea <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b0e8:	b9e6      	cbnz	r6, 800b124 <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b0ea:	9805      	ldr	r0, [sp, #20]
}
 800b0ec:	b007      	add	sp, #28
 800b0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800b0f0:	2280      	movs	r2, #128	@ 0x80
 800b0f2:	e7f0      	b.n	800b0d6 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b0f4:	f1be 0f00 	cmp.w	lr, #0
 800b0f8:	d1f7      	bne.n	800b0ea <osThreadNew+0x46>
      if (mem == 0) {
 800b0fa:	6924      	ldr	r4, [r4, #16]
 800b0fc:	2c00      	cmp	r4, #0
 800b0fe:	d1f4      	bne.n	800b0ea <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b100:	ac05      	add	r4, sp, #20
 800b102:	b292      	uxth	r2, r2
 800b104:	e9cd c400 	strd	ip, r4, [sp]
 800b108:	f001 fbb3 	bl	800c872 <xTaskCreate>
 800b10c:	2801      	cmp	r0, #1
            hTask = NULL;
 800b10e:	bf1c      	itt	ne
 800b110:	2300      	movne	r3, #0
 800b112:	9305      	strne	r3, [sp, #20]
 800b114:	e7e9      	b.n	800b0ea <osThreadNew+0x46>
    name = NULL;
 800b116:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800b118:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800b11c:	2280      	movs	r2, #128	@ 0x80
 800b11e:	e7ef      	b.n	800b100 <osThreadNew+0x5c>
        return (NULL);
 800b120:	4610      	mov	r0, r2
 800b122:	e7e3      	b.n	800b0ec <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b124:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800b128:	9500      	str	r5, [sp, #0]
 800b12a:	f001 fb6a 	bl	800c802 <xTaskCreateStatic>
 800b12e:	9005      	str	r0, [sp, #20]
 800b130:	e7db      	b.n	800b0ea <osThreadNew+0x46>

0800b132 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b132:	b570      	push	{r4, r5, r6, lr}
 800b134:	4605      	mov	r5, r0
 800b136:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800b13a:	b116      	cbz	r6, 800b142 <osMutexNew+0x10>
  hMutex = NULL;
 800b13c:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800b13e:	4620      	mov	r0, r4
 800b140:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800b142:	b110      	cbz	r0, 800b14a <osMutexNew+0x18>
      type = attr->attr_bits;
 800b144:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800b146:	0733      	lsls	r3, r6, #28
 800b148:	d4f8      	bmi.n	800b13c <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b14a:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800b14e:	b17d      	cbz	r5, 800b170 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b150:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800b154:	b151      	cbz	r1, 800b16c <osMutexNew+0x3a>
 800b156:	2b4f      	cmp	r3, #79	@ 0x4f
 800b158:	d9f0      	bls.n	800b13c <osMutexNew+0xa>
          if (rmtx != 0U) {
 800b15a:	b1de      	cbz	r6, 800b194 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b15c:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b15e:	f000 fec2 	bl	800bee6 <xQueueCreateMutexStatic>
 800b162:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800b164:	2800      	cmp	r0, #0
 800b166:	d0e9      	beq.n	800b13c <osMutexNew+0xa>
          name = attr->name;
 800b168:	682d      	ldr	r5, [r5, #0]
 800b16a:	e00a      	b.n	800b182 <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d1e5      	bne.n	800b13c <osMutexNew+0xa>
            if (rmtx != 0U) {
 800b170:	b196      	cbz	r6, 800b198 <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b172:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800b174:	f000 feeb 	bl	800bf4e <xQueueCreateMutex>
 800b178:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800b17a:	2800      	cmp	r0, #0
 800b17c:	d0de      	beq.n	800b13c <osMutexNew+0xa>
        if (attr != NULL) {
 800b17e:	2d00      	cmp	r5, #0
 800b180:	d1f2      	bne.n	800b168 <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800b182:	4629      	mov	r1, r5
 800b184:	4620      	mov	r0, r4
 800b186:	f001 f977 	bl	800c478 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b18a:	2e00      	cmp	r6, #0
 800b18c:	d0d7      	beq.n	800b13e <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b18e:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800b192:	e7d4      	b.n	800b13e <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b194:	2001      	movs	r0, #1
 800b196:	e7e2      	b.n	800b15e <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800b198:	2001      	movs	r0, #1
 800b19a:	e7eb      	b.n	800b174 <osMutexNew+0x42>

0800b19c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b19c:	b538      	push	{r3, r4, r5, lr}
 800b19e:	4603      	mov	r3, r0
 800b1a0:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b1a2:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800b1a6:	f003 0201 	and.w	r2, r3, #1
 800b1aa:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800b1ae:	b995      	cbnz	r5, 800b1d6 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d913      	bls.n	800b1dc <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800b1b4:	b162      	cbz	r2, 800b1d0 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b1b6:	f001 f8f0 	bl	800c39a <xQueueTakeMutexRecursive>
 800b1ba:	2801      	cmp	r0, #1
 800b1bc:	d101      	bne.n	800b1c2 <osMutexAcquire+0x26>
  stat = osOK;
 800b1be:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800b1c0:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800b1c2:	2c00      	cmp	r4, #0
 800b1c4:	bf14      	ite	ne
 800b1c6:	f06f 0001 	mvnne.w	r0, #1
 800b1ca:	f06f 0002 	mvneq.w	r0, #2
 800b1ce:	e7f7      	b.n	800b1c0 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b1d0:	f001 f826 	bl	800c220 <xQueueSemaphoreTake>
 800b1d4:	e7f1      	b.n	800b1ba <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800b1d6:	f06f 0005 	mvn.w	r0, #5
 800b1da:	e7f1      	b.n	800b1c0 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800b1dc:	f06f 0003 	mvn.w	r0, #3
 800b1e0:	e7ee      	b.n	800b1c0 <osMutexAcquire+0x24>

0800b1e2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b1e2:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b1e4:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b1e8:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800b1ea:	f002 0301 	and.w	r3, r2, #1
 800b1ee:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800b1f2:	b979      	cbnz	r1, 800b214 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800b1f4:	2a01      	cmp	r2, #1
 800b1f6:	d910      	bls.n	800b21a <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800b1f8:	b13b      	cbz	r3, 800b20a <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b1fa:	f000 fe89 	bl	800bf10 <xQueueGiveMutexRecursive>
 800b1fe:	2801      	cmp	r0, #1
  stat = osOK;
 800b200:	bf0c      	ite	eq
 800b202:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800b204:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b208:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b20a:	461a      	mov	r2, r3
 800b20c:	4619      	mov	r1, r3
 800b20e:	f000 fdb8 	bl	800bd82 <xQueueGenericSend>
 800b212:	e7f4      	b.n	800b1fe <osMutexRelease+0x1c>
    stat = osErrorISR;
 800b214:	f06f 0005 	mvn.w	r0, #5
 800b218:	e7f6      	b.n	800b208 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800b21a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b21e:	e7f3      	b.n	800b208 <osMutexRelease+0x26>

0800b220 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b222:	4604      	mov	r4, r0
 800b224:	460e      	mov	r6, r1
 800b226:	4615      	mov	r5, r2
 800b228:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b22c:	b942      	cbnz	r2, 800b240 <osSemaphoreNew+0x20>
 800b22e:	b138      	cbz	r0, 800b240 <osSemaphoreNew+0x20>
 800b230:	4288      	cmp	r0, r1
 800b232:	d305      	bcc.n	800b240 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800b234:	b155      	cbz	r5, 800b24c <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b236:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800b23a:	b12b      	cbz	r3, 800b248 <osSemaphoreNew+0x28>
 800b23c:	2f4f      	cmp	r7, #79	@ 0x4f
 800b23e:	d822      	bhi.n	800b286 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800b240:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800b242:	4620      	mov	r0, r4
 800b244:	b003      	add	sp, #12
 800b246:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b248:	2f00      	cmp	r7, #0
 800b24a:	d1f9      	bne.n	800b240 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800b24c:	2c01      	cmp	r4, #1
 800b24e:	d00c      	beq.n	800b26a <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b250:	4620      	mov	r0, r4
 800b252:	4631      	mov	r1, r6
 800b254:	f000 fd77 	bl	800bd46 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800b258:	4604      	mov	r4, r0
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d0f0      	beq.n	800b240 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800b25e:	b985      	cbnz	r5, 800b282 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800b260:	4629      	mov	r1, r5
 800b262:	4620      	mov	r0, r4
 800b264:	f001 f908 	bl	800c478 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800b268:	e7eb      	b.n	800b242 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800b26a:	2203      	movs	r2, #3
 800b26c:	2100      	movs	r1, #0
 800b26e:	2001      	movs	r0, #1
 800b270:	f000 fd20 	bl	800bcb4 <xQueueGenericCreate>
 800b274:	e00e      	b.n	800b294 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b276:	461a      	mov	r2, r3
 800b278:	f000 fd43 	bl	800bd02 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800b27c:	4604      	mov	r4, r0
 800b27e:	2800      	cmp	r0, #0
 800b280:	d0de      	beq.n	800b240 <osSemaphoreNew+0x20>
          name = attr->name;
 800b282:	682d      	ldr	r5, [r5, #0]
 800b284:	e7ec      	b.n	800b260 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800b286:	2801      	cmp	r0, #1
 800b288:	d1f5      	bne.n	800b276 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b28a:	2103      	movs	r1, #3
 800b28c:	9100      	str	r1, [sp, #0]
 800b28e:	4611      	mov	r1, r2
 800b290:	f000 fcc2 	bl	800bc18 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800b294:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b296:	2800      	cmp	r0, #0
 800b298:	d0d2      	beq.n	800b240 <osSemaphoreNew+0x20>
 800b29a:	2e00      	cmp	r6, #0
 800b29c:	d0df      	beq.n	800b25e <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b29e:	2300      	movs	r3, #0
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	f000 fd6d 	bl	800bd82 <xQueueGenericSend>
 800b2a8:	2801      	cmp	r0, #1
 800b2aa:	d0d8      	beq.n	800b25e <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f001 f90d 	bl	800c4cc <vQueueDelete>
      if (hSemaphore != NULL) {
 800b2b2:	e7c5      	b.n	800b240 <osSemaphoreNew+0x20>

0800b2b4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b2b4:	b513      	push	{r0, r1, r4, lr}
 800b2b6:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b2b8:	b328      	cbz	r0, 800b306 <osSemaphoreAcquire+0x52>
 800b2ba:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b2be:	b1cb      	cbz	r3, 800b2f4 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800b2c0:	bb09      	cbnz	r1, 800b306 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b2c2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b2c4:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b2c6:	f001 f889 	bl	800c3dc <xQueueReceiveFromISR>
 800b2ca:	2801      	cmp	r0, #1
 800b2cc:	d003      	beq.n	800b2d6 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800b2ce:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b2d2:	b002      	add	sp, #8
 800b2d4:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800b2d6:	9b01      	ldr	r3, [sp, #4]
 800b2d8:	b90b      	cbnz	r3, 800b2de <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800b2da:	2000      	movs	r0, #0
 800b2dc:	e7f9      	b.n	800b2d2 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800b2de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b2e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	e7f2      	b.n	800b2da <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b2f4:	f000 ff94 	bl	800c220 <xQueueSemaphoreTake>
 800b2f8:	2801      	cmp	r0, #1
 800b2fa:	d0ee      	beq.n	800b2da <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800b2fc:	2c00      	cmp	r4, #0
 800b2fe:	d0e6      	beq.n	800b2ce <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800b300:	f06f 0001 	mvn.w	r0, #1
 800b304:	e7e5      	b.n	800b2d2 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800b306:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b30a:	e7e2      	b.n	800b2d2 <osSemaphoreAcquire+0x1e>

0800b30c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b30c:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b30e:	b318      	cbz	r0, 800b358 <osSemaphoreRelease+0x4c>
 800b310:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b314:	b1cb      	cbz	r3, 800b34a <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800b316:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b318:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800b31a:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b31c:	f000 fe91 	bl	800c042 <xQueueGiveFromISR>
 800b320:	2801      	cmp	r0, #1
 800b322:	d004      	beq.n	800b32e <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800b324:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800b328:	b003      	add	sp, #12
 800b32a:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800b32e:	9b01      	ldr	r3, [sp, #4]
 800b330:	b14b      	cbz	r3, 800b346 <osSemaphoreRelease+0x3a>
 800b332:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b33a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b33e:	f3bf 8f4f 	dsb	sy
 800b342:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800b346:	2000      	movs	r0, #0
 800b348:	e7ee      	b.n	800b328 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b34a:	461a      	mov	r2, r3
 800b34c:	4619      	mov	r1, r3
 800b34e:	f000 fd18 	bl	800bd82 <xQueueGenericSend>
 800b352:	2801      	cmp	r0, #1
 800b354:	d0f7      	beq.n	800b346 <osSemaphoreRelease+0x3a>
 800b356:	e7e5      	b.n	800b324 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800b358:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b35c:	e7e4      	b.n	800b328 <osSemaphoreRelease+0x1c>

0800b35e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b35e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b360:	4605      	mov	r5, r0
 800b362:	460e      	mov	r6, r1
 800b364:	4614      	mov	r4, r2
 800b366:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b36a:	b11f      	cbz	r7, 800b374 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800b36c:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800b36e:	4628      	mov	r0, r5
 800b370:	b003      	add	sp, #12
 800b372:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b374:	2800      	cmp	r0, #0
 800b376:	d0f9      	beq.n	800b36c <osMessageQueueNew+0xe>
 800b378:	2900      	cmp	r1, #0
 800b37a:	d0f7      	beq.n	800b36c <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800b37c:	b1da      	cbz	r2, 800b3b6 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b37e:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800b382:	b183      	cbz	r3, 800b3a6 <osMessageQueueNew+0x48>
 800b384:	2a4f      	cmp	r2, #79	@ 0x4f
 800b386:	d9f1      	bls.n	800b36c <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b388:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b38a:	2a00      	cmp	r2, #0
 800b38c:	d0ee      	beq.n	800b36c <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b38e:	434d      	muls	r5, r1
 800b390:	6966      	ldr	r6, [r4, #20]
 800b392:	42ae      	cmp	r6, r5
 800b394:	d3ea      	bcc.n	800b36c <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b396:	9700      	str	r7, [sp, #0]
 800b398:	f000 fc3e 	bl	800bc18 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800b39c:	4605      	mov	r5, r0
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d0e4      	beq.n	800b36c <osMessageQueueNew+0xe>
        name = attr->name;
 800b3a2:	6824      	ldr	r4, [r4, #0]
 800b3a4:	e011      	b.n	800b3ca <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b3a6:	2a00      	cmp	r2, #0
 800b3a8:	d1e0      	bne.n	800b36c <osMessageQueueNew+0xe>
 800b3aa:	6923      	ldr	r3, [r4, #16]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1dd      	bne.n	800b36c <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b3b0:	6963      	ldr	r3, [r4, #20]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1da      	bne.n	800b36c <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	f000 fc7a 	bl	800bcb4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800b3c0:	4605      	mov	r5, r0
 800b3c2:	2800      	cmp	r0, #0
 800b3c4:	d0d2      	beq.n	800b36c <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800b3c6:	2c00      	cmp	r4, #0
 800b3c8:	d1eb      	bne.n	800b3a2 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	f001 f853 	bl	800c478 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800b3d2:	e7cc      	b.n	800b36e <osMessageQueueNew+0x10>

0800b3d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b3d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3d6:	461c      	mov	r4, r3
 800b3d8:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b3dc:	b1de      	cbz	r6, 800b416 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b3de:	b338      	cbz	r0, 800b430 <osMessageQueuePut+0x5c>
 800b3e0:	b331      	cbz	r1, 800b430 <osMessageQueuePut+0x5c>
 800b3e2:	bb2b      	cbnz	r3, 800b430 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b3e4:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b3e6:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b3e8:	f000 fdce 	bl	800bf88 <xQueueGenericSendFromISR>
 800b3ec:	2801      	cmp	r0, #1
 800b3ee:	d003      	beq.n	800b3f8 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800b3f0:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b3f4:	b002      	add	sp, #8
 800b3f6:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800b3f8:	9b01      	ldr	r3, [sp, #4]
 800b3fa:	b90b      	cbnz	r3, 800b400 <osMessageQueuePut+0x2c>
  stat = osOK;
 800b3fc:	2000      	movs	r0, #0
 800b3fe:	e7f9      	b.n	800b3f4 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800b400:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b408:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b40c:	f3bf 8f4f 	dsb	sy
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	e7f2      	b.n	800b3fc <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b416:	b158      	cbz	r0, 800b430 <osMessageQueuePut+0x5c>
 800b418:	b151      	cbz	r1, 800b430 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b41a:	4633      	mov	r3, r6
 800b41c:	4622      	mov	r2, r4
 800b41e:	f000 fcb0 	bl	800bd82 <xQueueGenericSend>
 800b422:	2801      	cmp	r0, #1
 800b424:	d0ea      	beq.n	800b3fc <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800b426:	2c00      	cmp	r4, #0
 800b428:	d0e2      	beq.n	800b3f0 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800b42a:	f06f 0001 	mvn.w	r0, #1
 800b42e:	e7e1      	b.n	800b3f4 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800b430:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b434:	e7de      	b.n	800b3f4 <osMessageQueuePut+0x20>

0800b436 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b436:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b438:	461c      	mov	r4, r3
 800b43a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b43e:	b1db      	cbz	r3, 800b478 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b440:	b330      	cbz	r0, 800b490 <osMessageQueueGet+0x5a>
 800b442:	b329      	cbz	r1, 800b490 <osMessageQueueGet+0x5a>
 800b444:	bb24      	cbnz	r4, 800b490 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b446:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b448:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b44a:	f000 ffc7 	bl	800c3dc <xQueueReceiveFromISR>
 800b44e:	2801      	cmp	r0, #1
 800b450:	d003      	beq.n	800b45a <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800b452:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b456:	b003      	add	sp, #12
 800b458:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800b45a:	9b01      	ldr	r3, [sp, #4]
 800b45c:	b90b      	cbnz	r3, 800b462 <osMessageQueueGet+0x2c>
  stat = osOK;
 800b45e:	2000      	movs	r0, #0
 800b460:	e7f9      	b.n	800b456 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800b462:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b46a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	f3bf 8f6f 	isb	sy
 800b476:	e7f2      	b.n	800b45e <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b478:	b150      	cbz	r0, 800b490 <osMessageQueueGet+0x5a>
 800b47a:	b149      	cbz	r1, 800b490 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b47c:	4622      	mov	r2, r4
 800b47e:	f000 fe31 	bl	800c0e4 <xQueueReceive>
 800b482:	2801      	cmp	r0, #1
 800b484:	d0eb      	beq.n	800b45e <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800b486:	2c00      	cmp	r4, #0
 800b488:	d0e3      	beq.n	800b452 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800b48a:	f06f 0001 	mvn.w	r0, #1
 800b48e:	e7e2      	b.n	800b456 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800b490:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b494:	e7df      	b.n	800b456 <osMessageQueueGet+0x20>
	...

0800b498 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b498:	4b03      	ldr	r3, [pc, #12]	@ (800b4a8 <vApplicationGetIdleTaskMemory+0x10>)
 800b49a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b49c:	4b03      	ldr	r3, [pc, #12]	@ (800b4ac <vApplicationGetIdleTaskMemory+0x14>)
 800b49e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b4a0:	2380      	movs	r3, #128	@ 0x80
 800b4a2:	6013      	str	r3, [r2, #0]
}
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop
 800b4a8:	2400c3b8 	.word	0x2400c3b8
 800b4ac:	2400c1b8 	.word	0x2400c1b8

0800b4b0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b4b0:	4b03      	ldr	r3, [pc, #12]	@ (800b4c0 <vApplicationGetTimerTaskMemory+0x10>)
 800b4b2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b4b4:	4b03      	ldr	r3, [pc, #12]	@ (800b4c4 <vApplicationGetTimerTaskMemory+0x14>)
 800b4b6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b4b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4bc:	6013      	str	r3, [r2, #0]
}
 800b4be:	4770      	bx	lr
 800b4c0:	2400c158 	.word	0x2400c158
 800b4c4:	2400bd58 	.word	0x2400bd58

0800b4c8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b4c8:	4b10      	ldr	r3, [pc, #64]	@ (800b50c <prvInsertBlockIntoFreeList+0x44>)
{
 800b4ca:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4283      	cmp	r3, r0
 800b4d2:	d3fb      	bcc.n	800b4cc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b4d4:	6854      	ldr	r4, [r2, #4]
 800b4d6:	1911      	adds	r1, r2, r4
 800b4d8:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b4da:	bf01      	itttt	eq
 800b4dc:	6841      	ldreq	r1, [r0, #4]
 800b4de:	4610      	moveq	r0, r2
 800b4e0:	1909      	addeq	r1, r1, r4
 800b4e2:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b4e4:	6844      	ldr	r4, [r0, #4]
 800b4e6:	1901      	adds	r1, r0, r4
 800b4e8:	428b      	cmp	r3, r1
 800b4ea:	d10c      	bne.n	800b506 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b4ec:	4908      	ldr	r1, [pc, #32]	@ (800b510 <prvInsertBlockIntoFreeList+0x48>)
 800b4ee:	6809      	ldr	r1, [r1, #0]
 800b4f0:	428b      	cmp	r3, r1
 800b4f2:	d003      	beq.n	800b4fc <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b4f4:	6859      	ldr	r1, [r3, #4]
 800b4f6:	4421      	add	r1, r4
 800b4f8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b4fa:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4fc:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b4fe:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b500:	bf18      	it	ne
 800b502:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b504:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b506:	4619      	mov	r1, r3
 800b508:	e7f8      	b.n	800b4fc <prvInsertBlockIntoFreeList+0x34>
 800b50a:	bf00      	nop
 800b50c:	2400c434 	.word	0x2400c434
 800b510:	2400c430 	.word	0x2400c430

0800b514 <pvPortMalloc>:
{
 800b514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b518:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b51a:	f001 f9d9 	bl	800c8d0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b51e:	4940      	ldr	r1, [pc, #256]	@ (800b620 <pvPortMalloc+0x10c>)
 800b520:	4d40      	ldr	r5, [pc, #256]	@ (800b624 <pvPortMalloc+0x110>)
 800b522:	680b      	ldr	r3, [r1, #0]
 800b524:	b9f3      	cbnz	r3, 800b564 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800b526:	4a40      	ldr	r2, [pc, #256]	@ (800b628 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800b528:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b52a:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b52c:	4e3f      	ldr	r6, [pc, #252]	@ (800b62c <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b52e:	bf1b      	ittet	ne
 800b530:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b532:	4b3f      	ldrne	r3, [pc, #252]	@ (800b630 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b534:	4b3f      	ldreq	r3, [pc, #252]	@ (800b634 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b536:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800b53a:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b53c:	bf18      	it	ne
 800b53e:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b540:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b542:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800b544:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b546:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800b54a:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b54e:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800b550:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b552:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b556:	4b38      	ldr	r3, [pc, #224]	@ (800b638 <pvPortMalloc+0x124>)
 800b558:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b55a:	4b38      	ldr	r3, [pc, #224]	@ (800b63c <pvPortMalloc+0x128>)
 800b55c:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b55e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b562:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b564:	682e      	ldr	r6, [r5, #0]
 800b566:	4226      	tst	r6, r4
 800b568:	d155      	bne.n	800b616 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800b56a:	2c00      	cmp	r4, #0
 800b56c:	d046      	beq.n	800b5fc <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800b56e:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b572:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b574:	bf1c      	itt	ne
 800b576:	f023 0307 	bicne.w	r3, r3, #7
 800b57a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d04a      	beq.n	800b616 <pvPortMalloc+0x102>
 800b580:	4f2e      	ldr	r7, [pc, #184]	@ (800b63c <pvPortMalloc+0x128>)
 800b582:	683c      	ldr	r4, [r7, #0]
 800b584:	429c      	cmp	r4, r3
 800b586:	d346      	bcc.n	800b616 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800b588:	4a28      	ldr	r2, [pc, #160]	@ (800b62c <pvPortMalloc+0x118>)
 800b58a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b58c:	6868      	ldr	r0, [r5, #4]
 800b58e:	4298      	cmp	r0, r3
 800b590:	d204      	bcs.n	800b59c <pvPortMalloc+0x88>
 800b592:	f8d5 c000 	ldr.w	ip, [r5]
 800b596:	f1bc 0f00 	cmp.w	ip, #0
 800b59a:	d115      	bne.n	800b5c8 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800b59c:	6809      	ldr	r1, [r1, #0]
 800b59e:	42a9      	cmp	r1, r5
 800b5a0:	d039      	beq.n	800b616 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b5a2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b5a4:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b5a8:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b5aa:	1ac2      	subs	r2, r0, r3
 800b5ac:	2a10      	cmp	r2, #16
 800b5ae:	d912      	bls.n	800b5d6 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b5b0:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5b2:	0741      	lsls	r1, r0, #29
 800b5b4:	d00b      	beq.n	800b5ce <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	e7fe      	b.n	800b5c6 <pvPortMalloc+0xb2>
 800b5c8:	462a      	mov	r2, r5
 800b5ca:	4665      	mov	r5, ip
 800b5cc:	e7de      	b.n	800b58c <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b5ce:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5d0:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5d2:	f7ff ff79 	bl	800b4c8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5d6:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b5d8:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5da:	4917      	ldr	r1, [pc, #92]	@ (800b638 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5dc:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5de:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5e0:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800b5e2:	4a17      	ldr	r2, [pc, #92]	@ (800b640 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5e4:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800b5e6:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800b5e8:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5ea:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800b5ec:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b5f0:	bf38      	it	cc
 800b5f2:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b5f4:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5f8:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800b5fa:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800b5fc:	f001 fa0c 	bl	800ca18 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b600:	0763      	lsls	r3, r4, #29
 800b602:	d00a      	beq.n	800b61a <pvPortMalloc+0x106>
 800b604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	e7fe      	b.n	800b614 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800b616:	2400      	movs	r4, #0
 800b618:	e7f0      	b.n	800b5fc <pvPortMalloc+0xe8>
}
 800b61a:	4620      	mov	r0, r4
 800b61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b620:	2400c430 	.word	0x2400c430
 800b624:	2400c41c 	.word	0x2400c41c
 800b628:	2400c43c 	.word	0x2400c43c
 800b62c:	2400c434 	.word	0x2400c434
 800b630:	24024adc 	.word	0x24024adc
 800b634:	000186a0 	.word	0x000186a0
 800b638:	2400c428 	.word	0x2400c428
 800b63c:	2400c42c 	.word	0x2400c42c
 800b640:	2400c424 	.word	0x2400c424

0800b644 <vPortFree>:
{
 800b644:	b510      	push	{r4, lr}
	if( pv != NULL )
 800b646:	4604      	mov	r4, r0
 800b648:	b390      	cbz	r0, 800b6b0 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b64a:	4a1a      	ldr	r2, [pc, #104]	@ (800b6b4 <vPortFree+0x70>)
 800b64c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b650:	6812      	ldr	r2, [r2, #0]
 800b652:	4213      	tst	r3, r2
 800b654:	d108      	bne.n	800b668 <vPortFree+0x24>
 800b656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b65a:	f383 8811 	msr	BASEPRI, r3
 800b65e:	f3bf 8f6f 	isb	sy
 800b662:	f3bf 8f4f 	dsb	sy
 800b666:	e7fe      	b.n	800b666 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b668:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b66c:	b141      	cbz	r1, 800b680 <vPortFree+0x3c>
 800b66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	e7fe      	b.n	800b67e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b680:	ea23 0302 	bic.w	r3, r3, r2
 800b684:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b688:	f001 f922 	bl	800c8d0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b68c:	4a0a      	ldr	r2, [pc, #40]	@ (800b6b8 <vPortFree+0x74>)
 800b68e:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b692:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b696:	6811      	ldr	r1, [r2, #0]
 800b698:	440b      	add	r3, r1
 800b69a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b69c:	f7ff ff14 	bl	800b4c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b6a0:	4a06      	ldr	r2, [pc, #24]	@ (800b6bc <vPortFree+0x78>)
 800b6a2:	6813      	ldr	r3, [r2, #0]
 800b6a4:	3301      	adds	r3, #1
}
 800b6a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800b6aa:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800b6ac:	f001 b9b4 	b.w	800ca18 <xTaskResumeAll>
}
 800b6b0:	bd10      	pop	{r4, pc}
 800b6b2:	bf00      	nop
 800b6b4:	2400c41c 	.word	0x2400c41c
 800b6b8:	2400c42c 	.word	0x2400c42c
 800b6bc:	2400c420 	.word	0x2400c420

0800b6c0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6c0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6c4:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6c8:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6ca:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6cc:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6d4:	4770      	bx	lr

0800b6d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b6da:	4770      	bx	lr

0800b6dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800b6dc:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b6de:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800b6e0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b6e2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b6e4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b6e6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b6e8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b6ea:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	6003      	str	r3, [r0, #0]
}
 800b6f0:	4770      	bx	lr

0800b6f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6f2:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b6f4:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b6f6:	1c63      	adds	r3, r4, #1
 800b6f8:	d10a      	bne.n	800b710 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6fa:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b6fc:	685a      	ldr	r2, [r3, #4]
 800b6fe:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b700:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b702:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800b704:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b706:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b708:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b70a:	3301      	adds	r3, #1
 800b70c:	6003      	str	r3, [r0, #0]
}
 800b70e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b710:	f100 0208 	add.w	r2, r0, #8
 800b714:	4613      	mov	r3, r2
 800b716:	6852      	ldr	r2, [r2, #4]
 800b718:	6815      	ldr	r5, [r2, #0]
 800b71a:	42a5      	cmp	r5, r4
 800b71c:	d9fa      	bls.n	800b714 <vListInsert+0x22>
 800b71e:	e7ed      	b.n	800b6fc <vListInsert+0xa>

0800b720 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b720:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b722:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800b726:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b728:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b72a:	6859      	ldr	r1, [r3, #4]
 800b72c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b72e:	bf08      	it	eq
 800b730:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b732:	2200      	movs	r2, #0
 800b734:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	3a01      	subs	r2, #1
 800b73a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b73c:	6818      	ldr	r0, [r3, #0]
}
 800b73e:	4770      	bx	lr

0800b740 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b740:	4808      	ldr	r0, [pc, #32]	@ (800b764 <prvPortStartFirstTask+0x24>)
 800b742:	6800      	ldr	r0, [r0, #0]
 800b744:	6800      	ldr	r0, [r0, #0]
 800b746:	f380 8808 	msr	MSP, r0
 800b74a:	f04f 0000 	mov.w	r0, #0
 800b74e:	f380 8814 	msr	CONTROL, r0
 800b752:	b662      	cpsie	i
 800b754:	b661      	cpsie	f
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	df00      	svc	0
 800b760:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b762:	0000      	.short	0x0000
 800b764:	e000ed08 	.word	0xe000ed08

0800b768 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b768:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b778 <vPortEnableVFP+0x10>
 800b76c:	6801      	ldr	r1, [r0, #0]
 800b76e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b772:	6001      	str	r1, [r0, #0]
 800b774:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b776:	0000      	.short	0x0000
 800b778:	e000ed88 	.word	0xe000ed88

0800b77c <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800b77c:	2300      	movs	r3, #0
{
 800b77e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b780:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800b782:	4b0d      	ldr	r3, [pc, #52]	@ (800b7b8 <prvTaskExitError+0x3c>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	3301      	adds	r3, #1
 800b788:	d008      	beq.n	800b79c <prvTaskExitError+0x20>
 800b78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b78e:	f383 8811 	msr	BASEPRI, r3
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	e7fe      	b.n	800b79a <prvTaskExitError+0x1e>
 800b79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800b7ac:	9b01      	ldr	r3, [sp, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d0fc      	beq.n	800b7ac <prvTaskExitError+0x30>
}
 800b7b2:	b002      	add	sp, #8
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	24000078 	.word	0x24000078

0800b7bc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7c0:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b7c4:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800b7c8:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7ca:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7cc:	4b03      	ldr	r3, [pc, #12]	@ (800b7dc <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7ce:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7d0:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b7d2:	f06f 0302 	mvn.w	r3, #2
 800b7d6:	6203      	str	r3, [r0, #32]
}
 800b7d8:	4770      	bx	lr
 800b7da:	bf00      	nop
 800b7dc:	0800b77d 	.word	0x0800b77d

0800b7e0 <SVC_Handler>:
	__asm volatile (
 800b7e0:	4b07      	ldr	r3, [pc, #28]	@ (800b800 <pxCurrentTCBConst2>)
 800b7e2:	6819      	ldr	r1, [r3, #0]
 800b7e4:	6808      	ldr	r0, [r1, #0]
 800b7e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ea:	f380 8809 	msr	PSP, r0
 800b7ee:	f3bf 8f6f 	isb	sy
 800b7f2:	f04f 0000 	mov.w	r0, #0
 800b7f6:	f380 8811 	msr	BASEPRI, r0
 800b7fa:	4770      	bx	lr
 800b7fc:	f3af 8000 	nop.w

0800b800 <pxCurrentTCBConst2>:
 800b800:	2402501c 	.word	0x2402501c

0800b804 <vPortEnterCritical>:
 800b804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b814:	4a0a      	ldr	r2, [pc, #40]	@ (800b840 <vPortEnterCritical+0x3c>)
 800b816:	6813      	ldr	r3, [r2, #0]
 800b818:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800b81a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b81c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b81e:	d10e      	bne.n	800b83e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b820:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b824:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	b143      	cbz	r3, 800b83e <vPortEnterCritical+0x3a>
 800b82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b830:	f383 8811 	msr	BASEPRI, r3
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	f3bf 8f4f 	dsb	sy
 800b83c:	e7fe      	b.n	800b83c <vPortEnterCritical+0x38>
}
 800b83e:	4770      	bx	lr
 800b840:	24000078 	.word	0x24000078

0800b844 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b844:	4a08      	ldr	r2, [pc, #32]	@ (800b868 <vPortExitCritical+0x24>)
 800b846:	6813      	ldr	r3, [r2, #0]
 800b848:	b943      	cbnz	r3, 800b85c <vPortExitCritical+0x18>
 800b84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b84e:	f383 8811 	msr	BASEPRI, r3
 800b852:	f3bf 8f6f 	isb	sy
 800b856:	f3bf 8f4f 	dsb	sy
 800b85a:	e7fe      	b.n	800b85a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b85c:	3b01      	subs	r3, #1
 800b85e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b860:	b90b      	cbnz	r3, 800b866 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b862:	f383 8811 	msr	BASEPRI, r3
}
 800b866:	4770      	bx	lr
 800b868:	24000078 	.word	0x24000078
 800b86c:	00000000 	.word	0x00000000

0800b870 <PendSV_Handler>:
	__asm volatile
 800b870:	f3ef 8009 	mrs	r0, PSP
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	4b15      	ldr	r3, [pc, #84]	@ (800b8d0 <pxCurrentTCBConst>)
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	f01e 0f10 	tst.w	lr, #16
 800b880:	bf08      	it	eq
 800b882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88a:	6010      	str	r0, [r2, #0]
 800b88c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b890:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b894:	f380 8811 	msr	BASEPRI, r0
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f001 f998 	bl	800cbd4 <vTaskSwitchContext>
 800b8a4:	f04f 0000 	mov.w	r0, #0
 800b8a8:	f380 8811 	msr	BASEPRI, r0
 800b8ac:	bc09      	pop	{r0, r3}
 800b8ae:	6819      	ldr	r1, [r3, #0]
 800b8b0:	6808      	ldr	r0, [r1, #0]
 800b8b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b6:	f01e 0f10 	tst.w	lr, #16
 800b8ba:	bf08      	it	eq
 800b8bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b8c0:	f380 8809 	msr	PSP, r0
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	f3af 8000 	nop.w

0800b8d0 <pxCurrentTCBConst>:
 800b8d0:	2402501c 	.word	0x2402501c

0800b8d4 <xPortSysTickHandler>:
{
 800b8d4:	b508      	push	{r3, lr}
	__asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b8e6:	f001 f801 	bl	800c8ec <xTaskIncrementTick>
 800b8ea:	b128      	cbz	r0, 800b8f8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b8ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b8f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f383 8811 	msr	BASEPRI, r3
}
 800b8fe:	bd08      	pop	{r3, pc}

0800b900 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b900:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800b904:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b906:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b90a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b90c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b90e:	4b04      	ldr	r3, [pc, #16]	@ (800b920 <vPortSetupTimerInterrupt+0x20>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	fbb3 f3f1 	udiv	r3, r3, r1
 800b916:	3b01      	subs	r3, #1
 800b918:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b91a:	2307      	movs	r3, #7
 800b91c:	6113      	str	r3, [r2, #16]
}
 800b91e:	4770      	bx	lr
 800b920:	2400006c 	.word	0x2400006c

0800b924 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b924:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800b928:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b92a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800b92e:	4a38      	ldr	r2, [pc, #224]	@ (800ba10 <xPortStartScheduler+0xec>)
 800b930:	4291      	cmp	r1, r2
 800b932:	d108      	bne.n	800b946 <xPortStartScheduler+0x22>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	e7fe      	b.n	800b944 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b946:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800b94a:	4b32      	ldr	r3, [pc, #200]	@ (800ba14 <xPortStartScheduler+0xf0>)
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d108      	bne.n	800b962 <xPortStartScheduler+0x3e>
 800b950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b954:	f383 8811 	msr	BASEPRI, r3
 800b958:	f3bf 8f6f 	isb	sy
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	e7fe      	b.n	800b960 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b962:	4b2d      	ldr	r3, [pc, #180]	@ (800ba18 <xPortStartScheduler+0xf4>)
 800b964:	781a      	ldrb	r2, [r3, #0]
 800b966:	b2d2      	uxtb	r2, r2
 800b968:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b96a:	22ff      	movs	r2, #255	@ 0xff
 800b96c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b96e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b970:	4a2a      	ldr	r2, [pc, #168]	@ (800ba1c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b972:	b2db      	uxtb	r3, r3
 800b974:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b978:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b97c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b980:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b982:	2307      	movs	r3, #7
 800b984:	4a26      	ldr	r2, [pc, #152]	@ (800ba20 <xPortStartScheduler+0xfc>)
 800b986:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b988:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800b98c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b98e:	0609      	lsls	r1, r1, #24
 800b990:	d40a      	bmi.n	800b9a8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b992:	2b03      	cmp	r3, #3
 800b994:	d011      	beq.n	800b9ba <xPortStartScheduler+0x96>
 800b996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99a:	f383 8811 	msr	BASEPRI, r3
 800b99e:	f3bf 8f6f 	isb	sy
 800b9a2:	f3bf 8f4f 	dsb	sy
 800b9a6:	e7fe      	b.n	800b9a6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800b9a8:	3b01      	subs	r3, #1
 800b9aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b9ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b9b0:	005b      	lsls	r3, r3, #1
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	f88d 3003 	strb.w	r3, [sp, #3]
 800b9b8:	e7e6      	b.n	800b988 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b9ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b9be:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800b9c2:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b9c4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b9c6:	9b01      	ldr	r3, [sp, #4]
 800b9c8:	4a13      	ldr	r2, [pc, #76]	@ (800ba18 <xPortStartScheduler+0xf4>)
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b9ce:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800b9d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b9d6:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b9da:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800b9de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b9e2:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800b9e6:	f7ff ff8b 	bl	800b900 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b9ea:	4b0e      	ldr	r3, [pc, #56]	@ (800ba24 <xPortStartScheduler+0x100>)
 800b9ec:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800b9ee:	f7ff febb 	bl	800b768 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b9f2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800b9f6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b9fa:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800b9fe:	f7ff fe9f 	bl	800b740 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800ba02:	f001 f8e7 	bl	800cbd4 <vTaskSwitchContext>
}
 800ba06:	4628      	mov	r0, r5
	prvTaskExitError();
 800ba08:	f7ff feb8 	bl	800b77c <prvTaskExitError>
}
 800ba0c:	b003      	add	sp, #12
 800ba0e:	bd30      	pop	{r4, r5, pc}
 800ba10:	410fc271 	.word	0x410fc271
 800ba14:	410fc270 	.word	0x410fc270
 800ba18:	e000e400 	.word	0xe000e400
 800ba1c:	24024ae0 	.word	0x24024ae0
 800ba20:	24024adc 	.word	0x24024adc
 800ba24:	24000078 	.word	0x24000078

0800ba28 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ba28:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba2c:	2b0f      	cmp	r3, #15
 800ba2e:	d90e      	bls.n	800ba4e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba30:	4a11      	ldr	r2, [pc, #68]	@ (800ba78 <vPortValidateInterruptPriority+0x50>)
 800ba32:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba34:	4a11      	ldr	r2, [pc, #68]	@ (800ba7c <vPortValidateInterruptPriority+0x54>)
 800ba36:	7812      	ldrb	r2, [r2, #0]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d908      	bls.n	800ba4e <vPortValidateInterruptPriority+0x26>
 800ba3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba40:	f383 8811 	msr	BASEPRI, r3
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	f3bf 8f4f 	dsb	sy
 800ba4c:	e7fe      	b.n	800ba4c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba4e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ba52:	4a0b      	ldr	r2, [pc, #44]	@ (800ba80 <vPortValidateInterruptPriority+0x58>)
 800ba54:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800ba58:	6812      	ldr	r2, [r2, #0]
 800ba5a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d908      	bls.n	800ba74 <vPortValidateInterruptPriority+0x4c>
 800ba62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba66:	f383 8811 	msr	BASEPRI, r3
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	e7fe      	b.n	800ba72 <vPortValidateInterruptPriority+0x4a>
	}
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	e000e3f0 	.word	0xe000e3f0
 800ba7c:	24024ae0 	.word	0x24024ae0
 800ba80:	24024adc 	.word	0x24024adc

0800ba84 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba84:	b510      	push	{r4, lr}
 800ba86:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba88:	f7ff febc 	bl	800b804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba8c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ba8e:	f7ff fed9 	bl	800b844 <vPortExitCritical>

	return xReturn;
}
 800ba92:	fab4 f084 	clz	r0, r4
 800ba96:	0940      	lsrs	r0, r0, #5
 800ba98:	bd10      	pop	{r4, pc}

0800ba9a <prvCopyDataToQueue>:
{
 800ba9a:	b570      	push	{r4, r5, r6, lr}
 800ba9c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba9e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800baa0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800baa2:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800baa4:	b942      	cbnz	r2, 800bab8 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800baa6:	6806      	ldr	r6, [r0, #0]
 800baa8:	b99e      	cbnz	r6, 800bad2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800baaa:	6880      	ldr	r0, [r0, #8]
 800baac:	f001 f9f2 	bl	800ce94 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bab0:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bab2:	3501      	adds	r5, #1
 800bab4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800bab6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800bab8:	b96e      	cbnz	r6, 800bad6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800baba:	6840      	ldr	r0, [r0, #4]
 800babc:	f014 ff15 	bl	80208ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bac0:	6863      	ldr	r3, [r4, #4]
 800bac2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800bac4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bac6:	68a2      	ldr	r2, [r4, #8]
 800bac8:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800baca:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bacc:	bf24      	itt	cs
 800bace:	6823      	ldrcs	r3, [r4, #0]
 800bad0:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800bad2:	2000      	movs	r0, #0
 800bad4:	e7ed      	b.n	800bab2 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bad6:	68c0      	ldr	r0, [r0, #12]
 800bad8:	f014 ff07 	bl	80208ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800badc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800bade:	68e3      	ldr	r3, [r4, #12]
 800bae0:	4251      	negs	r1, r2
 800bae2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bae4:	6822      	ldr	r2, [r4, #0]
 800bae6:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bae8:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800baea:	bf3e      	ittt	cc
 800baec:	68a3      	ldrcc	r3, [r4, #8]
 800baee:	185b      	addcc	r3, r3, r1
 800baf0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800baf2:	2e02      	cmp	r6, #2
 800baf4:	d1ed      	bne.n	800bad2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800baf6:	b10d      	cbz	r5, 800bafc <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800baf8:	3d01      	subs	r5, #1
 800bafa:	e7ea      	b.n	800bad2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800bafc:	4628      	mov	r0, r5
 800bafe:	e7d8      	b.n	800bab2 <prvCopyDataToQueue+0x18>

0800bb00 <prvCopyDataFromQueue>:
{
 800bb00:	4603      	mov	r3, r0
 800bb02:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800bb06:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb08:	b162      	cbz	r2, 800bb24 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb0a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb0c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb0e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb10:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb12:	60dc      	str	r4, [r3, #12]
}
 800bb14:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb18:	bf24      	itt	cs
 800bb1a:	6819      	ldrcs	r1, [r3, #0]
 800bb1c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb1e:	68d9      	ldr	r1, [r3, #12]
 800bb20:	f014 bee3 	b.w	80208ea <memcpy>
}
 800bb24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb28:	4770      	bx	lr

0800bb2a <prvUnlockQueue>:
{
 800bb2a:	b570      	push	{r4, r5, r6, lr}
 800bb2c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800bb2e:	f7ff fe69 	bl	800b804 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800bb32:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb36:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800bb3a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb3c:	2d00      	cmp	r5, #0
 800bb3e:	dc14      	bgt.n	800bb6a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800bb40:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb42:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800bb46:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800bb4a:	f7ff fe7b 	bl	800b844 <vPortExitCritical>
	taskENTER_CRITICAL();
 800bb4e:	f7ff fe59 	bl	800b804 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800bb52:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800bb56:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb58:	2d00      	cmp	r5, #0
 800bb5a:	dc12      	bgt.n	800bb82 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800bb5c:	23ff      	movs	r3, #255	@ 0xff
 800bb5e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800bb62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800bb66:	f7ff be6d 	b.w	800b844 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb6a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d0e7      	beq.n	800bb40 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb70:	4630      	mov	r0, r6
 800bb72:	f001 f8ab 	bl	800cccc <xTaskRemoveFromEventList>
 800bb76:	b108      	cbz	r0, 800bb7c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800bb78:	f001 f932 	bl	800cde0 <vTaskMissedYield>
			--cTxLock;
 800bb7c:	3d01      	subs	r5, #1
 800bb7e:	b26d      	sxtb	r5, r5
 800bb80:	e7dc      	b.n	800bb3c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb82:	6923      	ldr	r3, [r4, #16]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d0e9      	beq.n	800bb5c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f001 f89f 	bl	800cccc <xTaskRemoveFromEventList>
 800bb8e:	b108      	cbz	r0, 800bb94 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800bb90:	f001 f926 	bl	800cde0 <vTaskMissedYield>
				--cRxLock;
 800bb94:	3d01      	subs	r5, #1
 800bb96:	b26d      	sxtb	r5, r5
 800bb98:	e7de      	b.n	800bb58 <prvUnlockQueue+0x2e>

0800bb9a <xQueueGenericReset>:
{
 800bb9a:	b538      	push	{r3, r4, r5, lr}
 800bb9c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800bb9e:	4604      	mov	r4, r0
 800bba0:	b940      	cbnz	r0, 800bbb4 <xQueueGenericReset+0x1a>
 800bba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	e7fe      	b.n	800bbb2 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800bbb4:	f7ff fe26 	bl	800b804 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbb8:	6822      	ldr	r2, [r4, #0]
 800bbba:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bbbe:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbc0:	434b      	muls	r3, r1
 800bbc2:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbc4:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbc6:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbc8:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bbca:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800bbcc:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbce:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bbd0:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800bbd2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bbd6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800bbda:	b9a5      	cbnz	r5, 800bc06 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbdc:	6923      	ldr	r3, [r4, #16]
 800bbde:	b173      	cbz	r3, 800bbfe <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbe0:	f104 0010 	add.w	r0, r4, #16
 800bbe4:	f001 f872 	bl	800cccc <xTaskRemoveFromEventList>
 800bbe8:	b148      	cbz	r0, 800bbfe <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800bbea:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bbee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbf2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800bbfe:	f7ff fe21 	bl	800b844 <vPortExitCritical>
}
 800bc02:	2001      	movs	r0, #1
 800bc04:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc06:	f104 0010 	add.w	r0, r4, #16
 800bc0a:	f7ff fd59 	bl	800b6c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc0e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800bc12:	f7ff fd55 	bl	800b6c0 <vListInitialise>
 800bc16:	e7f2      	b.n	800bbfe <xQueueGenericReset+0x64>

0800bc18 <xQueueGenericCreateStatic>:
	{
 800bc18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc1a:	460d      	mov	r5, r1
 800bc1c:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc1e:	b940      	cbnz	r0, 800bc32 <xQueueGenericCreateStatic+0x1a>
 800bc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	e7fe      	b.n	800bc30 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800bc32:	b943      	cbnz	r3, 800bc46 <xQueueGenericCreateStatic+0x2e>
 800bc34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	e7fe      	b.n	800bc44 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bc46:	b14a      	cbz	r2, 800bc5c <xQueueGenericCreateStatic+0x44>
 800bc48:	b991      	cbnz	r1, 800bc70 <xQueueGenericCreateStatic+0x58>
 800bc4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	e7fe      	b.n	800bc5a <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bc5c:	b141      	cbz	r1, 800bc70 <xQueueGenericCreateStatic+0x58>
 800bc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc62:	f383 8811 	msr	BASEPRI, r3
 800bc66:	f3bf 8f6f 	isb	sy
 800bc6a:	f3bf 8f4f 	dsb	sy
 800bc6e:	e7fe      	b.n	800bc6e <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc70:	2350      	movs	r3, #80	@ 0x50
 800bc72:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc74:	9b01      	ldr	r3, [sp, #4]
 800bc76:	2b50      	cmp	r3, #80	@ 0x50
 800bc78:	d008      	beq.n	800bc8c <xQueueGenericCreateStatic+0x74>
 800bc7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc7e:	f383 8811 	msr	BASEPRI, r3
 800bc82:	f3bf 8f6f 	isb	sy
 800bc86:	f3bf 8f4f 	dsb	sy
 800bc8a:	e7fe      	b.n	800bc8a <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bc8c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc8e:	2d00      	cmp	r5, #0
 800bc90:	bf08      	it	eq
 800bc92:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bc94:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bc96:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc9a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800bc9c:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bca0:	4620      	mov	r0, r4
 800bca2:	f7ff ff7a 	bl	800bb9a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800bca6:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800bcaa:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800bcac:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800bcb0:	b003      	add	sp, #12
 800bcb2:	bd30      	pop	{r4, r5, pc}

0800bcb4 <xQueueGenericCreate>:
	{
 800bcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb6:	460d      	mov	r5, r1
 800bcb8:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcba:	4606      	mov	r6, r0
 800bcbc:	b940      	cbnz	r0, 800bcd0 <xQueueGenericCreate+0x1c>
 800bcbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	e7fe      	b.n	800bcce <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcd0:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bcd2:	3050      	adds	r0, #80	@ 0x50
 800bcd4:	f7ff fc1e 	bl	800b514 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800bcd8:	4604      	mov	r4, r0
 800bcda:	b170      	cbz	r0, 800bcfa <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800bce2:	b165      	cbz	r5, 800bcfe <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bce4:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bce8:	2101      	movs	r1, #1
 800bcea:	4620      	mov	r0, r4
 800bcec:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800bcee:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bcf2:	f7ff ff52 	bl	800bb9a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800bcf6:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bcfe:	4603      	mov	r3, r0
 800bd00:	e7f2      	b.n	800bce8 <xQueueGenericCreate+0x34>

0800bd02 <xQueueCreateCountingSemaphoreStatic>:
	{
 800bd02:	b513      	push	{r0, r1, r4, lr}
 800bd04:	4613      	mov	r3, r2
 800bd06:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800bd08:	b940      	cbnz	r0, 800bd1c <xQueueCreateCountingSemaphoreStatic+0x1a>
 800bd0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	e7fe      	b.n	800bd1a <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bd1c:	4288      	cmp	r0, r1
 800bd1e:	d208      	bcs.n	800bd32 <xQueueCreateCountingSemaphoreStatic+0x30>
 800bd20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd24:	f383 8811 	msr	BASEPRI, r3
 800bd28:	f3bf 8f6f 	isb	sy
 800bd2c:	f3bf 8f4f 	dsb	sy
 800bd30:	e7fe      	b.n	800bd30 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bd32:	2202      	movs	r2, #2
 800bd34:	9200      	str	r2, [sp, #0]
 800bd36:	2200      	movs	r2, #0
 800bd38:	4611      	mov	r1, r2
 800bd3a:	f7ff ff6d 	bl	800bc18 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800bd3e:	b100      	cbz	r0, 800bd42 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bd40:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800bd42:	b002      	add	sp, #8
 800bd44:	bd10      	pop	{r4, pc}

0800bd46 <xQueueCreateCountingSemaphore>:
	{
 800bd46:	b510      	push	{r4, lr}
 800bd48:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800bd4a:	b940      	cbnz	r0, 800bd5e <xQueueCreateCountingSemaphore+0x18>
 800bd4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	e7fe      	b.n	800bd5c <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bd5e:	4288      	cmp	r0, r1
 800bd60:	d208      	bcs.n	800bd74 <xQueueCreateCountingSemaphore+0x2e>
 800bd62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd66:	f383 8811 	msr	BASEPRI, r3
 800bd6a:	f3bf 8f6f 	isb	sy
 800bd6e:	f3bf 8f4f 	dsb	sy
 800bd72:	e7fe      	b.n	800bd72 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bd74:	2202      	movs	r2, #2
 800bd76:	2100      	movs	r1, #0
 800bd78:	f7ff ff9c 	bl	800bcb4 <xQueueGenericCreate>
		if( xHandle != NULL )
 800bd7c:	b100      	cbz	r0, 800bd80 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bd7e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800bd80:	bd10      	pop	{r4, pc}

0800bd82 <xQueueGenericSend>:
{
 800bd82:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800bd86:	460f      	mov	r7, r1
 800bd88:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800bd8a:	4604      	mov	r4, r0
{
 800bd8c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800bd8e:	b940      	cbnz	r0, 800bda2 <xQueueGenericSend+0x20>
 800bd90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	e7fe      	b.n	800bda0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bda2:	b951      	cbnz	r1, 800bdba <xQueueGenericSend+0x38>
 800bda4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800bda6:	b143      	cbz	r3, 800bdba <xQueueGenericSend+0x38>
 800bda8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdac:	f383 8811 	msr	BASEPRI, r3
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	e7fe      	b.n	800bdb8 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bdba:	2e02      	cmp	r6, #2
 800bdbc:	d10b      	bne.n	800bdd6 <xQueueGenericSend+0x54>
 800bdbe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d008      	beq.n	800bdd6 <xQueueGenericSend+0x54>
 800bdc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	e7fe      	b.n	800bdd4 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdd6:	f001 f80f 	bl	800cdf8 <xTaskGetSchedulerState>
 800bdda:	4605      	mov	r5, r0
 800bddc:	b330      	cbz	r0, 800be2c <xQueueGenericSend+0xaa>
 800bdde:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800bde0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800bde4:	f7ff fd0e 	bl	800b804 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bde8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bdea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d301      	bcc.n	800bdf4 <xQueueGenericSend+0x72>
 800bdf0:	2e02      	cmp	r6, #2
 800bdf2:	d127      	bne.n	800be44 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bdf4:	4632      	mov	r2, r6
 800bdf6:	4639      	mov	r1, r7
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f7ff fe4e 	bl	800ba9a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdfe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800be00:	b11b      	cbz	r3, 800be0a <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be02:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800be06:	f000 ff61 	bl	800cccc <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800be0a:	b148      	cbz	r0, 800be20 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800be0c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800be10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be14:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800be20:	f7ff fd10 	bl	800b844 <vPortExitCritical>
				return pdPASS;
 800be24:	2001      	movs	r0, #1
}
 800be26:	b004      	add	sp, #16
 800be28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be2c:	9b01      	ldr	r3, [sp, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d0d6      	beq.n	800bde0 <xQueueGenericSend+0x5e>
 800be32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be36:	f383 8811 	msr	BASEPRI, r3
 800be3a:	f3bf 8f6f 	isb	sy
 800be3e:	f3bf 8f4f 	dsb	sy
 800be42:	e7fe      	b.n	800be42 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800be44:	9b01      	ldr	r3, [sp, #4]
 800be46:	b91b      	cbnz	r3, 800be50 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800be48:	f7ff fcfc 	bl	800b844 <vPortExitCritical>
					return errQUEUE_FULL;
 800be4c:	2000      	movs	r0, #0
 800be4e:	e7ea      	b.n	800be26 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800be50:	b915      	cbnz	r5, 800be58 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be52:	a802      	add	r0, sp, #8
 800be54:	f000 ff7c 	bl	800cd50 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800be58:	f7ff fcf4 	bl	800b844 <vPortExitCritical>
		vTaskSuspendAll();
 800be5c:	f000 fd38 	bl	800c8d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be60:	f7ff fcd0 	bl	800b804 <vPortEnterCritical>
 800be64:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800be68:	2bff      	cmp	r3, #255	@ 0xff
 800be6a:	d101      	bne.n	800be70 <xQueueGenericSend+0xee>
 800be6c:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800be70:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800be74:	2bff      	cmp	r3, #255	@ 0xff
 800be76:	d101      	bne.n	800be7c <xQueueGenericSend+0xfa>
 800be78:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800be7c:	f7ff fce2 	bl	800b844 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be80:	a901      	add	r1, sp, #4
 800be82:	a802      	add	r0, sp, #8
 800be84:	f000 ff70 	bl	800cd68 <xTaskCheckForTimeOut>
 800be88:	bb38      	cbnz	r0, 800beda <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800be8a:	f7ff fcbb 	bl	800b804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800be8e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800be90:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800be92:	429a      	cmp	r2, r3
 800be94:	d10e      	bne.n	800beb4 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800be96:	f7ff fcd5 	bl	800b844 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be9a:	9901      	ldr	r1, [sp, #4]
 800be9c:	f104 0010 	add.w	r0, r4, #16
 800bea0:	f000 fedc 	bl	800cc5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bea4:	4620      	mov	r0, r4
 800bea6:	f7ff fe40 	bl	800bb2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800beaa:	f000 fdb5 	bl	800ca18 <xTaskResumeAll>
 800beae:	b148      	cbz	r0, 800bec4 <xQueueGenericSend+0x142>
 800beb0:	2501      	movs	r5, #1
 800beb2:	e797      	b.n	800bde4 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800beb4:	f7ff fcc6 	bl	800b844 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800beb8:	4620      	mov	r0, r4
 800beba:	f7ff fe36 	bl	800bb2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bebe:	f000 fdab 	bl	800ca18 <xTaskResumeAll>
 800bec2:	e7f5      	b.n	800beb0 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800bec4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bec8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800becc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	e7ea      	b.n	800beb0 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800beda:	4620      	mov	r0, r4
 800bedc:	f7ff fe25 	bl	800bb2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bee0:	f000 fd9a 	bl	800ca18 <xTaskResumeAll>
			return errQUEUE_FULL;
 800bee4:	e7b2      	b.n	800be4c <xQueueGenericSend+0xca>

0800bee6 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bee6:	2200      	movs	r2, #0
	{
 800bee8:	460b      	mov	r3, r1
 800beea:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800beec:	4611      	mov	r1, r2
 800beee:	9000      	str	r0, [sp, #0]
 800bef0:	2001      	movs	r0, #1
 800bef2:	f7ff fe91 	bl	800bc18 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800bef6:	4604      	mov	r4, r0
 800bef8:	b138      	cbz	r0, 800bf0a <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800befa:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800befc:	461a      	mov	r2, r3
 800befe:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf00:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bf02:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bf04:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bf06:	f7ff ff3c 	bl	800bd82 <xQueueGenericSend>
	}
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	b002      	add	sp, #8
 800bf0e:	bd10      	pop	{r4, pc}

0800bf10 <xQueueGiveMutexRecursive>:
	{
 800bf10:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800bf12:	4604      	mov	r4, r0
 800bf14:	b940      	cbnz	r0, 800bf28 <xQueueGiveMutexRecursive+0x18>
 800bf16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf1a:	f383 8811 	msr	BASEPRI, r3
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	e7fe      	b.n	800bf26 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bf28:	6885      	ldr	r5, [r0, #8]
 800bf2a:	f000 ff5f 	bl	800cdec <xTaskGetCurrentTaskHandle>
 800bf2e:	4285      	cmp	r5, r0
 800bf30:	d10b      	bne.n	800bf4a <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800bf32:	68e3      	ldr	r3, [r4, #12]
 800bf34:	3b01      	subs	r3, #1
 800bf36:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800bf38:	b10b      	cbz	r3, 800bf3e <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800bf3a:	2001      	movs	r0, #1
	}
 800bf3c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800bf3e:	461a      	mov	r2, r3
 800bf40:	4619      	mov	r1, r3
 800bf42:	4620      	mov	r0, r4
 800bf44:	f7ff ff1d 	bl	800bd82 <xQueueGenericSend>
 800bf48:	e7f7      	b.n	800bf3a <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800bf4a:	2000      	movs	r0, #0
		return xReturn;
 800bf4c:	e7f6      	b.n	800bf3c <xQueueGiveMutexRecursive+0x2c>

0800bf4e <xQueueCreateMutex>:
	{
 800bf4e:	b570      	push	{r4, r5, r6, lr}
 800bf50:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf52:	2050      	movs	r0, #80	@ 0x50
 800bf54:	f7ff fade 	bl	800b514 <pvPortMalloc>
 800bf58:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800bf5a:	b198      	cbz	r0, 800bf84 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bf5c:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800bf5e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bf60:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bf62:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800bf66:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bf6a:	f7ff fe16 	bl	800bb9a <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bf6e:	462b      	mov	r3, r5
 800bf70:	462a      	mov	r2, r5
 800bf72:	4629      	mov	r1, r5
 800bf74:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800bf76:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf7a:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bf7c:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bf7e:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bf80:	f7ff feff 	bl	800bd82 <xQueueGenericSend>
	}
 800bf84:	4620      	mov	r0, r4
 800bf86:	bd70      	pop	{r4, r5, r6, pc}

0800bf88 <xQueueGenericSendFromISR>:
{
 800bf88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf8c:	4689      	mov	r9, r1
 800bf8e:	4617      	mov	r7, r2
 800bf90:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800bf92:	4604      	mov	r4, r0
 800bf94:	b940      	cbnz	r0, 800bfa8 <xQueueGenericSendFromISR+0x20>
 800bf96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf9a:	f383 8811 	msr	BASEPRI, r3
 800bf9e:	f3bf 8f6f 	isb	sy
 800bfa2:	f3bf 8f4f 	dsb	sy
 800bfa6:	e7fe      	b.n	800bfa6 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfa8:	b951      	cbnz	r1, 800bfc0 <xQueueGenericSendFromISR+0x38>
 800bfaa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800bfac:	b143      	cbz	r3, 800bfc0 <xQueueGenericSendFromISR+0x38>
 800bfae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	e7fe      	b.n	800bfbe <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bfc0:	2e02      	cmp	r6, #2
 800bfc2:	d10b      	bne.n	800bfdc <xQueueGenericSendFromISR+0x54>
 800bfc4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d008      	beq.n	800bfdc <xQueueGenericSendFromISR+0x54>
 800bfca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfce:	f383 8811 	msr	BASEPRI, r3
 800bfd2:	f3bf 8f6f 	isb	sy
 800bfd6:	f3bf 8f4f 	dsb	sy
 800bfda:	e7fe      	b.n	800bfda <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfdc:	f7ff fd24 	bl	800ba28 <vPortValidateInterruptPriority>
	__asm volatile
 800bfe0:	f3ef 8811 	mrs	r8, BASEPRI
 800bfe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe8:	f383 8811 	msr	BASEPRI, r3
 800bfec:	f3bf 8f6f 	isb	sy
 800bff0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bff4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bff6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d301      	bcc.n	800c000 <xQueueGenericSendFromISR+0x78>
 800bffc:	2e02      	cmp	r6, #2
 800bffe:	d11e      	bne.n	800c03e <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c000:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c004:	4632      	mov	r2, r6
 800c006:	4649      	mov	r1, r9
 800c008:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800c00a:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c00c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c00e:	f7ff fd44 	bl	800ba9a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800c012:	1c6b      	adds	r3, r5, #1
 800c014:	d10e      	bne.n	800c034 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c016:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c018:	b13b      	cbz	r3, 800c02a <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c01a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c01e:	f000 fe55 	bl	800cccc <xTaskRemoveFromEventList>
 800c022:	b110      	cbz	r0, 800c02a <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800c024:	b10f      	cbz	r7, 800c02a <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c026:	2301      	movs	r3, #1
 800c028:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800c02a:	2001      	movs	r0, #1
	__asm volatile
 800c02c:	f388 8811 	msr	BASEPRI, r8
}
 800c030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c034:	3501      	adds	r5, #1
 800c036:	b26d      	sxtb	r5, r5
 800c038:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800c03c:	e7f5      	b.n	800c02a <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800c03e:	2000      	movs	r0, #0
 800c040:	e7f4      	b.n	800c02c <xQueueGenericSendFromISR+0xa4>

0800c042 <xQueueGiveFromISR>:
{
 800c042:	b570      	push	{r4, r5, r6, lr}
 800c044:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800c046:	4604      	mov	r4, r0
 800c048:	b940      	cbnz	r0, 800c05c <xQueueGiveFromISR+0x1a>
	__asm volatile
 800c04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	e7fe      	b.n	800c05a <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c05c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c05e:	b143      	cbz	r3, 800c072 <xQueueGiveFromISR+0x30>
 800c060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	e7fe      	b.n	800c070 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c072:	6803      	ldr	r3, [r0, #0]
 800c074:	b953      	cbnz	r3, 800c08c <xQueueGiveFromISR+0x4a>
 800c076:	6883      	ldr	r3, [r0, #8]
 800c078:	b143      	cbz	r3, 800c08c <xQueueGiveFromISR+0x4a>
 800c07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	e7fe      	b.n	800c08a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c08c:	f7ff fccc 	bl	800ba28 <vPortValidateInterruptPriority>
	__asm volatile
 800c090:	f3ef 8611 	mrs	r6, BASEPRI
 800c094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0a4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c0a6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	d919      	bls.n	800c0e0 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c0b0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800c0b2:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0b4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c0b6:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800c0b8:	d10d      	bne.n	800c0d6 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c0bc:	b13b      	cbz	r3, 800c0ce <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0be:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c0c2:	f000 fe03 	bl	800cccc <xTaskRemoveFromEventList>
 800c0c6:	b110      	cbz	r0, 800c0ce <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800c0c8:	b10d      	cbz	r5, 800c0ce <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800c0ce:	2001      	movs	r0, #1
	__asm volatile
 800c0d0:	f386 8811 	msr	BASEPRI, r6
}
 800c0d4:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	b25b      	sxtb	r3, r3
 800c0da:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c0de:	e7f6      	b.n	800c0ce <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800c0e0:	2000      	movs	r0, #0
 800c0e2:	e7f5      	b.n	800c0d0 <xQueueGiveFromISR+0x8e>

0800c0e4 <xQueueReceive>:
{
 800c0e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c0e8:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800c0ea:	4604      	mov	r4, r0
{
 800c0ec:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c0ee:	b940      	cbnz	r0, 800c102 <xQueueReceive+0x1e>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	e7fe      	b.n	800c100 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c102:	b951      	cbnz	r1, 800c11a <xQueueReceive+0x36>
 800c104:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c106:	b143      	cbz	r3, 800c11a <xQueueReceive+0x36>
 800c108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c10c:	f383 8811 	msr	BASEPRI, r3
 800c110:	f3bf 8f6f 	isb	sy
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	e7fe      	b.n	800c118 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c11a:	f000 fe6d 	bl	800cdf8 <xTaskGetSchedulerState>
 800c11e:	4605      	mov	r5, r0
 800c120:	b318      	cbz	r0, 800c16a <xQueueReceive+0x86>
 800c122:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800c124:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800c128:	f7ff fb6c 	bl	800b804 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c12c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c12e:	b347      	cbz	r7, 800c182 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c130:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c132:	4631      	mov	r1, r6
 800c134:	4620      	mov	r0, r4
 800c136:	f7ff fce3 	bl	800bb00 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c13a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c13c:	6923      	ldr	r3, [r4, #16]
 800c13e:	b173      	cbz	r3, 800c15e <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c140:	f104 0010 	add.w	r0, r4, #16
 800c144:	f000 fdc2 	bl	800cccc <xTaskRemoveFromEventList>
 800c148:	b148      	cbz	r0, 800c15e <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800c14a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c14e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c152:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c15e:	f7ff fb71 	bl	800b844 <vPortExitCritical>
				return pdPASS;
 800c162:	2001      	movs	r0, #1
}
 800c164:	b004      	add	sp, #16
 800c166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c16a:	9b01      	ldr	r3, [sp, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d0d9      	beq.n	800c124 <xQueueReceive+0x40>
 800c170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	e7fe      	b.n	800c180 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c182:	9b01      	ldr	r3, [sp, #4]
 800c184:	b91b      	cbnz	r3, 800c18e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800c186:	f7ff fb5d 	bl	800b844 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c18a:	2000      	movs	r0, #0
 800c18c:	e7ea      	b.n	800c164 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800c18e:	b915      	cbnz	r5, 800c196 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c190:	a802      	add	r0, sp, #8
 800c192:	f000 fddd 	bl	800cd50 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c196:	f7ff fb55 	bl	800b844 <vPortExitCritical>
		vTaskSuspendAll();
 800c19a:	f000 fb99 	bl	800c8d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c19e:	f7ff fb31 	bl	800b804 <vPortEnterCritical>
 800c1a2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c1a6:	2bff      	cmp	r3, #255	@ 0xff
 800c1a8:	d101      	bne.n	800c1ae <xQueueReceive+0xca>
 800c1aa:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800c1ae:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c1b2:	2bff      	cmp	r3, #255	@ 0xff
 800c1b4:	d101      	bne.n	800c1ba <xQueueReceive+0xd6>
 800c1b6:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800c1ba:	f7ff fb43 	bl	800b844 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1be:	a901      	add	r1, sp, #4
 800c1c0:	a802      	add	r0, sp, #8
 800c1c2:	f000 fdd1 	bl	800cd68 <xTaskCheckForTimeOut>
 800c1c6:	bb00      	cbnz	r0, 800c20a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	f7ff fc5b 	bl	800ba84 <prvIsQueueEmpty>
 800c1ce:	b1b0      	cbz	r0, 800c1fe <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c1d0:	9901      	ldr	r1, [sp, #4]
 800c1d2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c1d6:	f000 fd41 	bl	800cc5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f7ff fca5 	bl	800bb2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c1e0:	f000 fc1a 	bl	800ca18 <xTaskResumeAll>
 800c1e4:	b948      	cbnz	r0, 800c1fa <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800c1e6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c1ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c1f2:	f3bf 8f4f 	dsb	sy
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	2501      	movs	r5, #1
 800c1fc:	e794      	b.n	800c128 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800c1fe:	4620      	mov	r0, r4
 800c200:	f7ff fc93 	bl	800bb2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c204:	f000 fc08 	bl	800ca18 <xTaskResumeAll>
 800c208:	e7f7      	b.n	800c1fa <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800c20a:	4620      	mov	r0, r4
 800c20c:	f7ff fc8d 	bl	800bb2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c210:	f000 fc02 	bl	800ca18 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c214:	4620      	mov	r0, r4
 800c216:	f7ff fc35 	bl	800ba84 <prvIsQueueEmpty>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d0ed      	beq.n	800c1fa <xQueueReceive+0x116>
 800c21e:	e7b4      	b.n	800c18a <xQueueReceive+0xa6>

0800c220 <xQueueSemaphoreTake>:
{
 800c220:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c222:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800c224:	4604      	mov	r4, r0
{
 800c226:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c228:	b940      	cbnz	r0, 800c23c <xQueueSemaphoreTake+0x1c>
 800c22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c22e:	f383 8811 	msr	BASEPRI, r3
 800c232:	f3bf 8f6f 	isb	sy
 800c236:	f3bf 8f4f 	dsb	sy
 800c23a:	e7fe      	b.n	800c23a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c23c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800c23e:	b145      	cbz	r5, 800c252 <xQueueSemaphoreTake+0x32>
 800c240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	e7fe      	b.n	800c250 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c252:	f000 fdd1 	bl	800cdf8 <xTaskGetSchedulerState>
 800c256:	4606      	mov	r6, r0
 800c258:	b320      	cbz	r0, 800c2a4 <xQueueSemaphoreTake+0x84>
 800c25a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800c25c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800c25e:	f7ff fad1 	bl	800b804 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c262:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c264:	b353      	cbz	r3, 800c2bc <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c266:	3b01      	subs	r3, #1
 800c268:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c26a:	6823      	ldr	r3, [r4, #0]
 800c26c:	b913      	cbnz	r3, 800c274 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c26e:	f000 fea1 	bl	800cfb4 <pvTaskIncrementMutexHeldCount>
 800c272:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c274:	6923      	ldr	r3, [r4, #16]
 800c276:	b173      	cbz	r3, 800c296 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c278:	f104 0010 	add.w	r0, r4, #16
 800c27c:	f000 fd26 	bl	800cccc <xTaskRemoveFromEventList>
 800c280:	b148      	cbz	r0, 800c296 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800c282:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c28a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c296:	f7ff fad5 	bl	800b844 <vPortExitCritical>
				return pdPASS;
 800c29a:	2001      	movs	r0, #1
}
 800c29c:	b005      	add	sp, #20
 800c29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2a0:	4635      	mov	r5, r6
 800c2a2:	e7db      	b.n	800c25c <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2a4:	9b01      	ldr	r3, [sp, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d0fa      	beq.n	800c2a0 <xQueueSemaphoreTake+0x80>
 800c2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ae:	f383 8811 	msr	BASEPRI, r3
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	f3bf 8f4f 	dsb	sy
 800c2ba:	e7fe      	b.n	800c2ba <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2bc:	9b01      	ldr	r3, [sp, #4]
 800c2be:	b953      	cbnz	r3, 800c2d6 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c2c0:	2d00      	cmp	r5, #0
 800c2c2:	d066      	beq.n	800c392 <xQueueSemaphoreTake+0x172>
 800c2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	e7fe      	b.n	800c2d4 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800c2d6:	b916      	cbnz	r6, 800c2de <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2d8:	a802      	add	r0, sp, #8
 800c2da:	f000 fd39 	bl	800cd50 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c2de:	f7ff fab1 	bl	800b844 <vPortExitCritical>
		vTaskSuspendAll();
 800c2e2:	f000 faf5 	bl	800c8d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2e6:	f7ff fa8d 	bl	800b804 <vPortEnterCritical>
 800c2ea:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c2ee:	2bff      	cmp	r3, #255	@ 0xff
 800c2f0:	d101      	bne.n	800c2f6 <xQueueSemaphoreTake+0xd6>
 800c2f2:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800c2f6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c2fa:	2bff      	cmp	r3, #255	@ 0xff
 800c2fc:	d101      	bne.n	800c302 <xQueueSemaphoreTake+0xe2>
 800c2fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c302:	f7ff fa9f 	bl	800b844 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c306:	a901      	add	r1, sp, #4
 800c308:	a802      	add	r0, sp, #8
 800c30a:	f000 fd2d 	bl	800cd68 <xTaskCheckForTimeOut>
 800c30e:	bb50      	cbnz	r0, 800c366 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c310:	4620      	mov	r0, r4
 800c312:	f7ff fbb7 	bl	800ba84 <prvIsQueueEmpty>
 800c316:	b300      	cbz	r0, 800c35a <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	b93b      	cbnz	r3, 800c32c <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800c31c:	f7ff fa72 	bl	800b804 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c320:	68a0      	ldr	r0, [r4, #8]
 800c322:	f000 fd79 	bl	800ce18 <xTaskPriorityInherit>
 800c326:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800c328:	f7ff fa8c 	bl	800b844 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c32c:	9901      	ldr	r1, [sp, #4]
 800c32e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c332:	f000 fc93 	bl	800cc5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c336:	4620      	mov	r0, r4
 800c338:	f7ff fbf7 	bl	800bb2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c33c:	f000 fb6c 	bl	800ca18 <xTaskResumeAll>
 800c340:	b948      	cbnz	r0, 800c356 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800c342:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c34a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	2601      	movs	r6, #1
 800c358:	e781      	b.n	800c25e <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800c35a:	4620      	mov	r0, r4
 800c35c:	f7ff fbe5 	bl	800bb2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c360:	f000 fb5a 	bl	800ca18 <xTaskResumeAll>
 800c364:	e7f7      	b.n	800c356 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800c366:	4620      	mov	r0, r4
 800c368:	f7ff fbdf 	bl	800bb2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c36c:	f000 fb54 	bl	800ca18 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c370:	4620      	mov	r0, r4
 800c372:	f7ff fb87 	bl	800ba84 <prvIsQueueEmpty>
 800c376:	2800      	cmp	r0, #0
 800c378:	d0ed      	beq.n	800c356 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800c37a:	b165      	cbz	r5, 800c396 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800c37c:	f7ff fa42 	bl	800b804 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c380:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c382:	b119      	cbz	r1, 800c38c <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c384:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c386:	6819      	ldr	r1, [r3, #0]
 800c388:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c38c:	68a0      	ldr	r0, [r4, #8]
 800c38e:	f000 fdc3 	bl	800cf18 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800c392:	f7ff fa57 	bl	800b844 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c396:	2000      	movs	r0, #0
 800c398:	e780      	b.n	800c29c <xQueueSemaphoreTake+0x7c>

0800c39a <xQueueTakeMutexRecursive>:
	{
 800c39a:	b570      	push	{r4, r5, r6, lr}
 800c39c:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800c39e:	4604      	mov	r4, r0
 800c3a0:	b940      	cbnz	r0, 800c3b4 <xQueueTakeMutexRecursive+0x1a>
 800c3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a6:	f383 8811 	msr	BASEPRI, r3
 800c3aa:	f3bf 8f6f 	isb	sy
 800c3ae:	f3bf 8f4f 	dsb	sy
 800c3b2:	e7fe      	b.n	800c3b2 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c3b4:	6886      	ldr	r6, [r0, #8]
 800c3b6:	f000 fd19 	bl	800cdec <xTaskGetCurrentTaskHandle>
 800c3ba:	4286      	cmp	r6, r0
 800c3bc:	d104      	bne.n	800c3c8 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c3be:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800c3c0:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	60e3      	str	r3, [r4, #12]
	}
 800c3c6:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c3c8:	4629      	mov	r1, r5
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f7ff ff28 	bl	800c220 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d0f8      	beq.n	800c3c6 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c3d4:	68e3      	ldr	r3, [r4, #12]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	60e3      	str	r3, [r4, #12]
 800c3da:	e7f4      	b.n	800c3c6 <xQueueTakeMutexRecursive+0x2c>

0800c3dc <xQueueReceiveFromISR>:
{
 800c3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3e0:	4689      	mov	r9, r1
 800c3e2:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	b940      	cbnz	r0, 800c3fa <xQueueReceiveFromISR+0x1e>
 800c3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ec:	f383 8811 	msr	BASEPRI, r3
 800c3f0:	f3bf 8f6f 	isb	sy
 800c3f4:	f3bf 8f4f 	dsb	sy
 800c3f8:	e7fe      	b.n	800c3f8 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3fa:	b951      	cbnz	r1, 800c412 <xQueueReceiveFromISR+0x36>
 800c3fc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c3fe:	b143      	cbz	r3, 800c412 <xQueueReceiveFromISR+0x36>
 800c400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c404:	f383 8811 	msr	BASEPRI, r3
 800c408:	f3bf 8f6f 	isb	sy
 800c40c:	f3bf 8f4f 	dsb	sy
 800c410:	e7fe      	b.n	800c410 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c412:	f7ff fb09 	bl	800ba28 <vPortValidateInterruptPriority>
	__asm volatile
 800c416:	f3ef 8711 	mrs	r7, BASEPRI
 800c41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41e:	f383 8811 	msr	BASEPRI, r3
 800c422:	f3bf 8f6f 	isb	sy
 800c426:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c42a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c42c:	b30d      	cbz	r5, 800c472 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800c42e:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c432:	4649      	mov	r1, r9
 800c434:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c436:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800c438:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c43a:	f7ff fb61 	bl	800bb00 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c43e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800c440:	1c73      	adds	r3, r6, #1
 800c442:	d111      	bne.n	800c468 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c444:	6923      	ldr	r3, [r4, #16]
 800c446:	b153      	cbz	r3, 800c45e <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c448:	f104 0010 	add.w	r0, r4, #16
 800c44c:	f000 fc3e 	bl	800cccc <xTaskRemoveFromEventList>
 800c450:	b128      	cbz	r0, 800c45e <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800c452:	f1b8 0f00 	cmp.w	r8, #0
 800c456:	d002      	beq.n	800c45e <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c458:	2301      	movs	r3, #1
 800c45a:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800c45e:	2001      	movs	r0, #1
	__asm volatile
 800c460:	f387 8811 	msr	BASEPRI, r7
}
 800c464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c468:	3601      	adds	r6, #1
 800c46a:	b276      	sxtb	r6, r6
 800c46c:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800c470:	e7f5      	b.n	800c45e <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800c472:	4628      	mov	r0, r5
 800c474:	e7f4      	b.n	800c460 <xQueueReceiveFromISR+0x84>
	...

0800c478 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c478:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c47a:	4a07      	ldr	r2, [pc, #28]	@ (800c498 <vQueueAddToRegistry+0x20>)
	{
 800c47c:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c47e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800c482:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800c486:	b91d      	cbnz	r5, 800c490 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c488:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c48c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c48e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c490:	3301      	adds	r3, #1
 800c492:	2b08      	cmp	r3, #8
 800c494:	d1f3      	bne.n	800c47e <vQueueAddToRegistry+0x6>
 800c496:	e7fa      	b.n	800c48e <vQueueAddToRegistry+0x16>
 800c498:	24024ae4 	.word	0x24024ae4

0800c49c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c49c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c49e:	4a09      	ldr	r2, [pc, #36]	@ (800c4c4 <vQueueUnregisterQueue+0x28>)
	{
 800c4a0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c4a2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c4a6:	00dc      	lsls	r4, r3, #3
 800c4a8:	4281      	cmp	r1, r0
 800c4aa:	d106      	bne.n	800c4ba <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c4ac:	4a06      	ldr	r2, [pc, #24]	@ (800c4c8 <vQueueUnregisterQueue+0x2c>)
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c4b4:	4422      	add	r2, r4
 800c4b6:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c4b8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	2b08      	cmp	r3, #8
 800c4be:	d1f0      	bne.n	800c4a2 <vQueueUnregisterQueue+0x6>
 800c4c0:	e7fa      	b.n	800c4b8 <vQueueUnregisterQueue+0x1c>
 800c4c2:	bf00      	nop
 800c4c4:	24024ae8 	.word	0x24024ae8
 800c4c8:	24024ae4 	.word	0x24024ae4

0800c4cc <vQueueDelete>:
{
 800c4cc:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800c4ce:	b940      	cbnz	r0, 800c4e2 <vQueueDelete+0x16>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	e7fe      	b.n	800c4e0 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800c4e2:	f7ff ffdb 	bl	800c49c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c4e6:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800c4ea:	b91b      	cbnz	r3, 800c4f4 <vQueueDelete+0x28>
}
 800c4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800c4f0:	f7ff b8a8 	b.w	800b644 <vPortFree>
}
 800c4f4:	bd10      	pop	{r4, pc}

0800c4f6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c4f6:	b570      	push	{r4, r5, r6, lr}
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	460d      	mov	r5, r1
 800c4fc:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c4fe:	f7ff f981 	bl	800b804 <vPortEnterCritical>
 800c502:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c506:	2bff      	cmp	r3, #255	@ 0xff
 800c508:	d102      	bne.n	800c510 <vQueueWaitForMessageRestricted+0x1a>
 800c50a:	2300      	movs	r3, #0
 800c50c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c510:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c514:	2bff      	cmp	r3, #255	@ 0xff
 800c516:	d102      	bne.n	800c51e <vQueueWaitForMessageRestricted+0x28>
 800c518:	2300      	movs	r3, #0
 800c51a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c51e:	f7ff f991 	bl	800b844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c522:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c524:	b92b      	cbnz	r3, 800c532 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c526:	4632      	mov	r2, r6
 800c528:	4629      	mov	r1, r5
 800c52a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c52e:	f000 fbaf 	bl	800cc90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c532:	4620      	mov	r0, r4
	}
 800c534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800c538:	f7ff baf7 	b.w	800bb2a <prvUnlockQueue>

0800c53c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c540:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c542:	f7ff f95f 	bl	800b804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c546:	4b2f      	ldr	r3, [pc, #188]	@ (800c604 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800c548:	4e2f      	ldr	r6, [pc, #188]	@ (800c608 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	4f2f      	ldr	r7, [pc, #188]	@ (800c60c <prvAddNewTaskToReadyList+0xd0>)
 800c54e:	3201      	adds	r2, #1
 800c550:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800c552:	6835      	ldr	r5, [r6, #0]
 800c554:	2d00      	cmp	r5, #0
 800c556:	d14a      	bne.n	800c5ee <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c558:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d11f      	bne.n	800c5a0 <prvAddNewTaskToReadyList+0x64>
 800c560:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c562:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c564:	4640      	mov	r0, r8
 800c566:	f7ff f8ab 	bl	800b6c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c56a:	f108 0814 	add.w	r8, r8, #20
 800c56e:	2d38      	cmp	r5, #56	@ 0x38
 800c570:	d1f7      	bne.n	800c562 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c572:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800c634 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800c576:	4d26      	ldr	r5, [pc, #152]	@ (800c610 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800c578:	4640      	mov	r0, r8
 800c57a:	f7ff f8a1 	bl	800b6c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c57e:	4628      	mov	r0, r5
 800c580:	f7ff f89e 	bl	800b6c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c584:	4823      	ldr	r0, [pc, #140]	@ (800c614 <prvAddNewTaskToReadyList+0xd8>)
 800c586:	f7ff f89b 	bl	800b6c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c58a:	4823      	ldr	r0, [pc, #140]	@ (800c618 <prvAddNewTaskToReadyList+0xdc>)
 800c58c:	f7ff f898 	bl	800b6c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c590:	4822      	ldr	r0, [pc, #136]	@ (800c61c <prvAddNewTaskToReadyList+0xe0>)
 800c592:	f7ff f895 	bl	800b6c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c596:	4b22      	ldr	r3, [pc, #136]	@ (800c620 <prvAddNewTaskToReadyList+0xe4>)
 800c598:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c59c:	4b21      	ldr	r3, [pc, #132]	@ (800c624 <prvAddNewTaskToReadyList+0xe8>)
 800c59e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800c5a0:	4a21      	ldr	r2, [pc, #132]	@ (800c628 <prvAddNewTaskToReadyList+0xec>)
 800c5a2:	6813      	ldr	r3, [r2, #0]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800c5a8:	4a20      	ldr	r2, [pc, #128]	@ (800c62c <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c5aa:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800c5ac:	6811      	ldr	r1, [r2, #0]
 800c5ae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c5b0:	428b      	cmp	r3, r1
 800c5b2:	d900      	bls.n	800c5b6 <prvAddNewTaskToReadyList+0x7a>
 800c5b4:	6013      	str	r3, [r2, #0]
 800c5b6:	2014      	movs	r0, #20
 800c5b8:	1d21      	adds	r1, r4, #4
 800c5ba:	fb00 7003 	mla	r0, r0, r3, r7
 800c5be:	f7ff f88d 	bl	800b6dc <vListInsertEnd>
	taskEXIT_CRITICAL();
 800c5c2:	f7ff f93f 	bl	800b844 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800c5c6:	4b1a      	ldr	r3, [pc, #104]	@ (800c630 <prvAddNewTaskToReadyList+0xf4>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	b173      	cbz	r3, 800c5ea <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c5cc:	6833      	ldr	r3, [r6, #0]
 800c5ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d209      	bcs.n	800c5ea <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800c5d6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c5da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5de:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c5e2:	f3bf 8f4f 	dsb	sy
 800c5e6:	f3bf 8f6f 	isb	sy
}
 800c5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800c5ee:	4b10      	ldr	r3, [pc, #64]	@ (800c630 <prvAddNewTaskToReadyList+0xf4>)
 800c5f0:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c5f2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800c5f4:	2a00      	cmp	r2, #0
 800c5f6:	d1d3      	bne.n	800c5a0 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c5f8:	6832      	ldr	r2, [r6, #0]
 800c5fa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d8cf      	bhi.n	800c5a0 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800c600:	6034      	str	r4, [r6, #0]
 800c602:	e7cd      	b.n	800c5a0 <prvAddNewTaskToReadyList+0x64>
 800c604:	24024b48 	.word	0x24024b48
 800c608:	2402501c 	.word	0x2402501c
 800c60c:	24024bbc 	.word	0x24024bbc
 800c610:	24024b94 	.word	0x24024b94
 800c614:	24024b78 	.word	0x24024b78
 800c618:	24024b64 	.word	0x24024b64
 800c61c:	24024b4c 	.word	0x24024b4c
 800c620:	24024b90 	.word	0x24024b90
 800c624:	24024b8c 	.word	0x24024b8c
 800c628:	24024b2c 	.word	0x24024b2c
 800c62c:	24024b40 	.word	0x24024b40
 800c630:	24024b3c 	.word	0x24024b3c
 800c634:	24024ba8 	.word	0x24024ba8

0800c638 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c63a:	4b15      	ldr	r3, [pc, #84]	@ (800c690 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800c63c:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c63e:	4d15      	ldr	r5, [pc, #84]	@ (800c694 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800c640:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800c642:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c644:	6828      	ldr	r0, [r5, #0]
 800c646:	3004      	adds	r0, #4
 800c648:	f7ff f86a 	bl	800b720 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c64c:	1c73      	adds	r3, r6, #1
 800c64e:	d107      	bne.n	800c660 <prvAddCurrentTaskToDelayedList+0x28>
 800c650:	b137      	cbz	r7, 800c660 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c652:	6829      	ldr	r1, [r5, #0]
 800c654:	4810      	ldr	r0, [pc, #64]	@ (800c698 <prvAddCurrentTaskToDelayedList+0x60>)
 800c656:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c658:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c65c:	f7ff b83e 	b.w	800b6dc <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c660:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c662:	682b      	ldr	r3, [r5, #0]
 800c664:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c666:	d307      	bcc.n	800c678 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c668:	4b0c      	ldr	r3, [pc, #48]	@ (800c69c <prvAddCurrentTaskToDelayedList+0x64>)
 800c66a:	6818      	ldr	r0, [r3, #0]
 800c66c:	6829      	ldr	r1, [r5, #0]
}
 800c66e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c672:	3104      	adds	r1, #4
 800c674:	f7ff b83d 	b.w	800b6f2 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c678:	4b09      	ldr	r3, [pc, #36]	@ (800c6a0 <prvAddCurrentTaskToDelayedList+0x68>)
 800c67a:	6818      	ldr	r0, [r3, #0]
 800c67c:	6829      	ldr	r1, [r5, #0]
 800c67e:	3104      	adds	r1, #4
 800c680:	f7ff f837 	bl	800b6f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c684:	4b07      	ldr	r3, [pc, #28]	@ (800c6a4 <prvAddCurrentTaskToDelayedList+0x6c>)
 800c686:	681a      	ldr	r2, [r3, #0]
 800c688:	42a2      	cmp	r2, r4
 800c68a:	d900      	bls.n	800c68e <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800c68c:	601c      	str	r4, [r3, #0]
}
 800c68e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c690:	24024b44 	.word	0x24024b44
 800c694:	2402501c 	.word	0x2402501c
 800c698:	24024b4c 	.word	0x24024b4c
 800c69c:	24024b8c 	.word	0x24024b8c
 800c6a0:	24024b90 	.word	0x24024b90
 800c6a4:	24024b28 	.word	0x24024b28

0800c6a8 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6a8:	4a06      	ldr	r2, [pc, #24]	@ (800c6c4 <prvResetNextTaskUnblockTime+0x1c>)
 800c6aa:	6813      	ldr	r3, [r2, #0]
 800c6ac:	6819      	ldr	r1, [r3, #0]
 800c6ae:	4b06      	ldr	r3, [pc, #24]	@ (800c6c8 <prvResetNextTaskUnblockTime+0x20>)
 800c6b0:	b919      	cbnz	r1, 800c6ba <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800c6b2:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c6b6:	601a      	str	r2, [r3, #0]
}
 800c6b8:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6ba:	6812      	ldr	r2, [r2, #0]
 800c6bc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c6be:	68d2      	ldr	r2, [r2, #12]
 800c6c0:	6852      	ldr	r2, [r2, #4]
 800c6c2:	e7f8      	b.n	800c6b6 <prvResetNextTaskUnblockTime+0xe>
 800c6c4:	24024b90 	.word	0x24024b90
 800c6c8:	24024b28 	.word	0x24024b28

0800c6cc <prvDeleteTCB>:
	{
 800c6cc:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c6ce:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800c6d2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c6d4:	b93b      	cbnz	r3, 800c6e6 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800c6d6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800c6d8:	f7fe ffb4 	bl	800b644 <vPortFree>
				vPortFree( pxTCB );
 800c6dc:	4620      	mov	r0, r4
	}
 800c6de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800c6e2:	f7fe bfaf 	b.w	800b644 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d0f9      	beq.n	800c6de <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	d008      	beq.n	800c700 <prvDeleteTCB+0x34>
 800c6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6f2:	f383 8811 	msr	BASEPRI, r3
 800c6f6:	f3bf 8f6f 	isb	sy
 800c6fa:	f3bf 8f4f 	dsb	sy
 800c6fe:	e7fe      	b.n	800c6fe <prvDeleteTCB+0x32>
	}
 800c700:	bd10      	pop	{r4, pc}
	...

0800c704 <prvIdleTask>:
{
 800c704:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c706:	4c14      	ldr	r4, [pc, #80]	@ (800c758 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c708:	4f14      	ldr	r7, [pc, #80]	@ (800c75c <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800c70a:	4d15      	ldr	r5, [pc, #84]	@ (800c760 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c70c:	6823      	ldr	r3, [r4, #0]
 800c70e:	b983      	cbnz	r3, 800c732 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c710:	4b14      	ldr	r3, [pc, #80]	@ (800c764 <prvIdleTask+0x60>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2b01      	cmp	r3, #1
 800c716:	d909      	bls.n	800c72c <prvIdleTask+0x28>
				taskYIELD();
 800c718:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c71c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c720:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c724:	f3bf 8f4f 	dsb	sy
 800c728:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800c72c:	f7f3 ffe4 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c730:	e7eb      	b.n	800c70a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800c732:	f7ff f867 	bl	800b804 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c73a:	1d30      	adds	r0, r6, #4
 800c73c:	f7fe fff0 	bl	800b720 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c740:	682b      	ldr	r3, [r5, #0]
 800c742:	3b01      	subs	r3, #1
 800c744:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c746:	6823      	ldr	r3, [r4, #0]
 800c748:	3b01      	subs	r3, #1
 800c74a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800c74c:	f7ff f87a 	bl	800b844 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800c750:	4630      	mov	r0, r6
 800c752:	f7ff ffbb 	bl	800c6cc <prvDeleteTCB>
 800c756:	e7d9      	b.n	800c70c <prvIdleTask+0x8>
 800c758:	24024b60 	.word	0x24024b60
 800c75c:	24024b64 	.word	0x24024b64
 800c760:	24024b48 	.word	0x24024b48
 800c764:	24024bbc 	.word	0x24024bbc

0800c768 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c76c:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c76e:	4607      	mov	r7, r0
 800c770:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c772:	21a5      	movs	r1, #165	@ 0xa5
 800c774:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c776:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c778:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c77a:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c77e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c780:	f013 ffd2 	bl	8020728 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c784:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c786:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c788:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800c78c:	b3b5      	cbz	r5, 800c7fc <prvInitialiseNewTask.constprop.0+0x94>
 800c78e:	1e6b      	subs	r3, r5, #1
 800c790:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800c794:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c796:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800c79a:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800c79e:	b109      	cbz	r1, 800c7a4 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7a0:	42ab      	cmp	r3, r5
 800c7a2:	d1f8      	bne.n	800c796 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c7aa:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800c7ac:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7b0:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c7b2:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800c7b4:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c7b8:	bf28      	it	cs
 800c7ba:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800c7bc:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800c7be:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7c0:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7c4:	f7fe ff87 	bl	800b6d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7c8:	f104 0018 	add.w	r0, r4, #24
 800c7cc:	f7fe ff83 	bl	800b6d6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800c7d0:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7d4:	4642      	mov	r2, r8
 800c7d6:	4639      	mov	r1, r7
 800c7d8:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7da:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7dc:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c7de:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800c7e0:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c7e4:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7e8:	f7fe ffe8 	bl	800b7bc <pxPortInitialiseStack>
 800c7ec:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800c7ee:	f1b9 0f00 	cmp.w	r9, #0
 800c7f2:	d001      	beq.n	800c7f8 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c7f4:	f8c9 4000 	str.w	r4, [r9]
}
 800c7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c7fc:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800c800:	e7d3      	b.n	800c7aa <prvInitialiseNewTask.constprop.0+0x42>

0800c802 <xTaskCreateStatic>:
	{
 800c802:	b570      	push	{r4, r5, r6, lr}
 800c804:	b086      	sub	sp, #24
 800c806:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800c80a:	b945      	cbnz	r5, 800c81e <xTaskCreateStatic+0x1c>
 800c80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c810:	f383 8811 	msr	BASEPRI, r3
 800c814:	f3bf 8f6f 	isb	sy
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	e7fe      	b.n	800c81c <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800c81e:	b944      	cbnz	r4, 800c832 <xTaskCreateStatic+0x30>
 800c820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	e7fe      	b.n	800c830 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800c832:	2660      	movs	r6, #96	@ 0x60
 800c834:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c836:	9e05      	ldr	r6, [sp, #20]
 800c838:	2e60      	cmp	r6, #96	@ 0x60
 800c83a:	d008      	beq.n	800c84e <xTaskCreateStatic+0x4c>
 800c83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	e7fe      	b.n	800c84c <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c84e:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c850:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c852:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c854:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c858:	ad04      	add	r5, sp, #16
 800c85a:	9402      	str	r4, [sp, #8]
 800c85c:	9501      	str	r5, [sp, #4]
 800c85e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c860:	9500      	str	r5, [sp, #0]
 800c862:	f7ff ff81 	bl	800c768 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c866:	4620      	mov	r0, r4
 800c868:	f7ff fe68 	bl	800c53c <prvAddNewTaskToReadyList>
	}
 800c86c:	9804      	ldr	r0, [sp, #16]
 800c86e:	b006      	add	sp, #24
 800c870:	bd70      	pop	{r4, r5, r6, pc}

0800c872 <xTaskCreate>:
	{
 800c872:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c876:	4607      	mov	r7, r0
 800c878:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c87a:	0090      	lsls	r0, r2, #2
	{
 800c87c:	4688      	mov	r8, r1
 800c87e:	4616      	mov	r6, r2
 800c880:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c882:	f7fe fe47 	bl	800b514 <pvPortMalloc>
			if( pxStack != NULL )
 800c886:	4605      	mov	r5, r0
 800c888:	b920      	cbnz	r0, 800c894 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c88a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800c88e:	b005      	add	sp, #20
 800c890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c894:	2060      	movs	r0, #96	@ 0x60
 800c896:	f7fe fe3d 	bl	800b514 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800c89a:	4604      	mov	r4, r0
 800c89c:	b198      	cbz	r0, 800c8c6 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c89e:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800c8a0:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c8a2:	4632      	mov	r2, r6
 800c8a4:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c8a6:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c8aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c8ac:	9002      	str	r0, [sp, #8]
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	9301      	str	r3, [sp, #4]
 800c8b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	464b      	mov	r3, r9
 800c8b8:	f7ff ff56 	bl	800c768 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8bc:	4620      	mov	r0, r4
 800c8be:	f7ff fe3d 	bl	800c53c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c8c2:	2001      	movs	r0, #1
 800c8c4:	e7e3      	b.n	800c88e <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	f7fe febc 	bl	800b644 <vPortFree>
		if( pxNewTCB != NULL )
 800c8cc:	e7dd      	b.n	800c88a <xTaskCreate+0x18>
	...

0800c8d0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800c8d0:	4a02      	ldr	r2, [pc, #8]	@ (800c8dc <vTaskSuspendAll+0xc>)
 800c8d2:	6813      	ldr	r3, [r2, #0]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	6013      	str	r3, [r2, #0]
}
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	24024b24 	.word	0x24024b24

0800c8e0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800c8e0:	4b01      	ldr	r3, [pc, #4]	@ (800c8e8 <xTaskGetTickCount+0x8>)
 800c8e2:	6818      	ldr	r0, [r3, #0]
}
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop
 800c8e8:	24024b44 	.word	0x24024b44

0800c8ec <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8ec:	4b3f      	ldr	r3, [pc, #252]	@ (800c9ec <xTaskIncrementTick+0x100>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
{
 800c8f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d172      	bne.n	800c9de <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c8f8:	4b3d      	ldr	r3, [pc, #244]	@ (800c9f0 <xTaskIncrementTick+0x104>)
 800c8fa:	681c      	ldr	r4, [r3, #0]
 800c8fc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800c8fe:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c900:	b9bc      	cbnz	r4, 800c932 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800c902:	4b3c      	ldr	r3, [pc, #240]	@ (800c9f4 <xTaskIncrementTick+0x108>)
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	6812      	ldr	r2, [r2, #0]
 800c908:	b142      	cbz	r2, 800c91c <xTaskIncrementTick+0x30>
 800c90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90e:	f383 8811 	msr	BASEPRI, r3
 800c912:	f3bf 8f6f 	isb	sy
 800c916:	f3bf 8f4f 	dsb	sy
 800c91a:	e7fe      	b.n	800c91a <xTaskIncrementTick+0x2e>
 800c91c:	4a36      	ldr	r2, [pc, #216]	@ (800c9f8 <xTaskIncrementTick+0x10c>)
 800c91e:	6819      	ldr	r1, [r3, #0]
 800c920:	6810      	ldr	r0, [r2, #0]
 800c922:	6018      	str	r0, [r3, #0]
 800c924:	6011      	str	r1, [r2, #0]
 800c926:	4a35      	ldr	r2, [pc, #212]	@ (800c9fc <xTaskIncrementTick+0x110>)
 800c928:	6813      	ldr	r3, [r2, #0]
 800c92a:	3301      	adds	r3, #1
 800c92c:	6013      	str	r3, [r2, #0]
 800c92e:	f7ff febb 	bl	800c6a8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c932:	4d33      	ldr	r5, [pc, #204]	@ (800ca00 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800c934:	f04f 0b00 	mov.w	fp, #0
 800c938:	4e32      	ldr	r6, [pc, #200]	@ (800ca04 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c93a:	682b      	ldr	r3, [r5, #0]
 800c93c:	4f32      	ldr	r7, [pc, #200]	@ (800ca08 <xTaskIncrementTick+0x11c>)
 800c93e:	429c      	cmp	r4, r3
 800c940:	d212      	bcs.n	800c968 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c942:	683a      	ldr	r2, [r7, #0]
 800c944:	2114      	movs	r1, #20
 800c946:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c948:	434a      	muls	r2, r1
 800c94a:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800c94c:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800c94e:	4a2f      	ldr	r2, [pc, #188]	@ (800ca0c <xTaskIncrementTick+0x120>)
 800c950:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800c952:	bf28      	it	cs
 800c954:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800c958:	2a00      	cmp	r2, #0
 800c95a:	bf18      	it	ne
 800c95c:	f04f 0b01 	movne.w	fp, #1
}
 800c960:	4658      	mov	r0, fp
 800c962:	b003      	add	sp, #12
 800c964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c968:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800c9f4 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800c96c:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800ca14 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c970:	f8d9 2000 	ldr.w	r2, [r9]
 800c974:	6812      	ldr	r2, [r2, #0]
 800c976:	b91a      	cbnz	r2, 800c980 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c978:	f04f 32ff 	mov.w	r2, #4294967295
 800c97c:	602a      	str	r2, [r5, #0]
					break;
 800c97e:	e7e0      	b.n	800c942 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c980:	f8d9 2000 	ldr.w	r2, [r9]
 800c984:	68d2      	ldr	r2, [r2, #12]
 800c986:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c98a:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800c98e:	428c      	cmp	r4, r1
 800c990:	d201      	bcs.n	800c996 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800c992:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c994:	e7d5      	b.n	800c942 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c996:	f108 0304 	add.w	r3, r8, #4
 800c99a:	4618      	mov	r0, r3
 800c99c:	9301      	str	r3, [sp, #4]
 800c99e:	f7fe febf 	bl	800b720 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c9a2:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800c9a6:	b119      	cbz	r1, 800c9b0 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9a8:	f108 0018 	add.w	r0, r8, #24
 800c9ac:	f7fe feb8 	bl	800b720 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9b0:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800c9b4:	f8da 1000 	ldr.w	r1, [sl]
 800c9b8:	4288      	cmp	r0, r1
 800c9ba:	d901      	bls.n	800c9c0 <xTaskIncrementTick+0xd4>
 800c9bc:	f8ca 0000 	str.w	r0, [sl]
 800c9c0:	2314      	movs	r3, #20
 800c9c2:	9901      	ldr	r1, [sp, #4]
 800c9c4:	fb03 6000 	mla	r0, r3, r0, r6
 800c9c8:	f7fe fe88 	bl	800b6dc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9cc:	6838      	ldr	r0, [r7, #0]
 800c9ce:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800c9d2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800c9d4:	4291      	cmp	r1, r2
 800c9d6:	bf28      	it	cs
 800c9d8:	f04f 0b01 	movcs.w	fp, #1
 800c9dc:	e7c8      	b.n	800c970 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800c9de:	4a0c      	ldr	r2, [pc, #48]	@ (800ca10 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800c9e0:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800c9e4:	6813      	ldr	r3, [r2, #0]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	6013      	str	r3, [r2, #0]
 800c9ea:	e7b9      	b.n	800c960 <xTaskIncrementTick+0x74>
 800c9ec:	24024b24 	.word	0x24024b24
 800c9f0:	24024b44 	.word	0x24024b44
 800c9f4:	24024b90 	.word	0x24024b90
 800c9f8:	24024b8c 	.word	0x24024b8c
 800c9fc:	24024b30 	.word	0x24024b30
 800ca00:	24024b28 	.word	0x24024b28
 800ca04:	24024bbc 	.word	0x24024bbc
 800ca08:	2402501c 	.word	0x2402501c
 800ca0c:	24024b34 	.word	0x24024b34
 800ca10:	24024b38 	.word	0x24024b38
 800ca14:	24024b40 	.word	0x24024b40

0800ca18 <xTaskResumeAll>:
{
 800ca18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800ca1c:	4c30      	ldr	r4, [pc, #192]	@ (800cae0 <xTaskResumeAll+0xc8>)
 800ca1e:	6823      	ldr	r3, [r4, #0]
 800ca20:	b943      	cbnz	r3, 800ca34 <xTaskResumeAll+0x1c>
 800ca22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca26:	f383 8811 	msr	BASEPRI, r3
 800ca2a:	f3bf 8f6f 	isb	sy
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	e7fe      	b.n	800ca32 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800ca34:	f7fe fee6 	bl	800b804 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800ca38:	6823      	ldr	r3, [r4, #0]
 800ca3a:	3b01      	subs	r3, #1
 800ca3c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca3e:	6824      	ldr	r4, [r4, #0]
 800ca40:	b12c      	cbz	r4, 800ca4e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800ca42:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ca44:	f7fe fefe 	bl	800b844 <vPortExitCritical>
}
 800ca48:	4620      	mov	r0, r4
 800ca4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca4e:	4b25      	ldr	r3, [pc, #148]	@ (800cae4 <xTaskResumeAll+0xcc>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d0f5      	beq.n	800ca42 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca56:	4d24      	ldr	r5, [pc, #144]	@ (800cae8 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800ca58:	4e24      	ldr	r6, [pc, #144]	@ (800caec <xTaskResumeAll+0xd4>)
 800ca5a:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800cafc <xTaskResumeAll+0xe4>
 800ca5e:	e01d      	b.n	800ca9c <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca60:	68eb      	ldr	r3, [r5, #12]
 800ca62:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca64:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca66:	f104 0018 	add.w	r0, r4, #24
 800ca6a:	f7fe fe59 	bl	800b720 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca6e:	4638      	mov	r0, r7
 800ca70:	f7fe fe56 	bl	800b720 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca74:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ca76:	6832      	ldr	r2, [r6, #0]
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d900      	bls.n	800ca7e <xTaskResumeAll+0x66>
 800ca7c:	6033      	str	r3, [r6, #0]
 800ca7e:	2014      	movs	r0, #20
 800ca80:	4639      	mov	r1, r7
 800ca82:	fb00 8003 	mla	r0, r0, r3, r8
 800ca86:	f7fe fe29 	bl	800b6dc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca8a:	4b19      	ldr	r3, [pc, #100]	@ (800caf0 <xTaskResumeAll+0xd8>)
 800ca8c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d302      	bcc.n	800ca9c <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800ca96:	4b17      	ldr	r3, [pc, #92]	@ (800caf4 <xTaskResumeAll+0xdc>)
 800ca98:	2201      	movs	r2, #1
 800ca9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca9c:	682b      	ldr	r3, [r5, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d1de      	bne.n	800ca60 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800caa2:	b10c      	cbz	r4, 800caa8 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800caa4:	f7ff fe00 	bl	800c6a8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800caa8:	4d13      	ldr	r5, [pc, #76]	@ (800caf8 <xTaskResumeAll+0xe0>)
 800caaa:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800caac:	b144      	cbz	r4, 800cac0 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800caae:	4e11      	ldr	r6, [pc, #68]	@ (800caf4 <xTaskResumeAll+0xdc>)
 800cab0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800cab2:	f7ff ff1b 	bl	800c8ec <xTaskIncrementTick>
 800cab6:	b100      	cbz	r0, 800caba <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800cab8:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800caba:	3c01      	subs	r4, #1
 800cabc:	d1f9      	bne.n	800cab2 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800cabe:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800cac0:	4b0c      	ldr	r3, [pc, #48]	@ (800caf4 <xTaskResumeAll+0xdc>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d0bc      	beq.n	800ca42 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800cac8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cacc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cad0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800cadc:	2401      	movs	r4, #1
 800cade:	e7b1      	b.n	800ca44 <xTaskResumeAll+0x2c>
 800cae0:	24024b24 	.word	0x24024b24
 800cae4:	24024b48 	.word	0x24024b48
 800cae8:	24024b78 	.word	0x24024b78
 800caec:	24024b40 	.word	0x24024b40
 800caf0:	2402501c 	.word	0x2402501c
 800caf4:	24024b34 	.word	0x24024b34
 800caf8:	24024b38 	.word	0x24024b38
 800cafc:	24024bbc 	.word	0x24024bbc

0800cb00 <vTaskSetApplicationTaskTag>:
	{
 800cb00:	b538      	push	{r3, r4, r5, lr}
 800cb02:	460d      	mov	r5, r1
		if( xTask == NULL )
 800cb04:	4604      	mov	r4, r0
 800cb06:	b908      	cbnz	r0, 800cb0c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800cb08:	4b04      	ldr	r3, [pc, #16]	@ (800cb1c <vTaskSetApplicationTaskTag+0x1c>)
 800cb0a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800cb0c:	f7fe fe7a 	bl	800b804 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800cb10:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800cb12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800cb16:	f7fe be95 	b.w	800b844 <vPortExitCritical>
 800cb1a:	bf00      	nop
 800cb1c:	2402501c 	.word	0x2402501c

0800cb20 <xTaskCallApplicationTaskHook>:
	{
 800cb20:	4603      	mov	r3, r0
 800cb22:	4608      	mov	r0, r1
		if( xTask == NULL )
 800cb24:	b90b      	cbnz	r3, 800cb2a <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800cb26:	4b03      	ldr	r3, [pc, #12]	@ (800cb34 <xTaskCallApplicationTaskHook+0x14>)
 800cb28:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800cb2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb2c:	b103      	cbz	r3, 800cb30 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800cb2e:	4718      	bx	r3
	}
 800cb30:	4618      	mov	r0, r3
 800cb32:	4770      	bx	lr
 800cb34:	2402501c 	.word	0x2402501c

0800cb38 <vTaskStartScheduler>:
{
 800cb38:	b510      	push	{r4, lr}
 800cb3a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cb3c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cb3e:	aa07      	add	r2, sp, #28
 800cb40:	a906      	add	r1, sp, #24
 800cb42:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cb44:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cb48:	f7fe fca6 	bl	800b498 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cb4c:	9b05      	ldr	r3, [sp, #20]
 800cb4e:	9a07      	ldr	r2, [sp, #28]
 800cb50:	9302      	str	r3, [sp, #8]
 800cb52:	9b06      	ldr	r3, [sp, #24]
 800cb54:	4919      	ldr	r1, [pc, #100]	@ (800cbbc <vTaskStartScheduler+0x84>)
 800cb56:	481a      	ldr	r0, [pc, #104]	@ (800cbc0 <vTaskStartScheduler+0x88>)
 800cb58:	e9cd 4300 	strd	r4, r3, [sp]
 800cb5c:	4623      	mov	r3, r4
 800cb5e:	f7ff fe50 	bl	800c802 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800cb62:	b340      	cbz	r0, 800cbb6 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800cb64:	f000 fa84 	bl	800d070 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800cb68:	2801      	cmp	r0, #1
 800cb6a:	d119      	bne.n	800cba0 <vTaskStartScheduler+0x68>
 800cb6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb70:	f383 8811 	msr	BASEPRI, r3
 800cb74:	f3bf 8f6f 	isb	sy
 800cb78:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb7c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb80:	4b10      	ldr	r3, [pc, #64]	@ (800cbc4 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800cb82:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cb86:	4b10      	ldr	r3, [pc, #64]	@ (800cbc8 <vTaskStartScheduler+0x90>)
 800cb88:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cb8a:	4b10      	ldr	r3, [pc, #64]	@ (800cbcc <vTaskStartScheduler+0x94>)
 800cb8c:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800cb8e:	4b10      	ldr	r3, [pc, #64]	@ (800cbd0 <vTaskStartScheduler+0x98>)
 800cb90:	6818      	ldr	r0, [r3, #0]
 800cb92:	f7ff ffc5 	bl	800cb20 <xTaskCallApplicationTaskHook>
}
 800cb96:	b008      	add	sp, #32
 800cb98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800cb9c:	f7fe bec2 	b.w	800b924 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cba0:	3001      	adds	r0, #1
 800cba2:	d108      	bne.n	800cbb6 <vTaskStartScheduler+0x7e>
 800cba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cba8:	f383 8811 	msr	BASEPRI, r3
 800cbac:	f3bf 8f6f 	isb	sy
 800cbb0:	f3bf 8f4f 	dsb	sy
 800cbb4:	e7fe      	b.n	800cbb4 <vTaskStartScheduler+0x7c>
}
 800cbb6:	b008      	add	sp, #32
 800cbb8:	bd10      	pop	{r4, pc}
 800cbba:	bf00      	nop
 800cbbc:	08023a58 	.word	0x08023a58
 800cbc0:	0800c705 	.word	0x0800c705
 800cbc4:	24024b28 	.word	0x24024b28
 800cbc8:	24024b3c 	.word	0x24024b3c
 800cbcc:	24024b44 	.word	0x24024b44
 800cbd0:	2402501c 	.word	0x2402501c

0800cbd4 <vTaskSwitchContext>:
{
 800cbd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cbd6:	4b1c      	ldr	r3, [pc, #112]	@ (800cc48 <vTaskSwitchContext+0x74>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	4b1c      	ldr	r3, [pc, #112]	@ (800cc4c <vTaskSwitchContext+0x78>)
 800cbdc:	b112      	cbz	r2, 800cbe4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800cbde:	2201      	movs	r2, #1
 800cbe0:	601a      	str	r2, [r3, #0]
}
 800cbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800cbe4:	4c1a      	ldr	r4, [pc, #104]	@ (800cc50 <vTaskSwitchContext+0x7c>)
 800cbe6:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbe8:	4e1a      	ldr	r6, [pc, #104]	@ (800cc54 <vTaskSwitchContext+0x80>)
 800cbea:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800cbec:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800cbee:	6820      	ldr	r0, [r4, #0]
 800cbf0:	f7ff ff96 	bl	800cb20 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbf4:	6832      	ldr	r2, [r6, #0]
 800cbf6:	4918      	ldr	r1, [pc, #96]	@ (800cc58 <vTaskSwitchContext+0x84>)
 800cbf8:	fb07 f302 	mul.w	r3, r7, r2
 800cbfc:	58cd      	ldr	r5, [r1, r3]
 800cbfe:	18c8      	adds	r0, r1, r3
 800cc00:	b1ad      	cbz	r5, 800cc2e <vTaskSwitchContext+0x5a>
 800cc02:	6845      	ldr	r5, [r0, #4]
 800cc04:	3308      	adds	r3, #8
 800cc06:	686d      	ldr	r5, [r5, #4]
 800cc08:	440b      	add	r3, r1
 800cc0a:	429d      	cmp	r5, r3
 800cc0c:	6045      	str	r5, [r0, #4]
 800cc0e:	bf04      	itt	eq
 800cc10:	686b      	ldreq	r3, [r5, #4]
 800cc12:	6043      	streq	r3, [r0, #4]
 800cc14:	2314      	movs	r3, #20
 800cc16:	fb03 1102 	mla	r1, r3, r2, r1
 800cc1a:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800cc1c:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	6023      	str	r3, [r4, #0]
 800cc22:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800cc24:	6820      	ldr	r0, [r4, #0]
}
 800cc26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800cc2a:	f7ff bf79 	b.w	800cb20 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc2e:	b942      	cbnz	r2, 800cc42 <vTaskSwitchContext+0x6e>
 800cc30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	e7fe      	b.n	800cc40 <vTaskSwitchContext+0x6c>
 800cc42:	3a01      	subs	r2, #1
 800cc44:	e7d8      	b.n	800cbf8 <vTaskSwitchContext+0x24>
 800cc46:	bf00      	nop
 800cc48:	24024b24 	.word	0x24024b24
 800cc4c:	24024b34 	.word	0x24024b34
 800cc50:	2402501c 	.word	0x2402501c
 800cc54:	24024b40 	.word	0x24024b40
 800cc58:	24024bbc 	.word	0x24024bbc

0800cc5c <vTaskPlaceOnEventList>:
{
 800cc5c:	b510      	push	{r4, lr}
 800cc5e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800cc60:	b940      	cbnz	r0, 800cc74 <vTaskPlaceOnEventList+0x18>
 800cc62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc66:	f383 8811 	msr	BASEPRI, r3
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	e7fe      	b.n	800cc72 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc74:	4b05      	ldr	r3, [pc, #20]	@ (800cc8c <vTaskPlaceOnEventList+0x30>)
 800cc76:	6819      	ldr	r1, [r3, #0]
 800cc78:	3118      	adds	r1, #24
 800cc7a:	f7fe fd3a 	bl	800b6f2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cc7e:	4620      	mov	r0, r4
 800cc80:	2101      	movs	r1, #1
}
 800cc82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cc86:	f7ff bcd7 	b.w	800c638 <prvAddCurrentTaskToDelayedList>
 800cc8a:	bf00      	nop
 800cc8c:	2402501c 	.word	0x2402501c

0800cc90 <vTaskPlaceOnEventListRestricted>:
	{
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	460d      	mov	r5, r1
 800cc94:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800cc96:	b940      	cbnz	r0, 800ccaa <vTaskPlaceOnEventListRestricted+0x1a>
 800cc98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc9c:	f383 8811 	msr	BASEPRI, r3
 800cca0:	f3bf 8f6f 	isb	sy
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	e7fe      	b.n	800cca8 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ccaa:	4b07      	ldr	r3, [pc, #28]	@ (800ccc8 <vTaskPlaceOnEventListRestricted+0x38>)
 800ccac:	6819      	ldr	r1, [r3, #0]
 800ccae:	3118      	adds	r1, #24
 800ccb0:	f7fe fd14 	bl	800b6dc <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800ccb4:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ccb6:	4621      	mov	r1, r4
 800ccb8:	bf0c      	ite	eq
 800ccba:	4628      	moveq	r0, r5
 800ccbc:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800ccc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ccc4:	f7ff bcb8 	b.w	800c638 <prvAddCurrentTaskToDelayedList>
 800ccc8:	2402501c 	.word	0x2402501c

0800cccc <xTaskRemoveFromEventList>:
{
 800cccc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccce:	68c3      	ldr	r3, [r0, #12]
 800ccd0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ccd2:	b944      	cbnz	r4, 800cce6 <xTaskRemoveFromEventList+0x1a>
 800ccd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd8:	f383 8811 	msr	BASEPRI, r3
 800ccdc:	f3bf 8f6f 	isb	sy
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	e7fe      	b.n	800cce4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cce6:	f104 0518 	add.w	r5, r4, #24
 800ccea:	4628      	mov	r0, r5
 800ccec:	f7fe fd18 	bl	800b720 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccf0:	4b11      	ldr	r3, [pc, #68]	@ (800cd38 <xTaskRemoveFromEventList+0x6c>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	b9d3      	cbnz	r3, 800cd2c <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ccf6:	1d25      	adds	r5, r4, #4
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	f7fe fd11 	bl	800b720 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ccfe:	4a0f      	ldr	r2, [pc, #60]	@ (800cd3c <xTaskRemoveFromEventList+0x70>)
 800cd00:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cd02:	6811      	ldr	r1, [r2, #0]
 800cd04:	428b      	cmp	r3, r1
 800cd06:	d900      	bls.n	800cd0a <xTaskRemoveFromEventList+0x3e>
 800cd08:	6013      	str	r3, [r2, #0]
 800cd0a:	2014      	movs	r0, #20
 800cd0c:	4a0c      	ldr	r2, [pc, #48]	@ (800cd40 <xTaskRemoveFromEventList+0x74>)
 800cd0e:	4629      	mov	r1, r5
 800cd10:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cd14:	f7fe fce2 	bl	800b6dc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd18:	4b0a      	ldr	r3, [pc, #40]	@ (800cd44 <xTaskRemoveFromEventList+0x78>)
 800cd1a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d906      	bls.n	800cd32 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800cd24:	2001      	movs	r0, #1
 800cd26:	4b08      	ldr	r3, [pc, #32]	@ (800cd48 <xTaskRemoveFromEventList+0x7c>)
 800cd28:	6018      	str	r0, [r3, #0]
}
 800cd2a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	4807      	ldr	r0, [pc, #28]	@ (800cd4c <xTaskRemoveFromEventList+0x80>)
 800cd30:	e7f0      	b.n	800cd14 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800cd32:	2000      	movs	r0, #0
	return xReturn;
 800cd34:	e7f9      	b.n	800cd2a <xTaskRemoveFromEventList+0x5e>
 800cd36:	bf00      	nop
 800cd38:	24024b24 	.word	0x24024b24
 800cd3c:	24024b40 	.word	0x24024b40
 800cd40:	24024bbc 	.word	0x24024bbc
 800cd44:	2402501c 	.word	0x2402501c
 800cd48:	24024b34 	.word	0x24024b34
 800cd4c:	24024b78 	.word	0x24024b78

0800cd50 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cd50:	4b03      	ldr	r3, [pc, #12]	@ (800cd60 <vTaskInternalSetTimeOutState+0x10>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cd56:	4b03      	ldr	r3, [pc, #12]	@ (800cd64 <vTaskInternalSetTimeOutState+0x14>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	6043      	str	r3, [r0, #4]
}
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	24024b30 	.word	0x24024b30
 800cd64:	24024b44 	.word	0x24024b44

0800cd68 <xTaskCheckForTimeOut>:
{
 800cd68:	b570      	push	{r4, r5, r6, lr}
 800cd6a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800cd6c:	4605      	mov	r5, r0
 800cd6e:	b940      	cbnz	r0, 800cd82 <xTaskCheckForTimeOut+0x1a>
 800cd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	e7fe      	b.n	800cd80 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800cd82:	b941      	cbnz	r1, 800cd96 <xTaskCheckForTimeOut+0x2e>
 800cd84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd88:	f383 8811 	msr	BASEPRI, r3
 800cd8c:	f3bf 8f6f 	isb	sy
 800cd90:	f3bf 8f4f 	dsb	sy
 800cd94:	e7fe      	b.n	800cd94 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800cd96:	f7fe fd35 	bl	800b804 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800cd9a:	4b0f      	ldr	r3, [pc, #60]	@ (800cdd8 <xTaskCheckForTimeOut+0x70>)
 800cd9c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800cd9e:	6823      	ldr	r3, [r4, #0]
 800cda0:	1c5a      	adds	r2, r3, #1
 800cda2:	d010      	beq.n	800cdc6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cda4:	480d      	ldr	r0, [pc, #52]	@ (800cddc <xTaskCheckForTimeOut+0x74>)
 800cda6:	682e      	ldr	r6, [r5, #0]
 800cda8:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cdaa:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cdac:	4286      	cmp	r6, r0
 800cdae:	d001      	beq.n	800cdb4 <xTaskCheckForTimeOut+0x4c>
 800cdb0:	428a      	cmp	r2, r1
 800cdb2:	d90f      	bls.n	800cdd4 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cdb4:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cdb6:	4283      	cmp	r3, r0
 800cdb8:	d90a      	bls.n	800cdd0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800cdba:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cdbc:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800cdbe:	4413      	add	r3, r2
 800cdc0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cdc2:	f7ff ffc5 	bl	800cd50 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800cdc6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800cdc8:	f7fe fd3c 	bl	800b844 <vPortExitCritical>
}
 800cdcc:	4620      	mov	r0, r4
 800cdce:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800cdd4:	2401      	movs	r4, #1
 800cdd6:	e7f7      	b.n	800cdc8 <xTaskCheckForTimeOut+0x60>
 800cdd8:	24024b44 	.word	0x24024b44
 800cddc:	24024b30 	.word	0x24024b30

0800cde0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800cde0:	4b01      	ldr	r3, [pc, #4]	@ (800cde8 <vTaskMissedYield+0x8>)
 800cde2:	2201      	movs	r2, #1
 800cde4:	601a      	str	r2, [r3, #0]
}
 800cde6:	4770      	bx	lr
 800cde8:	24024b34 	.word	0x24024b34

0800cdec <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800cdec:	4b01      	ldr	r3, [pc, #4]	@ (800cdf4 <xTaskGetCurrentTaskHandle+0x8>)
 800cdee:	6818      	ldr	r0, [r3, #0]
	}
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	2402501c 	.word	0x2402501c

0800cdf8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800cdf8:	4b05      	ldr	r3, [pc, #20]	@ (800ce10 <xTaskGetSchedulerState+0x18>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	b133      	cbz	r3, 800ce0c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdfe:	4b05      	ldr	r3, [pc, #20]	@ (800ce14 <xTaskGetSchedulerState+0x1c>)
 800ce00:	6818      	ldr	r0, [r3, #0]
 800ce02:	fab0 f080 	clz	r0, r0
 800ce06:	0940      	lsrs	r0, r0, #5
 800ce08:	0040      	lsls	r0, r0, #1
 800ce0a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ce0c:	2001      	movs	r0, #1
	}
 800ce0e:	4770      	bx	lr
 800ce10:	24024b3c 	.word	0x24024b3c
 800ce14:	24024b24 	.word	0x24024b24

0800ce18 <xTaskPriorityInherit>:
	{
 800ce18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	b338      	cbz	r0, 800ce6e <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ce1e:	4d1a      	ldr	r5, [pc, #104]	@ (800ce88 <xTaskPriorityInherit+0x70>)
 800ce20:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800ce22:	682a      	ldr	r2, [r5, #0]
 800ce24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d226      	bcs.n	800ce78 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ce2a:	6982      	ldr	r2, [r0, #24]
 800ce2c:	2a00      	cmp	r2, #0
 800ce2e:	db04      	blt.n	800ce3a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce30:	682a      	ldr	r2, [r5, #0]
 800ce32:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ce34:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800ce38:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ce3a:	2214      	movs	r2, #20
 800ce3c:	4e13      	ldr	r6, [pc, #76]	@ (800ce8c <xTaskPriorityInherit+0x74>)
 800ce3e:	fb02 6303 	mla	r3, r2, r3, r6
 800ce42:	6962      	ldr	r2, [r4, #20]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d113      	bne.n	800ce70 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce48:	1d27      	adds	r7, r4, #4
 800ce4a:	4638      	mov	r0, r7
 800ce4c:	f7fe fc68 	bl	800b720 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce50:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ce52:	4a0f      	ldr	r2, [pc, #60]	@ (800ce90 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ce56:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce58:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ce5a:	428b      	cmp	r3, r1
 800ce5c:	d900      	bls.n	800ce60 <xTaskPriorityInherit+0x48>
 800ce5e:	6013      	str	r3, [r2, #0]
 800ce60:	2014      	movs	r0, #20
 800ce62:	4639      	mov	r1, r7
 800ce64:	fb00 6003 	mla	r0, r0, r3, r6
 800ce68:	f7fe fc38 	bl	800b6dc <vListInsertEnd>
				xReturn = pdTRUE;
 800ce6c:	2001      	movs	r0, #1
	}
 800ce6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce70:	682b      	ldr	r3, [r5, #0]
 800ce72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ce76:	e7f9      	b.n	800ce6c <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ce78:	682b      	ldr	r3, [r5, #0]
 800ce7a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800ce7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce7e:	4298      	cmp	r0, r3
 800ce80:	bf2c      	ite	cs
 800ce82:	2000      	movcs	r0, #0
 800ce84:	2001      	movcc	r0, #1
 800ce86:	e7f2      	b.n	800ce6e <xTaskPriorityInherit+0x56>
 800ce88:	2402501c 	.word	0x2402501c
 800ce8c:	24024bbc 	.word	0x24024bbc
 800ce90:	24024b40 	.word	0x24024b40

0800ce94 <xTaskPriorityDisinherit>:
	{
 800ce94:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800ce96:	b908      	cbnz	r0, 800ce9c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800ce98:	2000      	movs	r0, #0
	}
 800ce9a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800ce9c:	4b1b      	ldr	r3, [pc, #108]	@ (800cf0c <xTaskPriorityDisinherit+0x78>)
 800ce9e:	681c      	ldr	r4, [r3, #0]
 800cea0:	4284      	cmp	r4, r0
 800cea2:	d008      	beq.n	800ceb6 <xTaskPriorityDisinherit+0x22>
 800cea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea8:	f383 8811 	msr	BASEPRI, r3
 800ceac:	f3bf 8f6f 	isb	sy
 800ceb0:	f3bf 8f4f 	dsb	sy
 800ceb4:	e7fe      	b.n	800ceb4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800ceb6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ceb8:	b943      	cbnz	r3, 800cecc <xTaskPriorityDisinherit+0x38>
 800ceba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cebe:	f383 8811 	msr	BASEPRI, r3
 800cec2:	f3bf 8f6f 	isb	sy
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	e7fe      	b.n	800ceca <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cecc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800cece:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ced0:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800ced2:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ced4:	4291      	cmp	r1, r2
 800ced6:	d0df      	beq.n	800ce98 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d1dd      	bne.n	800ce98 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cedc:	1d25      	adds	r5, r4, #4
 800cede:	4628      	mov	r0, r5
 800cee0:	f7fe fc1e 	bl	800b720 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cee4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cee6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ceea:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ceec:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800ceee:	4a08      	ldr	r2, [pc, #32]	@ (800cf10 <xTaskPriorityDisinherit+0x7c>)
 800cef0:	6811      	ldr	r1, [r2, #0]
 800cef2:	428b      	cmp	r3, r1
 800cef4:	d900      	bls.n	800cef8 <xTaskPriorityDisinherit+0x64>
 800cef6:	6013      	str	r3, [r2, #0]
 800cef8:	4a06      	ldr	r2, [pc, #24]	@ (800cf14 <xTaskPriorityDisinherit+0x80>)
 800cefa:	2014      	movs	r0, #20
 800cefc:	4629      	mov	r1, r5
 800cefe:	fb00 2003 	mla	r0, r0, r3, r2
 800cf02:	f7fe fbeb 	bl	800b6dc <vListInsertEnd>
					xReturn = pdTRUE;
 800cf06:	2001      	movs	r0, #1
		return xReturn;
 800cf08:	e7c7      	b.n	800ce9a <xTaskPriorityDisinherit+0x6>
 800cf0a:	bf00      	nop
 800cf0c:	2402501c 	.word	0x2402501c
 800cf10:	24024b40 	.word	0x24024b40
 800cf14:	24024bbc 	.word	0x24024bbc

0800cf18 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800cf18:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	d042      	beq.n	800cfa6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf20:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800cf22:	b942      	cbnz	r2, 800cf36 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800cf24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf28:	f383 8811 	msr	BASEPRI, r3
 800cf2c:	f3bf 8f6f 	isb	sy
 800cf30:	f3bf 8f4f 	dsb	sy
 800cf34:	e7fe      	b.n	800cf34 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cf36:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800cf38:	4299      	cmp	r1, r3
 800cf3a:	bf38      	it	cc
 800cf3c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cf3e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800cf40:	428b      	cmp	r3, r1
 800cf42:	d030      	beq.n	800cfa6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cf44:	2a01      	cmp	r2, #1
 800cf46:	d12e      	bne.n	800cfa6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800cf48:	4a17      	ldr	r2, [pc, #92]	@ (800cfa8 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800cf4a:	6812      	ldr	r2, [r2, #0]
 800cf4c:	4282      	cmp	r2, r0
 800cf4e:	d108      	bne.n	800cf62 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800cf50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf54:	f383 8811 	msr	BASEPRI, r3
 800cf58:	f3bf 8f6f 	isb	sy
 800cf5c:	f3bf 8f4f 	dsb	sy
 800cf60:	e7fe      	b.n	800cf60 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf62:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cf64:	4d11      	ldr	r5, [pc, #68]	@ (800cfac <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf66:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cf68:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800cf6c:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cf6e:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf72:	bfa8      	it	ge
 800cf74:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cf78:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf7a:	bfa8      	it	ge
 800cf7c:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d111      	bne.n	800cfa6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf82:	1d06      	adds	r6, r0, #4
 800cf84:	4630      	mov	r0, r6
 800cf86:	f7fe fbcb 	bl	800b720 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800cf8a:	4a09      	ldr	r2, [pc, #36]	@ (800cfb0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800cf8c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cf8e:	6811      	ldr	r1, [r2, #0]
 800cf90:	428b      	cmp	r3, r1
 800cf92:	d900      	bls.n	800cf96 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800cf94:	6013      	str	r3, [r2, #0]
 800cf96:	2014      	movs	r0, #20
 800cf98:	4631      	mov	r1, r6
 800cf9a:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800cf9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800cfa2:	f7fe bb9b 	b.w	800b6dc <vListInsertEnd>
	}
 800cfa6:	bd70      	pop	{r4, r5, r6, pc}
 800cfa8:	2402501c 	.word	0x2402501c
 800cfac:	24024bbc 	.word	0x24024bbc
 800cfb0:	24024b40 	.word	0x24024b40

0800cfb4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800cfb4:	4b04      	ldr	r3, [pc, #16]	@ (800cfc8 <pvTaskIncrementMutexHeldCount+0x14>)
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	b11a      	cbz	r2, 800cfc2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800cfba:	6819      	ldr	r1, [r3, #0]
 800cfbc:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800cfbe:	3201      	adds	r2, #1
 800cfc0:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800cfc2:	6818      	ldr	r0, [r3, #0]
	}
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	2402501c 	.word	0x2402501c

0800cfcc <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800cfcc:	4291      	cmp	r1, r2
{
 800cfce:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cfd0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cfd2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800cfd4:	d80a      	bhi.n	800cfec <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfd6:	1ad2      	subs	r2, r2, r3
 800cfd8:	6983      	ldr	r3, [r0, #24]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d20d      	bcs.n	800cffa <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cfde:	1d01      	adds	r1, r0, #4
 800cfe0:	4b07      	ldr	r3, [pc, #28]	@ (800d000 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfe2:	6818      	ldr	r0, [r3, #0]
 800cfe4:	f7fe fb85 	bl	800b6f2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800cfe8:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800cfea:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d201      	bcs.n	800cff4 <prvInsertTimerInActiveList+0x28>
 800cff0:	4299      	cmp	r1, r3
 800cff2:	d202      	bcs.n	800cffa <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cff4:	1d01      	adds	r1, r0, #4
 800cff6:	4b03      	ldr	r3, [pc, #12]	@ (800d004 <prvInsertTimerInActiveList+0x38>)
 800cff8:	e7f3      	b.n	800cfe2 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800cffa:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800cffc:	e7f5      	b.n	800cfea <prvInsertTimerInActiveList+0x1e>
 800cffe:	bf00      	nop
 800d000:	2402511c 	.word	0x2402511c
 800d004:	24025120 	.word	0x24025120

0800d008 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800d00a:	4c11      	ldr	r4, [pc, #68]	@ (800d050 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800d00c:	f7fe fbfa 	bl	800b804 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800d010:	6825      	ldr	r5, [r4, #0]
 800d012:	b9bd      	cbnz	r5, 800d044 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800d014:	4f0f      	ldr	r7, [pc, #60]	@ (800d054 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800d016:	4e10      	ldr	r6, [pc, #64]	@ (800d058 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800d018:	4638      	mov	r0, r7
 800d01a:	f7fe fb51 	bl	800b6c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d01e:	4630      	mov	r0, r6
 800d020:	f7fe fb4e 	bl	800b6c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d024:	4b0d      	ldr	r3, [pc, #52]	@ (800d05c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d026:	4a0e      	ldr	r2, [pc, #56]	@ (800d060 <prvCheckForValidListAndQueue+0x58>)
 800d028:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800d02a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d02c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800d02e:	4b0d      	ldr	r3, [pc, #52]	@ (800d064 <prvCheckForValidListAndQueue+0x5c>)
 800d030:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d032:	4b0d      	ldr	r3, [pc, #52]	@ (800d068 <prvCheckForValidListAndQueue+0x60>)
 800d034:	9500      	str	r5, [sp, #0]
 800d036:	f7fe fdef 	bl	800bc18 <xQueueGenericCreateStatic>
 800d03a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d03c:	b110      	cbz	r0, 800d044 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d03e:	490b      	ldr	r1, [pc, #44]	@ (800d06c <prvCheckForValidListAndQueue+0x64>)
 800d040:	f7ff fa1a 	bl	800c478 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800d044:	b003      	add	sp, #12
 800d046:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800d04a:	f7fe bbfb 	b.w	800b844 <vPortExitCritical>
 800d04e:	bf00      	nop
 800d050:	24025118 	.word	0x24025118
 800d054:	24025138 	.word	0x24025138
 800d058:	24025124 	.word	0x24025124
 800d05c:	24025120 	.word	0x24025120
 800d060:	24025070 	.word	0x24025070
 800d064:	2402511c 	.word	0x2402511c
 800d068:	24025020 	.word	0x24025020
 800d06c:	08023a5d 	.word	0x08023a5d

0800d070 <xTimerCreateTimerTask>:
{
 800d070:	b510      	push	{r4, lr}
 800d072:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800d074:	f7ff ffc8 	bl	800d008 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800d078:	4b12      	ldr	r3, [pc, #72]	@ (800d0c4 <xTimerCreateTimerTask+0x54>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	b1b3      	cbz	r3, 800d0ac <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d07e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d080:	aa07      	add	r2, sp, #28
 800d082:	a906      	add	r1, sp, #24
 800d084:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d086:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d08a:	f7fe fa11 	bl	800b4b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d08e:	9b05      	ldr	r3, [sp, #20]
 800d090:	9a07      	ldr	r2, [sp, #28]
 800d092:	9302      	str	r3, [sp, #8]
 800d094:	9b06      	ldr	r3, [sp, #24]
 800d096:	490c      	ldr	r1, [pc, #48]	@ (800d0c8 <xTimerCreateTimerTask+0x58>)
 800d098:	9301      	str	r3, [sp, #4]
 800d09a:	2302      	movs	r3, #2
 800d09c:	480b      	ldr	r0, [pc, #44]	@ (800d0cc <xTimerCreateTimerTask+0x5c>)
 800d09e:	9300      	str	r3, [sp, #0]
 800d0a0:	4623      	mov	r3, r4
 800d0a2:	f7ff fbae 	bl	800c802 <xTaskCreateStatic>
 800d0a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d0d0 <xTimerCreateTimerTask+0x60>)
 800d0a8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800d0aa:	b940      	cbnz	r0, 800d0be <xTimerCreateTimerTask+0x4e>
 800d0ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0b0:	f383 8811 	msr	BASEPRI, r3
 800d0b4:	f3bf 8f6f 	isb	sy
 800d0b8:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800d0bc:	e7fe      	b.n	800d0bc <xTimerCreateTimerTask+0x4c>
}
 800d0be:	2001      	movs	r0, #1
 800d0c0:	b008      	add	sp, #32
 800d0c2:	bd10      	pop	{r4, pc}
 800d0c4:	24025118 	.word	0x24025118
 800d0c8:	08023a62 	.word	0x08023a62
 800d0cc:	0800d1cd 	.word	0x0800d1cd
 800d0d0:	24025114 	.word	0x24025114

0800d0d4 <xTimerGenericCommand>:
{
 800d0d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d0d6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800d0d8:	4604      	mov	r4, r0
{
 800d0da:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800d0dc:	b940      	cbnz	r0, 800d0f0 <xTimerGenericCommand+0x1c>
 800d0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e2:	f383 8811 	msr	BASEPRI, r3
 800d0e6:	f3bf 8f6f 	isb	sy
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	e7fe      	b.n	800d0ee <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800d0f0:	4d0c      	ldr	r5, [pc, #48]	@ (800d124 <xTimerGenericCommand+0x50>)
 800d0f2:	6828      	ldr	r0, [r5, #0]
 800d0f4:	b178      	cbz	r0, 800d116 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d0f6:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d0f8:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d0fa:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d0fe:	dc0c      	bgt.n	800d11a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d100:	f7ff fe7a 	bl	800cdf8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d104:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d106:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d108:	4669      	mov	r1, sp
 800d10a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d10c:	bf0c      	ite	eq
 800d10e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d110:	461a      	movne	r2, r3
 800d112:	f7fe fe36 	bl	800bd82 <xQueueGenericSend>
}
 800d116:	b004      	add	sp, #16
 800d118:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d11a:	2300      	movs	r3, #0
 800d11c:	4669      	mov	r1, sp
 800d11e:	f7fe ff33 	bl	800bf88 <xQueueGenericSendFromISR>
 800d122:	e7f8      	b.n	800d116 <xTimerGenericCommand+0x42>
 800d124:	24025118 	.word	0x24025118

0800d128 <prvSampleTimeNow>:
{
 800d128:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800d12c:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800d1c8 <prvSampleTimeNow+0xa0>
{
 800d130:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800d132:	f7ff fbd5 	bl	800c8e0 <xTaskGetTickCount>
 800d136:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800d138:	f8d8 3000 	ldr.w	r3, [r8]
 800d13c:	4283      	cmp	r3, r0
 800d13e:	d909      	bls.n	800d154 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d140:	4f1f      	ldr	r7, [pc, #124]	@ (800d1c0 <prvSampleTimeNow+0x98>)
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	b96a      	cbnz	r2, 800d164 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800d148:	4a1e      	ldr	r2, [pc, #120]	@ (800d1c4 <prvSampleTimeNow+0x9c>)
 800d14a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d14c:	6013      	str	r3, [r2, #0]
 800d14e:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800d150:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800d152:	e000      	b.n	800d156 <prvSampleTimeNow+0x2e>
 800d154:	2300      	movs	r3, #0
}
 800d156:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800d158:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800d15a:	f8c8 5000 	str.w	r5, [r8]
}
 800d15e:	b002      	add	sp, #8
 800d160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d164:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d166:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d168:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d16c:	f104 0a04 	add.w	sl, r4, #4
 800d170:	4650      	mov	r0, sl
 800d172:	f7fe fad5 	bl	800b720 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d176:	6a23      	ldr	r3, [r4, #32]
 800d178:	4620      	mov	r0, r4
 800d17a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d17c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d180:	075b      	lsls	r3, r3, #29
 800d182:	d5de      	bpl.n	800d142 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d184:	69a3      	ldr	r3, [r4, #24]
 800d186:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800d188:	4599      	cmp	r9, r3
 800d18a:	d206      	bcs.n	800d19a <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d18c:	4651      	mov	r1, sl
 800d18e:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d190:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d192:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d194:	f7fe faad 	bl	800b6f2 <vListInsert>
 800d198:	e7d3      	b.n	800d142 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d19a:	2300      	movs	r3, #0
 800d19c:	464a      	mov	r2, r9
 800d19e:	4620      	mov	r0, r4
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	f7ff ff96 	bl	800d0d4 <xTimerGenericCommand>
				configASSERT( xResult );
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	d1ca      	bne.n	800d142 <prvSampleTimeNow+0x1a>
 800d1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1b0:	f383 8811 	msr	BASEPRI, r3
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	e7fe      	b.n	800d1bc <prvSampleTimeNow+0x94>
 800d1be:	bf00      	nop
 800d1c0:	24025120 	.word	0x24025120
 800d1c4:	2402511c 	.word	0x2402511c
 800d1c8:	24025110 	.word	0x24025110

0800d1cc <prvTimerTask>:
{
 800d1cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d1d0:	4d6e      	ldr	r5, [pc, #440]	@ (800d38c <prvTimerTask+0x1c0>)
{
 800d1d2:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d1d4:	4e6e      	ldr	r6, [pc, #440]	@ (800d390 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d1d6:	682b      	ldr	r3, [r5, #0]
 800d1d8:	f8d3 8000 	ldr.w	r8, [r3]
 800d1dc:	f1b8 0f00 	cmp.w	r8, #0
 800d1e0:	d035      	beq.n	800d24e <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d1e2:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d1e4:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d1e6:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800d1ea:	f7ff fb71 	bl	800c8d0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d1ee:	a804      	add	r0, sp, #16
 800d1f0:	f7ff ff9a 	bl	800d128 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800d1f4:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d1f6:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d169      	bne.n	800d2d0 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d1fc:	2c00      	cmp	r4, #0
 800d1fe:	d14c      	bne.n	800d29a <prvTimerTask+0xce>
 800d200:	4540      	cmp	r0, r8
 800d202:	d350      	bcc.n	800d2a6 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800d204:	f7ff fc08 	bl	800ca18 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d208:	682b      	ldr	r3, [r5, #0]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d20e:	1d38      	adds	r0, r7, #4
 800d210:	f7fe fa86 	bl	800b720 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d214:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d218:	0758      	lsls	r0, r3, #29
 800d21a:	d51a      	bpl.n	800d252 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d21c:	69b9      	ldr	r1, [r7, #24]
 800d21e:	4643      	mov	r3, r8
 800d220:	464a      	mov	r2, r9
 800d222:	4638      	mov	r0, r7
 800d224:	4441      	add	r1, r8
 800d226:	f7ff fed1 	bl	800cfcc <prvInsertTimerInActiveList>
 800d22a:	b1b0      	cbz	r0, 800d25a <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d22c:	4623      	mov	r3, r4
 800d22e:	4642      	mov	r2, r8
 800d230:	4621      	mov	r1, r4
 800d232:	4638      	mov	r0, r7
 800d234:	9400      	str	r4, [sp, #0]
 800d236:	f7ff ff4d 	bl	800d0d4 <xTimerGenericCommand>
			configASSERT( xResult );
 800d23a:	b970      	cbnz	r0, 800d25a <prvTimerTask+0x8e>
 800d23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d240:	f383 8811 	msr	BASEPRI, r3
 800d244:	f3bf 8f6f 	isb	sy
 800d248:	f3bf 8f4f 	dsb	sy
 800d24c:	e7fe      	b.n	800d24c <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d24e:	2401      	movs	r4, #1
 800d250:	e7cb      	b.n	800d1ea <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d252:	f023 0301 	bic.w	r3, r3, #1
 800d256:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d25a:	6a3b      	ldr	r3, [r7, #32]
 800d25c:	4638      	mov	r0, r7
 800d25e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d260:	2200      	movs	r2, #0
 800d262:	a904      	add	r1, sp, #16
 800d264:	6830      	ldr	r0, [r6, #0]
 800d266:	f7fe ff3d 	bl	800c0e4 <xQueueReceive>
 800d26a:	2800      	cmp	r0, #0
 800d26c:	d0b3      	beq.n	800d1d6 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d26e:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d270:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d272:	2b00      	cmp	r3, #0
 800d274:	db2f      	blt.n	800d2d6 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d276:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d278:	6963      	ldr	r3, [r4, #20]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d132      	bne.n	800d2e4 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d27e:	a803      	add	r0, sp, #12
 800d280:	f7ff ff52 	bl	800d128 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800d284:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d286:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800d288:	2b09      	cmp	r3, #9
 800d28a:	d8e9      	bhi.n	800d260 <prvTimerTask+0x94>
 800d28c:	e8df f003 	tbb	[pc, r3]
 800d290:	572e2e2e 	.word	0x572e2e2e
 800d294:	2e2e765e 	.word	0x2e2e765e
 800d298:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d29a:	4b3e      	ldr	r3, [pc, #248]	@ (800d394 <prvTimerTask+0x1c8>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	681c      	ldr	r4, [r3, #0]
 800d2a0:	fab4 f484 	clz	r4, r4
 800d2a4:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d2a6:	4622      	mov	r2, r4
 800d2a8:	eba8 0109 	sub.w	r1, r8, r9
 800d2ac:	6830      	ldr	r0, [r6, #0]
 800d2ae:	f7ff f922 	bl	800c4f6 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d2b2:	f7ff fbb1 	bl	800ca18 <xTaskResumeAll>
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	d1d2      	bne.n	800d260 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800d2ba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d2be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	f3bf 8f6f 	isb	sy
 800d2ce:	e7c7      	b.n	800d260 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800d2d0:	f7ff fba2 	bl	800ca18 <xTaskResumeAll>
}
 800d2d4:	e7c4      	b.n	800d260 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d2d6:	9b05      	ldr	r3, [sp, #20]
 800d2d8:	9907      	ldr	r1, [sp, #28]
 800d2da:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d2dc:	9b04      	ldr	r3, [sp, #16]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	dbbe      	blt.n	800d260 <prvTimerTask+0x94>
 800d2e2:	e7c8      	b.n	800d276 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2e4:	1d20      	adds	r0, r4, #4
 800d2e6:	f7fe fa1b 	bl	800b720 <uxListRemove>
 800d2ea:	e7c8      	b.n	800d27e <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d2ec:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d2f4:	f043 0301 	orr.w	r3, r3, #1
 800d2f8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d2fc:	9b05      	ldr	r3, [sp, #20]
 800d2fe:	4419      	add	r1, r3
 800d300:	f7ff fe64 	bl	800cfcc <prvInsertTimerInActiveList>
 800d304:	2800      	cmp	r0, #0
 800d306:	d0ab      	beq.n	800d260 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d308:	6a23      	ldr	r3, [r4, #32]
 800d30a:	4620      	mov	r0, r4
 800d30c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d30e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d312:	0759      	lsls	r1, r3, #29
 800d314:	d5a4      	bpl.n	800d260 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d316:	69a2      	ldr	r2, [r4, #24]
 800d318:	2300      	movs	r3, #0
 800d31a:	9905      	ldr	r1, [sp, #20]
 800d31c:	4620      	mov	r0, r4
 800d31e:	9300      	str	r3, [sp, #0]
 800d320:	440a      	add	r2, r1
 800d322:	4619      	mov	r1, r3
 800d324:	f7ff fed6 	bl	800d0d4 <xTimerGenericCommand>
							configASSERT( xResult );
 800d328:	2800      	cmp	r0, #0
 800d32a:	d199      	bne.n	800d260 <prvTimerTask+0x94>
 800d32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	e7fe      	b.n	800d33c <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d33e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d342:	f023 0301 	bic.w	r3, r3, #1
 800d346:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800d34a:	e789      	b.n	800d260 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d34c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d350:	f043 0301 	orr.w	r3, r3, #1
 800d354:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d358:	9905      	ldr	r1, [sp, #20]
 800d35a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d35c:	b941      	cbnz	r1, 800d370 <prvTimerTask+0x1a4>
 800d35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d362:	f383 8811 	msr	BASEPRI, r3
 800d366:	f3bf 8f6f 	isb	sy
 800d36a:	f3bf 8f4f 	dsb	sy
 800d36e:	e7fe      	b.n	800d36e <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d370:	4603      	mov	r3, r0
 800d372:	4401      	add	r1, r0
 800d374:	4620      	mov	r0, r4
 800d376:	f7ff fe29 	bl	800cfcc <prvInsertTimerInActiveList>
					break;
 800d37a:	e771      	b.n	800d260 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d37c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d380:	079a      	lsls	r2, r3, #30
 800d382:	d4de      	bmi.n	800d342 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800d384:	4620      	mov	r0, r4
 800d386:	f7fe f95d 	bl	800b644 <vPortFree>
 800d38a:	e769      	b.n	800d260 <prvTimerTask+0x94>
 800d38c:	24025120 	.word	0x24025120
 800d390:	24025118 	.word	0x24025118
 800d394:	2402511c 	.word	0x2402511c

0800d398 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800d398:	8880      	ldrh	r0, [r0, #4]
 800d39a:	4770      	bx	lr

0800d39c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800d39c:	b570      	push	{r4, r5, r6, lr}
 800d39e:	6803      	ldr	r3, [r0, #0]
 800d3a0:	460c      	mov	r4, r1
 800d3a2:	2100      	movs	r1, #0
 800d3a4:	4605      	mov	r5, r0
 800d3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3a8:	4798      	blx	r3
 800d3aa:	4606      	mov	r6, r0
 800d3ac:	682b      	ldr	r3, [r5, #0]
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	1ba4      	subs	r4, r4, r6
 800d3b2:	6a1b      	ldr	r3, [r3, #32]
 800d3b4:	b2a4      	uxth	r4, r4
 800d3b6:	4798      	blx	r3
 800d3b8:	fbb4 f0f0 	udiv	r0, r4, r0
 800d3bc:	bd70      	pop	{r4, r5, r6, pc}

0800d3be <_ZN8touchgfx17AbstractPartition5clearEv>:
 800d3be:	2300      	movs	r3, #0
 800d3c0:	8083      	strh	r3, [r0, #4]
 800d3c2:	4770      	bx	lr

0800d3c4 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800d3c4:	b510      	push	{r4, lr}
 800d3c6:	6803      	ldr	r3, [r0, #0]
 800d3c8:	4604      	mov	r4, r0
 800d3ca:	8881      	ldrh	r1, [r0, #4]
 800d3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3ce:	4798      	blx	r3
 800d3d0:	88a3      	ldrh	r3, [r4, #4]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	80a3      	strh	r3, [r4, #4]
 800d3d6:	bd10      	pop	{r4, pc}

0800d3d8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800d3d8:	6803      	ldr	r3, [r0, #0]
 800d3da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3dc:	4718      	bx	r3

0800d3de <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800d3de:	4770      	bx	lr

0800d3e0 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800d3e0:	4a02      	ldr	r2, [pc, #8]	@ (800d3ec <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800d3e2:	6002      	str	r2, [r0, #0]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	8082      	strh	r2, [r0, #4]
 800d3e8:	4770      	bx	lr
 800d3ea:	bf00      	nop
 800d3ec:	08023a74 	.word	0x08023a74

0800d3f0 <_ZN8touchgfx9Container13getFirstChildEv>:
 800d3f0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800d3f2:	4770      	bx	lr

0800d3f4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800d3f4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d3f6:	2000      	movs	r0, #0
 800d3f8:	b12b      	cbz	r3, 800d406 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d3fa:	b920      	cbnz	r0, 800d406 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d3fc:	1a5a      	subs	r2, r3, r1
 800d3fe:	699b      	ldr	r3, [r3, #24]
 800d400:	4250      	negs	r0, r2
 800d402:	4150      	adcs	r0, r2
 800d404:	e7f8      	b.n	800d3f8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800d406:	4770      	bx	lr

0800d408 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800d408:	2300      	movs	r3, #0
 800d40a:	6148      	str	r0, [r1, #20]
 800d40c:	618b      	str	r3, [r1, #24]
 800d40e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d410:	b913      	cbnz	r3, 800d418 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800d412:	6281      	str	r1, [r0, #40]	@ 0x28
 800d414:	4770      	bx	lr
 800d416:	4613      	mov	r3, r2
 800d418:	699a      	ldr	r2, [r3, #24]
 800d41a:	2a00      	cmp	r2, #0
 800d41c:	d1fb      	bne.n	800d416 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800d41e:	6199      	str	r1, [r3, #24]
 800d420:	4770      	bx	lr

0800d422 <_ZN8touchgfx9Container9removeAllEv>:
 800d422:	2200      	movs	r2, #0
 800d424:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d426:	b123      	cbz	r3, 800d432 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800d428:	6999      	ldr	r1, [r3, #24]
 800d42a:	6281      	str	r1, [r0, #40]	@ 0x28
 800d42c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800d430:	e7f8      	b.n	800d424 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800d432:	4770      	bx	lr

0800d434 <_ZN8touchgfx9Container6unlinkEv>:
 800d434:	2300      	movs	r3, #0
 800d436:	6283      	str	r3, [r0, #40]	@ 0x28
 800d438:	4770      	bx	lr

0800d43a <_ZNK8touchgfx9Container12getSolidRectEv>:
 800d43a:	2200      	movs	r2, #0
 800d43c:	8002      	strh	r2, [r0, #0]
 800d43e:	8042      	strh	r2, [r0, #2]
 800d440:	8082      	strh	r2, [r0, #4]
 800d442:	80c2      	strh	r2, [r0, #6]
 800d444:	4770      	bx	lr

0800d446 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800d446:	b570      	push	{r4, r5, r6, lr}
 800d448:	460d      	mov	r5, r1
 800d44a:	4616      	mov	r6, r2
 800d44c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d44e:	b13c      	cbz	r4, 800d460 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800d450:	6823      	ldr	r3, [r4, #0]
 800d452:	4620      	mov	r0, r4
 800d454:	4632      	mov	r2, r6
 800d456:	4629      	mov	r1, r5
 800d458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d45a:	4798      	blx	r3
 800d45c:	69a4      	ldr	r4, [r4, #24]
 800d45e:	e7f6      	b.n	800d44e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800d460:	bd70      	pop	{r4, r5, r6, pc}

0800d462 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800d462:	b538      	push	{r3, r4, r5, lr}
 800d464:	460d      	mov	r5, r1
 800d466:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d468:	b134      	cbz	r4, 800d478 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800d46a:	682b      	ldr	r3, [r5, #0]
 800d46c:	4621      	mov	r1, r4
 800d46e:	4628      	mov	r0, r5
 800d470:	689b      	ldr	r3, [r3, #8]
 800d472:	4798      	blx	r3
 800d474:	69a4      	ldr	r4, [r4, #24]
 800d476:	e7f7      	b.n	800d468 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800d478:	bd38      	pop	{r3, r4, r5, pc}

0800d47a <_ZN8touchgfx9ContainerD1Ev>:
 800d47a:	4770      	bx	lr

0800d47c <_ZN8touchgfx9ContainerD0Ev>:
 800d47c:	b510      	push	{r4, lr}
 800d47e:	4604      	mov	r4, r0
 800d480:	212c      	movs	r1, #44	@ 0x2c
 800d482:	f012 fac5 	bl	801fa10 <_ZdlPvj>
 800d486:	4620      	mov	r0, r4
 800d488:	bd10      	pop	{r4, pc}

0800d48a <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800d48a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d48c:	b19b      	cbz	r3, 800d4b6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d48e:	428b      	cmp	r3, r1
 800d490:	d109      	bne.n	800d4a6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800d492:	699a      	ldr	r2, [r3, #24]
 800d494:	2100      	movs	r1, #0
 800d496:	6159      	str	r1, [r3, #20]
 800d498:	6282      	str	r2, [r0, #40]	@ 0x28
 800d49a:	b902      	cbnz	r2, 800d49e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800d49c:	4770      	bx	lr
 800d49e:	6199      	str	r1, [r3, #24]
 800d4a0:	4770      	bx	lr
 800d4a2:	4613      	mov	r3, r2
 800d4a4:	b13a      	cbz	r2, 800d4b6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d4a6:	699a      	ldr	r2, [r3, #24]
 800d4a8:	428a      	cmp	r2, r1
 800d4aa:	d1fa      	bne.n	800d4a2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800d4ac:	698a      	ldr	r2, [r1, #24]
 800d4ae:	619a      	str	r2, [r3, #24]
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800d4b6:	4770      	bx	lr

0800d4b8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800d4b8:	b410      	push	{r4}
 800d4ba:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d4bc:	4604      	mov	r4, r0
 800d4be:	b92b      	cbnz	r3, 800d4cc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800d4c0:	6803      	ldr	r3, [r0, #0]
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4ca:	4718      	bx	r3
 800d4cc:	b941      	cbnz	r1, 800d4e0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800d4ce:	6193      	str	r3, [r2, #24]
 800d4d0:	6282      	str	r2, [r0, #40]	@ 0x28
 800d4d2:	6154      	str	r4, [r2, #20]
 800d4d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4d8:	4770      	bx	lr
 800d4da:	4603      	mov	r3, r0
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	d0f9      	beq.n	800d4d4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800d4e0:	4299      	cmp	r1, r3
 800d4e2:	6998      	ldr	r0, [r3, #24]
 800d4e4:	d1f9      	bne.n	800d4da <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800d4e6:	6190      	str	r0, [r2, #24]
 800d4e8:	618a      	str	r2, [r1, #24]
 800d4ea:	e7f2      	b.n	800d4d2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800d4ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800d4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f0:	461f      	mov	r7, r3
 800d4f2:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d4f6:	460d      	mov	r5, r1
 800d4f8:	4616      	mov	r6, r2
 800d4fa:	b103      	cbz	r3, 800d4fe <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800d4fc:	6038      	str	r0, [r7, #0]
 800d4fe:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d500:	b314      	cbz	r4, 800d548 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800d502:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800d506:	b1eb      	cbz	r3, 800d544 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d508:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d50c:	428d      	cmp	r5, r1
 800d50e:	db19      	blt.n	800d544 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d510:	b289      	uxth	r1, r1
 800d512:	8923      	ldrh	r3, [r4, #8]
 800d514:	440b      	add	r3, r1
 800d516:	b21b      	sxth	r3, r3
 800d518:	429d      	cmp	r5, r3
 800d51a:	da13      	bge.n	800d544 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d51c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d520:	4296      	cmp	r6, r2
 800d522:	db0f      	blt.n	800d544 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d524:	b292      	uxth	r2, r2
 800d526:	8963      	ldrh	r3, [r4, #10]
 800d528:	4413      	add	r3, r2
 800d52a:	b21b      	sxth	r3, r3
 800d52c:	429e      	cmp	r6, r3
 800d52e:	da09      	bge.n	800d544 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d530:	6823      	ldr	r3, [r4, #0]
 800d532:	1ab2      	subs	r2, r6, r2
 800d534:	1a69      	subs	r1, r5, r1
 800d536:	4620      	mov	r0, r4
 800d538:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800d53c:	b212      	sxth	r2, r2
 800d53e:	463b      	mov	r3, r7
 800d540:	b209      	sxth	r1, r1
 800d542:	47c0      	blx	r8
 800d544:	69a4      	ldr	r4, [r4, #24]
 800d546:	e7db      	b.n	800d500 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800d548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d54c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800d54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d550:	4c6d      	ldr	r4, [pc, #436]	@ (800d708 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800d552:	b0a1      	sub	sp, #132	@ 0x84
 800d554:	4606      	mov	r6, r0
 800d556:	6824      	ldr	r4, [r4, #0]
 800d558:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800d55a:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800d55e:	2400      	movs	r4, #0
 800d560:	9303      	str	r3, [sp, #12]
 800d562:	802c      	strh	r4, [r5, #0]
 800d564:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800d566:	802c      	strh	r4, [r5, #0]
 800d568:	601c      	str	r4, [r3, #0]
 800d56a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800d56e:	f7ff ffbd 	bl	800d4ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d572:	f1b9 0f03 	cmp.w	r9, #3
 800d576:	f340 80c1 	ble.w	800d6fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800d57a:	4631      	mov	r1, r6
 800d57c:	a80c      	add	r0, sp, #48	@ 0x30
 800d57e:	f006 fac1 	bl	8013b04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d582:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800d586:	9306      	str	r3, [sp, #24]
 800d588:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800d58c:	9307      	str	r3, [sp, #28]
 800d58e:	9b03      	ldr	r3, [sp, #12]
 800d590:	f8d3 a000 	ldr.w	sl, [r3]
 800d594:	f1ba 0f00 	cmp.w	sl, #0
 800d598:	f000 80b3 	beq.w	800d702 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800d59c:	4651      	mov	r1, sl
 800d59e:	a810      	add	r0, sp, #64	@ 0x40
 800d5a0:	f006 fab0 	bl	8013b04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d5a4:	2002      	movs	r0, #2
 800d5a6:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800d5aa:	9b01      	ldr	r3, [sp, #4]
 800d5ac:	9a06      	ldr	r2, [sp, #24]
 800d5ae:	fb91 f1f0 	sdiv	r1, r1, r0
 800d5b2:	189d      	adds	r5, r3, r2
 800d5b4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800d5b8:	9a07      	ldr	r2, [sp, #28]
 800d5ba:	4419      	add	r1, r3
 800d5bc:	9b02      	ldr	r3, [sp, #8]
 800d5be:	4413      	add	r3, r2
 800d5c0:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800d5c4:	1a6d      	subs	r5, r5, r1
 800d5c6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800d5ca:	fb92 f2f0 	sdiv	r2, r2, r0
 800d5ce:	440a      	add	r2, r1
 800d5d0:	1a9b      	subs	r3, r3, r2
 800d5d2:	435b      	muls	r3, r3
 800d5d4:	fb05 3505 	mla	r5, r5, r5, r3
 800d5d8:	4f4c      	ldr	r7, [pc, #304]	@ (800d70c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800d5da:	ac10      	add	r4, sp, #64	@ 0x40
 800d5dc:	f1b9 0f0c 	cmp.w	r9, #12
 800d5e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d5e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5e4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d5e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d5ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5ec:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800d5f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d5f4:	f04f 0303 	mov.w	r3, #3
 800d5f8:	bfd8      	it	le
 800d5fa:	f109 32ff 	addle.w	r2, r9, #4294967295
 800d5fe:	f04f 0400 	mov.w	r4, #0
 800d602:	f8cd 9000 	str.w	r9, [sp]
 800d606:	bfcc      	ite	gt
 800d608:	4698      	movgt	r8, r3
 800d60a:	fb92 f8f3 	sdivle	r8, r2, r3
 800d60e:	1c63      	adds	r3, r4, #1
 800d610:	aa10      	add	r2, sp, #64	@ 0x40
 800d612:	f004 0401 	and.w	r4, r4, #1
 800d616:	f04f 0b00 	mov.w	fp, #0
 800d61a:	9308      	str	r3, [sp, #32]
 800d61c:	9b00      	ldr	r3, [sp, #0]
 800d61e:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800d622:	fb93 f3f8 	sdiv	r3, r3, r8
 800d626:	3404      	adds	r4, #4
 800d628:	b29b      	uxth	r3, r3
 800d62a:	9304      	str	r3, [sp, #16]
 800d62c:	9a04      	ldr	r2, [sp, #16]
 800d62e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d632:	fb13 f302 	smulbb	r3, r3, r2
 800d636:	9a01      	ldr	r2, [sp, #4]
 800d638:	b29b      	uxth	r3, r3
 800d63a:	1899      	adds	r1, r3, r2
 800d63c:	9305      	str	r3, [sp, #20]
 800d63e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d642:	b209      	sxth	r1, r1
 800d644:	4299      	cmp	r1, r3
 800d646:	db4d      	blt.n	800d6e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d648:	8932      	ldrh	r2, [r6, #8]
 800d64a:	4413      	add	r3, r2
 800d64c:	b21b      	sxth	r3, r3
 800d64e:	4299      	cmp	r1, r3
 800d650:	da48      	bge.n	800d6e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d652:	9b04      	ldr	r3, [sp, #16]
 800d654:	6827      	ldr	r7, [r4, #0]
 800d656:	fb17 f703 	smulbb	r7, r7, r3
 800d65a:	9b02      	ldr	r3, [sp, #8]
 800d65c:	b2bf      	uxth	r7, r7
 800d65e:	18fa      	adds	r2, r7, r3
 800d660:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d664:	b212      	sxth	r2, r2
 800d666:	429a      	cmp	r2, r3
 800d668:	db3c      	blt.n	800d6e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d66a:	8970      	ldrh	r0, [r6, #10]
 800d66c:	4403      	add	r3, r0
 800d66e:	b21b      	sxth	r3, r3
 800d670:	429a      	cmp	r2, r3
 800d672:	da37      	bge.n	800d6e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d674:	2300      	movs	r3, #0
 800d676:	4630      	mov	r0, r6
 800d678:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d67a:	ab0b      	add	r3, sp, #44	@ 0x2c
 800d67c:	f7ff ff36 	bl	800d4ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d680:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d682:	b37a      	cbz	r2, 800d6e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d684:	4552      	cmp	r2, sl
 800d686:	d02d      	beq.n	800d6e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d688:	4611      	mov	r1, r2
 800d68a:	a80e      	add	r0, sp, #56	@ 0x38
 800d68c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d68e:	f006 fa39 	bl	8013b04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d692:	f04f 0e02 	mov.w	lr, #2
 800d696:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800d69a:	9a06      	ldr	r2, [sp, #24]
 800d69c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800d6a0:	9b01      	ldr	r3, [sp, #4]
 800d6a2:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800d6a6:	4413      	add	r3, r2
 800d6a8:	9a07      	ldr	r2, [sp, #28]
 800d6aa:	fb91 f1fe 	sdiv	r1, r1, lr
 800d6ae:	fb9c fcfe 	sdiv	ip, ip, lr
 800d6b2:	4401      	add	r1, r0
 800d6b4:	1a58      	subs	r0, r3, r1
 800d6b6:	9b02      	ldr	r3, [sp, #8]
 800d6b8:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800d6bc:	4413      	add	r3, r2
 800d6be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6c0:	448c      	add	ip, r1
 800d6c2:	eba3 030c 	sub.w	r3, r3, ip
 800d6c6:	435b      	muls	r3, r3
 800d6c8:	fb00 3300 	mla	r3, r0, r0, r3
 800d6cc:	42ab      	cmp	r3, r5
 800d6ce:	d208      	bcs.n	800d6e2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800d6d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d6d2:	461d      	mov	r5, r3
 800d6d4:	9803      	ldr	r0, [sp, #12]
 800d6d6:	6001      	str	r1, [r0, #0]
 800d6d8:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800d6da:	9805      	ldr	r0, [sp, #20]
 800d6dc:	8008      	strh	r0, [r1, #0]
 800d6de:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800d6e0:	800f      	strh	r7, [r1, #0]
 800d6e2:	4692      	mov	sl, r2
 800d6e4:	f10b 0b01 	add.w	fp, fp, #1
 800d6e8:	3408      	adds	r4, #8
 800d6ea:	f1bb 0f04 	cmp.w	fp, #4
 800d6ee:	d19d      	bne.n	800d62c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800d6f0:	9b00      	ldr	r3, [sp, #0]
 800d6f2:	9c08      	ldr	r4, [sp, #32]
 800d6f4:	444b      	add	r3, r9
 800d6f6:	4544      	cmp	r4, r8
 800d6f8:	9300      	str	r3, [sp, #0]
 800d6fa:	d188      	bne.n	800d60e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800d6fc:	b021      	add	sp, #132	@ 0x84
 800d6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d702:	f04f 35ff 	mov.w	r5, #4294967295
 800d706:	e767      	b.n	800d5d8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800d708:	24025158 	.word	0x24025158
 800d70c:	0802127c 	.word	0x0802127c

0800d710 <_ZN8touchgfx4RectaNERKS0_>:
 800d710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d714:	f9b1 7000 	ldrsh.w	r7, [r1]
 800d718:	888c      	ldrh	r4, [r1, #4]
 800d71a:	f9b0 9000 	ldrsh.w	r9, [r0]
 800d71e:	443c      	add	r4, r7
 800d720:	b2a4      	uxth	r4, r4
 800d722:	fa0f f884 	sxth.w	r8, r4
 800d726:	45c1      	cmp	r9, r8
 800d728:	da2f      	bge.n	800d78a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d72a:	8882      	ldrh	r2, [r0, #4]
 800d72c:	444a      	add	r2, r9
 800d72e:	b292      	uxth	r2, r2
 800d730:	fa0f fe82 	sxth.w	lr, r2
 800d734:	4577      	cmp	r7, lr
 800d736:	da28      	bge.n	800d78a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d738:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800d73c:	88cb      	ldrh	r3, [r1, #6]
 800d73e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800d742:	442b      	add	r3, r5
 800d744:	b21b      	sxth	r3, r3
 800d746:	429e      	cmp	r6, r3
 800d748:	da1f      	bge.n	800d78a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d74a:	88c3      	ldrh	r3, [r0, #6]
 800d74c:	4433      	add	r3, r6
 800d74e:	b29b      	uxth	r3, r3
 800d750:	fa0f fc83 	sxth.w	ip, r3
 800d754:	4565      	cmp	r5, ip
 800d756:	da18      	bge.n	800d78a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d758:	454f      	cmp	r7, r9
 800d75a:	bfb8      	it	lt
 800d75c:	464f      	movlt	r7, r9
 800d75e:	42b5      	cmp	r5, r6
 800d760:	bfb8      	it	lt
 800d762:	4635      	movlt	r5, r6
 800d764:	45f0      	cmp	r8, lr
 800d766:	bfd8      	it	le
 800d768:	4622      	movle	r2, r4
 800d76a:	1bd2      	subs	r2, r2, r7
 800d76c:	8082      	strh	r2, [r0, #4]
 800d76e:	884a      	ldrh	r2, [r1, #2]
 800d770:	88c9      	ldrh	r1, [r1, #6]
 800d772:	8007      	strh	r7, [r0, #0]
 800d774:	440a      	add	r2, r1
 800d776:	8045      	strh	r5, [r0, #2]
 800d778:	b292      	uxth	r2, r2
 800d77a:	b211      	sxth	r1, r2
 800d77c:	458c      	cmp	ip, r1
 800d77e:	bfa8      	it	ge
 800d780:	4613      	movge	r3, r2
 800d782:	1b5b      	subs	r3, r3, r5
 800d784:	80c3      	strh	r3, [r0, #6]
 800d786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d78a:	2300      	movs	r3, #0
 800d78c:	8003      	strh	r3, [r0, #0]
 800d78e:	8043      	strh	r3, [r0, #2]
 800d790:	8083      	strh	r3, [r0, #4]
 800d792:	80c3      	strh	r3, [r0, #6]
 800d794:	e7f7      	b.n	800d786 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800d796 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800d796:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	dd06      	ble.n	800d7ac <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800d79e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	bfcc      	ite	gt
 800d7a6:	2000      	movgt	r0, #0
 800d7a8:	2001      	movle	r0, #1
 800d7aa:	4770      	bx	lr
 800d7ac:	2001      	movs	r0, #1
 800d7ae:	4770      	bx	lr

0800d7b0 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800d7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	4604      	mov	r4, r0
 800d7b8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800d7ba:	8003      	strh	r3, [r0, #0]
 800d7bc:	8043      	strh	r3, [r0, #2]
 800d7be:	8083      	strh	r3, [r0, #4]
 800d7c0:	80c3      	strh	r3, [r0, #6]
 800d7c2:	2d00      	cmp	r5, #0
 800d7c4:	d040      	beq.n	800d848 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800d7c6:	1d28      	adds	r0, r5, #4
 800d7c8:	f7ff ffe5 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d7cc:	b988      	cbnz	r0, 800d7f2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	f7ff ffe1 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d7d4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800d7d8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d7dc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800d7e0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800d7e4:	b138      	cbz	r0, 800d7f6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800d7e6:	8022      	strh	r2, [r4, #0]
 800d7e8:	8063      	strh	r3, [r4, #2]
 800d7ea:	f8a4 e004 	strh.w	lr, [r4, #4]
 800d7ee:	f8a4 c006 	strh.w	ip, [r4, #6]
 800d7f2:	69ad      	ldr	r5, [r5, #24]
 800d7f4:	e7e5      	b.n	800d7c2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800d7f6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800d7fa:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800d7fe:	4290      	cmp	r0, r2
 800d800:	4607      	mov	r7, r0
 800d802:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800d806:	460e      	mov	r6, r1
 800d808:	bfa8      	it	ge
 800d80a:	4617      	movge	r7, r2
 800d80c:	4299      	cmp	r1, r3
 800d80e:	4472      	add	r2, lr
 800d810:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800d814:	bfa8      	it	ge
 800d816:	461e      	movge	r6, r3
 800d818:	4440      	add	r0, r8
 800d81a:	4471      	add	r1, lr
 800d81c:	4463      	add	r3, ip
 800d81e:	b200      	sxth	r0, r0
 800d820:	8027      	strh	r7, [r4, #0]
 800d822:	b212      	sxth	r2, r2
 800d824:	8066      	strh	r6, [r4, #2]
 800d826:	b209      	sxth	r1, r1
 800d828:	b21b      	sxth	r3, r3
 800d82a:	4290      	cmp	r0, r2
 800d82c:	bfac      	ite	ge
 800d82e:	ebc7 0200 	rsbge	r2, r7, r0
 800d832:	ebc7 0202 	rsblt	r2, r7, r2
 800d836:	4299      	cmp	r1, r3
 800d838:	bfac      	ite	ge
 800d83a:	ebc6 0301 	rsbge	r3, r6, r1
 800d83e:	ebc6 0303 	rsblt	r3, r6, r3
 800d842:	80a2      	strh	r2, [r4, #4]
 800d844:	80e3      	strh	r3, [r4, #6]
 800d846:	e7d4      	b.n	800d7f2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d848:	4620      	mov	r0, r4
 800d84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d84e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800d84e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d852:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800d856:	b383      	cbz	r3, 800d8ba <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d858:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d85a:	b374      	cbz	r4, 800d8ba <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d85c:	f9b1 5000 	ldrsh.w	r5, [r1]
 800d860:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800d864:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800d868:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800d86c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800d870:	b303      	cbz	r3, 800d8b4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d872:	4668      	mov	r0, sp
 800d874:	1d21      	adds	r1, r4, #4
 800d876:	f8ad 5000 	strh.w	r5, [sp]
 800d87a:	f8ad 6002 	strh.w	r6, [sp, #2]
 800d87e:	f8ad 7004 	strh.w	r7, [sp, #4]
 800d882:	f8ad 8006 	strh.w	r8, [sp, #6]
 800d886:	f7ff ff43 	bl	800d710 <_ZN8touchgfx4RectaNERKS0_>
 800d88a:	4668      	mov	r0, sp
 800d88c:	f7ff ff83 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d890:	b980      	cbnz	r0, 800d8b4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d892:	f8bd 3000 	ldrh.w	r3, [sp]
 800d896:	4669      	mov	r1, sp
 800d898:	88a2      	ldrh	r2, [r4, #4]
 800d89a:	4620      	mov	r0, r4
 800d89c:	1a9b      	subs	r3, r3, r2
 800d89e:	88e2      	ldrh	r2, [r4, #6]
 800d8a0:	f8ad 3000 	strh.w	r3, [sp]
 800d8a4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d8a8:	1a9b      	subs	r3, r3, r2
 800d8aa:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d8ae:	6823      	ldr	r3, [r4, #0]
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	4798      	blx	r3
 800d8b4:	69a4      	ldr	r4, [r4, #24]
 800d8b6:	2c00      	cmp	r4, #0
 800d8b8:	d1d8      	bne.n	800d86c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800d8ba:	b002      	add	sp, #8
 800d8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d8c0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800d8c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8c2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800d8c6:	460d      	mov	r5, r1
 800d8c8:	4616      	mov	r6, r2
 800d8ca:	b323      	cbz	r3, 800d916 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d8cc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d8ce:	b314      	cbz	r4, 800d916 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d8d0:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800d8d4:	b1eb      	cbz	r3, 800d912 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800d8d6:	6828      	ldr	r0, [r5, #0]
 800d8d8:	466b      	mov	r3, sp
 800d8da:	6869      	ldr	r1, [r5, #4]
 800d8dc:	c303      	stmia	r3!, {r0, r1}
 800d8de:	4668      	mov	r0, sp
 800d8e0:	1d21      	adds	r1, r4, #4
 800d8e2:	f7ff ff15 	bl	800d710 <_ZN8touchgfx4RectaNERKS0_>
 800d8e6:	4668      	mov	r0, sp
 800d8e8:	f7ff ff55 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d8ec:	b988      	cbnz	r0, 800d912 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800d8ee:	f8bd 3000 	ldrh.w	r3, [sp]
 800d8f2:	4669      	mov	r1, sp
 800d8f4:	88a2      	ldrh	r2, [r4, #4]
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	1a9b      	subs	r3, r3, r2
 800d8fa:	88e2      	ldrh	r2, [r4, #6]
 800d8fc:	f8ad 3000 	strh.w	r3, [sp]
 800d900:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d904:	1a9b      	subs	r3, r3, r2
 800d906:	4632      	mov	r2, r6
 800d908:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d90c:	6823      	ldr	r3, [r4, #0]
 800d90e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d910:	4798      	blx	r3
 800d912:	69a4      	ldr	r4, [r4, #24]
 800d914:	e7db      	b.n	800d8ce <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800d916:	b002      	add	sp, #8
 800d918:	bd70      	pop	{r4, r5, r6, pc}

0800d91a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800d91a:	6803      	ldr	r3, [r0, #0]
 800d91c:	b513      	push	{r0, r1, r4, lr}
 800d91e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800d922:	2300      	movs	r3, #0
 800d924:	e9cd 3300 	strd	r3, r3, [sp]
 800d928:	466b      	mov	r3, sp
 800d92a:	47a0      	blx	r4
 800d92c:	b002      	add	sp, #8
 800d92e:	bd10      	pop	{r4, pc}

0800d930 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800d930:	2301      	movs	r3, #1
 800d932:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800d936:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800d93a:	4770      	bx	lr

0800d93c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800d93c:	2301      	movs	r3, #1
 800d93e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800d942:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800d946:	4770      	bx	lr

0800d948 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800d948:	6843      	ldr	r3, [r0, #4]
 800d94a:	2201      	movs	r2, #1
 800d94c:	725a      	strb	r2, [r3, #9]
 800d94e:	6840      	ldr	r0, [r0, #4]
 800d950:	6803      	ldr	r3, [r0, #0]
 800d952:	691b      	ldr	r3, [r3, #16]
 800d954:	4718      	bx	r3

0800d956 <_ZN8touchgfx3HAL8flushDMAEv>:
 800d956:	6840      	ldr	r0, [r0, #4]
 800d958:	6803      	ldr	r3, [r0, #0]
 800d95a:	689b      	ldr	r3, [r3, #8]
 800d95c:	4718      	bx	r3

0800d95e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800d95e:	b530      	push	{r4, r5, lr}
 800d960:	b08b      	sub	sp, #44	@ 0x2c
 800d962:	6804      	ldr	r4, [r0, #0]
 800d964:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800d968:	9509      	str	r5, [sp, #36]	@ 0x24
 800d96a:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800d96e:	9508      	str	r5, [sp, #32]
 800d970:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800d974:	9507      	str	r5, [sp, #28]
 800d976:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800d97a:	9506      	str	r5, [sp, #24]
 800d97c:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800d980:	9505      	str	r5, [sp, #20]
 800d982:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800d986:	9504      	str	r5, [sp, #16]
 800d988:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800d98c:	9503      	str	r5, [sp, #12]
 800d98e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800d992:	9502      	str	r5, [sp, #8]
 800d994:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800d998:	e9cd 3500 	strd	r3, r5, [sp]
 800d99c:	4613      	mov	r3, r2
 800d99e:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	47a0      	blx	r4
 800d9a4:	b00b      	add	sp, #44	@ 0x2c
 800d9a6:	bd30      	pop	{r4, r5, pc}

0800d9a8 <_ZN8touchgfx3HAL10beginFrameEv>:
 800d9a8:	4b04      	ldr	r3, [pc, #16]	@ (800d9bc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	b123      	cbz	r3, 800d9b8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800d9ae:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800d9b2:	f080 0001 	eor.w	r0, r0, #1
 800d9b6:	4770      	bx	lr
 800d9b8:	2001      	movs	r0, #1
 800d9ba:	4770      	bx	lr
 800d9bc:	24025156 	.word	0x24025156

0800d9c0 <_ZN8touchgfx3HAL8endFrameEv>:
 800d9c0:	b510      	push	{r4, lr}
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	6840      	ldr	r0, [r0, #4]
 800d9c6:	6803      	ldr	r3, [r0, #0]
 800d9c8:	689b      	ldr	r3, [r3, #8]
 800d9ca:	4798      	blx	r3
 800d9cc:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800d9d0:	b113      	cbz	r3, 800d9d8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800d9d8:	bd10      	pop	{r4, pc}

0800d9da <_ZN8touchgfx3HAL10initializeEv>:
 800d9da:	b510      	push	{r4, lr}
 800d9dc:	4604      	mov	r4, r0
 800d9de:	f7f4 ffc9 	bl	8002974 <_ZN8touchgfx10OSWrappers10initializeEv>
 800d9e2:	f7f4 f81f 	bl	8001a24 <_ZN8touchgfx4GPIO4initEv>
 800d9e6:	6860      	ldr	r0, [r4, #4]
 800d9e8:	6803      	ldr	r3, [r0, #0]
 800d9ea:	68db      	ldr	r3, [r3, #12]
 800d9ec:	4798      	blx	r3
 800d9ee:	68e0      	ldr	r0, [r4, #12]
 800d9f0:	6803      	ldr	r3, [r0, #0]
 800d9f2:	689b      	ldr	r3, [r3, #8]
 800d9f4:	4798      	blx	r3
 800d9f6:	6823      	ldr	r3, [r4, #0]
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da00:	4718      	bx	r3
	...

0800da04 <_ZN8touchgfx3HAL4tickEv>:
 800da04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800da06:	6803      	ldr	r3, [r0, #0]
 800da08:	4604      	mov	r4, r0
 800da0a:	4d5b      	ldr	r5, [pc, #364]	@ (800db78 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800da0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800da10:	4798      	blx	r3
 800da12:	2800      	cmp	r0, #0
 800da14:	f000 8095 	beq.w	800db42 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800da18:	2001      	movs	r0, #1
 800da1a:	2600      	movs	r6, #0
 800da1c:	f7f3 ff68 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800da20:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800da24:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800da28:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800da2c:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800da30:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800da34:	b133      	cbz	r3, 800da44 <_ZN8touchgfx3HAL4tickEv+0x40>
 800da36:	6823      	ldr	r3, [r4, #0]
 800da38:	4620      	mov	r0, r4
 800da3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800da3e:	4798      	blx	r3
 800da40:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800da44:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800da48:	2601      	movs	r6, #1
 800da4a:	6862      	ldr	r2, [r4, #4]
 800da4c:	f083 0301 	eor.w	r3, r3, #1
 800da50:	702e      	strb	r6, [r5, #0]
 800da52:	7253      	strb	r3, [r2, #9]
 800da54:	f004 ff42 	bl	80128dc <_ZN8touchgfx11Application11getInstanceEv>
 800da58:	6803      	ldr	r3, [r0, #0]
 800da5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da5c:	4798      	blx	r3
 800da5e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800da62:	b90b      	cbnz	r3, 800da68 <_ZN8touchgfx3HAL4tickEv+0x64>
 800da64:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800da68:	f004 ff38 	bl	80128dc <_ZN8touchgfx11Application11getInstanceEv>
 800da6c:	6803      	ldr	r3, [r0, #0]
 800da6e:	695b      	ldr	r3, [r3, #20]
 800da70:	4798      	blx	r3
 800da72:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800da74:	6803      	ldr	r3, [r0, #0]
 800da76:	691b      	ldr	r3, [r3, #16]
 800da78:	4798      	blx	r3
 800da7a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800da7e:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800da82:	3b01      	subs	r3, #1
 800da84:	b2db      	uxtb	r3, r3
 800da86:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800da8a:	b10a      	cbz	r2, 800da90 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d1eb      	bne.n	800da68 <_ZN8touchgfx3HAL4tickEv+0x64>
 800da90:	4a3a      	ldr	r2, [pc, #232]	@ (800db7c <_ZN8touchgfx3HAL4tickEv+0x178>)
 800da92:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800da96:	7813      	ldrb	r3, [r2, #0]
 800da98:	3301      	adds	r3, #1
 800da9a:	b25b      	sxtb	r3, r3
 800da9c:	4299      	cmp	r1, r3
 800da9e:	7013      	strb	r3, [r2, #0]
 800daa0:	dc10      	bgt.n	800dac4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800daa2:	2300      	movs	r3, #0
 800daa4:	68e0      	ldr	r0, [r4, #12]
 800daa6:	a902      	add	r1, sp, #8
 800daa8:	7013      	strb	r3, [r2, #0]
 800daaa:	aa03      	add	r2, sp, #12
 800daac:	6803      	ldr	r3, [r0, #0]
 800daae:	68db      	ldr	r3, [r3, #12]
 800dab0:	4798      	blx	r3
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	2800      	cmp	r0, #0
 800dab6:	d050      	beq.n	800db5a <_ZN8touchgfx3HAL4tickEv+0x156>
 800dab8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800dabc:	4620      	mov	r0, r4
 800dabe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800dac2:	4798      	blx	r3
 800dac4:	2300      	movs	r3, #0
 800dac6:	6960      	ldr	r0, [r4, #20]
 800dac8:	f88d 3007 	strb.w	r3, [sp, #7]
 800dacc:	b158      	cbz	r0, 800dae6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800dace:	6803      	ldr	r3, [r0, #0]
 800dad0:	f10d 0107 	add.w	r1, sp, #7
 800dad4:	68db      	ldr	r3, [r3, #12]
 800dad6:	4798      	blx	r3
 800dad8:	b128      	cbz	r0, 800dae6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800dada:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800dadc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800dae0:	6803      	ldr	r3, [r0, #0]
 800dae2:	68db      	ldr	r3, [r3, #12]
 800dae4:	4798      	blx	r3
 800dae6:	f104 001c 	add.w	r0, r4, #28
 800daea:	f011 f975 	bl	801edd8 <_ZN8touchgfx8Gestures4tickEv>
 800daee:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800daf2:	b30b      	cbz	r3, 800db38 <_ZN8touchgfx3HAL4tickEv+0x134>
 800daf4:	6920      	ldr	r0, [r4, #16]
 800daf6:	6803      	ldr	r3, [r0, #0]
 800daf8:	691b      	ldr	r3, [r3, #16]
 800dafa:	4798      	blx	r3
 800dafc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800dafe:	4606      	mov	r6, r0
 800db00:	b903      	cbnz	r3, 800db04 <_ZN8touchgfx3HAL4tickEv+0x100>
 800db02:	6760      	str	r0, [r4, #116]	@ 0x74
 800db04:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800db06:	4a1e      	ldr	r2, [pc, #120]	@ (800db80 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800db08:	1af3      	subs	r3, r6, r3
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d914      	bls.n	800db38 <_ZN8touchgfx3HAL4tickEv+0x134>
 800db0e:	6920      	ldr	r0, [r4, #16]
 800db10:	6803      	ldr	r3, [r0, #0]
 800db12:	699b      	ldr	r3, [r3, #24]
 800db14:	4798      	blx	r3
 800db16:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800db18:	2264      	movs	r2, #100	@ 0x64
 800db1a:	1af3      	subs	r3, r6, r3
 800db1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800db20:	fbb0 f0f3 	udiv	r0, r0, r3
 800db24:	2800      	cmp	r0, #0
 800db26:	dc1d      	bgt.n	800db64 <_ZN8touchgfx3HAL4tickEv+0x160>
 800db28:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800db2c:	6920      	ldr	r0, [r4, #16]
 800db2e:	2100      	movs	r1, #0
 800db30:	6803      	ldr	r3, [r0, #0]
 800db32:	69db      	ldr	r3, [r3, #28]
 800db34:	4798      	blx	r3
 800db36:	6766      	str	r6, [r4, #116]	@ 0x74
 800db38:	f004 fed0 	bl	80128dc <_ZN8touchgfx11Application11getInstanceEv>
 800db3c:	6803      	ldr	r3, [r0, #0]
 800db3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db40:	4798      	blx	r3
 800db42:	6823      	ldr	r3, [r4, #0]
 800db44:	4620      	mov	r0, r4
 800db46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800db4a:	4798      	blx	r3
 800db4c:	2001      	movs	r0, #1
 800db4e:	f7f3 feff 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800db52:	2300      	movs	r3, #0
 800db54:	702b      	strb	r3, [r5, #0]
 800db56:	b004      	add	sp, #16
 800db58:	bd70      	pop	{r4, r5, r6, pc}
 800db5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800db5e:	4620      	mov	r0, r4
 800db60:	4798      	blx	r3
 800db62:	e7af      	b.n	800dac4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800db64:	2863      	cmp	r0, #99	@ 0x63
 800db66:	bfcb      	itete	gt
 800db68:	2300      	movgt	r3, #0
 800db6a:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800db6e:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800db72:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800db76:	e7d9      	b.n	800db2c <_ZN8touchgfx3HAL4tickEv+0x128>
 800db78:	2402515c 	.word	0x2402515c
 800db7c:	2402515d 	.word	0x2402515d
 800db80:	05f5e100 	.word	0x05f5e100

0800db84 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800db84:	b510      	push	{r4, lr}
 800db86:	4604      	mov	r4, r0
 800db88:	f7f4 ff24 	bl	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800db8c:	2200      	movs	r2, #0
 800db8e:	6863      	ldr	r3, [r4, #4]
 800db90:	729a      	strb	r2, [r3, #10]
 800db92:	bd10      	pop	{r4, pc}

0800db94 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800db94:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800db96:	301c      	adds	r0, #28
 800db98:	f011 b91c 	b.w	801edd4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800db9c <_ZN8touchgfx3HAL5touchEll>:
 800db9c:	b530      	push	{r4, r5, lr}
 800db9e:	b087      	sub	sp, #28
 800dba0:	4604      	mov	r4, r0
 800dba2:	a804      	add	r0, sp, #16
 800dba4:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800dba8:	f004 fc80 	bl	80124ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800dbac:	9b04      	ldr	r3, [sp, #16]
 800dbae:	a906      	add	r1, sp, #24
 800dbb0:	a803      	add	r0, sp, #12
 800dbb2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dbb6:	9b05      	ldr	r3, [sp, #20]
 800dbb8:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800dbbc:	f004 fcc8 	bl	8012550 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800dbc0:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800dbc4:	f104 001c 	add.w	r0, r4, #28
 800dbc8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800dbcc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800dbd0:	b189      	cbz	r1, 800dbf6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800dbd2:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800dbd6:	9300      	str	r3, [sp, #0]
 800dbd8:	4613      	mov	r3, r2
 800dbda:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800dbde:	462a      	mov	r2, r5
 800dbe0:	f011 f908 	bl	801edf4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800dbe4:	b128      	cbz	r0, 800dbf2 <_ZN8touchgfx3HAL5touchEll+0x56>
 800dbe6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800dbea:	6623      	str	r3, [r4, #96]	@ 0x60
 800dbec:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800dbf0:	6663      	str	r3, [r4, #100]	@ 0x64
 800dbf2:	b007      	add	sp, #28
 800dbf4:	bd30      	pop	{r4, r5, pc}
 800dbf6:	f011 f93d 	bl	801ee74 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800dc00:	e7f1      	b.n	800dbe6 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800dc02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800dc02:	b510      	push	{r4, lr}
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d046      	beq.n	800dc96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800dc08:	ea81 0002 	eor.w	r0, r1, r2
 800dc0c:	07c4      	lsls	r4, r0, #31
 800dc0e:	d508      	bpl.n	800dc22 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800dc10:	440b      	add	r3, r1
 800dc12:	3a01      	subs	r2, #1
 800dc14:	428b      	cmp	r3, r1
 800dc16:	d93e      	bls.n	800dc96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800dc18:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800dc1c:	f801 0b01 	strb.w	r0, [r1], #1
 800dc20:	e7f8      	b.n	800dc14 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800dc22:	07d0      	lsls	r0, r2, #31
 800dc24:	bf42      	ittt	mi
 800dc26:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800dc2a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800dc2e:	f801 0b01 	strbmi.w	r0, [r1], #1
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	d911      	bls.n	800dc5a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800dc36:	ea81 0402 	eor.w	r4, r1, r2
 800dc3a:	4610      	mov	r0, r2
 800dc3c:	07a4      	lsls	r4, r4, #30
 800dc3e:	d022      	beq.n	800dc86 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800dc40:	f023 0401 	bic.w	r4, r3, #1
 800dc44:	440c      	add	r4, r1
 800dc46:	428c      	cmp	r4, r1
 800dc48:	4602      	mov	r2, r0
 800dc4a:	d904      	bls.n	800dc56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800dc4c:	8812      	ldrh	r2, [r2, #0]
 800dc4e:	3002      	adds	r0, #2
 800dc50:	f821 2b02 	strh.w	r2, [r1], #2
 800dc54:	e7f7      	b.n	800dc46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800dc56:	f003 0301 	and.w	r3, r3, #1
 800dc5a:	f023 0003 	bic.w	r0, r3, #3
 800dc5e:	4408      	add	r0, r1
 800dc60:	4288      	cmp	r0, r1
 800dc62:	4614      	mov	r4, r2
 800dc64:	d904      	bls.n	800dc70 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800dc66:	6824      	ldr	r4, [r4, #0]
 800dc68:	3204      	adds	r2, #4
 800dc6a:	f841 4b04 	str.w	r4, [r1], #4
 800dc6e:	e7f7      	b.n	800dc60 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800dc70:	f003 0303 	and.w	r3, r3, #3
 800dc74:	3a01      	subs	r2, #1
 800dc76:	440b      	add	r3, r1
 800dc78:	428b      	cmp	r3, r1
 800dc7a:	d90c      	bls.n	800dc96 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800dc7c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800dc80:	f801 0b01 	strb.w	r0, [r1], #1
 800dc84:	e7f8      	b.n	800dc78 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800dc86:	0790      	lsls	r0, r2, #30
 800dc88:	d0e7      	beq.n	800dc5a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800dc8a:	f832 0b02 	ldrh.w	r0, [r2], #2
 800dc8e:	3b02      	subs	r3, #2
 800dc90:	f821 0b02 	strh.w	r0, [r1], #2
 800dc94:	e7e1      	b.n	800dc5a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800dc96:	2001      	movs	r0, #1
 800dc98:	bd10      	pop	{r4, pc}

0800dc9a <_ZN8touchgfx3HAL7noTouchEv>:
 800dc9a:	b510      	push	{r4, lr}
 800dc9c:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800dca0:	4604      	mov	r4, r0
 800dca2:	b153      	cbz	r3, 800dcba <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800dca4:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800dca8:	2101      	movs	r1, #1
 800dcaa:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800dcae:	301c      	adds	r0, #28
 800dcb0:	f011 f8e0 	bl	801ee74 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800dcba:	bd10      	pop	{r4, pc}

0800dcbc <_ZN8touchgfx8Drawable5setXYEss>:
 800dcbc:	b570      	push	{r4, r5, r6, lr}
 800dcbe:	6803      	ldr	r3, [r0, #0]
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	4615      	mov	r5, r2
 800dcc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcc6:	4798      	blx	r3
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	4629      	mov	r1, r5
 800dccc:	4620      	mov	r0, r4
 800dcce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcd4:	4718      	bx	r3
	...

0800dcd8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800dcd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcdc:	b085      	sub	sp, #20
 800dcde:	4604      	mov	r4, r0
 800dce0:	2000      	movs	r0, #0
 800dce2:	4699      	mov	r9, r3
 800dce4:	ad04      	add	r5, sp, #16
 800dce6:	460f      	mov	r7, r1
 800dce8:	4690      	mov	r8, r2
 800dcea:	f845 0d04 	str.w	r0, [r5, #-4]!
 800dcee:	69a0      	ldr	r0, [r4, #24]
 800dcf0:	6806      	ldr	r6, [r0, #0]
 800dcf2:	9501      	str	r5, [sp, #4]
 800dcf4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800dcf8:	9500      	str	r5, [sp, #0]
 800dcfa:	6835      	ldr	r5, [r6, #0]
 800dcfc:	47a8      	blx	r5
 800dcfe:	4d10      	ldr	r5, [pc, #64]	@ (800dd40 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800dd00:	4606      	mov	r6, r0
 800dd02:	f8a5 9000 	strh.w	r9, [r5]
 800dd06:	f7f5 ff0d 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800dd0a:	6803      	ldr	r3, [r0, #0]
 800dd0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd0e:	4798      	blx	r3
 800dd10:	b128      	cbz	r0, 800dd1e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800dd12:	2801      	cmp	r0, #1
 800dd14:	d00b      	beq.n	800dd2e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800dd16:	4630      	mov	r0, r6
 800dd18:	b005      	add	sp, #20
 800dd1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd1e:	882b      	ldrh	r3, [r5, #0]
 800dd20:	fb08 7203 	mla	r2, r8, r3, r7
 800dd24:	9b03      	ldr	r3, [sp, #12]
 800dd26:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800dd2a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800dd2c:	e7f3      	b.n	800dd16 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800dd2e:	882a      	ldrh	r2, [r5, #0]
 800dd30:	9b03      	ldr	r3, [sp, #12]
 800dd32:	fb08 7202 	mla	r2, r8, r2, r7
 800dd36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800dd3a:	1a9a      	subs	r2, r3, r2
 800dd3c:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800dd3e:	e7ea      	b.n	800dd16 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800dd40:	24025152 	.word	0x24025152

0800dd44 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800dd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd46:	b08b      	sub	sp, #44	@ 0x2c
 800dd48:	4617      	mov	r7, r2
 800dd4a:	4604      	mov	r4, r0
 800dd4c:	460e      	mov	r6, r1
 800dd4e:	461d      	mov	r5, r3
 800dd50:	f7f5 fee8 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800dd54:	6803      	ldr	r3, [r0, #0]
 800dd56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd58:	4798      	blx	r3
 800dd5a:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800dd5e:	9007      	str	r0, [sp, #28]
 800dd60:	4631      	mov	r1, r6
 800dd62:	6822      	ldr	r2, [r4, #0]
 800dd64:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800dd68:	4b0c      	ldr	r3, [pc, #48]	@ (800dd9c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	881b      	ldrh	r3, [r3, #0]
 800dd6e:	9306      	str	r3, [sp, #24]
 800dd70:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800dd74:	9305      	str	r3, [sp, #20]
 800dd76:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800dd7a:	9304      	str	r3, [sp, #16]
 800dd7c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800dd80:	9303      	str	r3, [sp, #12]
 800dd82:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800dd86:	9302      	str	r3, [sp, #8]
 800dd88:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800dd8c:	e9cd 5300 	strd	r5, r3, [sp]
 800dd90:	463b      	mov	r3, r7
 800dd92:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 800dd94:	2200      	movs	r2, #0
 800dd96:	47a8      	blx	r5
 800dd98:	b00b      	add	sp, #44	@ 0x2c
 800dd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd9c:	24025152 	.word	0x24025152

0800dda0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800dda0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dda4:	4698      	mov	r8, r3
 800dda6:	6803      	ldr	r3, [r0, #0]
 800dda8:	b08b      	sub	sp, #44	@ 0x2c
 800ddaa:	4617      	mov	r7, r2
 800ddac:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 800ddae:	460e      	mov	r6, r1
 800ddb0:	4b13      	ldr	r3, [pc, #76]	@ (800de00 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	f8b3 9000 	ldrh.w	r9, [r3]
 800ddb8:	f7f5 feb4 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800ddbc:	6803      	ldr	r3, [r0, #0]
 800ddbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddc0:	4798      	blx	r3
 800ddc2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	4631      	mov	r1, r6
 800ddca:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800ddce:	2302      	movs	r3, #2
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	9305      	str	r3, [sp, #20]
 800ddda:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800ddde:	9304      	str	r3, [sp, #16]
 800dde0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800dde4:	9303      	str	r3, [sp, #12]
 800dde6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800ddea:	9302      	str	r3, [sp, #8]
 800ddec:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800ddf0:	e9cd 8300 	strd	r8, r3, [sp]
 800ddf4:	463b      	mov	r3, r7
 800ddf6:	47a8      	blx	r5
 800ddf8:	b00b      	add	sp, #44	@ 0x2c
 800ddfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddfe:	bf00      	nop
 800de00:	24025152 	.word	0x24025152

0800de04 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800de04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de08:	4698      	mov	r8, r3
 800de0a:	6803      	ldr	r3, [r0, #0]
 800de0c:	b087      	sub	sp, #28
 800de0e:	460e      	mov	r6, r1
 800de10:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 800de12:	4617      	mov	r7, r2
 800de14:	4b0f      	ldr	r3, [pc, #60]	@ (800de54 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800de16:	4604      	mov	r4, r0
 800de18:	f8b3 9000 	ldrh.w	r9, [r3]
 800de1c:	f7f5 fe82 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800de20:	6803      	ldr	r3, [r0, #0]
 800de22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de24:	4798      	blx	r3
 800de26:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800de2a:	463a      	mov	r2, r7
 800de2c:	4631      	mov	r1, r6
 800de2e:	f8cd 900c 	str.w	r9, [sp, #12]
 800de32:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800de36:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800de3a:	4620      	mov	r0, r4
 800de3c:	9302      	str	r3, [sp, #8]
 800de3e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800de42:	9301      	str	r3, [sp, #4]
 800de44:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	4643      	mov	r3, r8
 800de4c:	47a8      	blx	r5
 800de4e:	b007      	add	sp, #28
 800de50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de54:	24025152 	.word	0x24025152

0800de58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800de58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5c:	4604      	mov	r4, r0
 800de5e:	b08f      	sub	sp, #60	@ 0x3c
 800de60:	4610      	mov	r0, r2
 800de62:	460d      	mov	r5, r1
 800de64:	4691      	mov	r9, r2
 800de66:	461e      	mov	r6, r3
 800de68:	f007 fc94 	bl	8015794 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800de6c:	2800      	cmp	r0, #0
 800de6e:	f000 809d 	beq.w	800dfac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800de72:	6823      	ldr	r3, [r4, #0]
 800de74:	4620      	mov	r0, r4
 800de76:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800e010 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800de7a:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800de7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de80:	4798      	blx	r3
 800de82:	6823      	ldr	r3, [r4, #0]
 800de84:	4620      	mov	r0, r4
 800de86:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800e014 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800de8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de8c:	4798      	blx	r3
 800de8e:	f8bb 3000 	ldrh.w	r3, [fp]
 800de92:	4f5c      	ldr	r7, [pc, #368]	@ (800e004 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800de94:	9301      	str	r3, [sp, #4]
 800de96:	f8ba 3000 	ldrh.w	r3, [sl]
 800de9a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800de9e:	4640      	mov	r0, r8
 800dea0:	9302      	str	r3, [sp, #8]
 800dea2:	883b      	ldrh	r3, [r7, #0]
 800dea4:	9303      	str	r3, [sp, #12]
 800dea6:	4b58      	ldr	r3, [pc, #352]	@ (800e008 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800dea8:	881a      	ldrh	r2, [r3, #0]
 800deaa:	9305      	str	r3, [sp, #20]
 800deac:	9204      	str	r2, [sp, #16]
 800deae:	f007 fdc1 	bl	8015a34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800deb2:	8038      	strh	r0, [r7, #0]
 800deb4:	4640      	mov	r0, r8
 800deb6:	f007 fdf1 	bl	8015a9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800deba:	9b05      	ldr	r3, [sp, #20]
 800debc:	b280      	uxth	r0, r0
 800debe:	8018      	strh	r0, [r3, #0]
 800dec0:	4b52      	ldr	r3, [pc, #328]	@ (800e00c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d174      	bne.n	800dfb2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800dec8:	883b      	ldrh	r3, [r7, #0]
 800deca:	f8aa 0000 	strh.w	r0, [sl]
 800dece:	f8ab 3000 	strh.w	r3, [fp]
 800ded2:	4648      	mov	r0, r9
 800ded4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800ded8:	f007 fc5c 	bl	8015794 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800dedc:	2200      	movs	r2, #0
 800dede:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800dee2:	4611      	mov	r1, r2
 800dee4:	4628      	mov	r0, r5
 800dee6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800deea:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800deee:	f7ff fee5 	bl	800dcbc <_ZN8touchgfx8Drawable5setXYEss>
 800def2:	2301      	movs	r3, #1
 800def4:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800def8:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800defc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800df00:	2b00      	cmp	r3, #0
 800df02:	dd5c      	ble.n	800dfbe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800df04:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	dd58      	ble.n	800dfbe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800df0c:	462a      	mov	r2, r5
 800df0e:	ab0a      	add	r3, sp, #40	@ 0x28
 800df10:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800df14:	6851      	ldr	r1, [r2, #4]
 800df16:	c303      	stmia	r3!, {r0, r1}
 800df18:	4631      	mov	r1, r6
 800df1a:	a80a      	add	r0, sp, #40	@ 0x28
 800df1c:	f7ff fbf8 	bl	800d710 <_ZN8touchgfx4RectaNERKS0_>
 800df20:	4b38      	ldr	r3, [pc, #224]	@ (800e004 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800df22:	2100      	movs	r1, #0
 800df24:	f9b3 2000 	ldrsh.w	r2, [r3]
 800df28:	4b37      	ldr	r3, [pc, #220]	@ (800e008 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800df2a:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800df2e:	aa0a      	add	r2, sp, #40	@ 0x28
 800df30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df34:	910c      	str	r1, [sp, #48]	@ 0x30
 800df36:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800df3a:	ab08      	add	r3, sp, #32
 800df3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800df40:	e883 0003 	stmia.w	r3, {r0, r1}
 800df44:	4618      	mov	r0, r3
 800df46:	a90c      	add	r1, sp, #48	@ 0x30
 800df48:	f7ff fbe2 	bl	800d710 <_ZN8touchgfx4RectaNERKS0_>
 800df4c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d13c      	bne.n	800dfcc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800df52:	2000      	movs	r0, #0
 800df54:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800df58:	2600      	movs	r6, #0
 800df5a:	696b      	ldr	r3, [r5, #20]
 800df5c:	a908      	add	r1, sp, #32
 800df5e:	682a      	ldr	r2, [r5, #0]
 800df60:	4628      	mov	r0, r5
 800df62:	9305      	str	r3, [sp, #20]
 800df64:	616e      	str	r6, [r5, #20]
 800df66:	6892      	ldr	r2, [r2, #8]
 800df68:	4790      	blx	r2
 800df6a:	9b05      	ldr	r3, [sp, #20]
 800df6c:	4652      	mov	r2, sl
 800df6e:	4649      	mov	r1, r9
 800df70:	616b      	str	r3, [r5, #20]
 800df72:	4628      	mov	r0, r5
 800df74:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800df78:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800df7c:	f7ff fe9e 	bl	800dcbc <_ZN8touchgfx8Drawable5setXYEss>
 800df80:	9a01      	ldr	r2, [sp, #4]
 800df82:	4b23      	ldr	r3, [pc, #140]	@ (800e010 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800df84:	4620      	mov	r0, r4
 800df86:	801a      	strh	r2, [r3, #0]
 800df88:	9a02      	ldr	r2, [sp, #8]
 800df8a:	4b22      	ldr	r3, [pc, #136]	@ (800e014 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800df8c:	801a      	strh	r2, [r3, #0]
 800df8e:	9a03      	ldr	r2, [sp, #12]
 800df90:	4b1c      	ldr	r3, [pc, #112]	@ (800e004 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800df92:	801a      	strh	r2, [r3, #0]
 800df94:	4b1c      	ldr	r3, [pc, #112]	@ (800e008 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800df96:	9a04      	ldr	r2, [sp, #16]
 800df98:	801a      	strh	r2, [r3, #0]
 800df9a:	6823      	ldr	r3, [r4, #0]
 800df9c:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800dfa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfa2:	4798      	blx	r3
 800dfa4:	6823      	ldr	r3, [r4, #0]
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfaa:	4798      	blx	r3
 800dfac:	b00f      	add	sp, #60	@ 0x3c
 800dfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb2:	883b      	ldrh	r3, [r7, #0]
 800dfb4:	f8ab 0000 	strh.w	r0, [fp]
 800dfb8:	f8aa 3000 	strh.w	r3, [sl]
 800dfbc:	e789      	b.n	800ded2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800dfbe:	462a      	mov	r2, r5
 800dfc0:	ab0a      	add	r3, sp, #40	@ 0x28
 800dfc2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800dfc6:	6851      	ldr	r1, [r2, #4]
 800dfc8:	c303      	stmia	r3!, {r0, r1}
 800dfca:	e7a9      	b.n	800df20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800dfcc:	a807      	add	r0, sp, #28
 800dfce:	f007 fe6f 	bl	8015cb0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800dfd2:	4606      	mov	r6, r0
 800dfd4:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800dfd6:	6803      	ldr	r3, [r0, #0]
 800dfd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfda:	4798      	blx	r3
 800dfdc:	4286      	cmp	r6, r0
 800dfde:	d1b8      	bne.n	800df52 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800dfe0:	f7f5 fda0 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800dfe4:	6803      	ldr	r3, [r0, #0]
 800dfe6:	4606      	mov	r6, r0
 800dfe8:	a807      	add	r0, sp, #28
 800dfea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfec:	9305      	str	r3, [sp, #20]
 800dfee:	f007 fe5f 	bl	8015cb0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800dff2:	9b05      	ldr	r3, [sp, #20]
 800dff4:	4601      	mov	r1, r0
 800dff6:	4630      	mov	r0, r6
 800dff8:	4798      	blx	r3
 800dffa:	f080 0001 	eor.w	r0, r0, #1
 800dffe:	b2c0      	uxtb	r0, r0
 800e000:	e7a8      	b.n	800df54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800e002:	bf00      	nop
 800e004:	2402514c 	.word	0x2402514c
 800e008:	2402514e 	.word	0x2402514e
 800e00c:	24025150 	.word	0x24025150
 800e010:	24025152 	.word	0x24025152
 800e014:	24025154 	.word	0x24025154

0800e018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800e018:	4b07      	ldr	r3, [pc, #28]	@ (800e038 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800e01a:	b510      	push	{r4, lr}
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	4604      	mov	r4, r0
 800e020:	b13b      	cbz	r3, 800e032 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e022:	6803      	ldr	r3, [r0, #0]
 800e024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e026:	4798      	blx	r3
 800e028:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e02a:	4283      	cmp	r3, r0
 800e02c:	d101      	bne.n	800e032 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e02e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800e030:	bd10      	pop	{r4, pc}
 800e032:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800e034:	e7fc      	b.n	800e030 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800e036:	bf00      	nop
 800e038:	24025156 	.word	0x24025156

0800e03c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800e03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e040:	461d      	mov	r5, r3
 800e042:	b08a      	sub	sp, #40	@ 0x28
 800e044:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e048:	4690      	mov	r8, r2
 800e04a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800e04e:	2400      	movs	r4, #0
 800e050:	4607      	mov	r7, r0
 800e052:	fb06 8505 	mla	r5, r6, r5, r8
 800e056:	9404      	str	r4, [sp, #16]
 800e058:	f88d 4020 	strb.w	r4, [sp, #32]
 800e05c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e060:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e064:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e068:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e06c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e070:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e074:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e078:	f7ff ffce 	bl	800e018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e07c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e086:	a901      	add	r1, sp, #4
 800e088:	9505      	str	r5, [sp, #20]
 800e08a:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e08e:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800e092:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800e096:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800e09a:	6803      	ldr	r3, [r0, #0]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	4798      	blx	r3
 800e0a0:	b00a      	add	sp, #40	@ 0x28
 800e0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e0a6 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800e0a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0aa:	b08b      	sub	sp, #44	@ 0x2c
 800e0ac:	2400      	movs	r4, #0
 800e0ae:	4691      	mov	r9, r2
 800e0b0:	461d      	mov	r5, r3
 800e0b2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800e0b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e0ba:	4688      	mov	r8, r1
 800e0bc:	4607      	mov	r7, r0
 800e0be:	9404      	str	r4, [sp, #16]
 800e0c0:	fb06 9505 	mla	r5, r6, r5, r9
 800e0c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0c8:	f7ff ffa6 	bl	800e018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e0cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e0d0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e0da:	a901      	add	r1, sp, #4
 800e0dc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e0e0:	9505      	str	r5, [sp, #20]
 800e0e2:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e0e6:	f8ad 401c 	strh.w	r4, [sp, #28]
 800e0ea:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e0ee:	f8cd 8010 	str.w	r8, [sp, #16]
 800e0f2:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e0f6:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e0fa:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800e0fe:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800e102:	6803      	ldr	r3, [r0, #0]
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	4798      	blx	r3
 800e108:	b00b      	add	sp, #44	@ 0x2c
 800e10a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800e110 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800e110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e114:	b08a      	sub	sp, #40	@ 0x28
 800e116:	4698      	mov	r8, r3
 800e118:	2300      	movs	r3, #0
 800e11a:	4606      	mov	r6, r0
 800e11c:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800e120:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800e124:	2d0b      	cmp	r5, #11
 800e126:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800e12a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800e12e:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800e132:	9304      	str	r3, [sp, #16]
 800e134:	d137      	bne.n	800e1a6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800e136:	2380      	movs	r3, #128	@ 0x80
 800e138:	f88d 0020 	strb.w	r0, [sp, #32]
 800e13c:	4630      	mov	r0, r6
 800e13e:	9203      	str	r2, [sp, #12]
 800e140:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e144:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e148:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e14c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e150:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e154:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e158:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e15c:	f7ff ff5c 	bl	800e018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e160:	2c0b      	cmp	r4, #11
 800e162:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800e166:	f8ad 701e 	strh.w	r7, [sp, #30]
 800e16a:	bf94      	ite	ls
 800e16c:	4b19      	ldrls	r3, [pc, #100]	@ (800e1d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800e16e:	2100      	movhi	r1, #0
 800e170:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800e174:	bf98      	it	ls
 800e176:	5d19      	ldrbls	r1, [r3, r4]
 800e178:	fb02 8307 	mla	r3, r2, r7, r8
 800e17c:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e180:	10c9      	asrs	r1, r1, #3
 800e182:	fb01 0003 	mla	r0, r1, r3, r0
 800e186:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800e18a:	a901      	add	r1, sp, #4
 800e18c:	9005      	str	r0, [sp, #20]
 800e18e:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800e192:	2300      	movs	r3, #0
 800e194:	6870      	ldr	r0, [r6, #4]
 800e196:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e19a:	6803      	ldr	r3, [r0, #0]
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	4798      	blx	r3
 800e1a0:	b00a      	add	sp, #40	@ 0x28
 800e1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1a6:	2d02      	cmp	r5, #2
 800e1a8:	d109      	bne.n	800e1be <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800e1aa:	28ff      	cmp	r0, #255	@ 0xff
 800e1ac:	d105      	bne.n	800e1ba <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800e1ae:	f1bc 0f00 	cmp.w	ip, #0
 800e1b2:	bf14      	ite	ne
 800e1b4:	2340      	movne	r3, #64	@ 0x40
 800e1b6:	2320      	moveq	r3, #32
 800e1b8:	e7be      	b.n	800e138 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e1ba:	2340      	movs	r3, #64	@ 0x40
 800e1bc:	e7bc      	b.n	800e138 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e1be:	28ff      	cmp	r0, #255	@ 0xff
 800e1c0:	d105      	bne.n	800e1ce <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800e1c2:	f1bc 0f00 	cmp.w	ip, #0
 800e1c6:	bf14      	ite	ne
 800e1c8:	2304      	movne	r3, #4
 800e1ca:	2301      	moveq	r3, #1
 800e1cc:	e7b4      	b.n	800e138 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e1ce:	2304      	movs	r3, #4
 800e1d0:	e7b2      	b.n	800e138 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e1d2:	bf00      	nop
 800e1d4:	08023b30 	.word	0x08023b30

0800e1d8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800e1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1dc:	b08b      	sub	sp, #44	@ 0x2c
 800e1de:	461d      	mov	r5, r3
 800e1e0:	2400      	movs	r4, #0
 800e1e2:	4688      	mov	r8, r1
 800e1e4:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800e1e8:	4693      	mov	fp, r2
 800e1ea:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800e1ee:	4607      	mov	r7, r0
 800e1f0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800e1f4:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800e1f8:	9404      	str	r4, [sp, #16]
 800e1fa:	bf14      	ite	ne
 800e1fc:	2308      	movne	r3, #8
 800e1fe:	2302      	moveq	r3, #2
 800e200:	fb05 b50a 	mla	r5, r5, sl, fp
 800e204:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e208:	f7ff ff06 	bl	800e018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e20c:	2e0b      	cmp	r6, #11
 800e20e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800e212:	a901      	add	r1, sp, #4
 800e214:	bf98      	it	ls
 800e216:	4b13      	ldrls	r3, [pc, #76]	@ (800e264 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800e218:	f8ad a01e 	strh.w	sl, [sp, #30]
 800e21c:	bf98      	it	ls
 800e21e:	5d9c      	ldrbls	r4, [r3, r6]
 800e220:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800e224:	10e4      	asrs	r4, r4, #3
 800e226:	f8cd 8010 	str.w	r8, [sp, #16]
 800e22a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e22e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e232:	fb04 0405 	mla	r4, r4, r5, r0
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e23c:	2300      	movs	r3, #0
 800e23e:	9405      	str	r4, [sp, #20]
 800e240:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e244:	f88d 9020 	strb.w	r9, [sp, #32]
 800e248:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800e24c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e250:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800e254:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800e258:	6803      	ldr	r3, [r0, #0]
 800e25a:	685b      	ldr	r3, [r3, #4]
 800e25c:	4798      	blx	r3
 800e25e:	b00b      	add	sp, #44	@ 0x2c
 800e260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e264:	08023b30 	.word	0x08023b30

0800e268 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800e268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e26c:	461e      	mov	r6, r3
 800e26e:	4b0a      	ldr	r3, [pc, #40]	@ (800e298 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800e270:	460f      	mov	r7, r1
 800e272:	4690      	mov	r8, r2
 800e274:	881d      	ldrh	r5, [r3, #0]
 800e276:	f7f5 fc55 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800e27a:	6803      	ldr	r3, [r0, #0]
 800e27c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e27e:	4798      	blx	r3
 800e280:	280b      	cmp	r0, #11
 800e282:	bf96      	itet	ls
 800e284:	4b05      	ldrls	r3, [pc, #20]	@ (800e29c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800e286:	2400      	movhi	r4, #0
 800e288:	5c1c      	ldrbls	r4, [r3, r0]
 800e28a:	fb08 7005 	mla	r0, r8, r5, r7
 800e28e:	10e4      	asrs	r4, r4, #3
 800e290:	fb04 6000 	mla	r0, r4, r0, r6
 800e294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e298:	24025152 	.word	0x24025152
 800e29c:	08023b30 	.word	0x08023b30

0800e2a0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800e2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2a2:	b08b      	sub	sp, #44	@ 0x2c
 800e2a4:	461f      	mov	r7, r3
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	4616      	mov	r6, r2
 800e2aa:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e2ae:	2500      	movs	r5, #0
 800e2b0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e2b4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e2b8:	9504      	str	r5, [sp, #16]
 800e2ba:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e2be:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e2c2:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e2c6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e2ca:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e2ce:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800e2d2:	f88d 3020 	strb.w	r3, [sp, #32]
 800e2d6:	f7ff fe9f 	bl	800e018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e2da:	463a      	mov	r2, r7
 800e2dc:	4631      	mov	r1, r6
 800e2de:	4603      	mov	r3, r0
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	f7ff ffc1 	bl	800e268 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e2e6:	4b0e      	ldr	r3, [pc, #56]	@ (800e320 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800e2e8:	9005      	str	r0, [sp, #20]
 800e2ea:	881b      	ldrh	r3, [r3, #0]
 800e2ec:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e2f0:	f7f5 fc18 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800e2f4:	6803      	ldr	r3, [r0, #0]
 800e2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2f8:	4798      	blx	r3
 800e2fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e2fc:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800e300:	a901      	add	r1, sp, #4
 800e302:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800e306:	9304      	str	r3, [sp, #16]
 800e308:	6860      	ldr	r0, [r4, #4]
 800e30a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800e30e:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800e312:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800e316:	6803      	ldr	r3, [r0, #0]
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	4798      	blx	r3
 800e31c:	b00b      	add	sp, #44	@ 0x2c
 800e31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e320:	24025152 	.word	0x24025152

0800e324 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800e324:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e326:	b08d      	sub	sp, #52	@ 0x34
 800e328:	2501      	movs	r5, #1
 800e32a:	4604      	mov	r4, r0
 800e32c:	466b      	mov	r3, sp
 800e32e:	9503      	str	r5, [sp, #12]
 800e330:	e883 0006 	stmia.w	r3, {r1, r2}
 800e334:	2300      	movs	r3, #0
 800e336:	f8bd 6000 	ldrh.w	r6, [sp]
 800e33a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800e33e:	9306      	str	r3, [sp, #24]
 800e340:	6803      	ldr	r3, [r0, #0]
 800e342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e344:	4798      	blx	r3
 800e346:	463a      	mov	r2, r7
 800e348:	4631      	mov	r1, r6
 800e34a:	4603      	mov	r3, r0
 800e34c:	4620      	mov	r0, r4
 800e34e:	f7ff ff8b 	bl	800e268 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e352:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e354:	9004      	str	r0, [sp, #16]
 800e356:	9307      	str	r3, [sp, #28]
 800e358:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e35c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e360:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e364:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800e368:	4b0e      	ldr	r3, [pc, #56]	@ (800e3a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800e36a:	881b      	ldrh	r3, [r3, #0]
 800e36c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800e370:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800e374:	f7f5 fbd6 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800e378:	6803      	ldr	r3, [r0, #0]
 800e37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e37c:	4798      	blx	r3
 800e37e:	23ff      	movs	r3, #255	@ 0xff
 800e380:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800e384:	a903      	add	r1, sp, #12
 800e386:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800e38a:	6860      	ldr	r0, [r4, #4]
 800e38c:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800e390:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800e394:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800e398:	6803      	ldr	r3, [r0, #0]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	4798      	blx	r3
 800e39e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800e3a0:	b00d      	add	sp, #52	@ 0x34
 800e3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3a4:	24025152 	.word	0x24025152

0800e3a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800e3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ac:	b08c      	sub	sp, #48	@ 0x30
 800e3ae:	461e      	mov	r6, r3
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	4604      	mov	r4, r0
 800e3b4:	466d      	mov	r5, sp
 800e3b6:	9306      	str	r3, [sp, #24]
 800e3b8:	6803      	ldr	r3, [r0, #0]
 800e3ba:	e885 0006 	stmia.w	r5, {r1, r2}
 800e3be:	2501      	movs	r5, #1
 800e3c0:	f8bd 7000 	ldrh.w	r7, [sp]
 800e3c4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800e3c8:	9503      	str	r5, [sp, #12]
 800e3ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3cc:	4798      	blx	r3
 800e3ce:	4642      	mov	r2, r8
 800e3d0:	4639      	mov	r1, r7
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	f7ff ff47 	bl	800e268 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e3da:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e3de:	9004      	str	r0, [sp, #16]
 800e3e0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e3e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e3e8:	9607      	str	r6, [sp, #28]
 800e3ea:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800e3ee:	4b10      	ldr	r3, [pc, #64]	@ (800e430 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800e3f0:	881b      	ldrh	r3, [r3, #0]
 800e3f2:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800e3f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e3f8:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800e3fc:	f7f5 fb92 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 800e400:	6803      	ldr	r3, [r0, #0]
 800e402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e404:	4798      	blx	r3
 800e406:	23ff      	movs	r3, #255	@ 0xff
 800e408:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800e40c:	a903      	add	r1, sp, #12
 800e40e:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800e412:	6860      	ldr	r0, [r4, #4]
 800e414:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800e418:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800e41c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800e420:	6803      	ldr	r3, [r0, #0]
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	4798      	blx	r3
 800e426:	4630      	mov	r0, r6
 800e428:	b00c      	add	sp, #48	@ 0x30
 800e42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e42e:	bf00      	nop
 800e430:	24025152 	.word	0x24025152

0800e434 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800e434:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e436:	b085      	sub	sp, #20
 800e438:	4605      	mov	r5, r0
 800e43a:	ac02      	add	r4, sp, #8
 800e43c:	e884 0006 	stmia.w	r4, {r1, r2}
 800e440:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800e444:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800e448:	f7ff fde6 	bl	800e018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e44c:	4631      	mov	r1, r6
 800e44e:	4603      	mov	r3, r0
 800e450:	463a      	mov	r2, r7
 800e452:	4628      	mov	r0, r5
 800e454:	f7ff ff08 	bl	800e268 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e458:	4a05      	ldr	r2, [pc, #20]	@ (800e470 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800e45a:	682b      	ldr	r3, [r5, #0]
 800e45c:	8812      	ldrh	r2, [r2, #0]
 800e45e:	9200      	str	r2, [sp, #0]
 800e460:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800e462:	4603      	mov	r3, r0
 800e464:	4628      	mov	r0, r5
 800e466:	e894 0006 	ldmia.w	r4, {r1, r2}
 800e46a:	47b0      	blx	r6
 800e46c:	b005      	add	sp, #20
 800e46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e470:	24025152 	.word	0x24025152

0800e474 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800e474:	b570      	push	{r4, r5, r6, lr}
 800e476:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800e47a:	4604      	mov	r4, r0
 800e47c:	b19b      	cbz	r3, 800e4a6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800e47e:	2002      	movs	r0, #2
 800e480:	f7f3 fa96 	bl	80019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800e484:	2300      	movs	r3, #0
 800e486:	4620      	mov	r0, r4
 800e488:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800e48c:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800e490:	6823      	ldr	r3, [r4, #0]
 800e492:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800e496:	f7ff fdbf 	bl	800e018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e49a:	4601      	mov	r1, r0
 800e49c:	4620      	mov	r0, r4
 800e49e:	462b      	mov	r3, r5
 800e4a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4a4:	4718      	bx	r3
 800e4a6:	bd70      	pop	{r4, r5, r6, pc}

0800e4a8 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800e4a8:	b570      	push	{r4, r5, r6, lr}
 800e4aa:	4605      	mov	r5, r0
 800e4ac:	460c      	mov	r4, r1
 800e4ae:	2003      	movs	r0, #3
 800e4b0:	b149      	cbz	r1, 800e4c6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800e4b2:	f7f3 fa1d 	bl	80018f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800e4b6:	6928      	ldr	r0, [r5, #16]
 800e4b8:	b168      	cbz	r0, 800e4d6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e4ba:	6803      	ldr	r3, [r0, #0]
 800e4bc:	2101      	movs	r1, #1
 800e4be:	695b      	ldr	r3, [r3, #20]
 800e4c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4c4:	4718      	bx	r3
 800e4c6:	f7f3 fa43 	bl	8001950 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e4ca:	6928      	ldr	r0, [r5, #16]
 800e4cc:	b118      	cbz	r0, 800e4d6 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e4ce:	6803      	ldr	r3, [r0, #0]
 800e4d0:	4621      	mov	r1, r4
 800e4d2:	695b      	ldr	r3, [r3, #20]
 800e4d4:	e7f4      	b.n	800e4c0 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800e4d6:	bd70      	pop	{r4, r5, r6, pc}

0800e4d8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800e4d8:	b538      	push	{r3, r4, r5, lr}
 800e4da:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800e4de:	4604      	mov	r4, r0
 800e4e0:	460d      	mov	r5, r1
 800e4e2:	428b      	cmp	r3, r1
 800e4e4:	d006      	beq.n	800e4f4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800e4e6:	6803      	ldr	r3, [r0, #0]
 800e4e8:	b929      	cbnz	r1, 800e4f6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800e4ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e4ee:	4798      	blx	r3
 800e4f0:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800e4f4:	bd38      	pop	{r3, r4, r5, pc}
 800e4f6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e4fa:	e7f8      	b.n	800e4ee <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800e4fc <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800e4fc:	4b0d      	ldr	r3, [pc, #52]	@ (800e534 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800e4fe:	b510      	push	{r4, lr}
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	4604      	mov	r4, r0
 800e504:	b95b      	cbnz	r3, 800e51e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e506:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800e50a:	2b02      	cmp	r3, #2
 800e50c:	d007      	beq.n	800e51e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e50e:	6840      	ldr	r0, [r0, #4]
 800e510:	f000 f91a 	bl	800e748 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800e514:	b118      	cbz	r0, 800e51e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e516:	6862      	ldr	r2, [r4, #4]
 800e518:	7a53      	ldrb	r3, [r2, #9]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d0fc      	beq.n	800e518 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800e51e:	f7f4 fa51 	bl	80029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e522:	4620      	mov	r0, r4
 800e524:	2100      	movs	r1, #0
 800e526:	f7ff ffd7 	bl	800e4d8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e52a:	4620      	mov	r0, r4
 800e52c:	f7ff fd74 	bl	800e018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e530:	bd10      	pop	{r4, pc}
 800e532:	bf00      	nop
 800e534:	24025156 	.word	0x24025156

0800e538 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800e538:	b570      	push	{r4, r5, r6, lr}
 800e53a:	4604      	mov	r4, r0
 800e53c:	6803      	ldr	r3, [r0, #0]
 800e53e:	b919      	cbnz	r1, 800e548 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800e540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e546:	4718      	bx	r3
 800e548:	2200      	movs	r2, #0
 800e54a:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 800e54e:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 800e552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e554:	4798      	blx	r3
 800e556:	6863      	ldr	r3, [r4, #4]
 800e558:	2101      	movs	r1, #1
 800e55a:	4605      	mov	r5, r0
 800e55c:	4620      	mov	r0, r4
 800e55e:	7299      	strb	r1, [r3, #10]
 800e560:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 800e564:	f7ff ffb8 	bl	800e4d8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e568:	4628      	mov	r0, r5
 800e56a:	bd70      	pop	{r4, r5, r6, pc}

0800e56c <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800e56c:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800e570:	1a13      	subs	r3, r2, r0
 800e572:	4258      	negs	r0, r3
 800e574:	4158      	adcs	r0, r3
 800e576:	4770      	bx	lr

0800e578 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800e578:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800e57c:	1a9b      	subs	r3, r3, r2
 800e57e:	2b00      	cmp	r3, #0
 800e580:	bfdc      	itt	le
 800e582:	6882      	ldrle	r2, [r0, #8]
 800e584:	189b      	addle	r3, r3, r2
 800e586:	2b01      	cmp	r3, #1
 800e588:	bfcc      	ite	gt
 800e58a:	2000      	movgt	r0, #0
 800e58c:	2001      	movle	r0, #1
 800e58e:	4770      	bx	lr

0800e590 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800e590:	6902      	ldr	r2, [r0, #16]
 800e592:	6843      	ldr	r3, [r0, #4]
 800e594:	2024      	movs	r0, #36	@ 0x24
 800e596:	fb00 3002 	mla	r0, r0, r2, r3
 800e59a:	4770      	bx	lr

0800e59c <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800e59c:	6803      	ldr	r3, [r0, #0]
 800e59e:	691b      	ldr	r3, [r3, #16]
 800e5a0:	4718      	bx	r3

0800e5a2 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	b570      	push	{r4, r5, r6, lr}
 800e5a6:	7203      	strb	r3, [r0, #8]
 800e5a8:	4604      	mov	r4, r0
 800e5aa:	6840      	ldr	r0, [r0, #4]
 800e5ac:	6803      	ldr	r3, [r0, #0]
 800e5ae:	699b      	ldr	r3, [r3, #24]
 800e5b0:	4798      	blx	r3
 800e5b2:	6803      	ldr	r3, [r0, #0]
 800e5b4:	4605      	mov	r5, r0
 800e5b6:	2b40      	cmp	r3, #64	@ 0x40
 800e5b8:	d00c      	beq.n	800e5d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e5ba:	d810      	bhi.n	800e5de <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800e5bc:	2b04      	cmp	r3, #4
 800e5be:	d01d      	beq.n	800e5fc <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800e5c0:	d804      	bhi.n	800e5cc <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	d006      	beq.n	800e5d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e5c6:	2b02      	cmp	r3, #2
 800e5c8:	d02c      	beq.n	800e624 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800e5ca:	bd70      	pop	{r4, r5, r6, pc}
 800e5cc:	2b08      	cmp	r3, #8
 800e5ce:	d01d      	beq.n	800e60c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800e5d0:	2b20      	cmp	r3, #32
 800e5d2:	d1fa      	bne.n	800e5ca <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800e5d4:	6823      	ldr	r3, [r4, #0]
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5da:	4798      	blx	r3
 800e5dc:	e013      	b.n	800e606 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800e5de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e5e2:	d0f7      	beq.n	800e5d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e5e4:	d804      	bhi.n	800e5f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800e5e6:	2b80      	cmp	r3, #128	@ 0x80
 800e5e8:	d0f4      	beq.n	800e5d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e5ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5ee:	e7f0      	b.n	800e5d2 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800e5f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e5f4:	d0ee      	beq.n	800e5d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e5f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e5fa:	e7e5      	b.n	800e5c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800e5fc:	6823      	ldr	r3, [r4, #0]
 800e5fe:	7f01      	ldrb	r1, [r0, #28]
 800e600:	4620      	mov	r0, r4
 800e602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e604:	4798      	blx	r3
 800e606:	6823      	ldr	r3, [r4, #0]
 800e608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e60a:	e006      	b.n	800e61a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800e60c:	6823      	ldr	r3, [r4, #0]
 800e60e:	7f01      	ldrb	r1, [r0, #28]
 800e610:	4620      	mov	r0, r4
 800e612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e614:	4798      	blx	r3
 800e616:	6823      	ldr	r3, [r4, #0]
 800e618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e61a:	4629      	mov	r1, r5
 800e61c:	4620      	mov	r0, r4
 800e61e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e622:	4718      	bx	r3
 800e624:	6823      	ldr	r3, [r4, #0]
 800e626:	4620      	mov	r0, r4
 800e628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e62a:	4798      	blx	r3
 800e62c:	e7f3      	b.n	800e616 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800e62e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800e62e:	4770      	bx	lr

0800e630 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800e630:	4770      	bx	lr

0800e632 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800e632:	4770      	bx	lr

0800e634 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800e634:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800e638:	b510      	push	{r4, lr}
 800e63a:	1ad2      	subs	r2, r2, r3
 800e63c:	2a00      	cmp	r2, #0
 800e63e:	bfdc      	itt	le
 800e640:	6884      	ldrle	r4, [r0, #8]
 800e642:	1912      	addle	r2, r2, r4
 800e644:	2a01      	cmp	r2, #1
 800e646:	dd16      	ble.n	800e676 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800e648:	6842      	ldr	r2, [r0, #4]
 800e64a:	2424      	movs	r4, #36	@ 0x24
 800e64c:	fb04 2303 	mla	r3, r4, r3, r2
 800e650:	f101 0220 	add.w	r2, r1, #32
 800e654:	f851 4b04 	ldr.w	r4, [r1], #4
 800e658:	4291      	cmp	r1, r2
 800e65a:	f843 4b04 	str.w	r4, [r3], #4
 800e65e:	d1f9      	bne.n	800e654 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800e660:	780a      	ldrb	r2, [r1, #0]
 800e662:	701a      	strb	r2, [r3, #0]
 800e664:	68c3      	ldr	r3, [r0, #12]
 800e666:	6882      	ldr	r2, [r0, #8]
 800e668:	f3bf 8f5b 	dmb	ish
 800e66c:	3301      	adds	r3, #1
 800e66e:	429a      	cmp	r2, r3
 800e670:	bfd8      	it	le
 800e672:	1a9b      	suble	r3, r3, r2
 800e674:	60c3      	str	r3, [r0, #12]
 800e676:	bd10      	pop	{r4, pc}

0800e678 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800e678:	6903      	ldr	r3, [r0, #16]
 800e67a:	6882      	ldr	r2, [r0, #8]
 800e67c:	f3bf 8f5b 	dmb	ish
 800e680:	3301      	adds	r3, #1
 800e682:	429a      	cmp	r2, r3
 800e684:	bfd8      	it	le
 800e686:	1a9b      	suble	r3, r3, r2
 800e688:	6103      	str	r3, [r0, #16]
 800e68a:	4770      	bx	lr

0800e68c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800e68c:	b570      	push	{r4, r5, r6, lr}
 800e68e:	4604      	mov	r4, r0
 800e690:	460e      	mov	r6, r1
 800e692:	6860      	ldr	r0, [r4, #4]
 800e694:	6803      	ldr	r3, [r0, #0]
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	4798      	blx	r3
 800e69a:	2800      	cmp	r0, #0
 800e69c:	d1f9      	bne.n	800e692 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800e69e:	4d0d      	ldr	r5, [pc, #52]	@ (800e6d4 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800e6a0:	6828      	ldr	r0, [r5, #0]
 800e6a2:	6803      	ldr	r3, [r0, #0]
 800e6a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e6a6:	4798      	blx	r3
 800e6a8:	f7f4 f99a 	bl	80029e0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800e6ac:	6828      	ldr	r0, [r5, #0]
 800e6ae:	2101      	movs	r1, #1
 800e6b0:	f7ff ff12 	bl	800e4d8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e6b4:	6860      	ldr	r0, [r4, #4]
 800e6b6:	4631      	mov	r1, r6
 800e6b8:	6803      	ldr	r3, [r0, #0]
 800e6ba:	689b      	ldr	r3, [r3, #8]
 800e6bc:	4798      	blx	r3
 800e6be:	6823      	ldr	r3, [r4, #0]
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6c4:	4798      	blx	r3
 800e6c6:	6828      	ldr	r0, [r5, #0]
 800e6c8:	6803      	ldr	r3, [r0, #0]
 800e6ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e6d0:	4718      	bx	r3
 800e6d2:	bf00      	nop
 800e6d4:	24025158 	.word	0x24025158

0800e6d8 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800e6d8:	b508      	push	{r3, lr}
 800e6da:	f7f4 f973 	bl	80029c4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e6de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e6e2:	f7f4 b977 	b.w	80029d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800e6e6 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800e6e6:	b510      	push	{r4, lr}
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	2114      	movs	r1, #20
 800e6ec:	f011 f990 	bl	801fa10 <_ZdlPvj>
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	bd10      	pop	{r4, pc}

0800e6f4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800e6f4:	b570      	push	{r4, r5, r6, lr}
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	6840      	ldr	r0, [r0, #4]
 800e6fa:	6803      	ldr	r3, [r0, #0]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	4798      	blx	r3
 800e700:	4605      	mov	r5, r0
 800e702:	b930      	cbnz	r0, 800e712 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e704:	7a23      	ldrb	r3, [r4, #8]
 800e706:	b123      	cbz	r3, 800e712 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e708:	6860      	ldr	r0, [r4, #4]
 800e70a:	6803      	ldr	r3, [r0, #0]
 800e70c:	695b      	ldr	r3, [r3, #20]
 800e70e:	4798      	blx	r3
 800e710:	7225      	strb	r5, [r4, #8]
 800e712:	6860      	ldr	r0, [r4, #4]
 800e714:	6803      	ldr	r3, [r0, #0]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4798      	blx	r3
 800e71a:	b928      	cbnz	r0, 800e728 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800e71c:	6823      	ldr	r3, [r4, #0]
 800e71e:	4620      	mov	r0, r4
 800e720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e726:	4718      	bx	r3
 800e728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e72c:	f7f4 b960 	b.w	80029f0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800e730 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800e730:	b510      	push	{r4, lr}
 800e732:	6082      	str	r2, [r0, #8]
 800e734:	2200      	movs	r2, #0
 800e736:	4c03      	ldr	r4, [pc, #12]	@ (800e744 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800e738:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800e73c:	e9c0 4100 	strd	r4, r1, [r0]
 800e740:	bd10      	pop	{r4, pc}
 800e742:	bf00      	nop
 800e744:	08023b44 	.word	0x08023b44

0800e748 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800e748:	6840      	ldr	r0, [r0, #4]
 800e74a:	6803      	ldr	r3, [r0, #0]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	4718      	bx	r3

0800e750 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 800e750:	2300      	movs	r3, #0
 800e752:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800e754:	8503      	strh	r3, [r0, #40]	@ 0x28
 800e756:	8543      	strh	r3, [r0, #42]	@ 0x2a
 800e758:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800e75a:	6980      	ldr	r0, [r0, #24]
 800e75c:	b110      	cbz	r0, 800e764 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 800e75e:	6803      	ldr	r3, [r0, #0]
 800e760:	691b      	ldr	r3, [r3, #16]
 800e762:	4718      	bx	r3
 800e764:	4770      	bx	lr

0800e766 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 800e766:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 800e76a:	4770      	bx	lr

0800e76c <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 800e76c:	b538      	push	{r3, r4, r5, lr}
 800e76e:	0e0b      	lsrs	r3, r1, #24
 800e770:	4604      	mov	r4, r0
 800e772:	460d      	mov	r5, r1
 800e774:	7783      	strb	r3, [r0, #30]
 800e776:	6803      	ldr	r3, [r0, #0]
 800e778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e77a:	4798      	blx	r3
 800e77c:	6803      	ldr	r3, [r0, #0]
 800e77e:	4629      	mov	r1, r5
 800e780:	689b      	ldr	r3, [r3, #8]
 800e782:	4798      	blx	r3
 800e784:	6823      	ldr	r3, [r4, #0]
 800e786:	4620      	mov	r0, r4
 800e788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e78a:	4798      	blx	r3
 800e78c:	61a0      	str	r0, [r4, #24]
 800e78e:	bd38      	pop	{r3, r4, r5, pc}

0800e790 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 800e790:	7741      	strb	r1, [r0, #29]
 800e792:	4770      	bx	lr

0800e794 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 800e794:	b530      	push	{r4, r5, lr}
 800e796:	460d      	mov	r5, r1
 800e798:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800e79c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e79e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7a4:	682b      	ldr	r3, [r5, #0]
 800e7a6:	6023      	str	r3, [r4, #0]
 800e7a8:	bd30      	pop	{r4, r5, pc}

0800e7aa <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 800e7aa:	b538      	push	{r3, r4, r5, lr}
 800e7ac:	4604      	mov	r4, r0
 800e7ae:	1d03      	adds	r3, r0, #4
 800e7b0:	6808      	ldr	r0, [r1, #0]
 800e7b2:	2500      	movs	r5, #0
 800e7b4:	6849      	ldr	r1, [r1, #4]
 800e7b6:	c303      	stmia	r3!, {r0, r1}
 800e7b8:	6813      	ldr	r3, [r2, #0]
 800e7ba:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800e7be:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 800e7c2:	6853      	ldr	r3, [r2, #4]
 800e7c4:	61a5      	str	r5, [r4, #24]
 800e7c6:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 800e7ca:	f005 fc07 	bl	8013fdc <_ZN8touchgfx9Matrix3x35resetEv>
 800e7ce:	23ff      	movs	r3, #255	@ 0xff
 800e7d0:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 800e7d4:	7763      	strb	r3, [r4, #29]
 800e7d6:	77a3      	strb	r3, [r4, #30]
 800e7d8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800e7dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800e7de:	2301      	movs	r3, #1
 800e7e0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800e7e4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e7e8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 800e7e8:	ee70 7a41 	vsub.f32	s15, s0, s2
 800e7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e7f4:	4605      	mov	r5, r0
 800e7f6:	ed2d 8b0a 	vpush	{d8-d12}
 800e7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7fe:	b086      	sub	sp, #24
 800e800:	eeb0 ba40 	vmov.f32	s22, s0
 800e804:	6802      	ldr	r2, [r0, #0]
 800e806:	eef0 ba60 	vmov.f32	s23, s1
 800e80a:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 800e80e:	eef0 aa41 	vmov.f32	s21, s2
 800e812:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800e814:	eeb0 aa61 	vmov.f32	s20, s3
 800e818:	eeb0 ca42 	vmov.f32	s24, s4
 800e81c:	eef0 ca62 	vmov.f32	s25, s5
 800e820:	d112      	bne.n	800e848 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800e822:	ee70 7ae1 	vsub.f32	s15, s1, s3
 800e826:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e82e:	d10b      	bne.n	800e848 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800e830:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800e834:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800e836:	3901      	subs	r1, #1
 800e838:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800e83c:	b006      	add	sp, #24
 800e83e:	ecbd 8b0a 	vpop	{d8-d12}
 800e842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e846:	4710      	bx	r2
 800e848:	23ff      	movs	r3, #255	@ 0xff
 800e84a:	4628      	mov	r0, r5
 800e84c:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 800e850:	77ab      	strb	r3, [r5, #30]
 800e852:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800e854:	4798      	blx	r3
 800e856:	eeb0 0a4b 	vmov.f32	s0, s22
 800e85a:	eef0 0a6b 	vmov.f32	s1, s23
 800e85e:	4604      	mov	r4, r0
 800e860:	4640      	mov	r0, r8
 800e862:	f005 fc6a 	bl	801413a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800e866:	eef0 8a40 	vmov.f32	s17, s0
 800e86a:	ed8d 0a00 	vstr	s0, [sp]
 800e86e:	eeb0 0a6a 	vmov.f32	s0, s21
 800e872:	eef0 9a60 	vmov.f32	s19, s1
 800e876:	edcd 0a01 	vstr	s1, [sp, #4]
 800e87a:	4640      	mov	r0, r8
 800e87c:	eef0 0a4a 	vmov.f32	s1, s20
 800e880:	f005 fc5b 	bl	801413a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800e884:	eef4 8a40 	vcmp.f32	s17, s0
 800e888:	eeb0 8a40 	vmov.f32	s16, s0
 800e88c:	ed8d 0a02 	vstr	s0, [sp, #8]
 800e890:	eeb0 9a60 	vmov.f32	s18, s1
 800e894:	edcd 0a03 	vstr	s1, [sp, #12]
 800e898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e89c:	eef4 9a60 	vcmp.f32	s19, s1
 800e8a0:	bf0c      	ite	eq
 800e8a2:	2301      	moveq	r3, #1
 800e8a4:	2300      	movne	r3, #0
 800e8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8aa:	eef4 8a40 	vcmp.f32	s17, s0
 800e8ae:	7463      	strb	r3, [r4, #17]
 800e8b0:	bf0c      	ite	eq
 800e8b2:	2301      	moveq	r3, #1
 800e8b4:	2300      	movne	r3, #0
 800e8b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ba:	74a3      	strb	r3, [r4, #18]
 800e8bc:	d024      	beq.n	800e908 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800e8be:	eef4 9a60 	vcmp.f32	s19, s1
 800e8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c6:	d01f      	beq.n	800e908 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800e8c8:	ee3a aa6b 	vsub.f32	s20, s20, s23
 800e8cc:	4640      	mov	r0, r8
 800e8ce:	ee7a aacb 	vsub.f32	s21, s21, s22
 800e8d2:	eeb0 0a4b 	vmov.f32	s0, s22
 800e8d6:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 800e8da:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 800e8de:	eef0 0a6b 	vmov.f32	s1, s23
 800e8e2:	eea7 0acc 	vfms.f32	s0, s15, s24
 800e8e6:	eeec 0a87 	vfma.f32	s1, s25, s14
 800e8ea:	f005 fc26 	bl	801413a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800e8ee:	ed8d 0a04 	vstr	s0, [sp, #16]
 800e8f2:	ee30 0a68 	vsub.f32	s0, s0, s17
 800e8f6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e8fa:	edcd 0a05 	vstr	s1, [sp, #20]
 800e8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e902:	d121      	bne.n	800e948 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 800e904:	2301      	movs	r3, #1
 800e906:	74a3      	strb	r3, [r4, #18]
 800e908:	7c63      	ldrb	r3, [r4, #17]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d051      	beq.n	800e9b2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 800e90e:	ee39 7a69 	vsub.f32	s14, s18, s19
 800e912:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ea08 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 800e916:	eef4 9ac9 	vcmpe.f32	s19, s18
 800e91a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e922:	edc4 7a08 	vstr	s15, [r4, #32]
 800e926:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 800e92a:	ee17 3a90 	vmov	r3, s15
 800e92e:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 800e932:	b21a      	sxth	r2, r3
 800e934:	ee17 3a90 	vmov	r3, s15
 800e938:	bf48      	it	mi
 800e93a:	8122      	strhmi	r2, [r4, #8]
 800e93c:	b21b      	sxth	r3, r3
 800e93e:	bf56      	itet	pl
 800e940:	80e2      	strhpl	r2, [r4, #6]
 800e942:	80e3      	strhmi	r3, [r4, #6]
 800e944:	8123      	strhpl	r3, [r4, #8]
 800e946:	e02c      	b.n	800e9a2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800e948:	ee70 0ae9 	vsub.f32	s1, s1, s19
 800e94c:	eec0 7a80 	vdiv.f32	s15, s1, s0
 800e950:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e954:	edc4 7a05 	vstr	s15, [r4, #20]
 800e958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e95c:	d102      	bne.n	800e964 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 800e95e:	2301      	movs	r3, #1
 800e960:	7463      	strb	r3, [r4, #17]
 800e962:	e7d1      	b.n	800e908 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800e964:	eeb0 7a69 	vmov.f32	s14, s19
 800e968:	ee39 9a69 	vsub.f32	s18, s18, s19
 800e96c:	ee38 8a68 	vsub.f32	s16, s16, s17
 800e970:	eea8 7ae7 	vfms.f32	s14, s17, s15
 800e974:	ed84 7a06 	vstr	s14, [r4, #24]
 800e978:	ee89 7a27 	vdiv.f32	s14, s18, s15
 800e97c:	ee38 8a47 	vsub.f32	s16, s16, s14
 800e980:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800ea0c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 800e984:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800e988:	ed84 8a07 	vstr	s16, [r4, #28]
 800e98c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e994:	edc4 7a08 	vstr	s15, [r4, #32]
 800e998:	d503      	bpl.n	800e9a2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800e99a:	eeb1 8a48 	vneg.f32	s16, s16
 800e99e:	ed84 8a07 	vstr	s16, [r4, #28]
 800e9a2:	60e7      	str	r7, [r4, #12]
 800e9a4:	7426      	strb	r6, [r4, #16]
 800e9a6:	61ac      	str	r4, [r5, #24]
 800e9a8:	b006      	add	sp, #24
 800e9aa:	ecbd 8b0a 	vpop	{d8-d12}
 800e9ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9b2:	7ca3      	ldrb	r3, [r4, #18]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d0f4      	beq.n	800e9a2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800e9b8:	ee38 7a68 	vsub.f32	s14, s16, s17
 800e9bc:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800ea08 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 800e9c0:	eef4 8ac8 	vcmpe.f32	s17, s16
 800e9c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9cc:	edc4 7a08 	vstr	s15, [r4, #32]
 800e9d0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e9d4:	ee17 3a90 	vmov	r3, s15
 800e9d8:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 800e9dc:	b21a      	sxth	r2, r3
 800e9de:	ee17 3a90 	vmov	r3, s15
 800e9e2:	bf48      	it	mi
 800e9e4:	8122      	strhmi	r2, [r4, #8]
 800e9e6:	b21b      	sxth	r3, r3
 800e9e8:	bf56      	itet	pl
 800e9ea:	80e2      	strhpl	r2, [r4, #6]
 800e9ec:	80e3      	strhmi	r3, [r4, #6]
 800e9ee:	8123      	strhpl	r3, [r4, #8]
 800e9f0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e9f4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800e9f8:	1a9b      	subs	r3, r3, r2
 800e9fa:	ee07 3a90 	vmov	s15, r3
 800e9fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea02:	edc4 7a07 	vstr	s15, [r4, #28]
 800ea06:	e7cc      	b.n	800e9a2 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800ea08:	447ffffe 	.word	0x447ffffe
 800ea0c:	44800000 	.word	0x44800000

0800ea10 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 800ea10:	b510      	push	{r4, lr}
 800ea12:	ed2d 8b02 	vpush	{d8}
 800ea16:	eef0 8a62 	vmov.f32	s17, s5
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	4604      	mov	r4, r0
 800ea1e:	eeb0 8a42 	vmov.f32	s16, s4
 800ea22:	f010 fd67 	bl	801f4f4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 800ea26:	eef0 7a68 	vmov.f32	s15, s17
 800ea2a:	6823      	ldr	r3, [r4, #0]
 800ea2c:	4620      	mov	r0, r4
 800ea2e:	689b      	ldr	r3, [r3, #8]
 800ea30:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ea34:	ee17 2a90 	vmov	r2, s15
 800ea38:	eef0 7a48 	vmov.f32	s15, s16
 800ea3c:	ecbd 8b02 	vpop	{d8}
 800ea40:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ea44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea48:	ee17 1a90 	vmov	r1, s15
 800ea4c:	4718      	bx	r3

0800ea4e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 800ea4e:	b510      	push	{r4, lr}
 800ea50:	ed2d 8b02 	vpush	{d8}
 800ea54:	eef0 8a63 	vmov.f32	s17, s7
 800ea58:	2100      	movs	r1, #0
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	eeb0 8a43 	vmov.f32	s16, s6
 800ea60:	f010 fe0a 	bl	801f678 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 800ea64:	eef0 7a68 	vmov.f32	s15, s17
 800ea68:	6823      	ldr	r3, [r4, #0]
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	689b      	ldr	r3, [r3, #8]
 800ea6e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ea72:	ee17 2a90 	vmov	r2, s15
 800ea76:	eef0 7a48 	vmov.f32	s15, s16
 800ea7a:	ecbd 8b02 	vpop	{d8}
 800ea7e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ea82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea86:	ee17 1a90 	vmov	r1, s15
 800ea8a:	4718      	bx	r3

0800ea8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 800ea8c:	b513      	push	{r0, r1, r4, lr}
 800ea8e:	4604      	mov	r4, r0
 800ea90:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800ea92:	f005 fb52 	bl	801413a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ea96:	eef0 7a60 	vmov.f32	s15, s1
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eaa0:	ee17 2a90 	vmov	r2, s15
 800eaa4:	eef0 7a40 	vmov.f32	s15, s0
 800eaa8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eaac:	ee17 1a90 	vmov	r1, s15
 800eab0:	b002      	add	sp, #8
 800eab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eab6:	f010 bc77 	b.w	801f3a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 800eaba:	b513      	push	{r0, r1, r4, lr}
 800eabc:	4604      	mov	r4, r0
 800eabe:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800eac0:	f005 fb3b 	bl	801413a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800eac4:	eef0 7a60 	vmov.f32	s15, s1
 800eac8:	4620      	mov	r0, r4
 800eaca:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eace:	ee17 2a90 	vmov	r2, s15
 800ead2:	eef0 7a40 	vmov.f32	s15, s0
 800ead6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800eada:	ee17 1a90 	vmov	r1, s15
 800eade:	b002      	add	sp, #8
 800eae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eae4:	f010 bcad 	b.w	801f442 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

0800eae8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 800eae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaea:	2400      	movs	r4, #0
 800eaec:	9f07      	ldr	r7, [sp, #28]
 800eaee:	f04f 0e01 	mov.w	lr, #1
 800eaf2:	4626      	mov	r6, r4
 800eaf4:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 800eaf8:	4463      	add	r3, ip
 800eafa:	4563      	cmp	r3, ip
 800eafc:	d02d      	beq.n	800eb5a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 800eafe:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 800eb02:	2d06      	cmp	r5, #6
 800eb04:	d8f9      	bhi.n	800eafa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800eb06:	fa0e f505 	lsl.w	r5, lr, r5
 800eb0a:	f015 0f66 	tst.w	r5, #102	@ 0x66
 800eb0e:	d10d      	bne.n	800eb2c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 800eb10:	f015 0f10 	tst.w	r5, #16
 800eb14:	d117      	bne.n	800eb46 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 800eb16:	072d      	lsls	r5, r5, #28
 800eb18:	d5ef      	bpl.n	800eafa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800eb1a:	3801      	subs	r0, #1
 800eb1c:	b91e      	cbnz	r6, 800eb26 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 800eb1e:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 800eb22:	682d      	ldr	r5, [r5, #0]
 800eb24:	600d      	str	r5, [r1, #0]
 800eb26:	b96c      	cbnz	r4, 800eb44 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800eb28:	2601      	movs	r6, #1
 800eb2a:	e7e6      	b.n	800eafa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800eb2c:	b926      	cbnz	r6, 800eb38 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 800eb2e:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800eb32:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800eb36:	600b      	str	r3, [r1, #0]
 800eb38:	b924      	cbnz	r4, 800eb44 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800eb3a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800eb3e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800eb42:	6013      	str	r3, [r2, #0]
 800eb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb46:	3801      	subs	r0, #1
 800eb48:	b91c      	cbnz	r4, 800eb52 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 800eb4a:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 800eb4e:	6824      	ldr	r4, [r4, #0]
 800eb50:	6014      	str	r4, [r2, #0]
 800eb52:	2e00      	cmp	r6, #0
 800eb54:	d1f6      	bne.n	800eb44 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800eb56:	2401      	movs	r4, #1
 800eb58:	e7cf      	b.n	800eafa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800eb5a:	b90e      	cbnz	r6, 800eb60 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	600b      	str	r3, [r1, #0]
 800eb60:	2c00      	cmp	r4, #0
 800eb62:	d1ef      	bne.n	800eb44 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800eb64:	2300      	movs	r3, #0
 800eb66:	e7ec      	b.n	800eb42 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0800eb68 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 800eb68:	b538      	push	{r3, r4, r5, lr}
 800eb6a:	ed2d 8b0a 	vpush	{d8-d12}
 800eb6e:	eef0 ba40 	vmov.f32	s23, s0
 800eb72:	4604      	mov	r4, r0
 800eb74:	eeb0 ca60 	vmov.f32	s24, s1
 800eb78:	460d      	mov	r5, r1
 800eb7a:	eef0 aa41 	vmov.f32	s21, s2
 800eb7e:	eeb0 ba61 	vmov.f32	s22, s3
 800eb82:	eeb0 9a42 	vmov.f32	s18, s4
 800eb86:	eef0 9a62 	vmov.f32	s19, s5
 800eb8a:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 800eb8e:	ee7b 8a29 	vadd.f32	s17, s22, s19
 800eb92:	ee3a 8a89 	vadd.f32	s16, s21, s18
 800eb96:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800eb9a:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800eb9e:	ee3c 0a68 	vsub.f32	s0, s24, s17
 800eba2:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 800eba6:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ebaa:	eea7 0aa7 	vfma.f32	s0, s15, s15
 800ebae:	f010 ff79 	bl	801faa4 <sqrtf>
 800ebb2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ebb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebba:	d12e      	bne.n	800ec1a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 800ebbc:	ee79 7a6a 	vsub.f32	s15, s18, s21
 800ebc0:	ee39 7acb 	vsub.f32	s14, s19, s22
 800ebc4:	eeb0 8a6a 	vmov.f32	s16, s21
 800ebc8:	eef0 8a4b 	vmov.f32	s17, s22
 800ebcc:	eea7 8a8a 	vfma.f32	s16, s15, s20
 800ebd0:	eee7 8a0a 	vfma.f32	s17, s14, s20
 800ebd4:	eea7 8a0a 	vfma.f32	s16, s14, s20
 800ebd8:	eee7 8aca 	vfms.f32	s17, s15, s20
 800ebdc:	2d02      	cmp	r5, #2
 800ebde:	dc2f      	bgt.n	800ec40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 800ebe0:	3501      	adds	r5, #1
 800ebe2:	eef0 1a4b 	vmov.f32	s3, s22
 800ebe6:	eeb0 1a6a 	vmov.f32	s2, s21
 800ebea:	4620      	mov	r0, r4
 800ebec:	4629      	mov	r1, r5
 800ebee:	eef0 2a68 	vmov.f32	s5, s17
 800ebf2:	eeb0 2a48 	vmov.f32	s4, s16
 800ebf6:	eef0 0a4c 	vmov.f32	s1, s24
 800ebfa:	eeb0 0a6b 	vmov.f32	s0, s23
 800ebfe:	f7ff ffb3 	bl	800eb68 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800ec02:	eef0 0a68 	vmov.f32	s1, s17
 800ec06:	eeb0 0a48 	vmov.f32	s0, s16
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f7ff ff55 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ec10:	eeb0 ba68 	vmov.f32	s22, s17
 800ec14:	eef0 aa48 	vmov.f32	s21, s16
 800ec18:	e7b9      	b.n	800eb8e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 800ec1a:	ee38 8a6b 	vsub.f32	s16, s16, s23
 800ec1e:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800ec22:	ee78 8acc 	vsub.f32	s17, s17, s24
 800ec26:	ee28 7a27 	vmul.f32	s14, s16, s15
 800ec2a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800ec2e:	ee87 8a00 	vdiv.f32	s16, s14, s0
 800ec32:	eec7 8a80 	vdiv.f32	s17, s15, s0
 800ec36:	ee3b 8a88 	vadd.f32	s16, s23, s16
 800ec3a:	ee7c 8a28 	vadd.f32	s17, s24, s17
 800ec3e:	e7cd      	b.n	800ebdc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 800ec40:	eef0 0a68 	vmov.f32	s1, s17
 800ec44:	4620      	mov	r0, r4
 800ec46:	eeb0 0a48 	vmov.f32	s0, s16
 800ec4a:	f7ff ff36 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ec4e:	ecbd 8b0a 	vpop	{d8-d12}
 800ec52:	bd38      	pop	{r3, r4, r5, pc}

0800ec54 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 800ec54:	b510      	push	{r4, lr}
 800ec56:	ed2d 8b0a 	vpush	{d8-d12}
 800ec5a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800ec5e:	4604      	mov	r4, r0
 800ec60:	eeb0 ca40 	vmov.f32	s24, s0
 800ec64:	2b02      	cmp	r3, #2
 800ec66:	eeb0 9a60 	vmov.f32	s18, s1
 800ec6a:	eef0 9a41 	vmov.f32	s19, s2
 800ec6e:	eef0 8a61 	vmov.f32	s17, s3
 800ec72:	eeb0 ba42 	vmov.f32	s22, s4
 800ec76:	eef0 ba62 	vmov.f32	s23, s5
 800ec7a:	eeb0 aa43 	vmov.f32	s20, s6
 800ec7e:	eef0 aa63 	vmov.f32	s21, s7
 800ec82:	eeb0 8a44 	vmov.f32	s16, s8
 800ec86:	eef0 ca64 	vmov.f32	s25, s9
 800ec8a:	d12c      	bne.n	800ece6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 800ec8c:	eef0 0a62 	vmov.f32	s1, s5
 800ec90:	eeb0 0a42 	vmov.f32	s0, s4
 800ec94:	f7ff ff11 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ec98:	ee79 9acb 	vsub.f32	s19, s19, s22
 800ec9c:	ee7a caec 	vsub.f32	s25, s21, s25
 800eca0:	ee78 8aeb 	vsub.f32	s17, s17, s23
 800eca4:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800eca8:	ee69 9aac 	vmul.f32	s19, s19, s25
 800ecac:	ee28 8a88 	vmul.f32	s16, s17, s16
 800ecb0:	eef4 9ac8 	vcmpe.f32	s19, s16
 800ecb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb8:	db0f      	blt.n	800ecda <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 800ecba:	2101      	movs	r1, #1
 800ecbc:	eef0 2a6a 	vmov.f32	s5, s21
 800ecc0:	eeb0 2a4a 	vmov.f32	s4, s20
 800ecc4:	4620      	mov	r0, r4
 800ecc6:	eef0 1a6b 	vmov.f32	s3, s23
 800ecca:	eeb0 1a4b 	vmov.f32	s2, s22
 800ecce:	eef0 0a49 	vmov.f32	s1, s18
 800ecd2:	eeb0 0a4c 	vmov.f32	s0, s24
 800ecd6:	f7ff ff47 	bl	800eb68 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800ecda:	eef0 0a6a 	vmov.f32	s1, s21
 800ecde:	4620      	mov	r0, r4
 800ece0:	eeb0 0a4a 	vmov.f32	s0, s20
 800ece4:	e035      	b.n	800ed52 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d138      	bne.n	800ed5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800ecea:	ee31 4ae2 	vsub.f32	s8, s3, s5
 800ecee:	ee33 6a48 	vsub.f32	s12, s6, s16
 800ecf2:	ee71 7a42 	vsub.f32	s15, s2, s4
 800ecf6:	ee73 6ae4 	vsub.f32	s13, s7, s9
 800ecfa:	ee26 7a44 	vnmul.f32	s14, s12, s8
 800ecfe:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ed02:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ed06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed0a:	d027      	beq.n	800ed5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800ed0c:	ee28 8a63 	vnmul.f32	s16, s16, s7
 800ed10:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 800ed14:	eea4 8a83 	vfma.f32	s16, s9, s6
 800ed18:	eee1 8a22 	vfma.f32	s17, s2, s5
 800ed1c:	ee68 7a67 	vnmul.f32	s15, s16, s15
 800ed20:	ee28 8a44 	vnmul.f32	s16, s16, s8
 800ed24:	eee6 7a28 	vfma.f32	s15, s12, s17
 800ed28:	eea6 8aa8 	vfma.f32	s16, s13, s17
 800ed2c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800ed30:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 800ed34:	eec8 0a07 	vdiv.f32	s1, s16, s14
 800ed38:	ee3c ca40 	vsub.f32	s24, s24, s0
 800ed3c:	ee39 9a60 	vsub.f32	s18, s18, s1
 800ed40:	ee29 9a09 	vmul.f32	s18, s18, s18
 800ed44:	eeac 9a0c 	vfma.f32	s18, s24, s24
 800ed48:	eef4 7ac9 	vcmpe.f32	s15, s18
 800ed4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed50:	db04      	blt.n	800ed5c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800ed52:	f7ff feb2 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ed56:	ecbd 8b0a 	vpop	{d8-d12}
 800ed5a:	bd10      	pop	{r4, pc}
 800ed5c:	eef0 0a6b 	vmov.f32	s1, s23
 800ed60:	4620      	mov	r0, r4
 800ed62:	eeb0 0a4b 	vmov.f32	s0, s22
 800ed66:	f7ff fea8 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ed6a:	e7b6      	b.n	800ecda <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

0800ed6c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 800ed6c:	b510      	push	{r4, lr}
 800ed6e:	ed2d 8b0c 	vpush	{d8-d13}
 800ed72:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 800ed76:	4604      	mov	r4, r0
 800ed78:	eeb0 9a40 	vmov.f32	s18, s0
 800ed7c:	eef0 9a60 	vmov.f32	s19, s1
 800ed80:	eef0 aa41 	vmov.f32	s21, s2
 800ed84:	eeb0 ba61 	vmov.f32	s22, s3
 800ed88:	b933      	cbnz	r3, 800ed98 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 800ed8a:	f7ff fe96 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ed8e:	eef0 0a4b 	vmov.f32	s1, s22
 800ed92:	eeb0 0a6a 	vmov.f32	s0, s21
 800ed96:	e015      	b.n	800edc4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 800ed98:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ed9c:	2b02      	cmp	r3, #2
 800ed9e:	ee71 8a40 	vsub.f32	s17, s2, s0
 800eda2:	ee31 8ae0 	vsub.f32	s16, s3, s1
 800eda6:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800edaa:	ee28 8a27 	vmul.f32	s16, s16, s15
 800edae:	d10f      	bne.n	800edd0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 800edb0:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800edb4:	ee30 0a08 	vadd.f32	s0, s0, s16
 800edb8:	f7ff fe7f 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800edbc:	ee7b 0a68 	vsub.f32	s1, s22, s17
 800edc0:	ee3a 0a88 	vadd.f32	s0, s21, s16
 800edc4:	4620      	mov	r0, r4
 800edc6:	f7ff fe78 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800edca:	ecbd 8b0c 	vpop	{d8-d13}
 800edce:	bd10      	pop	{r4, pc}
 800edd0:	f7ff fe73 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800edd4:	eef0 0a69 	vmov.f32	s1, s19
 800edd8:	eeb0 0a49 	vmov.f32	s0, s18
 800eddc:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800ef0c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 800ede0:	eeb1 aa68 	vneg.f32	s20, s17
 800ede4:	eddf ba4a 	vldr	s23, [pc, #296]	@ 800ef10 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 800ede8:	eee8 0a27 	vfma.f32	s1, s16, s15
 800edec:	4620      	mov	r0, r4
 800edee:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800edf2:	ed9f ca48 	vldr	s24, [pc, #288]	@ 800ef14 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 800edf6:	eddf ca48 	vldr	s25, [pc, #288]	@ 800ef18 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 800edfa:	ed9f da48 	vldr	s26, [pc, #288]	@ 800ef1c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 800edfe:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800ee02:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800ee06:	f7ff fe58 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ee0a:	eef0 0a69 	vmov.f32	s1, s19
 800ee0e:	eeb0 0a49 	vmov.f32	s0, s18
 800ee12:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800ef20 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 800ee16:	4620      	mov	r0, r4
 800ee18:	eee8 0a27 	vfma.f32	s1, s16, s15
 800ee1c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800ee20:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800ee24:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800ee28:	f7ff fe47 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ee2c:	eef0 0a69 	vmov.f32	s1, s19
 800ee30:	eeb0 0a49 	vmov.f32	s0, s18
 800ee34:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800ef24 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 800ee38:	4620      	mov	r0, r4
 800ee3a:	eee8 0a27 	vfma.f32	s1, s16, s15
 800ee3e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800ee42:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800ee46:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800ee4a:	f7ff fe36 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ee4e:	eef0 0a69 	vmov.f32	s1, s19
 800ee52:	eeb0 0a49 	vmov.f32	s0, s18
 800ee56:	eddf 7a34 	vldr	s15, [pc, #208]	@ 800ef28 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	eee8 0a27 	vfma.f32	s1, s16, s15
 800ee60:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800ee64:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800ee68:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800ee6c:	f7ff fe25 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ee70:	ee79 0a88 	vadd.f32	s1, s19, s16
 800ee74:	ee39 0a28 	vadd.f32	s0, s18, s17
 800ee78:	4620      	mov	r0, r4
 800ee7a:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800ee7e:	ee30 0a08 	vadd.f32	s0, s0, s16
 800ee82:	f7ff fe1a 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ee86:	eef0 0a69 	vmov.f32	s1, s19
 800ee8a:	eeb0 0a49 	vmov.f32	s0, s18
 800ee8e:	eddf 7a27 	vldr	s15, [pc, #156]	@ 800ef2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 800ee92:	4620      	mov	r0, r4
 800ee94:	eee8 0a27 	vfma.f32	s1, s16, s15
 800ee98:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800ee9c:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800eea0:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800eea4:	f7ff fe09 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800eea8:	eef0 0a69 	vmov.f32	s1, s19
 800eeac:	eeb0 0a49 	vmov.f32	s0, s18
 800eeb0:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800ef30 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	eee8 0a27 	vfma.f32	s1, s16, s15
 800eeba:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800eebe:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800eec2:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800eec6:	f7ff fdf8 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800eeca:	eef0 0a69 	vmov.f32	s1, s19
 800eece:	eeb0 0a49 	vmov.f32	s0, s18
 800eed2:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800ef34 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 800eed6:	4620      	mov	r0, r4
 800eed8:	eee8 0a27 	vfma.f32	s1, s16, s15
 800eedc:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800eee0:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800eee4:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800eee8:	f7ff fde7 	bl	800eaba <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800eeec:	eef0 0a69 	vmov.f32	s1, s19
 800eef0:	eeb0 0a49 	vmov.f32	s0, s18
 800eef4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800ef38 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 800eef8:	4620      	mov	r0, r4
 800eefa:	eee8 0a27 	vfma.f32	s1, s16, s15
 800eefe:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800ef02:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800ef06:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800ef0a:	e73e      	b.n	800ed8a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 800ef0c:	3d23d70a 	.word	0x3d23d70a
 800ef10:	3e8f5c29 	.word	0x3e8f5c29
 800ef14:	3f19999a 	.word	0x3f19999a
 800ef18:	3f4ccccd 	.word	0x3f4ccccd
 800ef1c:	3f75c28f 	.word	0x3f75c28f
 800ef20:	3e4ccccd 	.word	0x3e4ccccd
 800ef24:	3ecccccd 	.word	0x3ecccccd
 800ef28:	3f3851ec 	.word	0x3f3851ec
 800ef2c:	3fa3d70a 	.word	0x3fa3d70a
 800ef30:	3fcccccd 	.word	0x3fcccccd
 800ef34:	3fe66666 	.word	0x3fe66666
 800ef38:	3ffae148 	.word	0x3ffae148

0800ef3c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 800ef3c:	b570      	push	{r4, r5, r6, lr}
 800ef3e:	ed2d 8b06 	vpush	{d8-d10}
 800ef42:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800ef46:	eef0 aa40 	vmov.f32	s21, s0
 800ef4a:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 800ef4e:	4604      	mov	r4, r0
 800ef50:	ee30 8ac8 	vsub.f32	s16, s1, s16
 800ef54:	ee30 9a49 	vsub.f32	s18, s0, s18
 800ef58:	eeb0 aa60 	vmov.f32	s20, s1
 800ef5c:	ee28 0a08 	vmul.f32	s0, s16, s16
 800ef60:	eea9 0a09 	vfma.f32	s0, s18, s18
 800ef64:	f010 fd9e 	bl	801faa4 <sqrtf>
 800ef68:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ef6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef70:	dd36      	ble.n	800efe0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 800ef72:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800ef76:	2600      	movs	r6, #0
 800ef78:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 800ef7c:	eec0 6a27 	vdiv.f32	s13, s0, s15
 800ef80:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 800ef84:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 800ef88:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800ef8c:	eec8 8a26 	vdiv.f32	s17, s16, s13
 800ef90:	ee89 8a26 	vdiv.f32	s16, s18, s13
 800ef94:	ee70 9a28 	vadd.f32	s19, s0, s17
 800ef98:	ee78 8aaa 	vadd.f32	s17, s17, s21
 800ef9c:	ee30 9ac8 	vsub.f32	s18, s1, s16
 800efa0:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800efa4:	b1fd      	cbz	r5, 800efe6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 800efa6:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 800efaa:	eef0 0a49 	vmov.f32	s1, s18
 800efae:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 800efb2:	eeb0 0a69 	vmov.f32	s0, s19
 800efb6:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 800efba:	4620      	mov	r0, r4
 800efbc:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 800efc0:	f7ff fd64 	bl	800ea8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800efc4:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 800efc8:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 800efcc:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 800efd0:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 800efd4:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 800efd8:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 800efdc:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 800efe0:	ecbd 8b06 	vpop	{d8-d10}
 800efe4:	bd70      	pop	{r4, r5, r6, pc}
 800efe6:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 800efea:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800efee:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800eff2:	b16b      	cbz	r3, 800f010 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 800eff4:	eef0 1a49 	vmov.f32	s3, s18
 800eff8:	4620      	mov	r0, r4
 800effa:	eeb0 1a69 	vmov.f32	s2, s19
 800effe:	eef0 0a62 	vmov.f32	s1, s5
 800f002:	eeb0 0a42 	vmov.f32	s0, s4
 800f006:	f7ff feb1 	bl	800ed6c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f00a:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 800f00e:	e7db      	b.n	800efc8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 800f010:	eef0 4a48 	vmov.f32	s9, s16
 800f014:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800f018:	eeb0 4a68 	vmov.f32	s8, s17
 800f01c:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800f020:	eef0 3a49 	vmov.f32	s7, s18
 800f024:	4620      	mov	r0, r4
 800f026:	eeb0 3a69 	vmov.f32	s6, s19
 800f02a:	f7ff fe13 	bl	800ec54 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800f02e:	e7cb      	b.n	800efc8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

0800f030 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 800f030:	ee07 2a90 	vmov	s15, r2
 800f034:	ee07 1a10 	vmov	s14, r1
 800f038:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800f03c:	eddf 7a04 	vldr	s15, [pc, #16]	@ 800f050 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 800f040:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800f044:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f048:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f04c:	f7ff bf76 	b.w	800ef3c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f050:	3d000000 	.word	0x3d000000

0800f054 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 800f054:	b538      	push	{r3, r4, r5, lr}
 800f056:	ed2d 8b02 	vpush	{d8}
 800f05a:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 800f05e:	4604      	mov	r4, r0
 800f060:	b31d      	cbz	r5, 800f0aa <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 800f062:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 800f066:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800f06a:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 800f06e:	ee78 8a67 	vsub.f32	s17, s16, s15
 800f072:	ee38 8a27 	vadd.f32	s16, s16, s15
 800f076:	eef0 0a68 	vmov.f32	s1, s17
 800f07a:	f7ff fd07 	bl	800ea8c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800f07e:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800f082:	eef0 1a48 	vmov.f32	s3, s16
 800f086:	4620      	mov	r0, r4
 800f088:	eeb0 0a41 	vmov.f32	s0, s2
 800f08c:	eef0 0a68 	vmov.f32	s1, s17
 800f090:	f7ff fe6c 	bl	800ed6c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f094:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800f098:	eef0 1a68 	vmov.f32	s3, s17
 800f09c:	4620      	mov	r0, r4
 800f09e:	eef0 0a48 	vmov.f32	s1, s16
 800f0a2:	eeb0 0a41 	vmov.f32	s0, s2
 800f0a6:	f7ff fe61 	bl	800ed6c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f0aa:	4628      	mov	r0, r5
 800f0ac:	ecbd 8b02 	vpop	{d8}
 800f0b0:	bd38      	pop	{r3, r4, r5, pc}

0800f0b2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 800f0b2:	b510      	push	{r4, lr}
 800f0b4:	ed2d 8b02 	vpush	{d8}
 800f0b8:	4604      	mov	r4, r0
 800f0ba:	eeb0 8a40 	vmov.f32	s16, s0
 800f0be:	eef0 8a60 	vmov.f32	s17, s1
 800f0c2:	f7ff ffc7 	bl	800f054 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f0c6:	b9d0      	cbnz	r0, 800f0fe <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 800f0ce:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 800f0d2:	eef0 0a68 	vmov.f32	s1, s17
 800f0d6:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 800f0da:	eeb0 0a48 	vmov.f32	s0, s16
 800f0de:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 800f0e2:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800f0e6:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800f0ea:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800f0ee:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800f0f2:	f7ff fdaf 	bl	800ec54 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800f0f6:	2001      	movs	r0, #1
 800f0f8:	ecbd 8b02 	vpop	{d8}
 800f0fc:	bd10      	pop	{r4, pc}
 800f0fe:	2000      	movs	r0, #0
 800f100:	e7fa      	b.n	800f0f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

0800f102 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 800f102:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 800f106:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 800f10a:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 800f10e:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 800f112:	f7ff be2b 	b.w	800ed6c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

0800f118 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 800f118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f11c:	b089      	sub	sp, #36	@ 0x24
 800f11e:	461c      	mov	r4, r3
 800f120:	4682      	mov	sl, r0
 800f122:	4615      	mov	r5, r2
 800f124:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800f128:	f10d 0820 	add.w	r8, sp, #32
 800f12c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f12e:	9304      	str	r3, [sp, #16]
 800f130:	2300      	movs	r3, #0
 800f132:	9105      	str	r1, [sp, #20]
 800f134:	9306      	str	r3, [sp, #24]
 800f136:	f848 3d04 	str.w	r3, [r8, #-4]!
 800f13a:	9b04      	ldr	r3, [sp, #16]
 800f13c:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 800f140:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 800f144:	9b05      	ldr	r3, [sp, #20]
 800f146:	429d      	cmp	r5, r3
 800f148:	d96d      	bls.n	800f226 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 800f14a:	3d01      	subs	r5, #1
 800f14c:	f819 3005 	ldrb.w	r3, [r9, r5]
 800f150:	2b06      	cmp	r3, #6
 800f152:	d8f7      	bhi.n	800f144 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f154:	a201      	add	r2, pc, #4	@ (adr r2, 800f15c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 800f156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f15a:	bf00      	nop
 800f15c:	0800f17b 	.word	0x0800f17b
 800f160:	0800f145 	.word	0x0800f145
 800f164:	0800f179 	.word	0x0800f179
 800f168:	0800f19d 	.word	0x0800f19d
 800f16c:	0800f19d 	.word	0x0800f19d
 800f170:	0800f1a1 	.word	0x0800f1a1
 800f174:	0800f1e1 	.word	0x0800f1e1
 800f178:	3c02      	subs	r4, #2
 800f17a:	4650      	mov	r0, sl
 800f17c:	9400      	str	r4, [sp, #0]
 800f17e:	462b      	mov	r3, r5
 800f180:	4642      	mov	r2, r8
 800f182:	a906      	add	r1, sp, #24
 800f184:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f188:	f7ff fcae 	bl	800eae8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f18c:	eddd 0a07 	vldr	s1, [sp, #28]
 800f190:	ed9d 0a06 	vldr	s0, [sp, #24]
 800f194:	4630      	mov	r0, r6
 800f196:	f7ff fed1 	bl	800ef3c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f19a:	e7d3      	b.n	800f144 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f19c:	3c01      	subs	r4, #1
 800f19e:	e7ec      	b.n	800f17a <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 800f1a0:	f1a4 0b04 	sub.w	fp, r4, #4
 800f1a4:	3c02      	subs	r4, #2
 800f1a6:	4650      	mov	r0, sl
 800f1a8:	462b      	mov	r3, r5
 800f1aa:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f1ae:	f8cd b000 	str.w	fp, [sp]
 800f1b2:	4642      	mov	r2, r8
 800f1b4:	a906      	add	r1, sp, #24
 800f1b6:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f1ba:	f7ff fc95 	bl	800eae8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f1be:	eddd 2a07 	vldr	s5, [sp, #28]
 800f1c2:	ed9d 2a06 	vldr	s4, [sp, #24]
 800f1c6:	4630      	mov	r0, r6
 800f1c8:	ed54 1a01 	vldr	s3, [r4, #-4]
 800f1cc:	ed14 1a02 	vldr	s2, [r4, #-8]
 800f1d0:	edd4 0a01 	vldr	s1, [r4, #4]
 800f1d4:	ed94 0a00 	vldr	s0, [r4]
 800f1d8:	f7ff fc1a 	bl	800ea10 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f1dc:	465c      	mov	r4, fp
 800f1de:	e7b1      	b.n	800f144 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f1e0:	f1a4 0b06 	sub.w	fp, r4, #6
 800f1e4:	3c02      	subs	r4, #2
 800f1e6:	4650      	mov	r0, sl
 800f1e8:	462b      	mov	r3, r5
 800f1ea:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f1ee:	f8cd b000 	str.w	fp, [sp]
 800f1f2:	4642      	mov	r2, r8
 800f1f4:	a906      	add	r1, sp, #24
 800f1f6:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f1fa:	f7ff fc75 	bl	800eae8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f1fe:	eddd 3a07 	vldr	s7, [sp, #28]
 800f202:	ed9d 3a06 	vldr	s6, [sp, #24]
 800f206:	4630      	mov	r0, r6
 800f208:	ed54 2a03 	vldr	s5, [r4, #-12]
 800f20c:	ed14 2a04 	vldr	s4, [r4, #-16]
 800f210:	ed54 1a01 	vldr	s3, [r4, #-4]
 800f214:	ed14 1a02 	vldr	s2, [r4, #-8]
 800f218:	edd4 0a01 	vldr	s1, [r4, #4]
 800f21c:	ed94 0a00 	vldr	s0, [r4]
 800f220:	f7ff fc15 	bl	800ea4e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f224:	e7da      	b.n	800f1dc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 800f226:	9b04      	ldr	r3, [sp, #16]
 800f228:	b113      	cbz	r3, 800f230 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 800f22a:	4630      	mov	r0, r6
 800f22c:	f7ff ff69 	bl	800f102 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 800f230:	b009      	add	sp, #36	@ 0x24
 800f232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f236:	bf00      	nop

0800f238 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 800f238:	eef0 7a60 	vmov.f32	s15, s1
 800f23c:	6803      	ldr	r3, [r0, #0]
 800f23e:	689b      	ldr	r3, [r3, #8]
 800f240:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f244:	ee17 2a90 	vmov	r2, s15
 800f248:	eef0 7a40 	vmov.f32	s15, s0
 800f24c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f250:	ee17 1a90 	vmov	r1, s15
 800f254:	4718      	bx	r3
	...

0800f258 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 800f258:	4b04      	ldr	r3, [pc, #16]	@ (800f26c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 800f25a:	b510      	push	{r4, lr}
 800f25c:	4604      	mov	r4, r0
 800f25e:	f840 3b14 	str.w	r3, [r0], #20
 800f262:	f000 ffff 	bl	8010264 <_ZN8touchgfx7OutlineD1Ev>
 800f266:	4620      	mov	r0, r4
 800f268:	bd10      	pop	{r4, pc}
 800f26a:	bf00      	nop
 800f26c:	080240f4 	.word	0x080240f4

0800f270 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 800f270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f274:	ed2d 8b04 	vpush	{d8-d9}
 800f278:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 800f27c:	b0b5      	sub	sp, #212	@ 0xd4
 800f27e:	4605      	mov	r5, r0
 800f280:	468b      	mov	fp, r1
 800f282:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f286:	9206      	str	r2, [sp, #24]
 800f288:	461e      	mov	r6, r3
 800f28a:	2400      	movs	r4, #0
 800f28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f290:	f240 814f 	bls.w	800f532 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 800f294:	23ff      	movs	r3, #255	@ 0xff
 800f296:	1d02      	adds	r2, r0, #4
 800f298:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 800f538 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 800f29c:	f04f 0800 	mov.w	r8, #0
 800f2a0:	9300      	str	r3, [sp, #0]
 800f2a2:	af08      	add	r7, sp, #32
 800f2a4:	6981      	ldr	r1, [r0, #24]
 800f2a6:	a808      	add	r0, sp, #32
 800f2a8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f2aa:	eef0 9a49 	vmov.f32	s19, s18
 800f2ae:	f00f ff2f 	bl	801f110 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800f2b2:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 800f2b6:	4ba1      	ldr	r3, [pc, #644]	@ (800f53c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 800f2b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f2bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	9308      	str	r3, [sp, #32]
 800f2c4:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 800f2c8:	edd5 6a08 	vldr	s13, [r5, #32]
 800f2cc:	eeb0 8a49 	vmov.f32	s16, s18
 800f2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2d4:	9325      	str	r3, [sp, #148]	@ 0x94
 800f2d6:	f04f 0300 	mov.w	r3, #0
 800f2da:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 800f2de:	7f6a      	ldrb	r2, [r5, #29]
 800f2e0:	eef0 8a49 	vmov.f32	s17, s18
 800f2e4:	bf48      	it	mi
 800f2e6:	eef1 7a67 	vnegmi.f32	s15, s15
 800f2ea:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 800f2ee:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 800f2f2:	46c1      	mov	r9, r8
 800f2f4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f2f8:	f04f 0a01 	mov.w	sl, #1
 800f2fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f300:	7fab      	ldrb	r3, [r5, #30]
 800f302:	942a      	str	r4, [sp, #168]	@ 0xa8
 800f304:	435a      	muls	r2, r3
 800f306:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 800f30a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800f30e:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 800f312:	1c53      	adds	r3, r2, #1
 800f314:	942b      	str	r4, [sp, #172]	@ 0xac
 800f316:	942c      	str	r4, [sp, #176]	@ 0xb0
 800f318:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f31c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 800f320:	942d      	str	r4, [sp, #180]	@ 0xb4
 800f322:	942e      	str	r4, [sp, #184]	@ 0xb8
 800f324:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f32c:	942f      	str	r4, [sp, #188]	@ 0xbc
 800f32e:	9430      	str	r4, [sp, #192]	@ 0xc0
 800f330:	9431      	str	r4, [sp, #196]	@ 0xc4
 800f332:	9432      	str	r4, [sp, #200]	@ 0xc8
 800f334:	9433      	str	r4, [sp, #204]	@ 0xcc
 800f336:	4644      	mov	r4, r8
 800f338:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800f33c:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 800f340:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 800f344:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 800f348:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 800f34c:	9b06      	ldr	r3, [sp, #24]
 800f34e:	454b      	cmp	r3, r9
 800f350:	f000 80cc 	beq.w	800f4ec <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 800f354:	f109 0301 	add.w	r3, r9, #1
 800f358:	9305      	str	r3, [sp, #20]
 800f35a:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800f35e:	2b06      	cmp	r3, #6
 800f360:	d839      	bhi.n	800f3d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f362:	e8df f003 	tbb	[pc, r3]
 800f366:	3b04      	.short	0x3b04
 800f368:	817c6f60 	.word	0x817c6f60
 800f36c:	a0          	.byte	0xa0
 800f36d:	00          	.byte	0x00
 800f36e:	45c1      	cmp	r9, r8
 800f370:	d92b      	bls.n	800f3ca <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 800f372:	eef0 0a49 	vmov.f32	s1, s18
 800f376:	4638      	mov	r0, r7
 800f378:	eeb0 0a69 	vmov.f32	s0, s19
 800f37c:	f7ff fdde 	bl	800ef3c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f380:	4638      	mov	r0, r7
 800f382:	f7ff fe67 	bl	800f054 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f386:	4681      	mov	r9, r0
 800f388:	b9f8      	cbnz	r0, 800f3ca <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 800f38a:	eef0 0a49 	vmov.f32	s1, s18
 800f38e:	4638      	mov	r0, r7
 800f390:	eeb0 0a69 	vmov.f32	s0, s19
 800f394:	f7ff fe8d 	bl	800f0b2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 800f398:	4628      	mov	r0, r5
 800f39a:	4623      	mov	r3, r4
 800f39c:	9a05      	ldr	r2, [sp, #20]
 800f39e:	4641      	mov	r1, r8
 800f3a0:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 800f3a4:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 800f3a8:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 800f3ac:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 800f3b0:	e9cd 9702 	strd	r9, r7, [sp, #8]
 800f3b4:	e9cd b600 	strd	fp, r6, [sp]
 800f3b8:	f7ff feae 	bl	800f118 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f3bc:	eef0 0a49 	vmov.f32	s1, s18
 800f3c0:	eeb0 0a69 	vmov.f32	s0, s19
 800f3c4:	4638      	mov	r0, r7
 800f3c6:	f7ff fe74 	bl	800f0b2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 800f3ca:	eeb0 8a49 	vmov.f32	s16, s18
 800f3ce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f3d2:	eef0 8a69 	vmov.f32	s17, s19
 800f3d6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f3da:	e7b7      	b.n	800f34c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 800f3dc:	45c1      	cmp	r9, r8
 800f3de:	d90d      	bls.n	800f3fc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 800f3e0:	4638      	mov	r0, r7
 800f3e2:	f7ff fe37 	bl	800f054 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f3e6:	b948      	cbnz	r0, 800f3fc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 800f3e8:	4623      	mov	r3, r4
 800f3ea:	464a      	mov	r2, r9
 800f3ec:	4641      	mov	r1, r8
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	e9cd a702 	strd	sl, r7, [sp, #8]
 800f3f4:	e9cd b600 	strd	fp, r6, [sp]
 800f3f8:	f7ff fe8e 	bl	800f118 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f3fc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f400:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 800f404:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 800f408:	3402      	adds	r4, #2
 800f40a:	edd3 8a00 	vldr	s17, [r3]
 800f40e:	46c8      	mov	r8, r9
 800f410:	ed93 8a01 	vldr	s16, [r3, #4]
 800f414:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 800f418:	eef0 9a68 	vmov.f32	s19, s17
 800f41c:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 800f420:	eeb0 9a48 	vmov.f32	s18, s16
 800f424:	e7d7      	b.n	800f3d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f426:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f42a:	4638      	mov	r0, r7
 800f42c:	3402      	adds	r4, #2
 800f42e:	edd3 8a00 	vldr	s17, [r3]
 800f432:	ed93 8a01 	vldr	s16, [r3, #4]
 800f436:	eeb0 0a68 	vmov.f32	s0, s17
 800f43a:	eef0 0a48 	vmov.f32	s1, s16
 800f43e:	f7ff fd7d 	bl	800ef3c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f442:	e7c8      	b.n	800f3d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f444:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f448:	edd3 8a00 	vldr	s17, [r3]
 800f44c:	eef0 0a48 	vmov.f32	s1, s16
 800f450:	4638      	mov	r0, r7
 800f452:	eeb0 0a68 	vmov.f32	s0, s17
 800f456:	3401      	adds	r4, #1
 800f458:	f7ff fd70 	bl	800ef3c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f45c:	e7bb      	b.n	800f3d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f45e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f462:	ed93 8a00 	vldr	s16, [r3]
 800f466:	e7f1      	b.n	800f44c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 800f468:	00a3      	lsls	r3, r4, #2
 800f46a:	eef0 0a48 	vmov.f32	s1, s16
 800f46e:	eeb0 0a68 	vmov.f32	s0, s17
 800f472:	4638      	mov	r0, r7
 800f474:	f103 0208 	add.w	r2, r3, #8
 800f478:	f103 090c 	add.w	r9, r3, #12
 800f47c:	4433      	add	r3, r6
 800f47e:	3404      	adds	r4, #4
 800f480:	4432      	add	r2, r6
 800f482:	44b1      	add	r9, r6
 800f484:	edd3 1a01 	vldr	s3, [r3, #4]
 800f488:	ed92 2a00 	vldr	s4, [r2]
 800f48c:	edd9 2a00 	vldr	s5, [r9]
 800f490:	ed93 1a00 	vldr	s2, [r3]
 800f494:	9207      	str	r2, [sp, #28]
 800f496:	f7ff fabb 	bl	800ea10 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f49a:	9a07      	ldr	r2, [sp, #28]
 800f49c:	ed99 8a00 	vldr	s16, [r9]
 800f4a0:	edd2 8a00 	vldr	s17, [r2]
 800f4a4:	e797      	b.n	800f3d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f4a6:	00a3      	lsls	r3, r4, #2
 800f4a8:	eef0 0a48 	vmov.f32	s1, s16
 800f4ac:	eeb0 0a68 	vmov.f32	s0, s17
 800f4b0:	4638      	mov	r0, r7
 800f4b2:	f103 0210 	add.w	r2, r3, #16
 800f4b6:	f103 0914 	add.w	r9, r3, #20
 800f4ba:	4433      	add	r3, r6
 800f4bc:	3406      	adds	r4, #6
 800f4be:	4432      	add	r2, r6
 800f4c0:	44b1      	add	r9, r6
 800f4c2:	edd3 2a03 	vldr	s5, [r3, #12]
 800f4c6:	ed92 3a00 	vldr	s6, [r2]
 800f4ca:	edd9 3a00 	vldr	s7, [r9]
 800f4ce:	ed93 2a02 	vldr	s4, [r3, #8]
 800f4d2:	edd3 1a01 	vldr	s3, [r3, #4]
 800f4d6:	ed93 1a00 	vldr	s2, [r3]
 800f4da:	9207      	str	r2, [sp, #28]
 800f4dc:	f7ff fab7 	bl	800ea4e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f4e0:	9a07      	ldr	r2, [sp, #28]
 800f4e2:	ed99 8a00 	vldr	s16, [r9]
 800f4e6:	edd2 8a00 	vldr	s17, [r2]
 800f4ea:	e774      	b.n	800f3d6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f4ec:	9b06      	ldr	r3, [sp, #24]
 800f4ee:	af08      	add	r7, sp, #32
 800f4f0:	4543      	cmp	r3, r8
 800f4f2:	d90f      	bls.n	800f514 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 800f4f4:	4638      	mov	r0, r7
 800f4f6:	f7ff fdad 	bl	800f054 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f4fa:	b958      	cbnz	r0, 800f514 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	9703      	str	r7, [sp, #12]
 800f500:	f8cd b000 	str.w	fp, [sp]
 800f504:	4641      	mov	r1, r8
 800f506:	9a06      	ldr	r2, [sp, #24]
 800f508:	4628      	mov	r0, r5
 800f50a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800f50e:	4623      	mov	r3, r4
 800f510:	f7ff fe02 	bl	800f118 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f514:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 800f518:	4638      	mov	r0, r7
 800f51a:	f00f fe8d 	bl	801f238 <_ZN8touchgfx6Canvas6renderEh>
 800f51e:	4604      	mov	r4, r0
 800f520:	4638      	mov	r0, r7
 800f522:	f7ff fe99 	bl	800f258 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 800f526:	4620      	mov	r0, r4
 800f528:	b035      	add	sp, #212	@ 0xd4
 800f52a:	ecbd 8b04 	vpop	{d8-d9}
 800f52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f532:	2401      	movs	r4, #1
 800f534:	e7f7      	b.n	800f526 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 800f536:	bf00      	nop
 800f538:	00000000 	.word	0x00000000
 800f53c:	08023b68 	.word	0x08023b68

0800f540 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 800f540:	b510      	push	{r4, lr}
 800f542:	4604      	mov	r4, r0
 800f544:	f7ff fe88 	bl	800f258 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 800f548:	21b0      	movs	r1, #176	@ 0xb0
 800f54a:	4620      	mov	r0, r4
 800f54c:	f010 fa60 	bl	801fa10 <_ZdlPvj>
 800f550:	4620      	mov	r0, r4
 800f552:	bd10      	pop	{r4, pc}

0800f554 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 800f554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f558:	4698      	mov	r8, r3
 800f55a:	23ff      	movs	r3, #255	@ 0xff
 800f55c:	4607      	mov	r7, r0
 800f55e:	4689      	mov	r9, r1
 800f560:	4692      	mov	sl, r2
 800f562:	1d02      	adds	r2, r0, #4
 800f564:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 800f568:	2400      	movs	r4, #0
 800f56a:	44ca      	add	sl, r9
 800f56c:	ed2d 8b06 	vpush	{d8-d10}
 800f570:	b0aa      	sub	sp, #168	@ 0xa8
 800f572:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 800f778 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 800f576:	9300      	str	r3, [sp, #0]
 800f578:	eef0 8a48 	vmov.f32	s17, s16
 800f57c:	6981      	ldr	r1, [r0, #24]
 800f57e:	a80d      	add	r0, sp, #52	@ 0x34
 800f580:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800f582:	f00f fdc5 	bl	801f110 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800f586:	7f3b      	ldrb	r3, [r7, #28]
 800f588:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 800f778 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 800f58c:	4628      	mov	r0, r5
 800f58e:	1e5a      	subs	r2, r3, #1
 800f590:	eeb0 0a60 	vmov.f32	s0, s1
 800f594:	4253      	negs	r3, r2
 800f596:	4153      	adcs	r3, r2
 800f598:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 800f59c:	f004 fdcd 	bl	801413a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f5a0:	eeb0 9a40 	vmov.f32	s18, s0
 800f5a4:	eef0 9a60 	vmov.f32	s19, s1
 800f5a8:	45ca      	cmp	sl, r9
 800f5aa:	f000 80cd 	beq.w	800f748 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 800f5ae:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f5b2:	2b06      	cmp	r3, #6
 800f5b4:	d8f8      	bhi.n	800f5a8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f5b6:	e8df f003 	tbb	[pc, r3]
 800f5ba:	0804      	.short	0x0804
 800f5bc:	58533f2a 	.word	0x58533f2a
 800f5c0:	8a          	.byte	0x8a
 800f5c1:	00          	.byte	0x00
 800f5c2:	a80d      	add	r0, sp, #52	@ 0x34
 800f5c4:	f00f fe16 	bl	801f1f4 <_ZN8touchgfx6Canvas5closeEv>
 800f5c8:	e7ee      	b.n	800f5a8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f5ca:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f5ce:	4628      	mov	r0, r5
 800f5d0:	ed93 8a01 	vldr	s16, [r3, #4]
 800f5d4:	edd3 8a00 	vldr	s17, [r3]
 800f5d8:	eef0 0a48 	vmov.f32	s1, s16
 800f5dc:	eeb0 0a68 	vmov.f32	s0, s17
 800f5e0:	f004 fdab 	bl	801413a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f5e4:	a80d      	add	r0, sp, #52	@ 0x34
 800f5e6:	eef0 7a60 	vmov.f32	s15, s1
 800f5ea:	eeb0 9a40 	vmov.f32	s18, s0
 800f5ee:	eef0 9a60 	vmov.f32	s19, s1
 800f5f2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f5f6:	ee17 2a90 	vmov	r2, s15
 800f5fa:	eef0 7a40 	vmov.f32	s15, s0
 800f5fe:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f602:	ee17 1a90 	vmov	r1, s15
 800f606:	f00f fecf 	bl	801f3a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 800f60a:	3402      	adds	r4, #2
 800f60c:	e7cc      	b.n	800f5a8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f60e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f612:	4628      	mov	r0, r5
 800f614:	edd3 8a00 	vldr	s17, [r3]
 800f618:	ed93 8a01 	vldr	s16, [r3, #4]
 800f61c:	eeb0 0a68 	vmov.f32	s0, s17
 800f620:	eef0 0a48 	vmov.f32	s1, s16
 800f624:	f004 fd89 	bl	801413a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f628:	a80d      	add	r0, sp, #52	@ 0x34
 800f62a:	eeb0 9a40 	vmov.f32	s18, s0
 800f62e:	eef0 9a60 	vmov.f32	s19, s1
 800f632:	f7ff fe01 	bl	800f238 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 800f636:	e7e8      	b.n	800f60a <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 800f638:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f63c:	edd3 8a00 	vldr	s17, [r3]
 800f640:	eef0 0a48 	vmov.f32	s1, s16
 800f644:	4628      	mov	r0, r5
 800f646:	eeb0 0a68 	vmov.f32	s0, s17
 800f64a:	3401      	adds	r4, #1
 800f64c:	f004 fd75 	bl	801413a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f650:	a80d      	add	r0, sp, #52	@ 0x34
 800f652:	eef0 9a60 	vmov.f32	s19, s1
 800f656:	eeb0 9a40 	vmov.f32	s18, s0
 800f65a:	f7ff fded 	bl	800f238 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 800f65e:	e7a3      	b.n	800f5a8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f660:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f664:	ed93 8a00 	vldr	s16, [r3]
 800f668:	e7ea      	b.n	800f640 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 800f66a:	1ca3      	adds	r3, r4, #2
 800f66c:	4628      	mov	r0, r5
 800f66e:	3404      	adds	r4, #4
 800f670:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800f674:	ed53 0a01 	vldr	s1, [r3, #-4]
 800f678:	ed13 0a02 	vldr	s0, [r3, #-8]
 800f67c:	edd3 8a00 	vldr	s17, [r3]
 800f680:	ed93 8a01 	vldr	s16, [r3, #4]
 800f684:	f004 fd59 	bl	801413a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f688:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 800f68c:	eeb0 0a68 	vmov.f32	s0, s17
 800f690:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 800f694:	eef0 0a48 	vmov.f32	s1, s16
 800f698:	4628      	mov	r0, r5
 800f69a:	f004 fd4e 	bl	801413a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f69e:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 800f6a2:	eef0 2a60 	vmov.f32	s5, s1
 800f6a6:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 800f6aa:	eeb0 2a40 	vmov.f32	s4, s0
 800f6ae:	a80d      	add	r0, sp, #52	@ 0x34
 800f6b0:	eeb0 aa40 	vmov.f32	s20, s0
 800f6b4:	eef0 aa60 	vmov.f32	s21, s1
 800f6b8:	eeb0 0a49 	vmov.f32	s0, s18
 800f6bc:	eef0 0a69 	vmov.f32	s1, s19
 800f6c0:	f7ff f9a6 	bl	800ea10 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f6c4:	eef0 9a6a 	vmov.f32	s19, s21
 800f6c8:	eeb0 9a4a 	vmov.f32	s18, s20
 800f6cc:	e76c      	b.n	800f5a8 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f6ce:	1d26      	adds	r6, r4, #4
 800f6d0:	4628      	mov	r0, r5
 800f6d2:	3406      	adds	r4, #6
 800f6d4:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f6d8:	ed56 0a03 	vldr	s1, [r6, #-12]
 800f6dc:	ed16 0a04 	vldr	s0, [r6, #-16]
 800f6e0:	edd6 8a00 	vldr	s17, [r6]
 800f6e4:	ed96 8a01 	vldr	s16, [r6, #4]
 800f6e8:	f004 fd27 	bl	801413a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f6ec:	ed8d 0a07 	vstr	s0, [sp, #28]
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	ed16 0a02 	vldr	s0, [r6, #-8]
 800f6f6:	edcd 0a08 	vstr	s1, [sp, #32]
 800f6fa:	ed56 0a01 	vldr	s1, [r6, #-4]
 800f6fe:	f004 fd1c 	bl	801413a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f702:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 800f706:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 800f70a:	eeb0 0a68 	vmov.f32	s0, s17
 800f70e:	eef0 0a48 	vmov.f32	s1, s16
 800f712:	4628      	mov	r0, r5
 800f714:	f004 fd11 	bl	801413a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f718:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 800f71c:	eeb0 3a40 	vmov.f32	s6, s0
 800f720:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 800f724:	eef0 3a60 	vmov.f32	s7, s1
 800f728:	eddd 1a08 	vldr	s3, [sp, #32]
 800f72c:	eeb0 aa40 	vmov.f32	s20, s0
 800f730:	ed9d 1a07 	vldr	s2, [sp, #28]
 800f734:	eef0 aa60 	vmov.f32	s21, s1
 800f738:	a80d      	add	r0, sp, #52	@ 0x34
 800f73a:	eef0 0a69 	vmov.f32	s1, s19
 800f73e:	eeb0 0a49 	vmov.f32	s0, s18
 800f742:	f7ff f984 	bl	800ea4e <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f746:	e7bd      	b.n	800f6c4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 800f748:	7f7b      	ldrb	r3, [r7, #29]
 800f74a:	a80d      	add	r0, sp, #52	@ 0x34
 800f74c:	7fb9      	ldrb	r1, [r7, #30]
 800f74e:	4359      	muls	r1, r3
 800f750:	1c4b      	adds	r3, r1, #1
 800f752:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 800f756:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f75a:	f00f fd6d 	bl	801f238 <_ZN8touchgfx6Canvas6renderEh>
 800f75e:	4b07      	ldr	r3, [pc, #28]	@ (800f77c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 800f760:	4604      	mov	r4, r0
 800f762:	a812      	add	r0, sp, #72	@ 0x48
 800f764:	930d      	str	r3, [sp, #52]	@ 0x34
 800f766:	f000 fd7d 	bl	8010264 <_ZN8touchgfx7OutlineD1Ev>
 800f76a:	4620      	mov	r0, r4
 800f76c:	b02a      	add	sp, #168	@ 0xa8
 800f76e:	ecbd 8b06 	vpop	{d8-d10}
 800f772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f776:	bf00      	nop
 800f778:	00000000 	.word	0x00000000
 800f77c:	080240f4 	.word	0x080240f4

0800f780 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 800f780:	b410      	push	{r4}
 800f782:	7f04      	ldrb	r4, [r0, #28]
 800f784:	b11c      	cbz	r4, 800f78e <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 800f786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f78a:	f7ff bee3 	b.w	800f554 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 800f78e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f792:	f7ff bd6d 	b.w	800f270 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

0800f796 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 800f796:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f79a:	4691      	mov	r9, r2
 800f79c:	4602      	mov	r2, r0
 800f79e:	4606      	mov	r6, r0
 800f7a0:	4688      	mov	r8, r1
 800f7a2:	f852 0f26 	ldr.w	r0, [r2, #38]!
 800f7a6:	469a      	mov	sl, r3
 800f7a8:	ab02      	add	r3, sp, #8
 800f7aa:	af02      	add	r7, sp, #8
 800f7ac:	6851      	ldr	r1, [r2, #4]
 800f7ae:	c303      	stmia	r3!, {r0, r1}
 800f7b0:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	dd2f      	ble.n	800f818 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 800f7b8:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 800f7bc:	2c00      	cmp	r4, #0
 800f7be:	dd2b      	ble.n	800f818 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 800f7c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f7c4:	441c      	add	r4, r3
 800f7c6:	b2a4      	uxth	r4, r4
 800f7c8:	b225      	sxth	r5, r4
 800f7ca:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800f7ce:	42ab      	cmp	r3, r5
 800f7d0:	da22      	bge.n	800f818 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 800f7d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f7d4:	464a      	mov	r2, r9
 800f7d6:	9701      	str	r7, [sp, #4]
 800f7d8:	4641      	mov	r1, r8
 800f7da:	9300      	str	r3, [sp, #0]
 800f7dc:	4630      	mov	r0, r6
 800f7de:	4653      	mov	r3, sl
 800f7e0:	f7ff ffce 	bl	800f780 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 800f7e4:	b940      	cbnz	r0, 800f7f8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 800f7e6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d004      	beq.n	800f7f8 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	105b      	asrs	r3, r3, #1
 800f7f2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f7f6:	e7ec      	b.n	800f7d2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 800f7f8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800f7fc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f800:	4413      	add	r3, r2
 800f802:	b29b      	uxth	r3, r3
 800f804:	441a      	add	r2, r3
 800f806:	f8ad 300a 	strh.w	r3, [sp, #10]
 800f80a:	b212      	sxth	r2, r2
 800f80c:	4295      	cmp	r5, r2
 800f80e:	dadc      	bge.n	800f7ca <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 800f810:	1ae3      	subs	r3, r4, r3
 800f812:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f816:	e7d8      	b.n	800f7ca <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 800f818:	b004      	add	sp, #16
 800f81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f81e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800f81e:	0c0b      	lsrs	r3, r1, #16
 800f820:	60c1      	str	r1, [r0, #12]
 800f822:	7481      	strb	r1, [r0, #18]
 800f824:	7403      	strb	r3, [r0, #16]
 800f826:	0a0b      	lsrs	r3, r1, #8
 800f828:	7443      	strb	r3, [r0, #17]
 800f82a:	4770      	bx	lr

0800f82c <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800f82c:	f1a0 0008 	sub.w	r0, r0, #8
 800f830:	e7f5      	b.n	800f81e <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

0800f834 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 800f834:	b508      	push	{r3, lr}
 800f836:	4b05      	ldr	r3, [pc, #20]	@ (800f84c <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 800f838:	6818      	ldr	r0, [r3, #0]
 800f83a:	6803      	ldr	r3, [r0, #0]
 800f83c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f840:	4798      	blx	r3
 800f842:	1e43      	subs	r3, r0, #1
 800f844:	4258      	negs	r0, r3
 800f846:	4158      	adcs	r0, r3
 800f848:	bd08      	pop	{r3, pc}
 800f84a:	bf00      	nop
 800f84c:	24025158 	.word	0x24025158

0800f850 <_ZN8touchgfx13PainterRGB888D1Ev>:
 800f850:	4770      	bx	lr

0800f852 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 800f852:	3808      	subs	r0, #8
 800f854:	4770      	bx	lr

0800f856 <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 800f856:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f85a:	b410      	push	{r4}
 800f85c:	188c      	adds	r4, r1, r2
 800f85e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f862:	68c2      	ldr	r2, [r0, #12]
 800f864:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800f868:	4620      	mov	r0, r4
 800f86a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f86e:	f7f3 bafd 	b.w	8002e6c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0800f872 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 800f872:	f7f3 baf1 	b.w	8002e58 <_ZN8touchgfx5paint8tearDownEv>

0800f876 <_ZN8touchgfx13PainterRGB888D0Ev>:
 800f876:	b510      	push	{r4, lr}
 800f878:	4604      	mov	r4, r0
 800f87a:	2114      	movs	r1, #20
 800f87c:	f010 f8c8 	bl	801fa10 <_ZdlPvj>
 800f880:	4620      	mov	r0, r4
 800f882:	bd10      	pop	{r4, pc}

0800f884 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 800f884:	f1a0 0008 	sub.w	r0, r0, #8
 800f888:	e7f5      	b.n	800f876 <_ZN8touchgfx13PainterRGB888D0Ev>
	...

0800f88c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 800f88c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f894:	4411      	add	r1, r2
 800f896:	7c42      	ldrb	r2, [r0, #17]
 800f898:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 800f89c:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 800f8a0:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 800f8a4:	2a00      	cmp	r2, #0
 800f8a6:	f000 8084 	beq.w	800f9b2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 800f8aa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800f8ae:	ed90 7a08 	vldr	s14, [r0, #32]
 800f8b2:	42a2      	cmp	r2, r4
 800f8b4:	68c3      	ldr	r3, [r0, #12]
 800f8b6:	db20      	blt.n	800f8fa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 800f8b8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f8bc:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800f8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c4:	bfc8      	it	gt
 800f8c6:	2200      	movgt	r2, #0
 800f8c8:	589a      	ldr	r2, [r3, r2]
 800f8ca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800f8ce:	7c03      	ldrb	r3, [r0, #16]
 800f8d0:	fa5f fc82 	uxtb.w	ip, r2
 800f8d4:	f3c2 2707 	ubfx	r7, r2, #8, #8
 800f8d8:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800f8dc:	440e      	add	r6, r1
 800f8de:	b36b      	cbz	r3, 800f93c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 800f8e0:	2dff      	cmp	r5, #255	@ 0xff
 800f8e2:	d12b      	bne.n	800f93c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 800f8e4:	42b1      	cmp	r1, r6
 800f8e6:	f080 8204 	bcs.w	800fcf2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800f8ea:	f881 c000 	strb.w	ip, [r1]
 800f8ee:	3103      	adds	r1, #3
 800f8f0:	f801 7c02 	strb.w	r7, [r1, #-2]
 800f8f4:	f801 4c01 	strb.w	r4, [r1, #-1]
 800f8f8:	e7f4      	b.n	800f8e4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 800f8fa:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800f8fe:	42a7      	cmp	r7, r4
 800f900:	dc08      	bgt.n	800f914 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 800f902:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f906:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800f90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f90e:	bfd8      	it	le
 800f910:	2200      	movle	r2, #0
 800f912:	e7d9      	b.n	800f8c8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 800f914:	1aa2      	subs	r2, r4, r2
 800f916:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f91a:	ee07 2a90 	vmov	s15, r2
 800f91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f92a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f92e:	ee17 2a90 	vmov	r2, s15
 800f932:	bfd8      	it	le
 800f934:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 800f938:	0092      	lsls	r2, r2, #2
 800f93a:	e7c5      	b.n	800f8c8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 800f93c:	0e12      	lsrs	r2, r2, #24
 800f93e:	4355      	muls	r5, r2
 800f940:	1c6a      	adds	r2, r5, #1
 800f942:	eb02 2525 	add.w	r5, r2, r5, asr #8
 800f946:	122d      	asrs	r5, r5, #8
 800f948:	43e8      	mvns	r0, r5
 800f94a:	b2ad      	uxth	r5, r5
 800f94c:	fb1c fc05 	smulbb	ip, ip, r5
 800f950:	b2c0      	uxtb	r0, r0
 800f952:	fb17 f705 	smulbb	r7, r7, r5
 800f956:	fb14 f505 	smulbb	r5, r4, r5
 800f95a:	fa1f fc8c 	uxth.w	ip, ip
 800f95e:	b2bf      	uxth	r7, r7
 800f960:	b2ad      	uxth	r5, r5
 800f962:	428e      	cmp	r6, r1
 800f964:	f101 0303 	add.w	r3, r1, #3
 800f968:	f240 81c3 	bls.w	800fcf2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800f96c:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 800f970:	fb02 c200 	mla	r2, r2, r0, ip
 800f974:	b292      	uxth	r2, r2
 800f976:	1c51      	adds	r1, r2, #1
 800f978:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800f97c:	1212      	asrs	r2, r2, #8
 800f97e:	f803 2c03 	strb.w	r2, [r3, #-3]
 800f982:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 800f986:	fb02 7200 	mla	r2, r2, r0, r7
 800f98a:	b292      	uxth	r2, r2
 800f98c:	1c51      	adds	r1, r2, #1
 800f98e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800f992:	1212      	asrs	r2, r2, #8
 800f994:	f803 2c02 	strb.w	r2, [r3, #-2]
 800f998:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800f99c:	fb02 5200 	mla	r2, r2, r0, r5
 800f9a0:	b292      	uxth	r2, r2
 800f9a2:	1c51      	adds	r1, r2, #1
 800f9a4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	1212      	asrs	r2, r2, #8
 800f9ac:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f9b0:	e7d7      	b.n	800f962 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 800f9b2:	7c82      	ldrb	r2, [r0, #18]
 800f9b4:	2a00      	cmp	r2, #0
 800f9b6:	d047      	beq.n	800fa48 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 800f9b8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800f9bc:	ee07 2a10 	vmov	s14, r2
 800f9c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f9c4:	ee07 3a90 	vmov	s15, r3
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f9ce:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9d6:	f200 808e 	bhi.w	800faf6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 800f9da:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f9de:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800f9e2:	68c7      	ldr	r7, [r0, #12]
 800f9e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f9ec:	ee06 6a90 	vmov	s13, r6
 800f9f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800f9f4:	eef4 7ae6 	vcmpe.f32	s15, s13
 800f9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9fc:	bf4a      	itet	mi
 800f9fe:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 800fa02:	4634      	movpl	r4, r6
 800fa04:	ee17 4a90 	vmovmi	r4, s15
 800fa08:	edd0 7a08 	vldr	s15, [r0, #32]
 800fa0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fa10:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 800fa14:	448e      	add	lr, r1
 800fa16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa1a:	bfc8      	it	gt
 800fa1c:	2200      	movgt	r2, #0
 800fa1e:	58bf      	ldr	r7, [r7, r2]
 800fa20:	7c02      	ldrb	r2, [r0, #16]
 800fa22:	fa5f f987 	uxtb.w	r9, r7
 800fa26:	f3c7 2807 	ubfx	r8, r7, #8, #8
 800fa2a:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 800fa2e:	b31a      	cbz	r2, 800fa78 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 800fa30:	2dff      	cmp	r5, #255	@ 0xff
 800fa32:	d121      	bne.n	800fa78 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 800fa34:	4571      	cmp	r1, lr
 800fa36:	d25d      	bcs.n	800faf4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 800fa38:	f881 9000 	strb.w	r9, [r1]
 800fa3c:	3103      	adds	r1, #3
 800fa3e:	f801 8c02 	strb.w	r8, [r1, #-2]
 800fa42:	f801 cc01 	strb.w	ip, [r1, #-1]
 800fa46:	e7f5      	b.n	800fa34 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 800fa48:	ee07 4a90 	vmov	s15, r4
 800fa4c:	ed90 7a06 	vldr	s14, [r0, #24]
 800fa50:	edd0 6a05 	vldr	s13, [r0, #20]
 800fa54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fa60:	edd0 7a08 	vldr	s15, [r0, #32]
 800fa64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fa68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa6c:	bf44      	itt	mi
 800fa6e:	edd0 7a07 	vldrmi	s15, [r0, #28]
 800fa72:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 800fa76:	e7a5      	b.n	800f9c4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 800fa78:	0e3f      	lsrs	r7, r7, #24
 800fa7a:	436f      	muls	r7, r5
 800fa7c:	1c7a      	adds	r2, r7, #1
 800fa7e:	eb02 2227 	add.w	r2, r2, r7, asr #8
 800fa82:	1212      	asrs	r2, r2, #8
 800fa84:	ea6f 0a02 	mvn.w	sl, r2
 800fa88:	b292      	uxth	r2, r2
 800fa8a:	fb19 f902 	smulbb	r9, r9, r2
 800fa8e:	fa5f fa8a 	uxtb.w	sl, sl
 800fa92:	fb18 f802 	smulbb	r8, r8, r2
 800fa96:	fb1c fc02 	smulbb	ip, ip, r2
 800fa9a:	fa1f f989 	uxth.w	r9, r9
 800fa9e:	fa1f f888 	uxth.w	r8, r8
 800faa2:	fa1f fc8c 	uxth.w	ip, ip
 800faa6:	458e      	cmp	lr, r1
 800faa8:	f101 0203 	add.w	r2, r1, #3
 800faac:	d922      	bls.n	800faf4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 800faae:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800fab2:	fb01 910a 	mla	r1, r1, sl, r9
 800fab6:	b289      	uxth	r1, r1
 800fab8:	1c4f      	adds	r7, r1, #1
 800faba:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fabe:	1209      	asrs	r1, r1, #8
 800fac0:	f802 1c03 	strb.w	r1, [r2, #-3]
 800fac4:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800fac8:	fb01 810a 	mla	r1, r1, sl, r8
 800facc:	b289      	uxth	r1, r1
 800face:	1c4f      	adds	r7, r1, #1
 800fad0:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fad4:	1209      	asrs	r1, r1, #8
 800fad6:	f802 1c02 	strb.w	r1, [r2, #-2]
 800fada:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800fade:	fb01 c10a 	mla	r1, r1, sl, ip
 800fae2:	b289      	uxth	r1, r1
 800fae4:	1c4f      	adds	r7, r1, #1
 800fae6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800faea:	1209      	asrs	r1, r1, #8
 800faec:	f802 1c01 	strb.w	r1, [r2, #-1]
 800faf0:	4611      	mov	r1, r2
 800faf2:	e7d8      	b.n	800faa6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 800faf4:	191a      	adds	r2, r3, r4
 800faf6:	4433      	add	r3, r6
 800faf8:	b21b      	sxth	r3, r3
 800fafa:	4293      	cmp	r3, r2
 800fafc:	f340 80f9 	ble.w	800fcf2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fb00:	edd0 7a07 	vldr	s15, [r0, #28]
 800fb04:	ee06 2a90 	vmov	s13, r2
 800fb08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fb10:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb18:	f340 80b0 	ble.w	800fc7c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 800fb1c:	ee06 3a10 	vmov	s12, r3
 800fb20:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800fb24:	eddf 5a74 	vldr	s11, [pc, #464]	@ 800fcf8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 800fb28:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800fb2c:	eef4 7ac6 	vcmpe.f32	s15, s12
 800fb30:	ed90 6a08 	vldr	s12, [r0, #32]
 800fb34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb38:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800fb3c:	bfd6      	itet	le
 800fb3e:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 800fb42:	469c      	movgt	ip, r3
 800fb44:	ee17 ca90 	vmovle	ip, s15
 800fb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb4c:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 800fcfc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 800fb50:	ebac 0202 	sub.w	r2, ip, r2
 800fb54:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 800fb58:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fb5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fb60:	188c      	adds	r4, r1, r2
 800fb62:	7c02      	ldrb	r2, [r0, #16]
 800fb64:	b1d2      	cbz	r2, 800fb9c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 800fb66:	2dff      	cmp	r5, #255	@ 0xff
 800fb68:	d118      	bne.n	800fb9c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 800fb6a:	42a1      	cmp	r1, r4
 800fb6c:	d261      	bcs.n	800fc32 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 800fb6e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fb72:	68c6      	ldr	r6, [r0, #12]
 800fb74:	3103      	adds	r1, #3
 800fb76:	ee17 7a10 	vmov	r7, s14
 800fb7a:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 800fb7e:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 800fb82:	f801 6c03 	strb.w	r6, [r1, #-3]
 800fb86:	7856      	ldrb	r6, [r2, #1]
 800fb88:	f801 6c02 	strb.w	r6, [r1, #-2]
 800fb8c:	7892      	ldrb	r2, [r2, #2]
 800fb8e:	f801 2c01 	strb.w	r2, [r1, #-1]
 800fb92:	ed90 7a08 	vldr	s14, [r0, #32]
 800fb96:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fb9a:	e7e6      	b.n	800fb6a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 800fb9c:	68c2      	ldr	r2, [r0, #12]
 800fb9e:	428c      	cmp	r4, r1
 800fba0:	f101 0e03 	add.w	lr, r1, #3
 800fba4:	d945      	bls.n	800fc32 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 800fba6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fbaa:	ee17 9a10 	vmov	r9, s14
 800fbae:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 800fbb2:	f898 7003 	ldrb.w	r7, [r8, #3]
 800fbb6:	fb07 f605 	mul.w	r6, r7, r5
 800fbba:	1c77      	adds	r7, r6, #1
 800fbbc:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 800fbc0:	123f      	asrs	r7, r7, #8
 800fbc2:	b2b9      	uxth	r1, r7
 800fbc4:	43ff      	mvns	r7, r7
 800fbc6:	b2fe      	uxtb	r6, r7
 800fbc8:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 800fbcc:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 800fbd0:	fb19 f906 	smulbb	r9, r9, r6
 800fbd4:	fb07 9701 	mla	r7, r7, r1, r9
 800fbd8:	b2bf      	uxth	r7, r7
 800fbda:	f107 0901 	add.w	r9, r7, #1
 800fbde:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 800fbe2:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 800fbe6:	fb19 f906 	smulbb	r9, r9, r6
 800fbea:	123f      	asrs	r7, r7, #8
 800fbec:	f80e 7c03 	strb.w	r7, [lr, #-3]
 800fbf0:	f898 7001 	ldrb.w	r7, [r8, #1]
 800fbf4:	fb07 9701 	mla	r7, r7, r1, r9
 800fbf8:	b2bf      	uxth	r7, r7
 800fbfa:	f107 0901 	add.w	r9, r7, #1
 800fbfe:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 800fc02:	123f      	asrs	r7, r7, #8
 800fc04:	f80e 7c02 	strb.w	r7, [lr, #-2]
 800fc08:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 800fc0c:	f898 8002 	ldrb.w	r8, [r8, #2]
 800fc10:	fb17 f606 	smulbb	r6, r7, r6
 800fc14:	fb08 6601 	mla	r6, r8, r1, r6
 800fc18:	b2b6      	uxth	r6, r6
 800fc1a:	1c71      	adds	r1, r6, #1
 800fc1c:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 800fc20:	4671      	mov	r1, lr
 800fc22:	1236      	asrs	r6, r6, #8
 800fc24:	f80e 6c01 	strb.w	r6, [lr, #-1]
 800fc28:	ed90 7a08 	vldr	s14, [r0, #32]
 800fc2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fc30:	e7b5      	b.n	800fb9e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 800fc32:	4563      	cmp	r3, ip
 800fc34:	dd5d      	ble.n	800fcf2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fc36:	edd0 7a08 	vldr	s15, [r0, #32]
 800fc3a:	eba3 030c 	sub.w	r3, r3, ip
 800fc3e:	68c4      	ldr	r4, [r0, #12]
 800fc40:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800fc44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fc48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fc4c:	7c00      	ldrb	r0, [r0, #16]
 800fc4e:	440b      	add	r3, r1
 800fc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc54:	bfd8      	it	le
 800fc56:	2200      	movle	r2, #0
 800fc58:	58a2      	ldr	r2, [r4, r2]
 800fc5a:	b2d4      	uxtb	r4, r2
 800fc5c:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 800fc60:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800fc64:	b160      	cbz	r0, 800fc80 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 800fc66:	2dff      	cmp	r5, #255	@ 0xff
 800fc68:	d10a      	bne.n	800fc80 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 800fc6a:	4299      	cmp	r1, r3
 800fc6c:	d241      	bcs.n	800fcf2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fc6e:	700c      	strb	r4, [r1, #0]
 800fc70:	3103      	adds	r1, #3
 800fc72:	f801 cc02 	strb.w	ip, [r1, #-2]
 800fc76:	f801 7c01 	strb.w	r7, [r1, #-1]
 800fc7a:	e7f6      	b.n	800fc6a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 800fc7c:	4694      	mov	ip, r2
 800fc7e:	e7da      	b.n	800fc36 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 800fc80:	0e12      	lsrs	r2, r2, #24
 800fc82:	436a      	muls	r2, r5
 800fc84:	1c55      	adds	r5, r2, #1
 800fc86:	eb05 2522 	add.w	r5, r5, r2, asr #8
 800fc8a:	122d      	asrs	r5, r5, #8
 800fc8c:	43ee      	mvns	r6, r5
 800fc8e:	b2ad      	uxth	r5, r5
 800fc90:	fb14 f405 	smulbb	r4, r4, r5
 800fc94:	b2f6      	uxtb	r6, r6
 800fc96:	fb1c f005 	smulbb	r0, ip, r5
 800fc9a:	fb17 f505 	smulbb	r5, r7, r5
 800fc9e:	b2a4      	uxth	r4, r4
 800fca0:	b280      	uxth	r0, r0
 800fca2:	b2ad      	uxth	r5, r5
 800fca4:	428b      	cmp	r3, r1
 800fca6:	f101 0203 	add.w	r2, r1, #3
 800fcaa:	d922      	bls.n	800fcf2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fcac:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800fcb0:	fb01 4106 	mla	r1, r1, r6, r4
 800fcb4:	b289      	uxth	r1, r1
 800fcb6:	1c4f      	adds	r7, r1, #1
 800fcb8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fcbc:	1209      	asrs	r1, r1, #8
 800fcbe:	f802 1c03 	strb.w	r1, [r2, #-3]
 800fcc2:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800fcc6:	fb01 0106 	mla	r1, r1, r6, r0
 800fcca:	b289      	uxth	r1, r1
 800fccc:	1c4f      	adds	r7, r1, #1
 800fcce:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fcd2:	1209      	asrs	r1, r1, #8
 800fcd4:	f802 1c02 	strb.w	r1, [r2, #-2]
 800fcd8:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800fcdc:	fb01 5106 	mla	r1, r1, r6, r5
 800fce0:	b289      	uxth	r1, r1
 800fce2:	1c4f      	adds	r7, r1, #1
 800fce4:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fce8:	1209      	asrs	r1, r1, #8
 800fcea:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fcee:	4611      	mov	r1, r2
 800fcf0:	e7d8      	b.n	800fca4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 800fcf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcf6:	bf00      	nop
 800fcf8:	447ffffe 	.word	0x447ffffe
 800fcfc:	00000000 	.word	0x00000000

0800fd00 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 800fd00:	4770      	bx	lr

0800fd02 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 800fd02:	4770      	bx	lr

0800fd04 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 800fd04:	b510      	push	{r4, lr}
 800fd06:	4604      	mov	r4, r0
 800fd08:	2124      	movs	r1, #36	@ 0x24
 800fd0a:	f00f fe81 	bl	801fa10 <_ZdlPvj>
 800fd0e:	4620      	mov	r0, r4
 800fd10:	bd10      	pop	{r4, pc}
	...

0800fd14 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 800fd14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800fd16:	6803      	ldr	r3, [r0, #0]
 800fd18:	460d      	mov	r5, r1
 800fd1a:	4604      	mov	r4, r0
 800fd1c:	4601      	mov	r1, r0
 800fd1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fd20:	a802      	add	r0, sp, #8
 800fd22:	4798      	blx	r3
 800fd24:	6828      	ldr	r0, [r5, #0]
 800fd26:	6869      	ldr	r1, [r5, #4]
 800fd28:	466b      	mov	r3, sp
 800fd2a:	c303      	stmia	r3!, {r0, r1}
 800fd2c:	4668      	mov	r0, sp
 800fd2e:	4619      	mov	r1, r3
 800fd30:	f7fd fcee 	bl	800d710 <_ZN8touchgfx4RectaNERKS0_>
 800fd34:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800fd36:	b188      	cbz	r0, 800fd5c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fd38:	6803      	ldr	r3, [r0, #0]
 800fd3a:	1d21      	adds	r1, r4, #4
 800fd3c:	68db      	ldr	r3, [r3, #12]
 800fd3e:	4798      	blx	r3
 800fd40:	b160      	cbz	r0, 800fd5c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fd42:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	dd08      	ble.n	800fd5c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fd4a:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 800fd4e:	2d00      	cmp	r5, #0
 800fd50:	dd04      	ble.n	800fd5c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fd52:	4a2b      	ldr	r2, [pc, #172]	@ (800fe00 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 800fd54:	7812      	ldrb	r2, [r2, #0]
 800fd56:	b11a      	cbz	r2, 800fd60 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 800fd58:	2a01      	cmp	r2, #1
 800fd5a:	d029      	beq.n	800fdb0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 800fd5c:	b004      	add	sp, #16
 800fd5e:	bd70      	pop	{r4, r5, r6, pc}
 800fd60:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800fd64:	441d      	add	r5, r3
 800fd66:	b2ad      	uxth	r5, r5
 800fd68:	b22e      	sxth	r6, r5
 800fd6a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800fd6e:	42b3      	cmp	r3, r6
 800fd70:	daf4      	bge.n	800fd5c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fd72:	6823      	ldr	r3, [r4, #0]
 800fd74:	4669      	mov	r1, sp
 800fd76:	4620      	mov	r0, r4
 800fd78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd7a:	4798      	blx	r3
 800fd7c:	b940      	cbnz	r0, 800fd90 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 800fd7e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800fd82:	2b01      	cmp	r3, #1
 800fd84:	d004      	beq.n	800fd90 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 800fd86:	3301      	adds	r3, #1
 800fd88:	105b      	asrs	r3, r3, #1
 800fd8a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fd8e:	e7f0      	b.n	800fd72 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 800fd90:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fd94:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800fd98:	4413      	add	r3, r2
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	441a      	add	r2, r3
 800fd9e:	f8ad 3002 	strh.w	r3, [sp, #2]
 800fda2:	b212      	sxth	r2, r2
 800fda4:	4296      	cmp	r6, r2
 800fda6:	dae0      	bge.n	800fd6a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 800fda8:	1aeb      	subs	r3, r5, r3
 800fdaa:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fdae:	e7dc      	b.n	800fd6a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 800fdb0:	f8bd 5000 	ldrh.w	r5, [sp]
 800fdb4:	441d      	add	r5, r3
 800fdb6:	b2ad      	uxth	r5, r5
 800fdb8:	b22e      	sxth	r6, r5
 800fdba:	f9bd 3000 	ldrsh.w	r3, [sp]
 800fdbe:	42b3      	cmp	r3, r6
 800fdc0:	dacc      	bge.n	800fd5c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800fdc2:	6823      	ldr	r3, [r4, #0]
 800fdc4:	4669      	mov	r1, sp
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fdca:	4798      	blx	r3
 800fdcc:	b940      	cbnz	r0, 800fde0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 800fdce:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800fdd2:	2b01      	cmp	r3, #1
 800fdd4:	d004      	beq.n	800fde0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 800fdd6:	3301      	adds	r3, #1
 800fdd8:	105b      	asrs	r3, r3, #1
 800fdda:	f8ad 3004 	strh.w	r3, [sp, #4]
 800fdde:	e7f0      	b.n	800fdc2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 800fde0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800fde4:	f8bd 3000 	ldrh.w	r3, [sp]
 800fde8:	4413      	add	r3, r2
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	441a      	add	r2, r3
 800fdee:	f8ad 3000 	strh.w	r3, [sp]
 800fdf2:	b212      	sxth	r2, r2
 800fdf4:	4296      	cmp	r6, r2
 800fdf6:	dae0      	bge.n	800fdba <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 800fdf8:	1aeb      	subs	r3, r5, r3
 800fdfa:	f8ad 3004 	strh.w	r3, [sp, #4]
 800fdfe:	e7dc      	b.n	800fdba <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 800fe00:	24025150 	.word	0x24025150

0800fe04 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 800fe04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fe06:	6803      	ldr	r3, [r0, #0]
 800fe08:	4604      	mov	r4, r0
 800fe0a:	4601      	mov	r1, r0
 800fe0c:	4668      	mov	r0, sp
 800fe0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fe10:	4798      	blx	r3
 800fe12:	2100      	movs	r1, #0
 800fe14:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800fe18:	4668      	mov	r0, sp
 800fe1a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800fe1e:	9102      	str	r1, [sp, #8]
 800fe20:	a902      	add	r1, sp, #8
 800fe22:	f8ad 200c 	strh.w	r2, [sp, #12]
 800fe26:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fe2a:	f7fd fc71 	bl	800d710 <_ZN8touchgfx4RectaNERKS0_>
 800fe2e:	6823      	ldr	r3, [r4, #0]
 800fe30:	4669      	mov	r1, sp
 800fe32:	4620      	mov	r0, r4
 800fe34:	691b      	ldr	r3, [r3, #16]
 800fe36:	4798      	blx	r3
 800fe38:	b004      	add	sp, #16
 800fe3a:	bd10      	pop	{r4, pc}

0800fe3c <_ZN8touchgfx12CanvasWidgetC1Ev>:
 800fe3c:	2101      	movs	r1, #1
 800fe3e:	2200      	movs	r2, #0
 800fe40:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 800fe44:	490a      	ldr	r1, [pc, #40]	@ (800fe70 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 800fe46:	8082      	strh	r2, [r0, #4]
 800fe48:	6001      	str	r1, [r0, #0]
 800fe4a:	21ff      	movs	r1, #255	@ 0xff
 800fe4c:	80c2      	strh	r2, [r0, #6]
 800fe4e:	8102      	strh	r2, [r0, #8]
 800fe50:	8142      	strh	r2, [r0, #10]
 800fe52:	8182      	strh	r2, [r0, #12]
 800fe54:	81c2      	strh	r2, [r0, #14]
 800fe56:	8202      	strh	r2, [r0, #16]
 800fe58:	8242      	strh	r2, [r0, #18]
 800fe5a:	61c2      	str	r2, [r0, #28]
 800fe5c:	8402      	strh	r2, [r0, #32]
 800fe5e:	8442      	strh	r2, [r0, #34]	@ 0x22
 800fe60:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 800fe64:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 800fe68:	6282      	str	r2, [r0, #40]	@ 0x28
 800fe6a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800fe6e:	4770      	bx	lr
 800fe70:	08023c20 	.word	0x08023c20

0800fe74 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800fe74:	2300      	movs	r3, #0
 800fe76:	8083      	strh	r3, [r0, #4]
 800fe78:	80c3      	strh	r3, [r0, #6]
 800fe7a:	8003      	strh	r3, [r0, #0]
 800fe7c:	8043      	strh	r3, [r0, #2]
 800fe7e:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 800fe82:	2bff      	cmp	r3, #255	@ 0xff
 800fe84:	bf01      	itttt	eq
 800fe86:	890b      	ldrheq	r3, [r1, #8]
 800fe88:	8083      	strheq	r3, [r0, #4]
 800fe8a:	894b      	ldrheq	r3, [r1, #10]
 800fe8c:	80c3      	strheq	r3, [r0, #6]
 800fe8e:	4770      	bx	lr

0800fe90 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800fe90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe92:	4604      	mov	r4, r0
 800fe94:	466b      	mov	r3, sp
 800fe96:	6808      	ldr	r0, [r1, #0]
 800fe98:	6849      	ldr	r1, [r1, #4]
 800fe9a:	c303      	stmia	r3!, {r0, r1}
 800fe9c:	6823      	ldr	r3, [r4, #0]
 800fe9e:	4669      	mov	r1, sp
 800fea0:	4620      	mov	r0, r4
 800fea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fea4:	4798      	blx	r3
 800fea6:	4b08      	ldr	r3, [pc, #32]	@ (800fec8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800feae:	b10a      	cbz	r2, 800feb4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800feb0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800feb2:	b900      	cbnz	r0, 800feb6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800feb4:	6898      	ldr	r0, [r3, #8]
 800feb6:	6803      	ldr	r3, [r0, #0]
 800feb8:	4669      	mov	r1, sp
 800feba:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800febc:	6a1d      	ldr	r5, [r3, #32]
 800febe:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800fec2:	47a8      	blx	r5
 800fec4:	b003      	add	sp, #12
 800fec6:	bd30      	pop	{r4, r5, pc}
 800fec8:	24025158 	.word	0x24025158

0800fecc <_ZN8touchgfx3BoxD1Ev>:
 800fecc:	4770      	bx	lr

0800fece <_ZN8touchgfx3BoxD0Ev>:
 800fece:	b510      	push	{r4, lr}
 800fed0:	4604      	mov	r4, r0
 800fed2:	212c      	movs	r1, #44	@ 0x2c
 800fed4:	f00f fd9c 	bl	801fa10 <_ZdlPvj>
 800fed8:	4620      	mov	r0, r4
 800feda:	bd10      	pop	{r4, pc}

0800fedc <_ZNK8touchgfx3Box17invalidateContentEv>:
 800fedc:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 800fee0:	b12a      	cbz	r2, 800feee <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800fee2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800fee6:	b112      	cbz	r2, 800feee <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800fee8:	6803      	ldr	r3, [r0, #0]
 800feea:	695b      	ldr	r3, [r3, #20]
 800feec:	4718      	bx	r3
 800feee:	4770      	bx	lr

0800fef0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800fef0:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800fef4:	4770      	bx	lr

0800fef6 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800fef6:	b570      	push	{r4, r5, r6, lr}
 800fef8:	880b      	ldrh	r3, [r1, #0]
 800fefa:	4605      	mov	r5, r0
 800fefc:	4604      	mov	r4, r0
 800fefe:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800ff00:	8813      	ldrh	r3, [r2, #0]
 800ff02:	f825 3f30 	strh.w	r3, [r5, #48]!
 800ff06:	4628      	mov	r0, r5
 800ff08:	f005 fd94 	bl	8015a34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ff0c:	4606      	mov	r6, r0
 800ff0e:	4628      	mov	r0, r5
 800ff10:	f005 fdc4 	bl	8015a9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ff14:	6823      	ldr	r3, [r4, #0]
 800ff16:	4605      	mov	r5, r0
 800ff18:	4631      	mov	r1, r6
 800ff1a:	4620      	mov	r0, r4
 800ff1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff1e:	4798      	blx	r3
 800ff20:	6823      	ldr	r3, [r4, #0]
 800ff22:	4629      	mov	r1, r5
 800ff24:	4620      	mov	r0, r4
 800ff26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff2c:	4718      	bx	r3

0800ff2e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800ff2e:	b510      	push	{r4, lr}
 800ff30:	4604      	mov	r4, r0
 800ff32:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800ff34:	b150      	cbz	r0, 800ff4c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800ff36:	6803      	ldr	r3, [r0, #0]
 800ff38:	68db      	ldr	r3, [r3, #12]
 800ff3a:	4798      	blx	r3
 800ff3c:	b130      	cbz	r0, 800ff4c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800ff3e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800ff40:	4621      	mov	r1, r4
 800ff42:	6803      	ldr	r3, [r0, #0]
 800ff44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff48:	689b      	ldr	r3, [r3, #8]
 800ff4a:	4718      	bx	r3
 800ff4c:	bd10      	pop	{r4, pc}

0800ff4e <_ZNK8touchgfx6Button12getSolidRectEv>:
 800ff4e:	b510      	push	{r4, lr}
 800ff50:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 800ff54:	4604      	mov	r4, r0
 800ff56:	2bff      	cmp	r3, #255	@ 0xff
 800ff58:	d006      	beq.n	800ff68 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	8003      	strh	r3, [r0, #0]
 800ff5e:	8043      	strh	r3, [r0, #2]
 800ff60:	8083      	strh	r3, [r0, #4]
 800ff62:	80c3      	strh	r3, [r0, #6]
 800ff64:	4620      	mov	r0, r4
 800ff66:	bd10      	pop	{r4, pc}
 800ff68:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 800ff6c:	b11b      	cbz	r3, 800ff76 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800ff6e:	3130      	adds	r1, #48	@ 0x30
 800ff70:	f005 fdc8 	bl	8015b04 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800ff74:	e7f6      	b.n	800ff64 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800ff76:	312e      	adds	r1, #46	@ 0x2e
 800ff78:	e7fa      	b.n	800ff70 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0800ff7c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800ff7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff80:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800ff84:	b08a      	sub	sp, #40	@ 0x28
 800ff86:	4604      	mov	r4, r0
 800ff88:	4688      	mov	r8, r1
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d066      	beq.n	801005c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800ff8e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800ff90:	a805      	add	r0, sp, #20
 800ff92:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ff96:	f005 fd4d 	bl	8015a34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ff9a:	4607      	mov	r7, r0
 800ff9c:	a805      	add	r0, sp, #20
 800ff9e:	f005 fd7d 	bl	8015a9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ffa2:	f9b8 6000 	ldrsh.w	r6, [r8]
 800ffa6:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800ffaa:	2300      	movs	r3, #0
 800ffac:	4432      	add	r2, r6
 800ffae:	9306      	str	r3, [sp, #24]
 800ffb0:	b292      	uxth	r2, r2
 800ffb2:	fa0f fc82 	sxth.w	ip, r2
 800ffb6:	459c      	cmp	ip, r3
 800ffb8:	dd52      	ble.n	8010060 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800ffba:	42b7      	cmp	r7, r6
 800ffbc:	dd50      	ble.n	8010060 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800ffbe:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800ffc2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800ffc6:	442b      	add	r3, r5
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	b219      	sxth	r1, r3
 800ffcc:	2900      	cmp	r1, #0
 800ffce:	dd47      	ble.n	8010060 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800ffd0:	42a8      	cmp	r0, r5
 800ffd2:	dd45      	ble.n	8010060 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800ffd4:	4567      	cmp	r7, ip
 800ffd6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800ffda:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800ffde:	bfb8      	it	lt
 800ffe0:	b2ba      	uxthlt	r2, r7
 800ffe2:	4288      	cmp	r0, r1
 800ffe4:	f8ad 6018 	strh.w	r6, [sp, #24]
 800ffe8:	bfb8      	it	lt
 800ffea:	b283      	uxthlt	r3, r0
 800ffec:	1b92      	subs	r2, r2, r6
 800ffee:	f8ad 501a 	strh.w	r5, [sp, #26]
 800fff2:	1b5b      	subs	r3, r3, r5
 800fff4:	f8ad 201c 	strh.w	r2, [sp, #28]
 800fff8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fffc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010000:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010004:	429a      	cmp	r2, r3
 8010006:	d026      	beq.n	8010056 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8010008:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801000c:	2b00      	cmp	r3, #0
 801000e:	dd22      	ble.n	8010056 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8010010:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8010014:	2b00      	cmp	r3, #0
 8010016:	dd1e      	ble.n	8010056 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8010018:	2300      	movs	r3, #0
 801001a:	a908      	add	r1, sp, #32
 801001c:	4620      	mov	r0, r4
 801001e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8010022:	6823      	ldr	r3, [r4, #0]
 8010024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010026:	4798      	blx	r3
 8010028:	4b0f      	ldr	r3, [pc, #60]	@ (8010068 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8010030:	b10a      	cbz	r2, 8010036 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8010032:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8010034:	b900      	cbnz	r0, 8010038 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8010036:	6898      	ldr	r0, [r3, #8]
 8010038:	2501      	movs	r5, #1
 801003a:	6801      	ldr	r1, [r0, #0]
 801003c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8010040:	9502      	str	r5, [sp, #8]
 8010042:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8010046:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801004a:	9401      	str	r4, [sp, #4]
 801004c:	ac06      	add	r4, sp, #24
 801004e:	9400      	str	r4, [sp, #0]
 8010050:	688c      	ldr	r4, [r1, #8]
 8010052:	a905      	add	r1, sp, #20
 8010054:	47a0      	blx	r4
 8010056:	b00a      	add	sp, #40	@ 0x28
 8010058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801005c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 801005e:	e797      	b.n	800ff90 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8010060:	2300      	movs	r3, #0
 8010062:	9307      	str	r3, [sp, #28]
 8010064:	e7ca      	b.n	800fffc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8010066:	bf00      	nop
 8010068:	24025158 	.word	0x24025158

0801006c <_ZNK8touchgfx6Button17invalidateContentEv>:
 801006c:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 8010070:	b12a      	cbz	r2, 801007e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8010072:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8010076:	b112      	cbz	r2, 801007e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8010078:	6803      	ldr	r3, [r0, #0]
 801007a:	695b      	ldr	r3, [r3, #20]
 801007c:	4718      	bx	r3
 801007e:	4770      	bx	lr

08010080 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8010080:	4770      	bx	lr

08010082 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8010082:	b510      	push	{r4, lr}
 8010084:	4604      	mov	r4, r0
 8010086:	2148      	movs	r1, #72	@ 0x48
 8010088:	f00f fcc2 	bl	801fa10 <_ZdlPvj>
 801008c:	4620      	mov	r0, r4
 801008e:	bd10      	pop	{r4, pc}

08010090 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8010090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010094:	b08d      	sub	sp, #52	@ 0x34
 8010096:	4604      	mov	r4, r0
 8010098:	460f      	mov	r7, r1
 801009a:	f7ff ff6f 	bl	800ff7c <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801009e:	4a55      	ldr	r2, [pc, #340]	@ (80101f4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 80100a0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80100a2:	8812      	ldrh	r2, [r2, #0]
 80100a4:	429a      	cmp	r2, r3
 80100a6:	f240 8082 	bls.w	80101ae <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80100aa:	4d53      	ldr	r5, [pc, #332]	@ (80101f8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 80100ac:	682a      	ldr	r2, [r5, #0]
 80100ae:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80100b2:	4b52      	ldr	r3, [pc, #328]	@ (80101fc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80100ba:	2200      	movs	r2, #0
 80100bc:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 80100c0:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80100c4:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80100c8:	2a03      	cmp	r2, #3
 80100ca:	d811      	bhi.n	80100f0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80100cc:	e8df f002 	tbb	[pc, r2]
 80100d0:	89727902 	.word	0x89727902
 80100d4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80100d8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80100dc:	1ad2      	subs	r2, r2, r3
 80100de:	2002      	movs	r0, #2
 80100e0:	f8ad 1010 	strh.w	r1, [sp, #16]
 80100e4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80100e8:	fb92 f2f0 	sdiv	r2, r2, r0
 80100ec:	f8ad 200e 	strh.w	r2, [sp, #14]
 80100f0:	f10d 080c 	add.w	r8, sp, #12
 80100f4:	f10d 0914 	add.w	r9, sp, #20
 80100f8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80100fc:	e889 0003 	stmia.w	r9, {r0, r1}
 8010100:	4639      	mov	r1, r7
 8010102:	4648      	mov	r0, r9
 8010104:	f7fd fb04 	bl	800d710 <_ZN8touchgfx4RectaNERKS0_>
 8010108:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801010c:	2b00      	cmp	r3, #0
 801010e:	dd4e      	ble.n	80101ae <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8010110:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8010114:	2b00      	cmp	r3, #0
 8010116:	dd4a      	ble.n	80101ae <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8010118:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801011c:	4641      	mov	r1, r8
 801011e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010122:	4620      	mov	r0, r4
 8010124:	1a9b      	subs	r3, r3, r2
 8010126:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801012a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801012e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8010132:	1a9b      	subs	r3, r3, r2
 8010134:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010138:	6823      	ldr	r3, [r4, #0]
 801013a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801013c:	4798      	blx	r3
 801013e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010142:	2b00      	cmp	r3, #0
 8010144:	d053      	beq.n	80101ee <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 8010146:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8010148:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 801014a:	682b      	ldr	r3, [r5, #0]
 801014c:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8010150:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8010154:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 8010158:	785b      	ldrb	r3, [r3, #1]
 801015a:	9209      	str	r2, [sp, #36]	@ 0x24
 801015c:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8010160:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8010164:	9607      	str	r6, [sp, #28]
 8010166:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 801016a:	2300      	movs	r3, #0
 801016c:	f88d 5020 	strb.w	r5, [sp, #32]
 8010170:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8010174:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 8010178:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 801017c:	4b20      	ldr	r3, [pc, #128]	@ (8010200 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801017e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8010188:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801018c:	b10a      	cbz	r2, 8010192 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 801018e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010190:	b904      	cbnz	r4, 8010194 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 8010192:	689c      	ldr	r4, [r3, #8]
 8010194:	4b1b      	ldr	r3, [pc, #108]	@ (8010204 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8010196:	6818      	ldr	r0, [r3, #0]
 8010198:	f7f3 ff48 	bl	800402c <_ZNK8touchgfx5Texts7getTextEt>
 801019c:	ab07      	add	r3, sp, #28
 801019e:	9001      	str	r0, [sp, #4]
 80101a0:	4620      	mov	r0, r4
 80101a2:	9300      	str	r3, [sp, #0]
 80101a4:	464b      	mov	r3, r9
 80101a6:	e898 0006 	ldmia.w	r8, {r1, r2}
 80101aa:	f7f3 fef1 	bl	8003f90 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80101ae:	b00d      	add	sp, #52	@ 0x34
 80101b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101b4:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80101b8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80101bc:	1ad2      	subs	r2, r2, r3
 80101be:	3201      	adds	r2, #1
 80101c0:	e78d      	b.n	80100de <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 80101c2:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80101c6:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80101ca:	1ad2      	subs	r2, r2, r3
 80101cc:	3201      	adds	r2, #1
 80101ce:	2002      	movs	r0, #2
 80101d0:	f8ad 3010 	strh.w	r3, [sp, #16]
 80101d4:	f8ad 1012 	strh.w	r1, [sp, #18]
 80101d8:	fb92 f2f0 	sdiv	r2, r2, r0
 80101dc:	f8ad 200c 	strh.w	r2, [sp, #12]
 80101e0:	e786      	b.n	80100f0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80101e2:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80101e6:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80101ea:	1ad2      	subs	r2, r2, r3
 80101ec:	e7ef      	b.n	80101ce <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 80101ee:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80101f0:	e7aa      	b.n	8010148 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 80101f2:	bf00      	nop
 80101f4:	240251b4 	.word	0x240251b4
 80101f8:	240251b0 	.word	0x240251b0
 80101fc:	240251b8 	.word	0x240251b8
 8010200:	24025158 	.word	0x24025158
 8010204:	240251bc 	.word	0x240251bc

08010208 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8010208:	2101      	movs	r1, #1
 801020a:	2200      	movs	r2, #0
 801020c:	b510      	push	{r4, lr}
 801020e:	4c13      	ldr	r4, [pc, #76]	@ (801025c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8010210:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8010214:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8010218:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801021c:	6004      	str	r4, [r0, #0]
 801021e:	4c10      	ldr	r4, [pc, #64]	@ (8010260 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8010220:	8082      	strh	r2, [r0, #4]
 8010222:	80c2      	strh	r2, [r0, #6]
 8010224:	8102      	strh	r2, [r0, #8]
 8010226:	8142      	strh	r2, [r0, #10]
 8010228:	8182      	strh	r2, [r0, #12]
 801022a:	81c2      	strh	r2, [r0, #14]
 801022c:	8202      	strh	r2, [r0, #16]
 801022e:	8242      	strh	r2, [r0, #18]
 8010230:	61c2      	str	r2, [r0, #28]
 8010232:	8402      	strh	r2, [r0, #32]
 8010234:	8442      	strh	r2, [r0, #34]	@ 0x22
 8010236:	6282      	str	r2, [r0, #40]	@ 0x28
 8010238:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 801023c:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 801023e:	8601      	strh	r1, [r0, #48]	@ 0x30
 8010240:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 8010244:	6344      	str	r4, [r0, #52]	@ 0x34
 8010246:	8701      	strh	r1, [r0, #56]	@ 0x38
 8010248:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801024c:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 8010250:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8010254:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8010258:	bd10      	pop	{r4, pc}
 801025a:	bf00      	nop
 801025c:	08023d00 	.word	0x08023d00
 8010260:	08022eb4 	.word	0x08022eb4

08010264 <_ZN8touchgfx7OutlineD1Ev>:
 8010264:	4770      	bx	lr

08010266 <_ZN8touchgfx7OutlineD0Ev>:
 8010266:	b510      	push	{r4, lr}
 8010268:	4604      	mov	r4, r0
 801026a:	2130      	movs	r1, #48	@ 0x30
 801026c:	f00f fbd0 	bl	801fa10 <_ZdlPvj>
 8010270:	4620      	mov	r0, r4
 8010272:	bd10      	pop	{r4, pc}

08010274 <_ZN8touchgfx7Outline5resetEv>:
 8010274:	b510      	push	{r4, lr}
 8010276:	4604      	mov	r4, r0
 8010278:	f000 fe72 	bl	8010f60 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801027c:	60e0      	str	r0, [r4, #12]
 801027e:	f000 fe75 	bl	8010f6c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8010282:	68e3      	ldr	r3, [r4, #12]
 8010284:	08c0      	lsrs	r0, r0, #3
 8010286:	2200      	movs	r2, #0
 8010288:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 801028c:	6123      	str	r3, [r4, #16]
 801028e:	3801      	subs	r0, #1
 8010290:	60a2      	str	r2, [r4, #8]
 8010292:	6060      	str	r0, [r4, #4]
 8010294:	8019      	strh	r1, [r3, #0]
 8010296:	8059      	strh	r1, [r3, #2]
 8010298:	809a      	strh	r2, [r3, #4]
 801029a:	80da      	strh	r2, [r3, #6]
 801029c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801029e:	f023 0301 	bic.w	r3, r3, #1
 80102a2:	f043 0302 	orr.w	r3, r3, #2
 80102a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80102a8:	bd10      	pop	{r4, pc}
	...

080102ac <_ZN8touchgfx7OutlineC1Ev>:
 80102ac:	4b0a      	ldr	r3, [pc, #40]	@ (80102d8 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 80102ae:	b510      	push	{r4, lr}
 80102b0:	6003      	str	r3, [r0, #0]
 80102b2:	2300      	movs	r3, #0
 80102b4:	4604      	mov	r4, r0
 80102b6:	6243      	str	r3, [r0, #36]	@ 0x24
 80102b8:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80102bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80102c0:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80102c4:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80102c8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80102cc:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 80102d0:	f7ff ffd0 	bl	8010274 <_ZN8touchgfx7Outline5resetEv>
 80102d4:	4620      	mov	r0, r4
 80102d6:	bd10      	pop	{r4, pc}
 80102d8:	08023d74 	.word	0x08023d74

080102dc <_ZN8touchgfx7Outline10renderLineEiiii>:
 80102dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102e0:	b093      	sub	sp, #76	@ 0x4c
 80102e2:	1156      	asrs	r6, r2, #5
 80102e4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80102e6:	9305      	str	r3, [sp, #20]
 80102e8:	1153      	asrs	r3, r2, #5
 80102ea:	f004 051f 	and.w	r5, r4, #31
 80102ee:	9303      	str	r3, [sp, #12]
 80102f0:	1163      	asrs	r3, r4, #5
 80102f2:	9504      	str	r5, [sp, #16]
 80102f4:	1165      	asrs	r5, r4, #5
 80102f6:	9306      	str	r3, [sp, #24]
 80102f8:	f002 031f 	and.w	r3, r2, #31
 80102fc:	42ae      	cmp	r6, r5
 80102fe:	f040 80f4 	bne.w	80104ea <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8010302:	9c04      	ldr	r4, [sp, #16]
 8010304:	9a05      	ldr	r2, [sp, #20]
 8010306:	42a3      	cmp	r3, r4
 8010308:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801030c:	6902      	ldr	r2, [r0, #16]
 801030e:	d125      	bne.n	801035c <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8010310:	f9b2 3000 	ldrsh.w	r3, [r2]
 8010314:	459e      	cmp	lr, r3
 8010316:	d103      	bne.n	8010320 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8010318:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801031c:	429e      	cmp	r6, r3
 801031e:	d035      	beq.n	801038c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010320:	88d1      	ldrh	r1, [r2, #6]
 8010322:	8893      	ldrh	r3, [r2, #4]
 8010324:	430b      	orrs	r3, r1
 8010326:	d010      	beq.n	801034a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8010328:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801032c:	2b00      	cmp	r3, #0
 801032e:	db0c      	blt.n	801034a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8010330:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010332:	428b      	cmp	r3, r1
 8010334:	da09      	bge.n	801034a <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8010336:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801033a:	428b      	cmp	r3, r1
 801033c:	f103 0301 	add.w	r3, r3, #1
 8010340:	bf38      	it	cc
 8010342:	3208      	addcc	r2, #8
 8010344:	6083      	str	r3, [r0, #8]
 8010346:	bf38      	it	cc
 8010348:	6102      	strcc	r2, [r0, #16]
 801034a:	6903      	ldr	r3, [r0, #16]
 801034c:	9a03      	ldr	r2, [sp, #12]
 801034e:	f8a3 e000 	strh.w	lr, [r3]
 8010352:	805a      	strh	r2, [r3, #2]
 8010354:	2200      	movs	r2, #0
 8010356:	809a      	strh	r2, [r3, #4]
 8010358:	80da      	strh	r2, [r3, #6]
 801035a:	e017      	b.n	801038c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801035c:	9c05      	ldr	r4, [sp, #20]
 801035e:	114e      	asrs	r6, r1, #5
 8010360:	f001 0c1f 	and.w	ip, r1, #31
 8010364:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010368:	f004 041f 	and.w	r4, r4, #31
 801036c:	4576      	cmp	r6, lr
 801036e:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8010372:	9402      	str	r4, [sp, #8]
 8010374:	9c04      	ldr	r4, [sp, #16]
 8010376:	eba4 0403 	sub.w	r4, r4, r3
 801037a:	d10a      	bne.n	8010392 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 801037c:	9b02      	ldr	r3, [sp, #8]
 801037e:	44a0      	add	r8, r4
 8010380:	449c      	add	ip, r3
 8010382:	f8a2 8004 	strh.w	r8, [r2, #4]
 8010386:	fb04 a40c 	mla	r4, r4, ip, sl
 801038a:	80d4      	strh	r4, [r2, #6]
 801038c:	b013      	add	sp, #76	@ 0x4c
 801038e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010392:	9d05      	ldr	r5, [sp, #20]
 8010394:	1a69      	subs	r1, r5, r1
 8010396:	bf51      	iteee	pl
 8010398:	f1cc 0520 	rsbpl	r5, ip, #32
 801039c:	fb04 f40c 	mulmi.w	r4, r4, ip
 80103a0:	4249      	negmi	r1, r1
 80103a2:	2500      	movmi	r5, #0
 80103a4:	bf5d      	ittte	pl
 80103a6:	436c      	mulpl	r4, r5
 80103a8:	2520      	movpl	r5, #32
 80103aa:	f04f 0901 	movpl.w	r9, #1
 80103ae:	f04f 39ff 	movmi.w	r9, #4294967295
 80103b2:	9501      	str	r5, [sp, #4]
 80103b4:	9f01      	ldr	r7, [sp, #4]
 80103b6:	444e      	add	r6, r9
 80103b8:	fb94 f5f1 	sdiv	r5, r4, r1
 80103bc:	fb01 4415 	mls	r4, r1, r5, r4
 80103c0:	44bc      	add	ip, r7
 80103c2:	2c00      	cmp	r4, #0
 80103c4:	bfbc      	itt	lt
 80103c6:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80103ca:	1864      	addlt	r4, r4, r1
 80103cc:	44a8      	add	r8, r5
 80103ce:	fb05 ac0c 	mla	ip, r5, ip, sl
 80103d2:	f8a2 8004 	strh.w	r8, [r2, #4]
 80103d6:	f8a2 c006 	strh.w	ip, [r2, #6]
 80103da:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80103de:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80103e2:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80103e6:	ea58 0202 	orrs.w	r2, r8, r2
 80103ea:	d011      	beq.n	8010410 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80103ec:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80103f0:	f1b8 0f00 	cmp.w	r8, #0
 80103f4:	db0c      	blt.n	8010410 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80103f6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80103f8:	4590      	cmp	r8, r2
 80103fa:	da09      	bge.n	8010410 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80103fc:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8010400:	4590      	cmp	r8, r2
 8010402:	bf3c      	itt	cc
 8010404:	f10c 0208 	addcc.w	r2, ip, #8
 8010408:	6102      	strcc	r2, [r0, #16]
 801040a:	f108 0201 	add.w	r2, r8, #1
 801040e:	6082      	str	r2, [r0, #8]
 8010410:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010414:	2700      	movs	r7, #0
 8010416:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801041a:	45b6      	cmp	lr, r6
 801041c:	f8ac 6000 	strh.w	r6, [ip]
 8010420:	442b      	add	r3, r5
 8010422:	f8ac 2002 	strh.w	r2, [ip, #2]
 8010426:	f8ac 7004 	strh.w	r7, [ip, #4]
 801042a:	f8ac 7006 	strh.w	r7, [ip, #6]
 801042e:	d04b      	beq.n	80104c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8010430:	9f04      	ldr	r7, [sp, #16]
 8010432:	1a64      	subs	r4, r4, r1
 8010434:	f04f 0a00 	mov.w	sl, #0
 8010438:	1aff      	subs	r7, r7, r3
 801043a:	443d      	add	r5, r7
 801043c:	016d      	lsls	r5, r5, #5
 801043e:	fb95 f8f1 	sdiv	r8, r5, r1
 8010442:	fb01 5518 	mls	r5, r1, r8, r5
 8010446:	2d00      	cmp	r5, #0
 8010448:	bfbc      	itt	lt
 801044a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801044e:	186d      	addlt	r5, r5, r1
 8010450:	f108 0701 	add.w	r7, r8, #1
 8010454:	9703      	str	r7, [sp, #12]
 8010456:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801045a:	1964      	adds	r4, r4, r5
 801045c:	444e      	add	r6, r9
 801045e:	bf54      	ite	pl
 8010460:	9f03      	ldrpl	r7, [sp, #12]
 8010462:	4647      	movmi	r7, r8
 8010464:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8010468:	bf58      	it	pl
 801046a:	1a64      	subpl	r4, r4, r1
 801046c:	443b      	add	r3, r7
 801046e:	44bb      	add	fp, r7
 8010470:	f8ac b004 	strh.w	fp, [ip, #4]
 8010474:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010478:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801047c:	f8ac b006 	strh.w	fp, [ip, #6]
 8010480:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010484:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010488:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801048c:	ea5b 0707 	orrs.w	r7, fp, r7
 8010490:	d011      	beq.n	80104b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8010492:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8010496:	f1bb 0f00 	cmp.w	fp, #0
 801049a:	db0c      	blt.n	80104b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801049c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801049e:	45bb      	cmp	fp, r7
 80104a0:	da09      	bge.n	80104b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80104a2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80104a6:	45bb      	cmp	fp, r7
 80104a8:	bf3c      	itt	cc
 80104aa:	f10c 0708 	addcc.w	r7, ip, #8
 80104ae:	6107      	strcc	r7, [r0, #16]
 80104b0:	f10b 0701 	add.w	r7, fp, #1
 80104b4:	6087      	str	r7, [r0, #8]
 80104b6:	6907      	ldr	r7, [r0, #16]
 80104b8:	45b6      	cmp	lr, r6
 80104ba:	803e      	strh	r6, [r7, #0]
 80104bc:	807a      	strh	r2, [r7, #2]
 80104be:	f8a7 a004 	strh.w	sl, [r7, #4]
 80104c2:	f8a7 a006 	strh.w	sl, [r7, #6]
 80104c6:	d1c6      	bne.n	8010456 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 80104c8:	9a04      	ldr	r2, [sp, #16]
 80104ca:	1ad3      	subs	r3, r2, r3
 80104cc:	6902      	ldr	r2, [r0, #16]
 80104ce:	8891      	ldrh	r1, [r2, #4]
 80104d0:	88d6      	ldrh	r6, [r2, #6]
 80104d2:	4419      	add	r1, r3
 80104d4:	8091      	strh	r1, [r2, #4]
 80104d6:	9902      	ldr	r1, [sp, #8]
 80104d8:	f101 0c20 	add.w	ip, r1, #32
 80104dc:	9901      	ldr	r1, [sp, #4]
 80104de:	ebac 0c01 	sub.w	ip, ip, r1
 80104e2:	fb03 630c 	mla	r3, r3, ip, r6
 80104e6:	80d3      	strh	r3, [r2, #6]
 80104e8:	e750      	b.n	801038c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80104ea:	9d05      	ldr	r5, [sp, #20]
 80104ec:	1aa2      	subs	r2, r4, r2
 80104ee:	eba5 0501 	sub.w	r5, r5, r1
 80104f2:	9202      	str	r2, [sp, #8]
 80104f4:	9508      	str	r5, [sp, #32]
 80104f6:	f140 8128 	bpl.w	801074a <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 80104fa:	9a03      	ldr	r2, [sp, #12]
 80104fc:	2a00      	cmp	r2, #0
 80104fe:	f6ff af45 	blt.w	801038c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010502:	9a02      	ldr	r2, [sp, #8]
 8010504:	f04f 34ff 	mov.w	r4, #4294967295
 8010508:	4252      	negs	r2, r2
 801050a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801050c:	2400      	movs	r4, #0
 801050e:	9202      	str	r2, [sp, #8]
 8010510:	9a06      	ldr	r2, [sp, #24]
 8010512:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8010516:	9206      	str	r2, [sp, #24]
 8010518:	462a      	mov	r2, r5
 801051a:	435a      	muls	r2, r3
 801051c:	9401      	str	r4, [sp, #4]
 801051e:	9c02      	ldr	r4, [sp, #8]
 8010520:	9d02      	ldr	r5, [sp, #8]
 8010522:	fb92 f4f4 	sdiv	r4, r2, r4
 8010526:	fb05 2214 	mls	r2, r5, r4, r2
 801052a:	2a00      	cmp	r2, #0
 801052c:	9207      	str	r2, [sp, #28]
 801052e:	bfbc      	itt	lt
 8010530:	1952      	addlt	r2, r2, r5
 8010532:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8010536:	6905      	ldr	r5, [r0, #16]
 8010538:	bfb8      	it	lt
 801053a:	9207      	strlt	r2, [sp, #28]
 801053c:	eb04 0901 	add.w	r9, r4, r1
 8010540:	9a01      	ldr	r2, [sp, #4]
 8010542:	ea4f 1669 	mov.w	r6, r9, asr #5
 8010546:	429a      	cmp	r2, r3
 8010548:	f040 8111 	bne.w	801076e <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 801054c:	f9b5 3000 	ldrsh.w	r3, [r5]
 8010550:	429e      	cmp	r6, r3
 8010552:	d104      	bne.n	801055e <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8010554:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8010558:	9a03      	ldr	r2, [sp, #12]
 801055a:	429a      	cmp	r2, r3
 801055c:	d01b      	beq.n	8010596 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801055e:	88ea      	ldrh	r2, [r5, #6]
 8010560:	88ab      	ldrh	r3, [r5, #4]
 8010562:	4313      	orrs	r3, r2
 8010564:	d010      	beq.n	8010588 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8010566:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801056a:	2a00      	cmp	r2, #0
 801056c:	db0c      	blt.n	8010588 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801056e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010570:	429a      	cmp	r2, r3
 8010572:	da09      	bge.n	8010588 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8010574:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010578:	429a      	cmp	r2, r3
 801057a:	f102 0201 	add.w	r2, r2, #1
 801057e:	bf38      	it	cc
 8010580:	3508      	addcc	r5, #8
 8010582:	6082      	str	r2, [r0, #8]
 8010584:	bf38      	it	cc
 8010586:	6105      	strcc	r5, [r0, #16]
 8010588:	6903      	ldr	r3, [r0, #16]
 801058a:	9a03      	ldr	r2, [sp, #12]
 801058c:	801e      	strh	r6, [r3, #0]
 801058e:	805a      	strh	r2, [r3, #2]
 8010590:	2200      	movs	r2, #0
 8010592:	809a      	strh	r2, [r3, #4]
 8010594:	80da      	strh	r2, [r3, #6]
 8010596:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010598:	9a03      	ldr	r2, [sp, #12]
 801059a:	6901      	ldr	r1, [r0, #16]
 801059c:	441a      	add	r2, r3
 801059e:	f9b1 3000 	ldrsh.w	r3, [r1]
 80105a2:	42b3      	cmp	r3, r6
 80105a4:	d103      	bne.n	80105ae <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 80105a6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d01a      	beq.n	80105e4 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 80105ae:	88cc      	ldrh	r4, [r1, #6]
 80105b0:	888b      	ldrh	r3, [r1, #4]
 80105b2:	4323      	orrs	r3, r4
 80105b4:	d010      	beq.n	80105d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80105b6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80105ba:	2c00      	cmp	r4, #0
 80105bc:	db0c      	blt.n	80105d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80105be:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80105c0:	429c      	cmp	r4, r3
 80105c2:	da09      	bge.n	80105d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80105c4:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80105c8:	429c      	cmp	r4, r3
 80105ca:	f104 0401 	add.w	r4, r4, #1
 80105ce:	bf38      	it	cc
 80105d0:	3108      	addcc	r1, #8
 80105d2:	6084      	str	r4, [r0, #8]
 80105d4:	bf38      	it	cc
 80105d6:	6101      	strcc	r1, [r0, #16]
 80105d8:	6903      	ldr	r3, [r0, #16]
 80105da:	2100      	movs	r1, #0
 80105dc:	801e      	strh	r6, [r3, #0]
 80105de:	805a      	strh	r2, [r3, #2]
 80105e0:	8099      	strh	r1, [r3, #4]
 80105e2:	80d9      	strh	r1, [r3, #6]
 80105e4:	9b06      	ldr	r3, [sp, #24]
 80105e6:	4293      	cmp	r3, r2
 80105e8:	f000 8082 	beq.w	80106f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 80105ec:	9b08      	ldr	r3, [sp, #32]
 80105ee:	9902      	ldr	r1, [sp, #8]
 80105f0:	015b      	lsls	r3, r3, #5
 80105f2:	9c02      	ldr	r4, [sp, #8]
 80105f4:	fb93 f1f1 	sdiv	r1, r3, r1
 80105f8:	fb04 3311 	mls	r3, r4, r1, r3
 80105fc:	9103      	str	r1, [sp, #12]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	9308      	str	r3, [sp, #32]
 8010602:	da04      	bge.n	801060e <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8010604:	1e4b      	subs	r3, r1, #1
 8010606:	9303      	str	r3, [sp, #12]
 8010608:	9b08      	ldr	r3, [sp, #32]
 801060a:	4423      	add	r3, r4
 801060c:	9308      	str	r3, [sp, #32]
 801060e:	9b07      	ldr	r3, [sp, #28]
 8010610:	464f      	mov	r7, r9
 8010612:	9902      	ldr	r1, [sp, #8]
 8010614:	2600      	movs	r6, #0
 8010616:	1a5b      	subs	r3, r3, r1
 8010618:	9307      	str	r3, [sp, #28]
 801061a:	9b01      	ldr	r3, [sp, #4]
 801061c:	f1c3 0320 	rsb	r3, r3, #32
 8010620:	930e      	str	r3, [sp, #56]	@ 0x38
 8010622:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010624:	9b01      	ldr	r3, [sp, #4]
 8010626:	1a5b      	subs	r3, r3, r1
 8010628:	930a      	str	r3, [sp, #40]	@ 0x28
 801062a:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801062e:	185b      	adds	r3, r3, r1
 8010630:	bf58      	it	pl
 8010632:	9902      	ldrpl	r1, [sp, #8]
 8010634:	9307      	str	r3, [sp, #28]
 8010636:	bf57      	itett	pl
 8010638:	1a5b      	subpl	r3, r3, r1
 801063a:	9903      	ldrmi	r1, [sp, #12]
 801063c:	9307      	strpl	r3, [sp, #28]
 801063e:	9b03      	ldrpl	r3, [sp, #12]
 8010640:	bf58      	it	pl
 8010642:	1c59      	addpl	r1, r3, #1
 8010644:	2a00      	cmp	r2, #0
 8010646:	4489      	add	r9, r1
 8010648:	ea4f 1a69 	mov.w	sl, r9, asr #5
 801064c:	db2e      	blt.n	80106ac <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801064e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010650:	4293      	cmp	r3, r2
 8010652:	dd2b      	ble.n	80106ac <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010654:	9c01      	ldr	r4, [sp, #4]
 8010656:	6905      	ldr	r5, [r0, #16]
 8010658:	46a0      	mov	r8, r4
 801065a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801065c:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8010660:	45a0      	cmp	r8, r4
 8010662:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8010666:	f040 814c 	bne.w	8010902 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801066a:	f9b5 1000 	ldrsh.w	r1, [r5]
 801066e:	4551      	cmp	r1, sl
 8010670:	d103      	bne.n	801067a <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8010672:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8010676:	4291      	cmp	r1, r2
 8010678:	d018      	beq.n	80106ac <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801067a:	ea5c 010e 	orrs.w	r1, ip, lr
 801067e:	d00f      	beq.n	80106a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8010680:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8010684:	2900      	cmp	r1, #0
 8010686:	db0b      	blt.n	80106a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8010688:	428b      	cmp	r3, r1
 801068a:	dd09      	ble.n	80106a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801068c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8010690:	4299      	cmp	r1, r3
 8010692:	f101 0101 	add.w	r1, r1, #1
 8010696:	bf38      	it	cc
 8010698:	3508      	addcc	r5, #8
 801069a:	6081      	str	r1, [r0, #8]
 801069c:	bf38      	it	cc
 801069e:	6105      	strcc	r5, [r0, #16]
 80106a0:	6903      	ldr	r3, [r0, #16]
 80106a2:	f8a3 a000 	strh.w	sl, [r3]
 80106a6:	805a      	strh	r2, [r3, #2]
 80106a8:	809e      	strh	r6, [r3, #4]
 80106aa:	80de      	strh	r6, [r3, #6]
 80106ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80106ae:	6901      	ldr	r1, [r0, #16]
 80106b0:	441a      	add	r2, r3
 80106b2:	88cc      	ldrh	r4, [r1, #6]
 80106b4:	888b      	ldrh	r3, [r1, #4]
 80106b6:	4323      	orrs	r3, r4
 80106b8:	d010      	beq.n	80106dc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80106ba:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80106be:	2c00      	cmp	r4, #0
 80106c0:	db0c      	blt.n	80106dc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80106c2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80106c4:	429c      	cmp	r4, r3
 80106c6:	da09      	bge.n	80106dc <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80106c8:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80106cc:	429c      	cmp	r4, r3
 80106ce:	f104 0401 	add.w	r4, r4, #1
 80106d2:	bf38      	it	cc
 80106d4:	3108      	addcc	r1, #8
 80106d6:	6084      	str	r4, [r0, #8]
 80106d8:	bf38      	it	cc
 80106da:	6101      	strcc	r1, [r0, #16]
 80106dc:	6903      	ldr	r3, [r0, #16]
 80106de:	464f      	mov	r7, r9
 80106e0:	f8a3 a000 	strh.w	sl, [r3]
 80106e4:	805a      	strh	r2, [r3, #2]
 80106e6:	809e      	strh	r6, [r3, #4]
 80106e8:	80de      	strh	r6, [r3, #6]
 80106ea:	9b06      	ldr	r3, [sp, #24]
 80106ec:	4293      	cmp	r3, r2
 80106ee:	d19c      	bne.n	801062a <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 80106f0:	9b01      	ldr	r3, [sp, #4]
 80106f2:	6907      	ldr	r7, [r0, #16]
 80106f4:	f1c3 0620 	rsb	r6, r3, #32
 80106f8:	9b05      	ldr	r3, [sp, #20]
 80106fa:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80106fe:	9b04      	ldr	r3, [sp, #16]
 8010700:	429e      	cmp	r6, r3
 8010702:	f040 81c7 	bne.w	8010a94 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8010706:	f9b7 3000 	ldrsh.w	r3, [r7]
 801070a:	459e      	cmp	lr, r3
 801070c:	d104      	bne.n	8010718 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 801070e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010712:	429a      	cmp	r2, r3
 8010714:	f43f ae3a 	beq.w	801038c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010718:	88f9      	ldrh	r1, [r7, #6]
 801071a:	88bb      	ldrh	r3, [r7, #4]
 801071c:	430b      	orrs	r3, r1
 801071e:	d010      	beq.n	8010742 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8010720:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010724:	2b00      	cmp	r3, #0
 8010726:	db0c      	blt.n	8010742 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8010728:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801072a:	428b      	cmp	r3, r1
 801072c:	da09      	bge.n	8010742 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 801072e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8010732:	428b      	cmp	r3, r1
 8010734:	f103 0301 	add.w	r3, r3, #1
 8010738:	bf38      	it	cc
 801073a:	3708      	addcc	r7, #8
 801073c:	6083      	str	r3, [r0, #8]
 801073e:	bf38      	it	cc
 8010740:	6107      	strcc	r7, [r0, #16]
 8010742:	6903      	ldr	r3, [r0, #16]
 8010744:	f8a3 e000 	strh.w	lr, [r3]
 8010748:	e603      	b.n	8010352 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 801074a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801074c:	9c03      	ldr	r4, [sp, #12]
 801074e:	42a2      	cmp	r2, r4
 8010750:	f6ff ae1c 	blt.w	801038c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010754:	9c06      	ldr	r4, [sp, #24]
 8010756:	42a2      	cmp	r2, r4
 8010758:	9c08      	ldr	r4, [sp, #32]
 801075a:	bfbc      	itt	lt
 801075c:	3201      	addlt	r2, #1
 801075e:	9206      	strlt	r2, [sp, #24]
 8010760:	f1c3 0220 	rsb	r2, r3, #32
 8010764:	4362      	muls	r2, r4
 8010766:	2401      	movs	r4, #1
 8010768:	940b      	str	r4, [sp, #44]	@ 0x2c
 801076a:	2420      	movs	r4, #32
 801076c:	e6d6      	b.n	801051c <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 801076e:	ea4f 1861 	mov.w	r8, r1, asr #5
 8010772:	f009 021f 	and.w	r2, r9, #31
 8010776:	f001 011f 	and.w	r1, r1, #31
 801077a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801077e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010780:	45b0      	cmp	r8, r6
 8010782:	9a01      	ldr	r2, [sp, #4]
 8010784:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8010788:	eba2 0203 	sub.w	r2, r2, r3
 801078c:	d108      	bne.n	80107a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 801078e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010790:	4496      	add	lr, r2
 8010792:	4419      	add	r1, r3
 8010794:	f8a5 e004 	strh.w	lr, [r5, #4]
 8010798:	fb02 a101 	mla	r1, r2, r1, sl
 801079c:	80e9      	strh	r1, [r5, #6]
 801079e:	e6fa      	b.n	8010596 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80107a0:	2c00      	cmp	r4, #0
 80107a2:	f2c0 80a7 	blt.w	80108f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 80107a6:	2701      	movs	r7, #1
 80107a8:	f1c1 0c20 	rsb	ip, r1, #32
 80107ac:	970a      	str	r7, [sp, #40]	@ 0x28
 80107ae:	2720      	movs	r7, #32
 80107b0:	fb02 f20c 	mul.w	r2, r2, ip
 80107b4:	9709      	str	r7, [sp, #36]	@ 0x24
 80107b6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80107b8:	fb92 fcf4 	sdiv	ip, r2, r4
 80107bc:	fb04 221c 	mls	r2, r4, ip, r2
 80107c0:	4439      	add	r1, r7
 80107c2:	2a00      	cmp	r2, #0
 80107c4:	bfbc      	itt	lt
 80107c6:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80107ca:	1912      	addlt	r2, r2, r4
 80107cc:	fb0c a101 	mla	r1, ip, r1, sl
 80107d0:	44e6      	add	lr, ip
 80107d2:	80e9      	strh	r1, [r5, #6]
 80107d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80107d6:	f8a5 e004 	strh.w	lr, [r5, #4]
 80107da:	eb08 0501 	add.w	r5, r8, r1
 80107de:	6901      	ldr	r1, [r0, #16]
 80107e0:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80107e4:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80107e8:	ea58 070e 	orrs.w	r7, r8, lr
 80107ec:	d010      	beq.n	8010810 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80107ee:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 80107f2:	f1be 0f00 	cmp.w	lr, #0
 80107f6:	db0b      	blt.n	8010810 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80107f8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80107fa:	45be      	cmp	lr, r7
 80107fc:	da08      	bge.n	8010810 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 80107fe:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8010802:	45be      	cmp	lr, r7
 8010804:	bf3c      	itt	cc
 8010806:	3108      	addcc	r1, #8
 8010808:	6101      	strcc	r1, [r0, #16]
 801080a:	f10e 0101 	add.w	r1, lr, #1
 801080e:	6081      	str	r1, [r0, #8]
 8010810:	6901      	ldr	r1, [r0, #16]
 8010812:	f04f 0e00 	mov.w	lr, #0
 8010816:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801081a:	42ae      	cmp	r6, r5
 801081c:	800d      	strh	r5, [r1, #0]
 801081e:	4463      	add	r3, ip
 8010820:	f8a1 8002 	strh.w	r8, [r1, #2]
 8010824:	f8a1 e004 	strh.w	lr, [r1, #4]
 8010828:	f8a1 e006 	strh.w	lr, [r1, #6]
 801082c:	d053      	beq.n	80108d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 801082e:	9901      	ldr	r1, [sp, #4]
 8010830:	1b12      	subs	r2, r2, r4
 8010832:	1ac9      	subs	r1, r1, r3
 8010834:	4461      	add	r1, ip
 8010836:	0149      	lsls	r1, r1, #5
 8010838:	fb91 fef4 	sdiv	lr, r1, r4
 801083c:	fb04 111e 	mls	r1, r4, lr, r1
 8010840:	2900      	cmp	r1, #0
 8010842:	bfbc      	itt	lt
 8010844:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8010848:	1909      	addlt	r1, r1, r4
 801084a:	f10e 0701 	add.w	r7, lr, #1
 801084e:	970d      	str	r7, [sp, #52]	@ 0x34
 8010850:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8010854:	1852      	adds	r2, r2, r1
 8010856:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8010858:	bf54      	ite	pl
 801085a:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 801085e:	46f4      	movmi	ip, lr
 8010860:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8010864:	bf58      	it	pl
 8010866:	1b12      	subpl	r2, r2, r4
 8010868:	4463      	add	r3, ip
 801086a:	443d      	add	r5, r7
 801086c:	44e3      	add	fp, ip
 801086e:	f8aa b004 	strh.w	fp, [sl, #4]
 8010872:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8010876:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801087a:	f8aa b006 	strh.w	fp, [sl, #6]
 801087e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010882:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010886:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801088a:	ea5b 070a 	orrs.w	r7, fp, sl
 801088e:	d014      	beq.n	80108ba <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8010890:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8010894:	f1ba 0f00 	cmp.w	sl, #0
 8010898:	db0f      	blt.n	80108ba <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 801089a:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801089c:	45ba      	cmp	sl, r7
 801089e:	da0c      	bge.n	80108ba <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80108a0:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80108a4:	45ba      	cmp	sl, r7
 80108a6:	f10a 0a01 	add.w	sl, sl, #1
 80108aa:	bf38      	it	cc
 80108ac:	f10c 0c08 	addcc.w	ip, ip, #8
 80108b0:	f8c0 a008 	str.w	sl, [r0, #8]
 80108b4:	bf38      	it	cc
 80108b6:	f8c0 c010 	strcc.w	ip, [r0, #16]
 80108ba:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80108be:	f04f 0700 	mov.w	r7, #0
 80108c2:	42ae      	cmp	r6, r5
 80108c4:	f8ac 5000 	strh.w	r5, [ip]
 80108c8:	f8ac 8002 	strh.w	r8, [ip, #2]
 80108cc:	f8ac 7004 	strh.w	r7, [ip, #4]
 80108d0:	f8ac 7006 	strh.w	r7, [ip, #6]
 80108d4:	d1bc      	bne.n	8010850 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 80108d6:	6904      	ldr	r4, [r0, #16]
 80108d8:	9a01      	ldr	r2, [sp, #4]
 80108da:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80108dc:	1ad3      	subs	r3, r2, r3
 80108de:	88a2      	ldrh	r2, [r4, #4]
 80108e0:	3120      	adds	r1, #32
 80108e2:	441a      	add	r2, r3
 80108e4:	80a2      	strh	r2, [r4, #4]
 80108e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108e8:	1a89      	subs	r1, r1, r2
 80108ea:	88e2      	ldrh	r2, [r4, #6]
 80108ec:	fb03 2301 	mla	r3, r3, r1, r2
 80108f0:	80e3      	strh	r3, [r4, #6]
 80108f2:	e650      	b.n	8010596 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80108f4:	f04f 37ff 	mov.w	r7, #4294967295
 80108f8:	434a      	muls	r2, r1
 80108fa:	4264      	negs	r4, r4
 80108fc:	970a      	str	r7, [sp, #40]	@ 0x28
 80108fe:	2700      	movs	r7, #0
 8010900:	e758      	b.n	80107b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8010902:	ea4f 1867 	mov.w	r8, r7, asr #5
 8010906:	f009 031f 	and.w	r3, r9, #31
 801090a:	f007 071f 	and.w	r7, r7, #31
 801090e:	fa1f fc8c 	uxth.w	ip, ip
 8010912:	45d0      	cmp	r8, sl
 8010914:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010916:	fa1f fe8e 	uxth.w	lr, lr
 801091a:	d10a      	bne.n	8010932 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 801091c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801091e:	449c      	add	ip, r3
 8010920:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010922:	441f      	add	r7, r3
 8010924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010926:	f8a5 c004 	strh.w	ip, [r5, #4]
 801092a:	fb03 e707 	mla	r7, r3, r7, lr
 801092e:	80ef      	strh	r7, [r5, #6]
 8010930:	e6bc      	b.n	80106ac <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010932:	2900      	cmp	r1, #0
 8010934:	f2c0 80a6 	blt.w	8010a84 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8010938:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801093a:	f1c7 0320 	rsb	r3, r7, #32
 801093e:	4363      	muls	r3, r4
 8010940:	2401      	movs	r4, #1
 8010942:	940d      	str	r4, [sp, #52]	@ 0x34
 8010944:	2420      	movs	r4, #32
 8010946:	940c      	str	r4, [sp, #48]	@ 0x30
 8010948:	fb93 f4f1 	sdiv	r4, r3, r1
 801094c:	fb01 3b14 	mls	fp, r1, r4, r3
 8010950:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010952:	f1bb 0f00 	cmp.w	fp, #0
 8010956:	441f      	add	r7, r3
 8010958:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801095a:	bfbc      	itt	lt
 801095c:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8010960:	448b      	addlt	fp, r1
 8010962:	fb04 e707 	mla	r7, r4, r7, lr
 8010966:	44a4      	add	ip, r4
 8010968:	80ef      	strh	r7, [r5, #6]
 801096a:	f8a5 c004 	strh.w	ip, [r5, #4]
 801096e:	eb08 0503 	add.w	r5, r8, r3
 8010972:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010976:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801097a:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801097e:	ea5e 0307 	orrs.w	r3, lr, r7
 8010982:	d011      	beq.n	80109a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8010984:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8010988:	f1be 0f00 	cmp.w	lr, #0
 801098c:	db0c      	blt.n	80109a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801098e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010990:	45be      	cmp	lr, r7
 8010992:	da09      	bge.n	80109a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8010994:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8010998:	45be      	cmp	lr, r7
 801099a:	bf3c      	itt	cc
 801099c:	f10c 0708 	addcc.w	r7, ip, #8
 80109a0:	6107      	strcc	r7, [r0, #16]
 80109a2:	f10e 0701 	add.w	r7, lr, #1
 80109a6:	6087      	str	r7, [r0, #8]
 80109a8:	6907      	ldr	r7, [r0, #16]
 80109aa:	b213      	sxth	r3, r2
 80109ac:	4555      	cmp	r5, sl
 80109ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80109b0:	807b      	strh	r3, [r7, #2]
 80109b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80109b4:	803d      	strh	r5, [r7, #0]
 80109b6:	80be      	strh	r6, [r7, #4]
 80109b8:	eb04 0c03 	add.w	ip, r4, r3
 80109bc:	80fe      	strh	r6, [r7, #6]
 80109be:	d050      	beq.n	8010a62 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 80109c0:	9b01      	ldr	r3, [sp, #4]
 80109c2:	eba3 070c 	sub.w	r7, r3, ip
 80109c6:	ebab 0301 	sub.w	r3, fp, r1
 80109ca:	443c      	add	r4, r7
 80109cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80109ce:	0164      	lsls	r4, r4, #5
 80109d0:	fb94 f8f1 	sdiv	r8, r4, r1
 80109d4:	fb01 4418 	mls	r4, r1, r8, r4
 80109d8:	2c00      	cmp	r4, #0
 80109da:	bfbc      	itt	lt
 80109dc:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80109e0:	1864      	addlt	r4, r4, r1
 80109e2:	f108 0701 	add.w	r7, r8, #1
 80109e6:	9711      	str	r7, [sp, #68]	@ 0x44
 80109e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109ea:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80109ee:	191b      	adds	r3, r3, r4
 80109f0:	f8be b004 	ldrh.w	fp, [lr, #4]
 80109f4:	bf54      	ite	pl
 80109f6:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 80109f8:	4647      	movmi	r7, r8
 80109fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80109fc:	bf58      	it	pl
 80109fe:	1a5b      	subpl	r3, r3, r1
 8010a00:	44bb      	add	fp, r7
 8010a02:	44bc      	add	ip, r7
 8010a04:	bf58      	it	pl
 8010a06:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8010a08:	f8ae b004 	strh.w	fp, [lr, #4]
 8010a0c:	f8be b006 	ldrh.w	fp, [lr, #6]
 8010a10:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8010a14:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8010a16:	f8ae b006 	strh.w	fp, [lr, #6]
 8010a1a:	443d      	add	r5, r7
 8010a1c:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8010a20:	f8be b006 	ldrh.w	fp, [lr, #6]
 8010a24:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8010a28:	ea5b 0307 	orrs.w	r3, fp, r7
 8010a2c:	d011      	beq.n	8010a52 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010a2e:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8010a32:	f1bb 0f00 	cmp.w	fp, #0
 8010a36:	db0c      	blt.n	8010a52 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010a38:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010a3a:	45bb      	cmp	fp, r7
 8010a3c:	da09      	bge.n	8010a52 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010a3e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8010a42:	45bb      	cmp	fp, r7
 8010a44:	bf3c      	itt	cc
 8010a46:	f10e 0708 	addcc.w	r7, lr, #8
 8010a4a:	6107      	strcc	r7, [r0, #16]
 8010a4c:	f10b 0701 	add.w	r7, fp, #1
 8010a50:	6087      	str	r7, [r0, #8]
 8010a52:	6907      	ldr	r7, [r0, #16]
 8010a54:	4555      	cmp	r5, sl
 8010a56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010a58:	803d      	strh	r5, [r7, #0]
 8010a5a:	807b      	strh	r3, [r7, #2]
 8010a5c:	80be      	strh	r6, [r7, #4]
 8010a5e:	80fe      	strh	r6, [r7, #6]
 8010a60:	d1c2      	bne.n	80109e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8010a62:	9b01      	ldr	r3, [sp, #4]
 8010a64:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8010a66:	eba3 0c0c 	sub.w	ip, r3, ip
 8010a6a:	6903      	ldr	r3, [r0, #16]
 8010a6c:	3720      	adds	r7, #32
 8010a6e:	8899      	ldrh	r1, [r3, #4]
 8010a70:	4461      	add	r1, ip
 8010a72:	8099      	strh	r1, [r3, #4]
 8010a74:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010a76:	1a7f      	subs	r7, r7, r1
 8010a78:	88d9      	ldrh	r1, [r3, #6]
 8010a7a:	fb0c 1c07 	mla	ip, ip, r7, r1
 8010a7e:	f8a3 c006 	strh.w	ip, [r3, #6]
 8010a82:	e613      	b.n	80106ac <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010a84:	f04f 34ff 	mov.w	r4, #4294967295
 8010a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a8a:	4249      	negs	r1, r1
 8010a8c:	940d      	str	r4, [sp, #52]	@ 0x34
 8010a8e:	2400      	movs	r4, #0
 8010a90:	437b      	muls	r3, r7
 8010a92:	e758      	b.n	8010946 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8010a94:	9905      	ldr	r1, [sp, #20]
 8010a96:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8010a9a:	f009 0c1f 	and.w	ip, r9, #31
 8010a9e:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8010aa2:	f001 011f 	and.w	r1, r1, #31
 8010aa6:	45f3      	cmp	fp, lr
 8010aa8:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8010aac:	9102      	str	r1, [sp, #8]
 8010aae:	9904      	ldr	r1, [sp, #16]
 8010ab0:	eba1 0406 	sub.w	r4, r1, r6
 8010ab4:	d108      	bne.n	8010ac8 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8010ab6:	9b02      	ldr	r3, [sp, #8]
 8010ab8:	44a0      	add	r8, r4
 8010aba:	449c      	add	ip, r3
 8010abc:	f8a7 8004 	strh.w	r8, [r7, #4]
 8010ac0:	fb04 a40c 	mla	r4, r4, ip, sl
 8010ac4:	80fc      	strh	r4, [r7, #6]
 8010ac6:	e461      	b.n	801038c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010ac8:	9905      	ldr	r1, [sp, #20]
 8010aca:	ebb1 0109 	subs.w	r1, r1, r9
 8010ace:	bf51      	iteee	pl
 8010ad0:	f1cc 0520 	rsbpl	r5, ip, #32
 8010ad4:	fb04 f40c 	mulmi.w	r4, r4, ip
 8010ad8:	4249      	negmi	r1, r1
 8010ada:	2500      	movmi	r5, #0
 8010adc:	bf5d      	ittte	pl
 8010ade:	436c      	mulpl	r4, r5
 8010ae0:	2520      	movpl	r5, #32
 8010ae2:	f04f 0901 	movpl.w	r9, #1
 8010ae6:	f04f 39ff 	movmi.w	r9, #4294967295
 8010aea:	9501      	str	r5, [sp, #4]
 8010aec:	9b01      	ldr	r3, [sp, #4]
 8010aee:	fb94 f5f1 	sdiv	r5, r4, r1
 8010af2:	fb01 4415 	mls	r4, r1, r5, r4
 8010af6:	449c      	add	ip, r3
 8010af8:	eb0b 0309 	add.w	r3, fp, r9
 8010afc:	2c00      	cmp	r4, #0
 8010afe:	bfbc      	itt	lt
 8010b00:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8010b04:	1864      	addlt	r4, r4, r1
 8010b06:	44a8      	add	r8, r5
 8010b08:	fb05 ac0c 	mla	ip, r5, ip, sl
 8010b0c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8010b10:	f8a7 c006 	strh.w	ip, [r7, #6]
 8010b14:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010b18:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8010b1c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8010b20:	ea58 0707 	orrs.w	r7, r8, r7
 8010b24:	d011      	beq.n	8010b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8010b26:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8010b2a:	f1b8 0f00 	cmp.w	r8, #0
 8010b2e:	db0c      	blt.n	8010b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8010b30:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010b32:	45b8      	cmp	r8, r7
 8010b34:	da09      	bge.n	8010b4a <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8010b36:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8010b3a:	45b8      	cmp	r8, r7
 8010b3c:	bf3c      	itt	cc
 8010b3e:	f10c 0708 	addcc.w	r7, ip, #8
 8010b42:	6107      	strcc	r7, [r0, #16]
 8010b44:	f108 0701 	add.w	r7, r8, #1
 8010b48:	6087      	str	r7, [r0, #8]
 8010b4a:	6907      	ldr	r7, [r0, #16]
 8010b4c:	f04f 0c00 	mov.w	ip, #0
 8010b50:	b212      	sxth	r2, r2
 8010b52:	459e      	cmp	lr, r3
 8010b54:	803b      	strh	r3, [r7, #0]
 8010b56:	442e      	add	r6, r5
 8010b58:	807a      	strh	r2, [r7, #2]
 8010b5a:	f8a7 c004 	strh.w	ip, [r7, #4]
 8010b5e:	f8a7 c006 	strh.w	ip, [r7, #6]
 8010b62:	d04b      	beq.n	8010bfc <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8010b64:	9f04      	ldr	r7, [sp, #16]
 8010b66:	1a64      	subs	r4, r4, r1
 8010b68:	f04f 0a00 	mov.w	sl, #0
 8010b6c:	1bbf      	subs	r7, r7, r6
 8010b6e:	443d      	add	r5, r7
 8010b70:	016d      	lsls	r5, r5, #5
 8010b72:	fb95 f8f1 	sdiv	r8, r5, r1
 8010b76:	fb01 5518 	mls	r5, r1, r8, r5
 8010b7a:	4565      	cmp	r5, ip
 8010b7c:	bfbc      	itt	lt
 8010b7e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8010b82:	186d      	addlt	r5, r5, r1
 8010b84:	f108 0701 	add.w	r7, r8, #1
 8010b88:	9703      	str	r7, [sp, #12]
 8010b8a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010b8e:	1964      	adds	r4, r4, r5
 8010b90:	444b      	add	r3, r9
 8010b92:	bf54      	ite	pl
 8010b94:	9f03      	ldrpl	r7, [sp, #12]
 8010b96:	4647      	movmi	r7, r8
 8010b98:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8010b9c:	bf58      	it	pl
 8010b9e:	1a64      	subpl	r4, r4, r1
 8010ba0:	443e      	add	r6, r7
 8010ba2:	44bb      	add	fp, r7
 8010ba4:	f8ac b004 	strh.w	fp, [ip, #4]
 8010ba8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010bac:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8010bb0:	f8ac b006 	strh.w	fp, [ip, #6]
 8010bb4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010bb8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010bbc:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8010bc0:	ea5b 0707 	orrs.w	r7, fp, r7
 8010bc4:	d011      	beq.n	8010bea <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010bc6:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8010bca:	f1bb 0f00 	cmp.w	fp, #0
 8010bce:	db0c      	blt.n	8010bea <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010bd0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010bd2:	45bb      	cmp	fp, r7
 8010bd4:	da09      	bge.n	8010bea <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010bd6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8010bda:	45bb      	cmp	fp, r7
 8010bdc:	bf3c      	itt	cc
 8010bde:	f10c 0708 	addcc.w	r7, ip, #8
 8010be2:	6107      	strcc	r7, [r0, #16]
 8010be4:	f10b 0701 	add.w	r7, fp, #1
 8010be8:	6087      	str	r7, [r0, #8]
 8010bea:	6907      	ldr	r7, [r0, #16]
 8010bec:	459e      	cmp	lr, r3
 8010bee:	803b      	strh	r3, [r7, #0]
 8010bf0:	807a      	strh	r2, [r7, #2]
 8010bf2:	f8a7 a004 	strh.w	sl, [r7, #4]
 8010bf6:	f8a7 a006 	strh.w	sl, [r7, #6]
 8010bfa:	d1c6      	bne.n	8010b8a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8010bfc:	9b04      	ldr	r3, [sp, #16]
 8010bfe:	1b9e      	subs	r6, r3, r6
 8010c00:	6903      	ldr	r3, [r0, #16]
 8010c02:	889a      	ldrh	r2, [r3, #4]
 8010c04:	4432      	add	r2, r6
 8010c06:	809a      	strh	r2, [r3, #4]
 8010c08:	9a02      	ldr	r2, [sp, #8]
 8010c0a:	f102 0c20 	add.w	ip, r2, #32
 8010c0e:	9a01      	ldr	r2, [sp, #4]
 8010c10:	ebac 0c02 	sub.w	ip, ip, r2
 8010c14:	88da      	ldrh	r2, [r3, #6]
 8010c16:	fb06 260c 	mla	r6, r6, ip, r2
 8010c1a:	80de      	strh	r6, [r3, #6]
 8010c1c:	f7ff bbb6 	b.w	801038c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08010c20 <_ZN8touchgfx7Outline6lineToEii>:
 8010c20:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010c22:	079b      	lsls	r3, r3, #30
 8010c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c26:	460e      	mov	r6, r1
 8010c28:	4615      	mov	r5, r2
 8010c2a:	d511      	bpl.n	8010c50 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8010c2c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8010c30:	ea86 0701 	eor.w	r7, r6, r1
 8010c34:	ea85 0302 	eor.w	r3, r5, r2
 8010c38:	433b      	orrs	r3, r7
 8010c3a:	d009      	beq.n	8010c50 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8010c3c:	4633      	mov	r3, r6
 8010c3e:	9500      	str	r5, [sp, #0]
 8010c40:	f7ff fb4c 	bl	80102dc <_ZN8touchgfx7Outline10renderLineEiiii>
 8010c44:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010c46:	f043 0301 	orr.w	r3, r3, #1
 8010c4a:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8010c4e:	6243      	str	r3, [r0, #36]	@ 0x24
 8010c50:	b003      	add	sp, #12
 8010c52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c54 <_ZN8touchgfx7Outline6moveToEii>:
 8010c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c56:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010c58:	4615      	mov	r5, r2
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	460e      	mov	r6, r1
 8010c5e:	079a      	lsls	r2, r3, #30
 8010c60:	d401      	bmi.n	8010c66 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8010c62:	f7ff fb07 	bl	8010274 <_ZN8touchgfx7Outline5resetEv>
 8010c66:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010c68:	07db      	lsls	r3, r3, #31
 8010c6a:	d504      	bpl.n	8010c76 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8010c72:	f7ff ffd5 	bl	8010c20 <_ZN8touchgfx7Outline6lineToEii>
 8010c76:	6923      	ldr	r3, [r4, #16]
 8010c78:	1170      	asrs	r0, r6, #5
 8010c7a:	1169      	asrs	r1, r5, #5
 8010c7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010c80:	4290      	cmp	r0, r2
 8010c82:	d103      	bne.n	8010c8c <_ZN8touchgfx7Outline6moveToEii+0x38>
 8010c84:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010c88:	4291      	cmp	r1, r2
 8010c8a:	d01a      	beq.n	8010cc2 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8010c8c:	88df      	ldrh	r7, [r3, #6]
 8010c8e:	889a      	ldrh	r2, [r3, #4]
 8010c90:	433a      	orrs	r2, r7
 8010c92:	d010      	beq.n	8010cb6 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010c94:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010c98:	2a00      	cmp	r2, #0
 8010c9a:	db0c      	blt.n	8010cb6 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010c9c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8010c9e:	42ba      	cmp	r2, r7
 8010ca0:	da09      	bge.n	8010cb6 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010ca2:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8010ca6:	42ba      	cmp	r2, r7
 8010ca8:	f102 0201 	add.w	r2, r2, #1
 8010cac:	bf38      	it	cc
 8010cae:	3308      	addcc	r3, #8
 8010cb0:	60a2      	str	r2, [r4, #8]
 8010cb2:	bf38      	it	cc
 8010cb4:	6123      	strcc	r3, [r4, #16]
 8010cb6:	6923      	ldr	r3, [r4, #16]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	8018      	strh	r0, [r3, #0]
 8010cbc:	8059      	strh	r1, [r3, #2]
 8010cbe:	809a      	strh	r2, [r3, #4]
 8010cc0:	80da      	strh	r2, [r3, #6]
 8010cc2:	6166      	str	r6, [r4, #20]
 8010cc4:	6225      	str	r5, [r4, #32]
 8010cc6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8010cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010ccc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8010ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cd0:	b0d0      	sub	sp, #320	@ 0x140
 8010cd2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010cd6:	466c      	mov	r4, sp
 8010cd8:	4627      	mov	r7, r4
 8010cda:	1a0d      	subs	r5, r1, r0
 8010cdc:	f100 0308 	add.w	r3, r0, #8
 8010ce0:	2d48      	cmp	r5, #72	@ 0x48
 8010ce2:	f340 80d5 	ble.w	8010e90 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8010ce6:	112d      	asrs	r5, r5, #4
 8010ce8:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8010cec:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010cf0:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8010cf4:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8010cf8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8010cfc:	6816      	ldr	r6, [r2, #0]
 8010cfe:	6006      	str	r6, [r0, #0]
 8010d00:	6856      	ldr	r6, [r2, #4]
 8010d02:	6046      	str	r6, [r0, #4]
 8010d04:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8010d08:	f8a2 8002 	strh.w	r8, [r2, #2]
 8010d0c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8010d10:	f8a2 c006 	strh.w	ip, [r2, #6]
 8010d14:	f1a1 0208 	sub.w	r2, r1, #8
 8010d18:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8010d1c:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8010d20:	4565      	cmp	r5, ip
 8010d22:	db06      	blt.n	8010d32 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8010d24:	d119      	bne.n	8010d5a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8010d26:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8010d2a:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8010d2e:	42ae      	cmp	r6, r5
 8010d30:	dd13      	ble.n	8010d5a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8010d32:	460e      	mov	r6, r1
 8010d34:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8010d38:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8010d3c:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8010d40:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8010d44:	601d      	str	r5, [r3, #0]
 8010d46:	6875      	ldr	r5, [r6, #4]
 8010d48:	605d      	str	r5, [r3, #4]
 8010d4a:	f821 9c08 	strh.w	r9, [r1, #-8]
 8010d4e:	f821 cc06 	strh.w	ip, [r1, #-6]
 8010d52:	f821 8c04 	strh.w	r8, [r1, #-4]
 8010d56:	f821 ec02 	strh.w	lr, [r1, #-2]
 8010d5a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8010d5e:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8010d62:	42ae      	cmp	r6, r5
 8010d64:	db06      	blt.n	8010d74 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8010d66:	d116      	bne.n	8010d96 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8010d68:	f9b0 c000 	ldrsh.w	ip, [r0]
 8010d6c:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8010d70:	45ac      	cmp	ip, r5
 8010d72:	da10      	bge.n	8010d96 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8010d74:	681d      	ldr	r5, [r3, #0]
 8010d76:	f9b0 8000 	ldrsh.w	r8, [r0]
 8010d7a:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8010d7e:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8010d82:	6005      	str	r5, [r0, #0]
 8010d84:	685d      	ldr	r5, [r3, #4]
 8010d86:	f8a0 8008 	strh.w	r8, [r0, #8]
 8010d8a:	6045      	str	r5, [r0, #4]
 8010d8c:	8146      	strh	r6, [r0, #10]
 8010d8e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8010d92:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8010d96:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8010d9a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8010d9e:	4565      	cmp	r5, ip
 8010da0:	db06      	blt.n	8010db0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8010da2:	d119      	bne.n	8010dd8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010da4:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8010da8:	f9b0 5000 	ldrsh.w	r5, [r0]
 8010dac:	42ae      	cmp	r6, r5
 8010dae:	da13      	bge.n	8010dd8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010db0:	460e      	mov	r6, r1
 8010db2:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010db6:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8010dba:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8010dbe:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8010dc2:	6005      	str	r5, [r0, #0]
 8010dc4:	6875      	ldr	r5, [r6, #4]
 8010dc6:	6045      	str	r5, [r0, #4]
 8010dc8:	f821 9c08 	strh.w	r9, [r1, #-8]
 8010dcc:	f821 cc06 	strh.w	ip, [r1, #-6]
 8010dd0:	f821 8c04 	strh.w	r8, [r1, #-4]
 8010dd4:	f821 ec02 	strh.w	lr, [r1, #-2]
 8010dd8:	3308      	adds	r3, #8
 8010dda:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8010dde:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8010de2:	45e6      	cmp	lr, ip
 8010de4:	dbf8      	blt.n	8010dd8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010de6:	d105      	bne.n	8010df4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8010de8:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010dec:	f9b0 5000 	ldrsh.w	r5, [r0]
 8010df0:	42ae      	cmp	r6, r5
 8010df2:	dbf1      	blt.n	8010dd8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010df4:	4615      	mov	r5, r2
 8010df6:	3a08      	subs	r2, #8
 8010df8:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8010dfc:	45b4      	cmp	ip, r6
 8010dfe:	dbf9      	blt.n	8010df4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8010e00:	d105      	bne.n	8010e0e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8010e02:	f9b0 8000 	ldrsh.w	r8, [r0]
 8010e06:	f9b2 6000 	ldrsh.w	r6, [r2]
 8010e0a:	45b0      	cmp	r8, r6
 8010e0c:	dbf2      	blt.n	8010df4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8010e0e:	4293      	cmp	r3, r2
 8010e10:	f1a5 0608 	sub.w	r6, r5, #8
 8010e14:	d816      	bhi.n	8010e44 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8010e16:	f8d6 c000 	ldr.w	ip, [r6]
 8010e1a:	f9b3 a000 	ldrsh.w	sl, [r3]
 8010e1e:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8010e22:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8010e26:	f8c3 c000 	str.w	ip, [r3]
 8010e2a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8010e2e:	f8c3 c004 	str.w	ip, [r3, #4]
 8010e32:	f825 ac08 	strh.w	sl, [r5, #-8]
 8010e36:	f825 ec06 	strh.w	lr, [r5, #-6]
 8010e3a:	f825 9c04 	strh.w	r9, [r5, #-4]
 8010e3e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8010e42:	e7c9      	b.n	8010dd8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010e44:	f8d6 e000 	ldr.w	lr, [r6]
 8010e48:	f9b0 a000 	ldrsh.w	sl, [r0]
 8010e4c:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8010e50:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8010e54:	f8c0 e000 	str.w	lr, [r0]
 8010e58:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8010e5c:	1a16      	subs	r6, r2, r0
 8010e5e:	f8c0 e004 	str.w	lr, [r0, #4]
 8010e62:	f825 ac08 	strh.w	sl, [r5, #-8]
 8010e66:	f825 cc06 	strh.w	ip, [r5, #-6]
 8010e6a:	f825 9c04 	strh.w	r9, [r5, #-4]
 8010e6e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8010e72:	1acd      	subs	r5, r1, r3
 8010e74:	10ed      	asrs	r5, r5, #3
 8010e76:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8010e7a:	bfb5      	itete	lt
 8010e7c:	e9c4 0200 	strdlt	r0, r2, [r4]
 8010e80:	e9c4 3100 	strdge	r3, r1, [r4]
 8010e84:	460a      	movlt	r2, r1
 8010e86:	4603      	movge	r3, r0
 8010e88:	3408      	adds	r4, #8
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	4611      	mov	r1, r2
 8010e8e:	e724      	b.n	8010cda <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8010e90:	4299      	cmp	r1, r3
 8010e92:	d927      	bls.n	8010ee4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8010e94:	f1a3 0210 	sub.w	r2, r3, #16
 8010e98:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8010e9c:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8010ea0:	45ac      	cmp	ip, r5
 8010ea2:	db06      	blt.n	8010eb2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8010ea4:	d11c      	bne.n	8010ee0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8010ea6:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8010eaa:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8010eae:	42ae      	cmp	r6, r5
 8010eb0:	da16      	bge.n	8010ee0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8010eb2:	4615      	mov	r5, r2
 8010eb4:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8010eb8:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8010ebc:	3a08      	subs	r2, #8
 8010ebe:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8010ec2:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8010ec6:	6196      	str	r6, [r2, #24]
 8010ec8:	42a8      	cmp	r0, r5
 8010eca:	686e      	ldr	r6, [r5, #4]
 8010ecc:	f8a2 9010 	strh.w	r9, [r2, #16]
 8010ed0:	61d6      	str	r6, [r2, #28]
 8010ed2:	f8a2 c012 	strh.w	ip, [r2, #18]
 8010ed6:	f8a2 8014 	strh.w	r8, [r2, #20]
 8010eda:	f8a2 e016 	strh.w	lr, [r2, #22]
 8010ede:	d1db      	bne.n	8010e98 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8010ee0:	3308      	adds	r3, #8
 8010ee2:	e7d5      	b.n	8010e90 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8010ee4:	42bc      	cmp	r4, r7
 8010ee6:	d903      	bls.n	8010ef0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8010ee8:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8010eec:	3c08      	subs	r4, #8
 8010eee:	e6f4      	b.n	8010cda <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8010ef0:	b050      	add	sp, #320	@ 0x140
 8010ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010ef6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8010ef6:	b510      	push	{r4, lr}
 8010ef8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010efa:	4604      	mov	r4, r0
 8010efc:	07da      	lsls	r2, r3, #31
 8010efe:	d507      	bpl.n	8010f10 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8010f00:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8010f04:	f7ff fe8c 	bl	8010c20 <_ZN8touchgfx7Outline6lineToEii>
 8010f08:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010f0a:	f023 0301 	bic.w	r3, r3, #1
 8010f0e:	6243      	str	r3, [r0, #36]	@ 0x24
 8010f10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010f12:	079b      	lsls	r3, r3, #30
 8010f14:	d521      	bpl.n	8010f5a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8010f16:	6923      	ldr	r3, [r4, #16]
 8010f18:	88d9      	ldrh	r1, [r3, #6]
 8010f1a:	889a      	ldrh	r2, [r3, #4]
 8010f1c:	430a      	orrs	r2, r1
 8010f1e:	d010      	beq.n	8010f42 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8010f20:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010f24:	2a00      	cmp	r2, #0
 8010f26:	db0c      	blt.n	8010f42 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8010f28:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010f2a:	428a      	cmp	r2, r1
 8010f2c:	da09      	bge.n	8010f42 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8010f2e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8010f32:	4291      	cmp	r1, r2
 8010f34:	f102 0201 	add.w	r2, r2, #1
 8010f38:	bf88      	it	hi
 8010f3a:	3308      	addhi	r3, #8
 8010f3c:	60a2      	str	r2, [r4, #8]
 8010f3e:	bf88      	it	hi
 8010f40:	6123      	strhi	r3, [r4, #16]
 8010f42:	68a1      	ldr	r1, [r4, #8]
 8010f44:	b129      	cbz	r1, 8010f52 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8010f46:	6863      	ldr	r3, [r4, #4]
 8010f48:	4299      	cmp	r1, r3
 8010f4a:	d802      	bhi.n	8010f52 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8010f4c:	68e0      	ldr	r0, [r4, #12]
 8010f4e:	f7ff febd 	bl	8010ccc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8010f52:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010f54:	f023 0302 	bic.w	r3, r3, #2
 8010f58:	6263      	str	r3, [r4, #36]	@ 0x24
 8010f5a:	68e0      	ldr	r0, [r4, #12]
 8010f5c:	bd10      	pop	{r4, pc}
	...

08010f60 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8010f60:	4b01      	ldr	r3, [pc, #4]	@ (8010f68 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8010f62:	6818      	ldr	r0, [r3, #0]
 8010f64:	4770      	bx	lr
 8010f66:	bf00      	nop
 8010f68:	24025160 	.word	0x24025160

08010f6c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8010f6c:	4b01      	ldr	r3, [pc, #4]	@ (8010f74 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8010f6e:	6818      	ldr	r0, [r3, #0]
 8010f70:	4770      	bx	lr
 8010f72:	bf00      	nop
 8010f74:	24025164 	.word	0x24025164

08010f78 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8010f78:	b510      	push	{r4, lr}
 8010f7a:	6803      	ldr	r3, [r0, #0]
 8010f7c:	460c      	mov	r4, r1
 8010f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f80:	4798      	blx	r3
 8010f82:	1b03      	subs	r3, r0, r4
 8010f84:	4258      	negs	r0, r3
 8010f86:	4158      	adcs	r0, r3
 8010f88:	bd10      	pop	{r4, pc}
	...

08010f8c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8010f8c:	4b01      	ldr	r3, [pc, #4]	@ (8010f94 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8010f8e:	6019      	str	r1, [r3, #0]
 8010f90:	4770      	bx	lr
 8010f92:	bf00      	nop
 8010f94:	24025168 	.word	0x24025168

08010f98 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8010f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f9c:	4696      	mov	lr, r2
 8010f9e:	b097      	sub	sp, #92	@ 0x5c
 8010fa0:	4605      	mov	r5, r0
 8010fa2:	4614      	mov	r4, r2
 8010fa4:	460e      	mov	r6, r1
 8010fa6:	461f      	mov	r7, r3
 8010fa8:	f10d 0c1c 	add.w	ip, sp, #28
 8010fac:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8010fb0:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8010fb4:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8010fb8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010fbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010fc0:	f8de 3000 	ldr.w	r3, [lr]
 8010fc4:	f104 0e14 	add.w	lr, r4, #20
 8010fc8:	f8cc 3000 	str.w	r3, [ip]
 8010fcc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8010fd0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010fd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010fd8:	f8de 3000 	ldr.w	r3, [lr]
 8010fdc:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8010fe0:	f8cc 3000 	str.w	r3, [ip]
 8010fe4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8010fe8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010fec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ff0:	f8de 3000 	ldr.w	r3, [lr]
 8010ff4:	4631      	mov	r1, r6
 8010ff6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010ff8:	4628      	mov	r0, r5
 8010ffa:	f8cc 3000 	str.w	r3, [ip]
 8010ffe:	682b      	ldr	r3, [r5, #0]
 8011000:	9201      	str	r2, [sp, #4]
 8011002:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011004:	f8cd 8008 	str.w	r8, [sp, #8]
 8011008:	9200      	str	r2, [sp, #0]
 801100a:	aa07      	add	r2, sp, #28
 801100c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011010:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8011014:	463b      	mov	r3, r7
 8011016:	47d8      	blx	fp
 8011018:	46a6      	mov	lr, r4
 801101a:	f10d 0c1c 	add.w	ip, sp, #28
 801101e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011022:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011026:	f8de 3000 	ldr.w	r3, [lr]
 801102a:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801102e:	343c      	adds	r4, #60	@ 0x3c
 8011030:	f8cc 3000 	str.w	r3, [ip]
 8011034:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8011038:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801103c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011040:	f8de 3000 	ldr.w	r3, [lr]
 8011044:	f8cc 3000 	str.w	r3, [ip]
 8011048:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801104c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801104e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011052:	6823      	ldr	r3, [r4, #0]
 8011054:	4631      	mov	r1, r6
 8011056:	4628      	mov	r0, r5
 8011058:	f8cc 3000 	str.w	r3, [ip]
 801105c:	682b      	ldr	r3, [r5, #0]
 801105e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011062:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011064:	f8cd 8008 	str.w	r8, [sp, #8]
 8011068:	9201      	str	r2, [sp, #4]
 801106a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801106c:	9200      	str	r2, [sp, #0]
 801106e:	aa07      	add	r2, sp, #28
 8011070:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8011072:	463b      	mov	r3, r7
 8011074:	47a0      	blx	r4
 8011076:	b017      	add	sp, #92	@ 0x5c
 8011078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801107c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801107c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011080:	b08d      	sub	sp, #52	@ 0x34
 8011082:	4688      	mov	r8, r1
 8011084:	f8d3 c000 	ldr.w	ip, [r3]
 8011088:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801108a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801108e:	680f      	ldr	r7, [r1, #0]
 8011090:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8011094:	eba7 070c 	sub.w	r7, r7, ip
 8011098:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 801109c:	edd3 6a07 	vldr	s13, [r3, #28]
 80110a0:	42bc      	cmp	r4, r7
 80110a2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80110a4:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80110a8:	bfa8      	it	ge
 80110aa:	463c      	movge	r4, r7
 80110ac:	f9b1 9000 	ldrsh.w	r9, [r1]
 80110b0:	f9ba 1000 	ldrsh.w	r1, [sl]
 80110b4:	ee07 4a90 	vmov	s15, r4
 80110b8:	eb09 0e0c 	add.w	lr, r9, ip
 80110bc:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 80110c0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80110c4:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80110c8:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80110cc:	4571      	cmp	r1, lr
 80110ce:	ee25 4a04 	vmul.f32	s8, s10, s8
 80110d2:	ee65 4a24 	vmul.f32	s9, s10, s9
 80110d6:	ee25 5a27 	vmul.f32	s10, s10, s15
 80110da:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80110de:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80110e2:	ee32 1a05 	vadd.f32	s2, s4, s10
 80110e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80110ea:	ee36 0a84 	vadd.f32	s0, s13, s8
 80110ee:	ee61 1a87 	vmul.f32	s3, s3, s14
 80110f2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80110f6:	f340 808c 	ble.w	8011212 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80110fa:	eba1 060e 	sub.w	r6, r1, lr
 80110fe:	fb96 f5f4 	sdiv	r5, r6, r4
 8011102:	ee07 5a10 	vmov	s14, r5
 8011106:	2d00      	cmp	r5, #0
 8011108:	fb04 6615 	mls	r6, r4, r5, r6
 801110c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011110:	eea7 0a04 	vfma.f32	s0, s14, s8
 8011114:	eee7 0a24 	vfma.f32	s1, s14, s9
 8011118:	eea7 1a05 	vfma.f32	s2, s14, s10
 801111c:	dd12      	ble.n	8011144 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801111e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8011122:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8011126:	ee31 2a45 	vsub.f32	s4, s2, s10
 801112a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011132:	bf14      	ite	ne
 8011134:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8011138:	eeb0 7a67 	vmoveq.f32	s14, s15
 801113c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011140:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011144:	fb05 f204 	mul.w	r2, r5, r4
 8011148:	1abf      	subs	r7, r7, r2
 801114a:	4494      	add	ip, r2
 801114c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8011150:	4411      	add	r1, r2
 8011152:	eb09 020c 	add.w	r2, r9, ip
 8011156:	b209      	sxth	r1, r1
 8011158:	443a      	add	r2, r7
 801115a:	428a      	cmp	r2, r1
 801115c:	bfc4      	itt	gt
 801115e:	eba1 0209 	subgt.w	r2, r1, r9
 8011162:	eba2 070c 	subgt.w	r7, r2, ip
 8011166:	2f00      	cmp	r7, #0
 8011168:	dd50      	ble.n	801120c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801116a:	fb97 f1f4 	sdiv	r1, r7, r4
 801116e:	fb04 7211 	mls	r2, r4, r1, r7
 8011172:	b90a      	cbnz	r2, 8011178 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8011174:	3901      	subs	r1, #1
 8011176:	4622      	mov	r2, r4
 8011178:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801117c:	6840      	ldr	r0, [r0, #4]
 801117e:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8011182:	44b6      	add	lr, r6
 8011184:	f8d0 a000 	ldr.w	sl, [r0]
 8011188:	2900      	cmp	r1, #0
 801118a:	bfcc      	ite	gt
 801118c:	46a1      	movgt	r9, r4
 801118e:	4691      	movle	r9, r2
 8011190:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011192:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8011194:	fb04 e505 	mla	r5, r4, r5, lr
 8011198:	eef0 6a42 	vmov.f32	s13, s4
 801119c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80111a0:	9008      	str	r0, [sp, #32]
 80111a2:	eeb0 7a61 	vmov.f32	s14, s3
 80111a6:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80111a8:	695b      	ldr	r3, [r3, #20]
 80111aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80111ae:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80111b2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80111b6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80111b8:	445b      	add	r3, fp
 80111ba:	9307      	str	r3, [sp, #28]
 80111bc:	ee16 3a90 	vmov	r3, s13
 80111c0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80111c4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80111c8:	ee21 3a23 	vmul.f32	s6, s2, s7
 80111cc:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80111d0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80111d4:	ee17 7a90 	vmov	r7, s15
 80111d8:	ee73 7a42 	vsub.f32	s15, s6, s4
 80111dc:	fb97 f7f4 	sdiv	r7, r7, r4
 80111e0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80111e4:	ee17 ca90 	vmov	ip, s15
 80111e8:	fb9c fcf4 	sdiv	ip, ip, r4
 80111ec:	fb0c 3306 	mla	r3, ip, r6, r3
 80111f0:	9302      	str	r3, [sp, #8]
 80111f2:	ee17 3a10 	vmov	r3, s14
 80111f6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80111fa:	fb07 3706 	mla	r7, r7, r6, r3
 80111fe:	eba9 0306 	sub.w	r3, r9, r6
 8011202:	e9cd 4700 	strd	r4, r7, [sp]
 8011206:	f8da 4008 	ldr.w	r4, [sl, #8]
 801120a:	47a0      	blx	r4
 801120c:	b00d      	add	sp, #52	@ 0x34
 801120e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011212:	2500      	movs	r5, #0
 8011214:	462e      	mov	r6, r5
 8011216:	e799      	b.n	801114c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08011218 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801121c:	b0db      	sub	sp, #364	@ 0x16c
 801121e:	461d      	mov	r5, r3
 8011220:	4614      	mov	r4, r2
 8011222:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8011226:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011228:	4629      	mov	r1, r5
 801122a:	930a      	str	r3, [sp, #40]	@ 0x28
 801122c:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8011230:	9009      	str	r0, [sp, #36]	@ 0x24
 8011232:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011234:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8011238:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 801123c:	9310      	str	r3, [sp, #64]	@ 0x40
 801123e:	6803      	ldr	r3, [r0, #0]
 8011240:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8011242:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8011246:	47b8      	blx	r7
 8011248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801124a:	6058      	str	r0, [r3, #4]
 801124c:	2800      	cmp	r0, #0
 801124e:	f000 83a1 	beq.w	8011994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011252:	682b      	ldr	r3, [r5, #0]
 8011254:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8011258:	ed94 7a02 	vldr	s14, [r4, #8]
 801125c:	9314      	str	r3, [sp, #80]	@ 0x50
 801125e:	686b      	ldr	r3, [r5, #4]
 8011260:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011264:	9315      	str	r3, [sp, #84]	@ 0x54
 8011266:	4bc1      	ldr	r3, [pc, #772]	@ (801156c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8011268:	7819      	ldrb	r1, [r3, #0]
 801126a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801126e:	2900      	cmp	r1, #0
 8011270:	bf16      	itet	ne
 8011272:	4619      	movne	r1, r3
 8011274:	4611      	moveq	r1, r2
 8011276:	4613      	movne	r3, r2
 8011278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801127c:	9116      	str	r1, [sp, #88]	@ 0x58
 801127e:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8011282:	f240 8387 	bls.w	8011994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011286:	ed94 7a07 	vldr	s14, [r4, #28]
 801128a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011292:	f240 837f 	bls.w	8011994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011296:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 801129a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112a2:	f240 8377 	bls.w	8011994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80112a6:	6822      	ldr	r2, [r4, #0]
 80112a8:	4bb1      	ldr	r3, [pc, #708]	@ (8011570 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80112aa:	429a      	cmp	r2, r3
 80112ac:	f2c0 8372 	blt.w	8011994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80112b0:	49b0      	ldr	r1, [pc, #704]	@ (8011574 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80112b2:	6963      	ldr	r3, [r4, #20]
 80112b4:	428a      	cmp	r2, r1
 80112b6:	f300 836d 	bgt.w	8011994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80112ba:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80112be:	48ae      	ldr	r0, [pc, #696]	@ (8011578 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80112c0:	33ff      	adds	r3, #255	@ 0xff
 80112c2:	4283      	cmp	r3, r0
 80112c4:	f200 8366 	bhi.w	8011994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80112c8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80112ca:	4dac      	ldr	r5, [pc, #688]	@ (801157c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80112cc:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80112d0:	33ff      	adds	r3, #255	@ 0xff
 80112d2:	42ab      	cmp	r3, r5
 80112d4:	f200 835e 	bhi.w	8011994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80112d8:	6862      	ldr	r2, [r4, #4]
 80112da:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 80112de:	33ff      	adds	r3, #255	@ 0xff
 80112e0:	4283      	cmp	r3, r0
 80112e2:	f200 8357 	bhi.w	8011994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80112e6:	69a1      	ldr	r1, [r4, #24]
 80112e8:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 80112ec:	33ff      	adds	r3, #255	@ 0xff
 80112ee:	4283      	cmp	r3, r0
 80112f0:	f200 8350 	bhi.w	8011994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80112f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80112f6:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 80112fa:	30ff      	adds	r0, #255	@ 0xff
 80112fc:	42a8      	cmp	r0, r5
 80112fe:	f200 8349 	bhi.w	8011994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011302:	428a      	cmp	r2, r1
 8011304:	f280 8110 	bge.w	8011528 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8011308:	429a      	cmp	r2, r3
 801130a:	f300 8119 	bgt.w	8011540 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801130e:	4299      	cmp	r1, r3
 8011310:	f280 811d 	bge.w	801154e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8011314:	2502      	movs	r5, #2
 8011316:	2701      	movs	r7, #1
 8011318:	46a9      	mov	r9, r5
 801131a:	46b8      	mov	r8, r7
 801131c:	f04f 0a00 	mov.w	sl, #0
 8011320:	4621      	mov	r1, r4
 8011322:	a849      	add	r0, sp, #292	@ 0x124
 8011324:	f004 f802 	bl	801532c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8011328:	4622      	mov	r2, r4
 801132a:	4653      	mov	r3, sl
 801132c:	a949      	add	r1, sp, #292	@ 0x124
 801132e:	f8cd 9000 	str.w	r9, [sp]
 8011332:	a819      	add	r0, sp, #100	@ 0x64
 8011334:	f004 f92a 	bl	801558c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011338:	4622      	mov	r2, r4
 801133a:	4653      	mov	r3, sl
 801133c:	a949      	add	r1, sp, #292	@ 0x124
 801133e:	f8cd 8000 	str.w	r8, [sp]
 8011342:	a829      	add	r0, sp, #164	@ 0xa4
 8011344:	f004 f922 	bl	801558c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011348:	4643      	mov	r3, r8
 801134a:	4622      	mov	r2, r4
 801134c:	a949      	add	r1, sp, #292	@ 0x124
 801134e:	f8cd 9000 	str.w	r9, [sp]
 8011352:	a839      	add	r0, sp, #228	@ 0xe4
 8011354:	f004 f91a 	bl	801558c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011358:	42af      	cmp	r7, r5
 801135a:	af12      	add	r7, sp, #72	@ 0x48
 801135c:	bfb7      	itett	lt
 801135e:	2300      	movlt	r3, #0
 8011360:	2301      	movge	r3, #1
 8011362:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8011364:	ac19      	addlt	r4, sp, #100	@ 0x64
 8011366:	bfb1      	iteee	lt
 8011368:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801136a:	ad19      	addge	r5, sp, #100	@ 0x64
 801136c:	930e      	strge	r3, [sp, #56]	@ 0x38
 801136e:	ac29      	addge	r4, sp, #164	@ 0xa4
 8011370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011372:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011376:	e887 0003 	stmia.w	r7, {r0, r1}
 801137a:	b928      	cbnz	r0, 8011388 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801137c:	4b80      	ldr	r3, [pc, #512]	@ (8011580 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801137e:	6818      	ldr	r0, [r3, #0]
 8011380:	6803      	ldr	r3, [r0, #0]
 8011382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011384:	4798      	blx	r3
 8011386:	6038      	str	r0, [r7, #0]
 8011388:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801138a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801138e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011392:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8011394:	930c      	str	r3, [sp, #48]	@ 0x30
 8011396:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011398:	6963      	ldr	r3, [r4, #20]
 801139a:	440b      	add	r3, r1
 801139c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80113a0:	4408      	add	r0, r1
 80113a2:	b200      	sxth	r0, r0
 80113a4:	4283      	cmp	r3, r0
 80113a6:	900d      	str	r0, [sp, #52]	@ 0x34
 80113a8:	f280 80dd 	bge.w	8011566 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80113ac:	428b      	cmp	r3, r1
 80113ae:	da08      	bge.n	80113c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80113b0:	2a00      	cmp	r2, #0
 80113b2:	dd06      	ble.n	80113c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80113b4:	1acb      	subs	r3, r1, r3
 80113b6:	429a      	cmp	r2, r3
 80113b8:	f2c0 80e4 	blt.w	8011584 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80113bc:	2b00      	cmp	r3, #0
 80113be:	f300 80e2 	bgt.w	8011586 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80113c2:	6967      	ldr	r7, [r4, #20]
 80113c4:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80113c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80113ca:	443b      	add	r3, r7
 80113cc:	461f      	mov	r7, r3
 80113ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80113d0:	1bdf      	subs	r7, r3, r7
 80113d2:	4297      	cmp	r7, r2
 80113d4:	bfa8      	it	ge
 80113d6:	4617      	movge	r7, r2
 80113d8:	2f00      	cmp	r7, #0
 80113da:	f340 8166 	ble.w	80116aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80113de:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80113e0:	6829      	ldr	r1, [r5, #0]
 80113e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80113e6:	f9bb 3000 	ldrsh.w	r3, [fp]
 80113ea:	4411      	add	r1, r2
 80113ec:	6820      	ldr	r0, [r4, #0]
 80113ee:	4299      	cmp	r1, r3
 80113f0:	dd1a      	ble.n	8011428 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80113f2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80113f6:	4402      	add	r2, r0
 80113f8:	440b      	add	r3, r1
 80113fa:	b21b      	sxth	r3, r3
 80113fc:	429a      	cmp	r2, r3
 80113fe:	dc13      	bgt.n	8011428 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8011400:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011402:	a912      	add	r1, sp, #72	@ 0x48
 8011404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	9206      	str	r2, [sp, #24]
 801140c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801140e:	9500      	str	r5, [sp, #0]
 8011410:	9205      	str	r2, [sp, #20]
 8011412:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011414:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011418:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801141a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801141e:	aa49      	add	r2, sp, #292	@ 0x124
 8011420:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8011424:	4623      	mov	r3, r4
 8011426:	47c8      	blx	r9
 8011428:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801142c:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8011430:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8011434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011438:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801143c:	68a1      	ldr	r1, [r4, #8]
 801143e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011442:	ed94 6a08 	vldr	s12, [r4, #32]
 8011446:	edd4 6a07 	vldr	s13, [r4, #28]
 801144a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801144e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011452:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8011456:	e9d4 2300 	ldrd	r2, r3, [r4]
 801145a:	edc4 6a07 	vstr	s13, [r4, #28]
 801145e:	441a      	add	r2, r3
 8011460:	6963      	ldr	r3, [r4, #20]
 8011462:	3301      	adds	r3, #1
 8011464:	6022      	str	r2, [r4, #0]
 8011466:	6163      	str	r3, [r4, #20]
 8011468:	69a3      	ldr	r3, [r4, #24]
 801146a:	3b01      	subs	r3, #1
 801146c:	61a3      	str	r3, [r4, #24]
 801146e:	6923      	ldr	r3, [r4, #16]
 8011470:	440b      	add	r3, r1
 8011472:	68e1      	ldr	r1, [r4, #12]
 8011474:	428b      	cmp	r3, r1
 8011476:	6123      	str	r3, [r4, #16]
 8011478:	db15      	blt.n	80114a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801147a:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801147e:	3201      	adds	r2, #1
 8011480:	1a5b      	subs	r3, r3, r1
 8011482:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011486:	6022      	str	r2, [r4, #0]
 8011488:	6123      	str	r3, [r4, #16]
 801148a:	edc4 6a07 	vstr	s13, [r4, #28]
 801148e:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8011492:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011496:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801149a:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801149e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80114a2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80114a6:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80114aa:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80114ae:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80114b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80114b6:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80114ba:	68a9      	ldr	r1, [r5, #8]
 80114bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80114c0:	ed95 6a08 	vldr	s12, [r5, #32]
 80114c4:	edd5 6a07 	vldr	s13, [r5, #28]
 80114c8:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80114cc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80114d0:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80114d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80114d8:	edc5 6a07 	vstr	s13, [r5, #28]
 80114dc:	441a      	add	r2, r3
 80114de:	696b      	ldr	r3, [r5, #20]
 80114e0:	3301      	adds	r3, #1
 80114e2:	602a      	str	r2, [r5, #0]
 80114e4:	616b      	str	r3, [r5, #20]
 80114e6:	69ab      	ldr	r3, [r5, #24]
 80114e8:	3b01      	subs	r3, #1
 80114ea:	61ab      	str	r3, [r5, #24]
 80114ec:	692b      	ldr	r3, [r5, #16]
 80114ee:	440b      	add	r3, r1
 80114f0:	68e9      	ldr	r1, [r5, #12]
 80114f2:	428b      	cmp	r3, r1
 80114f4:	612b      	str	r3, [r5, #16]
 80114f6:	db15      	blt.n	8011524 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80114f8:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80114fc:	3201      	adds	r2, #1
 80114fe:	1a5b      	subs	r3, r3, r1
 8011500:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011504:	602a      	str	r2, [r5, #0]
 8011506:	612b      	str	r3, [r5, #16]
 8011508:	edc5 6a07 	vstr	s13, [r5, #28]
 801150c:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8011510:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011514:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8011518:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801151c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011520:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011524:	3f01      	subs	r7, #1
 8011526:	e757      	b.n	80113d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8011528:	4299      	cmp	r1, r3
 801152a:	dc13      	bgt.n	8011554 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801152c:	429a      	cmp	r2, r3
 801152e:	da14      	bge.n	801155a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8011530:	2502      	movs	r5, #2
 8011532:	2703      	movs	r7, #3
 8011534:	f04f 0800 	mov.w	r8, #0
 8011538:	46a9      	mov	r9, r5
 801153a:	f04f 0a01 	mov.w	sl, #1
 801153e:	e6ef      	b.n	8011320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8011540:	2501      	movs	r5, #1
 8011542:	2700      	movs	r7, #0
 8011544:	46a9      	mov	r9, r5
 8011546:	46b8      	mov	r8, r7
 8011548:	f04f 0a02 	mov.w	sl, #2
 801154c:	e6e8      	b.n	8011320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801154e:	2501      	movs	r5, #1
 8011550:	2702      	movs	r7, #2
 8011552:	e6e1      	b.n	8011318 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8011554:	2500      	movs	r5, #0
 8011556:	2701      	movs	r7, #1
 8011558:	e7f4      	b.n	8011544 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801155a:	2702      	movs	r7, #2
 801155c:	2503      	movs	r5, #3
 801155e:	f04f 0900 	mov.w	r9, #0
 8011562:	46b8      	mov	r8, r7
 8011564:	e7e9      	b.n	801153a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8011566:	4613      	mov	r3, r2
 8011568:	e728      	b.n	80113bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801156a:	bf00      	nop
 801156c:	24025150 	.word	0x24025150
 8011570:	fffd8f01 	.word	0xfffd8f01
 8011574:	00027100 	.word	0x00027100
 8011578:	0004e1ff 	.word	0x0004e1ff
 801157c:	0004e1fe 	.word	0x0004e1fe
 8011580:	24025158 	.word	0x24025158
 8011584:	4613      	mov	r3, r2
 8011586:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8011588:	469e      	mov	lr, r3
 801158a:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801158c:	469c      	mov	ip, r3
 801158e:	9111      	str	r1, [sp, #68]	@ 0x44
 8011590:	f04f 0900 	mov.w	r9, #0
 8011594:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8011598:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 801159c:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 80115a0:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 80115a4:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 80115a8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80115ac:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 80115b0:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 80115b4:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 80115b8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 80115bc:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 80115c0:	f1bc 0f00 	cmp.w	ip, #0
 80115c4:	d147      	bne.n	8011656 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80115c6:	eb03 0c07 	add.w	ip, r3, r7
 80115ca:	1ad7      	subs	r7, r2, r3
 80115cc:	f1b9 0f00 	cmp.w	r9, #0
 80115d0:	d009      	beq.n	80115e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80115d2:	9029      	str	r0, [sp, #164]	@ 0xa4
 80115d4:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 80115d8:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 80115dc:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 80115e0:	912d      	str	r1, [sp, #180]	@ 0xb4
 80115e2:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 80115e6:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80115e8:	f04f 0800 	mov.w	r8, #0
 80115ec:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80115f0:	9111      	str	r1, [sp, #68]	@ 0x44
 80115f2:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80115f6:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80115fa:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80115fe:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8011602:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8011606:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801160a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801160e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8011612:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8011616:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801161a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801161e:	f1be 0f00 	cmp.w	lr, #0
 8011622:	d031      	beq.n	8011688 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8011624:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8011626:	4450      	add	r0, sl
 8011628:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801162c:	4431      	add	r1, r6
 801162e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011632:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011636:	4549      	cmp	r1, r9
 8011638:	db08      	blt.n	801164c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801163a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801163e:	3001      	adds	r0, #1
 8011640:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011644:	eba1 0109 	sub.w	r1, r1, r9
 8011648:	ee37 7a06 	vadd.f32	s14, s14, s12
 801164c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011650:	f04f 0801 	mov.w	r8, #1
 8011654:	e7e3      	b.n	801161e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8011656:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8011658:	4450      	add	r0, sl
 801165a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801165e:	4431      	add	r1, r6
 8011660:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011664:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011668:	4541      	cmp	r1, r8
 801166a:	db08      	blt.n	801167e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801166c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011670:	3001      	adds	r0, #1
 8011672:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011676:	eba1 0108 	sub.w	r1, r1, r8
 801167a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801167e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011682:	f04f 0901 	mov.w	r9, #1
 8011686:	e79b      	b.n	80115c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8011688:	449c      	add	ip, r3
 801168a:	1aff      	subs	r7, r7, r3
 801168c:	f1b8 0f00 	cmp.w	r8, #0
 8011690:	d009      	beq.n	80116a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8011692:	9019      	str	r0, [sp, #100]	@ 0x64
 8011694:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8011698:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801169c:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80116a0:	911d      	str	r1, [sp, #116]	@ 0x74
 80116a2:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80116a6:	1ad2      	subs	r2, r2, r3
 80116a8:	e68b      	b.n	80113c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80116aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80116ac:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	f000 80d1 	beq.w	8011856 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80116b4:	ad19      	add	r5, sp, #100	@ 0x64
 80116b6:	ac39      	add	r4, sp, #228	@ 0xe4
 80116b8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80116ba:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80116be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80116c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80116c4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80116c6:	6963      	ldr	r3, [r4, #20]
 80116c8:	440b      	add	r3, r1
 80116ca:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80116ce:	4408      	add	r0, r1
 80116d0:	b200      	sxth	r0, r0
 80116d2:	4283      	cmp	r3, r0
 80116d4:	900d      	str	r0, [sp, #52]	@ 0x34
 80116d6:	f280 80c1 	bge.w	801185c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80116da:	428b      	cmp	r3, r1
 80116dc:	da08      	bge.n	80116f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80116de:	2a00      	cmp	r2, #0
 80116e0:	dd06      	ble.n	80116f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80116e2:	1acb      	subs	r3, r1, r3
 80116e4:	429a      	cmp	r2, r3
 80116e6:	f2c0 80bb 	blt.w	8011860 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f300 80b9 	bgt.w	8011862 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80116f0:	6967      	ldr	r7, [r4, #20]
 80116f2:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80116f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80116f8:	443b      	add	r3, r7
 80116fa:	461f      	mov	r7, r3
 80116fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80116fe:	1bdf      	subs	r7, r3, r7
 8011700:	4297      	cmp	r7, r2
 8011702:	bfa8      	it	ge
 8011704:	4617      	movge	r7, r2
 8011706:	2f00      	cmp	r7, #0
 8011708:	f340 813c 	ble.w	8011984 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801170c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801170e:	6829      	ldr	r1, [r5, #0]
 8011710:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011714:	f9bb 3000 	ldrsh.w	r3, [fp]
 8011718:	4411      	add	r1, r2
 801171a:	6820      	ldr	r0, [r4, #0]
 801171c:	4299      	cmp	r1, r3
 801171e:	dd1a      	ble.n	8011756 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8011720:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8011724:	4402      	add	r2, r0
 8011726:	440b      	add	r3, r1
 8011728:	b21b      	sxth	r3, r3
 801172a:	429a      	cmp	r2, r3
 801172c:	dc13      	bgt.n	8011756 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801172e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011730:	a912      	add	r1, sp, #72	@ 0x48
 8011732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011734:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	9206      	str	r2, [sp, #24]
 801173a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801173c:	9500      	str	r5, [sp, #0]
 801173e:	9205      	str	r2, [sp, #20]
 8011740:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011742:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011746:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8011748:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801174c:	aa49      	add	r2, sp, #292	@ 0x124
 801174e:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8011752:	4623      	mov	r3, r4
 8011754:	47c8      	blx	r9
 8011756:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801175a:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801175e:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8011762:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011766:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801176a:	68a1      	ldr	r1, [r4, #8]
 801176c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011770:	ed94 6a08 	vldr	s12, [r4, #32]
 8011774:	edd4 6a07 	vldr	s13, [r4, #28]
 8011778:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801177c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011780:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8011784:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011788:	edc4 6a07 	vstr	s13, [r4, #28]
 801178c:	441a      	add	r2, r3
 801178e:	6963      	ldr	r3, [r4, #20]
 8011790:	3301      	adds	r3, #1
 8011792:	6022      	str	r2, [r4, #0]
 8011794:	6163      	str	r3, [r4, #20]
 8011796:	69a3      	ldr	r3, [r4, #24]
 8011798:	3b01      	subs	r3, #1
 801179a:	61a3      	str	r3, [r4, #24]
 801179c:	6923      	ldr	r3, [r4, #16]
 801179e:	440b      	add	r3, r1
 80117a0:	68e1      	ldr	r1, [r4, #12]
 80117a2:	428b      	cmp	r3, r1
 80117a4:	6123      	str	r3, [r4, #16]
 80117a6:	db15      	blt.n	80117d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80117a8:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80117ac:	3201      	adds	r2, #1
 80117ae:	1a5b      	subs	r3, r3, r1
 80117b0:	ee76 6a26 	vadd.f32	s13, s12, s13
 80117b4:	6022      	str	r2, [r4, #0]
 80117b6:	6123      	str	r3, [r4, #16]
 80117b8:	edc4 6a07 	vstr	s13, [r4, #28]
 80117bc:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80117c0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80117c4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80117c8:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80117cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117d0:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80117d4:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80117d8:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80117dc:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80117e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80117e4:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80117e8:	68a9      	ldr	r1, [r5, #8]
 80117ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80117ee:	ed95 6a08 	vldr	s12, [r5, #32]
 80117f2:	edd5 6a07 	vldr	s13, [r5, #28]
 80117f6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80117fa:	ee76 6a86 	vadd.f32	s13, s13, s12
 80117fe:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011802:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011806:	edc5 6a07 	vstr	s13, [r5, #28]
 801180a:	441a      	add	r2, r3
 801180c:	696b      	ldr	r3, [r5, #20]
 801180e:	3301      	adds	r3, #1
 8011810:	602a      	str	r2, [r5, #0]
 8011812:	616b      	str	r3, [r5, #20]
 8011814:	69ab      	ldr	r3, [r5, #24]
 8011816:	3b01      	subs	r3, #1
 8011818:	61ab      	str	r3, [r5, #24]
 801181a:	692b      	ldr	r3, [r5, #16]
 801181c:	440b      	add	r3, r1
 801181e:	68e9      	ldr	r1, [r5, #12]
 8011820:	428b      	cmp	r3, r1
 8011822:	612b      	str	r3, [r5, #16]
 8011824:	db15      	blt.n	8011852 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8011826:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801182a:	3201      	adds	r2, #1
 801182c:	1a5b      	subs	r3, r3, r1
 801182e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011832:	602a      	str	r2, [r5, #0]
 8011834:	612b      	str	r3, [r5, #16]
 8011836:	edc5 6a07 	vstr	s13, [r5, #28]
 801183a:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801183e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011842:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8011846:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801184a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801184e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011852:	3f01      	subs	r7, #1
 8011854:	e757      	b.n	8011706 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8011856:	ad39      	add	r5, sp, #228	@ 0xe4
 8011858:	ac19      	add	r4, sp, #100	@ 0x64
 801185a:	e72d      	b.n	80116b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801185c:	4613      	mov	r3, r2
 801185e:	e744      	b.n	80116ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8011860:	4613      	mov	r3, r2
 8011862:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8011864:	469e      	mov	lr, r3
 8011866:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801186a:	461f      	mov	r7, r3
 801186c:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8011870:	f04f 0900 	mov.w	r9, #0
 8011874:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8011878:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801187c:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8011880:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8011884:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8011888:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801188a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801188e:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8011892:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8011896:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801189a:	960e      	str	r6, [sp, #56]	@ 0x38
 801189c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 80118a0:	2f00      	cmp	r7, #0
 80118a2:	d146      	bne.n	8011932 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80118a4:	449c      	add	ip, r3
 80118a6:	1ad7      	subs	r7, r2, r3
 80118a8:	f1b9 0f00 	cmp.w	r9, #0
 80118ac:	d009      	beq.n	80118c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80118ae:	9039      	str	r0, [sp, #228]	@ 0xe4
 80118b0:	913d      	str	r1, [sp, #244]	@ 0xf4
 80118b2:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 80118b6:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 80118ba:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 80118be:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 80118c2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80118c4:	f04f 0800 	mov.w	r8, #0
 80118c8:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80118cc:	910e      	str	r1, [sp, #56]	@ 0x38
 80118ce:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80118d2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80118d6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80118da:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 80118de:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80118e2:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80118e6:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80118ea:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80118ee:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80118f2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80118f6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80118fa:	f1be 0f00 	cmp.w	lr, #0
 80118fe:	d030      	beq.n	8011962 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8011900:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8011902:	4450      	add	r0, sl
 8011904:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011908:	4431      	add	r1, r6
 801190a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801190e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011912:	4549      	cmp	r1, r9
 8011914:	db08      	blt.n	8011928 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8011916:	ee77 7a85 	vadd.f32	s15, s15, s10
 801191a:	3001      	adds	r0, #1
 801191c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011920:	eba1 0109 	sub.w	r1, r1, r9
 8011924:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011928:	f10e 3eff 	add.w	lr, lr, #4294967295
 801192c:	f04f 0801 	mov.w	r8, #1
 8011930:	e7e3      	b.n	80118fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8011932:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8011934:	4450      	add	r0, sl
 8011936:	ee37 7a24 	vadd.f32	s14, s14, s9
 801193a:	4431      	add	r1, r6
 801193c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011940:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011944:	4541      	cmp	r1, r8
 8011946:	db08      	blt.n	801195a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8011948:	ee76 6a85 	vadd.f32	s13, s13, s10
 801194c:	3001      	adds	r0, #1
 801194e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011952:	eba1 0108 	sub.w	r1, r1, r8
 8011956:	ee77 7a86 	vadd.f32	s15, s15, s12
 801195a:	3f01      	subs	r7, #1
 801195c:	f04f 0901 	mov.w	r9, #1
 8011960:	e79e      	b.n	80118a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8011962:	449c      	add	ip, r3
 8011964:	1aff      	subs	r7, r7, r3
 8011966:	f1b8 0f00 	cmp.w	r8, #0
 801196a:	d009      	beq.n	8011980 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801196c:	9019      	str	r0, [sp, #100]	@ 0x64
 801196e:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8011972:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8011976:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801197a:	911d      	str	r1, [sp, #116]	@ 0x74
 801197c:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8011980:	1ad2      	subs	r2, r2, r3
 8011982:	e6b5      	b.n	80116f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	b923      	cbnz	r3, 8011994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801198a:	4b04      	ldr	r3, [pc, #16]	@ (801199c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801198c:	6818      	ldr	r0, [r3, #0]
 801198e:	6803      	ldr	r3, [r0, #0]
 8011990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011992:	4798      	blx	r3
 8011994:	b05b      	add	sp, #364	@ 0x16c
 8011996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801199a:	bf00      	nop
 801199c:	24025158 	.word	0x24025158

080119a0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 80119a0:	b570      	push	{r4, r5, r6, lr}
 80119a2:	4604      	mov	r4, r0
 80119a4:	2500      	movs	r5, #0
 80119a6:	9805      	ldr	r0, [sp, #20]
 80119a8:	f89d 601c 	ldrb.w	r6, [sp, #28]
 80119ac:	6061      	str	r1, [r4, #4]
 80119ae:	8263      	strh	r3, [r4, #18]
 80119b0:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80119b4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80119b8:	8025      	strh	r5, [r4, #0]
 80119ba:	7221      	strb	r1, [r4, #8]
 80119bc:	7266      	strb	r6, [r4, #9]
 80119be:	60e0      	str	r0, [r4, #12]
 80119c0:	8222      	strh	r2, [r4, #16]
 80119c2:	82a3      	strh	r3, [r4, #20]
 80119c4:	82e5      	strh	r5, [r4, #22]
 80119c6:	8325      	strh	r5, [r4, #24]
 80119c8:	8365      	strh	r5, [r4, #26]
 80119ca:	83a5      	strh	r5, [r4, #28]
 80119cc:	83e5      	strh	r5, [r4, #30]
 80119ce:	8425      	strh	r5, [r4, #32]
 80119d0:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 80119d4:	b32e      	cbz	r6, 8011a22 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80119d6:	6803      	ldr	r3, [r0, #0]
 80119d8:	695b      	ldr	r3, [r3, #20]
 80119da:	4798      	blx	r3
 80119dc:	4606      	mov	r6, r0
 80119de:	b300      	cbz	r0, 8011a22 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80119e0:	68e0      	ldr	r0, [r4, #12]
 80119e2:	4631      	mov	r1, r6
 80119e4:	6803      	ldr	r3, [r0, #0]
 80119e6:	68db      	ldr	r3, [r3, #12]
 80119e8:	4798      	blx	r3
 80119ea:	4605      	mov	r5, r0
 80119ec:	b1c8      	cbz	r0, 8011a22 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80119ee:	7b43      	ldrb	r3, [r0, #13]
 80119f0:	7a82      	ldrb	r2, [r0, #10]
 80119f2:	005b      	lsls	r3, r3, #1
 80119f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80119f8:	4313      	orrs	r3, r2
 80119fa:	8423      	strh	r3, [r4, #32]
 80119fc:	7a63      	ldrb	r3, [r4, #9]
 80119fe:	2b06      	cmp	r3, #6
 8011a00:	d10f      	bne.n	8011a22 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8011a02:	68e0      	ldr	r0, [r4, #12]
 8011a04:	462a      	mov	r2, r5
 8011a06:	4631      	mov	r1, r6
 8011a08:	6803      	ldr	r3, [r0, #0]
 8011a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a0c:	4798      	blx	r3
 8011a0e:	7b6b      	ldrb	r3, [r5, #13]
 8011a10:	005b      	lsls	r3, r3, #1
 8011a12:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8011a16:	7aab      	ldrb	r3, [r5, #10]
 8011a18:	4313      	orrs	r3, r2
 8011a1a:	4418      	add	r0, r3
 8011a1c:	8c23      	ldrh	r3, [r4, #32]
 8011a1e:	4418      	add	r0, r3
 8011a20:	8420      	strh	r0, [r4, #32]
 8011a22:	4620      	mov	r0, r4
 8011a24:	bd70      	pop	{r4, r5, r6, pc}

08011a26 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8011a26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a2a:	2400      	movs	r4, #0
 8011a2c:	b085      	sub	sp, #20
 8011a2e:	4681      	mov	r9, r0
 8011a30:	4688      	mov	r8, r1
 8011a32:	4692      	mov	sl, r2
 8011a34:	469b      	mov	fp, r3
 8011a36:	4627      	mov	r7, r4
 8011a38:	4625      	mov	r5, r4
 8011a3a:	4626      	mov	r6, r4
 8011a3c:	4554      	cmp	r4, sl
 8011a3e:	da2a      	bge.n	8011a96 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8011a40:	2300      	movs	r3, #0
 8011a42:	9303      	str	r3, [sp, #12]
 8011a44:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8011a48:	429d      	cmp	r5, r3
 8011a4a:	d004      	beq.n	8011a56 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8011a4c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8011a50:	429d      	cmp	r5, r3
 8011a52:	bf18      	it	ne
 8011a54:	462f      	movne	r7, r5
 8011a56:	ab03      	add	r3, sp, #12
 8011a58:	4642      	mov	r2, r8
 8011a5a:	4659      	mov	r1, fp
 8011a5c:	4648      	mov	r0, r9
 8011a5e:	f003 fa7b 	bl	8014f58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011a62:	4605      	mov	r5, r0
 8011a64:	b1b8      	cbz	r0, 8011a96 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8011a66:	280a      	cmp	r0, #10
 8011a68:	d015      	beq.n	8011a96 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8011a6a:	9a03      	ldr	r2, [sp, #12]
 8011a6c:	b18a      	cbz	r2, 8011a92 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8011a6e:	7b50      	ldrb	r0, [r2, #13]
 8011a70:	4639      	mov	r1, r7
 8011a72:	7a93      	ldrb	r3, [r2, #10]
 8011a74:	0040      	lsls	r0, r0, #1
 8011a76:	8895      	ldrh	r5, [r2, #4]
 8011a78:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8011a7c:	4303      	orrs	r3, r0
 8011a7e:	4640      	mov	r0, r8
 8011a80:	9301      	str	r3, [sp, #4]
 8011a82:	f8d8 3000 	ldr.w	r3, [r8]
 8011a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a88:	4798      	blx	r3
 8011a8a:	9b01      	ldr	r3, [sp, #4]
 8011a8c:	4418      	add	r0, r3
 8011a8e:	4406      	add	r6, r0
 8011a90:	b2b6      	uxth	r6, r6
 8011a92:	3401      	adds	r4, #1
 8011a94:	e7d2      	b.n	8011a3c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8011a96:	4630      	mov	r0, r6
 8011a98:	b005      	add	sp, #20
 8011a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8011a9e:	2a02      	cmp	r2, #2
 8011aa0:	b530      	push	{r4, r5, lr}
 8011aa2:	d011      	beq.n	8011ac8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8011aa4:	2a03      	cmp	r2, #3
 8011aa6:	d01c      	beq.n	8011ae2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8011aa8:	2a01      	cmp	r2, #1
 8011aaa:	d10c      	bne.n	8011ac6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8011aac:	888b      	ldrh	r3, [r1, #4]
 8011aae:	8801      	ldrh	r1, [r0, #0]
 8011ab0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8011ab4:	1a5b      	subs	r3, r3, r1
 8011ab6:	8844      	ldrh	r4, [r0, #2]
 8011ab8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8011abc:	1a9b      	subs	r3, r3, r2
 8011abe:	8004      	strh	r4, [r0, #0]
 8011ac0:	8081      	strh	r1, [r0, #4]
 8011ac2:	8043      	strh	r3, [r0, #2]
 8011ac4:	80c2      	strh	r2, [r0, #6]
 8011ac6:	bd30      	pop	{r4, r5, pc}
 8011ac8:	88cb      	ldrh	r3, [r1, #6]
 8011aca:	8842      	ldrh	r2, [r0, #2]
 8011acc:	1a9b      	subs	r3, r3, r2
 8011ace:	88c2      	ldrh	r2, [r0, #6]
 8011ad0:	1a9b      	subs	r3, r3, r2
 8011ad2:	888a      	ldrh	r2, [r1, #4]
 8011ad4:	8801      	ldrh	r1, [r0, #0]
 8011ad6:	8043      	strh	r3, [r0, #2]
 8011ad8:	1a52      	subs	r2, r2, r1
 8011ada:	8881      	ldrh	r1, [r0, #4]
 8011adc:	1a52      	subs	r2, r2, r1
 8011ade:	8002      	strh	r2, [r0, #0]
 8011ae0:	e7f1      	b.n	8011ac6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8011ae2:	88cb      	ldrh	r3, [r1, #6]
 8011ae4:	8841      	ldrh	r1, [r0, #2]
 8011ae6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8011aea:	1a5b      	subs	r3, r3, r1
 8011aec:	f9b0 5000 	ldrsh.w	r5, [r0]
 8011af0:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8011af4:	1a9b      	subs	r3, r3, r2
 8011af6:	8045      	strh	r5, [r0, #2]
 8011af8:	8082      	strh	r2, [r0, #4]
 8011afa:	8003      	strh	r3, [r0, #0]
 8011afc:	80c4      	strh	r4, [r0, #6]
 8011afe:	e7e2      	b.n	8011ac6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08011b00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8011b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b04:	b09f      	sub	sp, #124	@ 0x7c
 8011b06:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011b08:	9312      	str	r3, [sp, #72]	@ 0x48
 8011b0a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8011b0c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8011b0e:	8812      	ldrh	r2, [r2, #0]
 8011b10:	889b      	ldrh	r3, [r3, #4]
 8011b12:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8011b14:	4413      	add	r3, r2
 8011b16:	900e      	str	r0, [sp, #56]	@ 0x38
 8011b18:	6828      	ldr	r0, [r5, #0]
 8011b1a:	b21b      	sxth	r3, r3
 8011b1c:	9117      	str	r1, [sp, #92]	@ 0x5c
 8011b1e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8011b22:	9311      	str	r3, [sp, #68]	@ 0x44
 8011b24:	6803      	ldr	r3, [r0, #0]
 8011b26:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8011b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011b2c:	4798      	blx	r3
 8011b2e:	682b      	ldr	r3, [r5, #0]
 8011b30:	9013      	str	r0, [sp, #76]	@ 0x4c
 8011b32:	7b1a      	ldrb	r2, [r3, #12]
 8011b34:	7adb      	ldrb	r3, [r3, #11]
 8011b36:	9215      	str	r2, [sp, #84]	@ 0x54
 8011b38:	9316      	str	r3, [sp, #88]	@ 0x58
 8011b3a:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8011b3e:	2c00      	cmp	r4, #0
 8011b40:	d067      	beq.n	8011c12 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8011b42:	7c2b      	ldrb	r3, [r5, #16]
 8011b44:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8011b46:	2b06      	cmp	r3, #6
 8011b48:	bf14      	ite	ne
 8011b4a:	2301      	movne	r3, #1
 8011b4c:	2302      	moveq	r3, #2
 8011b4e:	4413      	add	r3, r2
 8011b50:	f04f 0900 	mov.w	r9, #0
 8011b54:	9310      	str	r3, [sp, #64]	@ 0x40
 8011b56:	464c      	mov	r4, r9
 8011b58:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8011b5c:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8011b60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011b62:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011b64:	4293      	cmp	r3, r2
 8011b66:	f280 808b 	bge.w	8011c80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8011b70:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8011b74:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8011b78:	429c      	cmp	r4, r3
 8011b7a:	d006      	beq.n	8011b8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8011b7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011b7e:	f242 020b 	movw	r2, #8203	@ 0x200b
 8011b82:	4294      	cmp	r4, r2
 8011b84:	bf18      	it	ne
 8011b86:	4623      	movne	r3, r4
 8011b88:	930c      	str	r3, [sp, #48]	@ 0x30
 8011b8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011b8c:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8011b8e:	682a      	ldr	r2, [r5, #0]
 8011b90:	428b      	cmp	r3, r1
 8011b92:	db40      	blt.n	8011c16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8011b94:	6813      	ldr	r3, [r2, #0]
 8011b96:	4610      	mov	r0, r2
 8011b98:	695b      	ldr	r3, [r3, #20]
 8011b9a:	4798      	blx	r3
 8011b9c:	4604      	mov	r4, r0
 8011b9e:	6828      	ldr	r0, [r5, #0]
 8011ba0:	aa1d      	add	r2, sp, #116	@ 0x74
 8011ba2:	4621      	mov	r1, r4
 8011ba4:	6803      	ldr	r3, [r0, #0]
 8011ba6:	689f      	ldr	r7, [r3, #8]
 8011ba8:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8011bac:	47b8      	blx	r7
 8011bae:	901c      	str	r0, [sp, #112]	@ 0x70
 8011bb0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8011bb4:	429c      	cmp	r4, r3
 8011bb6:	f000 80eb 	beq.w	8011d90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011bba:	f242 030b 	movw	r3, #8203	@ 0x200b
 8011bbe:	429c      	cmp	r4, r3
 8011bc0:	f000 80e6 	beq.w	8011d90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011bc4:	2c00      	cmp	r4, #0
 8011bc6:	f000 810d 	beq.w	8011de4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8011bca:	2c0a      	cmp	r4, #10
 8011bcc:	d05e      	beq.n	8011c8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8011bce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011bd0:	b36a      	cbz	r2, 8011c2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8011bd2:	8894      	ldrh	r4, [r2, #4]
 8011bd4:	f1bb 0f00 	cmp.w	fp, #0
 8011bd8:	d03a      	beq.n	8011c50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8011bda:	f892 900d 	ldrb.w	r9, [r2, #13]
 8011bde:	f1bb 0f01 	cmp.w	fp, #1
 8011be2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8011be6:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8011bea:	f892 900a 	ldrb.w	r9, [r2, #10]
 8011bee:	ea49 0903 	orr.w	r9, r9, r3
 8011bf2:	d133      	bne.n	8011c5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8011bf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011bf6:	eba6 0609 	sub.w	r6, r6, r9
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d14d      	bne.n	8011c9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8011bfe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011c00:	eb09 0306 	add.w	r3, r9, r6
 8011c04:	4413      	add	r3, r2
 8011c06:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8011c08:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011c0c:	4293      	cmp	r3, r2
 8011c0e:	da4e      	bge.n	8011cae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8011c10:	e036      	b.n	8011c80 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8011c12:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8011c14:	e79c      	b.n	8011b50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8011c16:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8011c1a:	4659      	mov	r1, fp
 8011c1c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8011c1e:	9301      	str	r3, [sp, #4]
 8011c20:	ab1d      	add	r3, sp, #116	@ 0x74
 8011c22:	9300      	str	r3, [sp, #0]
 8011c24:	ab1c      	add	r3, sp, #112	@ 0x70
 8011c26:	f003 f9e0 	bl	8014fea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8011c2a:	4604      	mov	r4, r0
 8011c2c:	e7c0      	b.n	8011bb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8011c2e:	6828      	ldr	r0, [r5, #0]
 8011c30:	6803      	ldr	r3, [r0, #0]
 8011c32:	691b      	ldr	r3, [r3, #16]
 8011c34:	4798      	blx	r3
 8011c36:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8011c3a:	4298      	cmp	r0, r3
 8011c3c:	f000 80a8 	beq.w	8011d90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011c40:	f242 030b 	movw	r3, #8203	@ 0x200b
 8011c44:	4298      	cmp	r0, r3
 8011c46:	f000 80a3 	beq.w	8011d90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011c4a:	f1bb 0f00 	cmp.w	fp, #0
 8011c4e:	d100      	bne.n	8011c52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8011c50:	444e      	add	r6, r9
 8011c52:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011c54:	2a00      	cmp	r2, #0
 8011c56:	d1c0      	bne.n	8011bda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8011c58:	4691      	mov	r9, r2
 8011c5a:	e099      	b.n	8011d90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011c5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	f000 80c2 	beq.w	8011de8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8011c64:	f1bb 0f00 	cmp.w	fp, #0
 8011c68:	d117      	bne.n	8011c9a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8011c6a:	6828      	ldr	r0, [r5, #0]
 8011c6c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011c6e:	6803      	ldr	r3, [r0, #0]
 8011c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011c72:	4798      	blx	r3
 8011c74:	4406      	add	r6, r0
 8011c76:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011c78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011c7a:	1af3      	subs	r3, r6, r3
 8011c7c:	4293      	cmp	r3, r2
 8011c7e:	dd16      	ble.n	8011cae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8011c80:	2c00      	cmp	r4, #0
 8011c82:	f000 80af 	beq.w	8011de4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8011c86:	2c0a      	cmp	r4, #10
 8011c88:	f040 809d 	bne.w	8011dc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8011c8c:	240a      	movs	r4, #10
 8011c8e:	fab4 f084 	clz	r0, r4
 8011c92:	0940      	lsrs	r0, r0, #5
 8011c94:	b01f      	add	sp, #124	@ 0x7c
 8011c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c9a:	6828      	ldr	r0, [r5, #0]
 8011c9c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011c9e:	6803      	ldr	r3, [r0, #0]
 8011ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ca2:	4798      	blx	r3
 8011ca4:	f1bb 0f01 	cmp.w	fp, #1
 8011ca8:	eba6 0600 	sub.w	r6, r6, r0
 8011cac:	d0a7      	beq.n	8011bfe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8011cae:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8011cb0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8011cb2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8011cb6:	f9b3 8000 	ldrsh.w	r8, [r3]
 8011cba:	7b43      	ldrb	r3, [r0, #13]
 8011cbc:	4431      	add	r1, r6
 8011cbe:	015b      	lsls	r3, r3, #5
 8011cc0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8011cc4:	7983      	ldrb	r3, [r0, #6]
 8011cc6:	4313      	orrs	r3, r2
 8011cc8:	440b      	add	r3, r1
 8011cca:	4543      	cmp	r3, r8
 8011ccc:	db60      	blt.n	8011d90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011cce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011cd0:	4299      	cmp	r1, r3
 8011cd2:	da5d      	bge.n	8011d90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011cd4:	6828      	ldr	r0, [r5, #0]
 8011cd6:	45b0      	cmp	r8, r6
 8011cd8:	6803      	ldr	r3, [r0, #0]
 8011cda:	bfcc      	ite	gt
 8011cdc:	eba8 0806 	subgt.w	r8, r8, r6
 8011ce0:	f04f 0800 	movle.w	r8, #0
 8011ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ce6:	bfc8      	it	gt
 8011ce8:	fa1f f888 	uxthgt.w	r8, r8
 8011cec:	4798      	blx	r3
 8011cee:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011cf0:	7b53      	ldrb	r3, [r2, #13]
 8011cf2:	00d9      	lsls	r1, r3, #3
 8011cf4:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8011cf8:	7a11      	ldrb	r1, [r2, #8]
 8011cfa:	4339      	orrs	r1, r7
 8011cfc:	065f      	lsls	r7, r3, #25
 8011cfe:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8011d00:	bf48      	it	mi
 8011d02:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8011d06:	4407      	add	r7, r0
 8011d08:	bf48      	it	mi
 8011d0a:	b209      	sxthmi	r1, r1
 8011d0c:	1a7f      	subs	r7, r7, r1
 8011d0e:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8011d10:	b2bf      	uxth	r7, r7
 8011d12:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8011d16:	fa0f fa87 	sxth.w	sl, r7
 8011d1a:	4551      	cmp	r1, sl
 8011d1c:	dd3c      	ble.n	8011d98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8011d1e:	011b      	lsls	r3, r3, #4
 8011d20:	79d0      	ldrb	r0, [r2, #7]
 8011d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011d26:	4303      	orrs	r3, r0
 8011d28:	449a      	add	sl, r3
 8011d2a:	4551      	cmp	r1, sl
 8011d2c:	dc30      	bgt.n	8011d90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011d2e:	1bcf      	subs	r7, r1, r7
 8011d30:	468a      	mov	sl, r1
 8011d32:	b23f      	sxth	r7, r7
 8011d34:	9219      	str	r2, [sp, #100]	@ 0x64
 8011d36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011d38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011d3a:	6828      	ldr	r0, [r5, #0]
 8011d3c:	2a00      	cmp	r2, #0
 8011d3e:	d12d      	bne.n	8011d9c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8011d40:	9318      	str	r3, [sp, #96]	@ 0x60
 8011d42:	b2bf      	uxth	r7, r7
 8011d44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d46:	6819      	ldr	r1, [r3, #0]
 8011d48:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8011d4a:	6801      	ldr	r1, [r0, #0]
 8011d4c:	9314      	str	r3, [sp, #80]	@ 0x50
 8011d4e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011d50:	4788      	blx	r1
 8011d52:	79a9      	ldrb	r1, [r5, #6]
 8011d54:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011d56:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011d58:	7ba9      	ldrb	r1, [r5, #14]
 8011d5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011d5c:	910a      	str	r1, [sp, #40]	@ 0x28
 8011d5e:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8011d62:	9109      	str	r1, [sp, #36]	@ 0x24
 8011d64:	68a9      	ldr	r1, [r5, #8]
 8011d66:	9306      	str	r3, [sp, #24]
 8011d68:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8011d6a:	9205      	str	r2, [sp, #20]
 8011d6c:	9304      	str	r3, [sp, #16]
 8011d6e:	f8cd a004 	str.w	sl, [sp, #4]
 8011d72:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8011d76:	44b0      	add	r8, r6
 8011d78:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8011d7a:	fa0f f388 	sxth.w	r3, r8
 8011d7e:	9300      	str	r3, [sp, #0]
 8011d80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011d82:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8011d86:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8011d88:	681a      	ldr	r2, [r3, #0]
 8011d8a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8011d8c:	685b      	ldr	r3, [r3, #4]
 8011d8e:	47b8      	blx	r7
 8011d90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011d92:	3301      	adds	r3, #1
 8011d94:	930d      	str	r3, [sp, #52]	@ 0x34
 8011d96:	e6e3      	b.n	8011b60 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8011d98:	2700      	movs	r7, #0
 8011d9a:	e7cb      	b.n	8011d34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8011d9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d9e:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8011da2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8011da4:	f8dc 1000 	ldr.w	r1, [ip]
 8011da8:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8011dac:	79aa      	ldrb	r2, [r5, #6]
 8011dae:	9203      	str	r2, [sp, #12]
 8011db0:	7baa      	ldrb	r2, [r5, #14]
 8011db2:	9202      	str	r2, [sp, #8]
 8011db4:	68aa      	ldr	r2, [r5, #8]
 8011db6:	e9cd 0200 	strd	r0, r2, [sp]
 8011dba:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8011dbc:	4660      	mov	r0, ip
 8011dbe:	688f      	ldr	r7, [r1, #8]
 8011dc0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011dc2:	47b8      	blx	r7
 8011dc4:	e7e4      	b.n	8011d90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8011dc6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011dc8:	3501      	adds	r5, #1
 8011dca:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8011dcc:	429d      	cmp	r5, r3
 8011dce:	f6bf af5e 	bge.w	8011c8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8011dd2:	4659      	mov	r1, fp
 8011dd4:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8011dd6:	f7f2 f897 	bl	8003f08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011dda:	4604      	mov	r4, r0
 8011ddc:	b110      	cbz	r0, 8011de4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8011dde:	280a      	cmp	r0, #10
 8011de0:	d1f2      	bne.n	8011dc8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 8011de2:	e753      	b.n	8011c8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8011de4:	2400      	movs	r4, #0
 8011de6:	e752      	b.n	8011c8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8011de8:	f1bb 0f00 	cmp.w	fp, #0
 8011dec:	f43f af43 	beq.w	8011c76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8011df0:	e75d      	b.n	8011cae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08011df2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8011df2:	b530      	push	{r4, r5, lr}
 8011df4:	8ac4      	ldrh	r4, [r0, #22]
 8011df6:	8b45      	ldrh	r5, [r0, #26]
 8011df8:	8343      	strh	r3, [r0, #26]
 8011dfa:	442c      	add	r4, r5
 8011dfc:	1ae4      	subs	r4, r4, r3
 8011dfe:	8b83      	ldrh	r3, [r0, #28]
 8011e00:	82c4      	strh	r4, [r0, #22]
 8011e02:	8b04      	ldrh	r4, [r0, #24]
 8011e04:	4422      	add	r2, r4
 8011e06:	440c      	add	r4, r1
 8011e08:	1a59      	subs	r1, r3, r1
 8011e0a:	83c2      	strh	r2, [r0, #30]
 8011e0c:	8304      	strh	r4, [r0, #24]
 8011e0e:	8381      	strh	r1, [r0, #28]
 8011e10:	bd30      	pop	{r4, r5, pc}

08011e12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8011e12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e16:	4604      	mov	r4, r0
 8011e18:	8a47      	ldrh	r7, [r0, #18]
 8011e1a:	68c0      	ldr	r0, [r0, #12]
 8011e1c:	b085      	sub	sp, #20
 8011e1e:	6803      	ldr	r3, [r0, #0]
 8011e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e22:	4798      	blx	r3
 8011e24:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8011e28:	7a63      	ldrb	r3, [r4, #9]
 8011e2a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8011e2e:	3b01      	subs	r3, #1
 8011e30:	42b7      	cmp	r7, r6
 8011e32:	bfac      	ite	ge
 8011e34:	f04f 0900 	movge.w	r9, #0
 8011e38:	f04f 0901 	movlt.w	r9, #1
 8011e3c:	2b05      	cmp	r3, #5
 8011e3e:	d804      	bhi.n	8011e4a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8011e40:	e8df f003 	tbb	[pc, r3]
 8011e44:	470f0854 	.word	0x470f0854
 8011e48:	4c4c      	.short	0x4c4c
 8011e4a:	2500      	movs	r5, #0
 8011e4c:	46a9      	mov	r9, r5
 8011e4e:	462e      	mov	r6, r5
 8011e50:	462f      	mov	r7, r5
 8011e52:	e00e      	b.n	8011e72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8011e54:	42b7      	cmp	r7, r6
 8011e56:	f04f 0500 	mov.w	r5, #0
 8011e5a:	bfb4      	ite	lt
 8011e5c:	2600      	movlt	r6, #0
 8011e5e:	2601      	movge	r6, #1
 8011e60:	e7f6      	b.n	8011e50 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8011e62:	42b7      	cmp	r7, r6
 8011e64:	464d      	mov	r5, r9
 8011e66:	f04f 0900 	mov.w	r9, #0
 8011e6a:	bfb4      	ite	lt
 8011e6c:	2600      	movlt	r6, #0
 8011e6e:	2601      	movge	r6, #1
 8011e70:	464f      	mov	r7, r9
 8011e72:	f04f 0800 	mov.w	r8, #0
 8011e76:	f8a4 8016 	strh.w	r8, [r4, #22]
 8011e7a:	f8a4 8018 	strh.w	r8, [r4, #24]
 8011e7e:	f8cd 8004 	str.w	r8, [sp, #4]
 8011e82:	2300      	movs	r3, #0
 8011e84:	9303      	str	r3, [sp, #12]
 8011e86:	8823      	ldrh	r3, [r4, #0]
 8011e88:	2b20      	cmp	r3, #32
 8011e8a:	d033      	beq.n	8011ef4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8011e8c:	f242 010b 	movw	r1, #8203	@ 0x200b
 8011e90:	1a5a      	subs	r2, r3, r1
 8011e92:	f1d2 0a00 	rsbs	sl, r2, #0
 8011e96:	eb4a 0a02 	adc.w	sl, sl, r2
 8011e9a:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8011e9e:	4293      	cmp	r3, r2
 8011ea0:	d008      	beq.n	8011eb4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8011ea2:	428b      	cmp	r3, r1
 8011ea4:	9a01      	ldr	r2, [sp, #4]
 8011ea6:	bf0e      	itee	eq
 8011ea8:	f04f 0a01 	moveq.w	sl, #1
 8011eac:	461a      	movne	r2, r3
 8011eae:	f04f 0a00 	movne.w	sl, #0
 8011eb2:	9201      	str	r2, [sp, #4]
 8011eb4:	ab03      	add	r3, sp, #12
 8011eb6:	68e2      	ldr	r2, [r4, #12]
 8011eb8:	7a21      	ldrb	r1, [r4, #8]
 8011eba:	6860      	ldr	r0, [r4, #4]
 8011ebc:	f003 f84c 	bl	8014f58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011ec0:	8020      	strh	r0, [r4, #0]
 8011ec2:	b9d8      	cbnz	r0, 8011efc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8011ec4:	8ba2      	ldrh	r2, [r4, #28]
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	4611      	mov	r1, r2
 8011eca:	4620      	mov	r0, r4
 8011ecc:	f7ff ff91 	bl	8011df2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8011ed0:	e06e      	b.n	8011fb0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8011ed2:	2500      	movs	r5, #0
 8011ed4:	2701      	movs	r7, #1
 8011ed6:	46a9      	mov	r9, r5
 8011ed8:	462e      	mov	r6, r5
 8011eda:	e7ca      	b.n	8011e72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8011edc:	42b7      	cmp	r7, r6
 8011ede:	f04f 0500 	mov.w	r5, #0
 8011ee2:	bfb4      	ite	lt
 8011ee4:	2700      	movlt	r7, #0
 8011ee6:	2701      	movge	r7, #1
 8011ee8:	462e      	mov	r6, r5
 8011eea:	e7c2      	b.n	8011e72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8011eec:	2500      	movs	r5, #0
 8011eee:	2601      	movs	r6, #1
 8011ef0:	46a9      	mov	r9, r5
 8011ef2:	e7ad      	b.n	8011e50 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8011ef4:	9301      	str	r3, [sp, #4]
 8011ef6:	f04f 0a01 	mov.w	sl, #1
 8011efa:	e7db      	b.n	8011eb4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8011efc:	8b63      	ldrh	r3, [r4, #26]
 8011efe:	280a      	cmp	r0, #10
 8011f00:	f103 0301 	add.w	r3, r3, #1
 8011f04:	8363      	strh	r3, [r4, #26]
 8011f06:	d0dd      	beq.n	8011ec4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8011f08:	9a03      	ldr	r2, [sp, #12]
 8011f0a:	bb62      	cbnz	r2, 8011f66 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8011f0c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8011f10:	4298      	cmp	r0, r3
 8011f12:	d003      	beq.n	8011f1c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8011f14:	f242 030b 	movw	r3, #8203	@ 0x200b
 8011f18:	4298      	cmp	r0, r3
 8011f1a:	d1b2      	bne.n	8011e82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011f1c:	8823      	ldrh	r3, [r4, #0]
 8011f1e:	8ba1      	ldrh	r1, [r4, #28]
 8011f20:	2b20      	cmp	r3, #32
 8011f22:	d003      	beq.n	8011f2c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8011f24:	f242 000b 	movw	r0, #8203	@ 0x200b
 8011f28:	4283      	cmp	r3, r0
 8011f2a:	d131      	bne.n	8011f90 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8011f2c:	f1ba 0f00 	cmp.w	sl, #0
 8011f30:	bf0a      	itet	eq
 8011f32:	4688      	moveq	r8, r1
 8011f34:	4650      	movne	r0, sl
 8011f36:	2001      	moveq	r0, #1
 8011f38:	440a      	add	r2, r1
 8011f3a:	8b23      	ldrh	r3, [r4, #24]
 8011f3c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8011f40:	b292      	uxth	r2, r2
 8011f42:	83a2      	strh	r2, [r4, #28]
 8011f44:	4413      	add	r3, r2
 8011f46:	f1b9 0f00 	cmp.w	r9, #0
 8011f4a:	d102      	bne.n	8011f52 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8011f4c:	2d00      	cmp	r5, #0
 8011f4e:	d042      	beq.n	8011fd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8011f50:	b300      	cbz	r0, 8011f94 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8011f52:	8c21      	ldrh	r1, [r4, #32]
 8011f54:	4419      	add	r1, r3
 8011f56:	458c      	cmp	ip, r1
 8011f58:	da37      	bge.n	8011fca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8011f5a:	8ae1      	ldrh	r1, [r4, #22]
 8011f5c:	2900      	cmp	r1, #0
 8011f5e:	d034      	beq.n	8011fca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8011f60:	4563      	cmp	r3, ip
 8011f62:	dd8e      	ble.n	8011e82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011f64:	e01d      	b.n	8011fa2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8011f66:	8893      	ldrh	r3, [r2, #4]
 8011f68:	9901      	ldr	r1, [sp, #4]
 8011f6a:	8023      	strh	r3, [r4, #0]
 8011f6c:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8011f70:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8011f74:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8011f78:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8011f7c:	ea4b 0b00 	orr.w	fp, fp, r0
 8011f80:	68e0      	ldr	r0, [r4, #12]
 8011f82:	6803      	ldr	r3, [r0, #0]
 8011f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f86:	4798      	blx	r3
 8011f88:	eb0b 0200 	add.w	r2, fp, r0
 8011f8c:	b292      	uxth	r2, r2
 8011f8e:	e7c5      	b.n	8011f1c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8011f90:	2000      	movs	r0, #0
 8011f92:	e7d1      	b.n	8011f38 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8011f94:	4563      	cmp	r3, ip
 8011f96:	f77f af74 	ble.w	8011e82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011f9a:	8ae3      	ldrh	r3, [r4, #22]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	f43f af70 	beq.w	8011e82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	8c22      	ldrh	r2, [r4, #32]
 8011fa6:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8011faa:	8be3      	ldrh	r3, [r4, #30]
 8011fac:	4413      	add	r3, r2
 8011fae:	83e3      	strh	r3, [r4, #30]
 8011fb0:	68e0      	ldr	r0, [r4, #12]
 8011fb2:	6803      	ldr	r3, [r0, #0]
 8011fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fb6:	4798      	blx	r3
 8011fb8:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8011fbc:	4418      	add	r0, r3
 8011fbe:	8a63      	ldrh	r3, [r4, #18]
 8011fc0:	1a18      	subs	r0, r3, r0
 8011fc2:	8260      	strh	r0, [r4, #18]
 8011fc4:	b005      	add	sp, #20
 8011fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fca:	2300      	movs	r3, #0
 8011fcc:	4611      	mov	r1, r2
 8011fce:	4620      	mov	r0, r4
 8011fd0:	f7ff ff0f 	bl	8011df2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8011fd4:	e755      	b.n	8011e82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011fd6:	4563      	cmp	r3, ip
 8011fd8:	dd14      	ble.n	8012004 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8011fda:	b117      	cbz	r7, 8011fe2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8011fdc:	2301      	movs	r3, #1
 8011fde:	460a      	mov	r2, r1
 8011fe0:	e772      	b.n	8011ec8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8011fe2:	2e00      	cmp	r6, #0
 8011fe4:	f43f af4d 	beq.w	8011e82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011fe8:	2800      	cmp	r0, #0
 8011fea:	f47f af4a 	bne.w	8011e82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011fee:	f1ba 0f00 	cmp.w	sl, #0
 8011ff2:	d002      	beq.n	8011ffa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	4642      	mov	r2, r8
 8011ff8:	e767      	b.n	8011eca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8011ffa:	8ae3      	ldrh	r3, [r4, #22]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	f43f af40 	beq.w	8011e82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012002:	e7d5      	b.n	8011fb0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8012004:	2800      	cmp	r0, #0
 8012006:	f47f af3c 	bne.w	8011e82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801200a:	f1ba 0f00 	cmp.w	sl, #0
 801200e:	f43f af38 	beq.w	8011e82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8012012:	2301      	movs	r3, #1
 8012014:	4642      	mov	r2, r8
 8012016:	e7da      	b.n	8011fce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08012018 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8012018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801201c:	b0e3      	sub	sp, #396	@ 0x18c
 801201e:	461c      	mov	r4, r3
 8012020:	4683      	mov	fp, r0
 8012022:	4688      	mov	r8, r1
 8012024:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8012026:	2b00      	cmp	r3, #0
 8012028:	f000 8112 	beq.w	8012250 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801202c:	6823      	ldr	r3, [r4, #0]
 801202e:	2b00      	cmp	r3, #0
 8012030:	f000 810e 	beq.w	8012250 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012034:	7ba3      	ldrb	r3, [r4, #14]
 8012036:	2b00      	cmp	r3, #0
 8012038:	f000 810a 	beq.w	8012250 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801203c:	ad0a      	add	r5, sp, #40	@ 0x28
 801203e:	6810      	ldr	r0, [r2, #0]
 8012040:	6851      	ldr	r1, [r2, #4]
 8012042:	462b      	mov	r3, r5
 8012044:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8012048:	c303      	stmia	r3!, {r0, r1}
 801204a:	2100      	movs	r1, #0
 801204c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8012050:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8012054:	4628      	mov	r0, r5
 8012056:	910c      	str	r1, [sp, #48]	@ 0x30
 8012058:	a90c      	add	r1, sp, #48	@ 0x30
 801205a:	79a2      	ldrb	r2, [r4, #6]
 801205c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8012060:	f7ff fd1d 	bl	8011a9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8012064:	a90c      	add	r1, sp, #48	@ 0x30
 8012066:	79a2      	ldrb	r2, [r4, #6]
 8012068:	4608      	mov	r0, r1
 801206a:	f7ff fd18 	bl	8011a9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801206e:	a817      	add	r0, sp, #92	@ 0x5c
 8012070:	f002 fc2a 	bl	80148c8 <_ZN8touchgfx12TextProviderC1Ev>
 8012074:	6820      	ldr	r0, [r4, #0]
 8012076:	6803      	ldr	r3, [r0, #0]
 8012078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801207a:	4798      	blx	r3
 801207c:	4606      	mov	r6, r0
 801207e:	6820      	ldr	r0, [r4, #0]
 8012080:	6803      	ldr	r3, [r0, #0]
 8012082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012084:	4798      	blx	r3
 8012086:	4633      	mov	r3, r6
 8012088:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801208a:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801208c:	9000      	str	r0, [sp, #0]
 801208e:	a817      	add	r0, sp, #92	@ 0x5c
 8012090:	f002 fc6d 	bl	801496e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012094:	6820      	ldr	r0, [r4, #0]
 8012096:	f894 a004 	ldrb.w	sl, [r4, #4]
 801209a:	6803      	ldr	r3, [r0, #0]
 801209c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801209e:	4798      	blx	r3
 80120a0:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80120a4:	6823      	ldr	r3, [r4, #0]
 80120a6:	4607      	mov	r7, r0
 80120a8:	4406      	add	r6, r0
 80120aa:	a830      	add	r0, sp, #192	@ 0xc0
 80120ac:	f893 9009 	ldrb.w	r9, [r3, #9]
 80120b0:	f002 fc0a 	bl	80148c8 <_ZN8touchgfx12TextProviderC1Ev>
 80120b4:	7c23      	ldrb	r3, [r4, #16]
 80120b6:	b17b      	cbz	r3, 80120d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 80120b8:	6820      	ldr	r0, [r4, #0]
 80120ba:	6803      	ldr	r3, [r0, #0]
 80120bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80120be:	4798      	blx	r3
 80120c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80120c2:	6820      	ldr	r0, [r4, #0]
 80120c4:	6802      	ldr	r2, [r0, #0]
 80120c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80120c8:	4790      	blx	r2
 80120ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120cc:	9000      	str	r0, [sp, #0]
 80120ce:	a830      	add	r0, sp, #192	@ 0xc0
 80120d0:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 80120d2:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 80120d4:	f002 fc4b 	bl	801496e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80120d8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80120dc:	a80e      	add	r0, sp, #56	@ 0x38
 80120de:	7be2      	ldrb	r2, [r4, #15]
 80120e0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 80120e4:	1a8a      	subs	r2, r1, r2
 80120e6:	7c21      	ldrb	r1, [r4, #16]
 80120e8:	9103      	str	r1, [sp, #12]
 80120ea:	b292      	uxth	r2, r2
 80120ec:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80120f0:	9102      	str	r1, [sp, #8]
 80120f2:	6821      	ldr	r1, [r4, #0]
 80120f4:	9101      	str	r1, [sp, #4]
 80120f6:	7961      	ldrb	r1, [r4, #5]
 80120f8:	9100      	str	r1, [sp, #0]
 80120fa:	a930      	add	r1, sp, #192	@ 0xc0
 80120fc:	f7ff fc50 	bl	80119a0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8012100:	2e00      	cmp	r6, #0
 8012102:	dc5b      	bgt.n	80121bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8012104:	af17      	add	r7, sp, #92	@ 0x5c
 8012106:	f04f 0900 	mov.w	r9, #0
 801210a:	7c23      	ldrb	r3, [r4, #16]
 801210c:	2b00      	cmp	r3, #0
 801210e:	f000 80b1 	beq.w	8012274 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8012112:	a80e      	add	r0, sp, #56	@ 0x38
 8012114:	f7ff fe7d 	bl	8011e12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8012118:	f1ba 0f00 	cmp.w	sl, #0
 801211c:	f000 80a5 	beq.w	801226a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8012120:	7c23      	ldrb	r3, [r4, #16]
 8012122:	2264      	movs	r2, #100	@ 0x64
 8012124:	4639      	mov	r1, r7
 8012126:	a849      	add	r0, sp, #292	@ 0x124
 8012128:	9309      	str	r3, [sp, #36]	@ 0x24
 801212a:	f00e fbde 	bl	80208ea <memcpy>
 801212e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012130:	2b00      	cmp	r3, #0
 8012132:	f000 80a7 	beq.w	8012284 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8012136:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801213a:	7922      	ldrb	r2, [r4, #4]
 801213c:	2a01      	cmp	r2, #1
 801213e:	f040 808a 	bne.w	8012256 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8012142:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8012146:	1ac0      	subs	r0, r0, r3
 8012148:	2302      	movs	r3, #2
 801214a:	fb90 f0f3 	sdiv	r0, r0, r3
 801214e:	b200      	sxth	r0, r0
 8012150:	7c23      	ldrb	r3, [r4, #16]
 8012152:	2b00      	cmp	r3, #0
 8012154:	f000 808b 	beq.w	801226e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8012158:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 801215c:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 8012160:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8012164:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8012168:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801216c:	2100      	movs	r1, #0
 801216e:	4410      	add	r0, r2
 8012170:	4642      	mov	r2, r8
 8012172:	b200      	sxth	r0, r0
 8012174:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8012178:	9000      	str	r0, [sp, #0]
 801217a:	4658      	mov	r0, fp
 801217c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8012180:	f7ff fcbe 	bl	8011b00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8012184:	2800      	cmp	r0, #0
 8012186:	d163      	bne.n	8012250 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012188:	b2b2      	uxth	r2, r6
 801218a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801218e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8012192:	4413      	add	r3, r2
 8012194:	1a8a      	subs	r2, r1, r2
 8012196:	b21b      	sxth	r3, r3
 8012198:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801219c:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 80121a0:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80121a4:	2a00      	cmp	r2, #0
 80121a6:	d153      	bne.n	8012250 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80121a8:	6822      	ldr	r2, [r4, #0]
 80121aa:	8869      	ldrh	r1, [r5, #2]
 80121ac:	7a12      	ldrb	r2, [r2, #8]
 80121ae:	1a9b      	subs	r3, r3, r2
 80121b0:	88ea      	ldrh	r2, [r5, #6]
 80121b2:	440a      	add	r2, r1
 80121b4:	b212      	sxth	r2, r2
 80121b6:	4293      	cmp	r3, r2
 80121b8:	dda7      	ble.n	801210a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 80121ba:	e049      	b.n	8012250 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80121bc:	7c23      	ldrb	r3, [r4, #16]
 80121be:	444f      	add	r7, r9
 80121c0:	b1c3      	cbz	r3, 80121f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 80121c2:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 80121c6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80121ca:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80121ce:	443b      	add	r3, r7
 80121d0:	4293      	cmp	r3, r2
 80121d2:	da97      	bge.n	8012104 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80121d4:	a80e      	add	r0, sp, #56	@ 0x38
 80121d6:	f7ff fe1c 	bl	8011e12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80121da:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 80121de:	3b01      	subs	r3, #1
 80121e0:	b29b      	uxth	r3, r3
 80121e2:	454b      	cmp	r3, r9
 80121e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80121e6:	d021      	beq.n	801222c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 80121e8:	7961      	ldrb	r1, [r4, #5]
 80121ea:	a817      	add	r0, sp, #92	@ 0x5c
 80121ec:	f7f1 fe8c 	bl	8003f08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80121f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121f2:	e7f4      	b.n	80121de <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 80121f4:	fa1f f986 	uxth.w	r9, r6
 80121f8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80121fc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012200:	443b      	add	r3, r7
 8012202:	4293      	cmp	r3, r2
 8012204:	f6bf af7e 	bge.w	8012104 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8012208:	a817      	add	r0, sp, #92	@ 0x5c
 801220a:	f002 ff71 	bl	80150f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801220e:	b1f8      	cbz	r0, 8012250 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012210:	280a      	cmp	r0, #10
 8012212:	d1f1      	bne.n	80121f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8012214:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8012218:	444b      	add	r3, r9
 801221a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801221e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8012222:	eba3 0309 	sub.w	r3, r3, r9
 8012226:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801222a:	e7e5      	b.n	80121f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801222c:	b2b3      	uxth	r3, r6
 801222e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8012232:	441a      	add	r2, r3
 8012234:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8012238:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801223c:	1ad3      	subs	r3, r2, r3
 801223e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8012242:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8012246:	b11b      	cbz	r3, 8012250 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8012248:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 801224c:	2b00      	cmp	r3, #0
 801224e:	d0ba      	beq.n	80121c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8012250:	b063      	add	sp, #396	@ 0x18c
 8012252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012256:	2a02      	cmp	r2, #2
 8012258:	d105      	bne.n	8012266 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801225a:	7be2      	ldrb	r2, [r4, #15]
 801225c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8012260:	1a80      	subs	r0, r0, r2
 8012262:	1ac0      	subs	r0, r0, r3
 8012264:	e773      	b.n	801214e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8012266:	2000      	movs	r0, #0
 8012268:	e772      	b.n	8012150 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801226a:	7be0      	ldrb	r0, [r4, #15]
 801226c:	e770      	b.n	8012150 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801226e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012272:	e773      	b.n	801215c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8012274:	f1ba 0f00 	cmp.w	sl, #0
 8012278:	d0f7      	beq.n	801226a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801227a:	2264      	movs	r2, #100	@ 0x64
 801227c:	4639      	mov	r1, r7
 801227e:	a849      	add	r0, sp, #292	@ 0x124
 8012280:	f00e fb33 	bl	80208ea <memcpy>
 8012284:	2300      	movs	r3, #0
 8012286:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801228a:	6821      	ldr	r1, [r4, #0]
 801228c:	a849      	add	r0, sp, #292	@ 0x124
 801228e:	f7ff fbca 	bl	8011a26 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8012292:	b203      	sxth	r3, r0
 8012294:	e751      	b.n	801213a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08012296 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8012296:	2b03      	cmp	r3, #3
 8012298:	d818      	bhi.n	80122cc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801229a:	e8df f003 	tbb	[pc, r3]
 801229e:	0602      	.short	0x0602
 80122a0:	130d      	.short	0x130d
 80122a2:	f9b0 2000 	ldrsh.w	r2, [r0]
 80122a6:	1850      	adds	r0, r2, r1
 80122a8:	4770      	bx	lr
 80122aa:	8803      	ldrh	r3, [r0, #0]
 80122ac:	8880      	ldrh	r0, [r0, #4]
 80122ae:	4418      	add	r0, r3
 80122b0:	b200      	sxth	r0, r0
 80122b2:	1a80      	subs	r0, r0, r2
 80122b4:	3801      	subs	r0, #1
 80122b6:	4770      	bx	lr
 80122b8:	8803      	ldrh	r3, [r0, #0]
 80122ba:	8880      	ldrh	r0, [r0, #4]
 80122bc:	4418      	add	r0, r3
 80122be:	b200      	sxth	r0, r0
 80122c0:	1a40      	subs	r0, r0, r1
 80122c2:	e7f7      	b.n	80122b4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80122c4:	f9b0 0000 	ldrsh.w	r0, [r0]
 80122c8:	4410      	add	r0, r2
 80122ca:	4770      	bx	lr
 80122cc:	2000      	movs	r0, #0
 80122ce:	4770      	bx	lr

080122d0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80122d0:	2b03      	cmp	r3, #3
 80122d2:	d817      	bhi.n	8012304 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80122d4:	e8df f003 	tbb	[pc, r3]
 80122d8:	10090602 	.word	0x10090602
 80122dc:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80122e0:	1850      	adds	r0, r2, r1
 80122e2:	4770      	bx	lr
 80122e4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80122e8:	e7fa      	b.n	80122e0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80122ea:	8843      	ldrh	r3, [r0, #2]
 80122ec:	88c0      	ldrh	r0, [r0, #6]
 80122ee:	4418      	add	r0, r3
 80122f0:	b200      	sxth	r0, r0
 80122f2:	1a80      	subs	r0, r0, r2
 80122f4:	3801      	subs	r0, #1
 80122f6:	4770      	bx	lr
 80122f8:	8843      	ldrh	r3, [r0, #2]
 80122fa:	88c0      	ldrh	r0, [r0, #6]
 80122fc:	4418      	add	r0, r3
 80122fe:	b200      	sxth	r0, r0
 8012300:	1a40      	subs	r0, r0, r1
 8012302:	e7f7      	b.n	80122f4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8012304:	2000      	movs	r0, #0
 8012306:	4770      	bx	lr

08012308 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8012308:	4b01      	ldr	r3, [pc, #4]	@ (8012310 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801230a:	2200      	movs	r2, #0
 801230c:	601a      	str	r2, [r3, #0]
 801230e:	4770      	bx	lr
 8012310:	24025168 	.word	0x24025168

08012314 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8012314:	4603      	mov	r3, r0
 8012316:	b1c8      	cbz	r0, 801234c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8012318:	0c02      	lsrs	r2, r0, #16
 801231a:	0412      	lsls	r2, r2, #16
 801231c:	b9a2      	cbnz	r2, 8012348 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801231e:	0403      	lsls	r3, r0, #16
 8012320:	2010      	movs	r0, #16
 8012322:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8012326:	bf04      	itt	eq
 8012328:	021b      	lsleq	r3, r3, #8
 801232a:	3008      	addeq	r0, #8
 801232c:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8012330:	bf04      	itt	eq
 8012332:	011b      	lsleq	r3, r3, #4
 8012334:	3004      	addeq	r0, #4
 8012336:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801233a:	bf04      	itt	eq
 801233c:	009b      	lsleq	r3, r3, #2
 801233e:	3002      	addeq	r0, #2
 8012340:	2b00      	cmp	r3, #0
 8012342:	db04      	blt.n	801234e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8012344:	3001      	adds	r0, #1
 8012346:	4770      	bx	lr
 8012348:	2000      	movs	r0, #0
 801234a:	e7ea      	b.n	8012322 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801234c:	2020      	movs	r0, #32
 801234e:	4770      	bx	lr

08012350 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8012350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012354:	b087      	sub	sp, #28
 8012356:	460d      	mov	r5, r1
 8012358:	4616      	mov	r6, r2
 801235a:	4698      	mov	r8, r3
 801235c:	4601      	mov	r1, r0
 801235e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8012362:	b120      	cbz	r0, 801236e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8012364:	b11a      	cbz	r2, 801236e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8012366:	2d1f      	cmp	r5, #31
 8012368:	d801      	bhi.n	801236e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801236a:	2b1f      	cmp	r3, #31
 801236c:	d904      	bls.n	8012378 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801236e:	2000      	movs	r0, #0
 8012370:	6038      	str	r0, [r7, #0]
 8012372:	b007      	add	sp, #28
 8012374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012378:	b97d      	cbnz	r5, 801239a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801237a:	b143      	cbz	r3, 801238e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801237c:	4602      	mov	r2, r0
 801237e:	462b      	mov	r3, r5
 8012380:	4641      	mov	r1, r8
 8012382:	4630      	mov	r0, r6
 8012384:	e9cd 4700 	strd	r4, r7, [sp]
 8012388:	f7ff ffe2 	bl	8012350 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801238c:	e7f1      	b.n	8012372 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801238e:	f04f 33ff 	mov.w	r3, #4294967295
 8012392:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8012396:	603b      	str	r3, [r7, #0]
 8012398:	e7eb      	b.n	8012372 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801239a:	fa32 fa05 	lsrs.w	sl, r2, r5
 801239e:	d106      	bne.n	80123ae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 80123a0:	4346      	muls	r6, r0
 80123a2:	fbb6 f0f4 	udiv	r0, r6, r4
 80123a6:	fb04 6610 	mls	r6, r4, r0, r6
 80123aa:	603e      	str	r6, [r7, #0]
 80123ac:	e7e1      	b.n	8012372 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80123ae:	2201      	movs	r2, #1
 80123b0:	fa00 fb05 	lsl.w	fp, r0, r5
 80123b4:	40aa      	lsls	r2, r5
 80123b6:	fbbb f9f4 	udiv	r9, fp, r4
 80123ba:	3a01      	subs	r2, #1
 80123bc:	fb0a f309 	mul.w	r3, sl, r9
 80123c0:	fb04 b919 	mls	r9, r4, r9, fp
 80123c4:	4016      	ands	r6, r2
 80123c6:	9303      	str	r3, [sp, #12]
 80123c8:	4630      	mov	r0, r6
 80123ca:	f7ff ffa3 	bl	8012314 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80123ce:	462b      	mov	r3, r5
 80123d0:	460a      	mov	r2, r1
 80123d2:	4601      	mov	r1, r0
 80123d4:	4630      	mov	r0, r6
 80123d6:	e9cd 4700 	strd	r4, r7, [sp]
 80123da:	f7ff ffb9 	bl	8012350 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80123de:	4606      	mov	r6, r0
 80123e0:	4648      	mov	r0, r9
 80123e2:	eb05 0108 	add.w	r1, r5, r8
 80123e6:	f7ff ff95 	bl	8012314 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80123ea:	ab05      	add	r3, sp, #20
 80123ec:	464a      	mov	r2, r9
 80123ee:	e9cd 4300 	strd	r4, r3, [sp]
 80123f2:	4603      	mov	r3, r0
 80123f4:	4650      	mov	r0, sl
 80123f6:	f7ff ffab 	bl	8012350 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80123fa:	6839      	ldr	r1, [r7, #0]
 80123fc:	9a05      	ldr	r2, [sp, #20]
 80123fe:	9b03      	ldr	r3, [sp, #12]
 8012400:	4411      	add	r1, r2
 8012402:	fbb1 f2f4 	udiv	r2, r1, r4
 8012406:	18d3      	adds	r3, r2, r3
 8012408:	fb04 1412 	mls	r4, r4, r2, r1
 801240c:	441e      	add	r6, r3
 801240e:	603c      	str	r4, [r7, #0]
 8012410:	4430      	add	r0, r6
 8012412:	e7ae      	b.n	8012372 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08012414 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8012414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012418:	b085      	sub	sp, #20
 801241a:	f1b0 0900 	subs.w	r9, r0, #0
 801241e:	461d      	mov	r5, r3
 8012420:	4617      	mov	r7, r2
 8012422:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8012424:	bfbb      	ittet	lt
 8012426:	f1c9 0900 	rsblt	r9, r9, #0
 801242a:	f04f 36ff 	movlt.w	r6, #4294967295
 801242e:	2601      	movge	r6, #1
 8012430:	6823      	ldrlt	r3, [r4, #0]
 8012432:	bfbc      	itt	lt
 8012434:	425b      	neglt	r3, r3
 8012436:	6023      	strlt	r3, [r4, #0]
 8012438:	2a00      	cmp	r2, #0
 801243a:	da04      	bge.n	8012446 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801243c:	6823      	ldr	r3, [r4, #0]
 801243e:	4257      	negs	r7, r2
 8012440:	4276      	negs	r6, r6
 8012442:	425b      	negs	r3, r3
 8012444:	6023      	str	r3, [r4, #0]
 8012446:	2d00      	cmp	r5, #0
 8012448:	4638      	mov	r0, r7
 801244a:	bfba      	itte	lt
 801244c:	426d      	neglt	r5, r5
 801244e:	f04f 38ff 	movlt.w	r8, #4294967295
 8012452:	f04f 0801 	movge.w	r8, #1
 8012456:	f7ff ff5d 	bl	8012314 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801245a:	ab03      	add	r3, sp, #12
 801245c:	463a      	mov	r2, r7
 801245e:	e9cd 5300 	strd	r5, r3, [sp]
 8012462:	4603      	mov	r3, r0
 8012464:	4648      	mov	r0, r9
 8012466:	f7ff ff73 	bl	8012350 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801246a:	6823      	ldr	r3, [r4, #0]
 801246c:	9a03      	ldr	r2, [sp, #12]
 801246e:	4546      	cmp	r6, r8
 8012470:	441a      	add	r2, r3
 8012472:	fb92 f3f5 	sdiv	r3, r2, r5
 8012476:	4418      	add	r0, r3
 8012478:	fb05 2313 	mls	r3, r5, r3, r2
 801247c:	bf18      	it	ne
 801247e:	4240      	negne	r0, r0
 8012480:	1c72      	adds	r2, r6, #1
 8012482:	6023      	str	r3, [r4, #0]
 8012484:	d105      	bne.n	8012492 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8012486:	2b00      	cmp	r3, #0
 8012488:	f1c3 0200 	rsb	r2, r3, #0
 801248c:	db0b      	blt.n	80124a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801248e:	6022      	str	r2, [r4, #0]
 8012490:	e006      	b.n	80124a0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012492:	2e01      	cmp	r6, #1
 8012494:	d104      	bne.n	80124a0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012496:	2b00      	cmp	r3, #0
 8012498:	da02      	bge.n	80124a0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801249a:	442b      	add	r3, r5
 801249c:	3801      	subs	r0, #1
 801249e:	6023      	str	r3, [r4, #0]
 80124a0:	b005      	add	sp, #20
 80124a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124a6:	3801      	subs	r0, #1
 80124a8:	1b52      	subs	r2, r2, r5
 80124aa:	e7f0      	b.n	801248e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

080124ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80124ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80124b0:	4c1c      	ldr	r4, [pc, #112]	@ (8012524 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80124b2:	4605      	mov	r5, r0
 80124b4:	6807      	ldr	r7, [r0, #0]
 80124b6:	69a3      	ldr	r3, [r4, #24]
 80124b8:	b92b      	cbnz	r3, 80124c6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80124ba:	6840      	ldr	r0, [r0, #4]
 80124bc:	e9c5 7000 	strd	r7, r0, [r5]
 80124c0:	b004      	add	sp, #16
 80124c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124c6:	f04f 0802 	mov.w	r8, #2
 80124ca:	68a2      	ldr	r2, [r4, #8]
 80124cc:	ae04      	add	r6, sp, #16
 80124ce:	6820      	ldr	r0, [r4, #0]
 80124d0:	fb93 f1f8 	sdiv	r1, r3, r8
 80124d4:	440a      	add	r2, r1
 80124d6:	69e1      	ldr	r1, [r4, #28]
 80124d8:	f846 2d04 	str.w	r2, [r6, #-4]!
 80124dc:	463a      	mov	r2, r7
 80124de:	9600      	str	r6, [sp, #0]
 80124e0:	f7ff ff98 	bl	8012414 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80124e4:	69a3      	ldr	r3, [r4, #24]
 80124e6:	4607      	mov	r7, r0
 80124e8:	686a      	ldr	r2, [r5, #4]
 80124ea:	6a21      	ldr	r1, [r4, #32]
 80124ec:	9600      	str	r6, [sp, #0]
 80124ee:	6860      	ldr	r0, [r4, #4]
 80124f0:	f7ff ff90 	bl	8012414 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80124f4:	69a3      	ldr	r3, [r4, #24]
 80124f6:	6962      	ldr	r2, [r4, #20]
 80124f8:	4407      	add	r7, r0
 80124fa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80124fc:	9600      	str	r6, [sp, #0]
 80124fe:	68e0      	ldr	r0, [r4, #12]
 8012500:	fb93 f8f8 	sdiv	r8, r3, r8
 8012504:	4442      	add	r2, r8
 8012506:	9203      	str	r2, [sp, #12]
 8012508:	682a      	ldr	r2, [r5, #0]
 801250a:	f7ff ff83 	bl	8012414 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801250e:	4680      	mov	r8, r0
 8012510:	9600      	str	r6, [sp, #0]
 8012512:	69a3      	ldr	r3, [r4, #24]
 8012514:	686a      	ldr	r2, [r5, #4]
 8012516:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8012518:	6920      	ldr	r0, [r4, #16]
 801251a:	f7ff ff7b 	bl	8012414 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801251e:	4440      	add	r0, r8
 8012520:	e7cc      	b.n	80124bc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8012522:	bf00      	nop
 8012524:	2402516c 	.word	0x2402516c

08012528 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8012528:	4b07      	ldr	r3, [pc, #28]	@ (8012548 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801252a:	781b      	ldrb	r3, [r3, #0]
 801252c:	2b01      	cmp	r3, #1
 801252e:	d109      	bne.n	8012544 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8012530:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012534:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012538:	8003      	strh	r3, [r0, #0]
 801253a:	4b04      	ldr	r3, [pc, #16]	@ (801254c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801253c:	881b      	ldrh	r3, [r3, #0]
 801253e:	3b01      	subs	r3, #1
 8012540:	1a9b      	subs	r3, r3, r2
 8012542:	800b      	strh	r3, [r1, #0]
 8012544:	4770      	bx	lr
 8012546:	bf00      	nop
 8012548:	24025150 	.word	0x24025150
 801254c:	2402514c 	.word	0x2402514c

08012550 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8012550:	4b07      	ldr	r3, [pc, #28]	@ (8012570 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8012552:	b510      	push	{r4, lr}
 8012554:	781b      	ldrb	r3, [r3, #0]
 8012556:	2b01      	cmp	r3, #1
 8012558:	d108      	bne.n	801256c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801255a:	4b06      	ldr	r3, [pc, #24]	@ (8012574 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801255c:	880c      	ldrh	r4, [r1, #0]
 801255e:	881b      	ldrh	r3, [r3, #0]
 8012560:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012564:	3b01      	subs	r3, #1
 8012566:	1b1b      	subs	r3, r3, r4
 8012568:	8003      	strh	r3, [r0, #0]
 801256a:	800a      	strh	r2, [r1, #0]
 801256c:	bd10      	pop	{r4, pc}
 801256e:	bf00      	nop
 8012570:	24025150 	.word	0x24025150
 8012574:	2402514c 	.word	0x2402514c

08012578 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8012578:	4b0a      	ldr	r3, [pc, #40]	@ (80125a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801257a:	b510      	push	{r4, lr}
 801257c:	781b      	ldrb	r3, [r3, #0]
 801257e:	2b01      	cmp	r3, #1
 8012580:	d10e      	bne.n	80125a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8012582:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8012586:	8843      	ldrh	r3, [r0, #2]
 8012588:	f9b0 4000 	ldrsh.w	r4, [r0]
 801258c:	18ca      	adds	r2, r1, r3
 801258e:	4b06      	ldr	r3, [pc, #24]	@ (80125a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8012590:	8044      	strh	r4, [r0, #2]
 8012592:	881b      	ldrh	r3, [r3, #0]
 8012594:	1a9b      	subs	r3, r3, r2
 8012596:	8003      	strh	r3, [r0, #0]
 8012598:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801259c:	8081      	strh	r1, [r0, #4]
 801259e:	80c3      	strh	r3, [r0, #6]
 80125a0:	bd10      	pop	{r4, pc}
 80125a2:	bf00      	nop
 80125a4:	24025150 	.word	0x24025150
 80125a8:	2402514c 	.word	0x2402514c

080125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80125ac:	4b08      	ldr	r3, [pc, #32]	@ (80125d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80125ae:	781b      	ldrb	r3, [r3, #0]
 80125b0:	2b01      	cmp	r3, #1
 80125b2:	d10c      	bne.n	80125ce <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80125b4:	8803      	ldrh	r3, [r0, #0]
 80125b6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80125ba:	8842      	ldrh	r2, [r0, #2]
 80125bc:	8002      	strh	r2, [r0, #0]
 80125be:	185a      	adds	r2, r3, r1
 80125c0:	4b04      	ldr	r3, [pc, #16]	@ (80125d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80125c2:	881b      	ldrh	r3, [r3, #0]
 80125c4:	1a9b      	subs	r3, r3, r2
 80125c6:	8043      	strh	r3, [r0, #2]
 80125c8:	88c3      	ldrh	r3, [r0, #6]
 80125ca:	80c1      	strh	r1, [r0, #6]
 80125cc:	8083      	strh	r3, [r0, #4]
 80125ce:	4770      	bx	lr
 80125d0:	24025150 	.word	0x24025150
 80125d4:	2402514c 	.word	0x2402514c

080125d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80125d8:	4b07      	ldr	r3, [pc, #28]	@ (80125f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80125da:	b510      	push	{r4, lr}
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	2b01      	cmp	r3, #1
 80125e0:	d108      	bne.n	80125f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80125e2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80125e6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80125ea:	8003      	strh	r3, [r0, #0]
 80125ec:	8893      	ldrh	r3, [r2, #4]
 80125ee:	3b01      	subs	r3, #1
 80125f0:	1b1b      	subs	r3, r3, r4
 80125f2:	800b      	strh	r3, [r1, #0]
 80125f4:	bd10      	pop	{r4, pc}
 80125f6:	bf00      	nop
 80125f8:	24025150 	.word	0x24025150

080125fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80125fc:	4b0a      	ldr	r3, [pc, #40]	@ (8012628 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80125fe:	460a      	mov	r2, r1
 8012600:	b510      	push	{r4, lr}
 8012602:	781b      	ldrb	r3, [r3, #0]
 8012604:	2b01      	cmp	r3, #1
 8012606:	d10d      	bne.n	8012624 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8012608:	8881      	ldrh	r1, [r0, #4]
 801260a:	8803      	ldrh	r3, [r0, #0]
 801260c:	440b      	add	r3, r1
 801260e:	4601      	mov	r1, r0
 8012610:	3b01      	subs	r3, #1
 8012612:	f821 3b02 	strh.w	r3, [r1], #2
 8012616:	f7ff ffdf 	bl	80125d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801261a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801261e:	88c2      	ldrh	r2, [r0, #6]
 8012620:	80c3      	strh	r3, [r0, #6]
 8012622:	8082      	strh	r2, [r0, #4]
 8012624:	bd10      	pop	{r4, pc}
 8012626:	bf00      	nop
 8012628:	24025150 	.word	0x24025150

0801262c <_ZN8touchgfx11Application13requestRedrawEv>:
 801262c:	4b06      	ldr	r3, [pc, #24]	@ (8012648 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801262e:	2100      	movs	r1, #0
 8012630:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012634:	4b05      	ldr	r3, [pc, #20]	@ (801264c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8012636:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801263a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801263e:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8012642:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 8012646:	4770      	bx	lr
 8012648:	2402514c 	.word	0x2402514c
 801264c:	2402514e 	.word	0x2402514e

08012650 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8012650:	4b03      	ldr	r3, [pc, #12]	@ (8012660 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8012652:	6818      	ldr	r0, [r3, #0]
 8012654:	b110      	cbz	r0, 801265c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8012656:	6803      	ldr	r3, [r0, #0]
 8012658:	699b      	ldr	r3, [r3, #24]
 801265a:	4718      	bx	r3
 801265c:	4770      	bx	lr
 801265e:	bf00      	nop
 8012660:	2402519c 	.word	0x2402519c

08012664 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8012664:	4770      	bx	lr
	...

08012668 <_ZN8touchgfx11Application4drawEv>:
 8012668:	4b09      	ldr	r3, [pc, #36]	@ (8012690 <_ZN8touchgfx11Application4drawEv+0x28>)
 801266a:	b507      	push	{r0, r1, r2, lr}
 801266c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012670:	2100      	movs	r1, #0
 8012672:	4b08      	ldr	r3, [pc, #32]	@ (8012694 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8012674:	9100      	str	r1, [sp, #0]
 8012676:	4669      	mov	r1, sp
 8012678:	f9b3 3000 	ldrsh.w	r3, [r3]
 801267c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012680:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012684:	6803      	ldr	r3, [r0, #0]
 8012686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012688:	4798      	blx	r3
 801268a:	b003      	add	sp, #12
 801268c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012690:	2402514c 	.word	0x2402514c
 8012694:	2402514e 	.word	0x2402514e

08012698 <_ZN8touchgfx11Application10invalidateEv>:
 8012698:	4b09      	ldr	r3, [pc, #36]	@ (80126c0 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801269a:	b082      	sub	sp, #8
 801269c:	2100      	movs	r1, #0
 801269e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80126a2:	4b08      	ldr	r3, [pc, #32]	@ (80126c4 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80126a4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80126a8:	aa02      	add	r2, sp, #8
 80126aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126ae:	9100      	str	r1, [sp, #0]
 80126b0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80126b4:	6803      	ldr	r3, [r0, #0]
 80126b6:	e912 0006 	ldmdb	r2, {r1, r2}
 80126ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80126bc:	b002      	add	sp, #8
 80126be:	4718      	bx	r3
 80126c0:	2402514c 	.word	0x2402514c
 80126c4:	2402514e 	.word	0x2402514e

080126c8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80126c8:	4b03      	ldr	r3, [pc, #12]	@ (80126d8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80126ca:	6818      	ldr	r0, [r3, #0]
 80126cc:	b110      	cbz	r0, 80126d4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80126ce:	6803      	ldr	r3, [r0, #0]
 80126d0:	69db      	ldr	r3, [r3, #28]
 80126d2:	4718      	bx	r3
 80126d4:	4770      	bx	lr
 80126d6:	bf00      	nop
 80126d8:	2402519c 	.word	0x2402519c

080126dc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80126dc:	4b03      	ldr	r3, [pc, #12]	@ (80126ec <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80126de:	6818      	ldr	r0, [r3, #0]
 80126e0:	b110      	cbz	r0, 80126e8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80126e2:	6803      	ldr	r3, [r0, #0]
 80126e4:	6a1b      	ldr	r3, [r3, #32]
 80126e6:	4718      	bx	r3
 80126e8:	4770      	bx	lr
 80126ea:	bf00      	nop
 80126ec:	2402519c 	.word	0x2402519c

080126f0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80126f0:	2300      	movs	r3, #0
 80126f2:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 80126f6:	4770      	bx	lr

080126f8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80126f8:	4b03      	ldr	r3, [pc, #12]	@ (8012708 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80126fa:	6818      	ldr	r0, [r3, #0]
 80126fc:	b110      	cbz	r0, 8012704 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80126fe:	6803      	ldr	r3, [r0, #0]
 8012700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012702:	4718      	bx	r3
 8012704:	4770      	bx	lr
 8012706:	bf00      	nop
 8012708:	2402519c 	.word	0x2402519c

0801270c <_ZN8touchgfx11ApplicationD1Ev>:
 801270c:	4770      	bx	lr

0801270e <_ZN8touchgfx11ApplicationD0Ev>:
 801270e:	b510      	push	{r4, lr}
 8012710:	4604      	mov	r4, r0
 8012712:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8012716:	f00d f97b 	bl	801fa10 <_ZdlPvj>
 801271a:	4620      	mov	r0, r4
 801271c:	bd10      	pop	{r4, pc}

0801271e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801271e:	b510      	push	{r4, lr}
 8012720:	f9b1 4000 	ldrsh.w	r4, [r1]
 8012724:	888a      	ldrh	r2, [r1, #4]
 8012726:	f9b0 3000 	ldrsh.w	r3, [r0]
 801272a:	4422      	add	r2, r4
 801272c:	b212      	sxth	r2, r2
 801272e:	4293      	cmp	r3, r2
 8012730:	da15      	bge.n	801275e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012732:	8882      	ldrh	r2, [r0, #4]
 8012734:	4413      	add	r3, r2
 8012736:	b21b      	sxth	r3, r3
 8012738:	429c      	cmp	r4, r3
 801273a:	da10      	bge.n	801275e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801273c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012740:	88c9      	ldrh	r1, [r1, #6]
 8012742:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012746:	4419      	add	r1, r3
 8012748:	b209      	sxth	r1, r1
 801274a:	428a      	cmp	r2, r1
 801274c:	da07      	bge.n	801275e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801274e:	88c0      	ldrh	r0, [r0, #6]
 8012750:	4410      	add	r0, r2
 8012752:	b200      	sxth	r0, r0
 8012754:	4283      	cmp	r3, r0
 8012756:	bfac      	ite	ge
 8012758:	2000      	movge	r0, #0
 801275a:	2001      	movlt	r0, #1
 801275c:	bd10      	pop	{r4, pc}
 801275e:	2000      	movs	r0, #0
 8012760:	e7fc      	b.n	801275c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08012762 <_ZN8touchgfx4Rect10restrictToEss>:
 8012762:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012766:	2b00      	cmp	r3, #0
 8012768:	b510      	push	{r4, lr}
 801276a:	da04      	bge.n	8012776 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801276c:	8884      	ldrh	r4, [r0, #4]
 801276e:	4423      	add	r3, r4
 8012770:	8083      	strh	r3, [r0, #4]
 8012772:	2300      	movs	r3, #0
 8012774:	8003      	strh	r3, [r0, #0]
 8012776:	f9b0 4000 	ldrsh.w	r4, [r0]
 801277a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801277e:	1b09      	subs	r1, r1, r4
 8012780:	428b      	cmp	r3, r1
 8012782:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8012786:	bfc8      	it	gt
 8012788:	8081      	strhgt	r1, [r0, #4]
 801278a:	2b00      	cmp	r3, #0
 801278c:	da04      	bge.n	8012798 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801278e:	88c1      	ldrh	r1, [r0, #6]
 8012790:	440b      	add	r3, r1
 8012792:	80c3      	strh	r3, [r0, #6]
 8012794:	2300      	movs	r3, #0
 8012796:	8043      	strh	r3, [r0, #2]
 8012798:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801279c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80127a0:	1a52      	subs	r2, r2, r1
 80127a2:	4293      	cmp	r3, r2
 80127a4:	bfc8      	it	gt
 80127a6:	80c2      	strhgt	r2, [r0, #6]
 80127a8:	bd10      	pop	{r4, pc}
	...

080127ac <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80127ac:	4b10      	ldr	r3, [pc, #64]	@ (80127f0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80127ae:	b510      	push	{r4, lr}
 80127b0:	460c      	mov	r4, r1
 80127b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80127b6:	4b0f      	ldr	r3, [pc, #60]	@ (80127f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80127b8:	4620      	mov	r0, r4
 80127ba:	f9b3 1000 	ldrsh.w	r1, [r3]
 80127be:	f7ff ffd0 	bl	8012762 <_ZN8touchgfx4Rect10restrictToEss>
 80127c2:	4b0d      	ldr	r3, [pc, #52]	@ (80127f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80127c4:	6818      	ldr	r0, [r3, #0]
 80127c6:	b190      	cbz	r0, 80127ee <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80127c8:	6803      	ldr	r3, [r0, #0]
 80127ca:	4621      	mov	r1, r4
 80127cc:	689b      	ldr	r3, [r3, #8]
 80127ce:	4798      	blx	r3
 80127d0:	4b0a      	ldr	r3, [pc, #40]	@ (80127fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80127d2:	6818      	ldr	r0, [r3, #0]
 80127d4:	b118      	cbz	r0, 80127de <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80127d6:	6803      	ldr	r3, [r0, #0]
 80127d8:	4621      	mov	r1, r4
 80127da:	689b      	ldr	r3, [r3, #8]
 80127dc:	4798      	blx	r3
 80127de:	4b08      	ldr	r3, [pc, #32]	@ (8012800 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80127e0:	4621      	mov	r1, r4
 80127e2:	6818      	ldr	r0, [r3, #0]
 80127e4:	6803      	ldr	r3, [r0, #0]
 80127e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127ea:	69db      	ldr	r3, [r3, #28]
 80127ec:	4718      	bx	r3
 80127ee:	bd10      	pop	{r4, pc}
 80127f0:	2402514e 	.word	0x2402514e
 80127f4:	2402514c 	.word	0x2402514c
 80127f8:	2402519c 	.word	0x2402519c
 80127fc:	24025198 	.word	0x24025198
 8012800:	24025158 	.word	0x24025158

08012804 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8012804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012806:	4606      	mov	r6, r0
 8012808:	4608      	mov	r0, r1
 801280a:	460f      	mov	r7, r1
 801280c:	f7fa ffc3 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012810:	b9e8      	cbnz	r0, 801284e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012812:	f9b7 5000 	ldrsh.w	r5, [r7]
 8012816:	f9b6 4000 	ldrsh.w	r4, [r6]
 801281a:	42a5      	cmp	r5, r4
 801281c:	db17      	blt.n	801284e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801281e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012822:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8012826:	429a      	cmp	r2, r3
 8012828:	db11      	blt.n	801284e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801282a:	88b9      	ldrh	r1, [r7, #4]
 801282c:	440d      	add	r5, r1
 801282e:	88b1      	ldrh	r1, [r6, #4]
 8012830:	440c      	add	r4, r1
 8012832:	b22d      	sxth	r5, r5
 8012834:	b224      	sxth	r4, r4
 8012836:	42a5      	cmp	r5, r4
 8012838:	dc09      	bgt.n	801284e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801283a:	88f8      	ldrh	r0, [r7, #6]
 801283c:	4410      	add	r0, r2
 801283e:	88f2      	ldrh	r2, [r6, #6]
 8012840:	4413      	add	r3, r2
 8012842:	b200      	sxth	r0, r0
 8012844:	b21b      	sxth	r3, r3
 8012846:	4298      	cmp	r0, r3
 8012848:	bfcc      	ite	gt
 801284a:	2000      	movgt	r0, #0
 801284c:	2001      	movle	r0, #1
 801284e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012850 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8012850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012852:	4604      	mov	r4, r0
 8012854:	4608      	mov	r0, r1
 8012856:	460d      	mov	r5, r1
 8012858:	f7fa ff9d 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 801285c:	b978      	cbnz	r0, 801287e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801285e:	4620      	mov	r0, r4
 8012860:	f7fa ff99 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012864:	f9b5 6000 	ldrsh.w	r6, [r5]
 8012868:	b150      	cbz	r0, 8012880 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801286a:	8026      	strh	r6, [r4, #0]
 801286c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012870:	8063      	strh	r3, [r4, #2]
 8012872:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8012876:	80a3      	strh	r3, [r4, #4]
 8012878:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801287c:	80e3      	strh	r3, [r4, #6]
 801287e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012880:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012884:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012888:	42b1      	cmp	r1, r6
 801288a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801288e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8012892:	460f      	mov	r7, r1
 8012894:	88ed      	ldrh	r5, [r5, #6]
 8012896:	bfa8      	it	ge
 8012898:	4637      	movge	r7, r6
 801289a:	4293      	cmp	r3, r2
 801289c:	4618      	mov	r0, r3
 801289e:	4466      	add	r6, ip
 80128a0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80128a4:	bfa8      	it	ge
 80128a6:	4610      	movge	r0, r2
 80128a8:	442a      	add	r2, r5
 80128aa:	88e5      	ldrh	r5, [r4, #6]
 80128ac:	4461      	add	r1, ip
 80128ae:	b236      	sxth	r6, r6
 80128b0:	8027      	strh	r7, [r4, #0]
 80128b2:	442b      	add	r3, r5
 80128b4:	b209      	sxth	r1, r1
 80128b6:	b212      	sxth	r2, r2
 80128b8:	8060      	strh	r0, [r4, #2]
 80128ba:	b21b      	sxth	r3, r3
 80128bc:	428e      	cmp	r6, r1
 80128be:	bfac      	ite	ge
 80128c0:	ebc7 0106 	rsbge	r1, r7, r6
 80128c4:	ebc7 0101 	rsblt	r1, r7, r1
 80128c8:	429a      	cmp	r2, r3
 80128ca:	bfac      	ite	ge
 80128cc:	ebc0 0202 	rsbge	r2, r0, r2
 80128d0:	ebc0 0203 	rsblt	r2, r0, r3
 80128d4:	80a1      	strh	r1, [r4, #4]
 80128d6:	80e2      	strh	r2, [r4, #6]
 80128d8:	e7d1      	b.n	801287e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080128dc <_ZN8touchgfx11Application11getInstanceEv>:
 80128dc:	4b01      	ldr	r3, [pc, #4]	@ (80128e4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80128de:	6818      	ldr	r0, [r3, #0]
 80128e0:	4770      	bx	lr
 80128e2:	bf00      	nop
 80128e4:	240251ac 	.word	0x240251ac

080128e8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80128e8:	2300      	movs	r3, #0
 80128ea:	b510      	push	{r4, lr}
 80128ec:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 80128f0:	4604      	mov	r4, r0
 80128f2:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80128f6:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80128fa:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80128fe:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8012902:	429a      	cmp	r2, r3
 8012904:	d90e      	bls.n	8012924 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8012906:	18e2      	adds	r2, r4, r3
 8012908:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801290c:	b122      	cbz	r2, 8012918 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801290e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8012912:	6803      	ldr	r3, [r0, #0]
 8012914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012916:	4798      	blx	r3
 8012918:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801291c:	3301      	adds	r3, #1
 801291e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8012922:	e7ea      	b.n	80128fa <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8012924:	bd10      	pop	{r4, pc}

08012926 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8012926:	2300      	movs	r3, #0
 8012928:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801292c:	30a4      	adds	r0, #164	@ 0xa4
 801292e:	f820 3c24 	strh.w	r3, [r0, #-36]
 8012932:	f802 3b01 	strb.w	r3, [r2], #1
 8012936:	4282      	cmp	r2, r0
 8012938:	d1fb      	bne.n	8012932 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801293a:	4770      	bx	lr

0801293c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801293c:	b570      	push	{r4, r5, r6, lr}
 801293e:	4c0b      	ldr	r4, [pc, #44]	@ (801296c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8012940:	4605      	mov	r5, r0
 8012942:	460e      	mov	r6, r1
 8012944:	6820      	ldr	r0, [r4, #0]
 8012946:	b110      	cbz	r0, 801294e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8012948:	6803      	ldr	r3, [r0, #0]
 801294a:	695b      	ldr	r3, [r3, #20]
 801294c:	4798      	blx	r3
 801294e:	1d28      	adds	r0, r5, #4
 8012950:	f7ff ffe9 	bl	8012926 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8012954:	6026      	str	r6, [r4, #0]
 8012956:	6833      	ldr	r3, [r6, #0]
 8012958:	4630      	mov	r0, r6
 801295a:	68db      	ldr	r3, [r3, #12]
 801295c:	4798      	blx	r3
 801295e:	682b      	ldr	r3, [r5, #0]
 8012960:	4628      	mov	r0, r5
 8012962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012968:	4718      	bx	r3
 801296a:	bf00      	nop
 801296c:	2402519c 	.word	0x2402519c

08012970 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8012970:	2300      	movs	r3, #0
 8012972:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8012976:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801297a:	461a      	mov	r2, r3
 801297c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801297e:	461c      	mov	r4, r3
 8012980:	461d      	mov	r5, r3
 8012982:	459c      	cmp	ip, r3
 8012984:	dd1a      	ble.n	80129bc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8012986:	18c6      	adds	r6, r0, r3
 8012988:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801298c:	b16e      	cbz	r6, 80129aa <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801298e:	429a      	cmp	r2, r3
 8012990:	d008      	beq.n	80129a4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8012992:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8012996:	fa1f fe82 	uxth.w	lr, r2
 801299a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801299e:	1887      	adds	r7, r0, r2
 80129a0:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 80129a4:	3201      	adds	r2, #1
 80129a6:	3301      	adds	r3, #1
 80129a8:	e7eb      	b.n	8012982 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 80129aa:	4299      	cmp	r1, r3
 80129ac:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 80129b0:	bfa8      	it	ge
 80129b2:	3501      	addge	r5, #1
 80129b4:	429e      	cmp	r6, r3
 80129b6:	bfc8      	it	gt
 80129b8:	3401      	addgt	r4, #1
 80129ba:	e7f4      	b.n	80129a6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80129bc:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 80129c0:	1b49      	subs	r1, r1, r5
 80129c2:	1b1b      	subs	r3, r3, r4
 80129c4:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 80129c8:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80129cc:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80129d0:	4293      	cmp	r3, r2
 80129d2:	dd03      	ble.n	80129dc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80129d4:	3b01      	subs	r3, #1
 80129d6:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 80129da:	e7f7      	b.n	80129cc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 80129dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080129e0 <_ZN8touchgfx11Application15handleTickEventEv>:
 80129e0:	b570      	push	{r4, r5, r6, lr}
 80129e2:	4d16      	ldr	r5, [pc, #88]	@ (8012a3c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 80129e4:	4604      	mov	r4, r0
 80129e6:	6828      	ldr	r0, [r5, #0]
 80129e8:	b140      	cbz	r0, 80129fc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80129ea:	7a03      	ldrb	r3, [r0, #8]
 80129ec:	b933      	cbnz	r3, 80129fc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80129ee:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80129f2:	6803      	ldr	r3, [r0, #0]
 80129f4:	689b      	ldr	r3, [r3, #8]
 80129f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129fa:	4718      	bx	r3
 80129fc:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8012a00:	4e0f      	ldr	r6, [pc, #60]	@ (8012a40 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8012a02:	b973      	cbnz	r3, 8012a22 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012a04:	b168      	cbz	r0, 8012a22 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012a06:	7a03      	ldrb	r3, [r0, #8]
 8012a08:	b15b      	cbz	r3, 8012a22 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012a0a:	6830      	ldr	r0, [r6, #0]
 8012a0c:	b110      	cbz	r0, 8012a14 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8012a0e:	6803      	ldr	r3, [r0, #0]
 8012a10:	691b      	ldr	r3, [r3, #16]
 8012a12:	4798      	blx	r3
 8012a14:	6828      	ldr	r0, [r5, #0]
 8012a16:	6803      	ldr	r3, [r0, #0]
 8012a18:	68db      	ldr	r3, [r3, #12]
 8012a1a:	4798      	blx	r3
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8012a22:	3404      	adds	r4, #4
 8012a24:	4620      	mov	r0, r4
 8012a26:	f7ff ff5f 	bl	80128e8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	f7ff ffa0 	bl	8012970 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8012a30:	6830      	ldr	r0, [r6, #0]
 8012a32:	b110      	cbz	r0, 8012a3a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8012a34:	6803      	ldr	r3, [r0, #0]
 8012a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a38:	e7dd      	b.n	80129f6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8012a3a:	bd70      	pop	{r4, r5, r6, pc}
 8012a3c:	240251a0 	.word	0x240251a0
 8012a40:	2402519c 	.word	0x2402519c

08012a44 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8012a44:	4603      	mov	r3, r0
 8012a46:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	801a      	strh	r2, [r3, #0]
 8012a4e:	3308      	adds	r3, #8
 8012a50:	f823 2c06 	strh.w	r2, [r3, #-6]
 8012a54:	f823 2c04 	strh.w	r2, [r3, #-4]
 8012a58:	f823 2c02 	strh.w	r2, [r3, #-2]
 8012a5c:	428b      	cmp	r3, r1
 8012a5e:	d1f5      	bne.n	8012a4c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8012a60:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8012a64:	4770      	bx	lr
	...

08012a68 <_ZN8touchgfx11ApplicationC1Ev>:
 8012a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8012ae0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8012a6c:	4606      	mov	r6, r0
 8012a6e:	4604      	mov	r4, r0
 8012a70:	2500      	movs	r5, #0
 8012a72:	f846 3b04 	str.w	r3, [r6], #4
 8012a76:	22a8      	movs	r2, #168	@ 0xa8
 8012a78:	2100      	movs	r1, #0
 8012a7a:	4630      	mov	r0, r6
 8012a7c:	f00d fe54 	bl	8020728 <memset>
 8012a80:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8012a84:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8012a88:	4f16      	ldr	r7, [pc, #88]	@ (8012ae4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8012a8a:	f7ff ffdb 	bl	8012a44 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012a8e:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8012a92:	f7ff ffd7 	bl	8012a44 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012a96:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8012a9a:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8012a9e:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8012aa2:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8012aa6:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8012aaa:	490f      	ldr	r1, [pc, #60]	@ (8012ae8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8012aac:	480f      	ldr	r0, [pc, #60]	@ (8012aec <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8012aae:	f00c f91f 	bl	801ecf0 <CRC_Lock>
 8012ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8012af0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8012ab4:	b158      	cbz	r0, 8012ace <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8012ab6:	801d      	strh	r5, [r3, #0]
 8012ab8:	2300      	movs	r3, #0
 8012aba:	4a0e      	ldr	r2, [pc, #56]	@ (8012af4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8012abc:	4630      	mov	r0, r6
 8012abe:	6013      	str	r3, [r2, #0]
 8012ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8012af8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8012ac2:	603b      	str	r3, [r7, #0]
 8012ac4:	6013      	str	r3, [r2, #0]
 8012ac6:	f7ff ff2e 	bl	8012926 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8012aca:	4620      	mov	r0, r4
 8012acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ace:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8012ad2:	2002      	movs	r0, #2
 8012ad4:	801a      	strh	r2, [r3, #0]
 8012ad6:	6038      	str	r0, [r7, #0]
 8012ad8:	f001 fd7c 	bl	80145d4 <_ZN8touchgfx6Screen4drawEv>
 8012adc:	e7ec      	b.n	8012ab8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8012ade:	bf00      	nop
 8012ae0:	08023d84 	.word	0x08023d84
 8012ae4:	2402519c 	.word	0x2402519c
 8012ae8:	b5e8b5cd 	.word	0xb5e8b5cd
 8012aec:	f407a5c2 	.word	0xf407a5c2
 8012af0:	2400007c 	.word	0x2400007c
 8012af4:	240251ac 	.word	0x240251ac
 8012af8:	240251a0 	.word	0x240251a0

08012afc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8012afc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8012b00:	3b01      	subs	r3, #1
 8012b02:	b29b      	uxth	r3, r3
 8012b04:	428b      	cmp	r3, r1
 8012b06:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8012b0a:	b510      	push	{r4, lr}
 8012b0c:	d908      	bls.n	8012b20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8012b0e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8012b12:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8012b16:	681a      	ldr	r2, [r3, #0]
 8012b18:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8012b1c:	685a      	ldr	r2, [r3, #4]
 8012b1e:	6062      	str	r2, [r4, #4]
 8012b20:	bd10      	pop	{r4, pc}
	...

08012b24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8012b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b28:	b08f      	sub	sp, #60	@ 0x3c
 8012b2a:	4b8f      	ldr	r3, [pc, #572]	@ (8012d68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8012b2c:	4683      	mov	fp, r0
 8012b2e:	ac0a      	add	r4, sp, #40	@ 0x28
 8012b30:	e884 0006 	stmia.w	r4, {r1, r2}
 8012b34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012b38:	4620      	mov	r0, r4
 8012b3a:	4b8c      	ldr	r3, [pc, #560]	@ (8012d6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8012b3c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012b40:	f7ff fe0f 	bl	8012762 <_ZN8touchgfx4Rect10restrictToEss>
 8012b44:	4620      	mov	r0, r4
 8012b46:	f7fa fe26 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012b4a:	2800      	cmp	r0, #0
 8012b4c:	d16a      	bne.n	8012c24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012b4e:	9403      	str	r4, [sp, #12]
 8012b50:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8012b54:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8012b58:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8012b5c:	9301      	str	r3, [sp, #4]
 8012b5e:	35a4      	adds	r5, #164	@ 0xa4
 8012b60:	b15c      	cbz	r4, 8012b7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8012b62:	4629      	mov	r1, r5
 8012b64:	9803      	ldr	r0, [sp, #12]
 8012b66:	f7ff fe4d 	bl	8012804 <_ZNK8touchgfx4Rect8includesERKS0_>
 8012b6a:	3c01      	subs	r4, #1
 8012b6c:	b118      	cbz	r0, 8012b76 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8012b6e:	b2a1      	uxth	r1, r4
 8012b70:	9801      	ldr	r0, [sp, #4]
 8012b72:	f7ff ffc3 	bl	8012afc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012b76:	3d08      	subs	r5, #8
 8012b78:	e7f2      	b.n	8012b60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8012b7a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8012b7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012b82:	f8cd a010 	str.w	sl, [sp, #16]
 8012b86:	9302      	str	r3, [sp, #8]
 8012b88:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012b8c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8012b90:	9306      	str	r3, [sp, #24]
 8012b92:	445c      	add	r4, fp
 8012b94:	2500      	movs	r5, #0
 8012b96:	4626      	mov	r6, r4
 8012b98:	f8cd a014 	str.w	sl, [sp, #20]
 8012b9c:	462f      	mov	r7, r5
 8012b9e:	9b05      	ldr	r3, [sp, #20]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d073      	beq.n	8012c8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8012ba4:	9903      	ldr	r1, [sp, #12]
 8012ba6:	4630      	mov	r0, r6
 8012ba8:	f7ff fdb9 	bl	801271e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012bac:	b350      	cbz	r0, 8012c04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8012bae:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8012bb2:	f9b6 c000 	ldrsh.w	ip, [r6]
 8012bb6:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8012bba:	45e6      	cmp	lr, ip
 8012bbc:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8012bc0:	db33      	blt.n	8012c2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012bc2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8012bc6:	88b3      	ldrh	r3, [r6, #4]
 8012bc8:	4472      	add	r2, lr
 8012bca:	4463      	add	r3, ip
 8012bcc:	b212      	sxth	r2, r2
 8012bce:	b21b      	sxth	r3, r3
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	dc2a      	bgt.n	8012c2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012bd4:	fa1f f289 	uxth.w	r2, r9
 8012bd8:	88f3      	ldrh	r3, [r6, #6]
 8012bda:	45c8      	cmp	r8, r9
 8012bdc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8012be0:	4413      	add	r3, r2
 8012be2:	fa1f fc88 	uxth.w	ip, r8
 8012be6:	b29b      	uxth	r3, r3
 8012be8:	fa0f fe83 	sxth.w	lr, r3
 8012bec:	db0f      	blt.n	8012c0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8012bee:	eba3 030c 	sub.w	r3, r3, ip
 8012bf2:	1ac9      	subs	r1, r1, r3
 8012bf4:	b209      	sxth	r1, r1
 8012bf6:	2900      	cmp	r1, #0
 8012bf8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012bfc:	dd12      	ble.n	8012c24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012bfe:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8012c02:	4605      	mov	r5, r0
 8012c04:	9b05      	ldr	r3, [sp, #20]
 8012c06:	3e08      	subs	r6, #8
 8012c08:	3b01      	subs	r3, #1
 8012c0a:	9305      	str	r3, [sp, #20]
 8012c0c:	e7c7      	b.n	8012b9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8012c0e:	4461      	add	r1, ip
 8012c10:	b209      	sxth	r1, r1
 8012c12:	4571      	cmp	r1, lr
 8012c14:	dc38      	bgt.n	8012c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012c16:	eba2 020c 	sub.w	r2, r2, ip
 8012c1a:	b212      	sxth	r2, r2
 8012c1c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8012c20:	2a00      	cmp	r2, #0
 8012c22:	dcee      	bgt.n	8012c02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8012c24:	b00f      	add	sp, #60	@ 0x3c
 8012c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c2a:	45c8      	cmp	r8, r9
 8012c2c:	db2c      	blt.n	8012c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012c2e:	88f3      	ldrh	r3, [r6, #6]
 8012c30:	4499      	add	r9, r3
 8012c32:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8012c36:	4498      	add	r8, r3
 8012c38:	fa0f f989 	sxth.w	r9, r9
 8012c3c:	fa0f f888 	sxth.w	r8, r8
 8012c40:	45c1      	cmp	r9, r8
 8012c42:	db21      	blt.n	8012c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012c44:	fa1f f28c 	uxth.w	r2, ip
 8012c48:	88b3      	ldrh	r3, [r6, #4]
 8012c4a:	45e6      	cmp	lr, ip
 8012c4c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8012c50:	4413      	add	r3, r2
 8012c52:	fa1f f88e 	uxth.w	r8, lr
 8012c56:	b29b      	uxth	r3, r3
 8012c58:	fa0f f983 	sxth.w	r9, r3
 8012c5c:	db0a      	blt.n	8012c74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8012c5e:	eba3 0308 	sub.w	r3, r3, r8
 8012c62:	1ac9      	subs	r1, r1, r3
 8012c64:	b209      	sxth	r1, r1
 8012c66:	2900      	cmp	r1, #0
 8012c68:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8012c6c:	ddda      	ble.n	8012c24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012c6e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8012c72:	e7c6      	b.n	8012c02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8012c74:	4441      	add	r1, r8
 8012c76:	b209      	sxth	r1, r1
 8012c78:	4549      	cmp	r1, r9
 8012c7a:	dc05      	bgt.n	8012c88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012c7c:	eba2 0208 	sub.w	r2, r2, r8
 8012c80:	b212      	sxth	r2, r2
 8012c82:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8012c86:	e7cb      	b.n	8012c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8012c88:	4607      	mov	r7, r0
 8012c8a:	e7bb      	b.n	8012c04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8012c8c:	2d00      	cmp	r5, #0
 8012c8e:	d181      	bne.n	8012b94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8012c90:	2f00      	cmp	r7, #0
 8012c92:	f000 81dd 	beq.w	8013050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8012c96:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8012c9a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8012c9e:	b2b3      	uxth	r3, r6
 8012ca0:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8012ca4:	9305      	str	r3, [sp, #20]
 8012ca6:	9a05      	ldr	r2, [sp, #20]
 8012ca8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8012cac:	4413      	add	r3, r2
 8012cae:	b2ba      	uxth	r2, r7
 8012cb0:	4492      	add	sl, r2
 8012cb2:	b29b      	uxth	r3, r3
 8012cb4:	fa1f fa8a 	uxth.w	sl, sl
 8012cb8:	fa0f f883 	sxth.w	r8, r3
 8012cbc:	fa0f f98a 	sxth.w	r9, sl
 8012cc0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8012cc4:	9b04      	ldr	r3, [sp, #16]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d052      	beq.n	8012d70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8012cca:	9903      	ldr	r1, [sp, #12]
 8012ccc:	4620      	mov	r0, r4
 8012cce:	f7ff fd26 	bl	801271e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012cd2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012cd6:	b1c0      	cbz	r0, 8012d0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012cd8:	f9b4 e000 	ldrsh.w	lr, [r4]
 8012cdc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012ce0:	4576      	cmp	r6, lr
 8012ce2:	dc22      	bgt.n	8012d2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012ce4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012ce8:	44f4      	add	ip, lr
 8012cea:	fa0f fc8c 	sxth.w	ip, ip
 8012cee:	45e0      	cmp	r8, ip
 8012cf0:	db1b      	blt.n	8012d2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012cf2:	428f      	cmp	r7, r1
 8012cf4:	fa1f fc81 	uxth.w	ip, r1
 8012cf8:	88e1      	ldrh	r1, [r4, #6]
 8012cfa:	dc0d      	bgt.n	8012d18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8012cfc:	ebaa 0c0c 	sub.w	ip, sl, ip
 8012d00:	f8a4 9002 	strh.w	r9, [r4, #2]
 8012d04:	eba1 010c 	sub.w	r1, r1, ip
 8012d08:	80e1      	strh	r1, [r4, #6]
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	9904      	ldr	r1, [sp, #16]
 8012d0e:	3c08      	subs	r4, #8
 8012d10:	4605      	mov	r5, r0
 8012d12:	3901      	subs	r1, #1
 8012d14:	9104      	str	r1, [sp, #16]
 8012d16:	e7d3      	b.n	8012cc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8012d18:	4461      	add	r1, ip
 8012d1a:	b209      	sxth	r1, r1
 8012d1c:	4549      	cmp	r1, r9
 8012d1e:	dcf5      	bgt.n	8012d0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012d20:	eba2 0c0c 	sub.w	ip, r2, ip
 8012d24:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012d28:	e7ef      	b.n	8012d0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012d2a:	428f      	cmp	r7, r1
 8012d2c:	dcee      	bgt.n	8012d0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012d2e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8012d32:	4461      	add	r1, ip
 8012d34:	b209      	sxth	r1, r1
 8012d36:	4589      	cmp	r9, r1
 8012d38:	dbe8      	blt.n	8012d0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012d3a:	4576      	cmp	r6, lr
 8012d3c:	fa1f fc8e 	uxth.w	ip, lr
 8012d40:	88a1      	ldrh	r1, [r4, #4]
 8012d42:	dc07      	bgt.n	8012d54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8012d44:	eba3 0c0c 	sub.w	ip, r3, ip
 8012d48:	f8a4 8000 	strh.w	r8, [r4]
 8012d4c:	eba1 010c 	sub.w	r1, r1, ip
 8012d50:	80a1      	strh	r1, [r4, #4]
 8012d52:	e7da      	b.n	8012d0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012d54:	4461      	add	r1, ip
 8012d56:	b209      	sxth	r1, r1
 8012d58:	4588      	cmp	r8, r1
 8012d5a:	dbd7      	blt.n	8012d0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012d5c:	9905      	ldr	r1, [sp, #20]
 8012d5e:	eba1 0c0c 	sub.w	ip, r1, ip
 8012d62:	f8a4 c004 	strh.w	ip, [r4, #4]
 8012d66:	e7d0      	b.n	8012d0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012d68:	2402514e 	.word	0x2402514e
 8012d6c:	2402514c 	.word	0x2402514c
 8012d70:	2d00      	cmp	r5, #0
 8012d72:	f000 816d 	beq.w	8013050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8012d76:	9b06      	ldr	r3, [sp, #24]
 8012d78:	445b      	add	r3, fp
 8012d7a:	461c      	mov	r4, r3
 8012d7c:	9b02      	ldr	r3, [sp, #8]
 8012d7e:	3301      	adds	r3, #1
 8012d80:	f000 8166 	beq.w	8013050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8012d84:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 8012d88:	9803      	ldr	r0, [sp, #12]
 8012d8a:	4629      	mov	r1, r5
 8012d8c:	f7ff fd3a 	bl	8012804 <_ZNK8touchgfx4Rect8includesERKS0_>
 8012d90:	b120      	cbz	r0, 8012d9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8012d92:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8012d96:	9801      	ldr	r0, [sp, #4]
 8012d98:	f7ff feb0 	bl	8012afc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012d9c:	9903      	ldr	r1, [sp, #12]
 8012d9e:	4628      	mov	r0, r5
 8012da0:	f7ff fcbd 	bl	801271e <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012da4:	2800      	cmp	r0, #0
 8012da6:	f000 809c 	beq.w	8012ee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8012daa:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 8012dae:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8012db2:	fa1f f189 	uxth.w	r1, r9
 8012db6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8012dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8012dbc:	eb01 0c03 	add.w	ip, r1, r3
 8012dc0:	b283      	uxth	r3, r0
 8012dc2:	4548      	cmp	r0, r9
 8012dc4:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8012dc8:	fa1f fa8c 	uxth.w	sl, ip
 8012dcc:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8012dd0:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8012dd4:	eb03 050c 	add.w	r5, r3, ip
 8012dd8:	b2ad      	uxth	r5, r5
 8012dda:	9505      	str	r5, [sp, #20]
 8012ddc:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8012de0:	9504      	str	r5, [sp, #16]
 8012de2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8012de6:	f340 8099 	ble.w	8012f1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8012dea:	1a5b      	subs	r3, r3, r1
 8012dec:	4596      	cmp	lr, r2
 8012dee:	fa0f f08a 	sxth.w	r0, sl
 8012df2:	b29b      	uxth	r3, r3
 8012df4:	b21e      	sxth	r6, r3
 8012df6:	dd2e      	ble.n	8012e56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8012df8:	9f02      	ldr	r7, [sp, #8]
 8012dfa:	fa1f fe8e 	uxth.w	lr, lr
 8012dfe:	b292      	uxth	r2, r2
 8012e00:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8012e04:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8012e08:	9f04      	ldr	r7, [sp, #16]
 8012e0a:	ebae 0102 	sub.w	r1, lr, r2
 8012e0e:	44a6      	add	lr, r4
 8012e10:	1a3f      	subs	r7, r7, r0
 8012e12:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8012e16:	b289      	uxth	r1, r1
 8012e18:	4402      	add	r2, r0
 8012e1a:	fa0f fe8e 	sxth.w	lr, lr
 8012e1e:	b20d      	sxth	r5, r1
 8012e20:	b212      	sxth	r2, r2
 8012e22:	436f      	muls	r7, r5
 8012e24:	ebae 0202 	sub.w	r2, lr, r2
 8012e28:	4372      	muls	r2, r6
 8012e2a:	4297      	cmp	r7, r2
 8012e2c:	db09      	blt.n	8012e42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8012e2e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8012e32:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8012e36:	449c      	add	ip, r3
 8012e38:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8012e3c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8012e40:	e686      	b.n	8012b50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012e42:	4421      	add	r1, r4
 8012e44:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8012e48:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8012e4c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012e50:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8012e54:	e67c      	b.n	8012b50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012e56:	9f04      	ldr	r7, [sp, #16]
 8012e58:	42b8      	cmp	r0, r7
 8012e5a:	da27      	bge.n	8012eac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8012e5c:	9902      	ldr	r1, [sp, #8]
 8012e5e:	1a3f      	subs	r7, r7, r0
 8012e60:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8012e64:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8012e68:	eb05 010e 	add.w	r1, r5, lr
 8012e6c:	fa1f f881 	uxth.w	r8, r1
 8012e70:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8012e74:	4411      	add	r1, r2
 8012e76:	fa0f f988 	sxth.w	r9, r8
 8012e7a:	eba2 020e 	sub.w	r2, r2, lr
 8012e7e:	eba1 0108 	sub.w	r1, r1, r8
 8012e82:	4372      	muls	r2, r6
 8012e84:	b289      	uxth	r1, r1
 8012e86:	fa0f f881 	sxth.w	r8, r1
 8012e8a:	fb08 f707 	mul.w	r7, r8, r7
 8012e8e:	42ba      	cmp	r2, r7
 8012e90:	dc06      	bgt.n	8012ea0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8012e92:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8012e96:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8012e9a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8012e9e:	e7ca      	b.n	8012e36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8012ea0:	4429      	add	r1, r5
 8012ea2:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8012ea6:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012eaa:	e651      	b.n	8012b50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012eac:	9805      	ldr	r0, [sp, #20]
 8012eae:	2d06      	cmp	r5, #6
 8012eb0:	ebaa 0000 	sub.w	r0, sl, r0
 8012eb4:	b280      	uxth	r0, r0
 8012eb6:	fa0f fe80 	sxth.w	lr, r0
 8012eba:	d817      	bhi.n	8012eec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8012ebc:	9b04      	ldr	r3, [sp, #16]
 8012ebe:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8012ec2:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8012ec6:	1c6b      	adds	r3, r5, #1
 8012ec8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8012ecc:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8012ed0:	9b01      	ldr	r3, [sp, #4]
 8012ed2:	9801      	ldr	r0, [sp, #4]
 8012ed4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012ed8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8012edc:	805a      	strh	r2, [r3, #2]
 8012ede:	809e      	strh	r6, [r3, #4]
 8012ee0:	80d9      	strh	r1, [r3, #6]
 8012ee2:	9b02      	ldr	r3, [sp, #8]
 8012ee4:	3c08      	subs	r4, #8
 8012ee6:	3b01      	subs	r3, #1
 8012ee8:	9302      	str	r3, [sp, #8]
 8012eea:	e747      	b.n	8012d7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8012eec:	9a02      	ldr	r2, [sp, #8]
 8012eee:	45b6      	cmp	lr, r6
 8012ef0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012ef4:	db0d      	blt.n	8012f12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8012ef6:	449c      	add	ip, r3
 8012ef8:	445a      	add	r2, fp
 8012efa:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8012efe:	fa1f fc8c 	uxth.w	ip, ip
 8012f02:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8012f06:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8012f0a:	448c      	add	ip, r1
 8012f0c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8012f10:	e61e      	b.n	8012b50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012f12:	445a      	add	r2, fp
 8012f14:	4484      	add	ip, r0
 8012f16:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8012f1a:	e78f      	b.n	8012e3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012f1c:	fa1f f18e 	uxth.w	r1, lr
 8012f20:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8012f24:	b293      	uxth	r3, r2
 8012f26:	4596      	cmp	lr, r2
 8012f28:	eb01 0806 	add.w	r8, r1, r6
 8012f2c:	9306      	str	r3, [sp, #24]
 8012f2e:	fa1f f888 	uxth.w	r8, r8
 8012f32:	9f06      	ldr	r7, [sp, #24]
 8012f34:	fa0f f388 	sxth.w	r3, r8
 8012f38:	9307      	str	r3, [sp, #28]
 8012f3a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8012f3e:	443b      	add	r3, r7
 8012f40:	b29b      	uxth	r3, r3
 8012f42:	9308      	str	r3, [sp, #32]
 8012f44:	da24      	bge.n	8012f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8012f46:	9905      	ldr	r1, [sp, #20]
 8012f48:	eba3 0308 	sub.w	r3, r3, r8
 8012f4c:	eba2 020e 	sub.w	r2, r2, lr
 8012f50:	eba9 0000 	sub.w	r0, r9, r0
 8012f54:	ebaa 0401 	sub.w	r4, sl, r1
 8012f58:	b29b      	uxth	r3, r3
 8012f5a:	b2a4      	uxth	r4, r4
 8012f5c:	b219      	sxth	r1, r3
 8012f5e:	b225      	sxth	r5, r4
 8012f60:	4348      	muls	r0, r1
 8012f62:	436a      	muls	r2, r5
 8012f64:	4282      	cmp	r2, r0
 8012f66:	9a02      	ldr	r2, [sp, #8]
 8012f68:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012f6c:	445a      	add	r2, fp
 8012f6e:	dc06      	bgt.n	8012f7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8012f70:	9b07      	ldr	r3, [sp, #28]
 8012f72:	44a4      	add	ip, r4
 8012f74:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8012f78:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8012f7c:	e75e      	b.n	8012e3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012f7e:	9904      	ldr	r1, [sp, #16]
 8012f80:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8012f84:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8012f88:	4433      	add	r3, r6
 8012f8a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8012f8e:	e5df      	b.n	8012b50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012f90:	9f06      	ldr	r7, [sp, #24]
 8012f92:	9b04      	ldr	r3, [sp, #16]
 8012f94:	1bc9      	subs	r1, r1, r7
 8012f96:	fa0f f78a 	sxth.w	r7, sl
 8012f9a:	b289      	uxth	r1, r1
 8012f9c:	429f      	cmp	r7, r3
 8012f9e:	fa0f fe81 	sxth.w	lr, r1
 8012fa2:	dd23      	ble.n	8012fec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8012fa4:	9a05      	ldr	r2, [sp, #20]
 8012fa6:	eba9 0000 	sub.w	r0, r9, r0
 8012faa:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8012fae:	ebaa 0202 	sub.w	r2, sl, r2
 8012fb2:	9d07      	ldr	r5, [sp, #28]
 8012fb4:	fb0e f000 	mul.w	r0, lr, r0
 8012fb8:	b292      	uxth	r2, r2
 8012fba:	eba5 0a03 	sub.w	sl, r5, r3
 8012fbe:	9b02      	ldr	r3, [sp, #8]
 8012fc0:	b214      	sxth	r4, r2
 8012fc2:	00db      	lsls	r3, r3, #3
 8012fc4:	fb04 fa0a 	mul.w	sl, r4, sl
 8012fc8:	445b      	add	r3, fp
 8012fca:	4550      	cmp	r0, sl
 8012fcc:	db03      	blt.n	8012fd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8012fce:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8012fd2:	4494      	add	ip, r2
 8012fd4:	e732      	b.n	8012e3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012fd6:	9a04      	ldr	r2, [sp, #16]
 8012fd8:	4431      	add	r1, r6
 8012fda:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8012fde:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8012fe2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8012fe6:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8012fea:	e75c      	b.n	8012ea6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8012fec:	9b08      	ldr	r3, [sp, #32]
 8012fee:	2d06      	cmp	r5, #6
 8012ff0:	eba3 0308 	sub.w	r3, r3, r8
 8012ff4:	b29b      	uxth	r3, r3
 8012ff6:	b218      	sxth	r0, r3
 8012ff8:	d813      	bhi.n	8013022 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8012ffa:	9b07      	ldr	r3, [sp, #28]
 8012ffc:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8013000:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8013004:	1c6b      	adds	r3, r5, #1
 8013006:	9901      	ldr	r1, [sp, #4]
 8013008:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801300c:	9b01      	ldr	r3, [sp, #4]
 801300e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8013012:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013016:	805a      	strh	r2, [r3, #2]
 8013018:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801301a:	f8a3 e006 	strh.w	lr, [r3, #6]
 801301e:	809a      	strh	r2, [r3, #4]
 8013020:	e75f      	b.n	8012ee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8013022:	9c02      	ldr	r4, [sp, #8]
 8013024:	4570      	cmp	r0, lr
 8013026:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801302a:	db0d      	blt.n	8013048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801302c:	4431      	add	r1, r6
 801302e:	9b06      	ldr	r3, [sp, #24]
 8013030:	445c      	add	r4, fp
 8013032:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8013036:	b289      	uxth	r1, r1
 8013038:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801303c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8013040:	4419      	add	r1, r3
 8013042:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8013046:	e583      	b.n	8012b50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013048:	445c      	add	r4, fp
 801304a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801304e:	e79b      	b.n	8012f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8013050:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8013054:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8013058:	1e65      	subs	r5, r4, #1
 801305a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801305e:	b2ad      	uxth	r5, r5
 8013060:	42b5      	cmp	r5, r6
 8013062:	d044      	beq.n	80130ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8013064:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8013068:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801306c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8013070:	4282      	cmp	r2, r0
 8013072:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8013076:	d11f      	bne.n	80130b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8013078:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801307c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8013080:	459c      	cmp	ip, r3
 8013082:	d119      	bne.n	80130b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8013084:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8013088:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801308c:	19d8      	adds	r0, r3, r7
 801308e:	b200      	sxth	r0, r0
 8013090:	4288      	cmp	r0, r1
 8013092:	d109      	bne.n	80130a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8013094:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8013098:	4413      	add	r3, r2
 801309a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801309e:	4629      	mov	r1, r5
 80130a0:	9801      	ldr	r0, [sp, #4]
 80130a2:	f7ff fd2b 	bl	8012afc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80130a6:	e003      	b.n	80130b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80130a8:	4411      	add	r1, r2
 80130aa:	b209      	sxth	r1, r1
 80130ac:	42b9      	cmp	r1, r7
 80130ae:	d0f3      	beq.n	8013098 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 80130b0:	3d01      	subs	r5, #1
 80130b2:	3c08      	subs	r4, #8
 80130b4:	b2ad      	uxth	r5, r5
 80130b6:	e7d3      	b.n	8013060 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 80130b8:	42b9      	cmp	r1, r7
 80130ba:	d1f9      	bne.n	80130b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80130bc:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 80130c0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80130c4:	4299      	cmp	r1, r3
 80130c6:	d1f3      	bne.n	80130b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80130c8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80130cc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 80130d0:	181f      	adds	r7, r3, r0
 80130d2:	b23f      	sxth	r7, r7
 80130d4:	42ba      	cmp	r2, r7
 80130d6:	d105      	bne.n	80130e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 80130d8:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 80130dc:	440b      	add	r3, r1
 80130de:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80130e2:	e7dc      	b.n	801309e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 80130e4:	440a      	add	r2, r1
 80130e6:	b212      	sxth	r2, r2
 80130e8:	4290      	cmp	r0, r2
 80130ea:	d1e1      	bne.n	80130b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80130ec:	e7f6      	b.n	80130dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 80130ee:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 80130f2:	2e07      	cmp	r6, #7
 80130f4:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80130f8:	d812      	bhi.n	8013120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 80130fa:	1c75      	adds	r5, r6, #1
 80130fc:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8013100:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8013104:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8013108:	9d01      	ldr	r5, [sp, #4]
 801310a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801310e:	442c      	add	r4, r5
 8013110:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8013114:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8013118:	8061      	strh	r1, [r4, #2]
 801311a:	80a2      	strh	r2, [r4, #4]
 801311c:	80e3      	strh	r3, [r4, #6]
 801311e:	e581      	b.n	8012c24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013120:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8013124:	3e01      	subs	r6, #1
 8013126:	445c      	add	r4, fp
 8013128:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801312c:	f04f 37ff 	mov.w	r7, #4294967295
 8013130:	2500      	movs	r5, #0
 8013132:	9305      	str	r3, [sp, #20]
 8013134:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8013138:	1e72      	subs	r2, r6, #1
 801313a:	9302      	str	r3, [sp, #8]
 801313c:	4691      	mov	r9, r2
 801313e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8013142:	9304      	str	r3, [sp, #16]
 8013144:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8013148:	f1b9 3fff 	cmp.w	r9, #4294967295
 801314c:	6818      	ldr	r0, [r3, #0]
 801314e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8013152:	9207      	str	r2, [sp, #28]
 8013154:	bf16      	itet	ne
 8013156:	9905      	ldrne	r1, [sp, #20]
 8013158:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801315c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8013160:	9306      	str	r3, [sp, #24]
 8013162:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8013166:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801316a:	fb18 f801 	smulbb	r8, r8, r1
 801316e:	6859      	ldr	r1, [r3, #4]
 8013170:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013174:	4671      	mov	r1, lr
 8013176:	a80c      	add	r0, sp, #48	@ 0x30
 8013178:	f7ff fb6a 	bl	8012850 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801317c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8013180:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8013184:	f04f 0c08 	mov.w	ip, #8
 8013188:	9b04      	ldr	r3, [sp, #16]
 801318a:	9a02      	ldr	r2, [sp, #8]
 801318c:	fb10 f001 	smulbb	r0, r0, r1
 8013190:	fb02 8803 	mla	r8, r2, r3, r8
 8013194:	eba0 0108 	sub.w	r1, r0, r8
 8013198:	fb90 f0fc 	sdiv	r0, r0, ip
 801319c:	4288      	cmp	r0, r1
 801319e:	dc20      	bgt.n	80131e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 80131a0:	4551      	cmp	r1, sl
 80131a2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80131a6:	da03      	bge.n	80131b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 80131a8:	b1d9      	cbz	r1, 80131e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 80131aa:	468a      	mov	sl, r1
 80131ac:	464f      	mov	r7, r9
 80131ae:	4635      	mov	r5, r6
 80131b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80131b4:	f119 0f02 	cmn.w	r9, #2
 80131b8:	d1c6      	bne.n	8013148 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 80131ba:	4616      	mov	r6, r2
 80131bc:	3201      	adds	r2, #1
 80131be:	f1a4 0408 	sub.w	r4, r4, #8
 80131c2:	d1b7      	bne.n	8013134 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 80131c4:	9b01      	ldr	r3, [sp, #4]
 80131c6:	b2ac      	uxth	r4, r5
 80131c8:	00ed      	lsls	r5, r5, #3
 80131ca:	1958      	adds	r0, r3, r5
 80131cc:	1c7b      	adds	r3, r7, #1
 80131ce:	d10b      	bne.n	80131e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 80131d0:	4601      	mov	r1, r0
 80131d2:	9803      	ldr	r0, [sp, #12]
 80131d4:	f7ff fb3c 	bl	8012850 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80131d8:	4621      	mov	r1, r4
 80131da:	9801      	ldr	r0, [sp, #4]
 80131dc:	f7ff fc8e 	bl	8012afc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80131e0:	e4b6      	b.n	8012b50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80131e2:	464f      	mov	r7, r9
 80131e4:	4635      	mov	r5, r6
 80131e6:	e7ed      	b.n	80131c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 80131e8:	9b01      	ldr	r3, [sp, #4]
 80131ea:	00ff      	lsls	r7, r7, #3
 80131ec:	445d      	add	r5, fp
 80131ee:	19d9      	adds	r1, r3, r7
 80131f0:	445f      	add	r7, fp
 80131f2:	f7ff fb2d 	bl	8012850 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80131f6:	9b03      	ldr	r3, [sp, #12]
 80131f8:	cb03      	ldmia	r3!, {r0, r1}
 80131fa:	9b03      	ldr	r3, [sp, #12]
 80131fc:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8013200:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8013204:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8013208:	6869      	ldr	r1, [r5, #4]
 801320a:	c303      	stmia	r3!, {r0, r1}
 801320c:	e7e4      	b.n	80131d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801320e:	bf00      	nop

08013210 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8013210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013214:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8013218:	b09b      	sub	sp, #108	@ 0x6c
 801321a:	4604      	mov	r4, r0
 801321c:	4630      	mov	r0, r6
 801321e:	f7fa faba 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013222:	4605      	mov	r5, r0
 8013224:	b948      	cbnz	r0, 801323a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8013226:	6823      	ldr	r3, [r4, #0]
 8013228:	4620      	mov	r0, r4
 801322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801322c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8013230:	4798      	blx	r3
 8013232:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8013236:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801323a:	4bc5      	ldr	r3, [pc, #788]	@ (8013550 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d03f      	beq.n	80132c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8013242:	4dc4      	ldr	r5, [pc, #784]	@ (8013554 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8013244:	4628      	mov	r0, r5
 8013246:	f7fa faa6 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 801324a:	4606      	mov	r6, r0
 801324c:	2800      	cmp	r0, #0
 801324e:	d138      	bne.n	80132c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8013250:	4628      	mov	r0, r5
 8013252:	f7ff f991 	bl	8012578 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8013256:	6823      	ldr	r3, [r4, #0]
 8013258:	6829      	ldr	r1, [r5, #0]
 801325a:	4620      	mov	r0, r4
 801325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801325e:	686a      	ldr	r2, [r5, #4]
 8013260:	4798      	blx	r3
 8013262:	802e      	strh	r6, [r5, #0]
 8013264:	806e      	strh	r6, [r5, #2]
 8013266:	80ae      	strh	r6, [r5, #4]
 8013268:	80ee      	strh	r6, [r5, #6]
 801326a:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801326e:	4dba      	ldr	r5, [pc, #744]	@ (8013558 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8013270:	4640      	mov	r0, r8
 8013272:	f7ff fbe7 	bl	8012a44 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013276:	882e      	ldrh	r6, [r5, #0]
 8013278:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801327c:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8013280:	4633      	mov	r3, r6
 8013282:	42bb      	cmp	r3, r7
 8013284:	d224      	bcs.n	80132d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8013286:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801328a:	2907      	cmp	r1, #7
 801328c:	d816      	bhi.n	80132bc <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801328e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8013292:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8013296:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801329a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801329e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80132a2:	1c4a      	adds	r2, r1, #1
 80132a4:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 80132a8:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 80132ac:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 80132b0:	f8a2 a002 	strh.w	sl, [r2, #2]
 80132b4:	f8a2 e004 	strh.w	lr, [r2, #4]
 80132b8:	f8a2 c006 	strh.w	ip, [r2, #6]
 80132bc:	3301      	adds	r3, #1
 80132be:	b29b      	uxth	r3, r3
 80132c0:	e7df      	b.n	8013282 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 80132c2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d1cf      	bne.n	801326a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 80132ca:	b01b      	add	sp, #108	@ 0x6c
 80132cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132d0:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 80132d4:	42b3      	cmp	r3, r6
 80132d6:	d90c      	bls.n	80132f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 80132d8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80132dc:	6822      	ldr	r2, [r4, #0]
 80132de:	3601      	adds	r6, #1
 80132e0:	4620      	mov	r0, r4
 80132e2:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 80132e4:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 80132e8:	b2b6      	uxth	r6, r6
 80132ea:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 80132ee:	47b8      	blx	r7
 80132f0:	e7ee      	b.n	80132d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80132f2:	4a9a      	ldr	r2, [pc, #616]	@ (801355c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80132f4:	6813      	ldr	r3, [r2, #0]
 80132f6:	4691      	mov	r9, r2
 80132f8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80132fc:	2b01      	cmp	r3, #1
 80132fe:	f040 80e0 	bne.w	80134c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 8013302:	8829      	ldrh	r1, [r5, #0]
 8013304:	2600      	movs	r6, #0
 8013306:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801330a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801330e:	33ae      	adds	r3, #174	@ 0xae
 8013310:	428f      	cmp	r7, r1
 8013312:	f103 0308 	add.w	r3, r3, #8
 8013316:	dd0a      	ble.n	801332e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8013318:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801331c:	3101      	adds	r1, #1
 801331e:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8013322:	4402      	add	r2, r0
 8013324:	b212      	sxth	r2, r2
 8013326:	4296      	cmp	r6, r2
 8013328:	bfb8      	it	lt
 801332a:	4616      	movlt	r6, r2
 801332c:	e7f0      	b.n	8013310 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801332e:	4b8c      	ldr	r3, [pc, #560]	@ (8013560 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8013330:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 801355c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8013334:	881b      	ldrh	r3, [r3, #0]
 8013336:	2b0f      	cmp	r3, #15
 8013338:	bf8c      	ite	hi
 801333a:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801333e:	f04f 0b01 	movls.w	fp, #1
 8013342:	2300      	movs	r3, #0
 8013344:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8013348:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801334c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8013350:	4b82      	ldr	r3, [pc, #520]	@ (801355c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8013352:	4438      	add	r0, r7
 8013354:	b207      	sxth	r7, r0
 8013356:	6818      	ldr	r0, [r3, #0]
 8013358:	42b7      	cmp	r7, r6
 801335a:	6803      	ldr	r3, [r0, #0]
 801335c:	f280 8083 	bge.w	8013466 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8013360:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013364:	4798      	blx	r3
 8013366:	eb07 030b 	add.w	r3, r7, fp
 801336a:	4298      	cmp	r0, r3
 801336c:	da07      	bge.n	801337e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801336e:	42b0      	cmp	r0, r6
 8013370:	da05      	bge.n	801337e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8013372:	4287      	cmp	r7, r0
 8013374:	dd6c      	ble.n	8013450 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8013376:	2f00      	cmp	r7, #0
 8013378:	dd6a      	ble.n	8013450 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801337a:	4630      	mov	r0, r6
 801337c:	e004      	b.n	8013388 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801337e:	4287      	cmp	r7, r0
 8013380:	dcfb      	bgt.n	801337a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 8013382:	42b0      	cmp	r0, r6
 8013384:	bfa8      	it	ge
 8013386:	4630      	movge	r0, r6
 8013388:	4b76      	ldr	r3, [pc, #472]	@ (8013564 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801338a:	1bc0      	subs	r0, r0, r7
 801338c:	2200      	movs	r2, #0
 801338e:	f8ad 7016 	strh.w	r7, [sp, #22]
 8013392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013396:	882f      	ldrh	r7, [r5, #0]
 8013398:	f8ad 2014 	strh.w	r2, [sp, #20]
 801339c:	f8ad 3018 	strh.w	r3, [sp, #24]
 80133a0:	f8ad 001a 	strh.w	r0, [sp, #26]
 80133a4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80133a8:	42bb      	cmp	r3, r7
 80133aa:	d9cd      	bls.n	8013348 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 80133ac:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80133b0:	ab07      	add	r3, sp, #28
 80133b2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80133b6:	6851      	ldr	r1, [r2, #4]
 80133b8:	c303      	stmia	r3!, {r0, r1}
 80133ba:	a905      	add	r1, sp, #20
 80133bc:	a807      	add	r0, sp, #28
 80133be:	f7ff f9ae 	bl	801271e <_ZNK8touchgfx4Rect9intersectERKS0_>
 80133c2:	2800      	cmp	r0, #0
 80133c4:	d04c      	beq.n	8013460 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 80133c6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80133ca:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80133ce:	f8bd a020 	ldrh.w	sl, [sp, #32]
 80133d2:	4686      	mov	lr, r0
 80133d4:	4290      	cmp	r0, r2
 80133d6:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80133da:	4450      	add	r0, sl
 80133dc:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80133e0:	bfb8      	it	lt
 80133e2:	4696      	movlt	lr, r2
 80133e4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80133e8:	4452      	add	r2, sl
 80133ea:	b280      	uxth	r0, r0
 80133ec:	4299      	cmp	r1, r3
 80133ee:	468c      	mov	ip, r1
 80133f0:	b292      	uxth	r2, r2
 80133f2:	9302      	str	r3, [sp, #8]
 80133f4:	bfb8      	it	lt
 80133f6:	469c      	movlt	ip, r3
 80133f8:	b203      	sxth	r3, r0
 80133fa:	fa0f fa82 	sxth.w	sl, r2
 80133fe:	f8ad e01c 	strh.w	lr, [sp, #28]
 8013402:	f8ad c01e 	strh.w	ip, [sp, #30]
 8013406:	4553      	cmp	r3, sl
 8013408:	bfb8      	it	lt
 801340a:	4602      	movlt	r2, r0
 801340c:	9b02      	ldr	r3, [sp, #8]
 801340e:	eba2 020e 	sub.w	r2, r2, lr
 8013412:	f8ad 2020 	strh.w	r2, [sp, #32]
 8013416:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801341a:	4411      	add	r1, r2
 801341c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8013420:	4413      	add	r3, r2
 8013422:	b289      	uxth	r1, r1
 8013424:	b29b      	uxth	r3, r3
 8013426:	b208      	sxth	r0, r1
 8013428:	b21a      	sxth	r2, r3
 801342a:	4290      	cmp	r0, r2
 801342c:	bfb8      	it	lt
 801342e:	460b      	movlt	r3, r1
 8013430:	eba3 030c 	sub.w	r3, r3, ip
 8013434:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013438:	a807      	add	r0, sp, #28
 801343a:	f7fa f9ac 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 801343e:	b920      	cbnz	r0, 801344a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8013440:	6823      	ldr	r3, [r4, #0]
 8013442:	a907      	add	r1, sp, #28
 8013444:	4620      	mov	r0, r4
 8013446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013448:	4798      	blx	r3
 801344a:	3701      	adds	r7, #1
 801344c:	b2bf      	uxth	r7, r7
 801344e:	e7a9      	b.n	80133a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8013450:	f8d9 0000 	ldr.w	r0, [r9]
 8013454:	2101      	movs	r1, #1
 8013456:	6803      	ldr	r3, [r0, #0]
 8013458:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801345c:	4798      	blx	r3
 801345e:	e773      	b.n	8013348 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8013460:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8013464:	e7e8      	b.n	8013438 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8013466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013468:	4798      	blx	r3
 801346a:	4b3f      	ldr	r3, [pc, #252]	@ (8013568 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801346c:	781b      	ldrb	r3, [r3, #0]
 801346e:	2b00      	cmp	r3, #0
 8013470:	f43f af2b 	beq.w	80132ca <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8013474:	2300      	movs	r3, #0
 8013476:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801347a:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801347e:	882b      	ldrh	r3, [r5, #0]
 8013480:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8013484:	42ab      	cmp	r3, r5
 8013486:	f4bf af20 	bcs.w	80132ca <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801348a:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801348e:	2907      	cmp	r1, #7
 8013490:	d814      	bhi.n	80134bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 8013492:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8013496:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801349a:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801349e:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 80134a2:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80134a6:	1c4a      	adds	r2, r1, #1
 80134a8:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 80134ac:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80134b0:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 80134b4:	f8a2 c002 	strh.w	ip, [r2, #2]
 80134b8:	8097      	strh	r7, [r2, #4]
 80134ba:	80d6      	strh	r6, [r2, #6]
 80134bc:	3301      	adds	r3, #1
 80134be:	b29b      	uxth	r3, r3
 80134c0:	e7e0      	b.n	8013484 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 80134c2:	2b02      	cmp	r3, #2
 80134c4:	f040 8133 	bne.w	801372e <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 80134c8:	4b28      	ldr	r3, [pc, #160]	@ (801356c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80134ca:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 80134ce:	781b      	ldrb	r3, [r3, #0]
 80134d0:	2b01      	cmp	r3, #1
 80134d2:	f000 8098 	beq.w	8013606 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80134d6:	882a      	ldrh	r2, [r5, #0]
 80134d8:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 80134dc:	3201      	adds	r2, #1
 80134de:	b292      	uxth	r2, r2
 80134e0:	2900      	cmp	r1, #0
 80134e2:	d0c2      	beq.n	801346a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80134e4:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 80134e8:	4694      	mov	ip, r2
 80134ea:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 80134ee:	f04f 0900 	mov.w	r9, #0
 80134f2:	441e      	add	r6, r3
 80134f4:	b236      	sxth	r6, r6
 80134f6:	fa1f f38c 	uxth.w	r3, ip
 80134fa:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 80134fe:	4299      	cmp	r1, r3
 8013500:	f240 80be 	bls.w	8013680 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8013504:	4427      	add	r7, r4
 8013506:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801350a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801350e:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8013512:	4283      	cmp	r3, r0
 8013514:	f340 80a0 	ble.w	8013658 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8013518:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801351c:	46e1      	mov	r9, ip
 801351e:	4406      	add	r6, r0
 8013520:	b236      	sxth	r6, r6
 8013522:	429e      	cmp	r6, r3
 8013524:	bfa8      	it	ge
 8013526:	461e      	movge	r6, r3
 8013528:	f10c 0c01 	add.w	ip, ip, #1
 801352c:	e7e3      	b.n	80134f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801352e:	d10a      	bne.n	8013546 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8013530:	4562      	cmp	r2, ip
 8013532:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 8013536:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801353a:	bfb8      	it	lt
 801353c:	4662      	movlt	r2, ip
 801353e:	4288      	cmp	r0, r1
 8013540:	bfb8      	it	lt
 8013542:	461f      	movlt	r7, r3
 8013544:	e086      	b.n	8013654 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8013546:	428a      	cmp	r2, r1
 8013548:	bfb8      	it	lt
 801354a:	460a      	movlt	r2, r1
 801354c:	e082      	b.n	8013654 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801354e:	bf00      	nop
 8013550:	24025198 	.word	0x24025198
 8013554:	240251a4 	.word	0x240251a4
 8013558:	2400007c 	.word	0x2400007c
 801355c:	24025158 	.word	0x24025158
 8013560:	2402514e 	.word	0x2402514e
 8013564:	2402514c 	.word	0x2402514c
 8013568:	24025156 	.word	0x24025156
 801356c:	24025150 	.word	0x24025150
 8013570:	19a1      	adds	r1, r4, r6
 8013572:	ab07      	add	r3, sp, #28
 8013574:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8013578:	6849      	ldr	r1, [r1, #4]
 801357a:	c303      	stmia	r3!, {r0, r1}
 801357c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8013580:	a807      	add	r0, sp, #28
 8013582:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013586:	2b13      	cmp	r3, #19
 8013588:	440b      	add	r3, r1
 801358a:	bfd8      	it	le
 801358c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8013590:	1a9b      	subs	r3, r3, r2
 8013592:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013596:	f8ad 3020 	strh.w	r3, [sp, #32]
 801359a:	f7ff f807 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801359e:	a807      	add	r0, sp, #28
 80135a0:	f7fa f8f9 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 80135a4:	bb78      	cbnz	r0, 8013606 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80135a6:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 80135aa:	4426      	add	r6, r4
 80135ac:	f8d9 0000 	ldr.w	r0, [r9]
 80135b0:	f1bc 0f14 	cmp.w	ip, #20
 80135b4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80135b8:	f8d0 e000 	ldr.w	lr, [r0]
 80135bc:	bfa8      	it	ge
 80135be:	f04f 0c14 	movge.w	ip, #20
 80135c2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80135c6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80135ca:	fa1f fc8c 	uxth.w	ip, ip
 80135ce:	f8cd c000 	str.w	ip, [sp]
 80135d2:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 80135d6:	47d8      	blx	fp
 80135d8:	4683      	mov	fp, r0
 80135da:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80135de:	a807      	add	r0, sp, #28
 80135e0:	f7fe ffca 	bl	8012578 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80135e4:	6823      	ldr	r3, [r4, #0]
 80135e6:	4620      	mov	r0, r4
 80135e8:	a907      	add	r1, sp, #28
 80135ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80135ec:	4798      	blx	r3
 80135ee:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 80135f2:	eba0 000b 	sub.w	r0, r0, fp
 80135f6:	b200      	sxth	r0, r0
 80135f8:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 80135fc:	b918      	cbnz	r0, 8013606 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80135fe:	b2b9      	uxth	r1, r7
 8013600:	4650      	mov	r0, sl
 8013602:	f7ff fa7b 	bl	8012afc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013606:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801360a:	f1bb 0f00 	cmp.w	fp, #0
 801360e:	f43f af2c 	beq.w	801346a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8013612:	882b      	ldrh	r3, [r5, #0]
 8013614:	2700      	movs	r7, #0
 8013616:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801361a:	3301      	adds	r3, #1
 801361c:	b29b      	uxth	r3, r3
 801361e:	b299      	uxth	r1, r3
 8013620:	00fe      	lsls	r6, r7, #3
 8013622:	458b      	cmp	fp, r1
 8013624:	d9a4      	bls.n	8013570 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8013626:	4426      	add	r6, r4
 8013628:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801362c:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 8013630:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8013634:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8013638:	4408      	add	r0, r1
 801363a:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801363e:	4461      	add	r1, ip
 8013640:	b200      	sxth	r0, r0
 8013642:	b209      	sxth	r1, r1
 8013644:	4288      	cmp	r0, r1
 8013646:	f6bf af72 	bge.w	801352e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801364a:	4584      	cmp	ip, r0
 801364c:	4662      	mov	r2, ip
 801364e:	461f      	mov	r7, r3
 8013650:	bfb8      	it	lt
 8013652:	4602      	movlt	r2, r0
 8013654:	3301      	adds	r3, #1
 8013656:	e7e2      	b.n	801361e <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8013658:	d10e      	bne.n	8013678 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801365a:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801365e:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8013662:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8013666:	4473      	add	r3, lr
 8013668:	b21b      	sxth	r3, r3
 801366a:	429e      	cmp	r6, r3
 801366c:	bfa8      	it	ge
 801366e:	461e      	movge	r6, r3
 8013670:	4287      	cmp	r7, r0
 8013672:	bfb8      	it	lt
 8013674:	46e1      	movlt	r9, ip
 8013676:	e757      	b.n	8013528 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8013678:	4286      	cmp	r6, r0
 801367a:	bfa8      	it	ge
 801367c:	4606      	movge	r6, r0
 801367e:	e753      	b.n	8013528 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8013680:	eb0a 0007 	add.w	r0, sl, r7
 8013684:	4427      	add	r7, r4
 8013686:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801368a:	f1bb 0f13 	cmp.w	fp, #19
 801368e:	bfdc      	itt	le
 8013690:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 8013694:	445e      	addle	r6, fp
 8013696:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801369a:	bfd8      	it	le
 801369c:	b236      	sxthle	r6, r6
 801369e:	f7fa f87a 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 80136a2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80136a6:	2800      	cmp	r0, #0
 80136a8:	f47f af1a 	bne.w	80134e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 80136ac:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80136b0:	fa1f fb8b 	uxth.w	fp, fp
 80136b4:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80136b8:	1ab6      	subs	r6, r6, r2
 80136ba:	4829      	ldr	r0, [pc, #164]	@ (8013760 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 80136bc:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 80136c0:	2e14      	cmp	r6, #20
 80136c2:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80136c6:	6800      	ldr	r0, [r0, #0]
 80136c8:	bfa8      	it	ge
 80136ca:	2614      	movge	r6, #20
 80136cc:	f8ad 101c 	strh.w	r1, [sp, #28]
 80136d0:	f8ad 201e 	strh.w	r2, [sp, #30]
 80136d4:	b289      	uxth	r1, r1
 80136d6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80136da:	b2b6      	uxth	r6, r6
 80136dc:	f8d0 c000 	ldr.w	ip, [r0]
 80136e0:	b292      	uxth	r2, r2
 80136e2:	455e      	cmp	r6, fp
 80136e4:	bf94      	ite	ls
 80136e6:	9600      	strls	r6, [sp, #0]
 80136e8:	f8cd b000 	strhi.w	fp, [sp]
 80136ec:	b29b      	uxth	r3, r3
 80136ee:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 80136f2:	47b0      	blx	r6
 80136f4:	6823      	ldr	r3, [r4, #0]
 80136f6:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80136fa:	a907      	add	r1, sp, #28
 80136fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80136fe:	4620      	mov	r0, r4
 8013700:	4798      	blx	r3
 8013702:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8013706:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801370a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801370e:	1a5b      	subs	r3, r3, r1
 8013710:	440a      	add	r2, r1
 8013712:	b21b      	sxth	r3, r3
 8013714:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8013718:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801371c:	2b00      	cmp	r3, #0
 801371e:	f47f aeda 	bne.w	80134d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8013722:	fa1f f189 	uxth.w	r1, r9
 8013726:	4650      	mov	r0, sl
 8013728:	f7ff f9e8 	bl	8012afc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801372c:	e6d3      	b.n	80134d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801372e:	882e      	ldrh	r6, [r5, #0]
 8013730:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8013734:	42b3      	cmp	r3, r6
 8013736:	f67f ae98 	bls.w	801346a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801373a:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801373e:	ab07      	add	r3, sp, #28
 8013740:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8013744:	6851      	ldr	r1, [r2, #4]
 8013746:	c303      	stmia	r3!, {r0, r1}
 8013748:	a807      	add	r0, sp, #28
 801374a:	f7fa f824 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 801374e:	b920      	cbnz	r0, 801375a <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8013750:	6823      	ldr	r3, [r4, #0]
 8013752:	a907      	add	r1, sp, #28
 8013754:	4620      	mov	r0, r4
 8013756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013758:	4798      	blx	r3
 801375a:	3601      	adds	r6, #1
 801375c:	b2b6      	uxth	r6, r6
 801375e:	e7e7      	b.n	8013730 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8013760:	24025158 	.word	0x24025158

08013764 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8013764:	4b03      	ldr	r3, [pc, #12]	@ (8013774 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8013766:	2200      	movs	r2, #0
 8013768:	801a      	strh	r2, [r3, #0]
 801376a:	805a      	strh	r2, [r3, #2]
 801376c:	809a      	strh	r2, [r3, #4]
 801376e:	80da      	strh	r2, [r3, #6]
 8013770:	4770      	bx	lr
 8013772:	bf00      	nop
 8013774:	240251a4 	.word	0x240251a4

08013778 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8013778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801377c:	b09d      	sub	sp, #116	@ 0x74
 801377e:	4606      	mov	r6, r0
 8013780:	4614      	mov	r4, r2
 8013782:	468a      	mov	sl, r1
 8013784:	a803      	add	r0, sp, #12
 8013786:	461d      	mov	r5, r3
 8013788:	f001 f89e 	bl	80148c8 <_ZN8touchgfx12TextProviderC1Ev>
 801378c:	6833      	ldr	r3, [r6, #0]
 801378e:	4630      	mov	r0, r6
 8013790:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8013794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013796:	4798      	blx	r3
 8013798:	6833      	ldr	r3, [r6, #0]
 801379a:	4607      	mov	r7, r0
 801379c:	4630      	mov	r0, r6
 801379e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80137a0:	4798      	blx	r3
 80137a2:	462a      	mov	r2, r5
 80137a4:	2500      	movs	r5, #0
 80137a6:	4621      	mov	r1, r4
 80137a8:	9000      	str	r0, [sp, #0]
 80137aa:	463b      	mov	r3, r7
 80137ac:	462c      	mov	r4, r5
 80137ae:	46a9      	mov	r9, r5
 80137b0:	46a8      	mov	r8, r5
 80137b2:	a803      	add	r0, sp, #12
 80137b4:	f001 f8db 	bl	801496e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80137b8:	2300      	movs	r3, #0
 80137ba:	9302      	str	r3, [sp, #8]
 80137bc:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80137c0:	429c      	cmp	r4, r3
 80137c2:	d002      	beq.n	80137ca <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80137c4:	455c      	cmp	r4, fp
 80137c6:	bf18      	it	ne
 80137c8:	4625      	movne	r5, r4
 80137ca:	ab02      	add	r3, sp, #8
 80137cc:	4632      	mov	r2, r6
 80137ce:	4651      	mov	r1, sl
 80137d0:	a803      	add	r0, sp, #12
 80137d2:	f001 fbc1 	bl	8014f58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80137d6:	4604      	mov	r4, r0
 80137d8:	b108      	cbz	r0, 80137de <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80137da:	280a      	cmp	r0, #10
 80137dc:	d10a      	bne.n	80137f4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80137de:	45c1      	cmp	r9, r8
 80137e0:	bf38      	it	cc
 80137e2:	46c1      	movcc	r9, r8
 80137e4:	f04f 0800 	mov.w	r8, #0
 80137e8:	2c00      	cmp	r4, #0
 80137ea:	d1e5      	bne.n	80137b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80137ec:	4648      	mov	r0, r9
 80137ee:	b01d      	add	sp, #116	@ 0x74
 80137f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137f4:	9a02      	ldr	r2, [sp, #8]
 80137f6:	2a00      	cmp	r2, #0
 80137f8:	d0de      	beq.n	80137b8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80137fa:	7b57      	ldrb	r7, [r2, #13]
 80137fc:	4629      	mov	r1, r5
 80137fe:	6833      	ldr	r3, [r6, #0]
 8013800:	007f      	lsls	r7, r7, #1
 8013802:	8894      	ldrh	r4, [r2, #4]
 8013804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013806:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801380a:	7a97      	ldrb	r7, [r2, #10]
 801380c:	4307      	orrs	r7, r0
 801380e:	4630      	mov	r0, r6
 8013810:	4798      	blx	r3
 8013812:	4438      	add	r0, r7
 8013814:	4480      	add	r8, r0
 8013816:	fa1f f888 	uxth.w	r8, r8
 801381a:	e7e5      	b.n	80137e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801381c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801381c:	b508      	push	{r3, lr}
 801381e:	6803      	ldr	r3, [r0, #0]
 8013820:	68db      	ldr	r3, [r3, #12]
 8013822:	4798      	blx	r3
 8013824:	b128      	cbz	r0, 8013832 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8013826:	7b43      	ldrb	r3, [r0, #13]
 8013828:	7a80      	ldrb	r0, [r0, #10]
 801382a:	005b      	lsls	r3, r3, #1
 801382c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013830:	4318      	orrs	r0, r3
 8013832:	bd08      	pop	{r3, pc}

08013834 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8013834:	b40e      	push	{r1, r2, r3}
 8013836:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013838:	b09e      	sub	sp, #120	@ 0x78
 801383a:	4605      	mov	r5, r0
 801383c:	ab23      	add	r3, sp, #140	@ 0x8c
 801383e:	a805      	add	r0, sp, #20
 8013840:	f853 4b04 	ldr.w	r4, [r3], #4
 8013844:	9303      	str	r3, [sp, #12]
 8013846:	f001 f83f 	bl	80148c8 <_ZN8touchgfx12TextProviderC1Ev>
 801384a:	682b      	ldr	r3, [r5, #0]
 801384c:	4628      	mov	r0, r5
 801384e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013850:	4798      	blx	r3
 8013852:	682b      	ldr	r3, [r5, #0]
 8013854:	4606      	mov	r6, r0
 8013856:	4628      	mov	r0, r5
 8013858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801385a:	4798      	blx	r3
 801385c:	4633      	mov	r3, r6
 801385e:	4621      	mov	r1, r4
 8013860:	ae1e      	add	r6, sp, #120	@ 0x78
 8013862:	2400      	movs	r4, #0
 8013864:	9000      	str	r0, [sp, #0]
 8013866:	9a03      	ldr	r2, [sp, #12]
 8013868:	a805      	add	r0, sp, #20
 801386a:	f001 f880 	bl	801496e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801386e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8013872:	462a      	mov	r2, r5
 8013874:	4633      	mov	r3, r6
 8013876:	4621      	mov	r1, r4
 8013878:	a805      	add	r0, sp, #20
 801387a:	f001 fb6d 	bl	8014f58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801387e:	b300      	cbz	r0, 80138c2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8013880:	280a      	cmp	r0, #10
 8013882:	d01a      	beq.n	80138ba <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8013884:	9f04      	ldr	r7, [sp, #16]
 8013886:	b1c7      	cbz	r7, 80138ba <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8013888:	7b78      	ldrb	r0, [r7, #13]
 801388a:	7a3b      	ldrb	r3, [r7, #8]
 801388c:	00c1      	lsls	r1, r0, #3
 801388e:	88ea      	ldrh	r2, [r5, #6]
 8013890:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8013894:	4319      	orrs	r1, r3
 8013896:	0643      	lsls	r3, r0, #25
 8013898:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801389c:	bf48      	it	mi
 801389e:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 80138a2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80138a6:	bf48      	it	mi
 80138a8:	b219      	sxthmi	r1, r3
 80138aa:	79fb      	ldrb	r3, [r7, #7]
 80138ac:	4303      	orrs	r3, r0
 80138ae:	4413      	add	r3, r2
 80138b0:	1a5b      	subs	r3, r3, r1
 80138b2:	b21b      	sxth	r3, r3
 80138b4:	429c      	cmp	r4, r3
 80138b6:	bfb8      	it	lt
 80138b8:	461c      	movlt	r4, r3
 80138ba:	4633      	mov	r3, r6
 80138bc:	462a      	mov	r2, r5
 80138be:	2100      	movs	r1, #0
 80138c0:	e7da      	b.n	8013878 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80138c2:	b2a0      	uxth	r0, r4
 80138c4:	b01e      	add	sp, #120	@ 0x78
 80138c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80138ca:	b003      	add	sp, #12
 80138cc:	4770      	bx	lr

080138ce <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80138ce:	7a43      	ldrb	r3, [r0, #9]
 80138d0:	8880      	ldrh	r0, [r0, #4]
 80138d2:	4418      	add	r0, r3
 80138d4:	b280      	uxth	r0, r0
 80138d6:	4770      	bx	lr

080138d8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80138d8:	6803      	ldr	r3, [r0, #0]
 80138da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80138dc:	4718      	bx	r3

080138de <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80138de:	b40e      	push	{r1, r2, r3}
 80138e0:	b570      	push	{r4, r5, r6, lr}
 80138e2:	b09d      	sub	sp, #116	@ 0x74
 80138e4:	4604      	mov	r4, r0
 80138e6:	ab21      	add	r3, sp, #132	@ 0x84
 80138e8:	a803      	add	r0, sp, #12
 80138ea:	f853 5b04 	ldr.w	r5, [r3], #4
 80138ee:	9302      	str	r3, [sp, #8]
 80138f0:	f000 ffea 	bl	80148c8 <_ZN8touchgfx12TextProviderC1Ev>
 80138f4:	6823      	ldr	r3, [r4, #0]
 80138f6:	4620      	mov	r0, r4
 80138f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80138fa:	4798      	blx	r3
 80138fc:	6823      	ldr	r3, [r4, #0]
 80138fe:	4606      	mov	r6, r0
 8013900:	4620      	mov	r0, r4
 8013902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013904:	2401      	movs	r4, #1
 8013906:	4798      	blx	r3
 8013908:	4633      	mov	r3, r6
 801390a:	9000      	str	r0, [sp, #0]
 801390c:	4629      	mov	r1, r5
 801390e:	9a02      	ldr	r2, [sp, #8]
 8013910:	a803      	add	r0, sp, #12
 8013912:	f001 f82c 	bl	801496e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013916:	a803      	add	r0, sp, #12
 8013918:	f001 fbea 	bl	80150f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801391c:	b2a3      	uxth	r3, r4
 801391e:	b138      	cbz	r0, 8013930 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8013920:	280a      	cmp	r0, #10
 8013922:	a803      	add	r0, sp, #12
 8013924:	bf04      	itt	eq
 8013926:	3301      	addeq	r3, #1
 8013928:	b21c      	sxtheq	r4, r3
 801392a:	f001 fbe1 	bl	80150f0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801392e:	e7f5      	b.n	801391c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8013930:	4618      	mov	r0, r3
 8013932:	b01d      	add	sp, #116	@ 0x74
 8013934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013938:	b003      	add	sp, #12
 801393a:	4770      	bx	lr

0801393c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801393c:	b40e      	push	{r1, r2, r3}
 801393e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013940:	b09e      	sub	sp, #120	@ 0x78
 8013942:	4604      	mov	r4, r0
 8013944:	ab23      	add	r3, sp, #140	@ 0x8c
 8013946:	a805      	add	r0, sp, #20
 8013948:	f853 5b04 	ldr.w	r5, [r3], #4
 801394c:	9303      	str	r3, [sp, #12]
 801394e:	f000 ffbb 	bl	80148c8 <_ZN8touchgfx12TextProviderC1Ev>
 8013952:	6823      	ldr	r3, [r4, #0]
 8013954:	4620      	mov	r0, r4
 8013956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013958:	4798      	blx	r3
 801395a:	6823      	ldr	r3, [r4, #0]
 801395c:	4606      	mov	r6, r0
 801395e:	4620      	mov	r0, r4
 8013960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013962:	4798      	blx	r3
 8013964:	4633      	mov	r3, r6
 8013966:	4629      	mov	r1, r5
 8013968:	9000      	str	r0, [sp, #0]
 801396a:	9a03      	ldr	r2, [sp, #12]
 801396c:	a805      	add	r0, sp, #20
 801396e:	f000 fffe 	bl	801496e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013972:	ad1e      	add	r5, sp, #120	@ 0x78
 8013974:	2100      	movs	r1, #0
 8013976:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801397a:	4622      	mov	r2, r4
 801397c:	a805      	add	r0, sp, #20
 801397e:	f845 1d68 	str.w	r1, [r5, #-104]!
 8013982:	462b      	mov	r3, r5
 8013984:	f001 fae8 	bl	8014f58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013988:	b1d8      	cbz	r0, 80139c2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801398a:	280a      	cmp	r0, #10
 801398c:	d012      	beq.n	80139b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801398e:	9804      	ldr	r0, [sp, #16]
 8013990:	b180      	cbz	r0, 80139b4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8013992:	7b47      	ldrb	r7, [r0, #13]
 8013994:	88e2      	ldrh	r2, [r4, #6]
 8013996:	00fb      	lsls	r3, r7, #3
 8013998:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801399c:	7a03      	ldrb	r3, [r0, #8]
 801399e:	430b      	orrs	r3, r1
 80139a0:	0679      	lsls	r1, r7, #25
 80139a2:	bf44      	itt	mi
 80139a4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80139a8:	b21b      	sxthmi	r3, r3
 80139aa:	1ad3      	subs	r3, r2, r3
 80139ac:	b21b      	sxth	r3, r3
 80139ae:	429e      	cmp	r6, r3
 80139b0:	bfa8      	it	ge
 80139b2:	461e      	movge	r6, r3
 80139b4:	462b      	mov	r3, r5
 80139b6:	4622      	mov	r2, r4
 80139b8:	2100      	movs	r1, #0
 80139ba:	a805      	add	r0, sp, #20
 80139bc:	f001 facc 	bl	8014f58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80139c0:	e7e2      	b.n	8013988 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80139c2:	4630      	mov	r0, r6
 80139c4:	b01e      	add	sp, #120	@ 0x78
 80139c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80139ca:	b003      	add	sp, #12
 80139cc:	4770      	bx	lr

080139ce <_ZNK8touchgfx8Drawable10invalidateEv>:
 80139ce:	b513      	push	{r0, r1, r4, lr}
 80139d0:	6803      	ldr	r3, [r0, #0]
 80139d2:	2400      	movs	r4, #0
 80139d4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80139d8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80139dc:	f8ad 1004 	strh.w	r1, [sp, #4]
 80139e0:	4669      	mov	r1, sp
 80139e2:	691b      	ldr	r3, [r3, #16]
 80139e4:	9400      	str	r4, [sp, #0]
 80139e6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80139ea:	4798      	blx	r3
 80139ec:	b002      	add	sp, #8
 80139ee:	bd10      	pop	{r4, pc}

080139f0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80139f0:	b538      	push	{r3, r4, r5, lr}
 80139f2:	680b      	ldr	r3, [r1, #0]
 80139f4:	460c      	mov	r4, r1
 80139f6:	4605      	mov	r5, r0
 80139f8:	68db      	ldr	r3, [r3, #12]
 80139fa:	4798      	blx	r3
 80139fc:	6823      	ldr	r3, [r4, #0]
 80139fe:	4620      	mov	r0, r4
 8013a00:	4629      	mov	r1, r5
 8013a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a04:	4798      	blx	r3
 8013a06:	4628      	mov	r0, r5
 8013a08:	bd38      	pop	{r3, r4, r5, pc}

08013a0a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8013a0a:	b410      	push	{r4}
 8013a0c:	880a      	ldrh	r2, [r1, #0]
 8013a0e:	8884      	ldrh	r4, [r0, #4]
 8013a10:	4422      	add	r2, r4
 8013a12:	800a      	strh	r2, [r1, #0]
 8013a14:	884a      	ldrh	r2, [r1, #2]
 8013a16:	88c4      	ldrh	r4, [r0, #6]
 8013a18:	4422      	add	r2, r4
 8013a1a:	804a      	strh	r2, [r1, #2]
 8013a1c:	6940      	ldr	r0, [r0, #20]
 8013a1e:	b120      	cbz	r0, 8013a2a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8013a20:	6803      	ldr	r3, [r0, #0]
 8013a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a28:	4718      	bx	r3
 8013a2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a2e:	4770      	bx	lr

08013a30 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8013a30:	b570      	push	{r4, r5, r6, lr}
 8013a32:	8882      	ldrh	r2, [r0, #4]
 8013a34:	460c      	mov	r4, r1
 8013a36:	880b      	ldrh	r3, [r1, #0]
 8013a38:	4605      	mov	r5, r0
 8013a3a:	4413      	add	r3, r2
 8013a3c:	800b      	strh	r3, [r1, #0]
 8013a3e:	884b      	ldrh	r3, [r1, #2]
 8013a40:	88c2      	ldrh	r2, [r0, #6]
 8013a42:	4413      	add	r3, r2
 8013a44:	804b      	strh	r3, [r1, #2]
 8013a46:	1d01      	adds	r1, r0, #4
 8013a48:	4620      	mov	r0, r4
 8013a4a:	f7f9 fe61 	bl	800d710 <_ZN8touchgfx4RectaNERKS0_>
 8013a4e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	dd0b      	ble.n	8013a6e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013a56:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	dd07      	ble.n	8013a6e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013a5e:	6968      	ldr	r0, [r5, #20]
 8013a60:	b128      	cbz	r0, 8013a6e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013a62:	6803      	ldr	r3, [r0, #0]
 8013a64:	4621      	mov	r1, r4
 8013a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a6c:	4718      	bx	r3
 8013a6e:	bd70      	pop	{r4, r5, r6, pc}

08013a70 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8013a70:	b570      	push	{r4, r5, r6, lr}
 8013a72:	8882      	ldrh	r2, [r0, #4]
 8013a74:	460c      	mov	r4, r1
 8013a76:	880b      	ldrh	r3, [r1, #0]
 8013a78:	4605      	mov	r5, r0
 8013a7a:	4413      	add	r3, r2
 8013a7c:	800b      	strh	r3, [r1, #0]
 8013a7e:	884b      	ldrh	r3, [r1, #2]
 8013a80:	88c2      	ldrh	r2, [r0, #6]
 8013a82:	4413      	add	r3, r2
 8013a84:	804b      	strh	r3, [r1, #2]
 8013a86:	1d01      	adds	r1, r0, #4
 8013a88:	4620      	mov	r0, r4
 8013a8a:	f7f9 fe41 	bl	800d710 <_ZN8touchgfx4RectaNERKS0_>
 8013a8e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	dd19      	ble.n	8013aca <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8013a96:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	dd15      	ble.n	8013aca <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8013a9e:	6968      	ldr	r0, [r5, #20]
 8013aa0:	b128      	cbz	r0, 8013aae <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8013aa2:	6803      	ldr	r3, [r0, #0]
 8013aa4:	4621      	mov	r1, r4
 8013aa6:	691b      	ldr	r3, [r3, #16]
 8013aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013aac:	4718      	bx	r3
 8013aae:	4b07      	ldr	r3, [pc, #28]	@ (8013acc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	3304      	adds	r3, #4
 8013ab4:	429d      	cmp	r5, r3
 8013ab6:	d108      	bne.n	8013aca <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8013ab8:	f7fe ff10 	bl	80128dc <_ZN8touchgfx11Application11getInstanceEv>
 8013abc:	6803      	ldr	r3, [r0, #0]
 8013abe:	6821      	ldr	r1, [r4, #0]
 8013ac0:	6862      	ldr	r2, [r4, #4]
 8013ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013ac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ac8:	4718      	bx	r3
 8013aca:	bd70      	pop	{r4, r5, r6, pc}
 8013acc:	2402519c 	.word	0x2402519c

08013ad0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8013ad0:	b570      	push	{r4, r5, r6, lr}
 8013ad2:	4604      	mov	r4, r0
 8013ad4:	4616      	mov	r6, r2
 8013ad6:	460d      	mov	r5, r1
 8013ad8:	b901      	cbnz	r1, 8013adc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8013ada:	b192      	cbz	r2, 8013b02 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8013adc:	6823      	ldr	r3, [r4, #0]
 8013ade:	4620      	mov	r0, r4
 8013ae0:	699b      	ldr	r3, [r3, #24]
 8013ae2:	4798      	blx	r3
 8013ae4:	88e2      	ldrh	r2, [r4, #6]
 8013ae6:	88a1      	ldrh	r1, [r4, #4]
 8013ae8:	4620      	mov	r0, r4
 8013aea:	4432      	add	r2, r6
 8013aec:	4429      	add	r1, r5
 8013aee:	b212      	sxth	r2, r2
 8013af0:	b209      	sxth	r1, r1
 8013af2:	f7fa f8e3 	bl	800dcbc <_ZN8touchgfx8Drawable5setXYEss>
 8013af6:	6823      	ldr	r3, [r4, #0]
 8013af8:	4620      	mov	r0, r4
 8013afa:	699b      	ldr	r3, [r3, #24]
 8013afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b00:	4718      	bx	r3
 8013b02:	bd70      	pop	{r4, r5, r6, pc}

08013b04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8013b04:	b510      	push	{r4, lr}
 8013b06:	2300      	movs	r3, #0
 8013b08:	4604      	mov	r4, r0
 8013b0a:	4608      	mov	r0, r1
 8013b0c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8013b10:	8023      	strh	r3, [r4, #0]
 8013b12:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013b16:	8063      	strh	r3, [r4, #2]
 8013b18:	6803      	ldr	r3, [r0, #0]
 8013b1a:	80a1      	strh	r1, [r4, #4]
 8013b1c:	4621      	mov	r1, r4
 8013b1e:	80e2      	strh	r2, [r4, #6]
 8013b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b22:	4798      	blx	r3
 8013b24:	4620      	mov	r0, r4
 8013b26:	bd10      	pop	{r4, pc}

08013b28 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8013b28:	4770      	bx	lr

08013b2a <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8013b2a:	b510      	push	{r4, lr}
 8013b2c:	4604      	mov	r4, r0
 8013b2e:	211c      	movs	r1, #28
 8013b30:	f00b ff6e 	bl	801fa10 <_ZdlPvj>
 8013b34:	4620      	mov	r0, r4
 8013b36:	bd10      	pop	{r4, pc}

08013b38 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8013b38:	4a04      	ldr	r2, [pc, #16]	@ (8013b4c <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8013b3a:	6002      	str	r2, [r0, #0]
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8013b42:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013b46:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013b4a:	4770      	bx	lr
 8013b4c:	08023dd8 	.word	0x08023dd8

08013b50 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 8013b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b54:	4604      	mov	r4, r0
 8013b56:	b087      	sub	sp, #28
 8013b58:	4696      	mov	lr, r2
 8013b5a:	6880      	ldr	r0, [r0, #8]
 8013b5c:	8b22      	ldrh	r2, [r4, #24]
 8013b5e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8013b62:	9105      	str	r1, [sp, #20]
 8013b64:	1c51      	adds	r1, r2, #1
 8013b66:	8321      	strh	r1, [r4, #24]
 8013b68:	2101      	movs	r1, #1
 8013b6a:	5481      	strb	r1, [r0, r2]
 8013b6c:	4689      	mov	r9, r1
 8013b6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013b72:	8b60      	ldrh	r0, [r4, #26]
 8013b74:	ee06 2a90 	vmov	s13, r2
 8013b78:	68e2      	ldr	r2, [r4, #12]
 8013b7a:	1845      	adds	r5, r0, r1
 8013b7c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013b80:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8013b84:	8365      	strh	r5, [r4, #26]
 8013b86:	edc2 6a00 	vstr	s13, [r2]
 8013b8a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013b8e:	8b60      	ldrh	r0, [r4, #26]
 8013b90:	ee07 2a10 	vmov	s14, r2
 8013b94:	68e2      	ldr	r2, [r4, #12]
 8013b96:	1845      	adds	r5, r0, r1
 8013b98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b9c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8013ba0:	8365      	strh	r5, [r4, #26]
 8013ba2:	1d18      	adds	r0, r3, #4
 8013ba4:	460d      	mov	r5, r1
 8013ba6:	ed82 7a00 	vstr	s14, [r2]
 8013baa:	f8be 2000 	ldrh.w	r2, [lr]
 8013bae:	9203      	str	r2, [sp, #12]
 8013bb0:	2200      	movs	r2, #0
 8013bb2:	4613      	mov	r3, r2
 8013bb4:	4694      	mov	ip, r2
 8013bb6:	9201      	str	r2, [sp, #4]
 8013bb8:	9202      	str	r2, [sp, #8]
 8013bba:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8013bbe:	9e05      	ldr	r6, [sp, #20]
 8013bc0:	f108 0701 	add.w	r7, r8, #1
 8013bc4:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8013bc8:	428e      	cmp	r6, r1
 8013bca:	b2bf      	uxth	r7, r7
 8013bcc:	eb0a 0b08 	add.w	fp, sl, r8
 8013bd0:	f340 80b6 	ble.w	8013d40 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 8013bd4:	9b03      	ldr	r3, [sp, #12]
 8013bd6:	f9b0 c000 	ldrsh.w	ip, [r0]
 8013bda:	fa43 fb05 	asr.w	fp, r3, r5
 8013bde:	f00b 0b01 	and.w	fp, fp, #1
 8013be2:	fa5f f38b 	uxtb.w	r3, fp
 8013be6:	9304      	str	r3, [sp, #16]
 8013be8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013bec:	f1bb 0f00 	cmp.w	fp, #0
 8013bf0:	d057      	beq.n	8013ca2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 8013bf2:	ee07 ca90 	vmov	s15, ip
 8013bf6:	8327      	strh	r7, [r4, #24]
 8013bf8:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8013bfc:	ee07 3a90 	vmov	s15, r3
 8013c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c04:	f1b9 0f00 	cmp.w	r9, #0
 8013c08:	d028      	beq.n	8013c5c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 8013c0a:	f04f 0602 	mov.w	r6, #2
 8013c0e:	f80a 6008 	strb.w	r6, [sl, r8]
 8013c12:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013c16:	68e7      	ldr	r7, [r4, #12]
 8013c18:	f108 0901 	add.w	r9, r8, #1
 8013c1c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013c20:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013c24:	edc7 5a00 	vstr	s11, [r7]
 8013c28:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013c2c:	68e7      	ldr	r7, [r4, #12]
 8013c2e:	f108 0901 	add.w	r9, r8, #1
 8013c32:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013c36:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013c3a:	edc7 7a00 	vstr	s15, [r7]
 8013c3e:	3501      	adds	r5, #1
 8013c40:	2d10      	cmp	r5, #16
 8013c42:	d106      	bne.n	8013c52 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8013c44:	9d02      	ldr	r5, [sp, #8]
 8013c46:	3501      	adds	r5, #1
 8013c48:	9502      	str	r5, [sp, #8]
 8013c4a:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 8013c4e:	9503      	str	r5, [sp, #12]
 8013c50:	2500      	movs	r5, #0
 8013c52:	3101      	adds	r1, #1
 8013c54:	3004      	adds	r0, #4
 8013c56:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8013c5a:	e7ae      	b.n	8013bba <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 8013c5c:	f04f 0605 	mov.w	r6, #5
 8013c60:	ed9d 5a01 	vldr	s10, [sp, #4]
 8013c64:	f80a 6008 	strb.w	r6, [sl, r8]
 8013c68:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013c6c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013c70:	68e7      	ldr	r7, [r4, #12]
 8013c72:	f108 0901 	add.w	r9, r8, #1
 8013c76:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013c7a:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013c7e:	ed87 5a00 	vstr	s10, [r7]
 8013c82:	ee05 2a10 	vmov	s10, r2
 8013c86:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013c8a:	68e7      	ldr	r7, [r4, #12]
 8013c8c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013c90:	f108 0901 	add.w	r9, r8, #1
 8013c94:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013c98:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013c9c:	ed87 5a00 	vstr	s10, [r7]
 8013ca0:	e7b7      	b.n	8013c12 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 8013ca2:	f1b9 0f00 	cmp.w	r9, #0
 8013ca6:	d147      	bne.n	8013d38 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 8013ca8:	f04f 0605 	mov.w	r6, #5
 8013cac:	eddd 7a01 	vldr	s15, [sp, #4]
 8013cb0:	8327      	strh	r7, [r4, #24]
 8013cb2:	f80a 6008 	strb.w	r6, [sl, r8]
 8013cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013cba:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013cbe:	68e7      	ldr	r7, [r4, #12]
 8013cc0:	f108 0901 	add.w	r9, r8, #1
 8013cc4:	9e01      	ldr	r6, [sp, #4]
 8013cc6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013cca:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013cce:	4466      	add	r6, ip
 8013cd0:	edc7 7a00 	vstr	s15, [r7]
 8013cd4:	ee07 2a90 	vmov	s15, r2
 8013cd8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013cdc:	441a      	add	r2, r3
 8013cde:	68e7      	ldr	r7, [r4, #12]
 8013ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ce4:	f108 0901 	add.w	r9, r8, #1
 8013ce8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013cec:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013cf0:	edc7 7a00 	vstr	s15, [r7]
 8013cf4:	ee07 6a90 	vmov	s15, r6
 8013cf8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d00:	68e7      	ldr	r7, [r4, #12]
 8013d02:	f108 0901 	add.w	r9, r8, #1
 8013d06:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013d0a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013d0e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013d12:	edc7 7a00 	vstr	s15, [r7]
 8013d16:	ee07 2a90 	vmov	s15, r2
 8013d1a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d22:	68e7      	ldr	r7, [r4, #12]
 8013d24:	f108 0901 	add.w	r9, r8, #1
 8013d28:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013d2c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013d30:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013d34:	edc7 7a00 	vstr	s15, [r7]
 8013d38:	461a      	mov	r2, r3
 8013d3a:	f8cd c004 	str.w	ip, [sp, #4]
 8013d3e:	e77e      	b.n	8013c3e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 8013d40:	f1b9 0f00 	cmp.w	r9, #0
 8013d44:	d028      	beq.n	8013d98 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8013d46:	ee07 ca90 	vmov	s15, ip
 8013d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d4e:	eef4 6a67 	vcmp.f32	s13, s15
 8013d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d56:	d108      	bne.n	8013d6a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 8013d58:	ee07 3a90 	vmov	s15, r3
 8013d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d60:	eeb4 7a67 	vcmp.f32	s14, s15
 8013d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d68:	d016      	beq.n	8013d98 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8013d6a:	2302      	movs	r3, #2
 8013d6c:	8327      	strh	r7, [r4, #24]
 8013d6e:	f88b 3000 	strb.w	r3, [fp]
 8013d72:	8b62      	ldrh	r2, [r4, #26]
 8013d74:	68e3      	ldr	r3, [r4, #12]
 8013d76:	1c51      	adds	r1, r2, #1
 8013d78:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013d7c:	8361      	strh	r1, [r4, #26]
 8013d7e:	edc3 6a00 	vstr	s13, [r3]
 8013d82:	8b62      	ldrh	r2, [r4, #26]
 8013d84:	68e3      	ldr	r3, [r4, #12]
 8013d86:	1c51      	adds	r1, r2, #1
 8013d88:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8013d8c:	8361      	strh	r1, [r4, #26]
 8013d8e:	ed83 7a00 	vstr	s14, [r3]
 8013d92:	b007      	add	sp, #28
 8013d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d98:	2305      	movs	r3, #5
 8013d9a:	eddd 7a01 	vldr	s15, [sp, #4]
 8013d9e:	8327      	strh	r7, [r4, #24]
 8013da0:	f88b 3000 	strb.w	r3, [fp]
 8013da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013da8:	8b61      	ldrh	r1, [r4, #26]
 8013daa:	68e3      	ldr	r3, [r4, #12]
 8013dac:	1c4d      	adds	r5, r1, #1
 8013dae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8013db2:	8365      	strh	r5, [r4, #26]
 8013db4:	edc3 7a00 	vstr	s15, [r3]
 8013db8:	ee07 2a90 	vmov	s15, r2
 8013dbc:	8b61      	ldrh	r1, [r4, #26]
 8013dbe:	68e3      	ldr	r3, [r4, #12]
 8013dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013dc4:	1c4d      	adds	r5, r1, #1
 8013dc6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8013dca:	8365      	strh	r5, [r4, #26]
 8013dcc:	edc3 7a00 	vstr	s15, [r3]
 8013dd0:	e7cf      	b.n	8013d72 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

08013dd4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8013dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013dd8:	4604      	mov	r4, r0
 8013dda:	b08e      	sub	sp, #56	@ 0x38
 8013ddc:	4699      	mov	r9, r3
 8013dde:	4688      	mov	r8, r1
 8013de0:	4615      	mov	r5, r2
 8013de2:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8013de4:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8013de8:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8013dea:	f7ef fc51 	bl	8003690 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 8013dee:	6060      	str	r0, [r4, #4]
 8013df0:	f1b9 0f00 	cmp.w	r9, #0
 8013df4:	f000 80e8 	beq.w	8013fc8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8013df8:	2800      	cmp	r0, #0
 8013dfa:	f000 80e5 	beq.w	8013fc8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8013dfe:	a805      	add	r0, sp, #20
 8013e00:	f000 f8f9 	bl	8013ff6 <_ZN8touchgfx9Matrix3x3C1Ev>
 8013e04:	6833      	ldr	r3, [r6, #0]
 8013e06:	4630      	mov	r0, r6
 8013e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013e0a:	4798      	blx	r3
 8013e0c:	a805      	add	r0, sp, #20
 8013e0e:	eef0 0a40 	vmov.f32	s1, s0
 8013e12:	f000 f8f4 	bl	8013ffe <_ZN8touchgfx9Matrix3x35scaleEff>
 8013e16:	6860      	ldr	r0, [r4, #4]
 8013e18:	f1ba 0f03 	cmp.w	sl, #3
 8013e1c:	d83b      	bhi.n	8013e96 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 8013e1e:	e8df f00a 	tbb	[pc, sl]
 8013e22:	1002      	.short	0x1002
 8013e24:	9f71      	.short	0x9f71
 8013e26:	6803      	ldr	r3, [r0, #0]
 8013e28:	462a      	mov	r2, r5
 8013e2a:	4641      	mov	r1, r8
 8013e2c:	689b      	ldr	r3, [r3, #8]
 8013e2e:	4798      	blx	r3
 8013e30:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8013e34:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8013e38:	ee07 7a90 	vmov	s15, r7
 8013e3c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013e40:	e026      	b.n	8013e90 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 8013e42:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8013e46:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8013e4a:	8869      	ldrh	r1, [r5, #2]
 8013e4c:	1a9b      	subs	r3, r3, r2
 8013e4e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013e52:	aa03      	add	r2, sp, #12
 8013e54:	1a5b      	subs	r3, r3, r1
 8013e56:	4641      	mov	r1, r8
 8013e58:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013e5c:	882b      	ldrh	r3, [r5, #0]
 8013e5e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013e62:	88ab      	ldrh	r3, [r5, #4]
 8013e64:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013e68:	6803      	ldr	r3, [r0, #0]
 8013e6a:	689b      	ldr	r3, [r3, #8]
 8013e6c:	4798      	blx	r3
 8013e6e:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8013fd0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 8013e72:	a805      	add	r0, sp, #20
 8013e74:	f000 f8e8 	bl	8014048 <_ZN8touchgfx9Matrix3x36rotateEf>
 8013e78:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8013e7c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013e7e:	ee07 7a90 	vmov	s15, r7
 8013e82:	1a9b      	subs	r3, r3, r2
 8013e84:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8013e88:	ee00 3a10 	vmov	s0, r3
 8013e8c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013e90:	a805      	add	r0, sp, #20
 8013e92:	f000 f927 	bl	80140e4 <_ZN8touchgfx9Matrix3x39translateEff>
 8013e96:	6860      	ldr	r0, [r4, #4]
 8013e98:	a905      	add	r1, sp, #20
 8013e9a:	2500      	movs	r5, #0
 8013e9c:	f109 0602 	add.w	r6, r9, #2
 8013ea0:	6803      	ldr	r3, [r0, #0]
 8013ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ea4:	4798      	blx	r3
 8013ea6:	6860      	ldr	r0, [r4, #4]
 8013ea8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8013eaa:	6803      	ldr	r3, [r0, #0]
 8013eac:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8013eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013eb2:	4798      	blx	r3
 8013eb4:	6860      	ldr	r0, [r4, #4]
 8013eb6:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8013eba:	6803      	ldr	r3, [r0, #0]
 8013ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ebe:	4798      	blx	r3
 8013ec0:	6860      	ldr	r0, [r4, #4]
 8013ec2:	2101      	movs	r1, #1
 8013ec4:	6803      	ldr	r3, [r0, #0]
 8013ec6:	68db      	ldr	r3, [r3, #12]
 8013ec8:	4798      	blx	r3
 8013eca:	f8b9 7000 	ldrh.w	r7, [r9]
 8013ece:	f104 0310 	add.w	r3, r4, #16
 8013ed2:	61a5      	str	r5, [r4, #24]
 8013ed4:	f104 0208 	add.w	r2, r4, #8
 8013ed8:	f104 0114 	add.w	r1, r4, #20
 8013edc:	f104 000c 	add.w	r0, r4, #12
 8013ee0:	f7f0 f8c6 	bl	8004070 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8013ee4:	42af      	cmp	r7, r5
 8013ee6:	dd60      	ble.n	8013faa <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8013ee8:	8831      	ldrh	r1, [r6, #0]
 8013eea:	1cb2      	adds	r2, r6, #2
 8013eec:	4620      	mov	r0, r4
 8013eee:	3501      	adds	r5, #1
 8013ef0:	f101 030f 	add.w	r3, r1, #15
 8013ef4:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8013ef8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8013efc:	f7ff fe28 	bl	8013b50 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 8013f00:	4606      	mov	r6, r0
 8013f02:	e7ef      	b.n	8013ee4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8013f04:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013f08:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8013f0c:	8829      	ldrh	r1, [r5, #0]
 8013f0e:	1a9b      	subs	r3, r3, r2
 8013f10:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013f14:	aa03      	add	r2, sp, #12
 8013f16:	1a5b      	subs	r3, r3, r1
 8013f18:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013f1c:	886d      	ldrh	r5, [r5, #2]
 8013f1e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013f22:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013f26:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013f2a:	1a5b      	subs	r3, r3, r1
 8013f2c:	4641      	mov	r1, r8
 8013f2e:	1b5b      	subs	r3, r3, r5
 8013f30:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013f34:	6803      	ldr	r3, [r0, #0]
 8013f36:	689b      	ldr	r3, [r3, #8]
 8013f38:	4798      	blx	r3
 8013f3a:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8013fd4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 8013f3e:	a805      	add	r0, sp, #20
 8013f40:	f000 f882 	bl	8014048 <_ZN8touchgfx9Matrix3x36rotateEf>
 8013f44:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8013f48:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013f4a:	1a9b      	subs	r3, r3, r2
 8013f4c:	ee00 3a90 	vmov	s1, r3
 8013f50:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8013f54:	1bdb      	subs	r3, r3, r7
 8013f56:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8013f5a:	ee00 3a10 	vmov	s0, r3
 8013f5e:	e795      	b.n	8013e8c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8013f60:	886b      	ldrh	r3, [r5, #2]
 8013f62:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013f66:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013f6a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013f6e:	8829      	ldrh	r1, [r5, #0]
 8013f70:	1a9b      	subs	r3, r3, r2
 8013f72:	f8ad 2012 	strh.w	r2, [sp, #18]
 8013f76:	aa03      	add	r2, sp, #12
 8013f78:	1a5b      	subs	r3, r3, r1
 8013f7a:	4641      	mov	r1, r8
 8013f7c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013f80:	88eb      	ldrh	r3, [r5, #6]
 8013f82:	f8ad 3010 	strh.w	r3, [sp, #16]
 8013f86:	6803      	ldr	r3, [r0, #0]
 8013f88:	689b      	ldr	r3, [r3, #8]
 8013f8a:	4798      	blx	r3
 8013f8c:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8013fd8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8013f90:	a805      	add	r0, sp, #20
 8013f92:	f000 f859 	bl	8014048 <_ZN8touchgfx9Matrix3x36rotateEf>
 8013f96:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8013f9a:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8013f9e:	1bdb      	subs	r3, r3, r7
 8013fa0:	ee00 3a90 	vmov	s1, r3
 8013fa4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8013fa8:	e748      	b.n	8013e3c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 8013faa:	6860      	ldr	r0, [r4, #4]
 8013fac:	2100      	movs	r1, #0
 8013fae:	8b22      	ldrh	r2, [r4, #24]
 8013fb0:	6803      	ldr	r3, [r0, #0]
 8013fb2:	9101      	str	r1, [sp, #4]
 8013fb4:	8b61      	ldrh	r1, [r4, #26]
 8013fb6:	9100      	str	r1, [sp, #0]
 8013fb8:	6a1d      	ldr	r5, [r3, #32]
 8013fba:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8013fbe:	47a8      	blx	r5
 8013fc0:	6860      	ldr	r0, [r4, #4]
 8013fc2:	6803      	ldr	r3, [r0, #0]
 8013fc4:	69db      	ldr	r3, [r3, #28]
 8013fc6:	4798      	blx	r3
 8013fc8:	b00e      	add	sp, #56	@ 0x38
 8013fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fce:	bf00      	nop
 8013fd0:	42b40000 	.word	0x42b40000
 8013fd4:	43340000 	.word	0x43340000
 8013fd8:	43870000 	.word	0x43870000

08013fdc <_ZN8touchgfx9Matrix3x35resetEv>:
 8013fdc:	2300      	movs	r3, #0
 8013fde:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8013fe2:	6043      	str	r3, [r0, #4]
 8013fe4:	6002      	str	r2, [r0, #0]
 8013fe6:	6083      	str	r3, [r0, #8]
 8013fe8:	60c3      	str	r3, [r0, #12]
 8013fea:	6102      	str	r2, [r0, #16]
 8013fec:	6143      	str	r3, [r0, #20]
 8013fee:	6183      	str	r3, [r0, #24]
 8013ff0:	61c3      	str	r3, [r0, #28]
 8013ff2:	6202      	str	r2, [r0, #32]
 8013ff4:	4770      	bx	lr

08013ff6 <_ZN8touchgfx9Matrix3x3C1Ev>:
 8013ff6:	b508      	push	{r3, lr}
 8013ff8:	f7ff fff0 	bl	8013fdc <_ZN8touchgfx9Matrix3x35resetEv>
 8013ffc:	bd08      	pop	{r3, pc}

08013ffe <_ZN8touchgfx9Matrix3x35scaleEff>:
 8013ffe:	edd0 7a00 	vldr	s15, [r0]
 8014002:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014006:	edc0 7a00 	vstr	s15, [r0]
 801400a:	edd0 7a01 	vldr	s15, [r0, #4]
 801400e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014012:	edc0 7a01 	vstr	s15, [r0, #4]
 8014016:	edd0 7a02 	vldr	s15, [r0, #8]
 801401a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801401e:	edd0 7a03 	vldr	s15, [r0, #12]
 8014022:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8014026:	ed80 0a02 	vstr	s0, [r0, #8]
 801402a:	edc0 7a03 	vstr	s15, [r0, #12]
 801402e:	edd0 7a04 	vldr	s15, [r0, #16]
 8014032:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8014036:	edc0 7a04 	vstr	s15, [r0, #16]
 801403a:	edd0 7a05 	vldr	s15, [r0, #20]
 801403e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8014042:	edc0 0a05 	vstr	s1, [r0, #20]
 8014046:	4770      	bx	lr

08014048 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8014048:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80140dc <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801404c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014050:	eddf 7a23 	vldr	s15, [pc, #140]	@ 80140e0 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8014054:	b510      	push	{r4, lr}
 8014056:	ed2d 8b02 	vpush	{d8}
 801405a:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801405e:	4604      	mov	r4, r0
 8014060:	eeb0 0a68 	vmov.f32	s0, s17
 8014064:	f00b fe2c 	bl	801fcc0 <cosf>
 8014068:	eeb0 8a40 	vmov.f32	s16, s0
 801406c:	eeb0 0a68 	vmov.f32	s0, s17
 8014070:	f00b fd62 	bl	801fb38 <sinf>
 8014074:	edd4 6a03 	vldr	s13, [r4, #12]
 8014078:	edd4 4a00 	vldr	s9, [r4]
 801407c:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8014080:	ed94 7a04 	vldr	s14, [r4, #16]
 8014084:	ed94 5a01 	vldr	s10, [r4, #4]
 8014088:	ee66 6a88 	vmul.f32	s13, s13, s16
 801408c:	edd4 5a02 	vldr	s11, [r4, #8]
 8014090:	eee8 7a24 	vfma.f32	s15, s16, s9
 8014094:	eee0 6a24 	vfma.f32	s13, s0, s9
 8014098:	edc4 7a00 	vstr	s15, [r4]
 801409c:	ee60 7a47 	vnmul.f32	s15, s0, s14
 80140a0:	ee27 7a08 	vmul.f32	s14, s14, s16
 80140a4:	edc4 6a03 	vstr	s13, [r4, #12]
 80140a8:	eee8 7a05 	vfma.f32	s15, s16, s10
 80140ac:	eea0 7a05 	vfma.f32	s14, s0, s10
 80140b0:	edc4 7a01 	vstr	s15, [r4, #4]
 80140b4:	edd4 7a05 	vldr	s15, [r4, #20]
 80140b8:	ed84 7a04 	vstr	s14, [r4, #16]
 80140bc:	ee20 6a67 	vnmul.f32	s12, s0, s15
 80140c0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80140c4:	eea8 6a25 	vfma.f32	s12, s16, s11
 80140c8:	eee0 7a25 	vfma.f32	s15, s0, s11
 80140cc:	ecbd 8b02 	vpop	{d8}
 80140d0:	ed84 6a02 	vstr	s12, [r4, #8]
 80140d4:	edc4 7a05 	vstr	s15, [r4, #20]
 80140d8:	bd10      	pop	{r4, pc}
 80140da:	bf00      	nop
 80140dc:	40490fdb 	.word	0x40490fdb
 80140e0:	43340000 	.word	0x43340000

080140e4 <_ZN8touchgfx9Matrix3x39translateEff>:
 80140e4:	ed90 6a06 	vldr	s12, [r0, #24]
 80140e8:	edd0 7a00 	vldr	s15, [r0]
 80140ec:	edd0 6a07 	vldr	s13, [r0, #28]
 80140f0:	eee6 7a00 	vfma.f32	s15, s12, s0
 80140f4:	ed90 7a08 	vldr	s14, [r0, #32]
 80140f8:	edc0 7a00 	vstr	s15, [r0]
 80140fc:	edd0 7a01 	vldr	s15, [r0, #4]
 8014100:	eee6 7a80 	vfma.f32	s15, s13, s0
 8014104:	edc0 7a01 	vstr	s15, [r0, #4]
 8014108:	edd0 7a02 	vldr	s15, [r0, #8]
 801410c:	eee7 7a00 	vfma.f32	s15, s14, s0
 8014110:	edc0 7a02 	vstr	s15, [r0, #8]
 8014114:	edd0 7a03 	vldr	s15, [r0, #12]
 8014118:	eee6 7a20 	vfma.f32	s15, s12, s1
 801411c:	edc0 7a03 	vstr	s15, [r0, #12]
 8014120:	edd0 7a04 	vldr	s15, [r0, #16]
 8014124:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8014128:	edc0 7a04 	vstr	s15, [r0, #16]
 801412c:	edd0 7a05 	vldr	s15, [r0, #20]
 8014130:	eee7 7a20 	vfma.f32	s15, s14, s1
 8014134:	edc0 7a05 	vstr	s15, [r0, #20]
 8014138:	4770      	bx	lr

0801413a <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801413a:	edd0 6a01 	vldr	s13, [r0, #4]
 801413e:	b084      	sub	sp, #16
 8014140:	edd0 7a04 	vldr	s15, [r0, #16]
 8014144:	ed90 7a03 	vldr	s14, [r0, #12]
 8014148:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801414c:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8014150:	edd0 6a00 	vldr	s13, [r0]
 8014154:	eee7 7a00 	vfma.f32	s15, s14, s0
 8014158:	ed90 7a05 	vldr	s14, [r0, #20]
 801415c:	eee6 0a80 	vfma.f32	s1, s13, s0
 8014160:	ed90 0a02 	vldr	s0, [r0, #8]
 8014164:	ee30 0a80 	vadd.f32	s0, s1, s0
 8014168:	ee77 0a87 	vadd.f32	s1, s15, s14
 801416c:	b004      	add	sp, #16
 801416e:	4770      	bx	lr

08014170 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8014170:	b530      	push	{r4, r5, lr}
 8014172:	8083      	strh	r3, [r0, #4]
 8014174:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014178:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801417c:	80c3      	strh	r3, [r0, #6]
 801417e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014182:	6141      	str	r1, [r0, #20]
 8014184:	7203      	strb	r3, [r0, #8]
 8014186:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801418a:	8302      	strh	r2, [r0, #24]
 801418c:	7243      	strb	r3, [r0, #9]
 801418e:	7a83      	ldrb	r3, [r0, #10]
 8014190:	f365 0306 	bfi	r3, r5, #0, #7
 8014194:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8014198:	f365 13c7 	bfi	r3, r5, #7, #1
 801419c:	7283      	strb	r3, [r0, #10]
 801419e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80141a2:	72c3      	strb	r3, [r0, #11]
 80141a4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80141a8:	7303      	strb	r3, [r0, #12]
 80141aa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80141ae:	81c3      	strh	r3, [r0, #14]
 80141b0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80141b4:	8203      	strh	r3, [r0, #16]
 80141b6:	4b01      	ldr	r3, [pc, #4]	@ (80141bc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80141b8:	6003      	str	r3, [r0, #0]
 80141ba:	bd30      	pop	{r4, r5, pc}
 80141bc:	08023dec 	.word	0x08023dec

080141c0 <_ZNK8touchgfx9ConstFont4findEt>:
 80141c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141c2:	6944      	ldr	r4, [r0, #20]
 80141c4:	b3bc      	cbz	r4, 8014236 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80141c6:	88a3      	ldrh	r3, [r4, #4]
 80141c8:	8b02      	ldrh	r2, [r0, #24]
 80141ca:	1acb      	subs	r3, r1, r3
 80141cc:	f102 32ff 	add.w	r2, r2, #4294967295
 80141d0:	d431      	bmi.n	8014236 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80141d2:	4293      	cmp	r3, r2
 80141d4:	dd0c      	ble.n	80141f0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80141d6:	230e      	movs	r3, #14
 80141d8:	fb03 4302 	mla	r3, r3, r2, r4
 80141dc:	889b      	ldrh	r3, [r3, #4]
 80141de:	1a5b      	subs	r3, r3, r1
 80141e0:	1ad3      	subs	r3, r2, r3
 80141e2:	429a      	cmp	r2, r3
 80141e4:	db27      	blt.n	8014236 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	bfbc      	itt	lt
 80141ea:	2302      	movlt	r3, #2
 80141ec:	fb92 f3f3 	sdivlt	r3, r2, r3
 80141f0:	2500      	movs	r5, #0
 80141f2:	260e      	movs	r6, #14
 80141f4:	4295      	cmp	r5, r2
 80141f6:	dc1e      	bgt.n	8014236 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80141f8:	fb06 4003 	mla	r0, r6, r3, r4
 80141fc:	8887      	ldrh	r7, [r0, #4]
 80141fe:	42b9      	cmp	r1, r7
 8014200:	d01a      	beq.n	8014238 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8014202:	d20d      	bcs.n	8014220 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8014204:	1e5a      	subs	r2, r3, #1
 8014206:	4295      	cmp	r5, r2
 8014208:	dc15      	bgt.n	8014236 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801420a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801420e:	1a5b      	subs	r3, r3, r1
 8014210:	1ad3      	subs	r3, r2, r3
 8014212:	429a      	cmp	r2, r3
 8014214:	db0f      	blt.n	8014236 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014216:	429d      	cmp	r5, r3
 8014218:	ddec      	ble.n	80141f4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801421a:	1953      	adds	r3, r2, r5
 801421c:	105b      	asrs	r3, r3, #1
 801421e:	e7e9      	b.n	80141f4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014220:	1c5d      	adds	r5, r3, #1
 8014222:	42aa      	cmp	r2, r5
 8014224:	db07      	blt.n	8014236 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014226:	8a43      	ldrh	r3, [r0, #18]
 8014228:	1acb      	subs	r3, r1, r3
 801422a:	442b      	add	r3, r5
 801422c:	429d      	cmp	r5, r3
 801422e:	dc02      	bgt.n	8014236 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014230:	429a      	cmp	r2, r3
 8014232:	dadf      	bge.n	80141f4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014234:	e7f1      	b.n	801421a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8014236:	2000      	movs	r0, #0
 8014238:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801423a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801423a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801423c:	4604      	mov	r4, r0
 801423e:	4617      	mov	r7, r2
 8014240:	461e      	mov	r6, r3
 8014242:	b911      	cbnz	r1, 801424a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8014244:	2500      	movs	r5, #0
 8014246:	4628      	mov	r0, r5
 8014248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801424a:	290a      	cmp	r1, #10
 801424c:	d0fa      	beq.n	8014244 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801424e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8014252:	4291      	cmp	r1, r2
 8014254:	d0f6      	beq.n	8014244 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014256:	f242 020b 	movw	r2, #8203	@ 0x200b
 801425a:	4291      	cmp	r1, r2
 801425c:	d0f2      	beq.n	8014244 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801425e:	f7ff ffaf 	bl	80141c0 <_ZNK8touchgfx9ConstFont4findEt>
 8014262:	4605      	mov	r5, r0
 8014264:	b950      	cbnz	r0, 801427c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8014266:	6823      	ldr	r3, [r4, #0]
 8014268:	4620      	mov	r0, r4
 801426a:	691b      	ldr	r3, [r3, #16]
 801426c:	4798      	blx	r3
 801426e:	4601      	mov	r1, r0
 8014270:	4620      	mov	r0, r4
 8014272:	f7ff ffa5 	bl	80141c0 <_ZNK8touchgfx9ConstFont4findEt>
 8014276:	4605      	mov	r5, r0
 8014278:	2800      	cmp	r0, #0
 801427a:	d0e3      	beq.n	8014244 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801427c:	6823      	ldr	r3, [r4, #0]
 801427e:	4629      	mov	r1, r5
 8014280:	4620      	mov	r0, r4
 8014282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014284:	4798      	blx	r3
 8014286:	6038      	str	r0, [r7, #0]
 8014288:	6823      	ldr	r3, [r4, #0]
 801428a:	4620      	mov	r0, r4
 801428c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801428e:	4798      	blx	r3
 8014290:	7030      	strb	r0, [r6, #0]
 8014292:	e7d8      	b.n	8014246 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08014294 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8014294:	2000      	movs	r0, #0
 8014296:	4770      	bx	lr

08014298 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8014298:	2001      	movs	r0, #1
 801429a:	4770      	bx	lr

0801429c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801429c:	2002      	movs	r0, #2
 801429e:	4770      	bx	lr

080142a0 <_ZN8touchgfx6ScreenD1Ev>:
 80142a0:	4770      	bx	lr

080142a2 <_ZN8touchgfx12GestureEventD1Ev>:
 80142a2:	4770      	bx	lr

080142a4 <_ZN8touchgfx9DragEventD1Ev>:
 80142a4:	4770      	bx	lr

080142a6 <_ZN8touchgfx10ClickEventD1Ev>:
 80142a6:	4770      	bx	lr

080142a8 <_ZN8touchgfx10ClickEventD0Ev>:
 80142a8:	b510      	push	{r4, lr}
 80142aa:	4604      	mov	r4, r0
 80142ac:	210c      	movs	r1, #12
 80142ae:	f00b fbaf 	bl	801fa10 <_ZdlPvj>
 80142b2:	4620      	mov	r0, r4
 80142b4:	bd10      	pop	{r4, pc}

080142b6 <_ZN8touchgfx9DragEventD0Ev>:
 80142b6:	b510      	push	{r4, lr}
 80142b8:	4604      	mov	r4, r0
 80142ba:	2110      	movs	r1, #16
 80142bc:	f00b fba8 	bl	801fa10 <_ZdlPvj>
 80142c0:	4620      	mov	r0, r4
 80142c2:	bd10      	pop	{r4, pc}

080142c4 <_ZN8touchgfx12GestureEventD0Ev>:
 80142c4:	b510      	push	{r4, lr}
 80142c6:	4604      	mov	r4, r0
 80142c8:	210c      	movs	r1, #12
 80142ca:	f00b fba1 	bl	801fa10 <_ZdlPvj>
 80142ce:	4620      	mov	r0, r4
 80142d0:	bd10      	pop	{r4, pc}

080142d2 <_ZN8touchgfx6ScreenD0Ev>:
 80142d2:	b510      	push	{r4, lr}
 80142d4:	4604      	mov	r4, r0
 80142d6:	213c      	movs	r1, #60	@ 0x3c
 80142d8:	f00b fb9a 	bl	801fa10 <_ZdlPvj>
 80142dc:	4620      	mov	r0, r4
 80142de:	bd10      	pop	{r4, pc}

080142e0 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80142e0:	b530      	push	{r4, r5, lr}
 80142e2:	460d      	mov	r5, r1
 80142e4:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80142e6:	b087      	sub	sp, #28
 80142e8:	4604      	mov	r4, r0
 80142ea:	b301      	cbz	r1, 801432e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80142ec:	a801      	add	r0, sp, #4
 80142ee:	f7ff fc09 	bl	8013b04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80142f2:	892a      	ldrh	r2, [r5, #8]
 80142f4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80142f8:	7928      	ldrb	r0, [r5, #4]
 80142fa:	1ad2      	subs	r2, r2, r3
 80142fc:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80142fe:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8014302:	441a      	add	r2, r3
 8014304:	896b      	ldrh	r3, [r5, #10]
 8014306:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801430a:	f88d 0010 	strb.w	r0, [sp, #16]
 801430e:	1b5b      	subs	r3, r3, r5
 8014310:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8014312:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8014314:	442b      	add	r3, r5
 8014316:	4d07      	ldr	r5, [pc, #28]	@ (8014334 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8014318:	f8ad 1012 	strh.w	r1, [sp, #18]
 801431c:	a903      	add	r1, sp, #12
 801431e:	9503      	str	r5, [sp, #12]
 8014320:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014324:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014328:	6803      	ldr	r3, [r0, #0]
 801432a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801432c:	4798      	blx	r3
 801432e:	b007      	add	sp, #28
 8014330:	bd30      	pop	{r4, r5, pc}
 8014332:	bf00      	nop
 8014334:	08023e7c 	.word	0x08023e7c

08014338 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8014338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801433c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801433e:	b08a      	sub	sp, #40	@ 0x28
 8014340:	4604      	mov	r4, r0
 8014342:	460d      	mov	r5, r1
 8014344:	b113      	cbz	r3, 801434c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8014346:	790b      	ldrb	r3, [r1, #4]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d044      	beq.n	80143d6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801434c:	f104 0804 	add.w	r8, r4, #4
 8014350:	a803      	add	r0, sp, #12
 8014352:	4641      	mov	r1, r8
 8014354:	f7ff fbd6 	bl	8013b04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014358:	792b      	ldrb	r3, [r5, #4]
 801435a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801435e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8014362:	b983      	cbnz	r3, 8014386 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8014364:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8014368:	892a      	ldrh	r2, [r5, #8]
 801436a:	88e9      	ldrh	r1, [r5, #6]
 801436c:	4640      	mov	r0, r8
 801436e:	1b92      	subs	r2, r2, r6
 8014370:	9301      	str	r3, [sp, #4]
 8014372:	1bc9      	subs	r1, r1, r7
 8014374:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8014378:	b212      	sxth	r2, r2
 801437a:	9300      	str	r3, [sp, #0]
 801437c:	b209      	sxth	r1, r1
 801437e:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8014382:	f7f9 f8e3 	bl	800d54c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8014386:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014388:	b329      	cbz	r1, 80143d6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801438a:	a805      	add	r0, sp, #20
 801438c:	f7ff fbba 	bl	8013b04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014390:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014394:	792b      	ldrb	r3, [r5, #4]
 8014396:	a907      	add	r1, sp, #28
 8014398:	1abf      	subs	r7, r7, r2
 801439a:	88ea      	ldrh	r2, [r5, #6]
 801439c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801439e:	4417      	add	r7, r2
 80143a0:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 80143a2:	f88d 3020 	strb.w	r3, [sp, #32]
 80143a6:	4417      	add	r7, r2
 80143a8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80143ac:	1ab6      	subs	r6, r6, r2
 80143ae:	892a      	ldrh	r2, [r5, #8]
 80143b0:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 80143b4:	4416      	add	r6, r2
 80143b6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80143b8:	4416      	add	r6, r2
 80143ba:	4a08      	ldr	r2, [pc, #32]	@ (80143dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80143bc:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 80143c0:	2600      	movs	r6, #0
 80143c2:	9207      	str	r2, [sp, #28]
 80143c4:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 80143c8:	6803      	ldr	r3, [r0, #0]
 80143ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80143cc:	4798      	blx	r3
 80143ce:	792b      	ldrb	r3, [r5, #4]
 80143d0:	b10b      	cbz	r3, 80143d6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80143d2:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 80143d6:	b00a      	add	sp, #40	@ 0x28
 80143d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143dc:	08023e54 	.word	0x08023e54

080143e0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80143e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143e4:	460c      	mov	r4, r1
 80143e6:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80143e8:	b088      	sub	sp, #32
 80143ea:	4605      	mov	r5, r0
 80143ec:	2900      	cmp	r1, #0
 80143ee:	d06d      	beq.n	80144cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80143f0:	4668      	mov	r0, sp
 80143f2:	f7ff fb87 	bl	8013b04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80143f6:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 80143f8:	88e3      	ldrh	r3, [r4, #6]
 80143fa:	f9bd 8000 	ldrsh.w	r8, [sp]
 80143fe:	440b      	add	r3, r1
 8014400:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8014404:	b21b      	sxth	r3, r3
 8014406:	4543      	cmp	r3, r8
 8014408:	db31      	blt.n	801446e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801440a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801440e:	44c4      	add	ip, r8
 8014410:	fa0f fc8c 	sxth.w	ip, ip
 8014414:	4563      	cmp	r3, ip
 8014416:	da2a      	bge.n	801446e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014418:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801441a:	8926      	ldrh	r6, [r4, #8]
 801441c:	4416      	add	r6, r2
 801441e:	b236      	sxth	r6, r6
 8014420:	42be      	cmp	r6, r7
 8014422:	db24      	blt.n	801446e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014424:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014428:	4438      	add	r0, r7
 801442a:	b200      	sxth	r0, r0
 801442c:	4286      	cmp	r6, r0
 801442e:	da1e      	bge.n	801446e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014430:	8963      	ldrh	r3, [r4, #10]
 8014432:	4419      	add	r1, r3
 8014434:	b209      	sxth	r1, r1
 8014436:	4541      	cmp	r1, r8
 8014438:	db08      	blt.n	801444c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801443a:	4561      	cmp	r1, ip
 801443c:	da06      	bge.n	801444c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801443e:	89a3      	ldrh	r3, [r4, #12]
 8014440:	441a      	add	r2, r3
 8014442:	b212      	sxth	r2, r2
 8014444:	42ba      	cmp	r2, r7
 8014446:	db01      	blt.n	801444c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014448:	4282      	cmp	r2, r0
 801444a:	db10      	blt.n	801446e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801444c:	4b21      	ldr	r3, [pc, #132]	@ (80144d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801444e:	a904      	add	r1, sp, #16
 8014450:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8014452:	9304      	str	r3, [sp, #16]
 8014454:	2302      	movs	r3, #2
 8014456:	f88d 3014 	strb.w	r3, [sp, #20]
 801445a:	2300      	movs	r3, #0
 801445c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014460:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014464:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014468:	6803      	ldr	r3, [r0, #0]
 801446a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801446c:	4798      	blx	r3
 801446e:	1d29      	adds	r1, r5, #4
 8014470:	a802      	add	r0, sp, #8
 8014472:	f7ff fb47 	bl	8013b04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014476:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801447a:	88e0      	ldrh	r0, [r4, #6]
 801447c:	eba3 0808 	sub.w	r8, r3, r8
 8014480:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014484:	7921      	ldrb	r1, [r4, #4]
 8014486:	fa1f f888 	uxth.w	r8, r8
 801448a:	1bdf      	subs	r7, r3, r7
 801448c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8014490:	b2bb      	uxth	r3, r7
 8014492:	4440      	add	r0, r8
 8014494:	8922      	ldrh	r2, [r4, #8]
 8014496:	8967      	ldrh	r7, [r4, #10]
 8014498:	4460      	add	r0, ip
 801449a:	89a4      	ldrh	r4, [r4, #12]
 801449c:	441a      	add	r2, r3
 801449e:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 80144a0:	44b8      	add	r8, r7
 80144a2:	4423      	add	r3, r4
 80144a4:	f8ad 0016 	strh.w	r0, [sp, #22]
 80144a8:	4432      	add	r2, r6
 80144aa:	44e0      	add	r8, ip
 80144ac:	4433      	add	r3, r6
 80144ae:	4c0a      	ldr	r4, [pc, #40]	@ (80144d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80144b0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80144b2:	f88d 1014 	strb.w	r1, [sp, #20]
 80144b6:	a904      	add	r1, sp, #16
 80144b8:	9404      	str	r4, [sp, #16]
 80144ba:	f8ad 2018 	strh.w	r2, [sp, #24]
 80144be:	f8ad 801a 	strh.w	r8, [sp, #26]
 80144c2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80144c6:	6803      	ldr	r3, [r0, #0]
 80144c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80144ca:	4798      	blx	r3
 80144cc:	b008      	add	sp, #32
 80144ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144d2:	bf00      	nop
 80144d4:	08023e54 	.word	0x08023e54
 80144d8:	08023e68 	.word	0x08023e68

080144dc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80144dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80144de:	4604      	mov	r4, r0
 80144e0:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80144e4:	3201      	adds	r2, #1
 80144e6:	d112      	bne.n	801450e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80144e8:	2500      	movs	r5, #0
 80144ea:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80144ee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80144f2:	6803      	ldr	r3, [r0, #0]
 80144f4:	9500      	str	r5, [sp, #0]
 80144f6:	466d      	mov	r5, sp
 80144f8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80144fc:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014500:	4629      	mov	r1, r5
 8014502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014504:	4798      	blx	r3
 8014506:	e895 0003 	ldmia.w	r5, {r0, r1}
 801450a:	e884 0003 	stmia.w	r4, {r0, r1}
 801450e:	4620      	mov	r0, r4
 8014510:	b003      	add	sp, #12
 8014512:	bd30      	pop	{r4, r5, pc}

08014514 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8014514:	b513      	push	{r0, r1, r4, lr}
 8014516:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801451a:	4604      	mov	r4, r0
 801451c:	3301      	adds	r3, #1
 801451e:	d109      	bne.n	8014534 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8014520:	4601      	mov	r1, r0
 8014522:	4668      	mov	r0, sp
 8014524:	f7ff faee 	bl	8013b04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014528:	f8bd 3000 	ldrh.w	r3, [sp]
 801452c:	8423      	strh	r3, [r4, #32]
 801452e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014532:	8463      	strh	r3, [r4, #34]	@ 0x22
 8014534:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8014538:	b002      	add	sp, #8
 801453a:	bd10      	pop	{r4, pc}

0801453c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801453c:	b513      	push	{r0, r1, r4, lr}
 801453e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8014542:	4604      	mov	r4, r0
 8014544:	3301      	adds	r3, #1
 8014546:	d109      	bne.n	801455c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8014548:	4601      	mov	r1, r0
 801454a:	4668      	mov	r0, sp
 801454c:	f7ff fada 	bl	8013b04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014550:	f8bd 3000 	ldrh.w	r3, [sp]
 8014554:	8423      	strh	r3, [r4, #32]
 8014556:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801455a:	8463      	strh	r3, [r4, #34]	@ 0x22
 801455c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8014560:	b002      	add	sp, #8
 8014562:	bd10      	pop	{r4, pc}

08014564 <_ZN8touchgfx6ScreenC1Ev>:
 8014564:	b570      	push	{r4, r5, r6, lr}
 8014566:	4b17      	ldr	r3, [pc, #92]	@ (80145c4 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8014568:	4605      	mov	r5, r0
 801456a:	4a17      	ldr	r2, [pc, #92]	@ (80145c8 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801456c:	2101      	movs	r1, #1
 801456e:	f845 3b04 	str.w	r3, [r5], #4
 8014572:	2300      	movs	r3, #0
 8014574:	6042      	str	r2, [r0, #4]
 8014576:	4604      	mov	r4, r0
 8014578:	8103      	strh	r3, [r0, #8]
 801457a:	8143      	strh	r3, [r0, #10]
 801457c:	8183      	strh	r3, [r0, #12]
 801457e:	81c3      	strh	r3, [r0, #14]
 8014580:	8203      	strh	r3, [r0, #16]
 8014582:	8243      	strh	r3, [r0, #18]
 8014584:	8283      	strh	r3, [r0, #20]
 8014586:	82c3      	strh	r3, [r0, #22]
 8014588:	6203      	str	r3, [r0, #32]
 801458a:	8483      	strh	r3, [r0, #36]	@ 0x24
 801458c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801458e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8014592:	6343      	str	r3, [r0, #52]	@ 0x34
 8014594:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8014598:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801459c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80145a0:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 80145a4:	4b09      	ldr	r3, [pc, #36]	@ (80145cc <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80145a6:	4628      	mov	r0, r5
 80145a8:	f9b3 6000 	ldrsh.w	r6, [r3]
 80145ac:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80145ae:	4a08      	ldr	r2, [pc, #32]	@ (80145d0 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80145b0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80145b4:	4798      	blx	r3
 80145b6:	6863      	ldr	r3, [r4, #4]
 80145b8:	4628      	mov	r0, r5
 80145ba:	4631      	mov	r1, r6
 80145bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80145be:	4798      	blx	r3
 80145c0:	4620      	mov	r0, r4
 80145c2:	bd70      	pop	{r4, r5, r6, pc}
 80145c4:	08023e90 	.word	0x08023e90
 80145c8:	08023aa8 	.word	0x08023aa8
 80145cc:	2402514e 	.word	0x2402514e
 80145d0:	2402514c 	.word	0x2402514c

080145d4 <_ZN8touchgfx6Screen4drawEv>:
 80145d4:	4b09      	ldr	r3, [pc, #36]	@ (80145fc <_ZN8touchgfx6Screen4drawEv+0x28>)
 80145d6:	b507      	push	{r0, r1, r2, lr}
 80145d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80145dc:	2100      	movs	r1, #0
 80145de:	4b08      	ldr	r3, [pc, #32]	@ (8014600 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80145e0:	9100      	str	r1, [sp, #0]
 80145e2:	4669      	mov	r1, sp
 80145e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80145e8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80145ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 80145f0:	6803      	ldr	r3, [r0, #0]
 80145f2:	689b      	ldr	r3, [r3, #8]
 80145f4:	4798      	blx	r3
 80145f6:	b003      	add	sp, #12
 80145f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80145fc:	2402514c 	.word	0x2402514c
 8014600:	2402514e 	.word	0x2402514e

08014604 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8014604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014608:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801460c:	b089      	sub	sp, #36	@ 0x24
 801460e:	4680      	mov	r8, r0
 8014610:	460c      	mov	r4, r1
 8014612:	2b00      	cmp	r3, #0
 8014614:	4615      	mov	r5, r2
 8014616:	dd0e      	ble.n	8014636 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014618:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801461c:	2b00      	cmp	r3, #0
 801461e:	dd0a      	ble.n	8014636 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014620:	4628      	mov	r0, r5
 8014622:	f7ff ff5b 	bl	80144dc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014626:	4621      	mov	r1, r4
 8014628:	f7fe f879 	bl	801271e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801462c:	69eb      	ldr	r3, [r5, #28]
 801462e:	b928      	cbnz	r0, 801463c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8014630:	461d      	mov	r5, r3
 8014632:	2b00      	cmp	r3, #0
 8014634:	d1f4      	bne.n	8014620 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8014636:	b009      	add	sp, #36	@ 0x24
 8014638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801463c:	ae04      	add	r6, sp, #16
 801463e:	2b00      	cmp	r3, #0
 8014640:	f000 80b5 	beq.w	80147ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014644:	682b      	ldr	r3, [r5, #0]
 8014646:	4629      	mov	r1, r5
 8014648:	a802      	add	r0, sp, #8
 801464a:	68db      	ldr	r3, [r3, #12]
 801464c:	4798      	blx	r3
 801464e:	4628      	mov	r0, r5
 8014650:	f7ff ff60 	bl	8014514 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014654:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8014658:	4407      	add	r7, r0
 801465a:	4628      	mov	r0, r5
 801465c:	f7ff ff6e 	bl	801453c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014660:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014664:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8014668:	b23f      	sxth	r7, r7
 801466a:	4418      	add	r0, r3
 801466c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014670:	4621      	mov	r1, r4
 8014672:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014676:	f8ad 0012 	strh.w	r0, [sp, #18]
 801467a:	4630      	mov	r0, r6
 801467c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014680:	f8ad 7010 	strh.w	r7, [sp, #16]
 8014684:	f7f9 f844 	bl	800d710 <_ZN8touchgfx4RectaNERKS0_>
 8014688:	4628      	mov	r0, r5
 801468a:	f7ff ff27 	bl	80144dc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801468e:	ab06      	add	r3, sp, #24
 8014690:	4602      	mov	r2, r0
 8014692:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014696:	e883 0003 	stmia.w	r3, {r0, r1}
 801469a:	4611      	mov	r1, r2
 801469c:	4618      	mov	r0, r3
 801469e:	f7f9 f837 	bl	800d710 <_ZN8touchgfx4RectaNERKS0_>
 80146a2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80146a6:	f9b4 1000 	ldrsh.w	r1, [r4]
 80146aa:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80146ae:	4299      	cmp	r1, r3
 80146b0:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80146b4:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80146b8:	d10b      	bne.n	80146d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80146ba:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80146be:	4552      	cmp	r2, sl
 80146c0:	d107      	bne.n	80146d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80146c2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80146c6:	455a      	cmp	r2, fp
 80146c8:	d103      	bne.n	80146d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80146ca:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80146ce:	454a      	cmp	r2, r9
 80146d0:	d06d      	beq.n	80147ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80146d2:	f1bb 0f00 	cmp.w	fp, #0
 80146d6:	dd65      	ble.n	80147a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80146d8:	f1b9 0f00 	cmp.w	r9, #0
 80146dc:	dd62      	ble.n	80147a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80146de:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80146e2:	fa1f f08a 	uxth.w	r0, sl
 80146e6:	4552      	cmp	r2, sl
 80146e8:	9000      	str	r0, [sp, #0]
 80146ea:	da12      	bge.n	8014712 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80146ec:	9301      	str	r3, [sp, #4]
 80146ee:	9b00      	ldr	r3, [sp, #0]
 80146f0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80146f4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80146f8:	1a9a      	subs	r2, r3, r2
 80146fa:	f8ad 1010 	strh.w	r1, [sp, #16]
 80146fe:	4631      	mov	r1, r6
 8014700:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014704:	4640      	mov	r0, r8
 8014706:	f8ad 2016 	strh.w	r2, [sp, #22]
 801470a:	69ea      	ldr	r2, [r5, #28]
 801470c:	f7ff ff7a 	bl	8014604 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014710:	9b01      	ldr	r3, [sp, #4]
 8014712:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014716:	b29f      	uxth	r7, r3
 8014718:	429a      	cmp	r2, r3
 801471a:	da0d      	bge.n	8014738 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801471c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014720:	1aba      	subs	r2, r7, r2
 8014722:	f8ad a012 	strh.w	sl, [sp, #18]
 8014726:	4631      	mov	r1, r6
 8014728:	f8ad 2014 	strh.w	r2, [sp, #20]
 801472c:	4640      	mov	r0, r8
 801472e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014732:	69ea      	ldr	r2, [r5, #28]
 8014734:	f7ff ff66 	bl	8014604 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014738:	8822      	ldrh	r2, [r4, #0]
 801473a:	445f      	add	r7, fp
 801473c:	88a3      	ldrh	r3, [r4, #4]
 801473e:	b2bf      	uxth	r7, r7
 8014740:	4413      	add	r3, r2
 8014742:	b23a      	sxth	r2, r7
 8014744:	b29b      	uxth	r3, r3
 8014746:	b219      	sxth	r1, r3
 8014748:	4291      	cmp	r1, r2
 801474a:	dd0d      	ble.n	8014768 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801474c:	1bdb      	subs	r3, r3, r7
 801474e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014752:	f8ad a012 	strh.w	sl, [sp, #18]
 8014756:	4631      	mov	r1, r6
 8014758:	f8ad 3014 	strh.w	r3, [sp, #20]
 801475c:	4640      	mov	r0, r8
 801475e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014762:	69ea      	ldr	r2, [r5, #28]
 8014764:	f7ff ff4e 	bl	8014604 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014768:	88e2      	ldrh	r2, [r4, #6]
 801476a:	8863      	ldrh	r3, [r4, #2]
 801476c:	4413      	add	r3, r2
 801476e:	9a00      	ldr	r2, [sp, #0]
 8014770:	444a      	add	r2, r9
 8014772:	b29b      	uxth	r3, r3
 8014774:	fa1f f982 	uxth.w	r9, r2
 8014778:	b219      	sxth	r1, r3
 801477a:	fa0f f289 	sxth.w	r2, r9
 801477e:	428a      	cmp	r2, r1
 8014780:	da15      	bge.n	80147ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014782:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014786:	eba3 0309 	sub.w	r3, r3, r9
 801478a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801478e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8014792:	4631      	mov	r1, r6
 8014794:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014798:	f8ad 2012 	strh.w	r2, [sp, #18]
 801479c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80147a0:	69ea      	ldr	r2, [r5, #28]
 80147a2:	e001      	b.n	80147a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80147a4:	69ea      	ldr	r2, [r5, #28]
 80147a6:	4621      	mov	r1, r4
 80147a8:	4640      	mov	r0, r8
 80147aa:	f7ff ff2b 	bl	8014604 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80147ae:	4628      	mov	r0, r5
 80147b0:	f7ff fe94 	bl	80144dc <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80147b4:	6861      	ldr	r1, [r4, #4]
 80147b6:	4602      	mov	r2, r0
 80147b8:	4633      	mov	r3, r6
 80147ba:	6820      	ldr	r0, [r4, #0]
 80147bc:	c303      	stmia	r3!, {r0, r1}
 80147be:	4611      	mov	r1, r2
 80147c0:	4630      	mov	r0, r6
 80147c2:	f7f8 ffa5 	bl	800d710 <_ZN8touchgfx4RectaNERKS0_>
 80147c6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	f77f af33 	ble.w	8014636 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80147d0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	f77f af2e 	ble.w	8014636 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80147da:	4628      	mov	r0, r5
 80147dc:	f7ff fe9a 	bl	8014514 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80147e0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80147e4:	1a18      	subs	r0, r3, r0
 80147e6:	f8ad 0010 	strh.w	r0, [sp, #16]
 80147ea:	4628      	mov	r0, r5
 80147ec:	f7ff fea6 	bl	801453c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80147f0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80147f4:	4631      	mov	r1, r6
 80147f6:	1a18      	subs	r0, r3, r0
 80147f8:	f8ad 0012 	strh.w	r0, [sp, #18]
 80147fc:	4628      	mov	r0, r5
 80147fe:	682b      	ldr	r3, [r5, #0]
 8014800:	689b      	ldr	r3, [r3, #8]
 8014802:	4798      	blx	r3
 8014804:	e717      	b.n	8014636 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08014806 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8014806:	b570      	push	{r4, r5, r6, lr}
 8014808:	1d06      	adds	r6, r0, #4
 801480a:	b086      	sub	sp, #24
 801480c:	460c      	mov	r4, r1
 801480e:	2300      	movs	r3, #0
 8014810:	4631      	mov	r1, r6
 8014812:	4605      	mov	r5, r0
 8014814:	a802      	add	r0, sp, #8
 8014816:	9301      	str	r3, [sp, #4]
 8014818:	f7ff f974 	bl	8013b04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801481c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014820:	8822      	ldrh	r2, [r4, #0]
 8014822:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8014826:	1ad2      	subs	r2, r2, r3
 8014828:	8863      	ldrh	r3, [r4, #2]
 801482a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801482e:	1a5b      	subs	r3, r3, r1
 8014830:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8014834:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014838:	aa01      	add	r2, sp, #4
 801483a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801483e:	4630      	mov	r0, r6
 8014840:	f8ad 1016 	strh.w	r1, [sp, #22]
 8014844:	a904      	add	r1, sp, #16
 8014846:	f8ad 3012 	strh.w	r3, [sp, #18]
 801484a:	f7f9 f839 	bl	800d8c0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801484e:	9a01      	ldr	r2, [sp, #4]
 8014850:	b11a      	cbz	r2, 801485a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8014852:	4621      	mov	r1, r4
 8014854:	4628      	mov	r0, r5
 8014856:	f7ff fed5 	bl	8014604 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801485a:	b006      	add	sp, #24
 801485c:	bd70      	pop	{r4, r5, r6, pc}

0801485e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801485e:	4602      	mov	r2, r0
 8014860:	b530      	push	{r4, r5, lr}
 8014862:	4604      	mov	r4, r0
 8014864:	b085      	sub	sp, #20
 8014866:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801486a:	460d      	mov	r5, r1
 801486c:	466b      	mov	r3, sp
 801486e:	6851      	ldr	r1, [r2, #4]
 8014870:	c303      	stmia	r3!, {r0, r1}
 8014872:	4629      	mov	r1, r5
 8014874:	4668      	mov	r0, sp
 8014876:	f7f8 ff4b 	bl	800d710 <_ZN8touchgfx4RectaNERKS0_>
 801487a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801487e:	b12b      	cbz	r3, 801488c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8014880:	4669      	mov	r1, sp
 8014882:	4620      	mov	r0, r4
 8014884:	f7ff ffbf 	bl	8014806 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8014888:	b005      	add	sp, #20
 801488a:	bd30      	pop	{r4, r5, pc}
 801488c:	3404      	adds	r4, #4
 801488e:	a802      	add	r0, sp, #8
 8014890:	4621      	mov	r1, r4
 8014892:	f7ff f937 	bl	8013b04 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014896:	f8bd 3000 	ldrh.w	r3, [sp]
 801489a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801489e:	4669      	mov	r1, sp
 80148a0:	4620      	mov	r0, r4
 80148a2:	1a9b      	subs	r3, r3, r2
 80148a4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80148a8:	f8ad 3000 	strh.w	r3, [sp]
 80148ac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80148b0:	1a9b      	subs	r3, r3, r2
 80148b2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80148b6:	f7f8 ffca 	bl	800d84e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80148ba:	e7e5      	b.n	8014888 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080148bc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80148bc:	460b      	mov	r3, r1
 80148be:	680a      	ldr	r2, [r1, #0]
 80148c0:	1d01      	adds	r1, r0, #4
 80148c2:	6992      	ldr	r2, [r2, #24]
 80148c4:	4618      	mov	r0, r3
 80148c6:	4710      	bx	r2

080148c8 <_ZN8touchgfx12TextProviderC1Ev>:
 80148c8:	b538      	push	{r3, r4, r5, lr}
 80148ca:	2500      	movs	r5, #0
 80148cc:	2302      	movs	r3, #2
 80148ce:	4604      	mov	r4, r0
 80148d0:	220e      	movs	r2, #14
 80148d2:	7403      	strb	r3, [r0, #16]
 80148d4:	4629      	mov	r1, r5
 80148d6:	6145      	str	r5, [r0, #20]
 80148d8:	7605      	strb	r5, [r0, #24]
 80148da:	83c5      	strh	r5, [r0, #30]
 80148dc:	8405      	strh	r5, [r0, #32]
 80148de:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80148e0:	8705      	strh	r5, [r0, #56]	@ 0x38
 80148e2:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 80148e4:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 80148e8:	e9c0 5500 	strd	r5, r5, [r0]
 80148ec:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 80148f0:	304c      	adds	r0, #76	@ 0x4c
 80148f2:	f00b ff19 	bl	8020728 <memset>
 80148f6:	2301      	movs	r3, #1
 80148f8:	4620      	mov	r0, r4
 80148fa:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 80148fe:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8014902:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8014906:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801490a:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801490e:	f7ef fb3d 	bl	8003f8c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8014912:	4620      	mov	r0, r4
 8014914:	bd38      	pop	{r3, r4, r5, pc}

08014916 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8014916:	b530      	push	{r4, r5, lr}
 8014918:	2500      	movs	r5, #0
 801491a:	2401      	movs	r4, #1
 801491c:	6843      	ldr	r3, [r0, #4]
 801491e:	b913      	cbnz	r3, 8014926 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8014920:	6803      	ldr	r3, [r0, #0]
 8014922:	b313      	cbz	r3, 801496a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014924:	6043      	str	r3, [r0, #4]
 8014926:	7e03      	ldrb	r3, [r0, #24]
 8014928:	b143      	cbz	r3, 801493c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801492a:	6943      	ldr	r3, [r0, #20]
 801492c:	b12b      	cbz	r3, 801493a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801492e:	881a      	ldrh	r2, [r3, #0]
 8014930:	b11a      	cbz	r2, 801493a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8014932:	1c9a      	adds	r2, r3, #2
 8014934:	6142      	str	r2, [r0, #20]
 8014936:	8818      	ldrh	r0, [r3, #0]
 8014938:	bd30      	pop	{r4, r5, pc}
 801493a:	7605      	strb	r5, [r0, #24]
 801493c:	6843      	ldr	r3, [r0, #4]
 801493e:	8819      	ldrh	r1, [r3, #0]
 8014940:	b199      	cbz	r1, 801496a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014942:	1c9a      	adds	r2, r3, #2
 8014944:	2902      	cmp	r1, #2
 8014946:	6042      	str	r2, [r0, #4]
 8014948:	d1f5      	bne.n	8014936 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801494a:	7c03      	ldrb	r3, [r0, #16]
 801494c:	2b01      	cmp	r3, #1
 801494e:	d8e5      	bhi.n	801491c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014950:	1c5a      	adds	r2, r3, #1
 8014952:	3302      	adds	r3, #2
 8014954:	7402      	strb	r2, [r0, #16]
 8014956:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801495a:	6143      	str	r3, [r0, #20]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d0dd      	beq.n	801491c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014960:	881b      	ldrh	r3, [r3, #0]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d0da      	beq.n	801491c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014966:	7604      	strb	r4, [r0, #24]
 8014968:	e7d8      	b.n	801491c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801496a:	2000      	movs	r0, #0
 801496c:	e7e4      	b.n	8014938 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801496e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801496e:	6001      	str	r1, [r0, #0]
 8014970:	2100      	movs	r1, #0
 8014972:	b430      	push	{r4, r5}
 8014974:	6041      	str	r1, [r0, #4]
 8014976:	6815      	ldr	r5, [r2, #0]
 8014978:	6085      	str	r5, [r0, #8]
 801497a:	6852      	ldr	r2, [r2, #4]
 801497c:	6443      	str	r3, [r0, #68]	@ 0x44
 801497e:	9b02      	ldr	r3, [sp, #8]
 8014980:	60c2      	str	r2, [r0, #12]
 8014982:	7401      	strb	r1, [r0, #16]
 8014984:	6141      	str	r1, [r0, #20]
 8014986:	7601      	strb	r1, [r0, #24]
 8014988:	8701      	strh	r1, [r0, #56]	@ 0x38
 801498a:	8401      	strh	r1, [r0, #32]
 801498c:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8014990:	6483      	str	r3, [r0, #72]	@ 0x48
 8014992:	bc30      	pop	{r4, r5}
 8014994:	f7ef bafa 	b.w	8003f8c <_ZN8touchgfx12TextProvider18initializeInternalEv>

08014998 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8014998:	b5f0      	push	{r4, r5, r6, r7, lr}
 801499a:	4605      	mov	r5, r0
 801499c:	4608      	mov	r0, r1
 801499e:	b1f1      	cbz	r1, 80149de <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80149a0:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 80149a4:	460b      	mov	r3, r1
 80149a6:	f101 0708 	add.w	r7, r1, #8
 80149aa:	4622      	mov	r2, r4
 80149ac:	6818      	ldr	r0, [r3, #0]
 80149ae:	3308      	adds	r3, #8
 80149b0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80149b4:	4626      	mov	r6, r4
 80149b6:	42bb      	cmp	r3, r7
 80149b8:	c603      	stmia	r6!, {r0, r1}
 80149ba:	4634      	mov	r4, r6
 80149bc:	d1f6      	bne.n	80149ac <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80149be:	6818      	ldr	r0, [r3, #0]
 80149c0:	6030      	str	r0, [r6, #0]
 80149c2:	4610      	mov	r0, r2
 80149c4:	889b      	ldrh	r3, [r3, #4]
 80149c6:	80b3      	strh	r3, [r6, #4]
 80149c8:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80149cc:	015b      	lsls	r3, r3, #5
 80149ce:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80149d2:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 80149d6:	430b      	orrs	r3, r1
 80149d8:	425b      	negs	r3, r3
 80149da:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 80149de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080149e0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80149e0:	b538      	push	{r3, r4, r5, lr}
 80149e2:	460c      	mov	r4, r1
 80149e4:	6811      	ldr	r1, [r2, #0]
 80149e6:	4610      	mov	r0, r2
 80149e8:	68cd      	ldr	r5, [r1, #12]
 80149ea:	4619      	mov	r1, r3
 80149ec:	47a8      	blx	r5
 80149ee:	2800      	cmp	r0, #0
 80149f0:	bf08      	it	eq
 80149f2:	4620      	moveq	r0, r4
 80149f4:	bd38      	pop	{r3, r4, r5, pc}
	...

080149f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80149f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149fa:	4604      	mov	r4, r0
 80149fc:	4615      	mov	r5, r2
 80149fe:	4608      	mov	r0, r1
 8014a00:	b93a      	cbnz	r2, 8014a12 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8014a02:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8014a06:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 8014a0a:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 8014a0e:	4628      	mov	r0, r5
 8014a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a12:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8014a16:	f46f 6763 	mvn.w	r7, #3632	@ 0xe30
 8014a1a:	8893      	ldrh	r3, [r2, #4]
 8014a1c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8014a20:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8014a24:	79ee      	ldrb	r6, [r5, #7]
 8014a26:	4316      	orrs	r6, r2
 8014a28:	19da      	adds	r2, r3, r7
 8014a2a:	b291      	uxth	r1, r2
 8014a2c:	b2b7      	uxth	r7, r6
 8014a2e:	291d      	cmp	r1, #29
 8014a30:	d87b      	bhi.n	8014b2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8014a32:	2201      	movs	r2, #1
 8014a34:	10f6      	asrs	r6, r6, #3
 8014a36:	408a      	lsls	r2, r1
 8014a38:	4974      	ldr	r1, [pc, #464]	@ (8014c0c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8014a3a:	420a      	tst	r2, r1
 8014a3c:	d12e      	bne.n	8014a9c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8014a3e:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8014a42:	d072      	beq.n	8014b2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8014a44:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 8014a48:	462b      	mov	r3, r5
 8014a4a:	f105 0e08 	add.w	lr, r5, #8
 8014a4e:	4615      	mov	r5, r2
 8014a50:	6818      	ldr	r0, [r3, #0]
 8014a52:	3308      	adds	r3, #8
 8014a54:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8014a58:	4694      	mov	ip, r2
 8014a5a:	4573      	cmp	r3, lr
 8014a5c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014a60:	4662      	mov	r2, ip
 8014a62:	d1f5      	bne.n	8014a50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8014a64:	6818      	ldr	r0, [r3, #0]
 8014a66:	f8cc 0000 	str.w	r0, [ip]
 8014a6a:	889b      	ldrh	r3, [r3, #4]
 8014a6c:	f8ac 3004 	strh.w	r3, [ip, #4]
 8014a70:	b2b3      	uxth	r3, r6
 8014a72:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8014a76:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 8014a7a:	1aca      	subs	r2, r1, r3
 8014a7c:	1bcf      	subs	r7, r1, r7
 8014a7e:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8014a82:	b292      	uxth	r2, r2
 8014a84:	1afb      	subs	r3, r7, r3
 8014a86:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 8014a8a:	10d2      	asrs	r2, r2, #3
 8014a8c:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8014a90:	4302      	orrs	r2, r0
 8014a92:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 8014a96:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8014a9a:	e7b8      	b.n	8014a0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8014a9c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8014a9e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014aa2:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8014aa4:	f640 6333 	movw	r3, #3635	@ 0xe33
 8014aa8:	4299      	cmp	r1, r3
 8014aaa:	d110      	bne.n	8014ace <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8014aac:	6803      	ldr	r3, [r0, #0]
 8014aae:	68db      	ldr	r3, [r3, #12]
 8014ab0:	4798      	blx	r3
 8014ab2:	7b41      	ldrb	r1, [r0, #13]
 8014ab4:	00cb      	lsls	r3, r1, #3
 8014ab6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014aba:	7a03      	ldrb	r3, [r0, #8]
 8014abc:	0648      	lsls	r0, r1, #25
 8014abe:	ea43 0302 	orr.w	r3, r3, r2
 8014ac2:	bf44      	itt	mi
 8014ac4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014ac8:	b21b      	sxthmi	r3, r3
 8014aca:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014ace:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8014ad2:	462a      	mov	r2, r5
 8014ad4:	f105 0c08 	add.w	ip, r5, #8
 8014ad8:	443b      	add	r3, r7
 8014ada:	4433      	add	r3, r6
 8014adc:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 8014ae0:	b29b      	uxth	r3, r3
 8014ae2:	4635      	mov	r5, r6
 8014ae4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014ae8:	6810      	ldr	r0, [r2, #0]
 8014aea:	3208      	adds	r2, #8
 8014aec:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8014af0:	4637      	mov	r7, r6
 8014af2:	4562      	cmp	r2, ip
 8014af4:	c703      	stmia	r7!, {r0, r1}
 8014af6:	463e      	mov	r6, r7
 8014af8:	d1f6      	bne.n	8014ae8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8014afa:	6810      	ldr	r0, [r2, #0]
 8014afc:	6038      	str	r0, [r7, #0]
 8014afe:	8892      	ldrh	r2, [r2, #4]
 8014b00:	80ba      	strh	r2, [r7, #4]
 8014b02:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8014b06:	10db      	asrs	r3, r3, #3
 8014b08:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8014b0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014b10:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8014b14:	4313      	orrs	r3, r2
 8014b16:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 8014b1a:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8014b1e:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8014b22:	1a9b      	subs	r3, r3, r2
 8014b24:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 8014b28:	e771      	b.n	8014a0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8014b2a:	f023 0204 	bic.w	r2, r3, #4
 8014b2e:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8014b32:	428a      	cmp	r2, r1
 8014b34:	d003      	beq.n	8014b3e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8014b36:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8014b3a:	4293      	cmp	r3, r2
 8014b3c:	d120      	bne.n	8014b80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8014b3e:	3b01      	subs	r3, #1
 8014b40:	4602      	mov	r2, r0
 8014b42:	4629      	mov	r1, r5
 8014b44:	4620      	mov	r0, r4
 8014b46:	b29b      	uxth	r3, r3
 8014b48:	f7ff ff4a 	bl	80149e0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014b4c:	7b41      	ldrb	r1, [r0, #13]
 8014b4e:	00cb      	lsls	r3, r1, #3
 8014b50:	0649      	lsls	r1, r1, #25
 8014b52:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014b56:	7a03      	ldrb	r3, [r0, #8]
 8014b58:	ea43 0302 	orr.w	r3, r3, r2
 8014b5c:	bf44      	itt	mi
 8014b5e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014b62:	b21b      	sxthmi	r3, r3
 8014b64:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014b68:	7b6b      	ldrb	r3, [r5, #13]
 8014b6a:	7aaa      	ldrb	r2, [r5, #10]
 8014b6c:	005b      	lsls	r3, r3, #1
 8014b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014b72:	4313      	orrs	r3, r2
 8014b74:	115a      	asrs	r2, r3, #5
 8014b76:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8014b7a:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8014b7e:	e035      	b.n	8014bec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8014b80:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8014b84:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 8014b88:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8014b8c:	7a2a      	ldrb	r2, [r5, #8]
 8014b8e:	ea42 0201 	orr.w	r2, r2, r1
 8014b92:	f640 6109 	movw	r1, #3593	@ 0xe09
 8014b96:	bf1c      	itt	ne
 8014b98:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 8014b9c:	b212      	sxthne	r2, r2
 8014b9e:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 8014ba2:	f023 0210 	bic.w	r2, r3, #16
 8014ba6:	428a      	cmp	r2, r1
 8014ba8:	d003      	beq.n	8014bb2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8014baa:	f640 6213 	movw	r2, #3603	@ 0xe13
 8014bae:	4293      	cmp	r3, r2
 8014bb0:	d129      	bne.n	8014c06 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8014bb2:	7b6e      	ldrb	r6, [r5, #13]
 8014bb4:	4629      	mov	r1, r5
 8014bb6:	0076      	lsls	r6, r6, #1
 8014bb8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8014bbc:	7aae      	ldrb	r6, [r5, #10]
 8014bbe:	4316      	orrs	r6, r2
 8014bc0:	f640 6213 	movw	r2, #3603	@ 0xe13
 8014bc4:	4293      	cmp	r3, r2
 8014bc6:	4602      	mov	r2, r0
 8014bc8:	4620      	mov	r0, r4
 8014bca:	bf16      	itet	ne
 8014bcc:	f103 33ff 	addne.w	r3, r3, #4294967295
 8014bd0:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8014bd4:	b29b      	uxthne	r3, r3
 8014bd6:	f7ff ff03 	bl	80149e0 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014bda:	7b43      	ldrb	r3, [r0, #13]
 8014bdc:	7a82      	ldrb	r2, [r0, #10]
 8014bde:	005b      	lsls	r3, r3, #1
 8014be0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014be4:	4313      	orrs	r3, r2
 8014be6:	1af6      	subs	r6, r6, r3
 8014be8:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 8014bec:	7b69      	ldrb	r1, [r5, #13]
 8014bee:	00cb      	lsls	r3, r1, #3
 8014bf0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014bf4:	7a2b      	ldrb	r3, [r5, #8]
 8014bf6:	4313      	orrs	r3, r2
 8014bf8:	064a      	lsls	r2, r1, #25
 8014bfa:	bf44      	itt	mi
 8014bfc:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014c00:	b21b      	sxthmi	r3, r3
 8014c02:	1bdb      	subs	r3, r3, r7
 8014c04:	e747      	b.n	8014a96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8014c06:	2300      	movs	r3, #0
 8014c08:	e7b7      	b.n	8014b7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8014c0a:	bf00      	nop
 8014c0c:	3fc00079 	.word	0x3fc00079

08014c10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8014c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c14:	4604      	mov	r4, r0
 8014c16:	b942      	cbnz	r2, 8014c2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8014c18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014c1c:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 8014c20:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8014c24:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8014c28:	e047      	b.n	8014cba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8014c2a:	7b51      	ldrb	r1, [r2, #13]
 8014c2c:	8893      	ldrh	r3, [r2, #4]
 8014c2e:	010d      	lsls	r5, r1, #4
 8014c30:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8014c34:	79d5      	ldrb	r5, [r2, #7]
 8014c36:	4305      	orrs	r5, r0
 8014c38:	2d04      	cmp	r5, #4
 8014c3a:	bfcc      	ite	gt
 8014c3c:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8014c40:	f04f 0e01 	movle.w	lr, #1
 8014c44:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8014c48:	f200 80ab 	bhi.w	8014da2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8014c4c:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 8014c50:	4283      	cmp	r3, r0
 8014c52:	d216      	bcs.n	8014c82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014c54:	f240 605b 	movw	r0, #1627	@ 0x65b
 8014c58:	4283      	cmp	r3, r0
 8014c5a:	d859      	bhi.n	8014d10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8014c5c:	f240 6057 	movw	r0, #1623	@ 0x657
 8014c60:	4283      	cmp	r3, r0
 8014c62:	d20e      	bcs.n	8014c82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014c64:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8014c68:	d24a      	bcs.n	8014d00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8014c6a:	f240 604e 	movw	r0, #1614	@ 0x64e
 8014c6e:	4283      	cmp	r3, r0
 8014c70:	d207      	bcs.n	8014c82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014c72:	f240 601a 	movw	r0, #1562	@ 0x61a
 8014c76:	4283      	cmp	r3, r0
 8014c78:	d02a      	beq.n	8014cd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014c7a:	d821      	bhi.n	8014cc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8014c7c:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8014c80:	d35b      	bcc.n	8014d3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014c82:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8014c86:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8014c8a:	f040 80d0 	bne.w	8014e2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8014c8e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8014c92:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014c96:	f040 80ca 	bne.w	8014e2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8014c9a:	00cb      	lsls	r3, r1, #3
 8014c9c:	0649      	lsls	r1, r1, #25
 8014c9e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8014ca2:	7a13      	ldrb	r3, [r2, #8]
 8014ca4:	ea43 0300 	orr.w	r3, r3, r0
 8014ca8:	bf44      	itt	mi
 8014caa:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014cae:	b21b      	sxthmi	r3, r3
 8014cb0:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014cb4:	1b5d      	subs	r5, r3, r5
 8014cb6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8014cba:	4610      	mov	r0, r2
 8014cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014cc0:	f240 604b 	movw	r0, #1611	@ 0x64b
 8014cc4:	4283      	cmp	r3, r0
 8014cc6:	d338      	bcc.n	8014d3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014cc8:	f240 604c 	movw	r0, #1612	@ 0x64c
 8014ccc:	4283      	cmp	r3, r0
 8014cce:	d9d8      	bls.n	8014c82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014cd0:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8014cd4:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8014cd8:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014cdc:	f040 80f3 	bne.w	8014ec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8014ce0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8014ce4:	f040 80ef 	bne.w	8014ec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8014ce8:	00cb      	lsls	r3, r1, #3
 8014cea:	064e      	lsls	r6, r1, #25
 8014cec:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8014cf0:	7a13      	ldrb	r3, [r2, #8]
 8014cf2:	ea43 0300 	orr.w	r3, r3, r0
 8014cf6:	bf44      	itt	mi
 8014cf8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014cfc:	b21b      	sxthmi	r3, r3
 8014cfe:	e7d9      	b.n	8014cb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8014d00:	f240 6054 	movw	r0, #1620	@ 0x654
 8014d04:	4283      	cmp	r3, r0
 8014d06:	d8e3      	bhi.n	8014cd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014d08:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8014d0c:	d9e0      	bls.n	8014cd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014d0e:	e7b8      	b.n	8014c82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014d10:	f240 6074 	movw	r0, #1652	@ 0x674
 8014d14:	4283      	cmp	r3, r0
 8014d16:	d0b4      	beq.n	8014c82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014d18:	d82d      	bhi.n	8014d76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8014d1a:	f240 605e 	movw	r0, #1630	@ 0x65e
 8014d1e:	4283      	cmp	r3, r0
 8014d20:	d804      	bhi.n	8014d2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8014d22:	f240 605d 	movw	r0, #1629	@ 0x65d
 8014d26:	4283      	cmp	r3, r0
 8014d28:	d3d2      	bcc.n	8014cd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014d2a:	e7aa      	b.n	8014c82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014d2c:	f240 605f 	movw	r0, #1631	@ 0x65f
 8014d30:	4283      	cmp	r3, r0
 8014d32:	d0cd      	beq.n	8014cd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014d34:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8014d38:	d0a3      	beq.n	8014c82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014d3a:	00cb      	lsls	r3, r1, #3
 8014d3c:	0649      	lsls	r1, r1, #25
 8014d3e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8014d42:	7a13      	ldrb	r3, [r2, #8]
 8014d44:	ea43 0300 	orr.w	r3, r3, r0
 8014d48:	bf44      	itt	mi
 8014d4a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014d4e:	b21b      	sxthmi	r3, r3
 8014d50:	1b5d      	subs	r5, r3, r5
 8014d52:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014d56:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8014d5a:	7b53      	ldrb	r3, [r2, #13]
 8014d5c:	015b      	lsls	r3, r3, #5
 8014d5e:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8014d62:	7993      	ldrb	r3, [r2, #6]
 8014d64:	430b      	orrs	r3, r1
 8014d66:	2105      	movs	r1, #5
 8014d68:	005b      	lsls	r3, r3, #1
 8014d6a:	fb93 f3f1 	sdiv	r3, r3, r1
 8014d6e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8014d72:	440b      	add	r3, r1
 8014d74:	e756      	b.n	8014c24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8014d76:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8014d7a:	4283      	cmp	r3, r0
 8014d7c:	d809      	bhi.n	8014d92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8014d7e:	f240 60df 	movw	r0, #1759	@ 0x6df
 8014d82:	4283      	cmp	r3, r0
 8014d84:	f4bf af7d 	bcs.w	8014c82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014d88:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8014d8c:	2b05      	cmp	r3, #5
 8014d8e:	d8d4      	bhi.n	8014d3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014d90:	e777      	b.n	8014c82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014d92:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8014d96:	4283      	cmp	r3, r0
 8014d98:	d09a      	beq.n	8014cd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014d9a:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8014d9e:	4283      	cmp	r3, r0
 8014da0:	e7ca      	b.n	8014d38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8014da2:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8014da6:	d22b      	bcs.n	8014e00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8014da8:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8014dac:	4283      	cmp	r3, r0
 8014dae:	d28f      	bcs.n	8014cd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014db0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8014db4:	4283      	cmp	r3, r0
 8014db6:	d816      	bhi.n	8014de6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8014db8:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8014dbc:	4283      	cmp	r3, r0
 8014dbe:	f4bf af60 	bcs.w	8014c82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014dc2:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8014dc6:	4283      	cmp	r3, r0
 8014dc8:	d80a      	bhi.n	8014de0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8014dca:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8014dce:	4283      	cmp	r3, r0
 8014dd0:	f4bf af57 	bcs.w	8014c82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014dd4:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8014dd8:	4283      	cmp	r3, r0
 8014dda:	f43f af79 	beq.w	8014cd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014dde:	e7ac      	b.n	8014d3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014de0:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8014de4:	e7f8      	b.n	8014dd8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8014de6:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8014dea:	4283      	cmp	r3, r0
 8014dec:	d802      	bhi.n	8014df4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8014dee:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8014df2:	e798      	b.n	8014d26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8014df4:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8014df8:	4283      	cmp	r3, r0
 8014dfa:	f47f af42 	bne.w	8014c82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014dfe:	e767      	b.n	8014cd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014e00:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8014e04:	4283      	cmp	r3, r0
 8014e06:	f43f af63 	beq.w	8014cd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014e0a:	d802      	bhi.n	8014e12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8014e0c:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8014e10:	e7f2      	b.n	8014df8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8014e12:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8014e16:	4283      	cmp	r3, r0
 8014e18:	d805      	bhi.n	8014e26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8014e1a:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8014e1e:	4283      	cmp	r3, r0
 8014e20:	f4ff af2f 	bcc.w	8014c82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014e24:	e754      	b.n	8014cd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014e26:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8014e2a:	4283      	cmp	r3, r0
 8014e2c:	e7af      	b.n	8014d8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8014e2e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8014e32:	4617      	mov	r7, r2
 8014e34:	f102 0808 	add.w	r8, r2, #8
 8014e38:	4666      	mov	r6, ip
 8014e3a:	6838      	ldr	r0, [r7, #0]
 8014e3c:	3708      	adds	r7, #8
 8014e3e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8014e42:	46e6      	mov	lr, ip
 8014e44:	4547      	cmp	r7, r8
 8014e46:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8014e4a:	46f4      	mov	ip, lr
 8014e4c:	d1f5      	bne.n	8014e3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8014e4e:	6838      	ldr	r0, [r7, #0]
 8014e50:	f8ce 0000 	str.w	r0, [lr]
 8014e54:	88b9      	ldrh	r1, [r7, #4]
 8014e56:	f8ae 1004 	strh.w	r1, [lr, #4]
 8014e5a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8014e5e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014e62:	d009      	beq.n	8014e78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8014e64:	7b51      	ldrb	r1, [r2, #13]
 8014e66:	7992      	ldrb	r2, [r2, #6]
 8014e68:	0149      	lsls	r1, r1, #5
 8014e6a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8014e6e:	4311      	orrs	r1, r2
 8014e70:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014e74:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8014e78:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8014e7c:	b2ad      	uxth	r5, r5
 8014e7e:	d00d      	beq.n	8014e9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8014e80:	442b      	add	r3, r5
 8014e82:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8014e86:	b29b      	uxth	r3, r3
 8014e88:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8014e8c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8014e90:	10db      	asrs	r3, r3, #3
 8014e92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014e96:	4313      	orrs	r3, r2
 8014e98:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8014e9c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8014ea0:	00cb      	lsls	r3, r1, #3
 8014ea2:	064f      	lsls	r7, r1, #25
 8014ea4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014ea8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8014eac:	ea43 0302 	orr.w	r3, r3, r2
 8014eb0:	bf44      	itt	mi
 8014eb2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014eb6:	b21b      	sxthmi	r3, r3
 8014eb8:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014ebc:	1b5b      	subs	r3, r3, r5
 8014ebe:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8014ec2:	4632      	mov	r2, r6
 8014ec4:	e6f9      	b.n	8014cba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8014ec6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8014eca:	4617      	mov	r7, r2
 8014ecc:	f102 0908 	add.w	r9, r2, #8
 8014ed0:	4666      	mov	r6, ip
 8014ed2:	6838      	ldr	r0, [r7, #0]
 8014ed4:	3708      	adds	r7, #8
 8014ed6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8014eda:	46e0      	mov	r8, ip
 8014edc:	454f      	cmp	r7, r9
 8014ede:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8014ee2:	46c4      	mov	ip, r8
 8014ee4:	d1f5      	bne.n	8014ed2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8014ee6:	6838      	ldr	r0, [r7, #0]
 8014ee8:	f8c8 0000 	str.w	r0, [r8]
 8014eec:	88b9      	ldrh	r1, [r7, #4]
 8014eee:	f8a8 1004 	strh.w	r1, [r8, #4]
 8014ef2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8014ef6:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014efa:	d009      	beq.n	8014f10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8014efc:	7b51      	ldrb	r1, [r2, #13]
 8014efe:	7992      	ldrb	r2, [r2, #6]
 8014f00:	0149      	lsls	r1, r1, #5
 8014f02:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8014f06:	4311      	orrs	r1, r2
 8014f08:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014f0c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8014f10:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8014f14:	d00e      	beq.n	8014f34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8014f16:	eba3 030e 	sub.w	r3, r3, lr
 8014f1a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8014f1e:	b29b      	uxth	r3, r3
 8014f20:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8014f24:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8014f28:	10db      	asrs	r3, r3, #3
 8014f2a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014f2e:	4313      	orrs	r3, r2
 8014f30:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8014f34:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8014f38:	00cb      	lsls	r3, r1, #3
 8014f3a:	0648      	lsls	r0, r1, #25
 8014f3c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014f40:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8014f44:	ea43 0302 	orr.w	r3, r3, r2
 8014f48:	bf44      	itt	mi
 8014f4a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014f4e:	b21b      	sxthmi	r3, r3
 8014f50:	1b5d      	subs	r5, r3, r5
 8014f52:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8014f56:	e7b4      	b.n	8014ec2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08014f58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8014f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f5c:	461e      	mov	r6, r3
 8014f5e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8014f60:	4604      	mov	r4, r0
 8014f62:	4617      	mov	r7, r2
 8014f64:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014f68:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8014f6c:	f7ee ffcc 	bl	8003f08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014f70:	4605      	mov	r5, r0
 8014f72:	b918      	cbnz	r0, 8014f7c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8014f74:	6030      	str	r0, [r6, #0]
 8014f76:	4628      	mov	r0, r5
 8014f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f7c:	683b      	ldr	r3, [r7, #0]
 8014f7e:	4601      	mov	r1, r0
 8014f80:	4638      	mov	r0, r7
 8014f82:	68db      	ldr	r3, [r3, #12]
 8014f84:	4798      	blx	r3
 8014f86:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8014f8a:	4602      	mov	r2, r0
 8014f8c:	6030      	str	r0, [r6, #0]
 8014f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014f92:	d213      	bcs.n	8014fbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8014f94:	4643      	mov	r3, r8
 8014f96:	4639      	mov	r1, r7
 8014f98:	4620      	mov	r0, r4
 8014f9a:	f7ff fe39 	bl	8014c10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8014f9e:	6030      	str	r0, [r6, #0]
 8014fa0:	6833      	ldr	r3, [r6, #0]
 8014fa2:	b143      	cbz	r3, 8014fb6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8014fa4:	7b5a      	ldrb	r2, [r3, #13]
 8014fa6:	7a9b      	ldrb	r3, [r3, #10]
 8014fa8:	0052      	lsls	r2, r2, #1
 8014faa:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8014fae:	4313      	orrs	r3, r2
 8014fb0:	bf0c      	ite	eq
 8014fb2:	2301      	moveq	r3, #1
 8014fb4:	2300      	movne	r3, #0
 8014fb6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8014fba:	e7dc      	b.n	8014f76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8014fbc:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8014fc0:	b29b      	uxth	r3, r3
 8014fc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8014fc4:	d804      	bhi.n	8014fd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8014fc6:	4639      	mov	r1, r7
 8014fc8:	4620      	mov	r0, r4
 8014fca:	f7ff fd15 	bl	80149f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8014fce:	e7e6      	b.n	8014f9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8014fd0:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d0e3      	beq.n	8014fa0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014fd8:	f640 1302 	movw	r3, #2306	@ 0x902
 8014fdc:	429d      	cmp	r5, r3
 8014fde:	d1df      	bne.n	8014fa0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014fe0:	4601      	mov	r1, r0
 8014fe2:	4620      	mov	r0, r4
 8014fe4:	f7ff fcd8 	bl	8014998 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8014fe8:	e7d9      	b.n	8014f9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08014fea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8014fea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fee:	461e      	mov	r6, r3
 8014ff0:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8014ff2:	4604      	mov	r4, r0
 8014ff4:	4617      	mov	r7, r2
 8014ff6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014ffa:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8014ffe:	f7ee ff83 	bl	8003f08 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015002:	4605      	mov	r5, r0
 8015004:	b918      	cbnz	r0, 801500e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8015006:	6030      	str	r0, [r6, #0]
 8015008:	4628      	mov	r0, r5
 801500a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	4601      	mov	r1, r0
 8015012:	4638      	mov	r0, r7
 8015014:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8015018:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801501c:	47c8      	blx	r9
 801501e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8015022:	4602      	mov	r2, r0
 8015024:	6030      	str	r0, [r6, #0]
 8015026:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801502a:	d213      	bcs.n	8015054 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801502c:	4643      	mov	r3, r8
 801502e:	4639      	mov	r1, r7
 8015030:	4620      	mov	r0, r4
 8015032:	f7ff fded 	bl	8014c10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8015036:	6030      	str	r0, [r6, #0]
 8015038:	6833      	ldr	r3, [r6, #0]
 801503a:	b143      	cbz	r3, 801504e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801503c:	7b5a      	ldrb	r2, [r3, #13]
 801503e:	7a9b      	ldrb	r3, [r3, #10]
 8015040:	0052      	lsls	r2, r2, #1
 8015042:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8015046:	4313      	orrs	r3, r2
 8015048:	bf0c      	ite	eq
 801504a:	2301      	moveq	r3, #1
 801504c:	2300      	movne	r3, #0
 801504e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8015052:	e7d9      	b.n	8015008 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8015054:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8015058:	b29b      	uxth	r3, r3
 801505a:	2b7f      	cmp	r3, #127	@ 0x7f
 801505c:	d804      	bhi.n	8015068 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801505e:	4639      	mov	r1, r7
 8015060:	4620      	mov	r0, r4
 8015062:	f7ff fcc9 	bl	80149f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8015066:	e7e6      	b.n	8015036 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8015068:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801506c:	2b00      	cmp	r3, #0
 801506e:	d0e3      	beq.n	8015038 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8015070:	f640 1302 	movw	r3, #2306	@ 0x902
 8015074:	429d      	cmp	r5, r3
 8015076:	d1df      	bne.n	8015038 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8015078:	4601      	mov	r1, r0
 801507a:	4620      	mov	r0, r4
 801507c:	f7ff fc8c 	bl	8014998 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8015080:	e7d9      	b.n	8015036 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08015082 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8015082:	b510      	push	{r4, lr}
 8015084:	4604      	mov	r4, r0
 8015086:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801508a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801508c:	b1e1      	cbz	r1, 80150c8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801508e:	2b0a      	cmp	r3, #10
 8015090:	d02d      	beq.n	80150ee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8015092:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8015094:	3901      	subs	r1, #1
 8015096:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801509a:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801509c:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 80150a0:	1c51      	adds	r1, r2, #1
 80150a2:	b289      	uxth	r1, r1
 80150a4:	2901      	cmp	r1, #1
 80150a6:	bf8a      	itet	hi
 80150a8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80150ac:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 80150ae:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 80150b0:	1c5a      	adds	r2, r3, #1
 80150b2:	8722      	strh	r2, [r4, #56]	@ 0x38
 80150b4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80150b6:	4413      	add	r3, r2
 80150b8:	b29b      	uxth	r3, r3
 80150ba:	2b09      	cmp	r3, #9
 80150bc:	bf88      	it	hi
 80150be:	3b0a      	subhi	r3, #10
 80150c0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80150c4:	8458      	strh	r0, [r3, #34]	@ 0x22
 80150c6:	e7de      	b.n	8015086 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80150c8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80150ca:	2b0a      	cmp	r3, #10
 80150cc:	d00f      	beq.n	80150ee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80150ce:	4620      	mov	r0, r4
 80150d0:	f7ff fc21 	bl	8014916 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80150d4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80150d6:	1c5a      	adds	r2, r3, #1
 80150d8:	8722      	strh	r2, [r4, #56]	@ 0x38
 80150da:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80150dc:	4413      	add	r3, r2
 80150de:	b29b      	uxth	r3, r3
 80150e0:	2b09      	cmp	r3, #9
 80150e2:	bf88      	it	hi
 80150e4:	3b0a      	subhi	r3, #10
 80150e6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80150ea:	8458      	strh	r0, [r3, #34]	@ 0x22
 80150ec:	e7ec      	b.n	80150c8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80150ee:	bd10      	pop	{r4, pc}

080150f0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80150f0:	b538      	push	{r3, r4, r5, lr}
 80150f2:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80150f4:	4604      	mov	r4, r0
 80150f6:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80150fa:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 80150fc:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 80150fe:	3a01      	subs	r2, #1
 8015100:	8702      	strh	r2, [r0, #56]	@ 0x38
 8015102:	1c5a      	adds	r2, r3, #1
 8015104:	b292      	uxth	r2, r2
 8015106:	2a09      	cmp	r2, #9
 8015108:	bf8a      	itet	hi
 801510a:	3b09      	subhi	r3, #9
 801510c:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801510e:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8015110:	f7ff ffb7 	bl	8015082 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8015114:	8c23      	ldrh	r3, [r4, #32]
 8015116:	2b01      	cmp	r3, #1
 8015118:	bf9c      	itt	ls
 801511a:	3301      	addls	r3, #1
 801511c:	8423      	strhls	r3, [r4, #32]
 801511e:	8be3      	ldrh	r3, [r4, #30]
 8015120:	b90b      	cbnz	r3, 8015126 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8015122:	2302      	movs	r3, #2
 8015124:	83e3      	strh	r3, [r4, #30]
 8015126:	8be3      	ldrh	r3, [r4, #30]
 8015128:	4628      	mov	r0, r5
 801512a:	3b01      	subs	r3, #1
 801512c:	b29b      	uxth	r3, r3
 801512e:	83e3      	strh	r3, [r4, #30]
 8015130:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015134:	8365      	strh	r5, [r4, #26]
 8015136:	bd38      	pop	{r3, r4, r5, pc}

08015138 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8015138:	428a      	cmp	r2, r1
 801513a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801513e:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8015140:	d932      	bls.n	80151a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8015142:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8015144:	1a54      	subs	r4, r2, r1
 8015146:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801514a:	19ee      	adds	r6, r5, r7
 801514c:	fa1f fe84 	uxth.w	lr, r4
 8015150:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8015154:	3e01      	subs	r6, #1
 8015156:	b2b4      	uxth	r4, r6
 8015158:	eba4 090e 	sub.w	r9, r4, lr
 801515c:	fa1f f989 	uxth.w	r9, r9
 8015160:	2c09      	cmp	r4, #9
 8015162:	4626      	mov	r6, r4
 8015164:	bf88      	it	hi
 8015166:	f1a4 060a 	subhi.w	r6, r4, #10
 801516a:	f1bc 0f00 	cmp.w	ip, #0
 801516e:	f104 34ff 	add.w	r4, r4, #4294967295
 8015172:	bf08      	it	eq
 8015174:	f04f 0c02 	moveq.w	ip, #2
 8015178:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801517c:	b2a4      	uxth	r4, r4
 801517e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015182:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8015186:	454c      	cmp	r4, r9
 8015188:	fa1f fc8c 	uxth.w	ip, ip
 801518c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8015190:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8015194:	d1e4      	bne.n	8015160 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8015196:	eba5 050e 	sub.w	r5, r5, lr
 801519a:	eb0e 0408 	add.w	r4, lr, r8
 801519e:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 80151a2:	8705      	strh	r5, [r0, #56]	@ 0x38
 80151a4:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 80151a8:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 80151aa:	250a      	movs	r5, #10
 80151ac:	1a64      	subs	r4, r4, r1
 80151ae:	4439      	add	r1, r7
 80151b0:	b289      	uxth	r1, r1
 80151b2:	8704      	strh	r4, [r0, #56]	@ 0x38
 80151b4:	2909      	cmp	r1, #9
 80151b6:	bf88      	it	hi
 80151b8:	390a      	subhi	r1, #10
 80151ba:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80151bc:	b18a      	cbz	r2, 80151e2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80151be:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 80151c0:	3a01      	subs	r2, #1
 80151c2:	3101      	adds	r1, #1
 80151c4:	b292      	uxth	r2, r2
 80151c6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80151ca:	8701      	strh	r1, [r0, #56]	@ 0x38
 80151cc:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80151ce:	b901      	cbnz	r1, 80151d2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80151d0:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80151d2:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80151d4:	3901      	subs	r1, #1
 80151d6:	b289      	uxth	r1, r1
 80151d8:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80151da:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80151de:	844c      	strh	r4, [r1, #34]	@ 0x22
 80151e0:	e7ec      	b.n	80151bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 80151e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151e6:	f7ff bf4c 	b.w	8015082 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080151ea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80151ea:	b570      	push	{r4, r5, r6, lr}
 80151ec:	2500      	movs	r5, #0
 80151ee:	4295      	cmp	r5, r2
 80151f0:	d011      	beq.n	8015216 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80151f2:	8bc4      	ldrh	r4, [r0, #30]
 80151f4:	f831 6b02 	ldrh.w	r6, [r1], #2
 80151f8:	4414      	add	r4, r2
 80151fa:	3c01      	subs	r4, #1
 80151fc:	1b64      	subs	r4, r4, r5
 80151fe:	b2a4      	uxth	r4, r4
 8015200:	2c01      	cmp	r4, #1
 8015202:	bf88      	it	hi
 8015204:	3c02      	subhi	r4, #2
 8015206:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801520a:	8b64      	ldrh	r4, [r4, #26]
 801520c:	42b4      	cmp	r4, r6
 801520e:	d117      	bne.n	8015240 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8015210:	3501      	adds	r5, #1
 8015212:	b2ad      	uxth	r5, r5
 8015214:	e7eb      	b.n	80151ee <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8015216:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801521a:	2400      	movs	r4, #0
 801521c:	4413      	add	r3, r2
 801521e:	b2a2      	uxth	r2, r4
 8015220:	429a      	cmp	r2, r3
 8015222:	da0f      	bge.n	8015244 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8015224:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8015226:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801522a:	3401      	adds	r4, #1
 801522c:	4432      	add	r2, r6
 801522e:	b292      	uxth	r2, r2
 8015230:	2a09      	cmp	r2, #9
 8015232:	bf88      	it	hi
 8015234:	3a0a      	subhi	r2, #10
 8015236:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801523a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801523c:	42aa      	cmp	r2, r5
 801523e:	d0ee      	beq.n	801521e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8015240:	2000      	movs	r0, #0
 8015242:	bd70      	pop	{r4, r5, r6, pc}
 8015244:	2001      	movs	r0, #1
 8015246:	e7fc      	b.n	8015242 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08015248 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8015248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801524c:	4605      	mov	r5, r0
 801524e:	4616      	mov	r6, r2
 8015250:	1c8c      	adds	r4, r1, #2
 8015252:	8809      	ldrh	r1, [r1, #0]
 8015254:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8015258:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801525c:	42b3      	cmp	r3, r6
 801525e:	d124      	bne.n	80152aa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8015260:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8015264:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8015268:	f001 070f 	and.w	r7, r1, #15
 801526c:	4652      	mov	r2, sl
 801526e:	f8cd 8000 	str.w	r8, [sp]
 8015272:	464b      	mov	r3, r9
 8015274:	4621      	mov	r1, r4
 8015276:	4628      	mov	r0, r5
 8015278:	f7ff ffb7 	bl	80151ea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801527c:	4683      	mov	fp, r0
 801527e:	b168      	cbz	r0, 801529c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8015280:	eb0a 0109 	add.w	r1, sl, r9
 8015284:	463a      	mov	r2, r7
 8015286:	4628      	mov	r0, r5
 8015288:	4441      	add	r1, r8
 801528a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801528e:	4649      	mov	r1, r9
 8015290:	f7ff ff52 	bl	8015138 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8015294:	4658      	mov	r0, fp
 8015296:	b003      	add	sp, #12
 8015298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801529c:	eb07 010a 	add.w	r1, r7, sl
 80152a0:	4449      	add	r1, r9
 80152a2:	4441      	add	r1, r8
 80152a4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80152a8:	e7d2      	b.n	8015250 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80152aa:	f04f 0b00 	mov.w	fp, #0
 80152ae:	e7f1      	b.n	8015294 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080152b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80152b0:	b570      	push	{r4, r5, r6, lr}
 80152b2:	8810      	ldrh	r0, [r2, #0]
 80152b4:	4298      	cmp	r0, r3
 80152b6:	d817      	bhi.n	80152e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80152b8:	1e48      	subs	r0, r1, #1
 80152ba:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80152be:	4298      	cmp	r0, r3
 80152c0:	d312      	bcc.n	80152e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80152c2:	2400      	movs	r4, #0
 80152c4:	428c      	cmp	r4, r1
 80152c6:	d20f      	bcs.n	80152e8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80152c8:	1860      	adds	r0, r4, r1
 80152ca:	1040      	asrs	r0, r0, #1
 80152cc:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80152d0:	0085      	lsls	r5, r0, #2
 80152d2:	42b3      	cmp	r3, r6
 80152d4:	d902      	bls.n	80152dc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80152d6:	3001      	adds	r0, #1
 80152d8:	b284      	uxth	r4, r0
 80152da:	e7f3      	b.n	80152c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80152dc:	d201      	bcs.n	80152e2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80152de:	b281      	uxth	r1, r0
 80152e0:	e7f0      	b.n	80152c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80152e2:	442a      	add	r2, r5
 80152e4:	8850      	ldrh	r0, [r2, #2]
 80152e6:	bd70      	pop	{r4, r5, r6, pc}
 80152e8:	2000      	movs	r0, #0
 80152ea:	e7fc      	b.n	80152e6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080152ec <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80152ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152f0:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 80152f2:	4604      	mov	r4, r0
 80152f4:	260b      	movs	r6, #11
 80152f6:	886f      	ldrh	r7, [r5, #2]
 80152f8:	087f      	lsrs	r7, r7, #1
 80152fa:	3e01      	subs	r6, #1
 80152fc:	d013      	beq.n	8015326 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80152fe:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8015300:	462a      	mov	r2, r5
 8015302:	4639      	mov	r1, r7
 8015304:	4620      	mov	r0, r4
 8015306:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801530a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801530e:	4643      	mov	r3, r8
 8015310:	f7ff ffce 	bl	80152b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8015314:	b138      	cbz	r0, 8015326 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8015316:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801531a:	4642      	mov	r2, r8
 801531c:	4620      	mov	r0, r4
 801531e:	f7ff ff93 	bl	8015248 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8015322:	2800      	cmp	r0, #0
 8015324:	d1e9      	bne.n	80152fa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8015326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801532c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801532c:	b570      	push	{r4, r5, r6, lr}
 801532e:	694a      	ldr	r2, [r1, #20]
 8015330:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8015332:	684b      	ldr	r3, [r1, #4]
 8015334:	1b54      	subs	r4, r2, r5
 8015336:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8015338:	f000 8106 	beq.w	8015548 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801533c:	1b9b      	subs	r3, r3, r6
 801533e:	d003      	beq.n	8015348 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8015340:	4363      	muls	r3, r4
 8015342:	2210      	movs	r2, #16
 8015344:	fb93 f3f2 	sdiv	r3, r3, r2
 8015348:	680c      	ldr	r4, [r1, #0]
 801534a:	698a      	ldr	r2, [r1, #24]
 801534c:	1b65      	subs	r5, r4, r5
 801534e:	f000 80fd 	beq.w	801554c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8015352:	1b92      	subs	r2, r2, r6
 8015354:	d003      	beq.n	801535e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8015356:	436a      	muls	r2, r5
 8015358:	2410      	movs	r4, #16
 801535a:	fb92 f2f4 	sdiv	r2, r2, r4
 801535e:	1a9b      	subs	r3, r3, r2
 8015360:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8015588 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8015364:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015368:	460a      	mov	r2, r1
 801536a:	ee07 3a90 	vmov	s15, r3
 801536e:	f100 040c 	add.w	r4, r0, #12
 8015372:	4603      	mov	r3, r0
 8015374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015378:	ee67 7a84 	vmul.f32	s15, s15, s8
 801537c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8015380:	eeb1 6a43 	vneg.f32	s12, s6
 8015384:	edd2 7a02 	vldr	s15, [r2, #8]
 8015388:	3214      	adds	r2, #20
 801538a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801538e:	ece3 6a01 	vstmia	r3!, {s13}
 8015392:	429c      	cmp	r4, r3
 8015394:	ed52 7a02 	vldr	s15, [r2, #-8]
 8015398:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801539c:	edc3 7a02 	vstr	s15, [r3, #8]
 80153a0:	ed52 7a01 	vldr	s15, [r2, #-4]
 80153a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80153a8:	edc3 7a05 	vstr	s15, [r3, #20]
 80153ac:	d1ea      	bne.n	8015384 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80153ae:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80153b0:	698b      	ldr	r3, [r1, #24]
 80153b2:	edd0 4a02 	vldr	s9, [r0, #8]
 80153b6:	1a9b      	subs	r3, r3, r2
 80153b8:	edd0 3a00 	vldr	s7, [r0]
 80153bc:	edd0 6a01 	vldr	s13, [r0, #4]
 80153c0:	ee07 3a90 	vmov	s15, r3
 80153c4:	684b      	ldr	r3, [r1, #4]
 80153c6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80153ca:	ed90 5a05 	vldr	s10, [r0, #20]
 80153ce:	1a9b      	subs	r3, r3, r2
 80153d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80153d4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80153d8:	ed90 2a03 	vldr	s4, [r0, #12]
 80153dc:	ee07 3a10 	vmov	s14, r3
 80153e0:	edd0 5a04 	vldr	s11, [r0, #16]
 80153e4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80153e8:	ed90 1a07 	vldr	s2, [r0, #28]
 80153ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80153f0:	edd0 2a06 	vldr	s5, [r0, #24]
 80153f4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80153f8:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80153fc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015400:	ee32 5a45 	vsub.f32	s10, s4, s10
 8015404:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015408:	ee67 7a83 	vmul.f32	s15, s15, s6
 801540c:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8015410:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8015412:	694a      	ldr	r2, [r1, #20]
 8015414:	1b13      	subs	r3, r2, r4
 8015416:	ee07 3a10 	vmov	s14, r3
 801541a:	680b      	ldr	r3, [r1, #0]
 801541c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015420:	1b1b      	subs	r3, r3, r4
 8015422:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015426:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801542a:	ee07 3a10 	vmov	s14, r3
 801542e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015432:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015436:	eee6 4a87 	vfma.f32	s9, s13, s14
 801543a:	ee64 4a86 	vmul.f32	s9, s9, s12
 801543e:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8015442:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8015444:	698b      	ldr	r3, [r1, #24]
 8015446:	1a9b      	subs	r3, r3, r2
 8015448:	ee06 3a90 	vmov	s13, r3
 801544c:	684b      	ldr	r3, [r1, #4]
 801544e:	1a9b      	subs	r3, r3, r2
 8015450:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015454:	ee07 3a10 	vmov	s14, r3
 8015458:	ee66 6a84 	vmul.f32	s13, s13, s8
 801545c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015460:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8015464:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015468:	eee5 6a87 	vfma.f32	s13, s11, s14
 801546c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8015470:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8015474:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8015476:	694a      	ldr	r2, [r1, #20]
 8015478:	1b13      	subs	r3, r2, r4
 801547a:	ee07 3a10 	vmov	s14, r3
 801547e:	680b      	ldr	r3, [r1, #0]
 8015480:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015484:	1b1b      	subs	r3, r3, r4
 8015486:	ee27 7a04 	vmul.f32	s14, s14, s8
 801548a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801548e:	ee07 3a10 	vmov	s14, r3
 8015492:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015496:	ee27 7a04 	vmul.f32	s14, s14, s8
 801549a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801549e:	edd0 5a08 	vldr	s11, [r0, #32]
 80154a2:	ee31 1a65 	vsub.f32	s2, s2, s11
 80154a6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80154aa:	ee25 5a06 	vmul.f32	s10, s10, s12
 80154ae:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 80154b2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80154b4:	698b      	ldr	r3, [r1, #24]
 80154b6:	1a9b      	subs	r3, r3, r2
 80154b8:	ee07 3a10 	vmov	s14, r3
 80154bc:	684b      	ldr	r3, [r1, #4]
 80154be:	1a9b      	subs	r3, r3, r2
 80154c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80154c4:	ee01 3a90 	vmov	s3, r3
 80154c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80154cc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80154d0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80154d4:	ee61 1a84 	vmul.f32	s3, s3, s8
 80154d8:	eea1 7a21 	vfma.f32	s14, s2, s3
 80154dc:	ee27 7a03 	vmul.f32	s14, s14, s6
 80154e0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80154e4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80154e6:	694a      	ldr	r2, [r1, #20]
 80154e8:	1b13      	subs	r3, r2, r4
 80154ea:	ee03 3a10 	vmov	s6, r3
 80154ee:	680b      	ldr	r3, [r1, #0]
 80154f0:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80154f4:	1b1b      	subs	r3, r3, r4
 80154f6:	ee23 3a04 	vmul.f32	s6, s6, s8
 80154fa:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80154fe:	ee03 3a10 	vmov	s6, r3
 8015502:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8015506:	ee23 4a04 	vmul.f32	s8, s6, s8
 801550a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801550e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8015512:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8015516:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801551a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801551e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8015522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015526:	dd13      	ble.n	8015550 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8015528:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801552c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8015530:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8015532:	eee3 7a87 	vfma.f32	s15, s7, s14
 8015536:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801553a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801553e:	dd15      	ble.n	801556c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8015540:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015544:	6403      	str	r3, [r0, #64]	@ 0x40
 8015546:	bd70      	pop	{r4, r5, r6, pc}
 8015548:	4623      	mov	r3, r4
 801554a:	e6fd      	b.n	8015348 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801554c:	462a      	mov	r2, r5
 801554e:	e706      	b.n	801535e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8015550:	d502      	bpl.n	8015558 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8015552:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8015556:	e7e9      	b.n	801552c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8015558:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801555c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8015560:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8015564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015568:	dade      	bge.n	8015528 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801556a:	e7f2      	b.n	8015552 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801556c:	d502      	bpl.n	8015574 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801556e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8015572:	e7e7      	b.n	8015544 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8015574:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8015578:	eee3 4a86 	vfma.f32	s9, s7, s12
 801557c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8015580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015584:	dadc      	bge.n	8015540 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8015586:	e7f2      	b.n	801556e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8015588:	3d800000 	.word	0x3d800000

0801558c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801558c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015590:	2714      	movs	r7, #20
 8015592:	435f      	muls	r7, r3
 8015594:	eb02 0c07 	add.w	ip, r2, r7
 8015598:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801559c:	f115 0e0f 	adds.w	lr, r5, #15
 80155a0:	f100 80a2 	bmi.w	80156e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80155a4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80155a8:	9c08      	ldr	r4, [sp, #32]
 80155aa:	2614      	movs	r6, #20
 80155ac:	f8c0 e014 	str.w	lr, [r0, #20]
 80155b0:	4366      	muls	r6, r4
 80155b2:	eb02 0806 	add.w	r8, r2, r6
 80155b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80155ba:	f115 040f 	adds.w	r4, r5, #15
 80155be:	f100 809f 	bmi.w	8015700 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80155c2:	1124      	asrs	r4, r4, #4
 80155c4:	eba4 040e 	sub.w	r4, r4, lr
 80155c8:	6184      	str	r4, [r0, #24]
 80155ca:	2c00      	cmp	r4, #0
 80155cc:	f000 808a 	beq.w	80156e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80155d0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80155d4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80155d8:	5995      	ldr	r5, [r2, r6]
 80155da:	eba4 0809 	sub.w	r8, r4, r9
 80155de:	59d4      	ldr	r4, [r2, r7]
 80155e0:	eba5 0a04 	sub.w	sl, r5, r4
 80155e4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80155e8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80155ec:	fb0e fe05 	mul.w	lr, lr, r5
 80155f0:	fb0a ee19 	mls	lr, sl, r9, lr
 80155f4:	fb08 e404 	mla	r4, r8, r4, lr
 80155f8:	3c01      	subs	r4, #1
 80155fa:	19a4      	adds	r4, r4, r6
 80155fc:	f100 808c 	bmi.w	8015718 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8015600:	fb94 fef6 	sdiv	lr, r4, r6
 8015604:	fb06 441e 	mls	r4, r6, lr, r4
 8015608:	f8c0 e000 	str.w	lr, [r0]
 801560c:	6104      	str	r4, [r0, #16]
 801560e:	2d00      	cmp	r5, #0
 8015610:	f2c0 8095 	blt.w	801573e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8015614:	fb95 f4f6 	sdiv	r4, r5, r6
 8015618:	fb06 5514 	mls	r5, r6, r4, r5
 801561c:	6044      	str	r4, [r0, #4]
 801561e:	6085      	str	r5, [r0, #8]
 8015620:	60c6      	str	r6, [r0, #12]
 8015622:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015626:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801562a:	6945      	ldr	r5, [r0, #20]
 801562c:	59d2      	ldr	r2, [r2, r7]
 801562e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8015632:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8015760 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8015636:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801563a:	ee07 4a10 	vmov	s14, r4
 801563e:	6804      	ldr	r4, [r0, #0]
 8015640:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8015644:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015648:	ee07 2a90 	vmov	s15, r2
 801564c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015654:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015658:	edd3 6a00 	vldr	s13, [r3]
 801565c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015660:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8015664:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015668:	edc0 6a07 	vstr	s13, [r0, #28]
 801566c:	edd0 6a01 	vldr	s13, [r0, #4]
 8015670:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8015674:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015678:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801567c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015680:	ed80 6a08 	vstr	s12, [r0, #32]
 8015684:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8015686:	6242      	str	r2, [r0, #36]	@ 0x24
 8015688:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801568c:	ed93 6a03 	vldr	s12, [r3, #12]
 8015690:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015694:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8015698:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801569c:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 80156a0:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80156a4:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 80156a8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80156ac:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 80156b0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80156b2:	6302      	str	r2, [r0, #48]	@ 0x30
 80156b4:	ed93 6a06 	vldr	s12, [r3, #24]
 80156b8:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 80156bc:	eea5 6a87 	vfma.f32	s12, s11, s14
 80156c0:	eeb0 7a46 	vmov.f32	s14, s12
 80156c4:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 80156c8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80156cc:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80156d0:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 80156d4:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 80156d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80156dc:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 80156e0:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80156e2:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80156e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156e8:	2410      	movs	r4, #16
 80156ea:	f1c5 0501 	rsb	r5, r5, #1
 80156ee:	fb9e fef4 	sdiv	lr, lr, r4
 80156f2:	f015 050f 	ands.w	r5, r5, #15
 80156f6:	bf18      	it	ne
 80156f8:	2501      	movne	r5, #1
 80156fa:	ebae 0e05 	sub.w	lr, lr, r5
 80156fe:	e753      	b.n	80155a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8015700:	f04f 0910 	mov.w	r9, #16
 8015704:	f1c5 0501 	rsb	r5, r5, #1
 8015708:	fb94 f4f9 	sdiv	r4, r4, r9
 801570c:	f015 050f 	ands.w	r5, r5, #15
 8015710:	bf18      	it	ne
 8015712:	2501      	movne	r5, #1
 8015714:	1b64      	subs	r4, r4, r5
 8015716:	e755      	b.n	80155c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8015718:	4264      	negs	r4, r4
 801571a:	fb94 fef6 	sdiv	lr, r4, r6
 801571e:	f1ce 0800 	rsb	r8, lr, #0
 8015722:	fb06 441e 	mls	r4, r6, lr, r4
 8015726:	f8c0 8000 	str.w	r8, [r0]
 801572a:	6104      	str	r4, [r0, #16]
 801572c:	2c00      	cmp	r4, #0
 801572e:	f43f af6e 	beq.w	801560e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8015732:	ea6f 0e0e 	mvn.w	lr, lr
 8015736:	1b34      	subs	r4, r6, r4
 8015738:	f8c0 e000 	str.w	lr, [r0]
 801573c:	e766      	b.n	801560c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801573e:	426d      	negs	r5, r5
 8015740:	fb95 f4f6 	sdiv	r4, r5, r6
 8015744:	f1c4 0e00 	rsb	lr, r4, #0
 8015748:	fb06 5514 	mls	r5, r6, r4, r5
 801574c:	f8c0 e004 	str.w	lr, [r0, #4]
 8015750:	6085      	str	r5, [r0, #8]
 8015752:	2d00      	cmp	r5, #0
 8015754:	f43f af64 	beq.w	8015620 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8015758:	43e4      	mvns	r4, r4
 801575a:	1b75      	subs	r5, r6, r5
 801575c:	6044      	str	r4, [r0, #4]
 801575e:	e75e      	b.n	801561e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8015760:	3d800000 	.word	0x3d800000

08015764 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8015764:	4b01      	ldr	r3, [pc, #4]	@ (801576c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8015766:	6018      	str	r0, [r3, #0]
 8015768:	4770      	bx	lr
 801576a:	bf00      	nop
 801576c:	240251c0 	.word	0x240251c0

08015770 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8015770:	4b06      	ldr	r3, [pc, #24]	@ (801578c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8015772:	881a      	ldrh	r2, [r3, #0]
 8015774:	4282      	cmp	r2, r0
 8015776:	d807      	bhi.n	8015788 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8015778:	4b05      	ldr	r3, [pc, #20]	@ (8015790 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801577a:	881b      	ldrh	r3, [r3, #0]
 801577c:	4413      	add	r3, r2
 801577e:	4298      	cmp	r0, r3
 8015780:	bfac      	ite	ge
 8015782:	2000      	movge	r0, #0
 8015784:	2001      	movlt	r0, #1
 8015786:	4770      	bx	lr
 8015788:	2000      	movs	r0, #0
 801578a:	4770      	bx	lr
 801578c:	240251e0 	.word	0x240251e0
 8015790:	240251e4 	.word	0x240251e4

08015794 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8015794:	b508      	push	{r3, lr}
 8015796:	4601      	mov	r1, r0
 8015798:	f7ff ffea 	bl	8015770 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801579c:	b118      	cbz	r0, 80157a6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801579e:	4b02      	ldr	r3, [pc, #8]	@ (80157a8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80157a6:	bd08      	pop	{r3, pc}
 80157a8:	240251c4 	.word	0x240251c4

080157ac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 80157ac:	b538      	push	{r3, r4, r5, lr}
 80157ae:	4604      	mov	r4, r0
 80157b0:	f7ff ffde 	bl	8015770 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80157b4:	b1d8      	cbz	r0, 80157ee <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 80157b6:	4b0f      	ldr	r3, [pc, #60]	@ (80157f4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 80157b8:	881b      	ldrh	r3, [r3, #0]
 80157ba:	1ae4      	subs	r4, r4, r3
 80157bc:	230e      	movs	r3, #14
 80157be:	4363      	muls	r3, r4
 80157c0:	4c0d      	ldr	r4, [pc, #52]	@ (80157f8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 80157c2:	6825      	ldr	r5, [r4, #0]
 80157c4:	18ea      	adds	r2, r5, r3
 80157c6:	7b12      	ldrb	r2, [r2, #12]
 80157c8:	f012 0220 	ands.w	r2, r2, #32
 80157cc:	d010      	beq.n	80157f0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 80157ce:	f9b1 2000 	ldrsh.w	r2, [r1]
 80157d2:	52ea      	strh	r2, [r5, r3]
 80157d4:	6822      	ldr	r2, [r4, #0]
 80157d6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80157da:	441a      	add	r2, r3
 80157dc:	8055      	strh	r5, [r2, #2]
 80157de:	6822      	ldr	r2, [r4, #0]
 80157e0:	4413      	add	r3, r2
 80157e2:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 80157e6:	809a      	strh	r2, [r3, #4]
 80157e8:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80157ec:	80da      	strh	r2, [r3, #6]
 80157ee:	bd38      	pop	{r3, r4, r5, pc}
 80157f0:	4610      	mov	r0, r2
 80157f2:	e7fc      	b.n	80157ee <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 80157f4:	240251e0 	.word	0x240251e0
 80157f8:	240251c8 	.word	0x240251c8

080157fc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 80157fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015800:	4606      	mov	r6, r0
 8015802:	460c      	mov	r4, r1
 8015804:	f7ff ffb4 	bl	8015770 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8015808:	b918      	cbnz	r0, 8015812 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801580a:	2000      	movs	r0, #0
 801580c:	b002      	add	sp, #8
 801580e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015812:	4608      	mov	r0, r1
 8015814:	f7f7 ffbf 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015818:	2800      	cmp	r0, #0
 801581a:	d1f6      	bne.n	801580a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801581c:	4b3f      	ldr	r3, [pc, #252]	@ (801591c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801581e:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8015920 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8015822:	881d      	ldrh	r5, [r3, #0]
 8015824:	f8d9 a000 	ldr.w	sl, [r9]
 8015828:	46c8      	mov	r8, r9
 801582a:	1b73      	subs	r3, r6, r5
 801582c:	250e      	movs	r5, #14
 801582e:	435d      	muls	r5, r3
 8015830:	eb0a 0705 	add.w	r7, sl, r5
 8015834:	7b3b      	ldrb	r3, [r7, #12]
 8015836:	f013 0f20 	tst.w	r3, #32
 801583a:	d0e6      	beq.n	801580a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801583c:	4621      	mov	r1, r4
 801583e:	4638      	mov	r0, r7
 8015840:	f7fc ffe0 	bl	8012804 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015844:	2800      	cmp	r0, #0
 8015846:	d1e1      	bne.n	801580c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8015848:	4639      	mov	r1, r7
 801584a:	4620      	mov	r0, r4
 801584c:	f7fc ffda 	bl	8012804 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015850:	b108      	cbz	r0, 8015856 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8015852:	4621      	mov	r1, r4
 8015854:	e020      	b.n	8015898 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8015856:	f9b4 2000 	ldrsh.w	r2, [r4]
 801585a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801585e:	429a      	cmp	r2, r3
 8015860:	d11e      	bne.n	80158a0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8015862:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8015866:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801586a:	429a      	cmp	r2, r3
 801586c:	d118      	bne.n	80158a0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801586e:	6820      	ldr	r0, [r4, #0]
 8015870:	466b      	mov	r3, sp
 8015872:	6861      	ldr	r1, [r4, #4]
 8015874:	c303      	stmia	r3!, {r0, r1}
 8015876:	4639      	mov	r1, r7
 8015878:	4668      	mov	r0, sp
 801587a:	f7fc ffe9 	bl	8012850 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801587e:	f8d9 3000 	ldr.w	r3, [r9]
 8015882:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8015886:	442b      	add	r3, r5
 8015888:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801588c:	4413      	add	r3, r2
 801588e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8015892:	4293      	cmp	r3, r2
 8015894:	dc04      	bgt.n	80158a0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8015896:	4669      	mov	r1, sp
 8015898:	4630      	mov	r0, r6
 801589a:	f7ff ff87 	bl	80157ac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801589e:	e7b5      	b.n	801580c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80158a0:	f8d8 3000 	ldr.w	r3, [r8]
 80158a4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80158a8:	442b      	add	r3, r5
 80158aa:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80158ae:	4291      	cmp	r1, r2
 80158b0:	d119      	bne.n	80158e6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80158b2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80158b6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80158ba:	4291      	cmp	r1, r2
 80158bc:	d113      	bne.n	80158e6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80158be:	6820      	ldr	r0, [r4, #0]
 80158c0:	466a      	mov	r2, sp
 80158c2:	6861      	ldr	r1, [r4, #4]
 80158c4:	c203      	stmia	r2!, {r0, r1}
 80158c6:	4619      	mov	r1, r3
 80158c8:	4668      	mov	r0, sp
 80158ca:	f7fc ffc1 	bl	8012850 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80158ce:	f8d8 3000 	ldr.w	r3, [r8]
 80158d2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80158d6:	442b      	add	r3, r5
 80158d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80158dc:	4413      	add	r3, r2
 80158de:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80158e2:	4293      	cmp	r3, r2
 80158e4:	ddd7      	ble.n	8015896 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 80158e6:	4620      	mov	r0, r4
 80158e8:	f7f7 ff55 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 80158ec:	b990      	cbnz	r0, 8015914 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 80158ee:	88a7      	ldrh	r7, [r4, #4]
 80158f0:	88e3      	ldrh	r3, [r4, #6]
 80158f2:	fb17 f703 	smulbb	r7, r7, r3
 80158f6:	f8d8 3000 	ldr.w	r3, [r8]
 80158fa:	441d      	add	r5, r3
 80158fc:	4628      	mov	r0, r5
 80158fe:	f7f7 ff4a 	bl	800d796 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015902:	b948      	cbnz	r0, 8015918 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8015904:	88ab      	ldrh	r3, [r5, #4]
 8015906:	88ea      	ldrh	r2, [r5, #6]
 8015908:	fb13 f302 	smulbb	r3, r3, r2
 801590c:	42bb      	cmp	r3, r7
 801590e:	f6bf af7c 	bge.w	801580a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8015912:	e79e      	b.n	8015852 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8015914:	2700      	movs	r7, #0
 8015916:	e7ee      	b.n	80158f6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8015918:	2300      	movs	r3, #0
 801591a:	e7f7      	b.n	801590c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801591c:	240251e0 	.word	0x240251e0
 8015920:	240251c8 	.word	0x240251c8

08015924 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8015924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015926:	4c24      	ldr	r4, [pc, #144]	@ (80159b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8015928:	6823      	ldr	r3, [r4, #0]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d042      	beq.n	80159b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801592e:	4a23      	ldr	r2, [pc, #140]	@ (80159bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8015930:	4d23      	ldr	r5, [pc, #140]	@ (80159c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8015932:	8811      	ldrh	r1, [r2, #0]
 8015934:	f8b5 c000 	ldrh.w	ip, [r5]
 8015938:	4822      	ldr	r0, [pc, #136]	@ (80159c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801593a:	4461      	add	r1, ip
 801593c:	1c4a      	adds	r2, r1, #1
 801593e:	008f      	lsls	r7, r1, #2
 8015940:	f022 0201 	bic.w	r2, r2, #1
 8015944:	19de      	adds	r6, r3, r7
 8015946:	0412      	lsls	r2, r2, #16
 8015948:	6006      	str	r6, [r0, #0]
 801594a:	4e1f      	ldr	r6, [pc, #124]	@ (80159c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801594c:	0c12      	lsrs	r2, r2, #16
 801594e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8015952:	19da      	adds	r2, r3, r7
 8015954:	6032      	str	r2, [r6, #0]
 8015956:	220e      	movs	r2, #14
 8015958:	fb02 f20c 	mul.w	r2, r2, ip
 801595c:	3203      	adds	r2, #3
 801595e:	f022 0203 	bic.w	r2, r2, #3
 8015962:	443a      	add	r2, r7
 8015964:	4f19      	ldr	r7, [pc, #100]	@ (80159cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8015966:	4413      	add	r3, r2
 8015968:	603b      	str	r3, [r7, #0]
 801596a:	2300      	movs	r3, #0
 801596c:	4f18      	ldr	r7, [pc, #96]	@ (80159d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801596e:	469c      	mov	ip, r3
 8015970:	803b      	strh	r3, [r7, #0]
 8015972:	4f18      	ldr	r7, [pc, #96]	@ (80159d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8015974:	683f      	ldr	r7, [r7, #0]
 8015976:	1aba      	subs	r2, r7, r2
 8015978:	4f17      	ldr	r7, [pc, #92]	@ (80159d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801597a:	603a      	str	r2, [r7, #0]
 801597c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8015980:	4a16      	ldr	r2, [pc, #88]	@ (80159dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8015982:	8013      	strh	r3, [r2, #0]
 8015984:	428b      	cmp	r3, r1
 8015986:	d10d      	bne.n	80159a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8015988:	882d      	ldrh	r5, [r5, #0]
 801598a:	2300      	movs	r3, #0
 801598c:	6830      	ldr	r0, [r6, #0]
 801598e:	240e      	movs	r4, #14
 8015990:	429d      	cmp	r5, r3
 8015992:	d90f      	bls.n	80159b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8015994:	fb04 0203 	mla	r2, r4, r3, r0
 8015998:	3301      	adds	r3, #1
 801599a:	7b11      	ldrb	r1, [r2, #12]
 801599c:	f36f 1145 	bfc	r1, #5, #1
 80159a0:	7311      	strb	r1, [r2, #12]
 80159a2:	e7f5      	b.n	8015990 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80159a4:	6822      	ldr	r2, [r4, #0]
 80159a6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80159aa:	6802      	ldr	r2, [r0, #0]
 80159ac:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80159b0:	3301      	adds	r3, #1
 80159b2:	e7e7      	b.n	8015984 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80159b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159b6:	bf00      	nop
 80159b8:	240251c4 	.word	0x240251c4
 80159bc:	240251e0 	.word	0x240251e0
 80159c0:	240251e4 	.word	0x240251e4
 80159c4:	240251d8 	.word	0x240251d8
 80159c8:	240251c8 	.word	0x240251c8
 80159cc:	240251d0 	.word	0x240251d0
 80159d0:	240251e2 	.word	0x240251e2
 80159d4:	240251cc 	.word	0x240251cc
 80159d8:	240251dc 	.word	0x240251dc
 80159dc:	240251d4 	.word	0x240251d4

080159e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80159e0:	4b06      	ldr	r3, [pc, #24]	@ (80159fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	b943      	cbnz	r3, 80159f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80159e6:	b139      	cbz	r1, 80159f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80159e8:	4b05      	ldr	r3, [pc, #20]	@ (8015a00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80159ea:	801a      	strh	r2, [r3, #0]
 80159ec:	4b05      	ldr	r3, [pc, #20]	@ (8015a04 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80159ee:	6019      	str	r1, [r3, #0]
 80159f0:	4b05      	ldr	r3, [pc, #20]	@ (8015a08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80159f2:	6018      	str	r0, [r3, #0]
 80159f4:	f7ff bf96 	b.w	8015924 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80159f8:	4770      	bx	lr
 80159fa:	bf00      	nop
 80159fc:	240251d0 	.word	0x240251d0
 8015a00:	240251e4 	.word	0x240251e4
 8015a04:	240251cc 	.word	0x240251cc
 8015a08:	240251c4 	.word	0x240251c4

08015a0c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8015a0c:	b470      	push	{r4, r5, r6}
 8015a0e:	4c07      	ldr	r4, [pc, #28]	@ (8015a2c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8015a10:	4605      	mov	r5, r0
 8015a12:	4610      	mov	r0, r2
 8015a14:	9a03      	ldr	r2, [sp, #12]
 8015a16:	6826      	ldr	r6, [r4, #0]
 8015a18:	b936      	cbnz	r6, 8015a28 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8015a1a:	6025      	str	r5, [r4, #0]
 8015a1c:	4c04      	ldr	r4, [pc, #16]	@ (8015a30 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8015a1e:	8021      	strh	r1, [r4, #0]
 8015a20:	4619      	mov	r1, r3
 8015a22:	bc70      	pop	{r4, r5, r6}
 8015a24:	f7ff bfdc 	b.w	80159e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8015a28:	bc70      	pop	{r4, r5, r6}
 8015a2a:	4770      	bx	lr
 8015a2c:	240251e8 	.word	0x240251e8
 8015a30:	240251e0 	.word	0x240251e0

08015a34 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8015a34:	4a12      	ldr	r2, [pc, #72]	@ (8015a80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8015a36:	8803      	ldrh	r3, [r0, #0]
 8015a38:	8812      	ldrh	r2, [r2, #0]
 8015a3a:	4293      	cmp	r3, r2
 8015a3c:	d207      	bcs.n	8015a4e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8015a3e:	4a11      	ldr	r2, [pc, #68]	@ (8015a84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8015a40:	2114      	movs	r1, #20
 8015a42:	6812      	ldr	r2, [r2, #0]
 8015a44:	fb01 2303 	mla	r3, r1, r3, r2
 8015a48:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8015a4c:	4770      	bx	lr
 8015a4e:	490e      	ldr	r1, [pc, #56]	@ (8015a88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8015a50:	8809      	ldrh	r1, [r1, #0]
 8015a52:	4411      	add	r1, r2
 8015a54:	428b      	cmp	r3, r1
 8015a56:	da04      	bge.n	8015a62 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8015a58:	1a9b      	subs	r3, r3, r2
 8015a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8015a8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8015a5c:	210e      	movs	r1, #14
 8015a5e:	6812      	ldr	r2, [r2, #0]
 8015a60:	e7f0      	b.n	8015a44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8015a62:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015a66:	4293      	cmp	r3, r2
 8015a68:	d108      	bne.n	8015a7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8015a6a:	4b09      	ldr	r3, [pc, #36]	@ (8015a90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8015a6c:	781b      	ldrb	r3, [r3, #0]
 8015a6e:	b91b      	cbnz	r3, 8015a78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8015a70:	4b08      	ldr	r3, [pc, #32]	@ (8015a94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8015a72:	f9b3 0000 	ldrsh.w	r0, [r3]
 8015a76:	4770      	bx	lr
 8015a78:	4b07      	ldr	r3, [pc, #28]	@ (8015a98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8015a7a:	e7fa      	b.n	8015a72 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8015a7c:	2000      	movs	r0, #0
 8015a7e:	4770      	bx	lr
 8015a80:	240251e0 	.word	0x240251e0
 8015a84:	240251e8 	.word	0x240251e8
 8015a88:	240251e4 	.word	0x240251e4
 8015a8c:	240251c8 	.word	0x240251c8
 8015a90:	24025150 	.word	0x24025150
 8015a94:	24025152 	.word	0x24025152
 8015a98:	24025154 	.word	0x24025154

08015a9c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8015a9c:	4a12      	ldr	r2, [pc, #72]	@ (8015ae8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8015a9e:	8803      	ldrh	r3, [r0, #0]
 8015aa0:	8812      	ldrh	r2, [r2, #0]
 8015aa2:	4293      	cmp	r3, r2
 8015aa4:	d207      	bcs.n	8015ab6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8015aa6:	4a11      	ldr	r2, [pc, #68]	@ (8015aec <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8015aa8:	2114      	movs	r1, #20
 8015aaa:	6812      	ldr	r2, [r2, #0]
 8015aac:	fb01 2303 	mla	r3, r1, r3, r2
 8015ab0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8015ab4:	4770      	bx	lr
 8015ab6:	490e      	ldr	r1, [pc, #56]	@ (8015af0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8015ab8:	8809      	ldrh	r1, [r1, #0]
 8015aba:	4411      	add	r1, r2
 8015abc:	428b      	cmp	r3, r1
 8015abe:	da04      	bge.n	8015aca <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8015ac0:	1a9b      	subs	r3, r3, r2
 8015ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8015af4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8015ac4:	210e      	movs	r1, #14
 8015ac6:	6812      	ldr	r2, [r2, #0]
 8015ac8:	e7f0      	b.n	8015aac <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8015aca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015ace:	4293      	cmp	r3, r2
 8015ad0:	d108      	bne.n	8015ae4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8015ad2:	4b09      	ldr	r3, [pc, #36]	@ (8015af8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8015ad4:	781b      	ldrb	r3, [r3, #0]
 8015ad6:	b91b      	cbnz	r3, 8015ae0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8015ad8:	4b08      	ldr	r3, [pc, #32]	@ (8015afc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8015ada:	f9b3 0000 	ldrsh.w	r0, [r3]
 8015ade:	4770      	bx	lr
 8015ae0:	4b07      	ldr	r3, [pc, #28]	@ (8015b00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8015ae2:	e7fa      	b.n	8015ada <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8015ae4:	2000      	movs	r0, #0
 8015ae6:	4770      	bx	lr
 8015ae8:	240251e0 	.word	0x240251e0
 8015aec:	240251e8 	.word	0x240251e8
 8015af0:	240251e4 	.word	0x240251e4
 8015af4:	240251c8 	.word	0x240251c8
 8015af8:	24025150 	.word	0x24025150
 8015afc:	24025154 	.word	0x24025154
 8015b00:	24025152 	.word	0x24025152

08015b04 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8015b04:	4a22      	ldr	r2, [pc, #136]	@ (8015b90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8015b06:	b530      	push	{r4, r5, lr}
 8015b08:	880b      	ldrh	r3, [r1, #0]
 8015b0a:	8812      	ldrh	r2, [r2, #0]
 8015b0c:	4293      	cmp	r3, r2
 8015b0e:	d213      	bcs.n	8015b38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8015b10:	4a20      	ldr	r2, [pc, #128]	@ (8015b94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8015b12:	2114      	movs	r1, #20
 8015b14:	6812      	ldr	r2, [r2, #0]
 8015b16:	fb01 2303 	mla	r3, r1, r3, r2
 8015b1a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8015b1e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8015b22:	8a1a      	ldrh	r2, [r3, #16]
 8015b24:	8a5b      	ldrh	r3, [r3, #18]
 8015b26:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8015b2a:	8004      	strh	r4, [r0, #0]
 8015b2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015b30:	8041      	strh	r1, [r0, #2]
 8015b32:	8082      	strh	r2, [r0, #4]
 8015b34:	80c3      	strh	r3, [r0, #6]
 8015b36:	e024      	b.n	8015b82 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8015b38:	4917      	ldr	r1, [pc, #92]	@ (8015b98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8015b3a:	8809      	ldrh	r1, [r1, #0]
 8015b3c:	4411      	add	r1, r2
 8015b3e:	428b      	cmp	r3, r1
 8015b40:	da10      	bge.n	8015b64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8015b42:	1a9b      	subs	r3, r3, r2
 8015b44:	220e      	movs	r2, #14
 8015b46:	4353      	muls	r3, r2
 8015b48:	4a14      	ldr	r2, [pc, #80]	@ (8015b9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8015b4a:	6811      	ldr	r1, [r2, #0]
 8015b4c:	18ca      	adds	r2, r1, r3
 8015b4e:	5ecd      	ldrsh	r5, [r1, r3]
 8015b50:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8015b54:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8015b58:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8015b5c:	8005      	strh	r5, [r0, #0]
 8015b5e:	8044      	strh	r4, [r0, #2]
 8015b60:	8081      	strh	r1, [r0, #4]
 8015b62:	e7e7      	b.n	8015b34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8015b64:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015b68:	4293      	cmp	r3, r2
 8015b6a:	d10b      	bne.n	8015b84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8015b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8015ba0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8015b6e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015b72:	4b0c      	ldr	r3, [pc, #48]	@ (8015ba4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8015b74:	8081      	strh	r1, [r0, #4]
 8015b76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	80c2      	strh	r2, [r0, #6]
 8015b7e:	8003      	strh	r3, [r0, #0]
 8015b80:	8043      	strh	r3, [r0, #2]
 8015b82:	bd30      	pop	{r4, r5, pc}
 8015b84:	2300      	movs	r3, #0
 8015b86:	8003      	strh	r3, [r0, #0]
 8015b88:	8043      	strh	r3, [r0, #2]
 8015b8a:	8083      	strh	r3, [r0, #4]
 8015b8c:	e7d2      	b.n	8015b34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8015b8e:	bf00      	nop
 8015b90:	240251e0 	.word	0x240251e0
 8015b94:	240251e8 	.word	0x240251e8
 8015b98:	240251e4 	.word	0x240251e4
 8015b9c:	240251c8 	.word	0x240251c8
 8015ba0:	2402514c 	.word	0x2402514c
 8015ba4:	2402514e 	.word	0x2402514e

08015ba8 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8015ba8:	4a12      	ldr	r2, [pc, #72]	@ (8015bf4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8015baa:	8803      	ldrh	r3, [r0, #0]
 8015bac:	8811      	ldrh	r1, [r2, #0]
 8015bae:	428b      	cmp	r3, r1
 8015bb0:	d20b      	bcs.n	8015bca <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8015bb2:	4a11      	ldr	r2, [pc, #68]	@ (8015bf8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8015bb4:	6812      	ldr	r2, [r2, #0]
 8015bb6:	b112      	cbz	r2, 8015bbe <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8015bb8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015bbc:	b9c0      	cbnz	r0, 8015bf0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8015bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8015bfc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8015bc0:	6811      	ldr	r1, [r2, #0]
 8015bc2:	2214      	movs	r2, #20
 8015bc4:	4353      	muls	r3, r2
 8015bc6:	58c8      	ldr	r0, [r1, r3]
 8015bc8:	4770      	bx	lr
 8015bca:	4a0d      	ldr	r2, [pc, #52]	@ (8015c00 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8015bcc:	8812      	ldrh	r2, [r2, #0]
 8015bce:	440a      	add	r2, r1
 8015bd0:	4293      	cmp	r3, r2
 8015bd2:	da04      	bge.n	8015bde <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8015bd4:	4a08      	ldr	r2, [pc, #32]	@ (8015bf8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8015bd6:	6812      	ldr	r2, [r2, #0]
 8015bd8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015bdc:	4770      	bx	lr
 8015bde:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015be2:	4293      	cmp	r3, r2
 8015be4:	d103      	bne.n	8015bee <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8015be6:	4b07      	ldr	r3, [pc, #28]	@ (8015c04 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8015bec:	4770      	bx	lr
 8015bee:	2000      	movs	r0, #0
 8015bf0:	4770      	bx	lr
 8015bf2:	bf00      	nop
 8015bf4:	240251e0 	.word	0x240251e0
 8015bf8:	240251c4 	.word	0x240251c4
 8015bfc:	240251e8 	.word	0x240251e8
 8015c00:	240251e4 	.word	0x240251e4
 8015c04:	24025158 	.word	0x24025158

08015c08 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8015c08:	4b24      	ldr	r3, [pc, #144]	@ (8015c9c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8015c0a:	8802      	ldrh	r2, [r0, #0]
 8015c0c:	8818      	ldrh	r0, [r3, #0]
 8015c0e:	4282      	cmp	r2, r0
 8015c10:	d221      	bcs.n	8015c56 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8015c12:	4b23      	ldr	r3, [pc, #140]	@ (8015ca0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8015c14:	6819      	ldr	r1, [r3, #0]
 8015c16:	2314      	movs	r3, #20
 8015c18:	fb03 1302 	mla	r3, r3, r2, r1
 8015c1c:	6858      	ldr	r0, [r3, #4]
 8015c1e:	2800      	cmp	r0, #0
 8015c20:	d03a      	beq.n	8015c98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015c22:	4920      	ldr	r1, [pc, #128]	@ (8015ca4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8015c24:	6809      	ldr	r1, [r1, #0]
 8015c26:	2900      	cmp	r1, #0
 8015c28:	d036      	beq.n	8015c98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015c2a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015c2e:	2900      	cmp	r1, #0
 8015c30:	d032      	beq.n	8015c98 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015c32:	891a      	ldrh	r2, [r3, #8]
 8015c34:	8958      	ldrh	r0, [r3, #10]
 8015c36:	4350      	muls	r0, r2
 8015c38:	7c5a      	ldrb	r2, [r3, #17]
 8015c3a:	7cdb      	ldrb	r3, [r3, #19]
 8015c3c:	0952      	lsrs	r2, r2, #5
 8015c3e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8015c42:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8015c46:	2b0b      	cmp	r3, #11
 8015c48:	bf18      	it	ne
 8015c4a:	0040      	lslne	r0, r0, #1
 8015c4c:	3003      	adds	r0, #3
 8015c4e:	f020 0003 	bic.w	r0, r0, #3
 8015c52:	4408      	add	r0, r1
 8015c54:	4770      	bx	lr
 8015c56:	4b14      	ldr	r3, [pc, #80]	@ (8015ca8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8015c58:	881b      	ldrh	r3, [r3, #0]
 8015c5a:	4403      	add	r3, r0
 8015c5c:	429a      	cmp	r2, r3
 8015c5e:	da1a      	bge.n	8015c96 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8015c60:	4b12      	ldr	r3, [pc, #72]	@ (8015cac <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8015c62:	1a10      	subs	r0, r2, r0
 8015c64:	210e      	movs	r1, #14
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	fb01 3000 	mla	r0, r1, r0, r3
 8015c6c:	7b03      	ldrb	r3, [r0, #12]
 8015c6e:	f003 031f 	and.w	r3, r3, #31
 8015c72:	2b0b      	cmp	r3, #11
 8015c74:	d10b      	bne.n	8015c8e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8015c76:	8903      	ldrh	r3, [r0, #8]
 8015c78:	8940      	ldrh	r0, [r0, #10]
 8015c7a:	4358      	muls	r0, r3
 8015c7c:	4b09      	ldr	r3, [pc, #36]	@ (8015ca4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8015c7e:	3003      	adds	r0, #3
 8015c80:	6819      	ldr	r1, [r3, #0]
 8015c82:	f020 0303 	bic.w	r3, r0, #3
 8015c86:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8015c8a:	4418      	add	r0, r3
 8015c8c:	4770      	bx	lr
 8015c8e:	2b0d      	cmp	r3, #13
 8015c90:	d101      	bne.n	8015c96 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8015c92:	300d      	adds	r0, #13
 8015c94:	4770      	bx	lr
 8015c96:	2000      	movs	r0, #0
 8015c98:	4770      	bx	lr
 8015c9a:	bf00      	nop
 8015c9c:	240251e0 	.word	0x240251e0
 8015ca0:	240251e8 	.word	0x240251e8
 8015ca4:	240251c4 	.word	0x240251c4
 8015ca8:	240251e4 	.word	0x240251e4
 8015cac:	240251c8 	.word	0x240251c8

08015cb0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8015cb0:	4a17      	ldr	r2, [pc, #92]	@ (8015d10 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8015cb2:	b510      	push	{r4, lr}
 8015cb4:	8803      	ldrh	r3, [r0, #0]
 8015cb6:	8812      	ldrh	r2, [r2, #0]
 8015cb8:	4293      	cmp	r3, r2
 8015cba:	d20c      	bcs.n	8015cd6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8015cbc:	4a15      	ldr	r2, [pc, #84]	@ (8015d14 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8015cbe:	2114      	movs	r1, #20
 8015cc0:	6812      	ldr	r2, [r2, #0]
 8015cc2:	fb01 2303 	mla	r3, r1, r3, r2
 8015cc6:	7c58      	ldrb	r0, [r3, #17]
 8015cc8:	0942      	lsrs	r2, r0, #5
 8015cca:	7cd8      	ldrb	r0, [r3, #19]
 8015ccc:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8015cd0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8015cd4:	bd10      	pop	{r4, pc}
 8015cd6:	4910      	ldr	r1, [pc, #64]	@ (8015d18 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8015cd8:	8809      	ldrh	r1, [r1, #0]
 8015cda:	4411      	add	r1, r2
 8015cdc:	428b      	cmp	r3, r1
 8015cde:	da09      	bge.n	8015cf4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8015ce0:	1a9b      	subs	r3, r3, r2
 8015ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8015d1c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8015ce4:	210e      	movs	r1, #14
 8015ce6:	6812      	ldr	r2, [r2, #0]
 8015ce8:	fb01 2303 	mla	r3, r1, r3, r2
 8015cec:	7b18      	ldrb	r0, [r3, #12]
 8015cee:	f000 001f 	and.w	r0, r0, #31
 8015cf2:	e7ef      	b.n	8015cd4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8015cf4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015cf8:	4293      	cmp	r3, r2
 8015cfa:	d106      	bne.n	8015d0a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8015cfc:	f7ed ff12 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 8015d00:	6803      	ldr	r3, [r0, #0]
 8015d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d08:	4718      	bx	r3
 8015d0a:	2000      	movs	r0, #0
 8015d0c:	e7e2      	b.n	8015cd4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8015d0e:	bf00      	nop
 8015d10:	240251e0 	.word	0x240251e0
 8015d14:	240251e8 	.word	0x240251e8
 8015d18:	240251e4 	.word	0x240251e4
 8015d1c:	240251c8 	.word	0x240251c8

08015d20 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8015d20:	2018      	movs	r0, #24
 8015d22:	4770      	bx	lr

08015d24 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8015d24:	2001      	movs	r0, #1
 8015d26:	4770      	bx	lr

08015d28 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8015d28:	4b02      	ldr	r3, [pc, #8]	@ (8015d34 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8015d2a:	8818      	ldrh	r0, [r3, #0]
 8015d2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015d30:	b280      	uxth	r0, r0
 8015d32:	4770      	bx	lr
 8015d34:	24025152 	.word	0x24025152

08015d38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015d38:	2bff      	cmp	r3, #255	@ 0xff
 8015d3a:	d040      	beq.n	8015dbe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8015d3c:	2a2c      	cmp	r2, #44	@ 0x2c
 8015d3e:	d02a      	beq.n	8015d96 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8015d40:	d80f      	bhi.n	8015d62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8015d42:	2a08      	cmp	r2, #8
 8015d44:	d037      	beq.n	8015db6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015d46:	d805      	bhi.n	8015d54 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8015d48:	2a04      	cmp	r2, #4
 8015d4a:	d032      	beq.n	8015db2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8015d4c:	2a05      	cmp	r2, #5
 8015d4e:	d02e      	beq.n	8015dae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8015d50:	2000      	movs	r0, #0
 8015d52:	4770      	bx	lr
 8015d54:	2a0a      	cmp	r2, #10
 8015d56:	d02e      	beq.n	8015db6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015d58:	d301      	bcc.n	8015d5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8015d5a:	2a0b      	cmp	r2, #11
 8015d5c:	d1f8      	bne.n	8015d50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015d5e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8015d60:	4770      	bx	lr
 8015d62:	2a30      	cmp	r2, #48	@ 0x30
 8015d64:	d029      	beq.n	8015dba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8015d66:	d808      	bhi.n	8015d7a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8015d68:	2a2e      	cmp	r2, #46	@ 0x2e
 8015d6a:	684b      	ldr	r3, [r1, #4]
 8015d6c:	d01a      	beq.n	8015da4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8015d6e:	d90b      	bls.n	8015d88 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8015d70:	781b      	ldrb	r3, [r3, #0]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d1ec      	bne.n	8015d50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015d76:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8015d78:	4770      	bx	lr
 8015d7a:	2a32      	cmp	r2, #50	@ 0x32
 8015d7c:	d01d      	beq.n	8015dba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8015d7e:	d301      	bcc.n	8015d84 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8015d80:	2a33      	cmp	r2, #51	@ 0x33
 8015d82:	d1e5      	bne.n	8015d50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015d84:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 8015d86:	4770      	bx	lr
 8015d88:	781b      	ldrb	r3, [r3, #0]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d0f3      	beq.n	8015d76 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8015d8e:	2b01      	cmp	r3, #1
 8015d90:	d1de      	bne.n	8015d50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015d92:	6940      	ldr	r0, [r0, #20]
 8015d94:	4770      	bx	lr
 8015d96:	684b      	ldr	r3, [r1, #4]
 8015d98:	781b      	ldrb	r3, [r3, #0]
 8015d9a:	b133      	cbz	r3, 8015daa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8015d9c:	2b01      	cmp	r3, #1
 8015d9e:	d1d7      	bne.n	8015d50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015da0:	68c0      	ldr	r0, [r0, #12]
 8015da2:	4770      	bx	lr
 8015da4:	781b      	ldrb	r3, [r3, #0]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d1d2      	bne.n	8015d50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015daa:	69c0      	ldr	r0, [r0, #28]
 8015dac:	4770      	bx	lr
 8015dae:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8015db0:	4770      	bx	lr
 8015db2:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8015db4:	4770      	bx	lr
 8015db6:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8015db8:	4770      	bx	lr
 8015dba:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8015dbc:	4770      	bx	lr
 8015dbe:	2a2c      	cmp	r2, #44	@ 0x2c
 8015dc0:	d02a      	beq.n	8015e18 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8015dc2:	d80f      	bhi.n	8015de4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8015dc4:	2a08      	cmp	r2, #8
 8015dc6:	d035      	beq.n	8015e34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8015dc8:	d805      	bhi.n	8015dd6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8015dca:	2a04      	cmp	r2, #4
 8015dcc:	d030      	beq.n	8015e30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8015dce:	2a05      	cmp	r2, #5
 8015dd0:	d1be      	bne.n	8015d50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015dd2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8015dd4:	4770      	bx	lr
 8015dd6:	2a0a      	cmp	r2, #10
 8015dd8:	d02c      	beq.n	8015e34 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8015dda:	d301      	bcc.n	8015de0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8015ddc:	2a0b      	cmp	r2, #11
 8015dde:	d1b7      	bne.n	8015d50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015de0:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8015de2:	4770      	bx	lr
 8015de4:	2a30      	cmp	r2, #48	@ 0x30
 8015de6:	d027      	beq.n	8015e38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8015de8:	d808      	bhi.n	8015dfc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8015dea:	2a2e      	cmp	r2, #46	@ 0x2e
 8015dec:	684b      	ldr	r3, [r1, #4]
 8015dee:	d01a      	beq.n	8015e26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8015df0:	d90b      	bls.n	8015e0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 8015df2:	781b      	ldrb	r3, [r3, #0]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d1ab      	bne.n	8015d50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015df8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8015dfa:	4770      	bx	lr
 8015dfc:	2a32      	cmp	r2, #50	@ 0x32
 8015dfe:	d01b      	beq.n	8015e38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8015e00:	d301      	bcc.n	8015e06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 8015e02:	2a33      	cmp	r2, #51	@ 0x33
 8015e04:	d1a4      	bne.n	8015d50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015e06:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8015e08:	4770      	bx	lr
 8015e0a:	781b      	ldrb	r3, [r3, #0]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d0f3      	beq.n	8015df8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8015e10:	2b01      	cmp	r3, #1
 8015e12:	d19d      	bne.n	8015d50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015e14:	6980      	ldr	r0, [r0, #24]
 8015e16:	4770      	bx	lr
 8015e18:	684b      	ldr	r3, [r1, #4]
 8015e1a:	781b      	ldrb	r3, [r3, #0]
 8015e1c:	b133      	cbz	r3, 8015e2c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8015e1e:	2b01      	cmp	r3, #1
 8015e20:	d196      	bne.n	8015d50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015e22:	6900      	ldr	r0, [r0, #16]
 8015e24:	4770      	bx	lr
 8015e26:	781b      	ldrb	r3, [r3, #0]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d191      	bne.n	8015d50 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015e2c:	6a00      	ldr	r0, [r0, #32]
 8015e2e:	4770      	bx	lr
 8015e30:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8015e32:	4770      	bx	lr
 8015e34:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8015e36:	4770      	bx	lr
 8015e38:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 8015e3a:	4770      	bx	lr

08015e3c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e40:	b085      	sub	sp, #20
 8015e42:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8015e44:	9203      	str	r2, [sp, #12]
 8015e46:	6870      	ldr	r0, [r6, #4]
 8015e48:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8015e4c:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8015e50:	9101      	str	r1, [sp, #4]
 8015e52:	fa1f f885 	uxth.w	r8, r5
 8015e56:	43ed      	mvns	r5, r5
 8015e58:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8015e5c:	b2ed      	uxtb	r5, r5
 8015e5e:	fb00 2404 	mla	r4, r0, r4, r2
 8015e62:	6832      	ldr	r2, [r6, #0]
 8015e64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015e68:	4414      	add	r4, r2
 8015e6a:	f8dc 2000 	ldr.w	r2, [ip]
 8015e6e:	9202      	str	r2, [sp, #8]
 8015e70:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015e74:	f102 0e04 	add.w	lr, r2, #4
 8015e78:	9a01      	ldr	r2, [sp, #4]
 8015e7a:	2a00      	cmp	r2, #0
 8015e7c:	dc03      	bgt.n	8015e86 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015e7e:	9a03      	ldr	r2, [sp, #12]
 8015e80:	2a00      	cmp	r2, #0
 8015e82:	f340 8116 	ble.w	80160b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015e86:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015e88:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8015e8c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8015e90:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015e92:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8015e96:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	dd0e      	ble.n	8015ebc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8015e9e:	1406      	asrs	r6, r0, #16
 8015ea0:	d405      	bmi.n	8015eae <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015ea2:	4556      	cmp	r6, sl
 8015ea4:	da03      	bge.n	8015eae <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015ea6:	1416      	asrs	r6, r2, #16
 8015ea8:	d401      	bmi.n	8015eae <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015eaa:	454e      	cmp	r6, r9
 8015eac:	db07      	blt.n	8015ebe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8015eae:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015eb0:	3b01      	subs	r3, #1
 8015eb2:	3403      	adds	r4, #3
 8015eb4:	4430      	add	r0, r6
 8015eb6:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8015eb8:	4432      	add	r2, r6
 8015eba:	e7ee      	b.n	8015e9a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8015ebc:	d063      	beq.n	8015f86 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8015ebe:	1e5e      	subs	r6, r3, #1
 8015ec0:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8015ec2:	fb07 0706 	mla	r7, r7, r6, r0
 8015ec6:	143f      	asrs	r7, r7, #16
 8015ec8:	d454      	bmi.n	8015f74 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015eca:	4557      	cmp	r7, sl
 8015ecc:	da52      	bge.n	8015f74 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015ece:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8015ed0:	fb07 2606 	mla	r6, r7, r6, r2
 8015ed4:	1436      	asrs	r6, r6, #16
 8015ed6:	d44d      	bmi.n	8015f74 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015ed8:	454e      	cmp	r6, r9
 8015eda:	da4b      	bge.n	8015f74 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015edc:	1ce6      	adds	r6, r4, #3
 8015ede:	4699      	mov	r9, r3
 8015ee0:	f1b9 0f00 	cmp.w	r9, #0
 8015ee4:	f106 0603 	add.w	r6, r6, #3
 8015ee8:	dd48      	ble.n	8015f7c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8015eea:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8015eee:	1417      	asrs	r7, r2, #16
 8015ef0:	9902      	ldr	r1, [sp, #8]
 8015ef2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8015ef6:	f109 39ff 	add.w	r9, r9, #4294967295
 8015efa:	fb0b 1707 	mla	r7, fp, r7, r1
 8015efe:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8015f02:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015f04:	f817 700a 	ldrb.w	r7, [r7, sl]
 8015f08:	fb1b fb05 	smulbb	fp, fp, r5
 8015f0c:	4408      	add	r0, r1
 8015f0e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015f10:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015f14:	440a      	add	r2, r1
 8015f16:	eb0e 0a07 	add.w	sl, lr, r7
 8015f1a:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8015f1e:	fb07 b708 	mla	r7, r7, r8, fp
 8015f22:	b2bf      	uxth	r7, r7
 8015f24:	f107 0b01 	add.w	fp, r7, #1
 8015f28:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015f2c:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8015f30:	fb1b fb05 	smulbb	fp, fp, r5
 8015f34:	123f      	asrs	r7, r7, #8
 8015f36:	f806 7c06 	strb.w	r7, [r6, #-6]
 8015f3a:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8015f3e:	fb07 b708 	mla	r7, r7, r8, fp
 8015f42:	b2bf      	uxth	r7, r7
 8015f44:	f107 0b01 	add.w	fp, r7, #1
 8015f48:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015f4c:	123f      	asrs	r7, r7, #8
 8015f4e:	f806 7c05 	strb.w	r7, [r6, #-5]
 8015f52:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8015f56:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8015f5a:	fb1a fa05 	smulbb	sl, sl, r5
 8015f5e:	fb07 a708 	mla	r7, r7, r8, sl
 8015f62:	b2bf      	uxth	r7, r7
 8015f64:	f107 0a01 	add.w	sl, r7, #1
 8015f68:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8015f6c:	123f      	asrs	r7, r7, #8
 8015f6e:	f806 7c04 	strb.w	r7, [r6, #-4]
 8015f72:	e7b5      	b.n	8015ee0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8015f74:	2700      	movs	r7, #0
 8015f76:	1bde      	subs	r6, r3, r7
 8015f78:	2e00      	cmp	r6, #0
 8015f7a:	dc42      	bgt.n	8016002 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8015f7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015f80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015f84:	441c      	add	r4, r3
 8015f86:	9b01      	ldr	r3, [sp, #4]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	f340 8092 	ble.w	80160b2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015f8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015f92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f94:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015f98:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015f9c:	eef0 6a62 	vmov.f32	s13, s5
 8015fa0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015fa4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015fa8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015fac:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 8015fb0:	eef0 6a43 	vmov.f32	s13, s6
 8015fb4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015fb8:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 8015fbc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015fc0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015fc4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015fc8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015fcc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015fd0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015fd4:	ee12 2a90 	vmov	r2, s5
 8015fd8:	eef0 2a47 	vmov.f32	s5, s14
 8015fdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8015fe0:	ee13 2a10 	vmov	r2, s6
 8015fe4:	9311      	str	r3, [sp, #68]	@ 0x44
 8015fe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015fe8:	eeb0 3a67 	vmov.f32	s6, s15
 8015fec:	fb92 f3f3 	sdiv	r3, r2, r3
 8015ff0:	9312      	str	r3, [sp, #72]	@ 0x48
 8015ff2:	9b01      	ldr	r3, [sp, #4]
 8015ff4:	9a03      	ldr	r2, [sp, #12]
 8015ff6:	3b01      	subs	r3, #1
 8015ff8:	9301      	str	r3, [sp, #4]
 8015ffa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ffc:	bf08      	it	eq
 8015ffe:	4613      	moveq	r3, r2
 8016000:	e73a      	b.n	8015e78 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8016002:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8016006:	d44e      	bmi.n	80160a6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016008:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801600c:	4556      	cmp	r6, sl
 801600e:	dd4a      	ble.n	80160a6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016010:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8016014:	d447      	bmi.n	80160a6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016016:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801601a:	4559      	cmp	r1, fp
 801601c:	dd43      	ble.n	80160a6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801601e:	fa0f f986 	sxth.w	r9, r6
 8016022:	9902      	ldr	r1, [sp, #8]
 8016024:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016028:	fb0b 1909 	mla	r9, fp, r9, r1
 801602c:	f814 b006 	ldrb.w	fp, [r4, r6]
 8016030:	f819 900a 	ldrb.w	r9, [r9, sl]
 8016034:	fb1b fb05 	smulbb	fp, fp, r5
 8016038:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801603c:	eb0e 0a09 	add.w	sl, lr, r9
 8016040:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8016044:	fb09 b908 	mla	r9, r9, r8, fp
 8016048:	fa1f f989 	uxth.w	r9, r9
 801604c:	f109 0b01 	add.w	fp, r9, #1
 8016050:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016054:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016058:	f804 9006 	strb.w	r9, [r4, r6]
 801605c:	4426      	add	r6, r4
 801605e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016062:	f896 b001 	ldrb.w	fp, [r6, #1]
 8016066:	fb1b fb05 	smulbb	fp, fp, r5
 801606a:	fb09 b908 	mla	r9, r9, r8, fp
 801606e:	fa1f f989 	uxth.w	r9, r9
 8016072:	f109 0b01 	add.w	fp, r9, #1
 8016076:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801607a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801607e:	f886 9001 	strb.w	r9, [r6, #1]
 8016082:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016086:	f896 a002 	ldrb.w	sl, [r6, #2]
 801608a:	fb1a fa05 	smulbb	sl, sl, r5
 801608e:	fb09 a908 	mla	r9, r9, r8, sl
 8016092:	fa1f f989 	uxth.w	r9, r9
 8016096:	f109 0a01 	add.w	sl, r9, #1
 801609a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801609e:	ea4f 2929 	mov.w	r9, r9, asr #8
 80160a2:	f886 9002 	strb.w	r9, [r6, #2]
 80160a6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80160a8:	3701      	adds	r7, #1
 80160aa:	4408      	add	r0, r1
 80160ac:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80160ae:	440a      	add	r2, r1
 80160b0:	e761      	b.n	8015f76 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80160b2:	b005      	add	sp, #20
 80160b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080160b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80160b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160bc:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80160be:	4693      	mov	fp, r2
 80160c0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80160c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80160c6:	6868      	ldr	r0, [r5, #4]
 80160c8:	6877      	ldr	r7, [r6, #4]
 80160ca:	9100      	str	r1, [sp, #0]
 80160cc:	3704      	adds	r7, #4
 80160ce:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80160d2:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 80160d6:	fb00 2404 	mla	r4, r0, r4, r2
 80160da:	682a      	ldr	r2, [r5, #0]
 80160dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80160e0:	4414      	add	r4, r2
 80160e2:	6832      	ldr	r2, [r6, #0]
 80160e4:	9201      	str	r2, [sp, #4]
 80160e6:	9a00      	ldr	r2, [sp, #0]
 80160e8:	2a00      	cmp	r2, #0
 80160ea:	dc03      	bgt.n	80160f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80160ec:	f1bb 0f00 	cmp.w	fp, #0
 80160f0:	f340 80bc 	ble.w	801626c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80160f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80160f6:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 80160fa:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80160fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016100:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8016104:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016108:	2b00      	cmp	r3, #0
 801610a:	dd0c      	ble.n	8016126 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801610c:	1405      	asrs	r5, r0, #16
 801610e:	d405      	bmi.n	801611c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016110:	4555      	cmp	r5, sl
 8016112:	da03      	bge.n	801611c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016114:	1415      	asrs	r5, r2, #16
 8016116:	d401      	bmi.n	801611c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016118:	454d      	cmp	r5, r9
 801611a:	db05      	blt.n	8016128 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801611c:	4440      	add	r0, r8
 801611e:	4472      	add	r2, lr
 8016120:	3b01      	subs	r3, #1
 8016122:	3403      	adds	r4, #3
 8016124:	e7f0      	b.n	8016108 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8016126:	d03f      	beq.n	80161a8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8016128:	1e5d      	subs	r5, r3, #1
 801612a:	fb08 0c05 	mla	ip, r8, r5, r0
 801612e:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8016132:	d42e      	bmi.n	8016192 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016134:	45d4      	cmp	ip, sl
 8016136:	da2c      	bge.n	8016192 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016138:	fb0e 2505 	mla	r5, lr, r5, r2
 801613c:	142d      	asrs	r5, r5, #16
 801613e:	d428      	bmi.n	8016192 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016140:	454d      	cmp	r5, r9
 8016142:	da26      	bge.n	8016192 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016144:	1ce5      	adds	r5, r4, #3
 8016146:	469c      	mov	ip, r3
 8016148:	f1bc 0f00 	cmp.w	ip, #0
 801614c:	f105 0503 	add.w	r5, r5, #3
 8016150:	dd25      	ble.n	801619e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8016152:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016156:	ea4f 4922 	mov.w	r9, r2, asr #16
 801615a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801615e:	4472      	add	r2, lr
 8016160:	468a      	mov	sl, r1
 8016162:	9901      	ldr	r1, [sp, #4]
 8016164:	fb0a 1909 	mla	r9, sl, r9, r1
 8016168:	1401      	asrs	r1, r0, #16
 801616a:	4440      	add	r0, r8
 801616c:	f819 9001 	ldrb.w	r9, [r9, r1]
 8016170:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8016174:	eb07 0a09 	add.w	sl, r7, r9
 8016178:	f817 9009 	ldrb.w	r9, [r7, r9]
 801617c:	f805 9c06 	strb.w	r9, [r5, #-6]
 8016180:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016184:	f805 9c05 	strb.w	r9, [r5, #-5]
 8016188:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801618c:	f805 9c04 	strb.w	r9, [r5, #-4]
 8016190:	e7da      	b.n	8016148 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8016192:	2500      	movs	r5, #0
 8016194:	eba3 0c05 	sub.w	ip, r3, r5
 8016198:	f1bc 0f00 	cmp.w	ip, #0
 801619c:	dc3b      	bgt.n	8016216 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801619e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80161a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80161a6:	441c      	add	r4, r3
 80161a8:	9b00      	ldr	r3, [sp, #0]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	dd5e      	ble.n	801626c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80161ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 80161b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80161b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80161b8:	eeb0 6a62 	vmov.f32	s12, s5
 80161bc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80161c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80161c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80161c8:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 80161cc:	eeb0 6a43 	vmov.f32	s12, s6
 80161d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80161d4:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 80161d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80161dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80161e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80161e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80161e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80161ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80161f0:	ee12 2a90 	vmov	r2, s5
 80161f4:	eef0 2a47 	vmov.f32	s5, s14
 80161f8:	fb92 f8f3 	sdiv	r8, r2, r3
 80161fc:	ee13 2a10 	vmov	r2, s6
 8016200:	eeb0 3a67 	vmov.f32	s6, s15
 8016204:	fb92 fef3 	sdiv	lr, r2, r3
 8016208:	9b00      	ldr	r3, [sp, #0]
 801620a:	3b01      	subs	r3, #1
 801620c:	9300      	str	r3, [sp, #0]
 801620e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016210:	bf08      	it	eq
 8016212:	465b      	moveq	r3, fp
 8016214:	e767      	b.n	80160e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8016216:	ea5f 4920 	movs.w	r9, r0, asr #16
 801621a:	d423      	bmi.n	8016264 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801621c:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8016220:	45cc      	cmp	ip, r9
 8016222:	dd1f      	ble.n	8016264 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016224:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016228:	d41c      	bmi.n	8016264 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801622a:	68f1      	ldr	r1, [r6, #12]
 801622c:	4551      	cmp	r1, sl
 801622e:	dd19      	ble.n	8016264 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016230:	fa0f fc8c 	sxth.w	ip, ip
 8016234:	9901      	ldr	r1, [sp, #4]
 8016236:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801623a:	f81c c009 	ldrb.w	ip, [ip, r9]
 801623e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016242:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8016246:	eb07 090c 	add.w	r9, r7, ip
 801624a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801624e:	f804 a00c 	strb.w	sl, [r4, ip]
 8016252:	44a4      	add	ip, r4
 8016254:	f899 a001 	ldrb.w	sl, [r9, #1]
 8016258:	f88c a001 	strb.w	sl, [ip, #1]
 801625c:	f899 9002 	ldrb.w	r9, [r9, #2]
 8016260:	f88c 9002 	strb.w	r9, [ip, #2]
 8016264:	4440      	add	r0, r8
 8016266:	4472      	add	r2, lr
 8016268:	3501      	adds	r5, #1
 801626a:	e793      	b.n	8016194 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801626c:	b003      	add	sp, #12
 801626e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016272 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016272:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016276:	b085      	sub	sp, #20
 8016278:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801627c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801627e:	9202      	str	r2, [sp, #8]
 8016280:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8016284:	6860      	ldr	r0, [r4, #4]
 8016286:	9203      	str	r2, [sp, #12]
 8016288:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801628c:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8016290:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8016294:	fb00 2505 	mla	r5, r0, r5, r2
 8016298:	6822      	ldr	r2, [r4, #0]
 801629a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801629e:	4415      	add	r5, r2
 80162a0:	f8dc 2000 	ldr.w	r2, [ip]
 80162a4:	9200      	str	r2, [sp, #0]
 80162a6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80162aa:	3204      	adds	r2, #4
 80162ac:	9201      	str	r2, [sp, #4]
 80162ae:	2900      	cmp	r1, #0
 80162b0:	dc03      	bgt.n	80162ba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80162b2:	9a02      	ldr	r2, [sp, #8]
 80162b4:	2a00      	cmp	r2, #0
 80162b6:	f340 8127 	ble.w	8016508 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80162ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80162bc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80162c0:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80162c4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80162c6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80162ca:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	dd0d      	ble.n	80162ee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80162d2:	1422      	asrs	r2, r4, #16
 80162d4:	d405      	bmi.n	80162e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80162d6:	4542      	cmp	r2, r8
 80162d8:	da03      	bge.n	80162e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80162da:	1402      	asrs	r2, r0, #16
 80162dc:	d401      	bmi.n	80162e2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80162de:	42ba      	cmp	r2, r7
 80162e0:	db06      	blt.n	80162f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80162e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80162e4:	4474      	add	r4, lr
 80162e6:	3b01      	subs	r3, #1
 80162e8:	3503      	adds	r5, #3
 80162ea:	4410      	add	r0, r2
 80162ec:	e7ef      	b.n	80162ce <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80162ee:	d075      	beq.n	80163dc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80162f0:	1e5a      	subs	r2, r3, #1
 80162f2:	fb0e 4602 	mla	r6, lr, r2, r4
 80162f6:	1436      	asrs	r6, r6, #16
 80162f8:	d465      	bmi.n	80163c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80162fa:	4546      	cmp	r6, r8
 80162fc:	da63      	bge.n	80163c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80162fe:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8016300:	fb06 0202 	mla	r2, r6, r2, r0
 8016304:	1412      	asrs	r2, r2, #16
 8016306:	d45e      	bmi.n	80163c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8016308:	42ba      	cmp	r2, r7
 801630a:	da5c      	bge.n	80163c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801630c:	1cef      	adds	r7, r5, #3
 801630e:	4699      	mov	r9, r3
 8016310:	f1b9 0f00 	cmp.w	r9, #0
 8016314:	dd5d      	ble.n	80163d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8016316:	1402      	asrs	r2, r0, #16
 8016318:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801631c:	1426      	asrs	r6, r4, #16
 801631e:	4692      	mov	sl, r2
 8016320:	9a00      	ldr	r2, [sp, #0]
 8016322:	fb08 220a 	mla	r2, r8, sl, r2
 8016326:	5d92      	ldrb	r2, [r2, r6]
 8016328:	9e01      	ldr	r6, [sp, #4]
 801632a:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801632e:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8016332:	d041      	beq.n	80163b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016334:	9a03      	ldr	r2, [sp, #12]
 8016336:	fa5f fb86 	uxtb.w	fp, r6
 801633a:	fb02 f808 	mul.w	r8, r2, r8
 801633e:	f108 0201 	add.w	r2, r8, #1
 8016342:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8016346:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801634a:	1212      	asrs	r2, r2, #8
 801634c:	fa1f fa82 	uxth.w	sl, r2
 8016350:	43d2      	mvns	r2, r2
 8016352:	fb1b fb0a 	smulbb	fp, fp, sl
 8016356:	b2d2      	uxtb	r2, r2
 8016358:	fb08 b802 	mla	r8, r8, r2, fp
 801635c:	fa1f f888 	uxth.w	r8, r8
 8016360:	f108 0b01 	add.w	fp, r8, #1
 8016364:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016368:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801636c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016370:	fb1b fb0a 	smulbb	fp, fp, sl
 8016374:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016378:	fb16 fa0a 	smulbb	sl, r6, sl
 801637c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8016380:	f807 8c03 	strb.w	r8, [r7, #-3]
 8016384:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8016388:	fb06 aa02 	mla	sl, r6, r2, sl
 801638c:	fb08 b802 	mla	r8, r8, r2, fp
 8016390:	fa1f fa8a 	uxth.w	sl, sl
 8016394:	fa1f f888 	uxth.w	r8, r8
 8016398:	f10a 0601 	add.w	r6, sl, #1
 801639c:	f108 0b01 	add.w	fp, r8, #1
 80163a0:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80163a4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80163a8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80163ac:	ea4f 2828 	mov.w	r8, r8, asr #8
 80163b0:	f807 ac01 	strb.w	sl, [r7, #-1]
 80163b4:	f807 8c02 	strb.w	r8, [r7, #-2]
 80163b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80163ba:	4474      	add	r4, lr
 80163bc:	3703      	adds	r7, #3
 80163be:	f109 39ff 	add.w	r9, r9, #4294967295
 80163c2:	4410      	add	r0, r2
 80163c4:	e7a4      	b.n	8016310 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80163c6:	f04f 0800 	mov.w	r8, #0
 80163ca:	eba3 0208 	sub.w	r2, r3, r8
 80163ce:	2a00      	cmp	r2, #0
 80163d0:	dc3b      	bgt.n	801644a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80163d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80163d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80163da:	441d      	add	r5, r3
 80163dc:	2900      	cmp	r1, #0
 80163de:	f340 8093 	ble.w	8016508 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80163e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80163e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80163e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80163ec:	3901      	subs	r1, #1
 80163ee:	eeb0 6a62 	vmov.f32	s12, s5
 80163f2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80163f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80163fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80163fe:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8016402:	eeb0 6a43 	vmov.f32	s12, s6
 8016406:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801640a:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801640e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016412:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016416:	ee77 2a62 	vsub.f32	s5, s14, s5
 801641a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801641e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016422:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016426:	ee12 2a90 	vmov	r2, s5
 801642a:	eef0 2a47 	vmov.f32	s5, s14
 801642e:	fb92 fef3 	sdiv	lr, r2, r3
 8016432:	ee13 2a10 	vmov	r2, s6
 8016436:	eeb0 3a67 	vmov.f32	s6, s15
 801643a:	fb92 f3f3 	sdiv	r3, r2, r3
 801643e:	9a02      	ldr	r2, [sp, #8]
 8016440:	9312      	str	r3, [sp, #72]	@ 0x48
 8016442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016444:	bf08      	it	eq
 8016446:	4613      	moveq	r3, r2
 8016448:	e731      	b.n	80162ae <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801644a:	1427      	asrs	r7, r4, #16
 801644c:	d456      	bmi.n	80164fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801644e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016452:	42be      	cmp	r6, r7
 8016454:	dd52      	ble.n	80164fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016456:	ea5f 4920 	movs.w	r9, r0, asr #16
 801645a:	d44f      	bmi.n	80164fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801645c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016460:	454a      	cmp	r2, r9
 8016462:	dd4b      	ble.n	80164fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016464:	9a00      	ldr	r2, [sp, #0]
 8016466:	b236      	sxth	r6, r6
 8016468:	fb09 2606 	mla	r6, r9, r6, r2
 801646c:	5df2      	ldrb	r2, [r6, r7]
 801646e:	9e01      	ldr	r6, [sp, #4]
 8016470:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8016474:	0e3a      	lsrs	r2, r7, #24
 8016476:	d041      	beq.n	80164fc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016478:	9e03      	ldr	r6, [sp, #12]
 801647a:	fa5f fb87 	uxtb.w	fp, r7
 801647e:	4372      	muls	r2, r6
 8016480:	1c56      	adds	r6, r2, #1
 8016482:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016486:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801648a:	1212      	asrs	r2, r2, #8
 801648c:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016490:	fa1f fa82 	uxth.w	sl, r2
 8016494:	43d2      	mvns	r2, r2
 8016496:	fb1b fb0a 	smulbb	fp, fp, sl
 801649a:	b2d2      	uxtb	r2, r2
 801649c:	fb09 b902 	mla	r9, r9, r2, fp
 80164a0:	fa1f f989 	uxth.w	r9, r9
 80164a4:	f109 0b01 	add.w	fp, r9, #1
 80164a8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80164ac:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80164b0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80164b4:	fb1b fb0a 	smulbb	fp, fp, sl
 80164b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80164bc:	fb17 fa0a 	smulbb	sl, r7, sl
 80164c0:	f805 9006 	strb.w	r9, [r5, r6]
 80164c4:	442e      	add	r6, r5
 80164c6:	78b7      	ldrb	r7, [r6, #2]
 80164c8:	f896 9001 	ldrb.w	r9, [r6, #1]
 80164cc:	fb07 aa02 	mla	sl, r7, r2, sl
 80164d0:	fb09 b902 	mla	r9, r9, r2, fp
 80164d4:	fa1f fa8a 	uxth.w	sl, sl
 80164d8:	fa1f f989 	uxth.w	r9, r9
 80164dc:	f10a 0701 	add.w	r7, sl, #1
 80164e0:	f109 0b01 	add.w	fp, r9, #1
 80164e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80164e8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80164ec:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80164f0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80164f4:	f886 a002 	strb.w	sl, [r6, #2]
 80164f8:	f886 9001 	strb.w	r9, [r6, #1]
 80164fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80164fe:	4474      	add	r4, lr
 8016500:	f108 0801 	add.w	r8, r8, #1
 8016504:	4410      	add	r0, r2
 8016506:	e760      	b.n	80163ca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8016508:	b005      	add	sp, #20
 801650a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801650e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801650e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016512:	b085      	sub	sp, #20
 8016514:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016518:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801651a:	9203      	str	r2, [sp, #12]
 801651c:	6868      	ldr	r0, [r5, #4]
 801651e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8016522:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8016526:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801652a:	fb00 2404 	mla	r4, r0, r4, r2
 801652e:	682a      	ldr	r2, [r5, #0]
 8016530:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016534:	4414      	add	r4, r2
 8016536:	f8dc 2000 	ldr.w	r2, [ip]
 801653a:	9201      	str	r2, [sp, #4]
 801653c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8016540:	3204      	adds	r2, #4
 8016542:	9202      	str	r2, [sp, #8]
 8016544:	2900      	cmp	r1, #0
 8016546:	dc03      	bgt.n	8016550 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8016548:	9a03      	ldr	r2, [sp, #12]
 801654a:	2a00      	cmp	r2, #0
 801654c:	f340 8137 	ble.w	80167be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016550:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016552:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016556:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801655a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801655c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016560:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016564:	2b00      	cmp	r3, #0
 8016566:	dd0d      	ble.n	8016584 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016568:	1405      	asrs	r5, r0, #16
 801656a:	d405      	bmi.n	8016578 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801656c:	4545      	cmp	r5, r8
 801656e:	da03      	bge.n	8016578 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016570:	1415      	asrs	r5, r2, #16
 8016572:	d401      	bmi.n	8016578 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016574:	42bd      	cmp	r5, r7
 8016576:	db06      	blt.n	8016586 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016578:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801657a:	4470      	add	r0, lr
 801657c:	3b01      	subs	r3, #1
 801657e:	3403      	adds	r4, #3
 8016580:	442a      	add	r2, r5
 8016582:	e7ef      	b.n	8016564 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8016584:	d070      	beq.n	8016668 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8016586:	1e5d      	subs	r5, r3, #1
 8016588:	fb0e 0605 	mla	r6, lr, r5, r0
 801658c:	1436      	asrs	r6, r6, #16
 801658e:	d462      	bmi.n	8016656 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016590:	4546      	cmp	r6, r8
 8016592:	da60      	bge.n	8016656 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016594:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8016596:	fb06 2505 	mla	r5, r6, r5, r2
 801659a:	142d      	asrs	r5, r5, #16
 801659c:	d45b      	bmi.n	8016656 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801659e:	42bd      	cmp	r5, r7
 80165a0:	da59      	bge.n	8016656 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80165a2:	1ce5      	adds	r5, r4, #3
 80165a4:	469a      	mov	sl, r3
 80165a6:	f1ba 0f00 	cmp.w	sl, #0
 80165aa:	dd58      	ble.n	801665e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 80165ac:	1416      	asrs	r6, r2, #16
 80165ae:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80165b2:	1407      	asrs	r7, r0, #16
 80165b4:	46b1      	mov	r9, r6
 80165b6:	9e01      	ldr	r6, [sp, #4]
 80165b8:	fb08 6609 	mla	r6, r8, r9, r6
 80165bc:	5df6      	ldrb	r6, [r6, r7]
 80165be:	9f02      	ldr	r7, [sp, #8]
 80165c0:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 80165c4:	0e37      	lsrs	r7, r6, #24
 80165c6:	2fff      	cmp	r7, #255	@ 0xff
 80165c8:	f000 80f0 	beq.w	80167ac <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80165cc:	fa5f f887 	uxtb.w	r8, r7
 80165d0:	b3d7      	cbz	r7, 8016648 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80165d2:	fa1f f788 	uxth.w	r7, r8
 80165d6:	ea6f 0808 	mvn.w	r8, r8
 80165da:	fa5f fb86 	uxtb.w	fp, r6
 80165de:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 80165e2:	fa5f f888 	uxtb.w	r8, r8
 80165e6:	fb1b fb07 	smulbb	fp, fp, r7
 80165ea:	fb09 b908 	mla	r9, r9, r8, fp
 80165ee:	fa1f f989 	uxth.w	r9, r9
 80165f2:	f109 0b01 	add.w	fp, r9, #1
 80165f6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80165fa:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80165fe:	fb1b fb08 	smulbb	fp, fp, r8
 8016602:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016606:	f805 9c03 	strb.w	r9, [r5, #-3]
 801660a:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801660e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016612:	fb09 b907 	mla	r9, r9, r7, fp
 8016616:	fa1f f989 	uxth.w	r9, r9
 801661a:	f109 0b01 	add.w	fp, r9, #1
 801661e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016622:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016626:	f805 9c02 	strb.w	r9, [r5, #-2]
 801662a:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801662e:	fb19 f808 	smulbb	r8, r9, r8
 8016632:	fb06 8607 	mla	r6, r6, r7, r8
 8016636:	b2b6      	uxth	r6, r6
 8016638:	f106 0801 	add.w	r8, r6, #1
 801663c:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8016640:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016644:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016648:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801664a:	4470      	add	r0, lr
 801664c:	3503      	adds	r5, #3
 801664e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016652:	4432      	add	r2, r6
 8016654:	e7a7      	b.n	80165a6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8016656:	2600      	movs	r6, #0
 8016658:	1b9d      	subs	r5, r3, r6
 801665a:	2d00      	cmp	r5, #0
 801665c:	dc3b      	bgt.n	80166d6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801665e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016662:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016666:	441c      	add	r4, r3
 8016668:	2900      	cmp	r1, #0
 801666a:	f340 80a8 	ble.w	80167be <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801666e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016674:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016678:	3901      	subs	r1, #1
 801667a:	eeb0 6a62 	vmov.f32	s12, s5
 801667e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016682:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016686:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801668a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801668e:	eeb0 6a43 	vmov.f32	s12, s6
 8016692:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016696:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801669a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801669e:	ee61 7a27 	vmul.f32	s15, s2, s15
 80166a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80166a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80166aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80166ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80166b2:	ee12 2a90 	vmov	r2, s5
 80166b6:	eef0 2a47 	vmov.f32	s5, s14
 80166ba:	fb92 fef3 	sdiv	lr, r2, r3
 80166be:	ee13 2a10 	vmov	r2, s6
 80166c2:	eeb0 3a67 	vmov.f32	s6, s15
 80166c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80166ca:	9a03      	ldr	r2, [sp, #12]
 80166cc:	9312      	str	r3, [sp, #72]	@ 0x48
 80166ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80166d0:	bf08      	it	eq
 80166d2:	4613      	moveq	r3, r2
 80166d4:	e736      	b.n	8016544 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80166d6:	ea5f 4820 	movs.w	r8, r0, asr #16
 80166da:	d457      	bmi.n	801678c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80166dc:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80166e0:	4547      	cmp	r7, r8
 80166e2:	dd53      	ble.n	801678c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80166e4:	ea5f 4922 	movs.w	r9, r2, asr #16
 80166e8:	d450      	bmi.n	801678c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80166ea:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80166ee:	454d      	cmp	r5, r9
 80166f0:	dd4c      	ble.n	801678c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80166f2:	9d01      	ldr	r5, [sp, #4]
 80166f4:	b23f      	sxth	r7, r7
 80166f6:	fb09 5707 	mla	r7, r9, r7, r5
 80166fa:	f817 5008 	ldrb.w	r5, [r7, r8]
 80166fe:	9f02      	ldr	r7, [sp, #8]
 8016700:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8016704:	0e2f      	lsrs	r7, r5, #24
 8016706:	2fff      	cmp	r7, #255	@ 0xff
 8016708:	d045      	beq.n	8016796 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801670a:	fa5f f987 	uxtb.w	r9, r7
 801670e:	b3ef      	cbz	r7, 801678c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016710:	fa1f f889 	uxth.w	r8, r9
 8016714:	ea6f 0909 	mvn.w	r9, r9
 8016718:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801671c:	fa5f fb85 	uxtb.w	fp, r5
 8016720:	f814 a007 	ldrb.w	sl, [r4, r7]
 8016724:	fa5f f989 	uxtb.w	r9, r9
 8016728:	fb1b fb08 	smulbb	fp, fp, r8
 801672c:	fb0a ba09 	mla	sl, sl, r9, fp
 8016730:	fa1f fa8a 	uxth.w	sl, sl
 8016734:	f10a 0b01 	add.w	fp, sl, #1
 8016738:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801673c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016740:	f804 a007 	strb.w	sl, [r4, r7]
 8016744:	4427      	add	r7, r4
 8016746:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801674a:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801674e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8016752:	fb1b fb09 	smulbb	fp, fp, r9
 8016756:	fb0a ba08 	mla	sl, sl, r8, fp
 801675a:	fa1f fa8a 	uxth.w	sl, sl
 801675e:	f10a 0b01 	add.w	fp, sl, #1
 8016762:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8016766:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801676a:	f887 a001 	strb.w	sl, [r7, #1]
 801676e:	f897 a002 	ldrb.w	sl, [r7, #2]
 8016772:	fb1a f909 	smulbb	r9, sl, r9
 8016776:	fb05 9508 	mla	r5, r5, r8, r9
 801677a:	b2ad      	uxth	r5, r5
 801677c:	f105 0901 	add.w	r9, r5, #1
 8016780:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8016784:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016788:	f887 9002 	strb.w	r9, [r7, #2]
 801678c:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801678e:	4470      	add	r0, lr
 8016790:	3601      	adds	r6, #1
 8016792:	442a      	add	r2, r5
 8016794:	e760      	b.n	8016658 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016796:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801679a:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801679e:	55e5      	strb	r5, [r4, r7]
 80167a0:	4427      	add	r7, r4
 80167a2:	0c2d      	lsrs	r5, r5, #16
 80167a4:	f887 8001 	strb.w	r8, [r7, #1]
 80167a8:	70bd      	strb	r5, [r7, #2]
 80167aa:	e7ef      	b.n	801678c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80167ac:	0a37      	lsrs	r7, r6, #8
 80167ae:	f805 6c03 	strb.w	r6, [r5, #-3]
 80167b2:	0c36      	lsrs	r6, r6, #16
 80167b4:	f805 7c02 	strb.w	r7, [r5, #-2]
 80167b8:	f805 6c01 	strb.w	r6, [r5, #-1]
 80167bc:	e744      	b.n	8016648 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80167be:	b005      	add	sp, #20
 80167c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080167c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80167c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167c8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80167ca:	9201      	str	r2, [sp, #4]
 80167cc:	6870      	ldr	r0, [r6, #4]
 80167ce:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 80167d2:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 80167d6:	fa1f fe85 	uxth.w	lr, r5
 80167da:	43ed      	mvns	r5, r5
 80167dc:	f8dc 8000 	ldr.w	r8, [ip]
 80167e0:	b2ed      	uxtb	r5, r5
 80167e2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80167e6:	fb00 2404 	mla	r4, r0, r4, r2
 80167ea:	6832      	ldr	r2, [r6, #0]
 80167ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80167f0:	4414      	add	r4, r2
 80167f2:	2900      	cmp	r1, #0
 80167f4:	dc03      	bgt.n	80167fe <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80167f6:	9a01      	ldr	r2, [sp, #4]
 80167f8:	2a00      	cmp	r2, #0
 80167fa:	f340 810d 	ble.w	8016a18 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80167fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016800:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8016804:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016808:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801680a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801680e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016812:	2b00      	cmp	r3, #0
 8016814:	dd0e      	ble.n	8016834 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016816:	1406      	asrs	r6, r0, #16
 8016818:	d405      	bmi.n	8016826 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801681a:	4556      	cmp	r6, sl
 801681c:	da03      	bge.n	8016826 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801681e:	1416      	asrs	r6, r2, #16
 8016820:	d401      	bmi.n	8016826 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8016822:	454e      	cmp	r6, r9
 8016824:	db07      	blt.n	8016836 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016826:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8016828:	3b01      	subs	r3, #1
 801682a:	3403      	adds	r4, #3
 801682c:	4430      	add	r0, r6
 801682e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8016830:	4432      	add	r2, r6
 8016832:	e7ee      	b.n	8016812 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8016834:	d060      	beq.n	80168f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8016836:	1e5e      	subs	r6, r3, #1
 8016838:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801683a:	fb07 0706 	mla	r7, r7, r6, r0
 801683e:	143f      	asrs	r7, r7, #16
 8016840:	d451      	bmi.n	80168e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016842:	4557      	cmp	r7, sl
 8016844:	da4f      	bge.n	80168e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016846:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8016848:	fb07 2606 	mla	r6, r7, r6, r2
 801684c:	1436      	asrs	r6, r6, #16
 801684e:	d44a      	bmi.n	80168e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016850:	454e      	cmp	r6, r9
 8016852:	da48      	bge.n	80168e6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016854:	1ce6      	adds	r6, r4, #3
 8016856:	4699      	mov	r9, r3
 8016858:	f1b9 0f00 	cmp.w	r9, #0
 801685c:	f106 0603 	add.w	r6, r6, #3
 8016860:	dd45      	ble.n	80168ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8016862:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8016866:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801686a:	1417      	asrs	r7, r2, #16
 801686c:	f109 39ff 	add.w	r9, r9, #4294967295
 8016870:	fb0b a707 	mla	r7, fp, r7, sl
 8016874:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8016878:	fb1b fb05 	smulbb	fp, fp, r5
 801687c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016880:	eb08 0a07 	add.w	sl, r8, r7
 8016884:	f818 7007 	ldrb.w	r7, [r8, r7]
 8016888:	fb07 b70e 	mla	r7, r7, lr, fp
 801688c:	b2bf      	uxth	r7, r7
 801688e:	f107 0b01 	add.w	fp, r7, #1
 8016892:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016896:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801689a:	fb1b fb05 	smulbb	fp, fp, r5
 801689e:	123f      	asrs	r7, r7, #8
 80168a0:	f806 7c06 	strb.w	r7, [r6, #-6]
 80168a4:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80168a8:	fb07 b70e 	mla	r7, r7, lr, fp
 80168ac:	b2bf      	uxth	r7, r7
 80168ae:	f107 0b01 	add.w	fp, r7, #1
 80168b2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80168b6:	123f      	asrs	r7, r7, #8
 80168b8:	f806 7c05 	strb.w	r7, [r6, #-5]
 80168bc:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80168c0:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80168c4:	fb1a fa05 	smulbb	sl, sl, r5
 80168c8:	fb07 a70e 	mla	r7, r7, lr, sl
 80168cc:	b2bf      	uxth	r7, r7
 80168ce:	f107 0a01 	add.w	sl, r7, #1
 80168d2:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 80168d6:	123f      	asrs	r7, r7, #8
 80168d8:	f806 7c04 	strb.w	r7, [r6, #-4]
 80168dc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80168de:	4438      	add	r0, r7
 80168e0:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80168e2:	443a      	add	r2, r7
 80168e4:	e7b8      	b.n	8016858 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80168e6:	2700      	movs	r7, #0
 80168e8:	1bde      	subs	r6, r3, r7
 80168ea:	2e00      	cmp	r6, #0
 80168ec:	dc3f      	bgt.n	801696e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80168ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80168f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80168f6:	441c      	add	r4, r3
 80168f8:	2900      	cmp	r1, #0
 80168fa:	f340 808d 	ble.w	8016a18 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80168fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016902:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016904:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016908:	3901      	subs	r1, #1
 801690a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801690e:	eef0 6a62 	vmov.f32	s13, s5
 8016912:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016916:	ee31 1a05 	vadd.f32	s2, s2, s10
 801691a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801691e:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 8016922:	eef0 6a43 	vmov.f32	s13, s6
 8016926:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801692a:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801692e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016932:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016936:	ee77 2a62 	vsub.f32	s5, s14, s5
 801693a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801693e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016942:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016946:	ee12 2a90 	vmov	r2, s5
 801694a:	eef0 2a47 	vmov.f32	s5, s14
 801694e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016952:	ee13 2a10 	vmov	r2, s6
 8016956:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016958:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801695a:	eeb0 3a67 	vmov.f32	s6, s15
 801695e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016962:	9a01      	ldr	r2, [sp, #4]
 8016964:	9310      	str	r3, [sp, #64]	@ 0x40
 8016966:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016968:	bf08      	it	eq
 801696a:	4613      	moveq	r3, r2
 801696c:	e741      	b.n	80167f2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801696e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016972:	d44b      	bmi.n	8016a0c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016974:	f8dc b008 	ldr.w	fp, [ip, #8]
 8016978:	45cb      	cmp	fp, r9
 801697a:	dd47      	ble.n	8016a0c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801697c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016980:	d444      	bmi.n	8016a0c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016982:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8016986:	4556      	cmp	r6, sl
 8016988:	dd40      	ble.n	8016a0c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801698a:	fa0f f68b 	sxth.w	r6, fp
 801698e:	fb0a 9906 	mla	r9, sl, r6, r9
 8016992:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016996:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801699a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801699e:	fb1b fb05 	smulbb	fp, fp, r5
 80169a2:	eb08 0a09 	add.w	sl, r8, r9
 80169a6:	f818 9009 	ldrb.w	r9, [r8, r9]
 80169aa:	fb09 b90e 	mla	r9, r9, lr, fp
 80169ae:	fa1f f989 	uxth.w	r9, r9
 80169b2:	f109 0b01 	add.w	fp, r9, #1
 80169b6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80169ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 80169be:	f804 9006 	strb.w	r9, [r4, r6]
 80169c2:	4426      	add	r6, r4
 80169c4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80169c8:	f896 b001 	ldrb.w	fp, [r6, #1]
 80169cc:	fb1b fb05 	smulbb	fp, fp, r5
 80169d0:	fb09 b90e 	mla	r9, r9, lr, fp
 80169d4:	fa1f f989 	uxth.w	r9, r9
 80169d8:	f109 0b01 	add.w	fp, r9, #1
 80169dc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80169e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80169e4:	f886 9001 	strb.w	r9, [r6, #1]
 80169e8:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80169ec:	f896 a002 	ldrb.w	sl, [r6, #2]
 80169f0:	fb1a fa05 	smulbb	sl, sl, r5
 80169f4:	fb09 a90e 	mla	r9, r9, lr, sl
 80169f8:	fa1f f989 	uxth.w	r9, r9
 80169fc:	f109 0a01 	add.w	sl, r9, #1
 8016a00:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8016a04:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016a08:	f886 9002 	strb.w	r9, [r6, #2]
 8016a0c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8016a0e:	3701      	adds	r7, #1
 8016a10:	4430      	add	r0, r6
 8016a12:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8016a14:	4432      	add	r2, r6
 8016a16:	e767      	b.n	80168e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8016a18:	b003      	add	sp, #12
 8016a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016a1e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016a1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a22:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016a24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016a28:	9201      	str	r2, [sp, #4]
 8016a2a:	6868      	ldr	r0, [r5, #4]
 8016a2c:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8016a2e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8016a32:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 8016a36:	fb00 2404 	mla	r4, r0, r4, r2
 8016a3a:	682a      	ldr	r2, [r5, #0]
 8016a3c:	f8d7 8000 	ldr.w	r8, [r7]
 8016a40:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016a44:	4414      	add	r4, r2
 8016a46:	2900      	cmp	r1, #0
 8016a48:	dc03      	bgt.n	8016a52 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016a4a:	9a01      	ldr	r2, [sp, #4]
 8016a4c:	2a00      	cmp	r2, #0
 8016a4e:	f340 80af 	ble.w	8016bb0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016a52:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016a54:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8016a58:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016a5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016a5e:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8016a62:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	dd0c      	ble.n	8016a84 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8016a6a:	1405      	asrs	r5, r0, #16
 8016a6c:	d405      	bmi.n	8016a7a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016a6e:	4555      	cmp	r5, sl
 8016a70:	da03      	bge.n	8016a7a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016a72:	1415      	asrs	r5, r2, #16
 8016a74:	d401      	bmi.n	8016a7a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016a76:	454d      	cmp	r5, r9
 8016a78:	db05      	blt.n	8016a86 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016a7a:	4470      	add	r0, lr
 8016a7c:	4462      	add	r2, ip
 8016a7e:	3b01      	subs	r3, #1
 8016a80:	3403      	adds	r4, #3
 8016a82:	e7f0      	b.n	8016a66 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016a84:	d038      	beq.n	8016af8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016a86:	1e5d      	subs	r5, r3, #1
 8016a88:	fb0e 0605 	mla	r6, lr, r5, r0
 8016a8c:	1436      	asrs	r6, r6, #16
 8016a8e:	d42a      	bmi.n	8016ae6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016a90:	4556      	cmp	r6, sl
 8016a92:	da28      	bge.n	8016ae6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016a94:	fb0c 2505 	mla	r5, ip, r5, r2
 8016a98:	142d      	asrs	r5, r5, #16
 8016a9a:	d424      	bmi.n	8016ae6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016a9c:	454d      	cmp	r5, r9
 8016a9e:	da22      	bge.n	8016ae6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016aa0:	1ce6      	adds	r6, r4, #3
 8016aa2:	4699      	mov	r9, r3
 8016aa4:	f1b9 0f00 	cmp.w	r9, #0
 8016aa8:	f106 0603 	add.w	r6, r6, #3
 8016aac:	dd1f      	ble.n	8016aee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8016aae:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8016ab2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8016ab6:	1415      	asrs	r5, r2, #16
 8016ab8:	4470      	add	r0, lr
 8016aba:	4462      	add	r2, ip
 8016abc:	f109 39ff 	add.w	r9, r9, #4294967295
 8016ac0:	fb0b a505 	mla	r5, fp, r5, sl
 8016ac4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016ac8:	eb08 0a05 	add.w	sl, r8, r5
 8016acc:	f818 5005 	ldrb.w	r5, [r8, r5]
 8016ad0:	f806 5c06 	strb.w	r5, [r6, #-6]
 8016ad4:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8016ad8:	f806 5c05 	strb.w	r5, [r6, #-5]
 8016adc:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8016ae0:	f806 5c04 	strb.w	r5, [r6, #-4]
 8016ae4:	e7de      	b.n	8016aa4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016ae6:	2600      	movs	r6, #0
 8016ae8:	1b9d      	subs	r5, r3, r6
 8016aea:	2d00      	cmp	r5, #0
 8016aec:	dc38      	bgt.n	8016b60 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016aee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016af2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016af6:	441c      	add	r4, r3
 8016af8:	2900      	cmp	r1, #0
 8016afa:	dd59      	ble.n	8016bb0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016afc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016b00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016b02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016b06:	3901      	subs	r1, #1
 8016b08:	eeb0 6a62 	vmov.f32	s12, s5
 8016b0c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016b10:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016b14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b18:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8016b1c:	eeb0 6a43 	vmov.f32	s12, s6
 8016b20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b24:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8016b28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016b2c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016b30:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016b34:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016b38:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016b3c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016b40:	ee12 2a90 	vmov	r2, s5
 8016b44:	eef0 2a47 	vmov.f32	s5, s14
 8016b48:	fb92 fef3 	sdiv	lr, r2, r3
 8016b4c:	ee13 2a10 	vmov	r2, s6
 8016b50:	eeb0 3a67 	vmov.f32	s6, s15
 8016b54:	fb92 fcf3 	sdiv	ip, r2, r3
 8016b58:	9a01      	ldr	r2, [sp, #4]
 8016b5a:	bf08      	it	eq
 8016b5c:	4613      	moveq	r3, r2
 8016b5e:	e772      	b.n	8016a46 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016b60:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016b64:	d420      	bmi.n	8016ba8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016b66:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8016b6a:	45cb      	cmp	fp, r9
 8016b6c:	dd1c      	ble.n	8016ba8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016b6e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016b72:	d419      	bmi.n	8016ba8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016b74:	68fd      	ldr	r5, [r7, #12]
 8016b76:	4555      	cmp	r5, sl
 8016b78:	dd16      	ble.n	8016ba8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016b7a:	fa0f f58b 	sxth.w	r5, fp
 8016b7e:	fb0a 9505 	mla	r5, sl, r5, r9
 8016b82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b86:	f818 9005 	ldrb.w	r9, [r8, r5]
 8016b8a:	eb08 0b05 	add.w	fp, r8, r5
 8016b8e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8016b92:	f804 9005 	strb.w	r9, [r4, r5]
 8016b96:	4425      	add	r5, r4
 8016b98:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8016b9c:	f885 9001 	strb.w	r9, [r5, #1]
 8016ba0:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8016ba4:	f885 9002 	strb.w	r9, [r5, #2]
 8016ba8:	4470      	add	r0, lr
 8016baa:	4462      	add	r2, ip
 8016bac:	3601      	adds	r6, #1
 8016bae:	e79b      	b.n	8016ae8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8016bb0:	b003      	add	sp, #12
 8016bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016bb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016bb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bba:	b085      	sub	sp, #20
 8016bbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016bc0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8016bc2:	9202      	str	r2, [sp, #8]
 8016bc4:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8016bc8:	6860      	ldr	r0, [r4, #4]
 8016bca:	9203      	str	r2, [sp, #12]
 8016bcc:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8016bd0:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8016bd4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8016bd8:	fb00 2505 	mla	r5, r0, r5, r2
 8016bdc:	6822      	ldr	r2, [r4, #0]
 8016bde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016be2:	4415      	add	r5, r2
 8016be4:	f8dc 2000 	ldr.w	r2, [ip]
 8016be8:	9201      	str	r2, [sp, #4]
 8016bea:	2900      	cmp	r1, #0
 8016bec:	dc03      	bgt.n	8016bf6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8016bee:	9a02      	ldr	r2, [sp, #8]
 8016bf0:	2a00      	cmp	r2, #0
 8016bf2:	f340 8122 	ble.w	8016e3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8016bf6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016bf8:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016bfc:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8016c00:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016c02:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016c06:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	dd0d      	ble.n	8016c2a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8016c0e:	1422      	asrs	r2, r4, #16
 8016c10:	d405      	bmi.n	8016c1e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016c12:	4542      	cmp	r2, r8
 8016c14:	da03      	bge.n	8016c1e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016c16:	1402      	asrs	r2, r0, #16
 8016c18:	d401      	bmi.n	8016c1e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016c1a:	42ba      	cmp	r2, r7
 8016c1c:	db06      	blt.n	8016c2c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016c1e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016c20:	4474      	add	r4, lr
 8016c22:	3b01      	subs	r3, #1
 8016c24:	3503      	adds	r5, #3
 8016c26:	4410      	add	r0, r2
 8016c28:	e7ef      	b.n	8016c0a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8016c2a:	d072      	beq.n	8016d12 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8016c2c:	1e5a      	subs	r2, r3, #1
 8016c2e:	fb0e 4602 	mla	r6, lr, r2, r4
 8016c32:	1436      	asrs	r6, r6, #16
 8016c34:	d462      	bmi.n	8016cfc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016c36:	4546      	cmp	r6, r8
 8016c38:	da60      	bge.n	8016cfc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016c3a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8016c3c:	fb06 0202 	mla	r2, r6, r2, r0
 8016c40:	1412      	asrs	r2, r2, #16
 8016c42:	d45b      	bmi.n	8016cfc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016c44:	42ba      	cmp	r2, r7
 8016c46:	da59      	bge.n	8016cfc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016c48:	1cef      	adds	r7, r5, #3
 8016c4a:	4699      	mov	r9, r3
 8016c4c:	f1b9 0f00 	cmp.w	r9, #0
 8016c50:	dd5a      	ble.n	8016d08 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016c52:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016c56:	1426      	asrs	r6, r4, #16
 8016c58:	1402      	asrs	r2, r0, #16
 8016c5a:	fb08 6202 	mla	r2, r8, r2, r6
 8016c5e:	9e01      	ldr	r6, [sp, #4]
 8016c60:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8016c64:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8016c68:	d041      	beq.n	8016cee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016c6a:	9a03      	ldr	r2, [sp, #12]
 8016c6c:	fa5f fb86 	uxtb.w	fp, r6
 8016c70:	fb02 f808 	mul.w	r8, r2, r8
 8016c74:	f108 0201 	add.w	r2, r8, #1
 8016c78:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8016c7c:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8016c80:	1212      	asrs	r2, r2, #8
 8016c82:	fa1f fa82 	uxth.w	sl, r2
 8016c86:	43d2      	mvns	r2, r2
 8016c88:	fb1b fb0a 	smulbb	fp, fp, sl
 8016c8c:	b2d2      	uxtb	r2, r2
 8016c8e:	fb08 b802 	mla	r8, r8, r2, fp
 8016c92:	fa1f f888 	uxth.w	r8, r8
 8016c96:	f108 0b01 	add.w	fp, r8, #1
 8016c9a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016c9e:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8016ca2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016ca6:	fb1b fb0a 	smulbb	fp, fp, sl
 8016caa:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016cae:	fb16 fa0a 	smulbb	sl, r6, sl
 8016cb2:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8016cb6:	f807 8c03 	strb.w	r8, [r7, #-3]
 8016cba:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8016cbe:	fb06 aa02 	mla	sl, r6, r2, sl
 8016cc2:	fb08 b802 	mla	r8, r8, r2, fp
 8016cc6:	fa1f fa8a 	uxth.w	sl, sl
 8016cca:	fa1f f888 	uxth.w	r8, r8
 8016cce:	f10a 0601 	add.w	r6, sl, #1
 8016cd2:	f108 0b01 	add.w	fp, r8, #1
 8016cd6:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8016cda:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016cde:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016ce2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016ce6:	f807 ac01 	strb.w	sl, [r7, #-1]
 8016cea:	f807 8c02 	strb.w	r8, [r7, #-2]
 8016cee:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016cf0:	4474      	add	r4, lr
 8016cf2:	3703      	adds	r7, #3
 8016cf4:	f109 39ff 	add.w	r9, r9, #4294967295
 8016cf8:	4410      	add	r0, r2
 8016cfa:	e7a7      	b.n	8016c4c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016cfc:	f04f 0800 	mov.w	r8, #0
 8016d00:	eba3 0208 	sub.w	r2, r3, r8
 8016d04:	2a00      	cmp	r2, #0
 8016d06:	dc3b      	bgt.n	8016d80 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8016d08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016d0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016d10:	441d      	add	r5, r3
 8016d12:	2900      	cmp	r1, #0
 8016d14:	f340 8091 	ble.w	8016e3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8016d18:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016d1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016d1e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016d22:	3901      	subs	r1, #1
 8016d24:	eeb0 6a62 	vmov.f32	s12, s5
 8016d28:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016d2c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016d30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016d34:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8016d38:	eeb0 6a43 	vmov.f32	s12, s6
 8016d3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016d40:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8016d44:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016d48:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016d4c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016d50:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016d54:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016d58:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016d5c:	ee12 2a90 	vmov	r2, s5
 8016d60:	eef0 2a47 	vmov.f32	s5, s14
 8016d64:	fb92 fef3 	sdiv	lr, r2, r3
 8016d68:	ee13 2a10 	vmov	r2, s6
 8016d6c:	eeb0 3a67 	vmov.f32	s6, s15
 8016d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8016d74:	9a02      	ldr	r2, [sp, #8]
 8016d76:	9312      	str	r3, [sp, #72]	@ 0x48
 8016d78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016d7a:	bf08      	it	eq
 8016d7c:	4613      	moveq	r3, r2
 8016d7e:	e734      	b.n	8016bea <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016d80:	1427      	asrs	r7, r4, #16
 8016d82:	d454      	bmi.n	8016e2e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016d84:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016d88:	42be      	cmp	r6, r7
 8016d8a:	dd50      	ble.n	8016e2e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016d8c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016d90:	d44d      	bmi.n	8016e2e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016d92:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016d96:	454a      	cmp	r2, r9
 8016d98:	dd49      	ble.n	8016e2e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016d9a:	b236      	sxth	r6, r6
 8016d9c:	9a01      	ldr	r2, [sp, #4]
 8016d9e:	fb09 7606 	mla	r6, r9, r6, r7
 8016da2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016da6:	0e3a      	lsrs	r2, r7, #24
 8016da8:	d041      	beq.n	8016e2e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016daa:	9e03      	ldr	r6, [sp, #12]
 8016dac:	fa5f fb87 	uxtb.w	fp, r7
 8016db0:	4372      	muls	r2, r6
 8016db2:	1c56      	adds	r6, r2, #1
 8016db4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016db8:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8016dbc:	1212      	asrs	r2, r2, #8
 8016dbe:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016dc2:	fa1f fa82 	uxth.w	sl, r2
 8016dc6:	43d2      	mvns	r2, r2
 8016dc8:	fb1b fb0a 	smulbb	fp, fp, sl
 8016dcc:	b2d2      	uxtb	r2, r2
 8016dce:	fb09 b902 	mla	r9, r9, r2, fp
 8016dd2:	fa1f f989 	uxth.w	r9, r9
 8016dd6:	f109 0b01 	add.w	fp, r9, #1
 8016dda:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016dde:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016de2:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016de6:	fb1b fb0a 	smulbb	fp, fp, sl
 8016dea:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016dee:	fb17 fa0a 	smulbb	sl, r7, sl
 8016df2:	f805 9006 	strb.w	r9, [r5, r6]
 8016df6:	442e      	add	r6, r5
 8016df8:	78b7      	ldrb	r7, [r6, #2]
 8016dfa:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016dfe:	fb07 aa02 	mla	sl, r7, r2, sl
 8016e02:	fb09 b902 	mla	r9, r9, r2, fp
 8016e06:	fa1f fa8a 	uxth.w	sl, sl
 8016e0a:	fa1f f989 	uxth.w	r9, r9
 8016e0e:	f10a 0701 	add.w	r7, sl, #1
 8016e12:	f109 0b01 	add.w	fp, r9, #1
 8016e16:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016e1a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016e1e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016e22:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016e26:	f886 a002 	strb.w	sl, [r6, #2]
 8016e2a:	f886 9001 	strb.w	r9, [r6, #1]
 8016e2e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016e30:	4474      	add	r4, lr
 8016e32:	f108 0801 	add.w	r8, r8, #1
 8016e36:	4410      	add	r0, r2
 8016e38:	e762      	b.n	8016d00 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016e3a:	b005      	add	sp, #20
 8016e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016e40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e44:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8016e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016e4a:	9201      	str	r2, [sp, #4]
 8016e4c:	6860      	ldr	r0, [r4, #4]
 8016e4e:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8016e52:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 8016e56:	fb00 2505 	mla	r5, r0, r5, r2
 8016e5a:	6822      	ldr	r2, [r4, #0]
 8016e5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016e60:	4415      	add	r5, r2
 8016e62:	f8dc 2000 	ldr.w	r2, [ip]
 8016e66:	9200      	str	r2, [sp, #0]
 8016e68:	2900      	cmp	r1, #0
 8016e6a:	dc03      	bgt.n	8016e74 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016e6c:	9a01      	ldr	r2, [sp, #4]
 8016e6e:	2a00      	cmp	r2, #0
 8016e70:	f340 812b 	ble.w	80170ca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016e74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016e76:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016e7a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8016e7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016e80:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016e84:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	dd0e      	ble.n	8016eaa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016e8c:	1422      	asrs	r2, r4, #16
 8016e8e:	d405      	bmi.n	8016e9c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016e90:	4572      	cmp	r2, lr
 8016e92:	da03      	bge.n	8016e9c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016e94:	1402      	asrs	r2, r0, #16
 8016e96:	d401      	bmi.n	8016e9c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016e98:	42ba      	cmp	r2, r7
 8016e9a:	db07      	blt.n	8016eac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8016e9c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016e9e:	3b01      	subs	r3, #1
 8016ea0:	3503      	adds	r5, #3
 8016ea2:	4414      	add	r4, r2
 8016ea4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016ea6:	4410      	add	r0, r2
 8016ea8:	e7ee      	b.n	8016e88 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016eaa:	d06f      	beq.n	8016f8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016eac:	1e5a      	subs	r2, r3, #1
 8016eae:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8016eb0:	fb06 4602 	mla	r6, r6, r2, r4
 8016eb4:	1436      	asrs	r6, r6, #16
 8016eb6:	d45e      	bmi.n	8016f76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016eb8:	4576      	cmp	r6, lr
 8016eba:	da5c      	bge.n	8016f76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016ebc:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8016ebe:	fb06 0202 	mla	r2, r6, r2, r0
 8016ec2:	1412      	asrs	r2, r2, #16
 8016ec4:	d457      	bmi.n	8016f76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016ec6:	42ba      	cmp	r2, r7
 8016ec8:	da55      	bge.n	8016f76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016eca:	1cee      	adds	r6, r5, #3
 8016ecc:	469a      	mov	sl, r3
 8016ece:	f1ba 0f00 	cmp.w	sl, #0
 8016ed2:	dd56      	ble.n	8016f82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016ed4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016ed8:	1427      	asrs	r7, r4, #16
 8016eda:	1402      	asrs	r2, r0, #16
 8016edc:	fb0e 7202 	mla	r2, lr, r2, r7
 8016ee0:	9f00      	ldr	r7, [sp, #0]
 8016ee2:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8016ee6:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8016eea:	d03c      	beq.n	8016f66 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016eec:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8016ef0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016ef4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016ef8:	fa5f f28e 	uxtb.w	r2, lr
 8016efc:	b2ff      	uxtb	r7, r7
 8016efe:	f000 80dd 	beq.w	80170bc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8016f02:	fa1f f882 	uxth.w	r8, r2
 8016f06:	43d2      	mvns	r2, r2
 8016f08:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8016f0c:	fb17 f708 	smulbb	r7, r7, r8
 8016f10:	b2d2      	uxtb	r2, r2
 8016f12:	fb19 f908 	smulbb	r9, r9, r8
 8016f16:	fb0e 7702 	mla	r7, lr, r2, r7
 8016f1a:	fb1b f808 	smulbb	r8, fp, r8
 8016f1e:	b2bf      	uxth	r7, r7
 8016f20:	f107 0e01 	add.w	lr, r7, #1
 8016f24:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8016f28:	123f      	asrs	r7, r7, #8
 8016f2a:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016f2e:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8016f32:	fb07 9902 	mla	r9, r7, r2, r9
 8016f36:	fa1f f989 	uxth.w	r9, r9
 8016f3a:	f109 0701 	add.w	r7, r9, #1
 8016f3e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8016f42:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016f46:	fb07 8802 	mla	r8, r7, r2, r8
 8016f4a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016f4e:	fa1f f888 	uxth.w	r8, r8
 8016f52:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016f56:	f108 0201 	add.w	r2, r8, #1
 8016f5a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8016f5e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016f62:	f806 8c01 	strb.w	r8, [r6, #-1]
 8016f66:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016f68:	3603      	adds	r6, #3
 8016f6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016f6e:	4414      	add	r4, r2
 8016f70:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016f72:	4410      	add	r0, r2
 8016f74:	e7ab      	b.n	8016ece <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8016f76:	f04f 0e00 	mov.w	lr, #0
 8016f7a:	eba3 020e 	sub.w	r2, r3, lr
 8016f7e:	2a00      	cmp	r2, #0
 8016f80:	dc3d      	bgt.n	8016ffe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8016f82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016f86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016f8a:	441d      	add	r5, r3
 8016f8c:	2900      	cmp	r1, #0
 8016f8e:	f340 809c 	ble.w	80170ca <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016f92:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016f96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016f98:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016f9c:	3901      	subs	r1, #1
 8016f9e:	eeb0 6a62 	vmov.f32	s12, s5
 8016fa2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016fa6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016faa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016fae:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8016fb2:	eeb0 6a43 	vmov.f32	s12, s6
 8016fb6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016fba:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8016fbe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016fc2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016fc6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016fca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016fce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016fd2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016fd6:	ee12 2a90 	vmov	r2, s5
 8016fda:	eef0 2a47 	vmov.f32	s5, s14
 8016fde:	fb92 f3f3 	sdiv	r3, r2, r3
 8016fe2:	ee13 2a10 	vmov	r2, s6
 8016fe6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016fe8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016fea:	eeb0 3a67 	vmov.f32	s6, s15
 8016fee:	fb92 f3f3 	sdiv	r3, r2, r3
 8016ff2:	9a01      	ldr	r2, [sp, #4]
 8016ff4:	9310      	str	r3, [sp, #64]	@ 0x40
 8016ff6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016ff8:	bf08      	it	eq
 8016ffa:	4613      	moveq	r3, r2
 8016ffc:	e734      	b.n	8016e68 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016ffe:	1427      	asrs	r7, r4, #16
 8017000:	d44d      	bmi.n	801709e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017002:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8017006:	42be      	cmp	r6, r7
 8017008:	dd49      	ble.n	801709e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801700a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801700e:	d446      	bmi.n	801709e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017010:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017014:	4542      	cmp	r2, r8
 8017016:	dd42      	ble.n	801709e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017018:	b236      	sxth	r6, r6
 801701a:	9a00      	ldr	r2, [sp, #0]
 801701c:	fb08 7606 	mla	r6, r8, r6, r7
 8017020:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8017024:	0e3a      	lsrs	r2, r7, #24
 8017026:	d03a      	beq.n	801709e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017028:	2aff      	cmp	r2, #255	@ 0xff
 801702a:	b2d6      	uxtb	r6, r2
 801702c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8017030:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8017034:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8017038:	b2ff      	uxtb	r7, r7
 801703a:	d037      	beq.n	80170ac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801703c:	fa1f f986 	uxth.w	r9, r6
 8017040:	4472      	add	r2, lr
 8017042:	43f6      	mvns	r6, r6
 8017044:	f815 8002 	ldrb.w	r8, [r5, r2]
 8017048:	fb17 f709 	smulbb	r7, r7, r9
 801704c:	fb1a fa09 	smulbb	sl, sl, r9
 8017050:	b2f6      	uxtb	r6, r6
 8017052:	fb1b f909 	smulbb	r9, fp, r9
 8017056:	fb08 7706 	mla	r7, r8, r6, r7
 801705a:	b2bf      	uxth	r7, r7
 801705c:	f107 0801 	add.w	r8, r7, #1
 8017060:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8017064:	123f      	asrs	r7, r7, #8
 8017066:	54af      	strb	r7, [r5, r2]
 8017068:	442a      	add	r2, r5
 801706a:	7857      	ldrb	r7, [r2, #1]
 801706c:	fb07 aa06 	mla	sl, r7, r6, sl
 8017070:	fa1f fa8a 	uxth.w	sl, sl
 8017074:	f10a 0701 	add.w	r7, sl, #1
 8017078:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801707c:	7897      	ldrb	r7, [r2, #2]
 801707e:	fb07 9906 	mla	r9, r7, r6, r9
 8017082:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017086:	fa1f f989 	uxth.w	r9, r9
 801708a:	f882 a001 	strb.w	sl, [r2, #1]
 801708e:	f109 0601 	add.w	r6, r9, #1
 8017092:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8017096:	ea4f 2929 	mov.w	r9, r9, asr #8
 801709a:	f882 9002 	strb.w	r9, [r2, #2]
 801709e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80170a0:	f10e 0e01 	add.w	lr, lr, #1
 80170a4:	4414      	add	r4, r2
 80170a6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80170a8:	4410      	add	r0, r2
 80170aa:	e766      	b.n	8016f7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80170ac:	4472      	add	r2, lr
 80170ae:	54af      	strb	r7, [r5, r2]
 80170b0:	442a      	add	r2, r5
 80170b2:	f882 a001 	strb.w	sl, [r2, #1]
 80170b6:	f882 b002 	strb.w	fp, [r2, #2]
 80170ba:	e7f0      	b.n	801709e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80170bc:	f806 7c03 	strb.w	r7, [r6, #-3]
 80170c0:	f806 9c02 	strb.w	r9, [r6, #-2]
 80170c4:	f806 bc01 	strb.w	fp, [r6, #-1]
 80170c8:	e74d      	b.n	8016f66 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80170ca:	b003      	add	sp, #12
 80170cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080170d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80170d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170d4:	b087      	sub	sp, #28
 80170d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80170da:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80170dc:	9204      	str	r2, [sp, #16]
 80170de:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80170e2:	6860      	ldr	r0, [r4, #4]
 80170e4:	9205      	str	r2, [sp, #20]
 80170e6:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 80170ea:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 80170ee:	9101      	str	r1, [sp, #4]
 80170f0:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 80170f4:	fb00 2505 	mla	r5, r0, r5, r2
 80170f8:	6822      	ldr	r2, [r4, #0]
 80170fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80170fe:	4415      	add	r5, r2
 8017100:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017104:	3201      	adds	r2, #1
 8017106:	f022 0201 	bic.w	r2, r2, #1
 801710a:	9202      	str	r2, [sp, #8]
 801710c:	f8dc 2000 	ldr.w	r2, [ip]
 8017110:	9203      	str	r2, [sp, #12]
 8017112:	9a01      	ldr	r2, [sp, #4]
 8017114:	2a00      	cmp	r2, #0
 8017116:	dc03      	bgt.n	8017120 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8017118:	9a04      	ldr	r2, [sp, #16]
 801711a:	2a00      	cmp	r2, #0
 801711c:	f340 8135 	ble.w	801738a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8017120:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017122:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017126:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801712a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801712c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017130:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017134:	2b00      	cmp	r3, #0
 8017136:	dd0d      	ble.n	8017154 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017138:	1422      	asrs	r2, r4, #16
 801713a:	d405      	bmi.n	8017148 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801713c:	4542      	cmp	r2, r8
 801713e:	da03      	bge.n	8017148 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017140:	1402      	asrs	r2, r0, #16
 8017142:	d401      	bmi.n	8017148 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017144:	42ba      	cmp	r2, r7
 8017146:	db06      	blt.n	8017156 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8017148:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801714a:	4474      	add	r4, lr
 801714c:	3b01      	subs	r3, #1
 801714e:	3503      	adds	r5, #3
 8017150:	4410      	add	r0, r2
 8017152:	e7ef      	b.n	8017134 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017154:	d077      	beq.n	8017246 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8017156:	1e5a      	subs	r2, r3, #1
 8017158:	fb0e 4602 	mla	r6, lr, r2, r4
 801715c:	1436      	asrs	r6, r6, #16
 801715e:	d469      	bmi.n	8017234 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017160:	4546      	cmp	r6, r8
 8017162:	da67      	bge.n	8017234 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017164:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017166:	fb06 0202 	mla	r2, r6, r2, r0
 801716a:	1412      	asrs	r2, r2, #16
 801716c:	d462      	bmi.n	8017234 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801716e:	42ba      	cmp	r2, r7
 8017170:	da60      	bge.n	8017234 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017172:	1cee      	adds	r6, r5, #3
 8017174:	4699      	mov	r9, r3
 8017176:	f1b9 0f00 	cmp.w	r9, #0
 801717a:	dd5f      	ble.n	801723c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801717c:	1422      	asrs	r2, r4, #16
 801717e:	9902      	ldr	r1, [sp, #8]
 8017180:	1407      	asrs	r7, r0, #16
 8017182:	fb01 2707 	mla	r7, r1, r7, r2
 8017186:	9903      	ldr	r1, [sp, #12]
 8017188:	087a      	lsrs	r2, r7, #1
 801718a:	5c8a      	ldrb	r2, [r1, r2]
 801718c:	07f9      	lsls	r1, r7, #31
 801718e:	bf54      	ite	pl
 8017190:	f002 020f 	andpl.w	r2, r2, #15
 8017194:	1112      	asrmi	r2, r2, #4
 8017196:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801719a:	b2d2      	uxtb	r2, r2
 801719c:	2a00      	cmp	r2, #0
 801719e:	d042      	beq.n	8017226 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80171a0:	497b      	ldr	r1, [pc, #492]	@ (8017390 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80171a2:	680f      	ldr	r7, [r1, #0]
 80171a4:	9905      	ldr	r1, [sp, #20]
 80171a6:	fa5f fb87 	uxtb.w	fp, r7
 80171aa:	434a      	muls	r2, r1
 80171ac:	f102 0801 	add.w	r8, r2, #1
 80171b0:	eb08 2222 	add.w	r2, r8, r2, asr #8
 80171b4:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 80171b8:	1212      	asrs	r2, r2, #8
 80171ba:	fa1f fa82 	uxth.w	sl, r2
 80171be:	43d2      	mvns	r2, r2
 80171c0:	fb1b fb0a 	smulbb	fp, fp, sl
 80171c4:	b2d2      	uxtb	r2, r2
 80171c6:	fb08 b802 	mla	r8, r8, r2, fp
 80171ca:	fa1f f888 	uxth.w	r8, r8
 80171ce:	f108 0b01 	add.w	fp, r8, #1
 80171d2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80171d6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80171da:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80171de:	fb1b fb0a 	smulbb	fp, fp, sl
 80171e2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80171e6:	fb17 fa0a 	smulbb	sl, r7, sl
 80171ea:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80171ee:	f806 8c03 	strb.w	r8, [r6, #-3]
 80171f2:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 80171f6:	fb07 aa02 	mla	sl, r7, r2, sl
 80171fa:	fb08 b802 	mla	r8, r8, r2, fp
 80171fe:	fa1f fa8a 	uxth.w	sl, sl
 8017202:	fa1f f888 	uxth.w	r8, r8
 8017206:	f10a 0701 	add.w	r7, sl, #1
 801720a:	f108 0b01 	add.w	fp, r8, #1
 801720e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017212:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017216:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801721a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801721e:	f806 ac01 	strb.w	sl, [r6, #-1]
 8017222:	f806 8c02 	strb.w	r8, [r6, #-2]
 8017226:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017228:	4474      	add	r4, lr
 801722a:	3603      	adds	r6, #3
 801722c:	f109 39ff 	add.w	r9, r9, #4294967295
 8017230:	4410      	add	r0, r2
 8017232:	e7a0      	b.n	8017176 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017234:	2700      	movs	r7, #0
 8017236:	1bda      	subs	r2, r3, r7
 8017238:	2a00      	cmp	r2, #0
 801723a:	dc3e      	bgt.n	80172ba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801723c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017240:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017244:	441d      	add	r5, r3
 8017246:	9b01      	ldr	r3, [sp, #4]
 8017248:	2b00      	cmp	r3, #0
 801724a:	f340 809e 	ble.w	801738a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801724e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017252:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017254:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017258:	eeb0 6a62 	vmov.f32	s12, s5
 801725c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017260:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017264:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017268:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801726c:	eeb0 6a43 	vmov.f32	s12, s6
 8017270:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017274:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8017278:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801727c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017280:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017284:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017288:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801728c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017290:	ee12 2a90 	vmov	r2, s5
 8017294:	eef0 2a47 	vmov.f32	s5, s14
 8017298:	fb92 fef3 	sdiv	lr, r2, r3
 801729c:	ee13 2a10 	vmov	r2, s6
 80172a0:	eeb0 3a67 	vmov.f32	s6, s15
 80172a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80172a8:	9314      	str	r3, [sp, #80]	@ 0x50
 80172aa:	9b01      	ldr	r3, [sp, #4]
 80172ac:	9a04      	ldr	r2, [sp, #16]
 80172ae:	3b01      	subs	r3, #1
 80172b0:	9301      	str	r3, [sp, #4]
 80172b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80172b4:	bf08      	it	eq
 80172b6:	4613      	moveq	r3, r2
 80172b8:	e72b      	b.n	8017112 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80172ba:	1426      	asrs	r6, r4, #16
 80172bc:	d460      	bmi.n	8017380 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80172be:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80172c2:	42b2      	cmp	r2, r6
 80172c4:	dd5c      	ble.n	8017380 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80172c6:	ea5f 4820 	movs.w	r8, r0, asr #16
 80172ca:	d459      	bmi.n	8017380 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80172cc:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80172d0:	4542      	cmp	r2, r8
 80172d2:	dd55      	ble.n	8017380 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80172d4:	9a02      	ldr	r2, [sp, #8]
 80172d6:	9903      	ldr	r1, [sp, #12]
 80172d8:	fb08 6602 	mla	r6, r8, r2, r6
 80172dc:	0872      	lsrs	r2, r6, #1
 80172de:	07f6      	lsls	r6, r6, #31
 80172e0:	5c8a      	ldrb	r2, [r1, r2]
 80172e2:	bf54      	ite	pl
 80172e4:	f002 020f 	andpl.w	r2, r2, #15
 80172e8:	1112      	asrmi	r2, r2, #4
 80172ea:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80172ee:	b2d2      	uxtb	r2, r2
 80172f0:	2a00      	cmp	r2, #0
 80172f2:	d045      	beq.n	8017380 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80172f4:	4926      	ldr	r1, [pc, #152]	@ (8017390 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80172f6:	f8d1 8000 	ldr.w	r8, [r1]
 80172fa:	9905      	ldr	r1, [sp, #20]
 80172fc:	fa5f fb88 	uxtb.w	fp, r8
 8017300:	434a      	muls	r2, r1
 8017302:	1c56      	adds	r6, r2, #1
 8017304:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8017308:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801730c:	1212      	asrs	r2, r2, #8
 801730e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8017312:	fa1f fa82 	uxth.w	sl, r2
 8017316:	43d2      	mvns	r2, r2
 8017318:	fb1b fb0a 	smulbb	fp, fp, sl
 801731c:	b2d2      	uxtb	r2, r2
 801731e:	fb09 b902 	mla	r9, r9, r2, fp
 8017322:	fa1f f989 	uxth.w	r9, r9
 8017326:	f109 0b01 	add.w	fp, r9, #1
 801732a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801732e:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8017332:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8017336:	fb1b fb0a 	smulbb	fp, fp, sl
 801733a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801733e:	fb18 fa0a 	smulbb	sl, r8, sl
 8017342:	f805 9006 	strb.w	r9, [r5, r6]
 8017346:	442e      	add	r6, r5
 8017348:	f896 8002 	ldrb.w	r8, [r6, #2]
 801734c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8017350:	fb08 aa02 	mla	sl, r8, r2, sl
 8017354:	fb09 b902 	mla	r9, r9, r2, fp
 8017358:	fa1f fa8a 	uxth.w	sl, sl
 801735c:	fa1f f989 	uxth.w	r9, r9
 8017360:	f10a 0801 	add.w	r8, sl, #1
 8017364:	f109 0b01 	add.w	fp, r9, #1
 8017368:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801736c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017370:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017374:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017378:	f886 a002 	strb.w	sl, [r6, #2]
 801737c:	f886 9001 	strb.w	r9, [r6, #1]
 8017380:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017382:	4474      	add	r4, lr
 8017384:	3701      	adds	r7, #1
 8017386:	4410      	add	r0, r2
 8017388:	e755      	b.n	8017236 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801738a:	b007      	add	sp, #28
 801738c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017390:	24025168 	.word	0x24025168

08017394 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017398:	b085      	sub	sp, #20
 801739a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801739e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80173a0:	9203      	str	r2, [sp, #12]
 80173a2:	6860      	ldr	r0, [r4, #4]
 80173a4:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80173a8:	9100      	str	r1, [sp, #0]
 80173aa:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 80173ae:	fb00 2606 	mla	r6, r0, r6, r2
 80173b2:	6822      	ldr	r2, [r4, #0]
 80173b4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80173b8:	4416      	add	r6, r2
 80173ba:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80173be:	3201      	adds	r2, #1
 80173c0:	f022 0201 	bic.w	r2, r2, #1
 80173c4:	9201      	str	r2, [sp, #4]
 80173c6:	f8dc 2000 	ldr.w	r2, [ip]
 80173ca:	9202      	str	r2, [sp, #8]
 80173cc:	9a00      	ldr	r2, [sp, #0]
 80173ce:	2a00      	cmp	r2, #0
 80173d0:	dc03      	bgt.n	80173da <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80173d2:	9a03      	ldr	r2, [sp, #12]
 80173d4:	2a00      	cmp	r2, #0
 80173d6:	f340 8140 	ble.w	801765a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80173da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80173dc:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80173e0:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 80173e4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80173e6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80173ea:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	dd0e      	ble.n	8017410 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80173f2:	142a      	asrs	r2, r5, #16
 80173f4:	d405      	bmi.n	8017402 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80173f6:	4572      	cmp	r2, lr
 80173f8:	da03      	bge.n	8017402 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80173fa:	1422      	asrs	r2, r4, #16
 80173fc:	d401      	bmi.n	8017402 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80173fe:	42ba      	cmp	r2, r7
 8017400:	db07      	blt.n	8017412 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017402:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017404:	3b01      	subs	r3, #1
 8017406:	3603      	adds	r6, #3
 8017408:	4415      	add	r5, r2
 801740a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801740c:	4414      	add	r4, r2
 801740e:	e7ee      	b.n	80173ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8017410:	d072      	beq.n	80174f8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017412:	1e5a      	subs	r2, r3, #1
 8017414:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017416:	fb00 5002 	mla	r0, r0, r2, r5
 801741a:	1400      	asrs	r0, r0, #16
 801741c:	d463      	bmi.n	80174e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801741e:	4570      	cmp	r0, lr
 8017420:	da61      	bge.n	80174e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017422:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8017424:	fb00 4202 	mla	r2, r0, r2, r4
 8017428:	1412      	asrs	r2, r2, #16
 801742a:	d45c      	bmi.n	80174e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801742c:	42ba      	cmp	r2, r7
 801742e:	da5a      	bge.n	80174e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017430:	1cf0      	adds	r0, r6, #3
 8017432:	469a      	mov	sl, r3
 8017434:	f1ba 0f00 	cmp.w	sl, #0
 8017438:	dd59      	ble.n	80174ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801743a:	142a      	asrs	r2, r5, #16
 801743c:	9901      	ldr	r1, [sp, #4]
 801743e:	1427      	asrs	r7, r4, #16
 8017440:	fb01 2707 	mla	r7, r1, r7, r2
 8017444:	9902      	ldr	r1, [sp, #8]
 8017446:	087a      	lsrs	r2, r7, #1
 8017448:	5c8a      	ldrb	r2, [r1, r2]
 801744a:	07f9      	lsls	r1, r7, #31
 801744c:	bf54      	ite	pl
 801744e:	f002 020f 	andpl.w	r2, r2, #15
 8017452:	1112      	asrmi	r2, r2, #4
 8017454:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017458:	b2d2      	uxtb	r2, r2
 801745a:	2a00      	cmp	r2, #0
 801745c:	d03b      	beq.n	80174d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801745e:	4980      	ldr	r1, [pc, #512]	@ (8017660 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8017460:	2aff      	cmp	r2, #255	@ 0xff
 8017462:	680f      	ldr	r7, [r1, #0]
 8017464:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8017468:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801746c:	b2ff      	uxtb	r7, r7
 801746e:	f000 80ed 	beq.w	801764c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8017472:	fa1f f882 	uxth.w	r8, r2
 8017476:	43d2      	mvns	r2, r2
 8017478:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801747c:	fb17 f708 	smulbb	r7, r7, r8
 8017480:	b2d2      	uxtb	r2, r2
 8017482:	fb19 f908 	smulbb	r9, r9, r8
 8017486:	fb0e 7702 	mla	r7, lr, r2, r7
 801748a:	fb1b f808 	smulbb	r8, fp, r8
 801748e:	b2bf      	uxth	r7, r7
 8017490:	f107 0e01 	add.w	lr, r7, #1
 8017494:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8017498:	123f      	asrs	r7, r7, #8
 801749a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801749e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80174a2:	fb07 9902 	mla	r9, r7, r2, r9
 80174a6:	fa1f f989 	uxth.w	r9, r9
 80174aa:	f109 0701 	add.w	r7, r9, #1
 80174ae:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80174b2:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80174b6:	fb07 8802 	mla	r8, r7, r2, r8
 80174ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 80174be:	fa1f f888 	uxth.w	r8, r8
 80174c2:	f800 9c02 	strb.w	r9, [r0, #-2]
 80174c6:	f108 0201 	add.w	r2, r8, #1
 80174ca:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80174ce:	ea4f 2828 	mov.w	r8, r8, asr #8
 80174d2:	f800 8c01 	strb.w	r8, [r0, #-1]
 80174d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80174d8:	3003      	adds	r0, #3
 80174da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80174de:	4415      	add	r5, r2
 80174e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80174e2:	4414      	add	r4, r2
 80174e4:	e7a6      	b.n	8017434 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80174e6:	2700      	movs	r7, #0
 80174e8:	1bda      	subs	r2, r3, r7
 80174ea:	2a00      	cmp	r2, #0
 80174ec:	dc40      	bgt.n	8017570 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80174ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80174f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80174f6:	441e      	add	r6, r3
 80174f8:	9b00      	ldr	r3, [sp, #0]
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	f340 80ad 	ble.w	801765a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8017500:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017504:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017506:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801750a:	eeb0 6a62 	vmov.f32	s12, s5
 801750e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017512:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017516:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801751a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801751e:	eeb0 6a43 	vmov.f32	s12, s6
 8017522:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017526:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801752a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801752e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017532:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017536:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801753a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801753e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017542:	ee12 2a90 	vmov	r2, s5
 8017546:	eef0 2a47 	vmov.f32	s5, s14
 801754a:	fb92 f3f3 	sdiv	r3, r2, r3
 801754e:	ee13 2a10 	vmov	r2, s6
 8017552:	9311      	str	r3, [sp, #68]	@ 0x44
 8017554:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017556:	eeb0 3a67 	vmov.f32	s6, s15
 801755a:	fb92 f3f3 	sdiv	r3, r2, r3
 801755e:	9312      	str	r3, [sp, #72]	@ 0x48
 8017560:	9b00      	ldr	r3, [sp, #0]
 8017562:	9a03      	ldr	r2, [sp, #12]
 8017564:	3b01      	subs	r3, #1
 8017566:	9300      	str	r3, [sp, #0]
 8017568:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801756a:	bf08      	it	eq
 801756c:	4613      	moveq	r3, r2
 801756e:	e72d      	b.n	80173cc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8017570:	1428      	asrs	r0, r5, #16
 8017572:	d45c      	bmi.n	801762e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017574:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017578:	4282      	cmp	r2, r0
 801757a:	dd58      	ble.n	801762e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801757c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8017580:	d455      	bmi.n	801762e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017582:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017586:	4572      	cmp	r2, lr
 8017588:	dd51      	ble.n	801762e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801758a:	9a01      	ldr	r2, [sp, #4]
 801758c:	9902      	ldr	r1, [sp, #8]
 801758e:	fb0e 0002 	mla	r0, lr, r2, r0
 8017592:	0842      	lsrs	r2, r0, #1
 8017594:	07c0      	lsls	r0, r0, #31
 8017596:	5c8a      	ldrb	r2, [r1, r2]
 8017598:	bf54      	ite	pl
 801759a:	f002 020f 	andpl.w	r2, r2, #15
 801759e:	1112      	asrmi	r2, r2, #4
 80175a0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80175a4:	b2d2      	uxtb	r2, r2
 80175a6:	2a00      	cmp	r2, #0
 80175a8:	d041      	beq.n	801762e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80175aa:	492d      	ldr	r1, [pc, #180]	@ (8017660 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80175ac:	2aff      	cmp	r2, #255	@ 0xff
 80175ae:	6808      	ldr	r0, [r1, #0]
 80175b0:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 80175b4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80175b8:	fa5f fe80 	uxtb.w	lr, r0
 80175bc:	ea4f 0047 	mov.w	r0, r7, lsl #1
 80175c0:	d03b      	beq.n	801763a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 80175c2:	fa1f f982 	uxth.w	r9, r2
 80175c6:	4438      	add	r0, r7
 80175c8:	43d2      	mvns	r2, r2
 80175ca:	f816 8000 	ldrb.w	r8, [r6, r0]
 80175ce:	fb1e fe09 	smulbb	lr, lr, r9
 80175d2:	fb1a fa09 	smulbb	sl, sl, r9
 80175d6:	b2d2      	uxtb	r2, r2
 80175d8:	fb1b f909 	smulbb	r9, fp, r9
 80175dc:	fb08 ee02 	mla	lr, r8, r2, lr
 80175e0:	fa1f fe8e 	uxth.w	lr, lr
 80175e4:	f10e 0801 	add.w	r8, lr, #1
 80175e8:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 80175ec:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80175f0:	f806 e000 	strb.w	lr, [r6, r0]
 80175f4:	4430      	add	r0, r6
 80175f6:	f890 e001 	ldrb.w	lr, [r0, #1]
 80175fa:	fb0e aa02 	mla	sl, lr, r2, sl
 80175fe:	fa1f fa8a 	uxth.w	sl, sl
 8017602:	f10a 0e01 	add.w	lr, sl, #1
 8017606:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801760a:	f890 e002 	ldrb.w	lr, [r0, #2]
 801760e:	fb0e 9902 	mla	r9, lr, r2, r9
 8017612:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017616:	fa1f f989 	uxth.w	r9, r9
 801761a:	f880 a001 	strb.w	sl, [r0, #1]
 801761e:	f109 0201 	add.w	r2, r9, #1
 8017622:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8017626:	ea4f 2929 	mov.w	r9, r9, asr #8
 801762a:	f880 9002 	strb.w	r9, [r0, #2]
 801762e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017630:	3701      	adds	r7, #1
 8017632:	4415      	add	r5, r2
 8017634:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017636:	4414      	add	r4, r2
 8017638:	e756      	b.n	80174e8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801763a:	4438      	add	r0, r7
 801763c:	f806 e000 	strb.w	lr, [r6, r0]
 8017640:	4430      	add	r0, r6
 8017642:	f880 a001 	strb.w	sl, [r0, #1]
 8017646:	f880 b002 	strb.w	fp, [r0, #2]
 801764a:	e7f0      	b.n	801762e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801764c:	f800 7c03 	strb.w	r7, [r0, #-3]
 8017650:	f800 9c02 	strb.w	r9, [r0, #-2]
 8017654:	f800 bc01 	strb.w	fp, [r0, #-1]
 8017658:	e73d      	b.n	80174d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801765a:	b005      	add	sp, #20
 801765c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017660:	24025168 	.word	0x24025168

08017664 <_ZN8touchgfx8LCD24bppD1Ev>:
 8017664:	4770      	bx	lr

08017666 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8017666:	4770      	bx	lr

08017668 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8017668:	4770      	bx	lr

0801766a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801766a:	4770      	bx	lr

0801766c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801766c:	4770      	bx	lr

0801766e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801766e:	4770      	bx	lr

08017670 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8017670:	4770      	bx	lr

08017672 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8017672:	4770      	bx	lr

08017674 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017674:	4770      	bx	lr

08017676 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017676:	4770      	bx	lr

08017678 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017678:	4770      	bx	lr

0801767a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801767a:	4770      	bx	lr

0801767c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801767c:	4770      	bx	lr

0801767e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801767e:	4770      	bx	lr

08017680 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8017680:	4770      	bx	lr

08017682 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017682:	4770      	bx	lr

08017684 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017684:	4770      	bx	lr

08017686 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017686:	4770      	bx	lr

08017688 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017688:	4770      	bx	lr

0801768a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801768a:	4770      	bx	lr

0801768c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801768c:	4770      	bx	lr

0801768e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801768e:	4770      	bx	lr

08017690 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8017690:	4770      	bx	lr

08017692 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017692:	4770      	bx	lr

08017694 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8017694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017696:	4606      	mov	r6, r0
 8017698:	b087      	sub	sp, #28
 801769a:	4615      	mov	r5, r2
 801769c:	461f      	mov	r7, r3
 801769e:	b353      	cbz	r3, 80176f6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80176a0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	dd26      	ble.n	80176f6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80176a8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	dd22      	ble.n	80176f6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80176b0:	6808      	ldr	r0, [r1, #0]
 80176b2:	aa04      	add	r2, sp, #16
 80176b4:	6849      	ldr	r1, [r1, #4]
 80176b6:	4c1b      	ldr	r4, [pc, #108]	@ (8017724 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80176b8:	c203      	stmia	r2!, {r0, r1}
 80176ba:	a804      	add	r0, sp, #16
 80176bc:	f7fa ff76 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80176c0:	6820      	ldr	r0, [r4, #0]
 80176c2:	6803      	ldr	r3, [r0, #0]
 80176c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80176c6:	4798      	blx	r3
 80176c8:	2fff      	cmp	r7, #255	@ 0xff
 80176ca:	d016      	beq.n	80176fa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80176cc:	f010 0f08 	tst.w	r0, #8
 80176d0:	6820      	ldr	r0, [r4, #0]
 80176d2:	d015      	beq.n	8017700 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 80176d4:	2400      	movs	r4, #0
 80176d6:	6801      	ldr	r1, [r0, #0]
 80176d8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80176dc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80176e0:	e9cd 7402 	strd	r7, r4, [sp, #8]
 80176e4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80176e8:	9401      	str	r4, [sp, #4]
 80176ea:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80176ee:	9400      	str	r4, [sp, #0]
 80176f0:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 80176f2:	4629      	mov	r1, r5
 80176f4:	47a0      	blx	r4
 80176f6:	b007      	add	sp, #28
 80176f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176fa:	f010 0f02 	tst.w	r0, #2
 80176fe:	e7e7      	b.n	80176d0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8017700:	6803      	ldr	r3, [r0, #0]
 8017702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017704:	4798      	blx	r3
 8017706:	4b08      	ldr	r3, [pc, #32]	@ (8017728 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8017708:	4601      	mov	r1, r0
 801770a:	4630      	mov	r0, r6
 801770c:	881a      	ldrh	r2, [r3, #0]
 801770e:	6833      	ldr	r3, [r6, #0]
 8017710:	e9cd 5700 	strd	r5, r7, [sp]
 8017714:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8017716:	ab04      	add	r3, sp, #16
 8017718:	47a8      	blx	r5
 801771a:	6820      	ldr	r0, [r4, #0]
 801771c:	6803      	ldr	r3, [r0, #0]
 801771e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017720:	4798      	blx	r3
 8017722:	e7e8      	b.n	80176f6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017724:	24025158 	.word	0x24025158
 8017728:	24025152 	.word	0x24025152

0801772c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801772c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017730:	b08b      	sub	sp, #44	@ 0x2c
 8017732:	460d      	mov	r5, r1
 8017734:	4616      	mov	r6, r2
 8017736:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 801773a:	f1b8 0f00 	cmp.w	r8, #0
 801773e:	d047      	beq.n	80177d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8017740:	6810      	ldr	r0, [r2, #0]
 8017742:	ac06      	add	r4, sp, #24
 8017744:	6851      	ldr	r1, [r2, #4]
 8017746:	4f51      	ldr	r7, [pc, #324]	@ (801788c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8017748:	c403      	stmia	r4!, {r0, r1}
 801774a:	6818      	ldr	r0, [r3, #0]
 801774c:	ac08      	add	r4, sp, #32
 801774e:	6859      	ldr	r1, [r3, #4]
 8017750:	c403      	stmia	r4!, {r0, r1}
 8017752:	a806      	add	r0, sp, #24
 8017754:	f7fa ff2a 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017758:	4631      	mov	r1, r6
 801775a:	a808      	add	r0, sp, #32
 801775c:	f7fa ff4e 	bl	80125fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017760:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017764:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8017768:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801776c:	6838      	ldr	r0, [r7, #0]
 801776e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017772:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8017776:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801777a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801777e:	440d      	add	r5, r1
 8017780:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8017784:	440a      	add	r2, r1
 8017786:	f8ad 2020 	strh.w	r2, [sp, #32]
 801778a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801778e:	4413      	add	r3, r2
 8017790:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8017794:	6803      	ldr	r3, [r0, #0]
 8017796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017798:	4798      	blx	r3
 801779a:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801779e:	d01a      	beq.n	80177d6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 80177a0:	f010 0f04 	tst.w	r0, #4
 80177a4:	6838      	ldr	r0, [r7, #0]
 80177a6:	d019      	beq.n	80177dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80177a8:	2100      	movs	r1, #0
 80177aa:	6807      	ldr	r7, [r0, #0]
 80177ac:	b2a4      	uxth	r4, r4
 80177ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80177b2:	b2b6      	uxth	r6, r6
 80177b4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80177b8:	9401      	str	r4, [sp, #4]
 80177ba:	9600      	str	r6, [sp, #0]
 80177bc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80177c0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80177c4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80177c8:	9102      	str	r1, [sp, #8]
 80177ca:	4629      	mov	r1, r5
 80177cc:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80177ce:	47a0      	blx	r4
 80177d0:	b00b      	add	sp, #44	@ 0x2c
 80177d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177d6:	f010 0f01 	tst.w	r0, #1
 80177da:	e7e3      	b.n	80177a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 80177dc:	6803      	ldr	r3, [r0, #0]
 80177de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80177e0:	4798      	blx	r3
 80177e2:	4a2b      	ldr	r2, [pc, #172]	@ (8017890 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 80177e4:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 80177e8:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80177ec:	8813      	ldrh	r3, [r2, #0]
 80177ee:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 80177f2:	fb03 f404 	mul.w	r4, r3, r4
 80177f6:	fb03 c101 	mla	r1, r3, r1, ip
 80177fa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80177fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017802:	4408      	add	r0, r1
 8017804:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8017808:	4404      	add	r4, r0
 801780a:	d02e      	beq.n	801786a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801780c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8017810:	1b9b      	subs	r3, r3, r6
 8017812:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 8017816:	1b96      	subs	r6, r2, r6
 8017818:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801781c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017820:	42a0      	cmp	r0, r4
 8017822:	d22d      	bcs.n	8017880 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8017824:	eb00 0e01 	add.w	lr, r0, r1
 8017828:	4570      	cmp	r0, lr
 801782a:	d210      	bcs.n	801784e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801782c:	f890 9000 	ldrb.w	r9, [r0]
 8017830:	f815 2b01 	ldrb.w	r2, [r5], #1
 8017834:	fb19 f90c 	smulbb	r9, r9, ip
 8017838:	fb02 9208 	mla	r2, r2, r8, r9
 801783c:	b292      	uxth	r2, r2
 801783e:	f102 0901 	add.w	r9, r2, #1
 8017842:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8017846:	1212      	asrs	r2, r2, #8
 8017848:	f800 2b01 	strb.w	r2, [r0], #1
 801784c:	e7ec      	b.n	8017828 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801784e:	4418      	add	r0, r3
 8017850:	4435      	add	r5, r6
 8017852:	e7e5      	b.n	8017820 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8017854:	8813      	ldrh	r3, [r2, #0]
 8017856:	1b9b      	subs	r3, r3, r6
 8017858:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801785c:	4418      	add	r0, r3
 801785e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017862:	1b9b      	subs	r3, r3, r6
 8017864:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017868:	441d      	add	r5, r3
 801786a:	42a0      	cmp	r0, r4
 801786c:	d208      	bcs.n	8017880 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801786e:	eb00 0c01 	add.w	ip, r0, r1
 8017872:	4560      	cmp	r0, ip
 8017874:	d2ee      	bcs.n	8017854 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8017876:	f815 3b01 	ldrb.w	r3, [r5], #1
 801787a:	f800 3b01 	strb.w	r3, [r0], #1
 801787e:	e7f8      	b.n	8017872 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8017880:	6838      	ldr	r0, [r7, #0]
 8017882:	6803      	ldr	r3, [r0, #0]
 8017884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017886:	4798      	blx	r3
 8017888:	e7a2      	b.n	80177d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801788a:	bf00      	nop
 801788c:	24025158 	.word	0x24025158
 8017890:	24025152 	.word	0x24025152

08017894 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8017894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017896:	2300      	movs	r3, #0
 8017898:	b085      	sub	sp, #20
 801789a:	9300      	str	r3, [sp, #0]
 801789c:	4b41      	ldr	r3, [pc, #260]	@ (80179a4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801789e:	781b      	ldrb	r3, [r3, #0]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d136      	bne.n	8017912 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 80178a4:	4a40      	ldr	r2, [pc, #256]	@ (80179a8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80178a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80178aa:	f8ad 2004 	strh.w	r2, [sp, #4]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d131      	bne.n	8017916 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 80178b2:	4b3e      	ldr	r3, [pc, #248]	@ (80179ac <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80178b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80178b8:	ac02      	add	r4, sp, #8
 80178ba:	6808      	ldr	r0, [r1, #0]
 80178bc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80178c0:	ab02      	add	r3, sp, #8
 80178c2:	6849      	ldr	r1, [r1, #4]
 80178c4:	4d3a      	ldr	r5, [pc, #232]	@ (80179b0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 80178c6:	c303      	stmia	r3!, {r0, r1}
 80178c8:	4669      	mov	r1, sp
 80178ca:	4620      	mov	r0, r4
 80178cc:	f7fa fe96 	bl	80125fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80178d0:	4668      	mov	r0, sp
 80178d2:	f7fa fe6b 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80178d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80178da:	f8bd 2000 	ldrh.w	r2, [sp]
 80178de:	462e      	mov	r6, r5
 80178e0:	6828      	ldr	r0, [r5, #0]
 80178e2:	4413      	add	r3, r2
 80178e4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80178e8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80178ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80178f0:	4413      	add	r3, r2
 80178f2:	f8ad 300a 	strh.w	r3, [sp, #10]
 80178f6:	6803      	ldr	r3, [r0, #0]
 80178f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80178fa:	4798      	blx	r3
 80178fc:	f010 0f01 	tst.w	r0, #1
 8017900:	d00b      	beq.n	801791a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8017902:	6828      	ldr	r0, [r5, #0]
 8017904:	6803      	ldr	r3, [r0, #0]
 8017906:	e894 0006 	ldmia.w	r4, {r1, r2}
 801790a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801790c:	4798      	blx	r3
 801790e:	b005      	add	sp, #20
 8017910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017912:	4a26      	ldr	r2, [pc, #152]	@ (80179ac <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8017914:	e7c7      	b.n	80178a6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8017916:	4b24      	ldr	r3, [pc, #144]	@ (80179a8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8017918:	e7cc      	b.n	80178b4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801791a:	6830      	ldr	r0, [r6, #0]
 801791c:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8017920:	6803      	ldr	r3, [r0, #0]
 8017922:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8017926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017928:	4798      	blx	r3
 801792a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801792e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8017932:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8017936:	fb14 3402 	smlabb	r4, r4, r2, r3
 801793a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801793e:	4404      	add	r4, r0
 8017940:	6830      	ldr	r0, [r6, #0]
 8017942:	6803      	ldr	r3, [r0, #0]
 8017944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017946:	4798      	blx	r3
 8017948:	4917      	ldr	r1, [pc, #92]	@ (80179a8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801794a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801794e:	880b      	ldrh	r3, [r1, #0]
 8017950:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8017954:	fb03 c202 	mla	r2, r3, r2, ip
 8017958:	437b      	muls	r3, r7
 801795a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801795e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017962:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017966:	4410      	add	r0, r2
 8017968:	18c2      	adds	r2, r0, r3
 801796a:	4290      	cmp	r0, r2
 801796c:	d214      	bcs.n	8017998 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801796e:	eb00 0c07 	add.w	ip, r0, r7
 8017972:	4560      	cmp	r0, ip
 8017974:	d204      	bcs.n	8017980 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8017976:	f814 3b01 	ldrb.w	r3, [r4], #1
 801797a:	f800 3b01 	strb.w	r3, [r0], #1
 801797e:	e7f8      	b.n	8017972 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8017980:	880b      	ldrh	r3, [r1, #0]
 8017982:	1b5b      	subs	r3, r3, r5
 8017984:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017988:	4418      	add	r0, r3
 801798a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801798e:	1b5b      	subs	r3, r3, r5
 8017990:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017994:	441c      	add	r4, r3
 8017996:	e7e8      	b.n	801796a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8017998:	6830      	ldr	r0, [r6, #0]
 801799a:	6803      	ldr	r3, [r0, #0]
 801799c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801799e:	4798      	blx	r3
 80179a0:	e7b5      	b.n	801790e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80179a2:	bf00      	nop
 80179a4:	24025150 	.word	0x24025150
 80179a8:	24025152 	.word	0x24025152
 80179ac:	24025154 	.word	0x24025154
 80179b0:	24025158 	.word	0x24025158

080179b4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80179b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179b8:	b08f      	sub	sp, #60	@ 0x3c
 80179ba:	461c      	mov	r4, r3
 80179bc:	9203      	str	r2, [sp, #12]
 80179be:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80179c2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80179c4:	6820      	ldr	r0, [r4, #0]
 80179c6:	9100      	str	r1, [sp, #0]
 80179c8:	9204      	str	r2, [sp, #16]
 80179ca:	aa0a      	add	r2, sp, #40	@ 0x28
 80179cc:	6861      	ldr	r1, [r4, #4]
 80179ce:	c203      	stmia	r2!, {r0, r1}
 80179d0:	6818      	ldr	r0, [r3, #0]
 80179d2:	aa0c      	add	r2, sp, #48	@ 0x30
 80179d4:	6859      	ldr	r1, [r3, #4]
 80179d6:	c203      	stmia	r2!, {r0, r1}
 80179d8:	a80a      	add	r0, sp, #40	@ 0x28
 80179da:	f7fa fde7 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80179de:	4621      	mov	r1, r4
 80179e0:	a80c      	add	r0, sp, #48	@ 0x30
 80179e2:	f7fa fe0b 	bl	80125fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80179e6:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 80179ea:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 80179ee:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80179f2:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 80179f6:	bfdb      	ittet	le
 80179f8:	b2b3      	uxthle	r3, r6
 80179fa:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 80179fe:	2301      	movgt	r3, #1
 8017a00:	fb92 f3f3 	sdivle	r3, r2, r3
 8017a04:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8017a08:	441d      	add	r5, r3
 8017a0a:	fb92 f1f3 	sdiv	r1, r2, r3
 8017a0e:	fa1f fc81 	uxth.w	ip, r1
 8017a12:	3d01      	subs	r5, #1
 8017a14:	fb0c 2413 	mls	r4, ip, r3, r2
 8017a18:	4661      	mov	r1, ip
 8017a1a:	fb14 f406 	smulbb	r4, r4, r6
 8017a1e:	4404      	add	r4, r0
 8017a20:	fb95 f5f3 	sdiv	r5, r5, r3
 8017a24:	b2a4      	uxth	r4, r4
 8017a26:	b131      	cbz	r1, 8017a36 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 8017a28:	9b03      	ldr	r3, [sp, #12]
 8017a2a:	9900      	ldr	r1, [sp, #0]
 8017a2c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8017a30:	ba1b      	rev	r3, r3
 8017a32:	4419      	add	r1, r3
 8017a34:	9100      	str	r1, [sp, #0]
 8017a36:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8017a3a:	b2ad      	uxth	r5, r5
 8017a3c:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8017a40:	4418      	add	r0, r3
 8017a42:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8017a46:	00ad      	lsls	r5, r5, #2
 8017a48:	441a      	add	r2, r3
 8017a4a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8017a4e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8017a52:	9301      	str	r3, [sp, #4]
 8017a54:	4b79      	ldr	r3, [pc, #484]	@ (8017c3c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8017a56:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8017a5a:	6818      	ldr	r0, [r3, #0]
 8017a5c:	6803      	ldr	r3, [r0, #0]
 8017a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a60:	4798      	blx	r3
 8017a62:	4a77      	ldr	r2, [pc, #476]	@ (8017c40 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 8017a64:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8017a68:	2c00      	cmp	r4, #0
 8017a6a:	8813      	ldrh	r3, [r2, #0]
 8017a6c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8017a70:	9209      	str	r2, [sp, #36]	@ 0x24
 8017a72:	fb03 c101 	mla	r1, r3, r1, ip
 8017a76:	fb06 f303 	mul.w	r3, r6, r3
 8017a7a:	bf18      	it	ne
 8017a7c:	2600      	movne	r6, #0
 8017a7e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017a82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017a86:	4408      	add	r0, r1
 8017a88:	4403      	add	r3, r0
 8017a8a:	9306      	str	r3, [sp, #24]
 8017a8c:	f105 0304 	add.w	r3, r5, #4
 8017a90:	9305      	str	r3, [sp, #20]
 8017a92:	9b01      	ldr	r3, [sp, #4]
 8017a94:	bf08      	it	eq
 8017a96:	461e      	moveq	r6, r3
 8017a98:	2300      	movs	r3, #0
 8017a9a:	b2b6      	uxth	r6, r6
 8017a9c:	9302      	str	r3, [sp, #8]
 8017a9e:	9a06      	ldr	r2, [sp, #24]
 8017aa0:	4290      	cmp	r0, r2
 8017aa2:	f080 80c2 	bcs.w	8017c2a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 8017aa6:	b963      	cbnz	r3, 8017ac2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8017aa8:	9b00      	ldr	r3, [sp, #0]
 8017aaa:	781a      	ldrb	r2, [r3, #0]
 8017aac:	0993      	lsrs	r3, r2, #6
 8017aae:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8017ab2:	9202      	str	r2, [sp, #8]
 8017ab4:	1e5a      	subs	r2, r3, #1
 8017ab6:	2a02      	cmp	r2, #2
 8017ab8:	d815      	bhi.n	8017ae6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 8017aba:	9a00      	ldr	r2, [sp, #0]
 8017abc:	b29b      	uxth	r3, r3
 8017abe:	3201      	adds	r2, #1
 8017ac0:	9200      	str	r2, [sp, #0]
 8017ac2:	b1b4      	cbz	r4, 8017af2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8017ac4:	429c      	cmp	r4, r3
 8017ac6:	bf91      	iteee	ls
 8017ac8:	1b1c      	subls	r4, r3, r4
 8017aca:	1ae4      	subhi	r4, r4, r3
 8017acc:	4635      	movhi	r5, r6
 8017ace:	f04f 0e00 	movhi.w	lr, #0
 8017ad2:	bf9b      	ittet	ls
 8017ad4:	fa1f fe84 	uxthls.w	lr, r4
 8017ad8:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8017adc:	b2a4      	uxthhi	r4, r4
 8017ade:	2400      	movls	r4, #0
 8017ae0:	4673      	mov	r3, lr
 8017ae2:	462e      	mov	r6, r5
 8017ae4:	e7db      	b.n	8017a9e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8017ae6:	9a00      	ldr	r2, [sp, #0]
 8017ae8:	9b00      	ldr	r3, [sp, #0]
 8017aea:	3202      	adds	r2, #2
 8017aec:	785b      	ldrb	r3, [r3, #1]
 8017aee:	9200      	str	r2, [sp, #0]
 8017af0:	e7e7      	b.n	8017ac2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8017af2:	2204      	movs	r2, #4
 8017af4:	9905      	ldr	r1, [sp, #20]
 8017af6:	429e      	cmp	r6, r3
 8017af8:	4615      	mov	r5, r2
 8017afa:	9a02      	ldr	r2, [sp, #8]
 8017afc:	bf94      	ite	ls
 8017afe:	eba3 0e06 	subls.w	lr, r3, r6
 8017b02:	46a6      	movhi	lr, r4
 8017b04:	fb15 1202 	smlabb	r2, r5, r2, r1
 8017b08:	9903      	ldr	r1, [sp, #12]
 8017b0a:	bf8c      	ite	hi
 8017b0c:	1af5      	subhi	r5, r6, r3
 8017b0e:	fa1f fe8e 	uxthls.w	lr, lr
 8017b12:	f851 c002 	ldr.w	ip, [r1, r2]
 8017b16:	bf9a      	itte	ls
 8017b18:	4625      	movls	r5, r4
 8017b1a:	4632      	movls	r2, r6
 8017b1c:	b2ad      	uxthhi	r5, r5
 8017b1e:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8017b22:	bf88      	it	hi
 8017b24:	461a      	movhi	r2, r3
 8017b26:	b179      	cbz	r1, 8017b48 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8017b28:	29ff      	cmp	r1, #255	@ 0xff
 8017b2a:	fa5f f98c 	uxtb.w	r9, ip
 8017b2e:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8017b32:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 8017b36:	d126      	bne.n	8017b86 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8017b38:	9f04      	ldr	r7, [sp, #16]
 8017b3a:	2fff      	cmp	r7, #255	@ 0xff
 8017b3c:	d123      	bne.n	8017b86 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8017b3e:	4682      	mov	sl, r0
 8017b40:	4611      	mov	r1, r2
 8017b42:	f10a 0a03 	add.w	sl, sl, #3
 8017b46:	b9a9      	cbnz	r1, 8017b74 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 8017b48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017b4c:	429e      	cmp	r6, r3
 8017b4e:	4410      	add	r0, r2
 8017b50:	d8c6      	bhi.n	8017ae0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8017b52:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8017b56:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8017b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b5c:	1b64      	subs	r4, r4, r5
 8017b5e:	9a01      	ldr	r2, [sp, #4]
 8017b60:	881b      	ldrh	r3, [r3, #0]
 8017b62:	b2a4      	uxth	r4, r4
 8017b64:	1a9b      	subs	r3, r3, r2
 8017b66:	2c00      	cmp	r4, #0
 8017b68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017b6c:	bf18      	it	ne
 8017b6e:	2500      	movne	r5, #0
 8017b70:	4418      	add	r0, r3
 8017b72:	e7b5      	b.n	8017ae0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8017b74:	3901      	subs	r1, #1
 8017b76:	f80a 9c03 	strb.w	r9, [sl, #-3]
 8017b7a:	f80a 8c02 	strb.w	r8, [sl, #-2]
 8017b7e:	f80a cc01 	strb.w	ip, [sl, #-1]
 8017b82:	b289      	uxth	r1, r1
 8017b84:	e7dd      	b.n	8017b42 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8017b86:	9f04      	ldr	r7, [sp, #16]
 8017b88:	fb07 fa01 	mul.w	sl, r7, r1
 8017b8c:	f10a 0101 	add.w	r1, sl, #1
 8017b90:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8017b94:	1209      	asrs	r1, r1, #8
 8017b96:	ea6f 0a01 	mvn.w	sl, r1
 8017b9a:	b289      	uxth	r1, r1
 8017b9c:	fb19 f901 	smulbb	r9, r9, r1
 8017ba0:	fa5f fa8a 	uxtb.w	sl, sl
 8017ba4:	fb18 f801 	smulbb	r8, r8, r1
 8017ba8:	fb1c f101 	smulbb	r1, ip, r1
 8017bac:	fa1f f789 	uxth.w	r7, r9
 8017bb0:	4684      	mov	ip, r0
 8017bb2:	4691      	mov	r9, r2
 8017bb4:	9707      	str	r7, [sp, #28]
 8017bb6:	b289      	uxth	r1, r1
 8017bb8:	fa1f f788 	uxth.w	r7, r8
 8017bbc:	9708      	str	r7, [sp, #32]
 8017bbe:	f10c 0c03 	add.w	ip, ip, #3
 8017bc2:	f1b9 0f00 	cmp.w	r9, #0
 8017bc6:	d0bf      	beq.n	8017b48 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8017bc8:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8017bcc:	f109 39ff 	add.w	r9, r9, #4294967295
 8017bd0:	9f07      	ldr	r7, [sp, #28]
 8017bd2:	fa1f f989 	uxth.w	r9, r9
 8017bd6:	fb08 780a 	mla	r8, r8, sl, r7
 8017bda:	9f08      	ldr	r7, [sp, #32]
 8017bdc:	fa1f f888 	uxth.w	r8, r8
 8017be0:	f108 0b01 	add.w	fp, r8, #1
 8017be4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017be8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017bec:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8017bf0:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8017bf4:	fb08 780a 	mla	r8, r8, sl, r7
 8017bf8:	fa1f f888 	uxth.w	r8, r8
 8017bfc:	f108 0b01 	add.w	fp, r8, #1
 8017c00:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017c04:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017c08:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8017c0c:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 8017c10:	fb08 180a 	mla	r8, r8, sl, r1
 8017c14:	fa1f f888 	uxth.w	r8, r8
 8017c18:	f108 0b01 	add.w	fp, r8, #1
 8017c1c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017c20:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017c24:	f80c 8c01 	strb.w	r8, [ip, #-1]
 8017c28:	e7c9      	b.n	8017bbe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 8017c2a:	4b04      	ldr	r3, [pc, #16]	@ (8017c3c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8017c2c:	6818      	ldr	r0, [r3, #0]
 8017c2e:	6803      	ldr	r3, [r0, #0]
 8017c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c32:	4798      	blx	r3
 8017c34:	b00f      	add	sp, #60	@ 0x3c
 8017c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c3a:	bf00      	nop
 8017c3c:	24025158 	.word	0x24025158
 8017c40:	24025152 	.word	0x24025152

08017c44 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8017c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c48:	b089      	sub	sp, #36	@ 0x24
 8017c4a:	4607      	mov	r7, r0
 8017c4c:	4689      	mov	r9, r1
 8017c4e:	4692      	mov	sl, r2
 8017c50:	ac08      	add	r4, sp, #32
 8017c52:	461e      	mov	r6, r3
 8017c54:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8017c58:	4620      	mov	r0, r4
 8017c5a:	f7fd ffa5 	bl	8015ba8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017c5e:	683b      	ldr	r3, [r7, #0]
 8017c60:	4605      	mov	r5, r0
 8017c62:	4620      	mov	r0, r4
 8017c64:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8017c68:	f7fd fee4 	bl	8015a34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017c6c:	4683      	mov	fp, r0
 8017c6e:	4620      	mov	r0, r4
 8017c70:	f7fd ff14 	bl	8015a9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017c74:	4653      	mov	r3, sl
 8017c76:	464a      	mov	r2, r9
 8017c78:	4639      	mov	r1, r7
 8017c7a:	9500      	str	r5, [sp, #0]
 8017c7c:	e9cd b001 	strd	fp, r0, [sp, #4]
 8017c80:	a806      	add	r0, sp, #24
 8017c82:	47c0      	blx	r8
 8017c84:	a906      	add	r1, sp, #24
 8017c86:	4630      	mov	r0, r6
 8017c88:	f7fd fdb8 	bl	80157fc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8017c8c:	4628      	mov	r0, r5
 8017c8e:	b009      	add	sp, #36	@ 0x24
 8017c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017c94 <_ZN8touchgfx8LCD24bppD0Ev>:
 8017c94:	b510      	push	{r4, lr}
 8017c96:	4604      	mov	r4, r0
 8017c98:	2168      	movs	r1, #104	@ 0x68
 8017c9a:	f007 feb9 	bl	801fa10 <_ZdlPvj>
 8017c9e:	4620      	mov	r0, r4
 8017ca0:	bd10      	pop	{r4, pc}

08017ca2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 8017ca2:	b510      	push	{r4, lr}
 8017ca4:	4604      	mov	r4, r0
 8017ca6:	2104      	movs	r1, #4
 8017ca8:	f007 feb2 	bl	801fa10 <_ZdlPvj>
 8017cac:	4620      	mov	r0, r4
 8017cae:	bd10      	pop	{r4, pc}

08017cb0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8017cb0:	b510      	push	{r4, lr}
 8017cb2:	4604      	mov	r4, r0
 8017cb4:	2104      	movs	r1, #4
 8017cb6:	f007 feab 	bl	801fa10 <_ZdlPvj>
 8017cba:	4620      	mov	r0, r4
 8017cbc:	bd10      	pop	{r4, pc}

08017cbe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8017cbe:	b510      	push	{r4, lr}
 8017cc0:	4604      	mov	r4, r0
 8017cc2:	f640 0144 	movw	r1, #2116	@ 0x844
 8017cc6:	f007 fea3 	bl	801fa10 <_ZdlPvj>
 8017cca:	4620      	mov	r0, r4
 8017ccc:	bd10      	pop	{r4, pc}

08017cce <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8017cce:	b510      	push	{r4, lr}
 8017cd0:	4604      	mov	r4, r0
 8017cd2:	2104      	movs	r1, #4
 8017cd4:	f007 fe9c 	bl	801fa10 <_ZdlPvj>
 8017cd8:	4620      	mov	r0, r4
 8017cda:	bd10      	pop	{r4, pc}

08017cdc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8017cdc:	b510      	push	{r4, lr}
 8017cde:	4604      	mov	r4, r0
 8017ce0:	2104      	movs	r1, #4
 8017ce2:	f007 fe95 	bl	801fa10 <_ZdlPvj>
 8017ce6:	4620      	mov	r0, r4
 8017ce8:	bd10      	pop	{r4, pc}

08017cea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8017cea:	b510      	push	{r4, lr}
 8017cec:	4604      	mov	r4, r0
 8017cee:	2104      	movs	r1, #4
 8017cf0:	f007 fe8e 	bl	801fa10 <_ZdlPvj>
 8017cf4:	4620      	mov	r0, r4
 8017cf6:	bd10      	pop	{r4, pc}

08017cf8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8017cf8:	b510      	push	{r4, lr}
 8017cfa:	4604      	mov	r4, r0
 8017cfc:	2104      	movs	r1, #4
 8017cfe:	f007 fe87 	bl	801fa10 <_ZdlPvj>
 8017d02:	4620      	mov	r0, r4
 8017d04:	bd10      	pop	{r4, pc}

08017d06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017d06:	b510      	push	{r4, lr}
 8017d08:	4604      	mov	r4, r0
 8017d0a:	2104      	movs	r1, #4
 8017d0c:	f007 fe80 	bl	801fa10 <_ZdlPvj>
 8017d10:	4620      	mov	r0, r4
 8017d12:	bd10      	pop	{r4, pc}

08017d14 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017d14:	b510      	push	{r4, lr}
 8017d16:	4604      	mov	r4, r0
 8017d18:	2104      	movs	r1, #4
 8017d1a:	f007 fe79 	bl	801fa10 <_ZdlPvj>
 8017d1e:	4620      	mov	r0, r4
 8017d20:	bd10      	pop	{r4, pc}

08017d22 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017d22:	b510      	push	{r4, lr}
 8017d24:	4604      	mov	r4, r0
 8017d26:	2104      	movs	r1, #4
 8017d28:	f007 fe72 	bl	801fa10 <_ZdlPvj>
 8017d2c:	4620      	mov	r0, r4
 8017d2e:	bd10      	pop	{r4, pc}

08017d30 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017d30:	b510      	push	{r4, lr}
 8017d32:	4604      	mov	r4, r0
 8017d34:	2104      	movs	r1, #4
 8017d36:	f007 fe6b 	bl	801fa10 <_ZdlPvj>
 8017d3a:	4620      	mov	r0, r4
 8017d3c:	bd10      	pop	{r4, pc}

08017d3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8017d3e:	b510      	push	{r4, lr}
 8017d40:	4604      	mov	r4, r0
 8017d42:	2104      	movs	r1, #4
 8017d44:	f007 fe64 	bl	801fa10 <_ZdlPvj>
 8017d48:	4620      	mov	r0, r4
 8017d4a:	bd10      	pop	{r4, pc}

08017d4c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8017d4c:	b510      	push	{r4, lr}
 8017d4e:	4604      	mov	r4, r0
 8017d50:	2104      	movs	r1, #4
 8017d52:	f007 fe5d 	bl	801fa10 <_ZdlPvj>
 8017d56:	4620      	mov	r0, r4
 8017d58:	bd10      	pop	{r4, pc}

08017d5a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8017d5a:	b510      	push	{r4, lr}
 8017d5c:	4604      	mov	r4, r0
 8017d5e:	2104      	movs	r1, #4
 8017d60:	f007 fe56 	bl	801fa10 <_ZdlPvj>
 8017d64:	4620      	mov	r0, r4
 8017d66:	bd10      	pop	{r4, pc}

08017d68 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8017d68:	b510      	push	{r4, lr}
 8017d6a:	4604      	mov	r4, r0
 8017d6c:	2104      	movs	r1, #4
 8017d6e:	f007 fe4f 	bl	801fa10 <_ZdlPvj>
 8017d72:	4620      	mov	r0, r4
 8017d74:	bd10      	pop	{r4, pc}

08017d76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017d76:	b510      	push	{r4, lr}
 8017d78:	4604      	mov	r4, r0
 8017d7a:	2104      	movs	r1, #4
 8017d7c:	f007 fe48 	bl	801fa10 <_ZdlPvj>
 8017d80:	4620      	mov	r0, r4
 8017d82:	bd10      	pop	{r4, pc}

08017d84 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017d84:	b510      	push	{r4, lr}
 8017d86:	4604      	mov	r4, r0
 8017d88:	2104      	movs	r1, #4
 8017d8a:	f007 fe41 	bl	801fa10 <_ZdlPvj>
 8017d8e:	4620      	mov	r0, r4
 8017d90:	bd10      	pop	{r4, pc}

08017d92 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017d92:	b510      	push	{r4, lr}
 8017d94:	4604      	mov	r4, r0
 8017d96:	2104      	movs	r1, #4
 8017d98:	f007 fe3a 	bl	801fa10 <_ZdlPvj>
 8017d9c:	4620      	mov	r0, r4
 8017d9e:	bd10      	pop	{r4, pc}

08017da0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017da0:	b510      	push	{r4, lr}
 8017da2:	4604      	mov	r4, r0
 8017da4:	2104      	movs	r1, #4
 8017da6:	f007 fe33 	bl	801fa10 <_ZdlPvj>
 8017daa:	4620      	mov	r0, r4
 8017dac:	bd10      	pop	{r4, pc}

08017dae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8017dae:	b510      	push	{r4, lr}
 8017db0:	4604      	mov	r4, r0
 8017db2:	2104      	movs	r1, #4
 8017db4:	f007 fe2c 	bl	801fa10 <_ZdlPvj>
 8017db8:	4620      	mov	r0, r4
 8017dba:	bd10      	pop	{r4, pc}

08017dbc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8017dbc:	b510      	push	{r4, lr}
 8017dbe:	4604      	mov	r4, r0
 8017dc0:	2104      	movs	r1, #4
 8017dc2:	f007 fe25 	bl	801fa10 <_ZdlPvj>
 8017dc6:	4620      	mov	r0, r4
 8017dc8:	bd10      	pop	{r4, pc}

08017dca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8017dca:	b510      	push	{r4, lr}
 8017dcc:	4604      	mov	r4, r0
 8017dce:	2104      	movs	r1, #4
 8017dd0:	f007 fe1e 	bl	801fa10 <_ZdlPvj>
 8017dd4:	4620      	mov	r0, r4
 8017dd6:	bd10      	pop	{r4, pc}

08017dd8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8017dd8:	b510      	push	{r4, lr}
 8017dda:	4604      	mov	r4, r0
 8017ddc:	2104      	movs	r1, #4
 8017dde:	f007 fe17 	bl	801fa10 <_ZdlPvj>
 8017de2:	4620      	mov	r0, r4
 8017de4:	bd10      	pop	{r4, pc}
	...

08017de8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8017de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dec:	b08f      	sub	sp, #60	@ 0x3c
 8017dee:	461c      	mov	r4, r3
 8017df0:	460e      	mov	r6, r1
 8017df2:	9206      	str	r2, [sp, #24]
 8017df4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8017df8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017dfa:	9202      	str	r2, [sp, #8]
 8017dfc:	2a00      	cmp	r2, #0
 8017dfe:	f000 8128 	beq.w	8018052 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8017e02:	6820      	ldr	r0, [r4, #0]
 8017e04:	aa0a      	add	r2, sp, #40	@ 0x28
 8017e06:	6861      	ldr	r1, [r4, #4]
 8017e08:	c203      	stmia	r2!, {r0, r1}
 8017e0a:	6818      	ldr	r0, [r3, #0]
 8017e0c:	aa0c      	add	r2, sp, #48	@ 0x30
 8017e0e:	6859      	ldr	r1, [r3, #4]
 8017e10:	c203      	stmia	r2!, {r0, r1}
 8017e12:	a80a      	add	r0, sp, #40	@ 0x28
 8017e14:	f7fa fbca 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017e18:	4621      	mov	r1, r4
 8017e1a:	a80c      	add	r0, sp, #48	@ 0x30
 8017e1c:	f7fa fbee 	bl	80125fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017e20:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 8017e24:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8017e28:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 8017e2c:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8017e30:	bfdb      	ittet	le
 8017e32:	b2bb      	uxthle	r3, r7
 8017e34:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8017e38:	2301      	movgt	r3, #1
 8017e3a:	fb92 f3f3 	sdivle	r3, r2, r3
 8017e3e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8017e42:	441d      	add	r5, r3
 8017e44:	fb92 f1f3 	sdiv	r1, r2, r3
 8017e48:	fa1f fc81 	uxth.w	ip, r1
 8017e4c:	3d01      	subs	r5, #1
 8017e4e:	fb0c 2413 	mls	r4, ip, r3, r2
 8017e52:	4661      	mov	r1, ip
 8017e54:	fb14 f407 	smulbb	r4, r4, r7
 8017e58:	4404      	add	r4, r0
 8017e5a:	fb95 f5f3 	sdiv	r5, r5, r3
 8017e5e:	b2a4      	uxth	r4, r4
 8017e60:	b121      	cbz	r1, 8017e6c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 8017e62:	9b06      	ldr	r3, [sp, #24]
 8017e64:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8017e68:	ba1b      	rev	r3, r3
 8017e6a:	441e      	add	r6, r3
 8017e6c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8017e70:	b2ad      	uxth	r5, r5
 8017e72:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8017e76:	4418      	add	r0, r3
 8017e78:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8017e7c:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 8017e80:	00ad      	lsls	r5, r5, #2
 8017e82:	441a      	add	r2, r3
 8017e84:	4b74      	ldr	r3, [pc, #464]	@ (8018058 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8017e86:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8017e8a:	6818      	ldr	r0, [r3, #0]
 8017e8c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8017e90:	6803      	ldr	r3, [r0, #0]
 8017e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e94:	4798      	blx	r3
 8017e96:	4a71      	ldr	r2, [pc, #452]	@ (801805c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 8017e98:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8017e9c:	2c00      	cmp	r4, #0
 8017e9e:	8813      	ldrh	r3, [r2, #0]
 8017ea0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8017ea4:	9209      	str	r2, [sp, #36]	@ 0x24
 8017ea6:	fb03 c101 	mla	r1, r3, r1, ip
 8017eaa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8017eae:	fb03 f307 	mul.w	r3, r3, r7
 8017eb2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017eb6:	9204      	str	r2, [sp, #16]
 8017eb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017ebc:	9a02      	ldr	r2, [sp, #8]
 8017ebe:	4408      	add	r0, r1
 8017ec0:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8017ec4:	4403      	add	r3, r0
 8017ec6:	b292      	uxth	r2, r2
 8017ec8:	9307      	str	r3, [sp, #28]
 8017eca:	f105 0304 	add.w	r3, r5, #4
 8017ece:	bf0c      	ite	eq
 8017ed0:	4645      	moveq	r5, r8
 8017ed2:	2500      	movne	r5, #0
 8017ed4:	9308      	str	r3, [sp, #32]
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	b2ad      	uxth	r5, r5
 8017eda:	9205      	str	r2, [sp, #20]
 8017edc:	9303      	str	r3, [sp, #12]
 8017ede:	9a07      	ldr	r2, [sp, #28]
 8017ee0:	4282      	cmp	r2, r0
 8017ee2:	f240 80b1 	bls.w	8018048 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 8017ee6:	b95b      	cbnz	r3, 8017f00 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 8017ee8:	7832      	ldrb	r2, [r6, #0]
 8017eea:	0993      	lsrs	r3, r2, #6
 8017eec:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8017ef0:	9203      	str	r2, [sp, #12]
 8017ef2:	1e5a      	subs	r2, r3, #1
 8017ef4:	2a02      	cmp	r2, #2
 8017ef6:	bf8d      	iteet	hi
 8017ef8:	7873      	ldrbhi	r3, [r6, #1]
 8017efa:	3601      	addls	r6, #1
 8017efc:	b29b      	uxthls	r3, r3
 8017efe:	3602      	addhi	r6, #2
 8017f00:	b184      	cbz	r4, 8017f24 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 8017f02:	429c      	cmp	r4, r3
 8017f04:	bf91      	iteee	ls
 8017f06:	1b1c      	subls	r4, r3, r4
 8017f08:	1ae4      	subhi	r4, r4, r3
 8017f0a:	4629      	movhi	r1, r5
 8017f0c:	f04f 0e00 	movhi.w	lr, #0
 8017f10:	bf9b      	ittet	ls
 8017f12:	fa1f fe84 	uxthls.w	lr, r4
 8017f16:	2400      	movls	r4, #0
 8017f18:	b2a4      	uxthhi	r4, r4
 8017f1a:	fa1f f188 	uxthls.w	r1, r8
 8017f1e:	4673      	mov	r3, lr
 8017f20:	460d      	mov	r5, r1
 8017f22:	e7dc      	b.n	8017ede <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8017f24:	2203      	movs	r2, #3
 8017f26:	9908      	ldr	r1, [sp, #32]
 8017f28:	42ab      	cmp	r3, r5
 8017f2a:	4617      	mov	r7, r2
 8017f2c:	9a03      	ldr	r2, [sp, #12]
 8017f2e:	bf24      	itt	cs
 8017f30:	eba3 0e05 	subcs.w	lr, r3, r5
 8017f34:	9501      	strcs	r5, [sp, #4]
 8017f36:	fb17 1702 	smlabb	r7, r7, r2, r1
 8017f3a:	9a06      	ldr	r2, [sp, #24]
 8017f3c:	bf34      	ite	cc
 8017f3e:	1ae9      	subcc	r1, r5, r3
 8017f40:	fa1f fe8e 	uxthcs.w	lr, lr
 8017f44:	4417      	add	r7, r2
 8017f46:	9a02      	ldr	r2, [sp, #8]
 8017f48:	bf2f      	iteee	cs
 8017f4a:	4621      	movcs	r1, r4
 8017f4c:	b289      	uxthcc	r1, r1
 8017f4e:	9301      	strcc	r3, [sp, #4]
 8017f50:	46a6      	movcc	lr, r4
 8017f52:	2aff      	cmp	r2, #255	@ 0xff
 8017f54:	d11e      	bne.n	8017f94 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 8017f56:	4681      	mov	r9, r0
 8017f58:	f8dd c004 	ldr.w	ip, [sp, #4]
 8017f5c:	f109 0903 	add.w	r9, r9, #3
 8017f60:	f1bc 0f00 	cmp.w	ip, #0
 8017f64:	d15f      	bne.n	8018026 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 8017f66:	9a01      	ldr	r2, [sp, #4]
 8017f68:	42ab      	cmp	r3, r5
 8017f6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017f6e:	4410      	add	r0, r2
 8017f70:	d3d5      	bcc.n	8017f1e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8017f72:	fa1f f188 	uxth.w	r1, r8
 8017f76:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8017f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f7c:	1a64      	subs	r4, r4, r1
 8017f7e:	881b      	ldrh	r3, [r3, #0]
 8017f80:	b2a4      	uxth	r4, r4
 8017f82:	eba3 0308 	sub.w	r3, r3, r8
 8017f86:	2c00      	cmp	r4, #0
 8017f88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017f8c:	bf18      	it	ne
 8017f8e:	2100      	movne	r1, #0
 8017f90:	4418      	add	r0, r3
 8017f92:	e7c4      	b.n	8017f1e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8017f94:	4684      	mov	ip, r0
 8017f96:	f8dd a004 	ldr.w	sl, [sp, #4]
 8017f9a:	f10c 0c03 	add.w	ip, ip, #3
 8017f9e:	f1ba 0f00 	cmp.w	sl, #0
 8017fa2:	d0e0      	beq.n	8017f66 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8017fa4:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8017fa8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017fac:	9a05      	ldr	r2, [sp, #20]
 8017fae:	f897 9000 	ldrb.w	r9, [r7]
 8017fb2:	fa1f fa8a 	uxth.w	sl, sl
 8017fb6:	fb1b fb02 	smulbb	fp, fp, r2
 8017fba:	9a04      	ldr	r2, [sp, #16]
 8017fbc:	fb09 b902 	mla	r9, r9, r2, fp
 8017fc0:	9a05      	ldr	r2, [sp, #20]
 8017fc2:	fa1f f989 	uxth.w	r9, r9
 8017fc6:	f109 0b01 	add.w	fp, r9, #1
 8017fca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017fce:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8017fd2:	fb1b fb02 	smulbb	fp, fp, r2
 8017fd6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017fda:	9a04      	ldr	r2, [sp, #16]
 8017fdc:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8017fe0:	f897 9001 	ldrb.w	r9, [r7, #1]
 8017fe4:	fb09 b902 	mla	r9, r9, r2, fp
 8017fe8:	9a05      	ldr	r2, [sp, #20]
 8017fea:	fa1f f989 	uxth.w	r9, r9
 8017fee:	f109 0b01 	add.w	fp, r9, #1
 8017ff2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017ff6:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 8017ffa:	fb1b fb02 	smulbb	fp, fp, r2
 8017ffe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018002:	9a04      	ldr	r2, [sp, #16]
 8018004:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8018008:	f897 9002 	ldrb.w	r9, [r7, #2]
 801800c:	fb09 b902 	mla	r9, r9, r2, fp
 8018010:	fa1f f989 	uxth.w	r9, r9
 8018014:	f109 0b01 	add.w	fp, r9, #1
 8018018:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801801c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018020:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8018024:	e7b9      	b.n	8017f9a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 8018026:	f897 a000 	ldrb.w	sl, [r7]
 801802a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801802e:	f809 ac03 	strb.w	sl, [r9, #-3]
 8018032:	fa1f fc8c 	uxth.w	ip, ip
 8018036:	f897 a001 	ldrb.w	sl, [r7, #1]
 801803a:	f809 ac02 	strb.w	sl, [r9, #-2]
 801803e:	f897 a002 	ldrb.w	sl, [r7, #2]
 8018042:	f809 ac01 	strb.w	sl, [r9, #-1]
 8018046:	e789      	b.n	8017f5c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8018048:	4b03      	ldr	r3, [pc, #12]	@ (8018058 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801804a:	6818      	ldr	r0, [r3, #0]
 801804c:	6803      	ldr	r3, [r0, #0]
 801804e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018050:	4798      	blx	r3
 8018052:	b00f      	add	sp, #60	@ 0x3c
 8018054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018058:	24025158 	.word	0x24025158
 801805c:	24025152 	.word	0x24025152

08018060 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8018060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018064:	b09b      	sub	sp, #108	@ 0x6c
 8018066:	461d      	mov	r5, r3
 8018068:	4604      	mov	r4, r0
 801806a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801806c:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 8018070:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8018074:	9208      	str	r2, [sp, #32]
 8018076:	2a00      	cmp	r2, #0
 8018078:	f000 81f3 	beq.w	8018462 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801807c:	6828      	ldr	r0, [r5, #0]
 801807e:	aa16      	add	r2, sp, #88	@ 0x58
 8018080:	6869      	ldr	r1, [r5, #4]
 8018082:	c203      	stmia	r2!, {r0, r1}
 8018084:	6818      	ldr	r0, [r3, #0]
 8018086:	aa18      	add	r2, sp, #96	@ 0x60
 8018088:	6859      	ldr	r1, [r3, #4]
 801808a:	c203      	stmia	r2!, {r0, r1}
 801808c:	a816      	add	r0, sp, #88	@ 0x58
 801808e:	f7fa fa8d 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018092:	4629      	mov	r1, r5
 8018094:	a818      	add	r0, sp, #96	@ 0x60
 8018096:	f7fa fab1 	bl	80125fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801809a:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801809e:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 80180a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80180a6:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 80180aa:	bfdb      	ittet	le
 80180ac:	b29a      	uxthle	r2, r3
 80180ae:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80180b2:	f04f 0a01 	movgt.w	sl, #1
 80180b6:	fb91 faf2 	sdivle	sl, r1, r2
 80180ba:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 80180be:	4456      	add	r6, sl
 80180c0:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 80180c4:	3e01      	subs	r6, #1
 80180c6:	fb92 f0fa 	sdiv	r0, r2, sl
 80180ca:	b280      	uxth	r0, r0
 80180cc:	fb00 281a 	mls	r8, r0, sl, r2
 80180d0:	900e      	str	r0, [sp, #56]	@ 0x38
 80180d2:	fb18 f803 	smulbb	r8, r8, r3
 80180d6:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 80180da:	4488      	add	r8, r1
 80180dc:	4419      	add	r1, r3
 80180de:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 80180e2:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 80180e6:	fa1f f888 	uxth.w	r8, r8
 80180ea:	441a      	add	r2, r3
 80180ec:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80180f0:	9303      	str	r3, [sp, #12]
 80180f2:	4b9c      	ldr	r3, [pc, #624]	@ (8018364 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 80180f4:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 80180f8:	6818      	ldr	r0, [r3, #0]
 80180fa:	6803      	ldr	r3, [r0, #0]
 80180fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180fe:	4798      	blx	r3
 8018100:	4b99      	ldr	r3, [pc, #612]	@ (8018368 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 8018102:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 8018106:	f1b8 0f00 	cmp.w	r8, #0
 801810a:	881a      	ldrh	r2, [r3, #0]
 801810c:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 8018110:	fb02 f505 	mul.w	r5, r2, r5
 8018114:	fb02 7101 	mla	r1, r2, r1, r7
 8018118:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801811c:	9314      	str	r3, [sp, #80]	@ 0x50
 801811e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018122:	9b08      	ldr	r3, [sp, #32]
 8018124:	fb96 f6fa 	sdiv	r6, r6, sl
 8018128:	4408      	add	r0, r1
 801812a:	f106 0601 	add.w	r6, r6, #1
 801812e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8018132:	f04f 0100 	mov.w	r1, #0
 8018136:	eb00 0205 	add.w	r2, r0, r5
 801813a:	b2b6      	uxth	r6, r6
 801813c:	b29b      	uxth	r3, r3
 801813e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018140:	9209      	str	r2, [sp, #36]	@ 0x24
 8018142:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018144:	930d      	str	r3, [sp, #52]	@ 0x34
 8018146:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801814a:	4b88      	ldr	r3, [pc, #544]	@ (801836c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801814c:	f106 0204 	add.w	r2, r6, #4
 8018150:	eba3 0304 	sub.w	r3, r3, r4
 8018154:	9205      	str	r2, [sp, #20]
 8018156:	9a03      	ldr	r2, [sp, #12]
 8018158:	bf18      	it	ne
 801815a:	2200      	movne	r2, #0
 801815c:	9315      	str	r3, [sp, #84]	@ 0x54
 801815e:	b292      	uxth	r2, r2
 8018160:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018162:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018164:	fa11 f383 	uxtah	r3, r1, r3
 8018168:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801816a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801816e:	3304      	adds	r3, #4
 8018170:	9306      	str	r3, [sp, #24]
 8018172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018174:	4283      	cmp	r3, r0
 8018176:	f240 816f 	bls.w	8018458 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801817a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801817e:	f04f 0900 	mov.w	r9, #0
 8018182:	9d06      	ldr	r5, [sp, #24]
 8018184:	fbb8 f3f3 	udiv	r3, r8, r3
 8018188:	ebaa 0303 	sub.w	r3, sl, r3
 801818c:	782d      	ldrb	r5, [r5, #0]
 801818e:	b29b      	uxth	r3, r3
 8018190:	950f      	str	r5, [sp, #60]	@ 0x3c
 8018192:	3501      	adds	r5, #1
 8018194:	9312      	str	r3, [sp, #72]	@ 0x48
 8018196:	9b06      	ldr	r3, [sp, #24]
 8018198:	9504      	str	r5, [sp, #16]
 801819a:	7859      	ldrb	r1, [r3, #1]
 801819c:	789b      	ldrb	r3, [r3, #2]
 801819e:	021b      	lsls	r3, r3, #8
 80181a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80181a4:	9906      	ldr	r1, [sp, #24]
 80181a6:	78c9      	ldrb	r1, [r1, #3]
 80181a8:	430b      	orrs	r3, r1
 80181aa:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80181ac:	4419      	add	r1, r3
 80181ae:	1c4d      	adds	r5, r1, #1
 80181b0:	7849      	ldrb	r1, [r1, #1]
 80181b2:	9502      	str	r5, [sp, #8]
 80181b4:	0209      	lsls	r1, r1, #8
 80181b6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80181b8:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 80181bc:	5ceb      	ldrb	r3, [r5, r3]
 80181be:	4319      	orrs	r1, r3
 80181c0:	b28b      	uxth	r3, r1
 80181c2:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80181c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80181c8:	2300      	movs	r3, #0
 80181ca:	9307      	str	r3, [sp, #28]
 80181cc:	2301      	movs	r3, #1
 80181ce:	e9cd 3300 	strd	r3, r3, [sp]
 80181d2:	469c      	mov	ip, r3
 80181d4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80181d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80181da:	f1b8 0f00 	cmp.w	r8, #0
 80181de:	f000 8082 	beq.w	80182e6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 80181e2:	45c4      	cmp	ip, r8
 80181e4:	d270      	bcs.n	80182c8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 80181e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80181e8:	eba8 080c 	sub.w	r8, r8, ip
 80181ec:	4611      	mov	r1, r2
 80181ee:	4283      	cmp	r3, r0
 80181f0:	fa1f f888 	uxth.w	r8, r8
 80181f4:	d802      	bhi.n	80181fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 80181f6:	e074      	b.n	80182e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d15f      	bne.n	80182bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 80181fc:	9b02      	ldr	r3, [sp, #8]
 80181fe:	9a01      	ldr	r2, [sp, #4]
 8018200:	785b      	ldrb	r3, [r3, #1]
 8018202:	f1c2 0207 	rsb	r2, r2, #7
 8018206:	9d01      	ldr	r5, [sp, #4]
 8018208:	4093      	lsls	r3, r2
 801820a:	005b      	lsls	r3, r3, #1
 801820c:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8018210:	9b02      	ldr	r3, [sp, #8]
 8018212:	781b      	ldrb	r3, [r3, #0]
 8018214:	412b      	asrs	r3, r5
 8018216:	b2db      	uxtb	r3, r3
 8018218:	4313      	orrs	r3, r2
 801821a:	462a      	mov	r2, r5
 801821c:	3201      	adds	r2, #1
 801821e:	b29e      	uxth	r6, r3
 8018220:	b2d2      	uxtb	r2, r2
 8018222:	2a08      	cmp	r2, #8
 8018224:	9201      	str	r2, [sp, #4]
 8018226:	9a02      	ldr	r2, [sp, #8]
 8018228:	bf09      	itett	eq
 801822a:	3202      	addeq	r2, #2
 801822c:	3201      	addne	r2, #1
 801822e:	9202      	streq	r2, [sp, #8]
 8018230:	2200      	moveq	r2, #0
 8018232:	bf14      	ite	ne
 8018234:	9202      	strne	r2, [sp, #8]
 8018236:	9201      	streq	r2, [sp, #4]
 8018238:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801823a:	42b2      	cmp	r2, r6
 801823c:	d309      	bcc.n	8018252 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801823e:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8018242:	2301      	movs	r3, #1
 8018244:	9a04      	ldr	r2, [sp, #16]
 8018246:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801824a:	d30e      	bcc.n	801826a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801824c:	9300      	str	r3, [sp, #0]
 801824e:	2500      	movs	r5, #0
 8018250:	e035      	b.n	80182be <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8018252:	9b04      	ldr	r3, [sp, #16]
 8018254:	429e      	cmp	r6, r3
 8018256:	d318      	bcc.n	801828a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8018258:	9b00      	ldr	r3, [sp, #0]
 801825a:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801825e:	18e3      	adds	r3, r4, r3
 8018260:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8018264:	9b00      	ldr	r3, [sp, #0]
 8018266:	3301      	adds	r3, #1
 8018268:	b29b      	uxth	r3, r3
 801826a:	9a04      	ldr	r2, [sp, #16]
 801826c:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 8018270:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018274:	9f00      	ldr	r7, [sp, #0]
 8018276:	7115      	strb	r5, [r2, #4]
 8018278:	3701      	adds	r7, #1
 801827a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801827c:	7157      	strb	r7, [r2, #5]
 801827e:	80d5      	strh	r5, [r2, #6]
 8018280:	9a04      	ldr	r2, [sp, #16]
 8018282:	3201      	adds	r2, #1
 8018284:	b292      	uxth	r2, r2
 8018286:	9204      	str	r2, [sp, #16]
 8018288:	e7e0      	b.n	801824c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801828a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801828e:	4632      	mov	r2, r6
 8018290:	795b      	ldrb	r3, [r3, #5]
 8018292:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 8018296:	4425      	add	r5, r4
 8018298:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801829a:	eb07 0c05 	add.w	ip, r7, r5
 801829e:	f1bc 0f00 	cmp.w	ip, #0
 80182a2:	dd07      	ble.n	80182b4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 80182a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80182a8:	f892 c004 	ldrb.w	ip, [r2, #4]
 80182ac:	f805 cd01 	strb.w	ip, [r5, #-1]!
 80182b0:	88d2      	ldrh	r2, [r2, #6]
 80182b2:	e7f1      	b.n	8018298 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 80182b4:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80182b8:	b29b      	uxth	r3, r3
 80182ba:	e7c3      	b.n	8018244 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 80182bc:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80182be:	460a      	mov	r2, r1
 80182c0:	960a      	str	r6, [sp, #40]	@ 0x28
 80182c2:	46a9      	mov	r9, r5
 80182c4:	469c      	mov	ip, r3
 80182c6:	e788      	b.n	80181da <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 80182c8:	ebac 0308 	sub.w	r3, ip, r8
 80182cc:	eb09 0508 	add.w	r5, r9, r8
 80182d0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80182d4:	b29b      	uxth	r3, r3
 80182d6:	b2ad      	uxth	r5, r5
 80182d8:	f04f 0800 	mov.w	r8, #0
 80182dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80182de:	4282      	cmp	r2, r0
 80182e0:	d88a      	bhi.n	80181f8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 80182e2:	460a      	mov	r2, r1
 80182e4:	e745      	b.n	8018172 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 80182e6:	4594      	cmp	ip, r2
 80182e8:	9d08      	ldr	r5, [sp, #32]
 80182ea:	4686      	mov	lr, r0
 80182ec:	bf27      	ittee	cs
 80182ee:	ebac 0302 	subcs.w	r3, ip, r2
 80182f2:	4616      	movcs	r6, r2
 80182f4:	eba2 010c 	subcc.w	r1, r2, ip
 80182f8:	4666      	movcc	r6, ip
 80182fa:	bf27      	ittee	cs
 80182fc:	b29b      	uxthcs	r3, r3
 80182fe:	4641      	movcs	r1, r8
 8018300:	b289      	uxthcc	r1, r1
 8018302:	4643      	movcc	r3, r8
 8018304:	2dff      	cmp	r5, #255	@ 0xff
 8018306:	eb09 0506 	add.w	r5, r9, r6
 801830a:	b2ad      	uxth	r5, r5
 801830c:	d130      	bne.n	8018370 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801830e:	45a9      	cmp	r9, r5
 8018310:	f10e 0e03 	add.w	lr, lr, #3
 8018314:	d17a      	bne.n	801840c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8018316:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801831a:	4594      	cmp	ip, r2
 801831c:	4430      	add	r0, r6
 801831e:	d3db      	bcc.n	80182d8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8018320:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018322:	9903      	ldr	r1, [sp, #12]
 8018324:	8812      	ldrh	r2, [r2, #0]
 8018326:	1a52      	subs	r2, r2, r1
 8018328:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801832a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801832e:	4410      	add	r0, r2
 8018330:	9a07      	ldr	r2, [sp, #28]
 8018332:	3201      	adds	r2, #1
 8018334:	428a      	cmp	r2, r1
 8018336:	9207      	str	r2, [sp, #28]
 8018338:	f040 8081 	bne.w	801843e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801833c:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 8018340:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8018344:	9b03      	ldr	r3, [sp, #12]
 8018346:	eba8 080c 	sub.w	r8, r8, ip
 801834a:	fa1f f888 	uxth.w	r8, r8
 801834e:	f1b8 0f00 	cmp.w	r8, #0
 8018352:	bf08      	it	eq
 8018354:	461a      	moveq	r2, r3
 8018356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018358:	bf18      	it	ne
 801835a:	2200      	movne	r2, #0
 801835c:	3301      	adds	r3, #1
 801835e:	b292      	uxth	r2, r2
 8018360:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018362:	e6fd      	b.n	8018160 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8018364:	24025158 	.word	0x24025158
 8018368:	24025152 	.word	0x24025152
 801836c:	fffff7fb 	.word	0xfffff7fb
 8018370:	45a9      	cmp	r9, r5
 8018372:	f10e 0e03 	add.w	lr, lr, #3
 8018376:	d0ce      	beq.n	8018316 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8018378:	f109 0701 	add.w	r7, r9, #1
 801837c:	44a1      	add	r9, r4
 801837e:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 8018382:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8018386:	9713      	str	r7, [sp, #76]	@ 0x4c
 8018388:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801838c:	9f05      	ldr	r7, [sp, #20]
 801838e:	eb07 0908 	add.w	r9, r7, r8
 8018392:	f817 8008 	ldrb.w	r8, [r7, r8]
 8018396:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8018398:	fb1b fb07 	smulbb	fp, fp, r7
 801839c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801839e:	fb08 b807 	mla	r8, r8, r7, fp
 80183a2:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80183a4:	fa1f f888 	uxth.w	r8, r8
 80183a8:	f108 0b01 	add.w	fp, r8, #1
 80183ac:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80183b0:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 80183b4:	fb1b fb07 	smulbb	fp, fp, r7
 80183b8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80183bc:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80183be:	f80e 8c03 	strb.w	r8, [lr, #-3]
 80183c2:	f899 8001 	ldrb.w	r8, [r9, #1]
 80183c6:	fb08 b807 	mla	r8, r8, r7, fp
 80183ca:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80183cc:	fa1f f888 	uxth.w	r8, r8
 80183d0:	f108 0b01 	add.w	fp, r8, #1
 80183d4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80183d8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80183dc:	f80e 8c02 	strb.w	r8, [lr, #-2]
 80183e0:	f899 8002 	ldrb.w	r8, [r9, #2]
 80183e4:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 80183e8:	fb19 f907 	smulbb	r9, r9, r7
 80183ec:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80183ee:	fb08 9807 	mla	r8, r8, r7, r9
 80183f2:	fa1f f888 	uxth.w	r8, r8
 80183f6:	f108 0901 	add.w	r9, r8, #1
 80183fa:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 80183fe:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 8018402:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018406:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801840a:	e7b1      	b.n	8018370 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801840c:	f109 0b01 	add.w	fp, r9, #1
 8018410:	44a1      	add	r9, r4
 8018412:	9f05      	ldr	r7, [sp, #20]
 8018414:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8018418:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801841c:	eb07 0908 	add.w	r9, r7, r8
 8018420:	f817 8008 	ldrb.w	r8, [r7, r8]
 8018424:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8018428:	f899 8001 	ldrb.w	r8, [r9, #1]
 801842c:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8018430:	f899 8002 	ldrb.w	r8, [r9, #2]
 8018434:	fa1f f98b 	uxth.w	r9, fp
 8018438:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801843c:	e767      	b.n	801830e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801843e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8018442:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8018446:	eba8 0801 	sub.w	r8, r8, r1
 801844a:	fa1f f888 	uxth.w	r8, r8
 801844e:	f1b8 0f00 	cmp.w	r8, #0
 8018452:	bf18      	it	ne
 8018454:	2100      	movne	r1, #0
 8018456:	e741      	b.n	80182dc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8018458:	4b03      	ldr	r3, [pc, #12]	@ (8018468 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801845a:	6818      	ldr	r0, [r3, #0]
 801845c:	6803      	ldr	r3, [r0, #0]
 801845e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018460:	4798      	blx	r3
 8018462:	b01b      	add	sp, #108	@ 0x6c
 8018464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018468:	24025158 	.word	0x24025158

0801846c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801846c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018470:	b09d      	sub	sp, #116	@ 0x74
 8018472:	461d      	mov	r5, r3
 8018474:	4604      	mov	r4, r0
 8018476:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018478:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801847c:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8018480:	920c      	str	r2, [sp, #48]	@ 0x30
 8018482:	2a00      	cmp	r2, #0
 8018484:	f000 81de 	beq.w	8018844 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8018488:	6828      	ldr	r0, [r5, #0]
 801848a:	aa18      	add	r2, sp, #96	@ 0x60
 801848c:	6869      	ldr	r1, [r5, #4]
 801848e:	c203      	stmia	r2!, {r0, r1}
 8018490:	6818      	ldr	r0, [r3, #0]
 8018492:	aa1a      	add	r2, sp, #104	@ 0x68
 8018494:	6859      	ldr	r1, [r3, #4]
 8018496:	c203      	stmia	r2!, {r0, r1}
 8018498:	a818      	add	r0, sp, #96	@ 0x60
 801849a:	f7fa f887 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801849e:	4629      	mov	r1, r5
 80184a0:	a81a      	add	r0, sp, #104	@ 0x68
 80184a2:	f7fa f8ab 	bl	80125fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80184a6:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 80184aa:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 80184ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80184b2:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 80184b6:	bfdb      	ittet	le
 80184b8:	b29a      	uxthle	r2, r3
 80184ba:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80184be:	2201      	movgt	r2, #1
 80184c0:	fb91 f2f2 	sdivle	r2, r1, r2
 80184c4:	9201      	str	r2, [sp, #4]
 80184c6:	9801      	ldr	r0, [sp, #4]
 80184c8:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 80184cc:	9901      	ldr	r1, [sp, #4]
 80184ce:	fb92 f0f0 	sdiv	r0, r2, r0
 80184d2:	b280      	uxth	r0, r0
 80184d4:	440f      	add	r7, r1
 80184d6:	900d      	str	r0, [sp, #52]	@ 0x34
 80184d8:	3f01      	subs	r7, #1
 80184da:	9801      	ldr	r0, [sp, #4]
 80184dc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80184de:	fb05 2510 	mls	r5, r5, r0, r2
 80184e2:	fb97 f7f1 	sdiv	r7, r7, r1
 80184e6:	fb15 f503 	smulbb	r5, r5, r3
 80184ea:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 80184ee:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 80184f2:	3701      	adds	r7, #1
 80184f4:	440d      	add	r5, r1
 80184f6:	4419      	add	r1, r3
 80184f8:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 80184fc:	b2bf      	uxth	r7, r7
 80184fe:	441a      	add	r2, r3
 8018500:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8018504:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8018508:	00bf      	lsls	r7, r7, #2
 801850a:	9304      	str	r3, [sp, #16]
 801850c:	b2ad      	uxth	r5, r5
 801850e:	4bb0      	ldr	r3, [pc, #704]	@ (80187d0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 8018510:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8018514:	6818      	ldr	r0, [r3, #0]
 8018516:	6803      	ldr	r3, [r0, #0]
 8018518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801851a:	4798      	blx	r3
 801851c:	4bad      	ldr	r3, [pc, #692]	@ (80187d4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801851e:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8018522:	2d00      	cmp	r5, #0
 8018524:	881a      	ldrh	r2, [r3, #0]
 8018526:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801852a:	fb02 f606 	mul.w	r6, r2, r6
 801852e:	fb02 c101 	mla	r1, r2, r1, ip
 8018532:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018536:	9316      	str	r3, [sp, #88]	@ 0x58
 8018538:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801853c:	4ba6      	ldr	r3, [pc, #664]	@ (80187d8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801853e:	eb00 0801 	add.w	r8, r0, r1
 8018542:	bf18      	it	ne
 8018544:	2100      	movne	r1, #0
 8018546:	eba3 0304 	sub.w	r3, r3, r4
 801854a:	eb08 0206 	add.w	r2, r8, r6
 801854e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8018550:	9208      	str	r2, [sp, #32]
 8018552:	f107 0204 	add.w	r2, r7, #4
 8018556:	9211      	str	r2, [sp, #68]	@ 0x44
 8018558:	9a04      	ldr	r2, [sp, #16]
 801855a:	bf08      	it	eq
 801855c:	4611      	moveq	r1, r2
 801855e:	2200      	movs	r2, #0
 8018560:	b289      	uxth	r1, r1
 8018562:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018564:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018568:	fa12 f383 	uxtah	r3, r2, r3
 801856c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801856e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018572:	3304      	adds	r3, #4
 8018574:	9306      	str	r3, [sp, #24]
 8018576:	9b08      	ldr	r3, [sp, #32]
 8018578:	4543      	cmp	r3, r8
 801857a:	f240 815e 	bls.w	801883a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801857e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8018582:	f04f 0b01 	mov.w	fp, #1
 8018586:	9a01      	ldr	r2, [sp, #4]
 8018588:	9806      	ldr	r0, [sp, #24]
 801858a:	465e      	mov	r6, fp
 801858c:	f8cd b008 	str.w	fp, [sp, #8]
 8018590:	7800      	ldrb	r0, [r0, #0]
 8018592:	fbb5 f3f3 	udiv	r3, r5, r3
 8018596:	1ad3      	subs	r3, r2, r3
 8018598:	900e      	str	r0, [sp, #56]	@ 0x38
 801859a:	3001      	adds	r0, #1
 801859c:	b29b      	uxth	r3, r3
 801859e:	9005      	str	r0, [sp, #20]
 80185a0:	9312      	str	r3, [sp, #72]	@ 0x48
 80185a2:	9b06      	ldr	r3, [sp, #24]
 80185a4:	785a      	ldrb	r2, [r3, #1]
 80185a6:	789b      	ldrb	r3, [r3, #2]
 80185a8:	021b      	lsls	r3, r3, #8
 80185aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80185ae:	9a06      	ldr	r2, [sp, #24]
 80185b0:	78d2      	ldrb	r2, [r2, #3]
 80185b2:	4313      	orrs	r3, r2
 80185b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80185b6:	441a      	add	r2, r3
 80185b8:	1c50      	adds	r0, r2, #1
 80185ba:	7852      	ldrb	r2, [r2, #1]
 80185bc:	9003      	str	r0, [sp, #12]
 80185be:	0212      	lsls	r2, r2, #8
 80185c0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80185c2:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 80185c6:	5cc3      	ldrb	r3, [r0, r3]
 80185c8:	431a      	orrs	r2, r3
 80185ca:	b293      	uxth	r3, r2
 80185cc:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80185d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80185d2:	2300      	movs	r3, #0
 80185d4:	461a      	mov	r2, r3
 80185d6:	9307      	str	r3, [sp, #28]
 80185d8:	2d00      	cmp	r5, #0
 80185da:	d07c      	beq.n	80186d6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 80185dc:	42ae      	cmp	r6, r5
 80185de:	d26c      	bcs.n	80186ba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 80185e0:	9b08      	ldr	r3, [sp, #32]
 80185e2:	1bad      	subs	r5, r5, r6
 80185e4:	4608      	mov	r0, r1
 80185e6:	4543      	cmp	r3, r8
 80185e8:	b2ad      	uxth	r5, r5
 80185ea:	d802      	bhi.n	80185f2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 80185ec:	e071      	b.n	80186d2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d15d      	bne.n	80186ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 80185f2:	9b03      	ldr	r3, [sp, #12]
 80185f4:	9a02      	ldr	r2, [sp, #8]
 80185f6:	785b      	ldrb	r3, [r3, #1]
 80185f8:	f1c2 0207 	rsb	r2, r2, #7
 80185fc:	9902      	ldr	r1, [sp, #8]
 80185fe:	4093      	lsls	r3, r2
 8018600:	005b      	lsls	r3, r3, #1
 8018602:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8018606:	9b03      	ldr	r3, [sp, #12]
 8018608:	781b      	ldrb	r3, [r3, #0]
 801860a:	410b      	asrs	r3, r1
 801860c:	3101      	adds	r1, #1
 801860e:	b2c9      	uxtb	r1, r1
 8018610:	b2db      	uxtb	r3, r3
 8018612:	2908      	cmp	r1, #8
 8018614:	9102      	str	r1, [sp, #8]
 8018616:	9903      	ldr	r1, [sp, #12]
 8018618:	ea43 0302 	orr.w	r3, r3, r2
 801861c:	bf0c      	ite	eq
 801861e:	3102      	addeq	r1, #2
 8018620:	3101      	addne	r1, #1
 8018622:	b29a      	uxth	r2, r3
 8018624:	bf05      	ittet	eq
 8018626:	9103      	streq	r1, [sp, #12]
 8018628:	2100      	moveq	r1, #0
 801862a:	9103      	strne	r1, [sp, #12]
 801862c:	9102      	streq	r1, [sp, #8]
 801862e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018630:	4291      	cmp	r1, r2
 8018632:	d30a      	bcc.n	801864a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 8018634:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8018638:	2301      	movs	r3, #1
 801863a:	9905      	ldr	r1, [sp, #20]
 801863c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8018640:	d30f      	bcc.n	8018662 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 8018642:	469b      	mov	fp, r3
 8018644:	f04f 0c00 	mov.w	ip, #0
 8018648:	e032      	b.n	80186b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801864a:	9b05      	ldr	r3, [sp, #20]
 801864c:	429a      	cmp	r2, r3
 801864e:	d318      	bcc.n	8018682 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8018650:	eb04 030b 	add.w	r3, r4, fp
 8018654:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8018658:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801865c:	f10b 0301 	add.w	r3, fp, #1
 8018660:	b29b      	uxth	r3, r3
 8018662:	9905      	ldr	r1, [sp, #20]
 8018664:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8018668:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801866c:	710e      	strb	r6, [r1, #4]
 801866e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018670:	80ce      	strh	r6, [r1, #6]
 8018672:	f10b 0601 	add.w	r6, fp, #1
 8018676:	714e      	strb	r6, [r1, #5]
 8018678:	9905      	ldr	r1, [sp, #20]
 801867a:	3101      	adds	r1, #1
 801867c:	b289      	uxth	r1, r1
 801867e:	9105      	str	r1, [sp, #20]
 8018680:	e7df      	b.n	8018642 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8018682:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018686:	4611      	mov	r1, r2
 8018688:	795b      	ldrb	r3, [r3, #5]
 801868a:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801868e:	4426      	add	r6, r4
 8018690:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8018692:	4437      	add	r7, r6
 8018694:	2f00      	cmp	r7, #0
 8018696:	dd06      	ble.n	80186a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8018698:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801869c:	790f      	ldrb	r7, [r1, #4]
 801869e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80186a2:	88c9      	ldrh	r1, [r1, #6]
 80186a4:	e7f4      	b.n	8018690 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 80186a6:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80186aa:	b29b      	uxth	r3, r3
 80186ac:	e7c5      	b.n	801863a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 80186ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80186b0:	920a      	str	r2, [sp, #40]	@ 0x28
 80186b2:	4601      	mov	r1, r0
 80186b4:	4662      	mov	r2, ip
 80186b6:	461e      	mov	r6, r3
 80186b8:	e78e      	b.n	80185d8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 80186ba:	1b73      	subs	r3, r6, r5
 80186bc:	eb02 0c05 	add.w	ip, r2, r5
 80186c0:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80186c4:	b29b      	uxth	r3, r3
 80186c6:	fa1f fc8c 	uxth.w	ip, ip
 80186ca:	2500      	movs	r5, #0
 80186cc:	9a08      	ldr	r2, [sp, #32]
 80186ce:	4542      	cmp	r2, r8
 80186d0:	d88d      	bhi.n	80185ee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 80186d2:	4601      	mov	r1, r0
 80186d4:	e74f      	b.n	8018576 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 80186d6:	428e      	cmp	r6, r1
 80186d8:	bf2b      	itete	cs
 80186da:	468e      	movcs	lr, r1
 80186dc:	46b6      	movcc	lr, r6
 80186de:	1a73      	subcs	r3, r6, r1
 80186e0:	1b88      	subcc	r0, r1, r6
 80186e2:	eb02 0c0e 	add.w	ip, r2, lr
 80186e6:	bf2b      	itete	cs
 80186e8:	4628      	movcs	r0, r5
 80186ea:	462b      	movcc	r3, r5
 80186ec:	b29b      	uxthcs	r3, r3
 80186ee:	b280      	uxthcc	r0, r0
 80186f0:	f108 0503 	add.w	r5, r8, #3
 80186f4:	fa1f fc8c 	uxth.w	ip, ip
 80186f8:	4562      	cmp	r2, ip
 80186fa:	d06f      	beq.n	80187dc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 80186fc:	1c57      	adds	r7, r2, #1
 80186fe:	4422      	add	r2, r4
 8018700:	b2bf      	uxth	r7, r7
 8018702:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 8018706:	9713      	str	r7, [sp, #76]	@ 0x4c
 8018708:	2704      	movs	r7, #4
 801870a:	46b9      	mov	r9, r7
 801870c:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801870e:	fb19 7202 	smlabb	r2, r9, r2, r7
 8018712:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018714:	58bf      	ldr	r7, [r7, r2]
 8018716:	0e3a      	lsrs	r2, r7, #24
 8018718:	9209      	str	r2, [sp, #36]	@ 0x24
 801871a:	d016      	beq.n	801874a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801871c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8018720:	fa5f fa87 	uxtb.w	sl, r7
 8018724:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8018728:	fa5f f289 	uxtb.w	r2, r9
 801872c:	9214      	str	r2, [sp, #80]	@ 0x50
 801872e:	b2fa      	uxtb	r2, r7
 8018730:	9215      	str	r2, [sp, #84]	@ 0x54
 8018732:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018734:	2aff      	cmp	r2, #255	@ 0xff
 8018736:	d10b      	bne.n	8018750 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8018738:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801873a:	2aff      	cmp	r2, #255	@ 0xff
 801873c:	d108      	bne.n	8018750 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801873e:	f805 ac03 	strb.w	sl, [r5, #-3]
 8018742:	f805 9c02 	strb.w	r9, [r5, #-2]
 8018746:	f805 7c01 	strb.w	r7, [r5, #-1]
 801874a:	3503      	adds	r5, #3
 801874c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801874e:	e7d3      	b.n	80186f8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 8018750:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8018752:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018754:	437a      	muls	r2, r7
 8018756:	1c57      	adds	r7, r2, #1
 8018758:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801875c:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8018760:	1212      	asrs	r2, r2, #8
 8018762:	fa1f f982 	uxth.w	r9, r2
 8018766:	43d2      	mvns	r2, r2
 8018768:	fb1a fa09 	smulbb	sl, sl, r9
 801876c:	b2d2      	uxtb	r2, r2
 801876e:	fb07 a702 	mla	r7, r7, r2, sl
 8018772:	9209      	str	r2, [sp, #36]	@ 0x24
 8018774:	b2bf      	uxth	r7, r7
 8018776:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018778:	f107 0a01 	add.w	sl, r7, #1
 801877c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8018780:	fb12 fa09 	smulbb	sl, r2, r9
 8018784:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018786:	123f      	asrs	r7, r7, #8
 8018788:	f805 7c03 	strb.w	r7, [r5, #-3]
 801878c:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8018790:	fb07 aa02 	mla	sl, r7, r2, sl
 8018794:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8018796:	fb12 f909 	smulbb	r9, r2, r9
 801879a:	fa1f fa8a 	uxth.w	sl, sl
 801879e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80187a0:	f10a 0701 	add.w	r7, sl, #1
 80187a4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80187a8:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 80187ac:	fb07 9902 	mla	r9, r7, r2, r9
 80187b0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80187b4:	fa1f f989 	uxth.w	r9, r9
 80187b8:	f805 ac02 	strb.w	sl, [r5, #-2]
 80187bc:	f109 0201 	add.w	r2, r9, #1
 80187c0:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80187c4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80187c8:	f805 9c01 	strb.w	r9, [r5, #-1]
 80187cc:	e7bd      	b.n	801874a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 80187ce:	bf00      	nop
 80187d0:	24025158 	.word	0x24025158
 80187d4:	24025152 	.word	0x24025152
 80187d8:	fffff7fb 	.word	0xfffff7fb
 80187dc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80187e0:	428e      	cmp	r6, r1
 80187e2:	44f0      	add	r8, lr
 80187e4:	f4ff af71 	bcc.w	80186ca <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 80187e8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80187ea:	9904      	ldr	r1, [sp, #16]
 80187ec:	8812      	ldrh	r2, [r2, #0]
 80187ee:	1a52      	subs	r2, r2, r1
 80187f0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80187f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80187f6:	4490      	add	r8, r2
 80187f8:	9a07      	ldr	r2, [sp, #28]
 80187fa:	3201      	adds	r2, #1
 80187fc:	428a      	cmp	r2, r1
 80187fe:	9207      	str	r2, [sp, #28]
 8018800:	d111      	bne.n	8018826 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 8018802:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8018806:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801880a:	9b04      	ldr	r3, [sp, #16]
 801880c:	eba5 050c 	sub.w	r5, r5, ip
 8018810:	b2ad      	uxth	r5, r5
 8018812:	2d00      	cmp	r5, #0
 8018814:	bf08      	it	eq
 8018816:	4619      	moveq	r1, r3
 8018818:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801881a:	bf18      	it	ne
 801881c:	2100      	movne	r1, #0
 801881e:	3301      	adds	r3, #1
 8018820:	b289      	uxth	r1, r1
 8018822:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018824:	e69e      	b.n	8018564 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 8018826:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801882a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801882e:	1a2d      	subs	r5, r5, r0
 8018830:	b2ad      	uxth	r5, r5
 8018832:	2d00      	cmp	r5, #0
 8018834:	bf18      	it	ne
 8018836:	2000      	movne	r0, #0
 8018838:	e748      	b.n	80186cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801883a:	4b04      	ldr	r3, [pc, #16]	@ (801884c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801883c:	6818      	ldr	r0, [r3, #0]
 801883e:	6803      	ldr	r3, [r0, #0]
 8018840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018842:	4798      	blx	r3
 8018844:	b01d      	add	sp, #116	@ 0x74
 8018846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801884a:	bf00      	nop
 801884c:	24025158 	.word	0x24025158

08018850 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8018850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018854:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018858:	9c06      	ldr	r4, [sp, #24]
 801885a:	2800      	cmp	r0, #0
 801885c:	d06e      	beq.n	801893c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801885e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8018862:	2d00      	cmp	r5, #0
 8018864:	dd6a      	ble.n	801893c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018866:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801886a:	f1bc 0f00 	cmp.w	ip, #0
 801886e:	dd65      	ble.n	801893c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018870:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8018874:	28ff      	cmp	r0, #255	@ 0xff
 8018876:	f9b3 3000 	ldrsh.w	r3, [r3]
 801887a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801887e:	fb02 3306 	mla	r3, r2, r6, r3
 8018882:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8018886:	b2e4      	uxtb	r4, r4
 8018888:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801888c:	4419      	add	r1, r3
 801888e:	fb02 f30c 	mul.w	r3, r2, ip
 8018892:	eba2 0205 	sub.w	r2, r2, r5
 8018896:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801889a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801889e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80188a2:	440b      	add	r3, r1
 80188a4:	d03e      	beq.n	8018924 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 80188a6:	fa1f fc80 	uxth.w	ip, r0
 80188aa:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 80188ae:	fb06 f60c 	mul.w	r6, r6, ip
 80188b2:	b280      	uxth	r0, r0
 80188b4:	fb07 f70c 	mul.w	r7, r7, ip
 80188b8:	fb04 f40c 	mul.w	r4, r4, ip
 80188bc:	4299      	cmp	r1, r3
 80188be:	d23d      	bcs.n	801893c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80188c0:	eb01 0c05 	add.w	ip, r1, r5
 80188c4:	458c      	cmp	ip, r1
 80188c6:	f101 0e03 	add.w	lr, r1, #3
 80188ca:	d928      	bls.n	801891e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 80188cc:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80188d0:	fb11 f100 	smulbb	r1, r1, r0
 80188d4:	4421      	add	r1, r4
 80188d6:	b289      	uxth	r1, r1
 80188d8:	f101 0801 	add.w	r8, r1, #1
 80188dc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80188e0:	1209      	asrs	r1, r1, #8
 80188e2:	f80e 1c03 	strb.w	r1, [lr, #-3]
 80188e6:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 80188ea:	fb11 f100 	smulbb	r1, r1, r0
 80188ee:	4439      	add	r1, r7
 80188f0:	b289      	uxth	r1, r1
 80188f2:	f101 0801 	add.w	r8, r1, #1
 80188f6:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80188fa:	1209      	asrs	r1, r1, #8
 80188fc:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8018900:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8018904:	fb11 f100 	smulbb	r1, r1, r0
 8018908:	4431      	add	r1, r6
 801890a:	b289      	uxth	r1, r1
 801890c:	f101 0801 	add.w	r8, r1, #1
 8018910:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8018914:	1209      	asrs	r1, r1, #8
 8018916:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801891a:	4671      	mov	r1, lr
 801891c:	e7d2      	b.n	80188c4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801891e:	4411      	add	r1, r2
 8018920:	e7cc      	b.n	80188bc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8018922:	4411      	add	r1, r2
 8018924:	4299      	cmp	r1, r3
 8018926:	d209      	bcs.n	801893c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018928:	1948      	adds	r0, r1, r5
 801892a:	4281      	cmp	r1, r0
 801892c:	d2f9      	bcs.n	8018922 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801892e:	700c      	strb	r4, [r1, #0]
 8018930:	3103      	adds	r1, #3
 8018932:	f801 7c02 	strb.w	r7, [r1, #-2]
 8018936:	f801 6c01 	strb.w	r6, [r1, #-1]
 801893a:	e7f6      	b.n	801892a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801893c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018940 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8018940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018944:	b093      	sub	sp, #76	@ 0x4c
 8018946:	4699      	mov	r9, r3
 8018948:	4617      	mov	r7, r2
 801894a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801894e:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 8018952:	4604      	mov	r4, r0
 8018954:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018958:	a80c      	add	r0, sp, #48	@ 0x30
 801895a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801895e:	460d      	mov	r5, r1
 8018960:	4649      	mov	r1, r9
 8018962:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8018966:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801896a:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801896e:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 8018972:	f7f4 fecd 	bl	800d710 <_ZN8touchgfx4RectaNERKS0_>
 8018976:	4639      	mov	r1, r7
 8018978:	a80c      	add	r0, sp, #48	@ 0x30
 801897a:	f7f4 fec9 	bl	800d710 <_ZN8touchgfx4RectaNERKS0_>
 801897e:	4b78      	ldr	r3, [pc, #480]	@ (8018b60 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8018980:	8818      	ldrh	r0, [r3, #0]
 8018982:	4b78      	ldr	r3, [pc, #480]	@ (8018b64 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8018984:	b202      	sxth	r2, r0
 8018986:	8819      	ldrh	r1, [r3, #0]
 8018988:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801898c:	b20f      	sxth	r7, r1
 801898e:	2b00      	cmp	r3, #0
 8018990:	da07      	bge.n	80189a2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8018992:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 8018996:	4463      	add	r3, ip
 8018998:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801899c:	2300      	movs	r3, #0
 801899e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80189a2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 80189a6:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 80189aa:	1ad2      	subs	r2, r2, r3
 80189ac:	4594      	cmp	ip, r2
 80189ae:	bfc4      	itt	gt
 80189b0:	1ac2      	subgt	r2, r0, r3
 80189b2:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 80189b6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80189ba:	2a00      	cmp	r2, #0
 80189bc:	da07      	bge.n	80189ce <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 80189be:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 80189c2:	4462      	add	r2, ip
 80189c4:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 80189c8:	2200      	movs	r2, #0
 80189ca:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80189ce:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80189d2:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 80189d6:	1abf      	subs	r7, r7, r2
 80189d8:	45bc      	cmp	ip, r7
 80189da:	f8df c190 	ldr.w	ip, [pc, #400]	@ 8018b6c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 80189de:	bfc8      	it	gt
 80189e0:	1a8f      	subgt	r7, r1, r2
 80189e2:	f89c c000 	ldrb.w	ip, [ip]
 80189e6:	bfc8      	it	gt
 80189e8:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 80189ec:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 80189f0:	f1bc 0f00 	cmp.w	ip, #0
 80189f4:	d176      	bne.n	8018ae4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 80189f6:	4287      	cmp	r7, r0
 80189f8:	bf14      	ite	ne
 80189fa:	2100      	movne	r1, #0
 80189fc:	2101      	moveq	r1, #1
 80189fe:	2f00      	cmp	r7, #0
 8018a00:	9107      	str	r1, [sp, #28]
 8018a02:	dd73      	ble.n	8018aec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8018a04:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 8018a08:	2900      	cmp	r1, #0
 8018a0a:	9104      	str	r1, [sp, #16]
 8018a0c:	dd6e      	ble.n	8018aec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8018a0e:	f8b9 1000 	ldrh.w	r1, [r9]
 8018a12:	a80e      	add	r0, sp, #56	@ 0x38
 8018a14:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 8018a18:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8018a1c:	1a5b      	subs	r3, r3, r1
 8018a1e:	a910      	add	r1, sp, #64	@ 0x40
 8018a20:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8018a24:	b21b      	sxth	r3, r3
 8018a26:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 8018a2a:	f8df a144 	ldr.w	sl, [pc, #324]	@ 8018b70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8018a2e:	9305      	str	r3, [sp, #20]
 8018a30:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8018a34:	1ad2      	subs	r2, r2, r3
 8018a36:	b213      	sxth	r3, r2
 8018a38:	9306      	str	r3, [sp, #24]
 8018a3a:	9b05      	ldr	r3, [sp, #20]
 8018a3c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8018a40:	9b06      	ldr	r3, [sp, #24]
 8018a42:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8018a46:	9b04      	ldr	r3, [sp, #16]
 8018a48:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 8018a4c:	2300      	movs	r3, #0
 8018a4e:	9310      	str	r3, [sp, #64]	@ 0x40
 8018a50:	f7f9 fdd4 	bl	80125fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018a54:	4640      	mov	r0, r8
 8018a56:	f7f9 fda9 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018a5a:	a810      	add	r0, sp, #64	@ 0x40
 8018a5c:	f7f9 fda6 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018a60:	4b41      	ldr	r3, [pc, #260]	@ (8018b68 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8018a62:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8018a66:	4628      	mov	r0, r5
 8018a68:	881b      	ldrh	r3, [r3, #0]
 8018a6a:	9308      	str	r3, [sp, #32]
 8018a6c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8018a70:	b21b      	sxth	r3, r3
 8018a72:	9303      	str	r3, [sp, #12]
 8018a74:	682b      	ldr	r3, [r5, #0]
 8018a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a78:	4798      	blx	r3
 8018a7a:	9a03      	ldr	r2, [sp, #12]
 8018a7c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8018a80:	4681      	mov	r9, r0
 8018a82:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8018a86:	fb13 f302 	smulbb	r3, r3, r2
 8018a8a:	2203      	movs	r2, #3
 8018a8c:	f8da 0000 	ldr.w	r0, [sl]
 8018a90:	fb15 3302 	smlabb	r3, r5, r2, r3
 8018a94:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8018a96:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018a98:	441d      	add	r5, r3
 8018a9a:	6803      	ldr	r3, [r0, #0]
 8018a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a9e:	4798      	blx	r3
 8018aa0:	9009      	str	r0, [sp, #36]	@ 0x24
 8018aa2:	f8da 0000 	ldr.w	r0, [sl]
 8018aa6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8018aaa:	6803      	ldr	r3, [r0, #0]
 8018aac:	910a      	str	r1, [sp, #40]	@ 0x28
 8018aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018ab0:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 8018ab4:	4798      	blx	r3
 8018ab6:	f010 0f01 	tst.w	r0, #1
 8018aba:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8018abe:	d01e      	beq.n	8018afe <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8018ac0:	f8da 0000 	ldr.w	r0, [sl]
 8018ac4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8018ac8:	6803      	ldr	r3, [r0, #0]
 8018aca:	9200      	str	r2, [sp, #0]
 8018acc:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8018ace:	462b      	mov	r3, r5
 8018ad0:	e898 0006 	ldmia.w	r8, {r1, r2}
 8018ad4:	47b0      	blx	r6
 8018ad6:	9b05      	ldr	r3, [sp, #20]
 8018ad8:	80a7      	strh	r7, [r4, #4]
 8018ada:	8023      	strh	r3, [r4, #0]
 8018adc:	9b06      	ldr	r3, [sp, #24]
 8018ade:	8063      	strh	r3, [r4, #2]
 8018ae0:	9b04      	ldr	r3, [sp, #16]
 8018ae2:	e007      	b.n	8018af4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8018ae4:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 8018ae8:	4288      	cmp	r0, r1
 8018aea:	e785      	b.n	80189f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8018aec:	2300      	movs	r3, #0
 8018aee:	8023      	strh	r3, [r4, #0]
 8018af0:	8063      	strh	r3, [r4, #2]
 8018af2:	80a3      	strh	r3, [r4, #4]
 8018af4:	4620      	mov	r0, r4
 8018af6:	80e3      	strh	r3, [r4, #6]
 8018af8:	b013      	add	sp, #76	@ 0x4c
 8018afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018afe:	fb09 f606 	mul.w	r6, r9, r6
 8018b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b04:	fb11 6602 	smlabb	r6, r1, r2, r6
 8018b08:	9a07      	ldr	r2, [sp, #28]
 8018b0a:	4433      	add	r3, r6
 8018b0c:	461e      	mov	r6, r3
 8018b0e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8018b12:	b16a      	cbz	r2, 8018b30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8018b14:	9a08      	ldr	r2, [sp, #32]
 8018b16:	4593      	cmp	fp, r2
 8018b18:	d10a      	bne.n	8018b30 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8018b1a:	f8da 0000 	ldr.w	r0, [sl]
 8018b1e:	fb09 f303 	mul.w	r3, r9, r3
 8018b22:	4629      	mov	r1, r5
 8018b24:	6802      	ldr	r2, [r0, #0]
 8018b26:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8018b2a:	4632      	mov	r2, r6
 8018b2c:	47d0      	blx	sl
 8018b2e:	e7d2      	b.n	8018ad6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8018b30:	9a03      	ldr	r2, [sp, #12]
 8018b32:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8018b70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8018b36:	fb02 5803 	mla	r8, r2, r3, r5
 8018b3a:	4545      	cmp	r5, r8
 8018b3c:	d2cb      	bcs.n	8018ad6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8018b3e:	f8db 0000 	ldr.w	r0, [fp]
 8018b42:	4629      	mov	r1, r5
 8018b44:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8018b48:	6802      	ldr	r2, [r0, #0]
 8018b4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018b4e:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8018b52:	4632      	mov	r2, r6
 8018b54:	47d0      	blx	sl
 8018b56:	9b03      	ldr	r3, [sp, #12]
 8018b58:	444e      	add	r6, r9
 8018b5a:	441d      	add	r5, r3
 8018b5c:	e7ed      	b.n	8018b3a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8018b5e:	bf00      	nop
 8018b60:	2402514c 	.word	0x2402514c
 8018b64:	2402514e 	.word	0x2402514e
 8018b68:	24025152 	.word	0x24025152
 8018b6c:	24025150 	.word	0x24025150
 8018b70:	24025158 	.word	0x24025158

08018b74 <_ZN8touchgfx8LCD24bppC1Ev>:
 8018b74:	2200      	movs	r2, #0
 8018b76:	490e      	ldr	r1, [pc, #56]	@ (8018bb0 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 8018b78:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8018b7c:	6001      	str	r1, [r0, #0]
 8018b7e:	6642      	str	r2, [r0, #100]	@ 0x64
 8018b80:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8018b84:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8018b88:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8018b8c:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8018b90:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8018b94:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8018b98:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8018b9c:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8018ba0:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8018ba4:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8018ba8:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8018bac:	4770      	bx	lr
 8018bae:	bf00      	nop
 8018bb0:	0802409c 	.word	0x0802409c

08018bb4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8018bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bb8:	b091      	sub	sp, #68	@ 0x44
 8018bba:	4607      	mov	r7, r0
 8018bbc:	4688      	mov	r8, r1
 8018bbe:	6810      	ldr	r0, [r2, #0]
 8018bc0:	6851      	ldr	r1, [r2, #4]
 8018bc2:	ac0c      	add	r4, sp, #48	@ 0x30
 8018bc4:	4616      	mov	r6, r2
 8018bc6:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 8018bca:	4d64      	ldr	r5, [pc, #400]	@ (8018d5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8018bcc:	f8df a190 	ldr.w	sl, [pc, #400]	@ 8018d60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8018bd0:	c403      	stmia	r4!, {r0, r1}
 8018bd2:	6818      	ldr	r0, [r3, #0]
 8018bd4:	ac0e      	add	r4, sp, #56	@ 0x38
 8018bd6:	6859      	ldr	r1, [r3, #4]
 8018bd8:	c403      	stmia	r4!, {r0, r1}
 8018bda:	a80c      	add	r0, sp, #48	@ 0x30
 8018bdc:	f7f9 fce6 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018be0:	4631      	mov	r1, r6
 8018be2:	a80e      	add	r0, sp, #56	@ 0x38
 8018be4:	f7f9 fd0a 	bl	80125fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018be8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8018bec:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8018bf0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8018bf4:	6828      	ldr	r0, [r5, #0]
 8018bf6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018bfa:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 8018bfe:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 8018c02:	440f      	add	r7, r1
 8018c04:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8018c08:	440a      	add	r2, r1
 8018c0a:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8018c0e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8018c12:	4413      	add	r3, r2
 8018c14:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8018c18:	6803      	ldr	r3, [r0, #0]
 8018c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018c1c:	4798      	blx	r3
 8018c1e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8018c22:	6828      	ldr	r0, [r5, #0]
 8018c24:	d01f      	beq.n	8018c66 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8018c26:	2201      	movs	r2, #1
 8018c28:	2500      	movs	r5, #0
 8018c2a:	6801      	ldr	r1, [r0, #0]
 8018c2c:	b2a4      	uxth	r4, r4
 8018c2e:	b2b6      	uxth	r6, r6
 8018c30:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8018c34:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8018c38:	250b      	movs	r5, #11
 8018c3a:	9507      	str	r5, [sp, #28]
 8018c3c:	f8ba 5000 	ldrh.w	r5, [sl]
 8018c40:	f8cd 9010 	str.w	r9, [sp, #16]
 8018c44:	9602      	str	r6, [sp, #8]
 8018c46:	9401      	str	r4, [sp, #4]
 8018c48:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8018c4c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8018c50:	9203      	str	r2, [sp, #12]
 8018c52:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8018c56:	9200      	str	r2, [sp, #0]
 8018c58:	4642      	mov	r2, r8
 8018c5a:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8018c5c:	4639      	mov	r1, r7
 8018c5e:	47a0      	blx	r4
 8018c60:	b011      	add	sp, #68	@ 0x44
 8018c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c66:	6803      	ldr	r3, [r0, #0]
 8018c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c6a:	4798      	blx	r3
 8018c6c:	f8ba 5000 	ldrh.w	r5, [sl]
 8018c70:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8018c74:	f04f 0e04 	mov.w	lr, #4
 8018c78:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8018c7c:	436e      	muls	r6, r5
 8018c7e:	fb05 2303 	mla	r3, r5, r3, r2
 8018c82:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018c86:	1b2d      	subs	r5, r5, r4
 8018c88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018c8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018c90:	4418      	add	r0, r3
 8018c92:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8018c96:	1982      	adds	r2, r0, r6
 8018c98:	1b1b      	subs	r3, r3, r4
 8018c9a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018c9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018ca0:	4290      	cmp	r0, r2
 8018ca2:	d254      	bcs.n	8018d4e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8018ca4:	eb00 0a04 	add.w	sl, r0, r4
 8018ca8:	4550      	cmp	r0, sl
 8018caa:	d24c      	bcs.n	8018d46 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8018cac:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018cb0:	fb1e e101 	smlabb	r1, lr, r1, lr
 8018cb4:	eb08 0c01 	add.w	ip, r8, r1
 8018cb8:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8018cbc:	b173      	cbz	r3, 8018cdc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8018cbe:	2bff      	cmp	r3, #255	@ 0xff
 8018cc0:	f818 b001 	ldrb.w	fp, [r8, r1]
 8018cc4:	d10c      	bne.n	8018ce0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8018cc6:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8018cca:	d109      	bne.n	8018ce0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8018ccc:	f880 b000 	strb.w	fp, [r0]
 8018cd0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8018cd4:	7043      	strb	r3, [r0, #1]
 8018cd6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8018cda:	7083      	strb	r3, [r0, #2]
 8018cdc:	3003      	adds	r0, #3
 8018cde:	e7e3      	b.n	8018ca8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8018ce0:	fb09 f103 	mul.w	r1, r9, r3
 8018ce4:	1c4b      	adds	r3, r1, #1
 8018ce6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8018cea:	7801      	ldrb	r1, [r0, #0]
 8018cec:	121b      	asrs	r3, r3, #8
 8018cee:	b29e      	uxth	r6, r3
 8018cf0:	43db      	mvns	r3, r3
 8018cf2:	fb1b fb06 	smulbb	fp, fp, r6
 8018cf6:	b2db      	uxtb	r3, r3
 8018cf8:	fb01 b103 	mla	r1, r1, r3, fp
 8018cfc:	b289      	uxth	r1, r1
 8018cfe:	f101 0b01 	add.w	fp, r1, #1
 8018d02:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8018d06:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018d0a:	fb1b fb03 	smulbb	fp, fp, r3
 8018d0e:	1209      	asrs	r1, r1, #8
 8018d10:	7001      	strb	r1, [r0, #0]
 8018d12:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8018d16:	fb01 b106 	mla	r1, r1, r6, fp
 8018d1a:	b289      	uxth	r1, r1
 8018d1c:	f101 0b01 	add.w	fp, r1, #1
 8018d20:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8018d24:	1209      	asrs	r1, r1, #8
 8018d26:	7041      	strb	r1, [r0, #1]
 8018d28:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8018d2c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8018d30:	fb1c f303 	smulbb	r3, ip, r3
 8018d34:	fb01 3606 	mla	r6, r1, r6, r3
 8018d38:	b2b6      	uxth	r6, r6
 8018d3a:	1c73      	adds	r3, r6, #1
 8018d3c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8018d40:	1236      	asrs	r6, r6, #8
 8018d42:	7086      	strb	r6, [r0, #2]
 8018d44:	e7ca      	b.n	8018cdc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8018d46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018d48:	4428      	add	r0, r5
 8018d4a:	441f      	add	r7, r3
 8018d4c:	e7a8      	b.n	8018ca0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8018d4e:	4b03      	ldr	r3, [pc, #12]	@ (8018d5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8018d50:	6818      	ldr	r0, [r3, #0]
 8018d52:	6803      	ldr	r3, [r0, #0]
 8018d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d56:	4798      	blx	r3
 8018d58:	e782      	b.n	8018c60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8018d5a:	bf00      	nop
 8018d5c:	24025158 	.word	0x24025158
 8018d60:	24025152 	.word	0x24025152

08018d64 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8018d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d68:	b091      	sub	sp, #68	@ 0x44
 8018d6a:	4680      	mov	r8, r0
 8018d6c:	460e      	mov	r6, r1
 8018d6e:	6810      	ldr	r0, [r2, #0]
 8018d70:	6851      	ldr	r1, [r2, #4]
 8018d72:	ad0c      	add	r5, sp, #48	@ 0x30
 8018d74:	4614      	mov	r4, r2
 8018d76:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 8018d7a:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 8018f14 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8018d7e:	f8df a198 	ldr.w	sl, [pc, #408]	@ 8018f18 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8018d82:	c503      	stmia	r5!, {r0, r1}
 8018d84:	6818      	ldr	r0, [r3, #0]
 8018d86:	ad0e      	add	r5, sp, #56	@ 0x38
 8018d88:	6859      	ldr	r1, [r3, #4]
 8018d8a:	c503      	stmia	r5!, {r0, r1}
 8018d8c:	a80c      	add	r0, sp, #48	@ 0x30
 8018d8e:	f7f9 fc0d 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018d92:	4621      	mov	r1, r4
 8018d94:	a80e      	add	r0, sp, #56	@ 0x38
 8018d96:	f7f9 fc31 	bl	80125fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018d9a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8018d9e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8018da2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8018da6:	f8d9 0000 	ldr.w	r0, [r9]
 8018daa:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018dae:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8018db2:	eb08 0401 	add.w	r4, r8, r1
 8018db6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8018dba:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8018dbe:	440a      	add	r2, r1
 8018dc0:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8018dc4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8018dc8:	4413      	add	r3, r2
 8018dca:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8018dce:	6803      	ldr	r3, [r0, #0]
 8018dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018dd2:	4798      	blx	r3
 8018dd4:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8018dd8:	f8d9 0000 	ldr.w	r0, [r9]
 8018ddc:	d022      	beq.n	8018e24 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8018dde:	2200      	movs	r2, #0
 8018de0:	f04f 0c01 	mov.w	ip, #1
 8018de4:	6801      	ldr	r1, [r0, #0]
 8018de6:	b2ad      	uxth	r5, r5
 8018de8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8018dec:	e9cd c208 	strd	ip, r2, [sp, #32]
 8018df0:	f04f 0c0b 	mov.w	ip, #11
 8018df4:	f8cd c01c 	str.w	ip, [sp, #28]
 8018df8:	f8ba c000 	ldrh.w	ip, [sl]
 8018dfc:	9704      	str	r7, [sp, #16]
 8018dfe:	9502      	str	r5, [sp, #8]
 8018e00:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8018e04:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8018e08:	9203      	str	r2, [sp, #12]
 8018e0a:	fa1f f288 	uxth.w	r2, r8
 8018e0e:	9201      	str	r2, [sp, #4]
 8018e10:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8018e14:	9200      	str	r2, [sp, #0]
 8018e16:	4632      	mov	r2, r6
 8018e18:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8018e1a:	4621      	mov	r1, r4
 8018e1c:	47a8      	blx	r5
 8018e1e:	b011      	add	sp, #68	@ 0x44
 8018e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e24:	6803      	ldr	r3, [r0, #0]
 8018e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018e28:	4798      	blx	r3
 8018e2a:	f8ba 2000 	ldrh.w	r2, [sl]
 8018e2e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8018e32:	f04f 0e03 	mov.w	lr, #3
 8018e36:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8018e3a:	4355      	muls	r5, r2
 8018e3c:	fa1f fc87 	uxth.w	ip, r7
 8018e40:	fb02 1303 	mla	r3, r2, r3, r1
 8018e44:	eba2 0208 	sub.w	r2, r2, r8
 8018e48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018e50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018e54:	4418      	add	r0, r3
 8018e56:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018e58:	1943      	adds	r3, r0, r5
 8018e5a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8018e5e:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 8018e62:	eba2 0208 	sub.w	r2, r2, r8
 8018e66:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018e6a:	b2ad      	uxth	r5, r5
 8018e6c:	4298      	cmp	r0, r3
 8018e6e:	d24a      	bcs.n	8018f06 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8018e70:	eb00 0908 	add.w	r9, r0, r8
 8018e74:	4621      	mov	r1, r4
 8018e76:	4548      	cmp	r0, r9
 8018e78:	460c      	mov	r4, r1
 8018e7a:	d240      	bcs.n	8018efe <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8018e7c:	f04f 0a04 	mov.w	sl, #4
 8018e80:	7824      	ldrb	r4, [r4, #0]
 8018e82:	2fff      	cmp	r7, #255	@ 0xff
 8018e84:	f101 0101 	add.w	r1, r1, #1
 8018e88:	fb1e a404 	smlabb	r4, lr, r4, sl
 8018e8c:	eb06 0a04 	add.w	sl, r6, r4
 8018e90:	f816 b004 	ldrb.w	fp, [r6, r4]
 8018e94:	d02b      	beq.n	8018eee <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8018e96:	7804      	ldrb	r4, [r0, #0]
 8018e98:	fb14 f405 	smulbb	r4, r4, r5
 8018e9c:	fb0b 440c 	mla	r4, fp, ip, r4
 8018ea0:	b2a4      	uxth	r4, r4
 8018ea2:	f104 0b01 	add.w	fp, r4, #1
 8018ea6:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8018eaa:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018eae:	fb1b fb05 	smulbb	fp, fp, r5
 8018eb2:	1224      	asrs	r4, r4, #8
 8018eb4:	7004      	strb	r4, [r0, #0]
 8018eb6:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8018eba:	fb04 b40c 	mla	r4, r4, ip, fp
 8018ebe:	b2a4      	uxth	r4, r4
 8018ec0:	f104 0b01 	add.w	fp, r4, #1
 8018ec4:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8018ec8:	1224      	asrs	r4, r4, #8
 8018eca:	7044      	strb	r4, [r0, #1]
 8018ecc:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8018ed0:	f890 a002 	ldrb.w	sl, [r0, #2]
 8018ed4:	fb1a fa05 	smulbb	sl, sl, r5
 8018ed8:	fb04 a40c 	mla	r4, r4, ip, sl
 8018edc:	b2a4      	uxth	r4, r4
 8018ede:	f104 0a01 	add.w	sl, r4, #1
 8018ee2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8018ee6:	1224      	asrs	r4, r4, #8
 8018ee8:	7084      	strb	r4, [r0, #2]
 8018eea:	3003      	adds	r0, #3
 8018eec:	e7c3      	b.n	8018e76 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8018eee:	f880 b000 	strb.w	fp, [r0]
 8018ef2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8018ef6:	7044      	strb	r4, [r0, #1]
 8018ef8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8018efc:	e7f4      	b.n	8018ee8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8018efe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8018f00:	4420      	add	r0, r4
 8018f02:	188c      	adds	r4, r1, r2
 8018f04:	e7b2      	b.n	8018e6c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8018f06:	4b03      	ldr	r3, [pc, #12]	@ (8018f14 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8018f08:	6818      	ldr	r0, [r3, #0]
 8018f0a:	6803      	ldr	r3, [r0, #0]
 8018f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018f0e:	4798      	blx	r3
 8018f10:	e785      	b.n	8018e1e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8018f12:	bf00      	nop
 8018f14:	24025158 	.word	0x24025158
 8018f18:	24025152 	.word	0x24025152

08018f1c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8018f1c:	b4f0      	push	{r4, r5, r6, r7}
 8018f1e:	460c      	mov	r4, r1
 8018f20:	4611      	mov	r1, r2
 8018f22:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8018f26:	461a      	mov	r2, r3
 8018f28:	780f      	ldrb	r7, [r1, #0]
 8018f2a:	9b04      	ldr	r3, [sp, #16]
 8018f2c:	784e      	ldrb	r6, [r1, #1]
 8018f2e:	b11f      	cbz	r7, 8018f38 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 8018f30:	2f01      	cmp	r7, #1
 8018f32:	d01d      	beq.n	8018f70 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8018f34:	bcf0      	pop	{r4, r5, r6, r7}
 8018f36:	4770      	bx	lr
 8018f38:	2e03      	cmp	r6, #3
 8018f3a:	d8fb      	bhi.n	8018f34 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8018f3c:	e8df f006 	tbb	[pc, r6]
 8018f40:	16140702 	.word	0x16140702
 8018f44:	9504      	str	r5, [sp, #16]
 8018f46:	4620      	mov	r0, r4
 8018f48:	bcf0      	pop	{r4, r5, r6, r7}
 8018f4a:	f7ff be33 	b.w	8018bb4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8018f4e:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8018f50:	2800      	cmp	r0, #0
 8018f52:	d0ef      	beq.n	8018f34 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8018f54:	6806      	ldr	r6, [r0, #0]
 8018f56:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8018f5a:	68f5      	ldr	r5, [r6, #12]
 8018f5c:	4613      	mov	r3, r2
 8018f5e:	46ac      	mov	ip, r5
 8018f60:	460a      	mov	r2, r1
 8018f62:	4621      	mov	r1, r4
 8018f64:	bcf0      	pop	{r4, r5, r6, r7}
 8018f66:	4760      	bx	ip
 8018f68:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8018f6a:	e7f1      	b.n	8018f50 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8018f6c:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8018f6e:	e7ef      	b.n	8018f50 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8018f70:	2e03      	cmp	r6, #3
 8018f72:	d8df      	bhi.n	8018f34 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8018f74:	e8df f006 	tbb	[pc, r6]
 8018f78:	110f0702 	.word	0x110f0702
 8018f7c:	9504      	str	r5, [sp, #16]
 8018f7e:	4620      	mov	r0, r4
 8018f80:	bcf0      	pop	{r4, r5, r6, r7}
 8018f82:	f7ff beef 	b.w	8018d64 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8018f86:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8018f88:	2800      	cmp	r0, #0
 8018f8a:	d0d3      	beq.n	8018f34 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8018f8c:	6806      	ldr	r6, [r0, #0]
 8018f8e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8018f92:	68b5      	ldr	r5, [r6, #8]
 8018f94:	e7e2      	b.n	8018f5c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8018f96:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8018f98:	e7f6      	b.n	8018f88 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 8018f9a:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8018f9c:	e7f4      	b.n	8018f88 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

08018fa0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8018fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018fa4:	4605      	mov	r5, r0
 8018fa6:	b08f      	sub	sp, #60	@ 0x3c
 8018fa8:	460c      	mov	r4, r1
 8018faa:	461f      	mov	r7, r3
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d052      	beq.n	8019056 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8018fb0:	6808      	ldr	r0, [r1, #0]
 8018fb2:	ab0a      	add	r3, sp, #40	@ 0x28
 8018fb4:	6849      	ldr	r1, [r1, #4]
 8018fb6:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 8019180 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8018fba:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 8019184 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8018fbe:	c303      	stmia	r3!, {r0, r1}
 8018fc0:	6810      	ldr	r0, [r2, #0]
 8018fc2:	ab0c      	add	r3, sp, #48	@ 0x30
 8018fc4:	6851      	ldr	r1, [r2, #4]
 8018fc6:	c303      	stmia	r3!, {r0, r1}
 8018fc8:	a80a      	add	r0, sp, #40	@ 0x28
 8018fca:	f7f9 faef 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018fce:	4621      	mov	r1, r4
 8018fd0:	a80c      	add	r0, sp, #48	@ 0x30
 8018fd2:	f7f9 fb13 	bl	80125fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018fd6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8018fda:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8018fde:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8018fe2:	f8d8 0000 	ldr.w	r0, [r8]
 8018fe6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018fea:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 8018fee:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 8018ff2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8018ff6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8018ffa:	440a      	add	r2, r1
 8018ffc:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8019000:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8019004:	4413      	add	r3, r2
 8019006:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801900a:	6803      	ldr	r3, [r0, #0]
 801900c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801900e:	4798      	blx	r3
 8019010:	2fff      	cmp	r7, #255	@ 0xff
 8019012:	d023      	beq.n	801905c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8019014:	f010 0f04 	tst.w	r0, #4
 8019018:	f8d8 0000 	ldr.w	r0, [r8]
 801901c:	d021      	beq.n	8019062 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801901e:	2100      	movs	r1, #0
 8019020:	f04f 0e01 	mov.w	lr, #1
 8019024:	f8d0 c000 	ldr.w	ip, [r0]
 8019028:	b2a4      	uxth	r4, r4
 801902a:	9106      	str	r1, [sp, #24]
 801902c:	b2b6      	uxth	r6, r6
 801902e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8019032:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8019036:	e9cd e107 	strd	lr, r1, [sp, #28]
 801903a:	f8b9 e000 	ldrh.w	lr, [r9]
 801903e:	9703      	str	r7, [sp, #12]
 8019040:	9401      	str	r4, [sp, #4]
 8019042:	9600      	str	r6, [sp, #0]
 8019044:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8019048:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801904c:	9102      	str	r1, [sp, #8]
 801904e:	4629      	mov	r1, r5
 8019050:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 8019054:	47a0      	blx	r4
 8019056:	b00f      	add	sp, #60	@ 0x3c
 8019058:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801905c:	f010 0f01 	tst.w	r0, #1
 8019060:	e7da      	b.n	8019018 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8019062:	6803      	ldr	r3, [r0, #0]
 8019064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019066:	4798      	blx	r3
 8019068:	f8b9 1000 	ldrh.w	r1, [r9]
 801906c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8019070:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8019074:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8019078:	434c      	muls	r4, r1
 801907a:	2fff      	cmp	r7, #255	@ 0xff
 801907c:	fb01 2303 	mla	r3, r1, r3, r2
 8019080:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019084:	eba1 0106 	sub.w	r1, r1, r6
 8019088:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801908c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019090:	4418      	add	r0, r3
 8019092:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8019096:	eba3 0606 	sub.w	r6, r3, r6
 801909a:	4404      	add	r4, r0
 801909c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80190a0:	d04a      	beq.n	8019138 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 80190a2:	43fa      	mvns	r2, r7
 80190a4:	b2bb      	uxth	r3, r7
 80190a6:	b2d7      	uxtb	r7, r2
 80190a8:	42a0      	cmp	r0, r4
 80190aa:	d263      	bcs.n	8019174 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80190ac:	eb00 0e0c 	add.w	lr, r0, ip
 80190b0:	4586      	cmp	lr, r0
 80190b2:	f100 0803 	add.w	r8, r0, #3
 80190b6:	d93a      	bls.n	801912e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80190b8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80190bc:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80190c0:	00d0      	lsls	r0, r2, #3
 80190c2:	fb19 f907 	smulbb	r9, r9, r7
 80190c6:	b2c0      	uxtb	r0, r0
 80190c8:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80190cc:	fb00 9003 	mla	r0, r0, r3, r9
 80190d0:	b280      	uxth	r0, r0
 80190d2:	f100 0901 	add.w	r9, r0, #1
 80190d6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80190da:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 80190de:	fb19 f907 	smulbb	r9, r9, r7
 80190e2:	1200      	asrs	r0, r0, #8
 80190e4:	f808 0c03 	strb.w	r0, [r8, #-3]
 80190e8:	10d0      	asrs	r0, r2, #3
 80190ea:	1212      	asrs	r2, r2, #8
 80190ec:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80190f0:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80190f4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80190f8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80190fc:	fb00 9003 	mla	r0, r0, r3, r9
 8019100:	b280      	uxth	r0, r0
 8019102:	f100 0901 	add.w	r9, r0, #1
 8019106:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801910a:	1200      	asrs	r0, r0, #8
 801910c:	f808 0c02 	strb.w	r0, [r8, #-2]
 8019110:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8019114:	fb10 f007 	smulbb	r0, r0, r7
 8019118:	fb02 0203 	mla	r2, r2, r3, r0
 801911c:	b292      	uxth	r2, r2
 801911e:	1c50      	adds	r0, r2, #1
 8019120:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019124:	4640      	mov	r0, r8
 8019126:	1212      	asrs	r2, r2, #8
 8019128:	f808 2c01 	strb.w	r2, [r8, #-1]
 801912c:	e7c0      	b.n	80190b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801912e:	4408      	add	r0, r1
 8019130:	4435      	add	r5, r6
 8019132:	e7b9      	b.n	80190a8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8019134:	4408      	add	r0, r1
 8019136:	4435      	add	r5, r6
 8019138:	42a0      	cmp	r0, r4
 801913a:	d21b      	bcs.n	8019174 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801913c:	eb00 070c 	add.w	r7, r0, ip
 8019140:	42b8      	cmp	r0, r7
 8019142:	d2f7      	bcs.n	8019134 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8019144:	f835 3b02 	ldrh.w	r3, [r5], #2
 8019148:	3003      	adds	r0, #3
 801914a:	00da      	lsls	r2, r3, #3
 801914c:	b2d2      	uxtb	r2, r2
 801914e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019152:	f800 2c03 	strb.w	r2, [r0, #-3]
 8019156:	10da      	asrs	r2, r3, #3
 8019158:	121b      	asrs	r3, r3, #8
 801915a:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801915e:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8019162:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8019166:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801916a:	f800 2c02 	strb.w	r2, [r0, #-2]
 801916e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8019172:	e7e5      	b.n	8019140 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8019174:	4b02      	ldr	r3, [pc, #8]	@ (8019180 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8019176:	6818      	ldr	r0, [r3, #0]
 8019178:	6803      	ldr	r3, [r0, #0]
 801917a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801917c:	4798      	blx	r3
 801917e:	e76a      	b.n	8019056 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8019180:	24025158 	.word	0x24025158
 8019184:	24025152 	.word	0x24025152

08019188 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8019188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801918c:	b08a      	sub	sp, #40	@ 0x28
 801918e:	460d      	mov	r5, r1
 8019190:	4604      	mov	r4, r0
 8019192:	461e      	mov	r6, r3
 8019194:	6808      	ldr	r0, [r1, #0]
 8019196:	ab06      	add	r3, sp, #24
 8019198:	6849      	ldr	r1, [r1, #4]
 801919a:	4f5d      	ldr	r7, [pc, #372]	@ (8019310 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801919c:	c303      	stmia	r3!, {r0, r1}
 801919e:	6810      	ldr	r0, [r2, #0]
 80191a0:	ab08      	add	r3, sp, #32
 80191a2:	6851      	ldr	r1, [r2, #4]
 80191a4:	c303      	stmia	r3!, {r0, r1}
 80191a6:	a806      	add	r0, sp, #24
 80191a8:	f7f9 fa00 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80191ac:	4629      	mov	r1, r5
 80191ae:	a808      	add	r0, sp, #32
 80191b0:	f7f9 fa24 	bl	80125fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80191b4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80191b8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80191bc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80191c0:	6838      	ldr	r0, [r7, #0]
 80191c2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80191c6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 80191ca:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 80191ce:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80191d2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80191d6:	440a      	add	r2, r1
 80191d8:	f8ad 2020 	strh.w	r2, [sp, #32]
 80191dc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80191e0:	4413      	add	r3, r2
 80191e2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80191e6:	6803      	ldr	r3, [r0, #0]
 80191e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191ea:	4798      	blx	r3
 80191ec:	2eff      	cmp	r6, #255	@ 0xff
 80191ee:	d119      	bne.n	8019224 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80191f0:	f010 0f20 	tst.w	r0, #32
 80191f4:	6838      	ldr	r0, [r7, #0]
 80191f6:	d018      	beq.n	801922a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80191f8:	b2ad      	uxth	r5, r5
 80191fa:	2700      	movs	r7, #0
 80191fc:	6801      	ldr	r1, [r0, #0]
 80191fe:	9501      	str	r5, [sp, #4]
 8019200:	fa1f f588 	uxth.w	r5, r8
 8019204:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8019208:	9500      	str	r5, [sp, #0]
 801920a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801920e:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8019212:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8019216:	9602      	str	r6, [sp, #8]
 8019218:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801921a:	4621      	mov	r1, r4
 801921c:	47a8      	blx	r5
 801921e:	b00a      	add	sp, #40	@ 0x28
 8019220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019224:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8019228:	e7e4      	b.n	80191f4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801922a:	6803      	ldr	r3, [r0, #0]
 801922c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801922e:	4798      	blx	r3
 8019230:	4b38      	ldr	r3, [pc, #224]	@ (8019314 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8019232:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019236:	f8b3 c000 	ldrh.w	ip, [r3]
 801923a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801923e:	fb0c f505 	mul.w	r5, ip, r5
 8019242:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8019246:	fb0c 2303 	mla	r3, ip, r3, r2
 801924a:	ebac 0c08 	sub.w	ip, ip, r8
 801924e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019252:	ebae 0e08 	sub.w	lr, lr, r8
 8019256:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801925a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801925e:	4418      	add	r0, r3
 8019260:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8019264:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8019268:	4405      	add	r5, r0
 801926a:	42a8      	cmp	r0, r5
 801926c:	d24a      	bcs.n	8019304 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801926e:	eb00 0803 	add.w	r8, r0, r3
 8019272:	4540      	cmp	r0, r8
 8019274:	d243      	bcs.n	80192fe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8019276:	78e2      	ldrb	r2, [r4, #3]
 8019278:	b15a      	cbz	r2, 8019292 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801927a:	2aff      	cmp	r2, #255	@ 0xff
 801927c:	f894 9000 	ldrb.w	r9, [r4]
 8019280:	d10a      	bne.n	8019298 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8019282:	2eff      	cmp	r6, #255	@ 0xff
 8019284:	d108      	bne.n	8019298 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8019286:	f880 9000 	strb.w	r9, [r0]
 801928a:	7862      	ldrb	r2, [r4, #1]
 801928c:	7042      	strb	r2, [r0, #1]
 801928e:	78a2      	ldrb	r2, [r4, #2]
 8019290:	7082      	strb	r2, [r0, #2]
 8019292:	3003      	adds	r0, #3
 8019294:	3404      	adds	r4, #4
 8019296:	e7ec      	b.n	8019272 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8019298:	4372      	muls	r2, r6
 801929a:	1c51      	adds	r1, r2, #1
 801929c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80192a0:	1209      	asrs	r1, r1, #8
 80192a2:	fa1f fa81 	uxth.w	sl, r1
 80192a6:	43c9      	mvns	r1, r1
 80192a8:	fb19 f90a 	smulbb	r9, r9, sl
 80192ac:	b2ca      	uxtb	r2, r1
 80192ae:	7801      	ldrb	r1, [r0, #0]
 80192b0:	fb01 9902 	mla	r9, r1, r2, r9
 80192b4:	fa1f f989 	uxth.w	r9, r9
 80192b8:	f109 0101 	add.w	r1, r9, #1
 80192bc:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80192c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80192c4:	f880 9000 	strb.w	r9, [r0]
 80192c8:	f890 9001 	ldrb.w	r9, [r0, #1]
 80192cc:	7861      	ldrb	r1, [r4, #1]
 80192ce:	fb19 f902 	smulbb	r9, r9, r2
 80192d2:	fb01 910a 	mla	r1, r1, sl, r9
 80192d6:	b289      	uxth	r1, r1
 80192d8:	f101 0901 	add.w	r9, r1, #1
 80192dc:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 80192e0:	1209      	asrs	r1, r1, #8
 80192e2:	7041      	strb	r1, [r0, #1]
 80192e4:	7881      	ldrb	r1, [r0, #2]
 80192e6:	f894 9002 	ldrb.w	r9, [r4, #2]
 80192ea:	fb11 f202 	smulbb	r2, r1, r2
 80192ee:	fb09 220a 	mla	r2, r9, sl, r2
 80192f2:	b292      	uxth	r2, r2
 80192f4:	1c51      	adds	r1, r2, #1
 80192f6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80192fa:	1212      	asrs	r2, r2, #8
 80192fc:	e7c8      	b.n	8019290 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 80192fe:	4460      	add	r0, ip
 8019300:	4474      	add	r4, lr
 8019302:	e7b2      	b.n	801926a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8019304:	6838      	ldr	r0, [r7, #0]
 8019306:	6803      	ldr	r3, [r0, #0]
 8019308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801930a:	4798      	blx	r3
 801930c:	e787      	b.n	801921e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801930e:	bf00      	nop
 8019310:	24025158 	.word	0x24025158
 8019314:	24025152 	.word	0x24025152

08019318 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8019318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801931c:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8019320:	4607      	mov	r7, r0
 8019322:	460c      	mov	r4, r1
 8019324:	4692      	mov	sl, r2
 8019326:	4699      	mov	r9, r3
 8019328:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801932a:	b31d      	cbz	r5, 8019374 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801932c:	4608      	mov	r0, r1
 801932e:	f7fc fb81 	bl	8015a34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019332:	4680      	mov	r8, r0
 8019334:	4620      	mov	r0, r4
 8019336:	f7fc fbb1 	bl	8015a9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801933a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801933e:	4620      	mov	r0, r4
 8019340:	f8ad a008 	strh.w	sl, [sp, #8]
 8019344:	f8ad 900a 	strh.w	r9, [sp, #10]
 8019348:	f8ad 800c 	strh.w	r8, [sp, #12]
 801934c:	f7fc fcb0 	bl	8015cb0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019350:	280b      	cmp	r0, #11
 8019352:	d80f      	bhi.n	8019374 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8019354:	e8df f000 	tbb	[pc, r0]
 8019358:	0e062a21 	.word	0x0e062a21
 801935c:	0e0e0e0e 	.word	0x0e0e0e0e
 8019360:	110e0e0e 	.word	0x110e0e0e
 8019364:	4620      	mov	r0, r4
 8019366:	f7fc fc1f 	bl	8015ba8 <_ZNK8touchgfx6Bitmap7getDataEv>
 801936a:	462b      	mov	r3, r5
 801936c:	4632      	mov	r2, r6
 801936e:	a902      	add	r1, sp, #8
 8019370:	f7ff ff0a 	bl	8019188 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019374:	b004      	add	sp, #16
 8019376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801937a:	4620      	mov	r0, r4
 801937c:	f7fc fc14 	bl	8015ba8 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019380:	4680      	mov	r8, r0
 8019382:	4620      	mov	r0, r4
 8019384:	f7fc fc40 	bl	8015c08 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8019388:	ab02      	add	r3, sp, #8
 801938a:	4602      	mov	r2, r0
 801938c:	4641      	mov	r1, r8
 801938e:	4638      	mov	r0, r7
 8019390:	e9cd 6500 	strd	r6, r5, [sp]
 8019394:	f7ff fdc2 	bl	8018f1c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8019398:	e7ec      	b.n	8019374 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801939a:	4620      	mov	r0, r4
 801939c:	f7fc fc04 	bl	8015ba8 <_ZNK8touchgfx6Bitmap7getDataEv>
 80193a0:	462b      	mov	r3, r5
 80193a2:	4632      	mov	r2, r6
 80193a4:	a902      	add	r1, sp, #8
 80193a6:	f7ff fdfb 	bl	8018fa0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80193aa:	e7e3      	b.n	8019374 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80193ac:	683b      	ldr	r3, [r7, #0]
 80193ae:	4620      	mov	r0, r4
 80193b0:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80193b4:	f7fc fbf8 	bl	8015ba8 <_ZNK8touchgfx6Bitmap7getDataEv>
 80193b8:	2300      	movs	r3, #0
 80193ba:	4601      	mov	r1, r0
 80193bc:	aa02      	add	r2, sp, #8
 80193be:	4638      	mov	r0, r7
 80193c0:	e9cd 5300 	strd	r5, r3, [sp]
 80193c4:	4633      	mov	r3, r6
 80193c6:	47c0      	blx	r8
 80193c8:	e7d4      	b.n	8019374 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

080193ca <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80193ca:	b4f0      	push	{r4, r5, r6, r7}
 80193cc:	4616      	mov	r6, r2
 80193ce:	461c      	mov	r4, r3
 80193d0:	460d      	mov	r5, r1
 80193d2:	9a04      	ldr	r2, [sp, #16]
 80193d4:	2e01      	cmp	r6, #1
 80193d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80193da:	d00e      	beq.n	80193fa <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 80193dc:	d303      	bcc.n	80193e6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 80193de:	2e02      	cmp	r6, #2
 80193e0:	d006      	beq.n	80193f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 80193e2:	bcf0      	pop	{r4, r5, r6, r7}
 80193e4:	4770      	bx	lr
 80193e6:	4621      	mov	r1, r4
 80193e8:	4628      	mov	r0, r5
 80193ea:	bcf0      	pop	{r4, r5, r6, r7}
 80193ec:	f7ff bdd8 	b.w	8018fa0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80193f0:	4621      	mov	r1, r4
 80193f2:	4628      	mov	r0, r5
 80193f4:	bcf0      	pop	{r4, r5, r6, r7}
 80193f6:	f7ff bec7 	b.w	8019188 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80193fa:	6805      	ldr	r5, [r0, #0]
 80193fc:	2600      	movs	r6, #0
 80193fe:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8019402:	68ed      	ldr	r5, [r5, #12]
 8019404:	4613      	mov	r3, r2
 8019406:	4622      	mov	r2, r4
 8019408:	46ac      	mov	ip, r5
 801940a:	bcf0      	pop	{r4, r5, r6, r7}
 801940c:	4760      	bx	ip
	...

08019410 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8019410:	b160      	cbz	r0, 801942c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8019412:	2903      	cmp	r1, #3
 8019414:	d818      	bhi.n	8019448 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8019416:	e8df f001 	tbb	[pc, r1]
 801941a:	1902      	.short	0x1902
 801941c:	1b06      	.short	0x1b06
 801941e:	4b0e      	ldr	r3, [pc, #56]	@ (8019458 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8019420:	8818      	ldrh	r0, [r3, #0]
 8019422:	4240      	negs	r0, r0
 8019424:	4770      	bx	lr
 8019426:	4b0c      	ldr	r3, [pc, #48]	@ (8019458 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8019428:	8818      	ldrh	r0, [r3, #0]
 801942a:	4770      	bx	lr
 801942c:	2903      	cmp	r1, #3
 801942e:	d80b      	bhi.n	8019448 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8019430:	a301      	add	r3, pc, #4	@ (adr r3, 8019438 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8019432:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8019436:	bf00      	nop
 8019438:	0801944d 	.word	0x0801944d
 801943c:	08019427 	.word	0x08019427
 8019440:	08019451 	.word	0x08019451
 8019444:	0801941f 	.word	0x0801941f
 8019448:	2000      	movs	r0, #0
 801944a:	4770      	bx	lr
 801944c:	2001      	movs	r0, #1
 801944e:	4770      	bx	lr
 8019450:	f04f 30ff 	mov.w	r0, #4294967295
 8019454:	4770      	bx	lr
 8019456:	bf00      	nop
 8019458:	24025152 	.word	0x24025152

0801945c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801945c:	b160      	cbz	r0, 8019478 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801945e:	2903      	cmp	r1, #3
 8019460:	d818      	bhi.n	8019494 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8019462:	e8df f001 	tbb	[pc, r1]
 8019466:	0219      	.short	0x0219
 8019468:	051b      	.short	0x051b
 801946a:	4b0e      	ldr	r3, [pc, #56]	@ (80194a4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801946c:	8818      	ldrh	r0, [r3, #0]
 801946e:	4770      	bx	lr
 8019470:	4b0c      	ldr	r3, [pc, #48]	@ (80194a4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8019472:	8818      	ldrh	r0, [r3, #0]
 8019474:	4240      	negs	r0, r0
 8019476:	4770      	bx	lr
 8019478:	2903      	cmp	r1, #3
 801947a:	d80b      	bhi.n	8019494 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801947c:	a301      	add	r3, pc, #4	@ (adr r3, 8019484 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801947e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8019482:	bf00      	nop
 8019484:	0801946b 	.word	0x0801946b
 8019488:	0801949d 	.word	0x0801949d
 801948c:	08019471 	.word	0x08019471
 8019490:	08019499 	.word	0x08019499
 8019494:	2000      	movs	r0, #0
 8019496:	4770      	bx	lr
 8019498:	2001      	movs	r0, #1
 801949a:	4770      	bx	lr
 801949c:	f04f 30ff 	mov.w	r0, #4294967295
 80194a0:	4770      	bx	lr
 80194a2:	bf00      	nop
 80194a4:	24025152 	.word	0x24025152

080194a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80194a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194ac:	b097      	sub	sp, #92	@ 0x5c
 80194ae:	910b      	str	r1, [sp, #44]	@ 0x2c
 80194b0:	a912      	add	r1, sp, #72	@ 0x48
 80194b2:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 80194b6:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 80194ba:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 80194be:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 80194c2:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 80194c6:	e881 000c 	stmia.w	r1, {r2, r3}
 80194ca:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 80194ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80194d0:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 80194d4:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 80194d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80194da:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 80194de:	798d      	ldrb	r5, [r1, #6]
 80194e0:	930c      	str	r3, [sp, #48]	@ 0x30
 80194e2:	7b4b      	ldrb	r3, [r1, #13]
 80194e4:	0158      	lsls	r0, r3, #5
 80194e6:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80194ea:	4328      	orrs	r0, r5
 80194ec:	9009      	str	r0, [sp, #36]	@ 0x24
 80194ee:	f000 817c 	beq.w	80197ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80194f2:	011b      	lsls	r3, r3, #4
 80194f4:	79c8      	ldrb	r0, [r1, #7]
 80194f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80194fa:	4303      	orrs	r3, r0
 80194fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80194fe:	f000 8174 	beq.w	80197ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019502:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8019506:	b29b      	uxth	r3, r3
 8019508:	2f00      	cmp	r7, #0
 801950a:	f000 8116 	beq.w	801973a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801950e:	1aff      	subs	r7, r7, r3
 8019510:	b2bf      	uxth	r7, r7
 8019512:	043b      	lsls	r3, r7, #16
 8019514:	d502      	bpl.n	801951c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8019516:	1bf6      	subs	r6, r6, r7
 8019518:	2700      	movs	r7, #0
 801951a:	b236      	sxth	r6, r6
 801951c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8019520:	a812      	add	r0, sp, #72	@ 0x48
 8019522:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8019526:	428e      	cmp	r6, r1
 8019528:	b28b      	uxth	r3, r1
 801952a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801952e:	bfbf      	itttt	lt
 8019530:	18ff      	addlt	r7, r7, r3
 8019532:	1bbe      	sublt	r6, r7, r6
 8019534:	b2b7      	uxthlt	r7, r6
 8019536:	460e      	movlt	r6, r1
 8019538:	8891      	ldrh	r1, [r2, #4]
 801953a:	440b      	add	r3, r1
 801953c:	4631      	mov	r1, r6
 801953e:	b21b      	sxth	r3, r3
 8019540:	9310      	str	r3, [sp, #64]	@ 0x40
 8019542:	88d3      	ldrh	r3, [r2, #6]
 8019544:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019546:	449a      	add	sl, r3
 8019548:	fa0f f38a 	sxth.w	r3, sl
 801954c:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8019550:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019552:	4bb5      	ldr	r3, [pc, #724]	@ (8019828 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8019554:	f893 b000 	ldrb.w	fp, [r3]
 8019558:	f10b 3cff 	add.w	ip, fp, #4294967295
 801955c:	f1dc 0300 	rsbs	r3, ip, #0
 8019560:	eb43 030c 	adc.w	r3, r3, ip
 8019564:	930d      	str	r3, [sp, #52]	@ 0x34
 8019566:	464b      	mov	r3, r9
 8019568:	f7f8 fe95 	bl	8012296 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801956c:	4631      	mov	r1, r6
 801956e:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 8019572:	464b      	mov	r3, r9
 8019574:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019576:	a812      	add	r0, sp, #72	@ 0x48
 8019578:	f7f8 feaa 	bl	80122d0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801957c:	a916      	add	r1, sp, #88	@ 0x58
 801957e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8019582:	a815      	add	r0, sp, #84	@ 0x54
 8019584:	f7f8 ffd0 	bl	8012528 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8019588:	f1b9 0f00 	cmp.w	r9, #0
 801958c:	f040 80d8 	bne.w	8019740 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8019590:	f1bb 0f01 	cmp.w	fp, #1
 8019594:	f040 80dc 	bne.w	8019750 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8019598:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801959a:	b153      	cbz	r3, 80195b2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801959c:	2508      	movs	r5, #8
 801959e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80195a0:	fb95 f3f8 	sdiv	r3, r5, r8
 80195a4:	1e5d      	subs	r5, r3, #1
 80195a6:	4415      	add	r5, r2
 80195a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80195ac:	fb15 f503 	smulbb	r5, r5, r3
 80195b0:	b2ad      	uxth	r5, r5
 80195b2:	b907      	cbnz	r7, 80195b6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80195b4:	b16c      	cbz	r4, 80195d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 80195b6:	fb04 7305 	mla	r3, r4, r5, r7
 80195ba:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80195bc:	ebaa 0a04 	sub.w	sl, sl, r4
 80195c0:	fb08 f303 	mul.w	r3, r8, r3
 80195c4:	fa1f fa8a 	uxth.w	sl, sl
 80195c8:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80195cc:	f003 0407 	and.w	r4, r3, #7
 80195d0:	9226      	str	r2, [sp, #152]	@ 0x98
 80195d2:	4649      	mov	r1, r9
 80195d4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80195d6:	f7ff ff1b 	bl	8019410 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 80195da:	4683      	mov	fp, r0
 80195dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80195de:	f7ff ff3d 	bl	801945c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 80195e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80195e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80195e6:	4681      	mov	r9, r0
 80195e8:	1a9b      	subs	r3, r3, r2
 80195ea:	459a      	cmp	sl, r3
 80195ec:	bfa8      	it	ge
 80195ee:	469a      	movge	sl, r3
 80195f0:	f1ba 0f00 	cmp.w	sl, #0
 80195f4:	f340 80f9 	ble.w	80197ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80195f8:	1bf6      	subs	r6, r6, r7
 80195fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80195fc:	1b9e      	subs	r6, r3, r6
 80195fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019600:	429e      	cmp	r6, r3
 8019602:	bfd4      	ite	le
 8019604:	ebc7 0706 	rsble	r7, r7, r6
 8019608:	ebc7 0703 	rsbgt	r7, r7, r3
 801960c:	2f00      	cmp	r7, #0
 801960e:	f340 80ec 	ble.w	80197ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019612:	1bed      	subs	r5, r5, r7
 8019614:	fb08 f305 	mul.w	r3, r8, r5
 8019618:	930d      	str	r3, [sp, #52]	@ 0x34
 801961a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801961c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8019620:	930e      	str	r3, [sp, #56]	@ 0x38
 8019622:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8019624:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019628:	930f      	str	r3, [sp, #60]	@ 0x3c
 801962a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801962c:	b2db      	uxtb	r3, r3
 801962e:	9310      	str	r3, [sp, #64]	@ 0x40
 8019630:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019632:	2b00      	cmp	r3, #0
 8019634:	f040 80de 	bne.w	80197f4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8019638:	4b7c      	ldr	r3, [pc, #496]	@ (801982c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801963a:	6818      	ldr	r0, [r3, #0]
 801963c:	6803      	ldr	r3, [r0, #0]
 801963e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019640:	4798      	blx	r3
 8019642:	2301      	movs	r3, #1
 8019644:	4a7a      	ldr	r2, [pc, #488]	@ (8019830 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8019646:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801964a:	fb07 9b1b 	mls	fp, r7, fp, r9
 801964e:	fa03 f308 	lsl.w	r3, r3, r8
 8019652:	8811      	ldrh	r1, [r2, #0]
 8019654:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 8019658:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801965c:	3b01      	subs	r3, #1
 801965e:	fb06 bb07 	mla	fp, r6, r7, fp
 8019662:	b2db      	uxtb	r3, r3
 8019664:	930a      	str	r3, [sp, #40]	@ 0x28
 8019666:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801966a:	fb01 2303 	mla	r3, r1, r3, r2
 801966e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019672:	18c3      	adds	r3, r0, r3
 8019674:	9309      	str	r3, [sp, #36]	@ 0x24
 8019676:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8019678:	781a      	ldrb	r2, [r3, #0]
 801967a:	4122      	asrs	r2, r4
 801967c:	b2d2      	uxtb	r2, r2
 801967e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8019682:	f0c0 80d7 	bcc.w	8019834 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8019686:	46be      	mov	lr, r7
 8019688:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801968a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801968e:	f0c0 80ba 	bcc.w	8019806 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8019692:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019694:	4013      	ands	r3, r2
 8019696:	d041      	beq.n	801971c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8019698:	20ff      	movs	r0, #255	@ 0xff
 801969a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801969c:	fb90 f5f5 	sdiv	r5, r0, r5
 80196a0:	436b      	muls	r3, r5
 80196a2:	2bfe      	cmp	r3, #254	@ 0xfe
 80196a4:	dd03      	ble.n	80196ae <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 80196a6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80196a8:	4285      	cmp	r5, r0
 80196aa:	f000 80a5 	beq.w	80197f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 80196ae:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80196b0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80196b2:	fb15 f303 	smulbb	r3, r5, r3
 80196b6:	b29b      	uxth	r3, r3
 80196b8:	1c5d      	adds	r5, r3, #1
 80196ba:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80196be:	780d      	ldrb	r5, [r1, #0]
 80196c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80196c4:	fa1f fc83 	uxth.w	ip, r3
 80196c8:	43db      	mvns	r3, r3
 80196ca:	fb10 f90c 	smulbb	r9, r0, ip
 80196ce:	b2db      	uxtb	r3, r3
 80196d0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80196d2:	fb05 9503 	mla	r5, r5, r3, r9
 80196d6:	b2ad      	uxth	r5, r5
 80196d8:	f105 0901 	add.w	r9, r5, #1
 80196dc:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80196e0:	fb10 f90c 	smulbb	r9, r0, ip
 80196e4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80196e6:	122d      	asrs	r5, r5, #8
 80196e8:	fb10 fc0c 	smulbb	ip, r0, ip
 80196ec:	700d      	strb	r5, [r1, #0]
 80196ee:	784d      	ldrb	r5, [r1, #1]
 80196f0:	fb05 9503 	mla	r5, r5, r3, r9
 80196f4:	b2ad      	uxth	r5, r5
 80196f6:	f105 0901 	add.w	r9, r5, #1
 80196fa:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80196fe:	122d      	asrs	r5, r5, #8
 8019700:	704d      	strb	r5, [r1, #1]
 8019702:	788d      	ldrb	r5, [r1, #2]
 8019704:	fb05 cc03 	mla	ip, r5, r3, ip
 8019708:	fa1f fc8c 	uxth.w	ip, ip
 801970c:	f10c 0301 	add.w	r3, ip, #1
 8019710:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8019714:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019718:	f881 c002 	strb.w	ip, [r1, #2]
 801971c:	4444      	add	r4, r8
 801971e:	4431      	add	r1, r6
 8019720:	b2a4      	uxth	r4, r4
 8019722:	2c07      	cmp	r4, #7
 8019724:	bf89      	itett	hi
 8019726:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 8019728:	fa42 f208 	asrls.w	r2, r2, r8
 801972c:	2400      	movhi	r4, #0
 801972e:	785a      	ldrbhi	r2, [r3, #1]
 8019730:	bf8a      	itet	hi
 8019732:	3301      	addhi	r3, #1
 8019734:	b2d2      	uxtbls	r2, r2
 8019736:	9326      	strhi	r3, [sp, #152]	@ 0x98
 8019738:	e7a7      	b.n	801968a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801973a:	441e      	add	r6, r3
 801973c:	b236      	sxth	r6, r6
 801973e:	e6ed      	b.n	801951c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8019740:	f1b9 0f01 	cmp.w	r9, #1
 8019744:	f47f af28 	bne.w	8019598 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019748:	f1bb 0f01 	cmp.w	fp, #1
 801974c:	f47f af24 	bne.w	8019598 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019750:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801982c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8019754:	f8db 0000 	ldr.w	r0, [fp]
 8019758:	6803      	ldr	r3, [r0, #0]
 801975a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801975c:	4798      	blx	r3
 801975e:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8019762:	465a      	mov	r2, fp
 8019764:	d006      	beq.n	8019774 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8019766:	f1b8 0f04 	cmp.w	r8, #4
 801976a:	d141      	bne.n	80197f0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801976c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801976e:	3300      	adds	r3, #0
 8019770:	bf18      	it	ne
 8019772:	2301      	movne	r3, #1
 8019774:	0580      	lsls	r0, r0, #22
 8019776:	d566      	bpl.n	8019846 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8019778:	f1b8 0f08 	cmp.w	r8, #8
 801977c:	d163      	bne.n	8019846 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801977e:	2b00      	cmp	r3, #0
 8019780:	bf0c      	ite	eq
 8019782:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8019786:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801978a:	2f00      	cmp	r7, #0
 801978c:	f47f af04 	bne.w	8019598 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019790:	2c00      	cmp	r4, #0
 8019792:	f47f af01 	bne.w	8019598 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019798:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801979a:	18f3      	adds	r3, r6, r3
 801979c:	4283      	cmp	r3, r0
 801979e:	f73f aefb 	bgt.w	8019598 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80197a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80197a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80197a6:	4403      	add	r3, r0
 80197a8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80197aa:	4283      	cmp	r3, r0
 80197ac:	f73f aef4 	bgt.w	8019598 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80197b0:	f1b8 0f08 	cmp.w	r8, #8
 80197b4:	6810      	ldr	r0, [r2, #0]
 80197b6:	f04f 0600 	mov.w	r6, #0
 80197ba:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 80197be:	bf18      	it	ne
 80197c0:	3501      	addne	r5, #1
 80197c2:	6804      	ldr	r4, [r0, #0]
 80197c4:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 80197c8:	bf18      	it	ne
 80197ca:	f025 0501 	bicne.w	r5, r5, #1
 80197ce:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80197d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80197d4:	bf18      	it	ne
 80197d6:	b2ad      	uxthne	r5, r5
 80197d8:	9104      	str	r1, [sp, #16]
 80197da:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80197dc:	e9cd 5a00 	strd	r5, sl, [sp]
 80197e0:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80197e4:	9926      	ldr	r1, [sp, #152]	@ 0x98
 80197e6:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 80197e8:	47a0      	blx	r4
 80197ea:	b017      	add	sp, #92	@ 0x5c
 80197ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197f0:	2300      	movs	r3, #0
 80197f2:	e7bf      	b.n	8019774 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80197f4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80197f6:	e724      	b.n	8019642 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 80197f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80197fa:	700b      	strb	r3, [r1, #0]
 80197fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80197fe:	704b      	strb	r3, [r1, #1]
 8019800:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019802:	708b      	strb	r3, [r1, #2]
 8019804:	e78a      	b.n	801971c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8019806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019808:	b153      	cbz	r3, 8019820 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801980a:	441c      	add	r4, r3
 801980c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801980e:	b2a4      	uxth	r4, r4
 8019810:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8019814:	f004 0407 	and.w	r4, r4, #7
 8019818:	781a      	ldrb	r2, [r3, #0]
 801981a:	9326      	str	r3, [sp, #152]	@ 0x98
 801981c:	4122      	asrs	r2, r4
 801981e:	b2d2      	uxtb	r2, r2
 8019820:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019822:	445b      	add	r3, fp
 8019824:	9309      	str	r3, [sp, #36]	@ 0x24
 8019826:	e72a      	b.n	801967e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8019828:	24025150 	.word	0x24025150
 801982c:	24025158 	.word	0x24025158
 8019830:	24025152 	.word	0x24025152
 8019834:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019836:	2b00      	cmp	r3, #0
 8019838:	d1d7      	bne.n	80197ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801983a:	4b06      	ldr	r3, [pc, #24]	@ (8019854 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801983c:	6818      	ldr	r0, [r3, #0]
 801983e:	6803      	ldr	r3, [r0, #0]
 8019840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019842:	4798      	blx	r3
 8019844:	e7d1      	b.n	80197ea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019846:	2b00      	cmp	r3, #0
 8019848:	f43f aea6 	beq.w	8019598 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801984c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019850:	e79b      	b.n	801978a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8019852:	bf00      	nop
 8019854:	24025158 	.word	0x24025158

08019858 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8019858:	b538      	push	{r3, r4, r5, lr}
 801985a:	4c15      	ldr	r4, [pc, #84]	@ (80198b0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801985c:	4605      	mov	r5, r0
 801985e:	7823      	ldrb	r3, [r4, #0]
 8019860:	f3bf 8f5b 	dmb	ish
 8019864:	07da      	lsls	r2, r3, #31
 8019866:	d40b      	bmi.n	8019880 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8019868:	4620      	mov	r0, r4
 801986a:	f006 f8d3 	bl	801fa14 <__cxa_guard_acquire>
 801986e:	b138      	cbz	r0, 8019880 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8019870:	4620      	mov	r0, r4
 8019872:	f006 f8db 	bl	801fa2c <__cxa_guard_release>
 8019876:	4a0f      	ldr	r2, [pc, #60]	@ (80198b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8019878:	490f      	ldr	r1, [pc, #60]	@ (80198b8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801987a:	4810      	ldr	r0, [pc, #64]	@ (80198bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801987c:	f006 f8c3 	bl	801fa06 <__aeabi_atexit>
 8019880:	4c0f      	ldr	r4, [pc, #60]	@ (80198c0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8019882:	7823      	ldrb	r3, [r4, #0]
 8019884:	f3bf 8f5b 	dmb	ish
 8019888:	07db      	lsls	r3, r3, #31
 801988a:	d40b      	bmi.n	80198a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801988c:	4620      	mov	r0, r4
 801988e:	f006 f8c1 	bl	801fa14 <__cxa_guard_acquire>
 8019892:	b138      	cbz	r0, 80198a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8019894:	4620      	mov	r0, r4
 8019896:	f006 f8c9 	bl	801fa2c <__cxa_guard_release>
 801989a:	4a06      	ldr	r2, [pc, #24]	@ (80198b4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801989c:	4909      	ldr	r1, [pc, #36]	@ (80198c4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801989e:	480a      	ldr	r0, [pc, #40]	@ (80198c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80198a0:	f006 f8b1 	bl	801fa06 <__aeabi_atexit>
 80198a4:	4b05      	ldr	r3, [pc, #20]	@ (80198bc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80198a6:	616b      	str	r3, [r5, #20]
 80198a8:	4b07      	ldr	r3, [pc, #28]	@ (80198c8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80198aa:	61ab      	str	r3, [r5, #24]
 80198ac:	bd38      	pop	{r3, r4, r5, pc}
 80198ae:	bf00      	nop
 80198b0:	24025238 	.word	0x24025238
 80198b4:	24000000 	.word	0x24000000
 80198b8:	0801768f 	.word	0x0801768f
 80198bc:	240000c8 	.word	0x240000c8
 80198c0:	2402523c 	.word	0x2402523c
 80198c4:	0801768d 	.word	0x0801768d
 80198c8:	240000cc 	.word	0x240000cc

080198cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80198cc:	b538      	push	{r3, r4, r5, lr}
 80198ce:	4c15      	ldr	r4, [pc, #84]	@ (8019924 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80198d0:	4605      	mov	r5, r0
 80198d2:	7823      	ldrb	r3, [r4, #0]
 80198d4:	f3bf 8f5b 	dmb	ish
 80198d8:	07da      	lsls	r2, r3, #31
 80198da:	d40b      	bmi.n	80198f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80198dc:	4620      	mov	r0, r4
 80198de:	f006 f899 	bl	801fa14 <__cxa_guard_acquire>
 80198e2:	b138      	cbz	r0, 80198f4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80198e4:	4620      	mov	r0, r4
 80198e6:	f006 f8a1 	bl	801fa2c <__cxa_guard_release>
 80198ea:	4a0f      	ldr	r2, [pc, #60]	@ (8019928 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80198ec:	490f      	ldr	r1, [pc, #60]	@ (801992c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80198ee:	4810      	ldr	r0, [pc, #64]	@ (8019930 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80198f0:	f006 f889 	bl	801fa06 <__aeabi_atexit>
 80198f4:	4c0f      	ldr	r4, [pc, #60]	@ (8019934 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80198f6:	7823      	ldrb	r3, [r4, #0]
 80198f8:	f3bf 8f5b 	dmb	ish
 80198fc:	07db      	lsls	r3, r3, #31
 80198fe:	d40b      	bmi.n	8019918 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8019900:	4620      	mov	r0, r4
 8019902:	f006 f887 	bl	801fa14 <__cxa_guard_acquire>
 8019906:	b138      	cbz	r0, 8019918 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8019908:	4620      	mov	r0, r4
 801990a:	f006 f88f 	bl	801fa2c <__cxa_guard_release>
 801990e:	4a06      	ldr	r2, [pc, #24]	@ (8019928 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8019910:	4909      	ldr	r1, [pc, #36]	@ (8019938 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8019912:	480a      	ldr	r0, [pc, #40]	@ (801993c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8019914:	f006 f877 	bl	801fa06 <__aeabi_atexit>
 8019918:	4b05      	ldr	r3, [pc, #20]	@ (8019930 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801991a:	60eb      	str	r3, [r5, #12]
 801991c:	4b07      	ldr	r3, [pc, #28]	@ (801993c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801991e:	612b      	str	r3, [r5, #16]
 8019920:	bd38      	pop	{r3, r4, r5, pc}
 8019922:	bf00      	nop
 8019924:	24025218 	.word	0x24025218
 8019928:	24000000 	.word	0x24000000
 801992c:	08017693 	.word	0x08017693
 8019930:	240000a8 	.word	0x240000a8
 8019934:	2402521c 	.word	0x2402521c
 8019938:	08017691 	.word	0x08017691
 801993c:	240000ac 	.word	0x240000ac

08019940 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8019940:	b510      	push	{r4, lr}
 8019942:	4604      	mov	r4, r0
 8019944:	f7ff ff88 	bl	8019858 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8019948:	4620      	mov	r0, r4
 801994a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801994e:	f7ff bfbd 	b.w	80198cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08019954 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8019954:	b538      	push	{r3, r4, r5, lr}
 8019956:	4c15      	ldr	r4, [pc, #84]	@ (80199ac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8019958:	4605      	mov	r5, r0
 801995a:	7823      	ldrb	r3, [r4, #0]
 801995c:	f3bf 8f5b 	dmb	ish
 8019960:	07da      	lsls	r2, r3, #31
 8019962:	d40b      	bmi.n	801997c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8019964:	4620      	mov	r0, r4
 8019966:	f006 f855 	bl	801fa14 <__cxa_guard_acquire>
 801996a:	b138      	cbz	r0, 801997c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801996c:	4620      	mov	r0, r4
 801996e:	f006 f85d 	bl	801fa2c <__cxa_guard_release>
 8019972:	4a0f      	ldr	r2, [pc, #60]	@ (80199b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8019974:	490f      	ldr	r1, [pc, #60]	@ (80199b4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8019976:	4810      	ldr	r0, [pc, #64]	@ (80199b8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8019978:	f006 f845 	bl	801fa06 <__aeabi_atexit>
 801997c:	4c0f      	ldr	r4, [pc, #60]	@ (80199bc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801997e:	7823      	ldrb	r3, [r4, #0]
 8019980:	f3bf 8f5b 	dmb	ish
 8019984:	07db      	lsls	r3, r3, #31
 8019986:	d40b      	bmi.n	80199a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8019988:	4620      	mov	r0, r4
 801998a:	f006 f843 	bl	801fa14 <__cxa_guard_acquire>
 801998e:	b138      	cbz	r0, 80199a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8019990:	4620      	mov	r0, r4
 8019992:	f006 f84b 	bl	801fa2c <__cxa_guard_release>
 8019996:	4a06      	ldr	r2, [pc, #24]	@ (80199b0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8019998:	4909      	ldr	r1, [pc, #36]	@ (80199c0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801999a:	480a      	ldr	r0, [pc, #40]	@ (80199c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801999c:	f006 f833 	bl	801fa06 <__aeabi_atexit>
 80199a0:	4b05      	ldr	r3, [pc, #20]	@ (80199b8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80199a2:	626b      	str	r3, [r5, #36]	@ 0x24
 80199a4:	4b07      	ldr	r3, [pc, #28]	@ (80199c4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80199a6:	62ab      	str	r3, [r5, #40]	@ 0x28
 80199a8:	bd38      	pop	{r3, r4, r5, pc}
 80199aa:	bf00      	nop
 80199ac:	24025240 	.word	0x24025240
 80199b0:	24000000 	.word	0x24000000
 80199b4:	08017687 	.word	0x08017687
 80199b8:	240000d0 	.word	0x240000d0
 80199bc:	24025244 	.word	0x24025244
 80199c0:	08017685 	.word	0x08017685
 80199c4:	240000d4 	.word	0x240000d4

080199c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80199c8:	b538      	push	{r3, r4, r5, lr}
 80199ca:	4c15      	ldr	r4, [pc, #84]	@ (8019a20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80199cc:	4605      	mov	r5, r0
 80199ce:	7823      	ldrb	r3, [r4, #0]
 80199d0:	f3bf 8f5b 	dmb	ish
 80199d4:	07da      	lsls	r2, r3, #31
 80199d6:	d40b      	bmi.n	80199f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80199d8:	4620      	mov	r0, r4
 80199da:	f006 f81b 	bl	801fa14 <__cxa_guard_acquire>
 80199de:	b138      	cbz	r0, 80199f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80199e0:	4620      	mov	r0, r4
 80199e2:	f006 f823 	bl	801fa2c <__cxa_guard_release>
 80199e6:	4a0f      	ldr	r2, [pc, #60]	@ (8019a24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80199e8:	490f      	ldr	r1, [pc, #60]	@ (8019a28 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80199ea:	4810      	ldr	r0, [pc, #64]	@ (8019a2c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80199ec:	f006 f80b 	bl	801fa06 <__aeabi_atexit>
 80199f0:	4c0f      	ldr	r4, [pc, #60]	@ (8019a30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80199f2:	7823      	ldrb	r3, [r4, #0]
 80199f4:	f3bf 8f5b 	dmb	ish
 80199f8:	07db      	lsls	r3, r3, #31
 80199fa:	d40b      	bmi.n	8019a14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80199fc:	4620      	mov	r0, r4
 80199fe:	f006 f809 	bl	801fa14 <__cxa_guard_acquire>
 8019a02:	b138      	cbz	r0, 8019a14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8019a04:	4620      	mov	r0, r4
 8019a06:	f006 f811 	bl	801fa2c <__cxa_guard_release>
 8019a0a:	4a06      	ldr	r2, [pc, #24]	@ (8019a24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8019a0c:	4909      	ldr	r1, [pc, #36]	@ (8019a34 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8019a0e:	480a      	ldr	r0, [pc, #40]	@ (8019a38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8019a10:	f005 fff9 	bl	801fa06 <__aeabi_atexit>
 8019a14:	4b05      	ldr	r3, [pc, #20]	@ (8019a2c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8019a16:	61eb      	str	r3, [r5, #28]
 8019a18:	4b07      	ldr	r3, [pc, #28]	@ (8019a38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8019a1a:	622b      	str	r3, [r5, #32]
 8019a1c:	bd38      	pop	{r3, r4, r5, pc}
 8019a1e:	bf00      	nop
 8019a20:	24025220 	.word	0x24025220
 8019a24:	24000000 	.word	0x24000000
 8019a28:	0801768b 	.word	0x0801768b
 8019a2c:	240000b0 	.word	0x240000b0
 8019a30:	24025224 	.word	0x24025224
 8019a34:	08017689 	.word	0x08017689
 8019a38:	240000b4 	.word	0x240000b4

08019a3c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8019a3c:	b510      	push	{r4, lr}
 8019a3e:	4604      	mov	r4, r0
 8019a40:	f7ff ff88 	bl	8019954 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8019a44:	4620      	mov	r0, r4
 8019a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a4a:	f7ff bfbd 	b.w	80199c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08019a50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8019a50:	b538      	push	{r3, r4, r5, lr}
 8019a52:	4c15      	ldr	r4, [pc, #84]	@ (8019aa8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8019a54:	4605      	mov	r5, r0
 8019a56:	7823      	ldrb	r3, [r4, #0]
 8019a58:	f3bf 8f5b 	dmb	ish
 8019a5c:	07da      	lsls	r2, r3, #31
 8019a5e:	d40b      	bmi.n	8019a78 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8019a60:	4620      	mov	r0, r4
 8019a62:	f005 ffd7 	bl	801fa14 <__cxa_guard_acquire>
 8019a66:	b138      	cbz	r0, 8019a78 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8019a68:	4620      	mov	r0, r4
 8019a6a:	f005 ffdf 	bl	801fa2c <__cxa_guard_release>
 8019a6e:	4a0f      	ldr	r2, [pc, #60]	@ (8019aac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8019a70:	490f      	ldr	r1, [pc, #60]	@ (8019ab0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8019a72:	4810      	ldr	r0, [pc, #64]	@ (8019ab4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8019a74:	f005 ffc7 	bl	801fa06 <__aeabi_atexit>
 8019a78:	4c0f      	ldr	r4, [pc, #60]	@ (8019ab8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8019a7a:	7823      	ldrb	r3, [r4, #0]
 8019a7c:	f3bf 8f5b 	dmb	ish
 8019a80:	07db      	lsls	r3, r3, #31
 8019a82:	d40b      	bmi.n	8019a9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8019a84:	4620      	mov	r0, r4
 8019a86:	f005 ffc5 	bl	801fa14 <__cxa_guard_acquire>
 8019a8a:	b138      	cbz	r0, 8019a9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8019a8c:	4620      	mov	r0, r4
 8019a8e:	f005 ffcd 	bl	801fa2c <__cxa_guard_release>
 8019a92:	4a06      	ldr	r2, [pc, #24]	@ (8019aac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8019a94:	4909      	ldr	r1, [pc, #36]	@ (8019abc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8019a96:	480a      	ldr	r0, [pc, #40]	@ (8019ac0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8019a98:	f005 ffb5 	bl	801fa06 <__aeabi_atexit>
 8019a9c:	4b05      	ldr	r3, [pc, #20]	@ (8019ab4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8019a9e:	636b      	str	r3, [r5, #52]	@ 0x34
 8019aa0:	4b07      	ldr	r3, [pc, #28]	@ (8019ac0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8019aa2:	63ab      	str	r3, [r5, #56]	@ 0x38
 8019aa4:	bd38      	pop	{r3, r4, r5, pc}
 8019aa6:	bf00      	nop
 8019aa8:	24025228 	.word	0x24025228
 8019aac:	24000000 	.word	0x24000000
 8019ab0:	0801767f 	.word	0x0801767f
 8019ab4:	240000b8 	.word	0x240000b8
 8019ab8:	2402522c 	.word	0x2402522c
 8019abc:	0801767d 	.word	0x0801767d
 8019ac0:	240000bc 	.word	0x240000bc

08019ac4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8019ac4:	b538      	push	{r3, r4, r5, lr}
 8019ac6:	4c15      	ldr	r4, [pc, #84]	@ (8019b1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8019ac8:	4605      	mov	r5, r0
 8019aca:	7823      	ldrb	r3, [r4, #0]
 8019acc:	f3bf 8f5b 	dmb	ish
 8019ad0:	07da      	lsls	r2, r3, #31
 8019ad2:	d40b      	bmi.n	8019aec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8019ad4:	4620      	mov	r0, r4
 8019ad6:	f005 ff9d 	bl	801fa14 <__cxa_guard_acquire>
 8019ada:	b138      	cbz	r0, 8019aec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8019adc:	4620      	mov	r0, r4
 8019ade:	f005 ffa5 	bl	801fa2c <__cxa_guard_release>
 8019ae2:	4a0f      	ldr	r2, [pc, #60]	@ (8019b20 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8019ae4:	490f      	ldr	r1, [pc, #60]	@ (8019b24 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8019ae6:	4810      	ldr	r0, [pc, #64]	@ (8019b28 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8019ae8:	f005 ff8d 	bl	801fa06 <__aeabi_atexit>
 8019aec:	4c0f      	ldr	r4, [pc, #60]	@ (8019b2c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8019aee:	7823      	ldrb	r3, [r4, #0]
 8019af0:	f3bf 8f5b 	dmb	ish
 8019af4:	07db      	lsls	r3, r3, #31
 8019af6:	d40b      	bmi.n	8019b10 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8019af8:	4620      	mov	r0, r4
 8019afa:	f005 ff8b 	bl	801fa14 <__cxa_guard_acquire>
 8019afe:	b138      	cbz	r0, 8019b10 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8019b00:	4620      	mov	r0, r4
 8019b02:	f005 ff93 	bl	801fa2c <__cxa_guard_release>
 8019b06:	4a06      	ldr	r2, [pc, #24]	@ (8019b20 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8019b08:	4909      	ldr	r1, [pc, #36]	@ (8019b30 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8019b0a:	480a      	ldr	r0, [pc, #40]	@ (8019b34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8019b0c:	f005 ff7b 	bl	801fa06 <__aeabi_atexit>
 8019b10:	4b05      	ldr	r3, [pc, #20]	@ (8019b28 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8019b12:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8019b14:	4b07      	ldr	r3, [pc, #28]	@ (8019b34 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8019b16:	632b      	str	r3, [r5, #48]	@ 0x30
 8019b18:	bd38      	pop	{r3, r4, r5, pc}
 8019b1a:	bf00      	nop
 8019b1c:	24025200 	.word	0x24025200
 8019b20:	24000000 	.word	0x24000000
 8019b24:	08017683 	.word	0x08017683
 8019b28:	24000090 	.word	0x24000090
 8019b2c:	24025204 	.word	0x24025204
 8019b30:	08017681 	.word	0x08017681
 8019b34:	24000094 	.word	0x24000094

08019b38 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8019b38:	b510      	push	{r4, lr}
 8019b3a:	4604      	mov	r4, r0
 8019b3c:	f7ff ff88 	bl	8019a50 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8019b40:	4620      	mov	r0, r4
 8019b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b46:	f7ff bfbd 	b.w	8019ac4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08019b4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8019b4c:	b538      	push	{r3, r4, r5, lr}
 8019b4e:	4c15      	ldr	r4, [pc, #84]	@ (8019ba4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8019b50:	4605      	mov	r5, r0
 8019b52:	7823      	ldrb	r3, [r4, #0]
 8019b54:	f3bf 8f5b 	dmb	ish
 8019b58:	07da      	lsls	r2, r3, #31
 8019b5a:	d40b      	bmi.n	8019b74 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8019b5c:	4620      	mov	r0, r4
 8019b5e:	f005 ff59 	bl	801fa14 <__cxa_guard_acquire>
 8019b62:	b138      	cbz	r0, 8019b74 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8019b64:	4620      	mov	r0, r4
 8019b66:	f005 ff61 	bl	801fa2c <__cxa_guard_release>
 8019b6a:	4a0f      	ldr	r2, [pc, #60]	@ (8019ba8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8019b6c:	490f      	ldr	r1, [pc, #60]	@ (8019bac <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8019b6e:	4810      	ldr	r0, [pc, #64]	@ (8019bb0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8019b70:	f005 ff49 	bl	801fa06 <__aeabi_atexit>
 8019b74:	4c0f      	ldr	r4, [pc, #60]	@ (8019bb4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8019b76:	7823      	ldrb	r3, [r4, #0]
 8019b78:	f3bf 8f5b 	dmb	ish
 8019b7c:	07db      	lsls	r3, r3, #31
 8019b7e:	d40b      	bmi.n	8019b98 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8019b80:	4620      	mov	r0, r4
 8019b82:	f005 ff47 	bl	801fa14 <__cxa_guard_acquire>
 8019b86:	b138      	cbz	r0, 8019b98 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8019b88:	4620      	mov	r0, r4
 8019b8a:	f005 ff4f 	bl	801fa2c <__cxa_guard_release>
 8019b8e:	4a06      	ldr	r2, [pc, #24]	@ (8019ba8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8019b90:	4909      	ldr	r1, [pc, #36]	@ (8019bb8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8019b92:	480a      	ldr	r0, [pc, #40]	@ (8019bbc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8019b94:	f005 ff37 	bl	801fa06 <__aeabi_atexit>
 8019b98:	4b05      	ldr	r3, [pc, #20]	@ (8019bb0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8019b9a:	646b      	str	r3, [r5, #68]	@ 0x44
 8019b9c:	4b07      	ldr	r3, [pc, #28]	@ (8019bbc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8019b9e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8019ba0:	bd38      	pop	{r3, r4, r5, pc}
 8019ba2:	bf00      	nop
 8019ba4:	24025230 	.word	0x24025230
 8019ba8:	24000000 	.word	0x24000000
 8019bac:	08017677 	.word	0x08017677
 8019bb0:	240000c0 	.word	0x240000c0
 8019bb4:	24025234 	.word	0x24025234
 8019bb8:	08017675 	.word	0x08017675
 8019bbc:	240000c4 	.word	0x240000c4

08019bc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8019bc0:	b538      	push	{r3, r4, r5, lr}
 8019bc2:	4c15      	ldr	r4, [pc, #84]	@ (8019c18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8019bc4:	4605      	mov	r5, r0
 8019bc6:	7823      	ldrb	r3, [r4, #0]
 8019bc8:	f3bf 8f5b 	dmb	ish
 8019bcc:	07da      	lsls	r2, r3, #31
 8019bce:	d40b      	bmi.n	8019be8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8019bd0:	4620      	mov	r0, r4
 8019bd2:	f005 ff1f 	bl	801fa14 <__cxa_guard_acquire>
 8019bd6:	b138      	cbz	r0, 8019be8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8019bd8:	4620      	mov	r0, r4
 8019bda:	f005 ff27 	bl	801fa2c <__cxa_guard_release>
 8019bde:	4a0f      	ldr	r2, [pc, #60]	@ (8019c1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8019be0:	490f      	ldr	r1, [pc, #60]	@ (8019c20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8019be2:	4810      	ldr	r0, [pc, #64]	@ (8019c24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8019be4:	f005 ff0f 	bl	801fa06 <__aeabi_atexit>
 8019be8:	4c0f      	ldr	r4, [pc, #60]	@ (8019c28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8019bea:	7823      	ldrb	r3, [r4, #0]
 8019bec:	f3bf 8f5b 	dmb	ish
 8019bf0:	07db      	lsls	r3, r3, #31
 8019bf2:	d40b      	bmi.n	8019c0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8019bf4:	4620      	mov	r0, r4
 8019bf6:	f005 ff0d 	bl	801fa14 <__cxa_guard_acquire>
 8019bfa:	b138      	cbz	r0, 8019c0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8019bfc:	4620      	mov	r0, r4
 8019bfe:	f005 ff15 	bl	801fa2c <__cxa_guard_release>
 8019c02:	4a06      	ldr	r2, [pc, #24]	@ (8019c1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8019c04:	4909      	ldr	r1, [pc, #36]	@ (8019c2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8019c06:	480a      	ldr	r0, [pc, #40]	@ (8019c30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8019c08:	f005 fefd 	bl	801fa06 <__aeabi_atexit>
 8019c0c:	4b05      	ldr	r3, [pc, #20]	@ (8019c24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8019c0e:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8019c10:	4b07      	ldr	r3, [pc, #28]	@ (8019c30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8019c12:	642b      	str	r3, [r5, #64]	@ 0x40
 8019c14:	bd38      	pop	{r3, r4, r5, pc}
 8019c16:	bf00      	nop
 8019c18:	24025210 	.word	0x24025210
 8019c1c:	24000000 	.word	0x24000000
 8019c20:	0801767b 	.word	0x0801767b
 8019c24:	240000a0 	.word	0x240000a0
 8019c28:	24025214 	.word	0x24025214
 8019c2c:	08017679 	.word	0x08017679
 8019c30:	240000a4 	.word	0x240000a4

08019c34 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8019c34:	b510      	push	{r4, lr}
 8019c36:	4604      	mov	r4, r0
 8019c38:	f7ff ff88 	bl	8019b4c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8019c3c:	4620      	mov	r0, r4
 8019c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c42:	f7ff bfbd 	b.w	8019bc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08019c48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8019c48:	b538      	push	{r3, r4, r5, lr}
 8019c4a:	4c15      	ldr	r4, [pc, #84]	@ (8019ca0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8019c4c:	4605      	mov	r5, r0
 8019c4e:	7823      	ldrb	r3, [r4, #0]
 8019c50:	f3bf 8f5b 	dmb	ish
 8019c54:	07da      	lsls	r2, r3, #31
 8019c56:	d40b      	bmi.n	8019c70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8019c58:	4620      	mov	r0, r4
 8019c5a:	f005 fedb 	bl	801fa14 <__cxa_guard_acquire>
 8019c5e:	b138      	cbz	r0, 8019c70 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8019c60:	4620      	mov	r0, r4
 8019c62:	f005 fee3 	bl	801fa2c <__cxa_guard_release>
 8019c66:	4a0f      	ldr	r2, [pc, #60]	@ (8019ca4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8019c68:	490f      	ldr	r1, [pc, #60]	@ (8019ca8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8019c6a:	4810      	ldr	r0, [pc, #64]	@ (8019cac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8019c6c:	f005 fecb 	bl	801fa06 <__aeabi_atexit>
 8019c70:	4c0f      	ldr	r4, [pc, #60]	@ (8019cb0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8019c72:	7823      	ldrb	r3, [r4, #0]
 8019c74:	f3bf 8f5b 	dmb	ish
 8019c78:	07db      	lsls	r3, r3, #31
 8019c7a:	d40b      	bmi.n	8019c94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8019c7c:	4620      	mov	r0, r4
 8019c7e:	f005 fec9 	bl	801fa14 <__cxa_guard_acquire>
 8019c82:	b138      	cbz	r0, 8019c94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8019c84:	4620      	mov	r0, r4
 8019c86:	f005 fed1 	bl	801fa2c <__cxa_guard_release>
 8019c8a:	4a06      	ldr	r2, [pc, #24]	@ (8019ca4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8019c8c:	4909      	ldr	r1, [pc, #36]	@ (8019cb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8019c8e:	480a      	ldr	r0, [pc, #40]	@ (8019cb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8019c90:	f005 feb9 	bl	801fa06 <__aeabi_atexit>
 8019c94:	4b05      	ldr	r3, [pc, #20]	@ (8019cac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8019c96:	656b      	str	r3, [r5, #84]	@ 0x54
 8019c98:	4b07      	ldr	r3, [pc, #28]	@ (8019cb8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8019c9a:	65ab      	str	r3, [r5, #88]	@ 0x58
 8019c9c:	bd38      	pop	{r3, r4, r5, pc}
 8019c9e:	bf00      	nop
 8019ca0:	24025208 	.word	0x24025208
 8019ca4:	24000000 	.word	0x24000000
 8019ca8:	0801766f 	.word	0x0801766f
 8019cac:	24000098 	.word	0x24000098
 8019cb0:	2402520c 	.word	0x2402520c
 8019cb4:	0801766d 	.word	0x0801766d
 8019cb8:	2400009c 	.word	0x2400009c

08019cbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8019cbc:	b538      	push	{r3, r4, r5, lr}
 8019cbe:	4c15      	ldr	r4, [pc, #84]	@ (8019d14 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8019cc0:	4605      	mov	r5, r0
 8019cc2:	7823      	ldrb	r3, [r4, #0]
 8019cc4:	f3bf 8f5b 	dmb	ish
 8019cc8:	07da      	lsls	r2, r3, #31
 8019cca:	d40b      	bmi.n	8019ce4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8019ccc:	4620      	mov	r0, r4
 8019cce:	f005 fea1 	bl	801fa14 <__cxa_guard_acquire>
 8019cd2:	b138      	cbz	r0, 8019ce4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8019cd4:	4620      	mov	r0, r4
 8019cd6:	f005 fea9 	bl	801fa2c <__cxa_guard_release>
 8019cda:	4a0f      	ldr	r2, [pc, #60]	@ (8019d18 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8019cdc:	490f      	ldr	r1, [pc, #60]	@ (8019d1c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8019cde:	4810      	ldr	r0, [pc, #64]	@ (8019d20 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8019ce0:	f005 fe91 	bl	801fa06 <__aeabi_atexit>
 8019ce4:	4c0f      	ldr	r4, [pc, #60]	@ (8019d24 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8019ce6:	7823      	ldrb	r3, [r4, #0]
 8019ce8:	f3bf 8f5b 	dmb	ish
 8019cec:	07db      	lsls	r3, r3, #31
 8019cee:	d40b      	bmi.n	8019d08 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8019cf0:	4620      	mov	r0, r4
 8019cf2:	f005 fe8f 	bl	801fa14 <__cxa_guard_acquire>
 8019cf6:	b138      	cbz	r0, 8019d08 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8019cf8:	4620      	mov	r0, r4
 8019cfa:	f005 fe97 	bl	801fa2c <__cxa_guard_release>
 8019cfe:	4a06      	ldr	r2, [pc, #24]	@ (8019d18 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8019d00:	4909      	ldr	r1, [pc, #36]	@ (8019d28 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8019d02:	480a      	ldr	r0, [pc, #40]	@ (8019d2c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8019d04:	f005 fe7f 	bl	801fa06 <__aeabi_atexit>
 8019d08:	4b05      	ldr	r3, [pc, #20]	@ (8019d20 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8019d0a:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8019d0c:	4b07      	ldr	r3, [pc, #28]	@ (8019d2c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8019d0e:	652b      	str	r3, [r5, #80]	@ 0x50
 8019d10:	bd38      	pop	{r3, r4, r5, pc}
 8019d12:	bf00      	nop
 8019d14:	240251f8 	.word	0x240251f8
 8019d18:	24000000 	.word	0x24000000
 8019d1c:	08017673 	.word	0x08017673
 8019d20:	24000088 	.word	0x24000088
 8019d24:	240251fc 	.word	0x240251fc
 8019d28:	08017671 	.word	0x08017671
 8019d2c:	2400008c 	.word	0x2400008c

08019d30 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8019d30:	b510      	push	{r4, lr}
 8019d32:	4604      	mov	r4, r0
 8019d34:	f7ff ff88 	bl	8019c48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8019d38:	4620      	mov	r0, r4
 8019d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d3e:	f7ff bfbd 	b.w	8019cbc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08019d42 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8019d42:	b510      	push	{r4, lr}
 8019d44:	4604      	mov	r4, r0
 8019d46:	f7ff fff3 	bl	8019d30 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8019d4a:	4620      	mov	r0, r4
 8019d4c:	f7ff ff72 	bl	8019c34 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8019d50:	4620      	mov	r0, r4
 8019d52:	f7ff fe73 	bl	8019a3c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8019d56:	4620      	mov	r0, r4
 8019d58:	f7ff fdf2 	bl	8019940 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8019d5c:	4620      	mov	r0, r4
 8019d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d62:	f7ff bee9 	b.w	8019b38 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08019d68 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 8019d68:	b538      	push	{r3, r4, r5, lr}
 8019d6a:	4c0b      	ldr	r4, [pc, #44]	@ (8019d98 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 8019d6c:	4605      	mov	r5, r0
 8019d6e:	7823      	ldrb	r3, [r4, #0]
 8019d70:	f3bf 8f5b 	dmb	ish
 8019d74:	07db      	lsls	r3, r3, #31
 8019d76:	d40b      	bmi.n	8019d90 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8019d78:	4620      	mov	r0, r4
 8019d7a:	f005 fe4b 	bl	801fa14 <__cxa_guard_acquire>
 8019d7e:	b138      	cbz	r0, 8019d90 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8019d80:	4620      	mov	r0, r4
 8019d82:	f005 fe53 	bl	801fa2c <__cxa_guard_release>
 8019d86:	4a05      	ldr	r2, [pc, #20]	@ (8019d9c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8019d88:	4905      	ldr	r1, [pc, #20]	@ (8019da0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 8019d8a:	4806      	ldr	r0, [pc, #24]	@ (8019da4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8019d8c:	f005 fe3b 	bl	801fa06 <__aeabi_atexit>
 8019d90:	4b04      	ldr	r3, [pc, #16]	@ (8019da4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8019d92:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8019d94:	bd38      	pop	{r3, r4, r5, pc}
 8019d96:	bf00      	nop
 8019d98:	240251ec 	.word	0x240251ec
 8019d9c:	24000000 	.word	0x24000000
 8019da0:	0801766b 	.word	0x0801766b
 8019da4:	24000080 	.word	0x24000080

08019da8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8019da8:	b538      	push	{r3, r4, r5, lr}
 8019daa:	4c0b      	ldr	r4, [pc, #44]	@ (8019dd8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 8019dac:	4605      	mov	r5, r0
 8019dae:	7823      	ldrb	r3, [r4, #0]
 8019db0:	f3bf 8f5b 	dmb	ish
 8019db4:	07db      	lsls	r3, r3, #31
 8019db6:	d40b      	bmi.n	8019dd0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8019db8:	4620      	mov	r0, r4
 8019dba:	f005 fe2b 	bl	801fa14 <__cxa_guard_acquire>
 8019dbe:	b138      	cbz	r0, 8019dd0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8019dc0:	4620      	mov	r0, r4
 8019dc2:	f005 fe33 	bl	801fa2c <__cxa_guard_release>
 8019dc6:	4a05      	ldr	r2, [pc, #20]	@ (8019ddc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 8019dc8:	4905      	ldr	r1, [pc, #20]	@ (8019de0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 8019dca:	4806      	ldr	r0, [pc, #24]	@ (8019de4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8019dcc:	f005 fe1b 	bl	801fa06 <__aeabi_atexit>
 8019dd0:	4b04      	ldr	r3, [pc, #16]	@ (8019de4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8019dd2:	662b      	str	r3, [r5, #96]	@ 0x60
 8019dd4:	bd38      	pop	{r3, r4, r5, pc}
 8019dd6:	bf00      	nop
 8019dd8:	240251f0 	.word	0x240251f0
 8019ddc:	24000000 	.word	0x24000000
 8019de0:	08017669 	.word	0x08017669
 8019de4:	24000084 	.word	0x24000084

08019de8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 8019de8:	b570      	push	{r4, r5, r6, lr}
 8019dea:	4d0c      	ldr	r5, [pc, #48]	@ (8019e1c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8019dec:	4606      	mov	r6, r0
 8019dee:	4c0c      	ldr	r4, [pc, #48]	@ (8019e20 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8019df0:	782b      	ldrb	r3, [r5, #0]
 8019df2:	f3bf 8f5b 	dmb	ish
 8019df6:	f013 0f01 	tst.w	r3, #1
 8019dfa:	d10d      	bne.n	8019e18 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8019dfc:	4628      	mov	r0, r5
 8019dfe:	f005 fe09 	bl	801fa14 <__cxa_guard_acquire>
 8019e02:	b148      	cbz	r0, 8019e18 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8019e04:	4b07      	ldr	r3, [pc, #28]	@ (8019e24 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8019e06:	4628      	mov	r0, r5
 8019e08:	6023      	str	r3, [r4, #0]
 8019e0a:	f005 fe0f 	bl	801fa2c <__cxa_guard_release>
 8019e0e:	4a06      	ldr	r2, [pc, #24]	@ (8019e28 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8019e10:	4620      	mov	r0, r4
 8019e12:	4906      	ldr	r1, [pc, #24]	@ (8019e2c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8019e14:	f005 fdf7 	bl	801fa06 <__aeabi_atexit>
 8019e18:	6674      	str	r4, [r6, #100]	@ 0x64
 8019e1a:	bd70      	pop	{r4, r5, r6, pc}
 8019e1c:	240251f4 	.word	0x240251f4
 8019e20:	24025248 	.word	0x24025248
 8019e24:	08023ef4 	.word	0x08023ef4
 8019e28:	24000000 	.word	0x24000000
 8019e2c:	08017667 	.word	0x08017667

08019e30 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 8019e30:	b510      	push	{r4, lr}
 8019e32:	4604      	mov	r4, r0
 8019e34:	f7ff ff98 	bl	8019d68 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 8019e38:	4620      	mov	r0, r4
 8019e3a:	f7ff ffb5 	bl	8019da8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 8019e3e:	4620      	mov	r0, r4
 8019e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e44:	f7ff bfd0 	b.w	8019de8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

08019e48 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8019e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e4c:	b087      	sub	sp, #28
 8019e4e:	788d      	ldrb	r5, [r1, #2]
 8019e50:	f891 9000 	ldrb.w	r9, [r1]
 8019e54:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8019e58:	9501      	str	r5, [sp, #4]
 8019e5a:	784d      	ldrb	r5, [r1, #1]
 8019e5c:	9203      	str	r2, [sp, #12]
 8019e5e:	9502      	str	r5, [sp, #8]
 8019e60:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8019e64:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 8019e68:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8019e6c:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 8019e70:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 8019e74:	fb06 0708 	mla	r7, r6, r8, r0
 8019e78:	2e00      	cmp	r6, #0
 8019e7a:	eb02 0a07 	add.w	sl, r2, r7
 8019e7e:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8019e82:	9d01      	ldr	r5, [sp, #4]
 8019e84:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8019e88:	ea45 0509 	orr.w	r5, r5, r9
 8019e8c:	9505      	str	r5, [sp, #20]
 8019e8e:	f2c0 80b2 	blt.w	8019ff6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8019e92:	45b3      	cmp	fp, r6
 8019e94:	f340 80af 	ble.w	8019ff6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8019e98:	2800      	cmp	r0, #0
 8019e9a:	f2c0 80aa 	blt.w	8019ff2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8019e9e:	4580      	cmp	r8, r0
 8019ea0:	f340 80a7 	ble.w	8019ff2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8019ea4:	9a03      	ldr	r2, [sp, #12]
 8019ea6:	5dd7      	ldrb	r7, [r2, r7]
 8019ea8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019eac:	441f      	add	r7, r3
 8019eae:	1c42      	adds	r2, r0, #1
 8019eb0:	f100 80a4 	bmi.w	8019ffc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8019eb4:	4590      	cmp	r8, r2
 8019eb6:	f340 80a1 	ble.w	8019ffc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8019eba:	2c00      	cmp	r4, #0
 8019ebc:	f000 809e 	beq.w	8019ffc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8019ec0:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8019ec4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019ec8:	441d      	add	r5, r3
 8019eca:	3601      	adds	r6, #1
 8019ecc:	f100 809a 	bmi.w	801a004 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8019ed0:	45b3      	cmp	fp, r6
 8019ed2:	f340 8097 	ble.w	801a004 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8019ed6:	f1bc 0f00 	cmp.w	ip, #0
 8019eda:	f000 8093 	beq.w	801a004 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8019ede:	2800      	cmp	r0, #0
 8019ee0:	f2c0 808e 	blt.w	801a000 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8019ee4:	4580      	cmp	r8, r0
 8019ee6:	f340 808b 	ble.w	801a000 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8019eea:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8019eee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019ef2:	441e      	add	r6, r3
 8019ef4:	3001      	adds	r0, #1
 8019ef6:	f100 8088 	bmi.w	801a00a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8019efa:	4580      	cmp	r8, r0
 8019efc:	f340 8085 	ble.w	801a00a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8019f00:	2c00      	cmp	r4, #0
 8019f02:	f000 8082 	beq.w	801a00a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8019f06:	44d0      	add	r8, sl
 8019f08:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019f0c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019f10:	4413      	add	r3, r2
 8019f12:	b2a4      	uxth	r4, r4
 8019f14:	f895 a000 	ldrb.w	sl, [r5]
 8019f18:	fa1f fc8c 	uxth.w	ip, ip
 8019f1c:	fb04 fb0c 	mul.w	fp, r4, ip
 8019f20:	0124      	lsls	r4, r4, #4
 8019f22:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8019f26:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 8019f2a:	eba4 040b 	sub.w	r4, r4, fp
 8019f2e:	fa1f f08c 	uxth.w	r0, ip
 8019f32:	b2a2      	uxth	r2, r4
 8019f34:	783c      	ldrb	r4, [r7, #0]
 8019f36:	eba8 0800 	sub.w	r8, r8, r0
 8019f3a:	fa1f fc8e 	uxth.w	ip, lr
 8019f3e:	fb02 fa0a 	mul.w	sl, r2, sl
 8019f42:	ea6f 0e0e 	mvn.w	lr, lr
 8019f46:	fa1f f888 	uxth.w	r8, r8
 8019f4a:	fa5f fe8e 	uxtb.w	lr, lr
 8019f4e:	fb08 aa04 	mla	sl, r8, r4, sl
 8019f52:	7834      	ldrb	r4, [r6, #0]
 8019f54:	fb19 f90e 	smulbb	r9, r9, lr
 8019f58:	fb00 aa04 	mla	sl, r0, r4, sl
 8019f5c:	781c      	ldrb	r4, [r3, #0]
 8019f5e:	fb0b a404 	mla	r4, fp, r4, sl
 8019f62:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8019f66:	fb04 990c 	mla	r9, r4, ip, r9
 8019f6a:	fa1f f989 	uxth.w	r9, r9
 8019f6e:	f109 0401 	add.w	r4, r9, #1
 8019f72:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8019f76:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019f7a:	f881 9000 	strb.w	r9, [r1]
 8019f7e:	f895 9001 	ldrb.w	r9, [r5, #1]
 8019f82:	787c      	ldrb	r4, [r7, #1]
 8019f84:	fb02 f909 	mul.w	r9, r2, r9
 8019f88:	fb08 9904 	mla	r9, r8, r4, r9
 8019f8c:	7874      	ldrb	r4, [r6, #1]
 8019f8e:	fb00 9904 	mla	r9, r0, r4, r9
 8019f92:	785c      	ldrb	r4, [r3, #1]
 8019f94:	fb0b 9404 	mla	r4, fp, r4, r9
 8019f98:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8019f9c:	9c02      	ldr	r4, [sp, #8]
 8019f9e:	fb14 f90e 	smulbb	r9, r4, lr
 8019fa2:	fb0a 940c 	mla	r4, sl, ip, r9
 8019fa6:	b2a4      	uxth	r4, r4
 8019fa8:	f104 0901 	add.w	r9, r4, #1
 8019fac:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8019fb0:	1224      	asrs	r4, r4, #8
 8019fb2:	704c      	strb	r4, [r1, #1]
 8019fb4:	78ad      	ldrb	r5, [r5, #2]
 8019fb6:	78bc      	ldrb	r4, [r7, #2]
 8019fb8:	436a      	muls	r2, r5
 8019fba:	789b      	ldrb	r3, [r3, #2]
 8019fbc:	fb08 2204 	mla	r2, r8, r4, r2
 8019fc0:	78b4      	ldrb	r4, [r6, #2]
 8019fc2:	fb00 2004 	mla	r0, r0, r4, r2
 8019fc6:	fb0b 0b03 	mla	fp, fp, r3, r0
 8019fca:	9b01      	ldr	r3, [sp, #4]
 8019fcc:	fb13 fe0e 	smulbb	lr, r3, lr
 8019fd0:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8019fd4:	fb0b ec0c 	mla	ip, fp, ip, lr
 8019fd8:	fa1f fc8c 	uxth.w	ip, ip
 8019fdc:	f10c 0e01 	add.w	lr, ip, #1
 8019fe0:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8019fe4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019fe8:	f881 c002 	strb.w	ip, [r1, #2]
 8019fec:	b007      	add	sp, #28
 8019fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ff2:	af05      	add	r7, sp, #20
 8019ff4:	e75b      	b.n	8019eae <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8019ff6:	ad05      	add	r5, sp, #20
 8019ff8:	462f      	mov	r7, r5
 8019ffa:	e766      	b.n	8019eca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8019ffc:	ad05      	add	r5, sp, #20
 8019ffe:	e764      	b.n	8019eca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801a000:	ae05      	add	r6, sp, #20
 801a002:	e777      	b.n	8019ef4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801a004:	ab05      	add	r3, sp, #20
 801a006:	461e      	mov	r6, r3
 801a008:	e783      	b.n	8019f12 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801a00a:	ab05      	add	r3, sp, #20
 801a00c:	e781      	b.n	8019f12 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801a00e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a00e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a012:	b093      	sub	sp, #76	@ 0x4c
 801a014:	9210      	str	r2, [sp, #64]	@ 0x40
 801a016:	9309      	str	r3, [sp, #36]	@ 0x24
 801a018:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a01a:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801a01e:	9011      	str	r0, [sp, #68]	@ 0x44
 801a020:	930e      	str	r3, [sp, #56]	@ 0x38
 801a022:	6850      	ldr	r0, [r2, #4]
 801a024:	910d      	str	r1, [sp, #52]	@ 0x34
 801a026:	6812      	ldr	r2, [r2, #0]
 801a028:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801a02c:	fb00 1303 	mla	r3, r0, r3, r1
 801a030:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a034:	18d3      	adds	r3, r2, r3
 801a036:	930a      	str	r3, [sp, #40]	@ 0x28
 801a038:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	930c      	str	r3, [sp, #48]	@ 0x30
 801a03e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a040:	685c      	ldr	r4, [r3, #4]
 801a042:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a044:	3404      	adds	r4, #4
 801a046:	43db      	mvns	r3, r3
 801a048:	b2db      	uxtb	r3, r3
 801a04a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a04c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a04e:	2b00      	cmp	r3, #0
 801a050:	dc03      	bgt.n	801a05a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801a052:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a054:	2b00      	cmp	r3, #0
 801a056:	f340 8250 	ble.w	801a4fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801a05a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a05c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a060:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a064:	1e48      	subs	r0, r1, #1
 801a066:	1e55      	subs	r5, r2, #1
 801a068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	f340 80ee 	ble.w	801a24c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a070:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801a072:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a074:	1436      	asrs	r6, r6, #16
 801a076:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a07a:	d406      	bmi.n	801a08a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a07c:	4286      	cmp	r6, r0
 801a07e:	da04      	bge.n	801a08a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a080:	2b00      	cmp	r3, #0
 801a082:	db02      	blt.n	801a08a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a084:	42ab      	cmp	r3, r5
 801a086:	f2c0 80e2 	blt.w	801a24e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801a08a:	3601      	adds	r6, #1
 801a08c:	f100 80cf 	bmi.w	801a22e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a090:	42b1      	cmp	r1, r6
 801a092:	f2c0 80cc 	blt.w	801a22e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a096:	3301      	adds	r3, #1
 801a098:	f100 80c9 	bmi.w	801a22e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a09c:	429a      	cmp	r2, r3
 801a09e:	f2c0 80c6 	blt.w	801a22e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a0a2:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801a0a6:	f1bb 0f00 	cmp.w	fp, #0
 801a0aa:	f340 80f1 	ble.w	801a290 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801a0ae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a0b0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801a0b2:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801a0b4:	141d      	asrs	r5, r3, #16
 801a0b6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a0b8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801a0bc:	68c7      	ldr	r7, [r0, #12]
 801a0be:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801a0c0:	1418      	asrs	r0, r3, #16
 801a0c2:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801a0c6:	6892      	ldr	r2, [r2, #8]
 801a0c8:	f100 8137 	bmi.w	801a33a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a0cc:	f102 3cff 	add.w	ip, r2, #4294967295
 801a0d0:	4560      	cmp	r0, ip
 801a0d2:	f280 8132 	bge.w	801a33a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a0d6:	2d00      	cmp	r5, #0
 801a0d8:	f2c0 812f 	blt.w	801a33a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a0dc:	f107 3cff 	add.w	ip, r7, #4294967295
 801a0e0:	4565      	cmp	r5, ip
 801a0e2:	f280 812a 	bge.w	801a33a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a0e6:	b212      	sxth	r2, r2
 801a0e8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801a0ea:	fb05 0002 	mla	r0, r5, r2, r0
 801a0ee:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801a0f0:	f817 c000 	ldrb.w	ip, [r7, r0]
 801a0f4:	4405      	add	r5, r0
 801a0f6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a0fa:	eb04 0e0c 	add.w	lr, r4, ip
 801a0fe:	f1b8 0f00 	cmp.w	r8, #0
 801a102:	f000 810c 	beq.w	801a31e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801a106:	786f      	ldrb	r7, [r5, #1]
 801a108:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a10c:	4427      	add	r7, r4
 801a10e:	2900      	cmp	r1, #0
 801a110:	f000 810d 	beq.w	801a32e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801a114:	18a8      	adds	r0, r5, r2
 801a116:	5caa      	ldrb	r2, [r5, r2]
 801a118:	7840      	ldrb	r0, [r0, #1]
 801a11a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a11e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a122:	4422      	add	r2, r4
 801a124:	4420      	add	r0, r4
 801a126:	fa1f f388 	uxth.w	r3, r8
 801a12a:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801a12e:	b289      	uxth	r1, r1
 801a130:	f897 c000 	ldrb.w	ip, [r7]
 801a134:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801a138:	fb03 f901 	mul.w	r9, r3, r1
 801a13c:	011b      	lsls	r3, r3, #4
 801a13e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a142:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801a146:	eba3 0309 	sub.w	r3, r3, r9
 801a14a:	b289      	uxth	r1, r1
 801a14c:	b29b      	uxth	r3, r3
 801a14e:	eba8 0801 	sub.w	r8, r8, r1
 801a152:	fb03 fc0c 	mul.w	ip, r3, ip
 801a156:	fa1f f888 	uxth.w	r8, r8
 801a15a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a15c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a15e:	fb08 cc0a 	mla	ip, r8, sl, ip
 801a162:	f892 a000 	ldrb.w	sl, [r2]
 801a166:	fb01 cc0a 	mla	ip, r1, sl, ip
 801a16a:	f890 a000 	ldrb.w	sl, [r0]
 801a16e:	fb09 cc0a 	mla	ip, r9, sl, ip
 801a172:	f896 a000 	ldrb.w	sl, [r6]
 801a176:	fb1a fa03 	smulbb	sl, sl, r3
 801a17a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801a17e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a180:	fb0c ac05 	mla	ip, ip, r5, sl
 801a184:	fa1f fc8c 	uxth.w	ip, ip
 801a188:	f10c 0a01 	add.w	sl, ip, #1
 801a18c:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801a190:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a194:	f886 a000 	strb.w	sl, [r6]
 801a198:	f897 c001 	ldrb.w	ip, [r7, #1]
 801a19c:	f89e a001 	ldrb.w	sl, [lr, #1]
 801a1a0:	fb03 fc0c 	mul.w	ip, r3, ip
 801a1a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a1a6:	fb08 cc0a 	mla	ip, r8, sl, ip
 801a1aa:	f892 a001 	ldrb.w	sl, [r2, #1]
 801a1ae:	fb01 cc0a 	mla	ip, r1, sl, ip
 801a1b2:	f890 a001 	ldrb.w	sl, [r0, #1]
 801a1b6:	fb09 cc0a 	mla	ip, r9, sl, ip
 801a1ba:	f896 a001 	ldrb.w	sl, [r6, #1]
 801a1be:	fb1a fa03 	smulbb	sl, sl, r3
 801a1c2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801a1c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a1c8:	fb0c ac05 	mla	ip, ip, r5, sl
 801a1cc:	fa1f fc8c 	uxth.w	ip, ip
 801a1d0:	f10c 0a01 	add.w	sl, ip, #1
 801a1d4:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801a1d8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a1dc:	f886 c001 	strb.w	ip, [r6, #1]
 801a1e0:	78bf      	ldrb	r7, [r7, #2]
 801a1e2:	f89e c002 	ldrb.w	ip, [lr, #2]
 801a1e6:	437b      	muls	r3, r7
 801a1e8:	fb08 330c 	mla	r3, r8, ip, r3
 801a1ec:	f892 c002 	ldrb.w	ip, [r2, #2]
 801a1f0:	7882      	ldrb	r2, [r0, #2]
 801a1f2:	fb01 310c 	mla	r1, r1, ip, r3
 801a1f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a1f8:	fb09 1902 	mla	r9, r9, r2, r1
 801a1fc:	78b1      	ldrb	r1, [r6, #2]
 801a1fe:	fb11 f103 	smulbb	r1, r1, r3
 801a202:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801a206:	fb09 1505 	mla	r5, r9, r5, r1
 801a20a:	b2ad      	uxth	r5, r5
 801a20c:	1c6b      	adds	r3, r5, #1
 801a20e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801a212:	122d      	asrs	r5, r5, #8
 801a214:	70b5      	strb	r5, [r6, #2]
 801a216:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a218:	3603      	adds	r6, #3
 801a21a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801a21c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a220:	4413      	add	r3, r2
 801a222:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a224:	931d      	str	r3, [sp, #116]	@ 0x74
 801a226:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a228:	4413      	add	r3, r2
 801a22a:	931e      	str	r3, [sp, #120]	@ 0x78
 801a22c:	e73b      	b.n	801a0a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a22e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a230:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801a232:	4433      	add	r3, r6
 801a234:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801a236:	931d      	str	r3, [sp, #116]	@ 0x74
 801a238:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a23a:	4433      	add	r3, r6
 801a23c:	931e      	str	r3, [sp, #120]	@ 0x78
 801a23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a240:	3b01      	subs	r3, #1
 801a242:	9309      	str	r3, [sp, #36]	@ 0x24
 801a244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a246:	3303      	adds	r3, #3
 801a248:	930a      	str	r3, [sp, #40]	@ 0x28
 801a24a:	e70d      	b.n	801a068 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a24c:	d028      	beq.n	801a2a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801a24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a250:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801a252:	3b01      	subs	r3, #1
 801a254:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801a256:	fb00 5003 	mla	r0, r0, r3, r5
 801a25a:	1400      	asrs	r0, r0, #16
 801a25c:	f53f af21 	bmi.w	801a0a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a260:	3901      	subs	r1, #1
 801a262:	4288      	cmp	r0, r1
 801a264:	f6bf af1d 	bge.w	801a0a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a268:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801a26a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801a26c:	fb01 0303 	mla	r3, r1, r3, r0
 801a270:	141b      	asrs	r3, r3, #16
 801a272:	f53f af16 	bmi.w	801a0a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a276:	3a01      	subs	r2, #1
 801a278:	4293      	cmp	r3, r2
 801a27a:	f6bf af12 	bge.w	801a0a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a27e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a280:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801a284:	1cdf      	adds	r7, r3, #3
 801a286:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801a28a:	f1b9 0f00 	cmp.w	r9, #0
 801a28e:	dc73      	bgt.n	801a378 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801a290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a292:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a294:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a298:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a29c:	441a      	add	r2, r3
 801a29e:	920a      	str	r2, [sp, #40]	@ 0x28
 801a2a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	f340 8129 	ble.w	801a4fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801a2a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a2ac:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a2ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a2b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a2b6:	eef0 6a62 	vmov.f32	s13, s5
 801a2ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a2be:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a2c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a2c6:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801a2ca:	eef0 6a43 	vmov.f32	s13, s6
 801a2ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a2d2:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801a2d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a2da:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a2de:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a2e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a2e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a2ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a2ee:	ee12 2a90 	vmov	r2, s5
 801a2f2:	eef0 2a47 	vmov.f32	s5, s14
 801a2f6:	fb92 f3f3 	sdiv	r3, r2, r3
 801a2fa:	ee13 2a10 	vmov	r2, s6
 801a2fe:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a300:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a302:	eeb0 3a67 	vmov.f32	s6, s15
 801a306:	fb92 f3f3 	sdiv	r3, r2, r3
 801a30a:	9320      	str	r3, [sp, #128]	@ 0x80
 801a30c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a30e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a310:	3b01      	subs	r3, #1
 801a312:	930d      	str	r3, [sp, #52]	@ 0x34
 801a314:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a316:	bf08      	it	eq
 801a318:	4613      	moveq	r3, r2
 801a31a:	9309      	str	r3, [sp, #36]	@ 0x24
 801a31c:	e696      	b.n	801a04c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a31e:	b149      	cbz	r1, 801a334 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801a320:	5caa      	ldrb	r2, [r5, r2]
 801a322:	4670      	mov	r0, lr
 801a324:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a328:	4422      	add	r2, r4
 801a32a:	4677      	mov	r7, lr
 801a32c:	e6fb      	b.n	801a126 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801a32e:	4670      	mov	r0, lr
 801a330:	4672      	mov	r2, lr
 801a332:	e6f8      	b.n	801a126 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801a334:	4670      	mov	r0, lr
 801a336:	4672      	mov	r2, lr
 801a338:	e7f7      	b.n	801a32a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801a33a:	f110 0c01 	adds.w	ip, r0, #1
 801a33e:	f53f af6a 	bmi.w	801a216 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a342:	4562      	cmp	r2, ip
 801a344:	f6ff af67 	blt.w	801a216 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a348:	f115 0c01 	adds.w	ip, r5, #1
 801a34c:	f53f af63 	bmi.w	801a216 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a350:	4567      	cmp	r7, ip
 801a352:	f6ff af60 	blt.w	801a216 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a356:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a358:	b23f      	sxth	r7, r7
 801a35a:	b212      	sxth	r2, r2
 801a35c:	9002      	str	r0, [sp, #8]
 801a35e:	9701      	str	r7, [sp, #4]
 801a360:	9200      	str	r2, [sp, #0]
 801a362:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801a364:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a366:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801a36a:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801a36e:	4623      	mov	r3, r4
 801a370:	4631      	mov	r1, r6
 801a372:	f7ff fd69 	bl	8019e48 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801a376:	e74e      	b.n	801a216 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801a378:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801a37a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801a37c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801a380:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801a382:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801a384:	1400      	asrs	r0, r0, #16
 801a386:	142d      	asrs	r5, r5, #16
 801a388:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a38a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801a38e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801a392:	fb02 5000 	mla	r0, r2, r0, r5
 801a396:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801a398:	f815 e000 	ldrb.w	lr, [r5, r0]
 801a39c:	eb05 0c00 	add.w	ip, r5, r0
 801a3a0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a3a4:	eb04 060e 	add.w	r6, r4, lr
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	f000 8097 	beq.w	801a4dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801a3ae:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801a3b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a3b6:	4425      	add	r5, r4
 801a3b8:	2900      	cmp	r1, #0
 801a3ba:	f000 8098 	beq.w	801a4ee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801a3be:	eb0c 0002 	add.w	r0, ip, r2
 801a3c2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a3c6:	7840      	ldrb	r0, [r0, #1]
 801a3c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a3cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a3d0:	4422      	add	r2, r4
 801a3d2:	4420      	add	r0, r4
 801a3d4:	b29b      	uxth	r3, r3
 801a3d6:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801a3da:	b289      	uxth	r1, r1
 801a3dc:	f895 e000 	ldrb.w	lr, [r5]
 801a3e0:	3703      	adds	r7, #3
 801a3e2:	f109 39ff 	add.w	r9, r9, #4294967295
 801a3e6:	fb03 f801 	mul.w	r8, r3, r1
 801a3ea:	011b      	lsls	r3, r3, #4
 801a3ec:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801a3f0:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801a3f4:	eba3 0308 	sub.w	r3, r3, r8
 801a3f8:	b289      	uxth	r1, r1
 801a3fa:	b29b      	uxth	r3, r3
 801a3fc:	ebac 0c01 	sub.w	ip, ip, r1
 801a400:	fb03 fe0e 	mul.w	lr, r3, lr
 801a404:	fa1f fc8c 	uxth.w	ip, ip
 801a408:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a40a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a40c:	fb0c ee0b 	mla	lr, ip, fp, lr
 801a410:	f892 b000 	ldrb.w	fp, [r2]
 801a414:	fb01 ee0b 	mla	lr, r1, fp, lr
 801a418:	f890 b000 	ldrb.w	fp, [r0]
 801a41c:	fb08 ee0b 	mla	lr, r8, fp, lr
 801a420:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801a424:	fb1b fb03 	smulbb	fp, fp, r3
 801a428:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801a42c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a42e:	fb0e be0a 	mla	lr, lr, sl, fp
 801a432:	fa1f fe8e 	uxth.w	lr, lr
 801a436:	f10e 0b01 	add.w	fp, lr, #1
 801a43a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801a43e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a442:	f807 ec06 	strb.w	lr, [r7, #-6]
 801a446:	f895 e001 	ldrb.w	lr, [r5, #1]
 801a44a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801a44e:	fb03 fe0e 	mul.w	lr, r3, lr
 801a452:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a454:	fb0c ee0b 	mla	lr, ip, fp, lr
 801a458:	f892 b001 	ldrb.w	fp, [r2, #1]
 801a45c:	fb01 ee0b 	mla	lr, r1, fp, lr
 801a460:	f890 b001 	ldrb.w	fp, [r0, #1]
 801a464:	fb08 ee0b 	mla	lr, r8, fp, lr
 801a468:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801a46c:	fb1b fb03 	smulbb	fp, fp, r3
 801a470:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801a474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a476:	fb0e be0a 	mla	lr, lr, sl, fp
 801a47a:	fa1f fe8e 	uxth.w	lr, lr
 801a47e:	f10e 0b01 	add.w	fp, lr, #1
 801a482:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801a486:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a48a:	f807 ec05 	strb.w	lr, [r7, #-5]
 801a48e:	78ad      	ldrb	r5, [r5, #2]
 801a490:	78b6      	ldrb	r6, [r6, #2]
 801a492:	436b      	muls	r3, r5
 801a494:	7895      	ldrb	r5, [r2, #2]
 801a496:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a498:	fb0c 3306 	mla	r3, ip, r6, r3
 801a49c:	fb01 3305 	mla	r3, r1, r5, r3
 801a4a0:	7885      	ldrb	r5, [r0, #2]
 801a4a2:	fb08 3805 	mla	r8, r8, r5, r3
 801a4a6:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801a4aa:	fb13 f302 	smulbb	r3, r3, r2
 801a4ae:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801a4b2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801a4b4:	fb08 380a 	mla	r8, r8, sl, r3
 801a4b8:	fa1f f888 	uxth.w	r8, r8
 801a4bc:	f108 0301 	add.w	r3, r8, #1
 801a4c0:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801a4c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a4c6:	4413      	add	r3, r2
 801a4c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a4ca:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a4ce:	931d      	str	r3, [sp, #116]	@ 0x74
 801a4d0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a4d2:	f807 8c04 	strb.w	r8, [r7, #-4]
 801a4d6:	4413      	add	r3, r2
 801a4d8:	931e      	str	r3, [sp, #120]	@ 0x78
 801a4da:	e6d6      	b.n	801a28a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801a4dc:	b151      	cbz	r1, 801a4f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801a4de:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a4e2:	4630      	mov	r0, r6
 801a4e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a4e8:	4422      	add	r2, r4
 801a4ea:	4635      	mov	r5, r6
 801a4ec:	e772      	b.n	801a3d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801a4ee:	4630      	mov	r0, r6
 801a4f0:	4632      	mov	r2, r6
 801a4f2:	e76f      	b.n	801a3d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801a4f4:	4630      	mov	r0, r6
 801a4f6:	4632      	mov	r2, r6
 801a4f8:	e7f7      	b.n	801a4ea <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801a4fa:	b013      	add	sp, #76	@ 0x4c
 801a4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a500 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801a500:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801a504:	784c      	ldrb	r4, [r1, #1]
 801a506:	f891 a002 	ldrb.w	sl, [r1, #2]
 801a50a:	0224      	lsls	r4, r4, #8
 801a50c:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801a510:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801a514:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801a518:	f891 a000 	ldrb.w	sl, [r1]
 801a51c:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801a520:	ea44 040a 	orr.w	r4, r4, sl
 801a524:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801a528:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801a52c:	9401      	str	r4, [sp, #4]
 801a52e:	fb05 c70e 	mla	r7, r5, lr, ip
 801a532:	2d00      	cmp	r5, #0
 801a534:	eb02 0807 	add.w	r8, r2, r7
 801a538:	db72      	blt.n	801a620 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801a53a:	45a9      	cmp	r9, r5
 801a53c:	dd70      	ble.n	801a620 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801a53e:	f1bc 0f00 	cmp.w	ip, #0
 801a542:	db6b      	blt.n	801a61c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801a544:	45e6      	cmp	lr, ip
 801a546:	dd69      	ble.n	801a61c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801a548:	5dd7      	ldrb	r7, [r2, r7]
 801a54a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a54e:	441f      	add	r7, r3
 801a550:	f11c 0201 	adds.w	r2, ip, #1
 801a554:	d467      	bmi.n	801a626 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801a556:	4596      	cmp	lr, r2
 801a558:	dd65      	ble.n	801a626 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801a55a:	2800      	cmp	r0, #0
 801a55c:	d063      	beq.n	801a626 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801a55e:	f898 4001 	ldrb.w	r4, [r8, #1]
 801a562:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a566:	441c      	add	r4, r3
 801a568:	3501      	adds	r5, #1
 801a56a:	d460      	bmi.n	801a62e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801a56c:	45a9      	cmp	r9, r5
 801a56e:	dd5e      	ble.n	801a62e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801a570:	2e00      	cmp	r6, #0
 801a572:	d05c      	beq.n	801a62e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801a574:	f1bc 0f00 	cmp.w	ip, #0
 801a578:	db57      	blt.n	801a62a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801a57a:	45e6      	cmp	lr, ip
 801a57c:	dd55      	ble.n	801a62a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801a57e:	f818 500e 	ldrb.w	r5, [r8, lr]
 801a582:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a586:	441d      	add	r5, r3
 801a588:	f11c 0201 	adds.w	r2, ip, #1
 801a58c:	d452      	bmi.n	801a634 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801a58e:	4596      	cmp	lr, r2
 801a590:	dd50      	ble.n	801a634 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801a592:	2800      	cmp	r0, #0
 801a594:	d04e      	beq.n	801a634 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801a596:	44c6      	add	lr, r8
 801a598:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801a59c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a5a0:	4413      	add	r3, r2
 801a5a2:	b280      	uxth	r0, r0
 801a5a4:	f897 8000 	ldrb.w	r8, [r7]
 801a5a8:	b2b2      	uxth	r2, r6
 801a5aa:	fb00 f602 	mul.w	r6, r0, r2
 801a5ae:	0100      	lsls	r0, r0, #4
 801a5b0:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801a5b4:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801a5b8:	1b80      	subs	r0, r0, r6
 801a5ba:	fa1f fc82 	uxth.w	ip, r2
 801a5be:	b282      	uxth	r2, r0
 801a5c0:	7820      	ldrb	r0, [r4, #0]
 801a5c2:	ebae 0e0c 	sub.w	lr, lr, ip
 801a5c6:	4350      	muls	r0, r2
 801a5c8:	fa1f fe8e 	uxth.w	lr, lr
 801a5cc:	fb0e 0808 	mla	r8, lr, r8, r0
 801a5d0:	7828      	ldrb	r0, [r5, #0]
 801a5d2:	fb0c 8800 	mla	r8, ip, r0, r8
 801a5d6:	7818      	ldrb	r0, [r3, #0]
 801a5d8:	fb06 8000 	mla	r0, r6, r0, r8
 801a5dc:	1200      	asrs	r0, r0, #8
 801a5de:	7008      	strb	r0, [r1, #0]
 801a5e0:	7860      	ldrb	r0, [r4, #1]
 801a5e2:	f897 8001 	ldrb.w	r8, [r7, #1]
 801a5e6:	4350      	muls	r0, r2
 801a5e8:	fb0e 0808 	mla	r8, lr, r8, r0
 801a5ec:	7868      	ldrb	r0, [r5, #1]
 801a5ee:	fb0c 8800 	mla	r8, ip, r0, r8
 801a5f2:	7858      	ldrb	r0, [r3, #1]
 801a5f4:	fb06 8000 	mla	r0, r6, r0, r8
 801a5f8:	1200      	asrs	r0, r0, #8
 801a5fa:	7048      	strb	r0, [r1, #1]
 801a5fc:	78a0      	ldrb	r0, [r4, #2]
 801a5fe:	78bf      	ldrb	r7, [r7, #2]
 801a600:	4350      	muls	r0, r2
 801a602:	78aa      	ldrb	r2, [r5, #2]
 801a604:	fb0e 0007 	mla	r0, lr, r7, r0
 801a608:	fb0c 0c02 	mla	ip, ip, r2, r0
 801a60c:	789a      	ldrb	r2, [r3, #2]
 801a60e:	fb06 c202 	mla	r2, r6, r2, ip
 801a612:	1212      	asrs	r2, r2, #8
 801a614:	708a      	strb	r2, [r1, #2]
 801a616:	b002      	add	sp, #8
 801a618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a61c:	af01      	add	r7, sp, #4
 801a61e:	e797      	b.n	801a550 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801a620:	ac01      	add	r4, sp, #4
 801a622:	4627      	mov	r7, r4
 801a624:	e7a0      	b.n	801a568 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801a626:	ac01      	add	r4, sp, #4
 801a628:	e79e      	b.n	801a568 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801a62a:	ad01      	add	r5, sp, #4
 801a62c:	e7ac      	b.n	801a588 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801a62e:	ab01      	add	r3, sp, #4
 801a630:	461d      	mov	r5, r3
 801a632:	e7b6      	b.n	801a5a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801a634:	ab01      	add	r3, sp, #4
 801a636:	e7b4      	b.n	801a5a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801a638 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a63c:	b08d      	sub	sp, #52	@ 0x34
 801a63e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a642:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801a646:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a648:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a64a:	9306      	str	r3, [sp, #24]
 801a64c:	6850      	ldr	r0, [r2, #4]
 801a64e:	6812      	ldr	r2, [r2, #0]
 801a650:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801a652:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801a656:	fb00 1303 	mla	r3, r0, r3, r1
 801a65a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a65e:	18d3      	adds	r3, r2, r3
 801a660:	9307      	str	r3, [sp, #28]
 801a662:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	9308      	str	r3, [sp, #32]
 801a668:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a66a:	685d      	ldr	r5, [r3, #4]
 801a66c:	3504      	adds	r5, #4
 801a66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a670:	2b00      	cmp	r3, #0
 801a672:	dc03      	bgt.n	801a67c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801a674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a676:	2b00      	cmp	r3, #0
 801a678:	f340 81e6 	ble.w	801aa48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801a67c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a67e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a682:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a686:	1e48      	subs	r0, r1, #1
 801a688:	1e56      	subs	r6, r2, #1
 801a68a:	9b06      	ldr	r3, [sp, #24]
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	f340 80bd 	ble.w	801a80c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801a692:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a694:	1427      	asrs	r7, r4, #16
 801a696:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a69a:	d406      	bmi.n	801a6aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a69c:	4287      	cmp	r7, r0
 801a69e:	da04      	bge.n	801a6aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	db02      	blt.n	801a6aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a6a4:	42b3      	cmp	r3, r6
 801a6a6:	f2c0 80b2 	blt.w	801a80e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801a6aa:	3701      	adds	r7, #1
 801a6ac:	f100 80a1 	bmi.w	801a7f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801a6b0:	42b9      	cmp	r1, r7
 801a6b2:	f2c0 809e 	blt.w	801a7f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801a6b6:	3301      	adds	r3, #1
 801a6b8:	f100 809b 	bmi.w	801a7f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801a6bc:	429a      	cmp	r2, r3
 801a6be:	f2c0 8098 	blt.w	801a7f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801a6c2:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801a6c6:	f1bb 0f00 	cmp.w	fp, #0
 801a6ca:	f340 80bf 	ble.w	801a84c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801a6ce:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a6d0:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801a6d2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a6d4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801a6d8:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801a6dc:	1420      	asrs	r0, r4, #16
 801a6de:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801a6e0:	ea4f 4723 	mov.w	r7, r3, asr #16
 801a6e4:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801a6e8:	6892      	ldr	r2, [r2, #8]
 801a6ea:	f100 8103 	bmi.w	801a8f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801a6ee:	f102 3eff 	add.w	lr, r2, #4294967295
 801a6f2:	4570      	cmp	r0, lr
 801a6f4:	f280 80fe 	bge.w	801a8f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801a6f8:	2f00      	cmp	r7, #0
 801a6fa:	f2c0 80fb 	blt.w	801a8f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801a6fe:	f10c 3eff 	add.w	lr, ip, #4294967295
 801a702:	4577      	cmp	r7, lr
 801a704:	f280 80f6 	bge.w	801a8f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801a708:	b212      	sxth	r2, r2
 801a70a:	fb07 0002 	mla	r0, r7, r2, r0
 801a70e:	9f08      	ldr	r7, [sp, #32]
 801a710:	f817 8000 	ldrb.w	r8, [r7, r0]
 801a714:	eb07 0e00 	add.w	lr, r7, r0
 801a718:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a71c:	eb05 0c08 	add.w	ip, r5, r8
 801a720:	2b00      	cmp	r3, #0
 801a722:	f000 80d8 	beq.w	801a8d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801a726:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801a72a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a72e:	442f      	add	r7, r5
 801a730:	2900      	cmp	r1, #0
 801a732:	f000 80d9 	beq.w	801a8e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801a736:	eb0e 0002 	add.w	r0, lr, r2
 801a73a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801a73e:	7840      	ldrb	r0, [r0, #1]
 801a740:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a744:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a748:	442a      	add	r2, r5
 801a74a:	4428      	add	r0, r5
 801a74c:	b29b      	uxth	r3, r3
 801a74e:	f815 a008 	ldrb.w	sl, [r5, r8]
 801a752:	b289      	uxth	r1, r1
 801a754:	f897 8000 	ldrb.w	r8, [r7]
 801a758:	fb03 f901 	mul.w	r9, r3, r1
 801a75c:	011b      	lsls	r3, r3, #4
 801a75e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a762:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801a766:	eba3 0309 	sub.w	r3, r3, r9
 801a76a:	b289      	uxth	r1, r1
 801a76c:	b29b      	uxth	r3, r3
 801a76e:	ebae 0e01 	sub.w	lr, lr, r1
 801a772:	fb03 f808 	mul.w	r8, r3, r8
 801a776:	fa1f fe8e 	uxth.w	lr, lr
 801a77a:	fb0e 880a 	mla	r8, lr, sl, r8
 801a77e:	f892 a000 	ldrb.w	sl, [r2]
 801a782:	fb01 880a 	mla	r8, r1, sl, r8
 801a786:	f890 a000 	ldrb.w	sl, [r0]
 801a78a:	fb09 880a 	mla	r8, r9, sl, r8
 801a78e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a792:	f886 8000 	strb.w	r8, [r6]
 801a796:	f897 8001 	ldrb.w	r8, [r7, #1]
 801a79a:	f89c a001 	ldrb.w	sl, [ip, #1]
 801a79e:	fb03 f808 	mul.w	r8, r3, r8
 801a7a2:	fb0e 880a 	mla	r8, lr, sl, r8
 801a7a6:	f892 a001 	ldrb.w	sl, [r2, #1]
 801a7aa:	fb01 880a 	mla	r8, r1, sl, r8
 801a7ae:	f890 a001 	ldrb.w	sl, [r0, #1]
 801a7b2:	fb09 880a 	mla	r8, r9, sl, r8
 801a7b6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a7ba:	f886 8001 	strb.w	r8, [r6, #1]
 801a7be:	78bf      	ldrb	r7, [r7, #2]
 801a7c0:	f89c c002 	ldrb.w	ip, [ip, #2]
 801a7c4:	437b      	muls	r3, r7
 801a7c6:	7892      	ldrb	r2, [r2, #2]
 801a7c8:	fb0e 330c 	mla	r3, lr, ip, r3
 801a7cc:	fb01 3102 	mla	r1, r1, r2, r3
 801a7d0:	7882      	ldrb	r2, [r0, #2]
 801a7d2:	fb09 1902 	mla	r9, r9, r2, r1
 801a7d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a7da:	f886 9002 	strb.w	r9, [r6, #2]
 801a7de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a7e0:	3603      	adds	r6, #3
 801a7e2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a7e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a7e8:	441c      	add	r4, r3
 801a7ea:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a7ec:	4413      	add	r3, r2
 801a7ee:	9318      	str	r3, [sp, #96]	@ 0x60
 801a7f0:	e769      	b.n	801a6c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801a7f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a7f4:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801a7f6:	441c      	add	r4, r3
 801a7f8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a7fa:	443b      	add	r3, r7
 801a7fc:	9318      	str	r3, [sp, #96]	@ 0x60
 801a7fe:	9b06      	ldr	r3, [sp, #24]
 801a800:	3b01      	subs	r3, #1
 801a802:	9306      	str	r3, [sp, #24]
 801a804:	9b07      	ldr	r3, [sp, #28]
 801a806:	3303      	adds	r3, #3
 801a808:	9307      	str	r3, [sp, #28]
 801a80a:	e73e      	b.n	801a68a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a80c:	d026      	beq.n	801a85c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801a80e:	9b06      	ldr	r3, [sp, #24]
 801a810:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801a812:	3b01      	subs	r3, #1
 801a814:	fb00 4003 	mla	r0, r0, r3, r4
 801a818:	1400      	asrs	r0, r0, #16
 801a81a:	f53f af52 	bmi.w	801a6c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a81e:	3901      	subs	r1, #1
 801a820:	4288      	cmp	r0, r1
 801a822:	f6bf af4e 	bge.w	801a6c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a826:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a828:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801a82a:	fb01 0303 	mla	r3, r1, r3, r0
 801a82e:	141b      	asrs	r3, r3, #16
 801a830:	f53f af47 	bmi.w	801a6c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a834:	3a01      	subs	r2, #1
 801a836:	4293      	cmp	r3, r2
 801a838:	f6bf af43 	bge.w	801a6c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a83c:	9b07      	ldr	r3, [sp, #28]
 801a83e:	f8dd a018 	ldr.w	sl, [sp, #24]
 801a842:	f103 0803 	add.w	r8, r3, #3
 801a846:	f1ba 0f00 	cmp.w	sl, #0
 801a84a:	dc71      	bgt.n	801a930 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801a84c:	9b06      	ldr	r3, [sp, #24]
 801a84e:	9a07      	ldr	r2, [sp, #28]
 801a850:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a854:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a858:	441a      	add	r2, r3
 801a85a:	9207      	str	r2, [sp, #28]
 801a85c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a85e:	2b00      	cmp	r3, #0
 801a860:	f340 80f2 	ble.w	801aa48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801a864:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a868:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a86a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a86e:	eeb0 6a62 	vmov.f32	s12, s5
 801a872:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a876:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a87a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a87e:	ee16 4a10 	vmov	r4, s12
 801a882:	eeb0 6a43 	vmov.f32	s12, s6
 801a886:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a88a:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801a88e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a892:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a896:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a89a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a89e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a8a2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a8a6:	ee12 2a90 	vmov	r2, s5
 801a8aa:	eef0 2a47 	vmov.f32	s5, s14
 801a8ae:	fb92 f3f3 	sdiv	r3, r2, r3
 801a8b2:	ee13 2a10 	vmov	r2, s6
 801a8b6:	9319      	str	r3, [sp, #100]	@ 0x64
 801a8b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a8ba:	eeb0 3a67 	vmov.f32	s6, s15
 801a8be:	fb92 f3f3 	sdiv	r3, r2, r3
 801a8c2:	931a      	str	r3, [sp, #104]	@ 0x68
 801a8c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a8c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a8c8:	3b01      	subs	r3, #1
 801a8ca:	9309      	str	r3, [sp, #36]	@ 0x24
 801a8cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a8ce:	bf08      	it	eq
 801a8d0:	4613      	moveq	r3, r2
 801a8d2:	9306      	str	r3, [sp, #24]
 801a8d4:	e6cb      	b.n	801a66e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801a8d6:	b151      	cbz	r1, 801a8ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801a8d8:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801a8dc:	4660      	mov	r0, ip
 801a8de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a8e2:	442a      	add	r2, r5
 801a8e4:	4667      	mov	r7, ip
 801a8e6:	e731      	b.n	801a74c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801a8e8:	4660      	mov	r0, ip
 801a8ea:	4662      	mov	r2, ip
 801a8ec:	e72e      	b.n	801a74c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801a8ee:	4660      	mov	r0, ip
 801a8f0:	4662      	mov	r2, ip
 801a8f2:	e7f7      	b.n	801a8e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801a8f4:	f110 0e01 	adds.w	lr, r0, #1
 801a8f8:	f53f af71 	bmi.w	801a7de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801a8fc:	4572      	cmp	r2, lr
 801a8fe:	f6ff af6e 	blt.w	801a7de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801a902:	f117 0e01 	adds.w	lr, r7, #1
 801a906:	f53f af6a 	bmi.w	801a7de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801a90a:	45f4      	cmp	ip, lr
 801a90c:	f6ff af67 	blt.w	801a7de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801a910:	b212      	sxth	r2, r2
 801a912:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801a916:	fa0f f38c 	sxth.w	r3, ip
 801a91a:	9200      	str	r2, [sp, #0]
 801a91c:	4631      	mov	r1, r6
 801a91e:	9a08      	ldr	r2, [sp, #32]
 801a920:	9301      	str	r3, [sp, #4]
 801a922:	462b      	mov	r3, r5
 801a924:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801a928:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801a92a:	f7ff fde9 	bl	801a500 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801a92e:	e756      	b.n	801a7de <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801a930:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a932:	1426      	asrs	r6, r4, #16
 801a934:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801a936:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801a93a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801a93e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801a940:	1400      	asrs	r0, r0, #16
 801a942:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801a946:	fb02 6000 	mla	r0, r2, r0, r6
 801a94a:	9e08      	ldr	r6, [sp, #32]
 801a94c:	f816 e000 	ldrb.w	lr, [r6, r0]
 801a950:	eb06 0c00 	add.w	ip, r6, r0
 801a954:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a958:	eb05 070e 	add.w	r7, r5, lr
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d064      	beq.n	801aa2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801a960:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801a964:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a968:	442e      	add	r6, r5
 801a96a:	2900      	cmp	r1, #0
 801a96c:	d066      	beq.n	801aa3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801a96e:	eb0c 0002 	add.w	r0, ip, r2
 801a972:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a976:	7840      	ldrb	r0, [r0, #1]
 801a978:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a97c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a980:	442a      	add	r2, r5
 801a982:	4428      	add	r0, r5
 801a984:	b29b      	uxth	r3, r3
 801a986:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801a98a:	b289      	uxth	r1, r1
 801a98c:	f896 e000 	ldrb.w	lr, [r6]
 801a990:	f108 0803 	add.w	r8, r8, #3
 801a994:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a998:	fb03 f901 	mul.w	r9, r3, r1
 801a99c:	011b      	lsls	r3, r3, #4
 801a99e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a9a2:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801a9a6:	eba3 0309 	sub.w	r3, r3, r9
 801a9aa:	b289      	uxth	r1, r1
 801a9ac:	b29b      	uxth	r3, r3
 801a9ae:	ebac 0c01 	sub.w	ip, ip, r1
 801a9b2:	fb03 fe0e 	mul.w	lr, r3, lr
 801a9b6:	fa1f fc8c 	uxth.w	ip, ip
 801a9ba:	fb0c ee0b 	mla	lr, ip, fp, lr
 801a9be:	f892 b000 	ldrb.w	fp, [r2]
 801a9c2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801a9c6:	f890 b000 	ldrb.w	fp, [r0]
 801a9ca:	fb09 ee0b 	mla	lr, r9, fp, lr
 801a9ce:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a9d2:	f808 ec06 	strb.w	lr, [r8, #-6]
 801a9d6:	f896 e001 	ldrb.w	lr, [r6, #1]
 801a9da:	f897 b001 	ldrb.w	fp, [r7, #1]
 801a9de:	fb03 fe0e 	mul.w	lr, r3, lr
 801a9e2:	fb0c ee0b 	mla	lr, ip, fp, lr
 801a9e6:	f892 b001 	ldrb.w	fp, [r2, #1]
 801a9ea:	fb01 ee0b 	mla	lr, r1, fp, lr
 801a9ee:	f890 b001 	ldrb.w	fp, [r0, #1]
 801a9f2:	fb09 ee0b 	mla	lr, r9, fp, lr
 801a9f6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a9fa:	f808 ec05 	strb.w	lr, [r8, #-5]
 801a9fe:	78b6      	ldrb	r6, [r6, #2]
 801aa00:	78bf      	ldrb	r7, [r7, #2]
 801aa02:	4373      	muls	r3, r6
 801aa04:	7896      	ldrb	r6, [r2, #2]
 801aa06:	7882      	ldrb	r2, [r0, #2]
 801aa08:	fb0c 3307 	mla	r3, ip, r7, r3
 801aa0c:	fb01 3306 	mla	r3, r1, r6, r3
 801aa10:	fb09 3902 	mla	r9, r9, r2, r3
 801aa14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801aa16:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801aa18:	441c      	add	r4, r3
 801aa1a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801aa1c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aa20:	4413      	add	r3, r2
 801aa22:	f808 9c04 	strb.w	r9, [r8, #-4]
 801aa26:	9318      	str	r3, [sp, #96]	@ 0x60
 801aa28:	e70d      	b.n	801a846 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801aa2a:	b151      	cbz	r1, 801aa42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801aa2c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801aa30:	4638      	mov	r0, r7
 801aa32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801aa36:	442a      	add	r2, r5
 801aa38:	463e      	mov	r6, r7
 801aa3a:	e7a3      	b.n	801a984 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801aa3c:	4638      	mov	r0, r7
 801aa3e:	463a      	mov	r2, r7
 801aa40:	e7a0      	b.n	801a984 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801aa42:	4638      	mov	r0, r7
 801aa44:	463a      	mov	r2, r7
 801aa46:	e7f7      	b.n	801aa38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801aa48:	b00d      	add	sp, #52	@ 0x34
 801aa4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aa4e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801aa4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa52:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801aa56:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801aa5a:	2d00      	cmp	r5, #0
 801aa5c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801aa60:	fb05 700c 	mla	r0, r5, ip, r7
 801aa64:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801aa68:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801aa6c:	eb02 0800 	add.w	r8, r2, r0
 801aa70:	f2c0 8118 	blt.w	801aca4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801aa74:	45a9      	cmp	r9, r5
 801aa76:	f340 8115 	ble.w	801aca4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801aa7a:	2f00      	cmp	r7, #0
 801aa7c:	f2c0 8110 	blt.w	801aca0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801aa80:	45bc      	cmp	ip, r7
 801aa82:	f340 810d 	ble.w	801aca0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801aa86:	5c12      	ldrb	r2, [r2, r0]
 801aa88:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801aa8c:	1c7a      	adds	r2, r7, #1
 801aa8e:	f100 810c 	bmi.w	801acaa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801aa92:	4594      	cmp	ip, r2
 801aa94:	f340 8109 	ble.w	801acaa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801aa98:	2c00      	cmp	r4, #0
 801aa9a:	f000 8108 	beq.w	801acae <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801aa9e:	f898 2001 	ldrb.w	r2, [r8, #1]
 801aaa2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801aaa6:	3501      	adds	r5, #1
 801aaa8:	f100 8105 	bmi.w	801acb6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801aaac:	45a9      	cmp	r9, r5
 801aaae:	f340 8102 	ble.w	801acb6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801aab2:	f1be 0f00 	cmp.w	lr, #0
 801aab6:	f000 8101 	beq.w	801acbc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801aaba:	2f00      	cmp	r7, #0
 801aabc:	f2c0 80f9 	blt.w	801acb2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801aac0:	45bc      	cmp	ip, r7
 801aac2:	f340 80f6 	ble.w	801acb2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801aac6:	f818 200c 	ldrb.w	r2, [r8, ip]
 801aaca:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801aace:	3701      	adds	r7, #1
 801aad0:	f100 80f7 	bmi.w	801acc2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801aad4:	45bc      	cmp	ip, r7
 801aad6:	f340 80f4 	ble.w	801acc2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801aada:	2c00      	cmp	r4, #0
 801aadc:	f000 80f3 	beq.w	801acc6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801aae0:	44c4      	add	ip, r8
 801aae2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801aae6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801aaea:	fa1f fc84 	uxth.w	ip, r4
 801aaee:	fa1f f48e 	uxth.w	r4, lr
 801aaf2:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801aaf6:	fb04 fe0c 	mul.w	lr, r4, ip
 801aafa:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801aafe:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801ab02:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801ab06:	ebac 070e 	sub.w	r7, ip, lr
 801ab0a:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801ab0e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801ab12:	b2a4      	uxth	r4, r4
 801ab14:	b2bf      	uxth	r7, r7
 801ab16:	1b1b      	subs	r3, r3, r4
 801ab18:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801ab1c:	fb07 fc0a 	mul.w	ip, r7, sl
 801ab20:	b29b      	uxth	r3, r3
 801ab22:	fb03 cc0b 	mla	ip, r3, fp, ip
 801ab26:	9300      	str	r3, [sp, #0]
 801ab28:	fb04 cc09 	mla	ip, r4, r9, ip
 801ab2c:	fb0e cc08 	mla	ip, lr, r8, ip
 801ab30:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ab34:	9301      	str	r3, [sp, #4]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	f000 80af 	beq.w	801ac9a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801ab3c:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801ab40:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801ab44:	fb0b fc0c 	mul.w	ip, fp, ip
 801ab48:	fb0b f606 	mul.w	r6, fp, r6
 801ab4c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801ab50:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801ab54:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801ab58:	44dc      	add	ip, fp
 801ab5a:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801ab5e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801ab62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ab66:	fb0a fb0b 	mul.w	fp, sl, fp
 801ab6a:	fb0a fa00 	mul.w	sl, sl, r0
 801ab6e:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801ab72:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801ab76:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801ab7a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ab7e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801ab82:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ab86:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801ab8a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ab8e:	0a36      	lsrs	r6, r6, #8
 801ab90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ab94:	44dc      	add	ip, fp
 801ab96:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801ab9a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801ab9e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801aba2:	fb09 fb0b 	mul.w	fp, r9, fp
 801aba6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801abaa:	fb09 f905 	mul.w	r9, r9, r5
 801abae:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801abb2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801abb6:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801abba:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801abbe:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801abc2:	fb0c fc07 	mul.w	ip, ip, r7
 801abc6:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801abca:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801abce:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801abd2:	4458      	add	r0, fp
 801abd4:	fb08 f505 	mul.w	r5, r8, r5
 801abd8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801abdc:	fb08 f802 	mul.w	r8, r8, r2
 801abe0:	0a00      	lsrs	r0, r0, #8
 801abe2:	0a2a      	lsrs	r2, r5, #8
 801abe4:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801abe8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801abec:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801abf0:	4415      	add	r5, r2
 801abf2:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801abf6:	0a2d      	lsrs	r5, r5, #8
 801abf8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801abfc:	9a00      	ldr	r2, [sp, #0]
 801abfe:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801ac02:	fb03 cc02 	mla	ip, r3, r2, ip
 801ac06:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ac0a:	9b01      	ldr	r3, [sp, #4]
 801ac0c:	fb05 c50e 	mla	r5, r5, lr, ip
 801ac10:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801ac14:	fb00 5004 	mla	r0, r0, r4, r5
 801ac18:	0a00      	lsrs	r0, r0, #8
 801ac1a:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801ac1e:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801ac22:	4378      	muls	r0, r7
 801ac24:	fb02 0006 	mla	r0, r2, r6, r0
 801ac28:	fb0e 0e08 	mla	lr, lr, r8, r0
 801ac2c:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801ac30:	fb04 e000 	mla	r0, r4, r0, lr
 801ac34:	0a00      	lsrs	r0, r0, #8
 801ac36:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801ac3a:	4328      	orrs	r0, r5
 801ac3c:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801ac40:	b2ad      	uxth	r5, r5
 801ac42:	b2c4      	uxtb	r4, r0
 801ac44:	436b      	muls	r3, r5
 801ac46:	fb14 f405 	smulbb	r4, r4, r5
 801ac4a:	1c5a      	adds	r2, r3, #1
 801ac4c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ac50:	780b      	ldrb	r3, [r1, #0]
 801ac52:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801ac56:	b2d2      	uxtb	r2, r2
 801ac58:	fb03 4302 	mla	r3, r3, r2, r4
 801ac5c:	b29b      	uxth	r3, r3
 801ac5e:	1c5c      	adds	r4, r3, #1
 801ac60:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801ac64:	784c      	ldrb	r4, [r1, #1]
 801ac66:	fb14 f402 	smulbb	r4, r4, r2
 801ac6a:	121b      	asrs	r3, r3, #8
 801ac6c:	700b      	strb	r3, [r1, #0]
 801ac6e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801ac72:	fb03 4305 	mla	r3, r3, r5, r4
 801ac76:	b29b      	uxth	r3, r3
 801ac78:	1c5c      	adds	r4, r3, #1
 801ac7a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801ac7e:	0c04      	lsrs	r4, r0, #16
 801ac80:	7888      	ldrb	r0, [r1, #2]
 801ac82:	121b      	asrs	r3, r3, #8
 801ac84:	fb10 f002 	smulbb	r0, r0, r2
 801ac88:	704b      	strb	r3, [r1, #1]
 801ac8a:	fb04 0005 	mla	r0, r4, r5, r0
 801ac8e:	b280      	uxth	r0, r0
 801ac90:	1c43      	adds	r3, r0, #1
 801ac92:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ac96:	1200      	asrs	r0, r0, #8
 801ac98:	7088      	strb	r0, [r1, #2]
 801ac9a:	b003      	add	sp, #12
 801ac9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aca0:	2600      	movs	r6, #0
 801aca2:	e6f3      	b.n	801aa8c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801aca4:	2000      	movs	r0, #0
 801aca6:	4606      	mov	r6, r0
 801aca8:	e6fd      	b.n	801aaa6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801acaa:	2000      	movs	r0, #0
 801acac:	e6fb      	b.n	801aaa6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801acae:	4620      	mov	r0, r4
 801acb0:	e6f9      	b.n	801aaa6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801acb2:	2500      	movs	r5, #0
 801acb4:	e70b      	b.n	801aace <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801acb6:	2200      	movs	r2, #0
 801acb8:	4615      	mov	r5, r2
 801acba:	e716      	b.n	801aaea <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801acbc:	4672      	mov	r2, lr
 801acbe:	4675      	mov	r5, lr
 801acc0:	e713      	b.n	801aaea <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801acc2:	2200      	movs	r2, #0
 801acc4:	e711      	b.n	801aaea <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801acc6:	4622      	mov	r2, r4
 801acc8:	e70f      	b.n	801aaea <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801acca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801acca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acce:	b09f      	sub	sp, #124	@ 0x7c
 801acd0:	921b      	str	r2, [sp, #108]	@ 0x6c
 801acd2:	9309      	str	r3, [sp, #36]	@ 0x24
 801acd4:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801acd6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801acda:	901d      	str	r0, [sp, #116]	@ 0x74
 801acdc:	931c      	str	r3, [sp, #112]	@ 0x70
 801acde:	6850      	ldr	r0, [r2, #4]
 801ace0:	9119      	str	r1, [sp, #100]	@ 0x64
 801ace2:	6812      	ldr	r2, [r2, #0]
 801ace4:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801ace6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801acea:	fb00 1303 	mla	r3, r0, r3, r1
 801acee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801acf2:	18d3      	adds	r3, r2, r3
 801acf4:	930c      	str	r3, [sp, #48]	@ 0x30
 801acf6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	9312      	str	r3, [sp, #72]	@ 0x48
 801acfc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801acfe:	685e      	ldr	r6, [r3, #4]
 801ad00:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801ad04:	3604      	adds	r6, #4
 801ad06:	930d      	str	r3, [sp, #52]	@ 0x34
 801ad08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ad0a:	2b00      	cmp	r3, #0
 801ad0c:	dc03      	bgt.n	801ad16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ad0e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	f340 8378 	ble.w	801b406 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801ad16:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801ad18:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ad1c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ad20:	1e48      	subs	r0, r1, #1
 801ad22:	1e57      	subs	r7, r2, #1
 801ad24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	f340 818c 	ble.w	801b044 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801ad2c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801ad2e:	142b      	asrs	r3, r5, #16
 801ad30:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801ad34:	d406      	bmi.n	801ad44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ad36:	4584      	cmp	ip, r0
 801ad38:	da04      	bge.n	801ad44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	db02      	blt.n	801ad44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ad3e:	42bb      	cmp	r3, r7
 801ad40:	f2c0 8181 	blt.w	801b046 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801ad44:	f11c 0c01 	adds.w	ip, ip, #1
 801ad48:	f100 816f 	bmi.w	801b02a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801ad4c:	4561      	cmp	r1, ip
 801ad4e:	f2c0 816c 	blt.w	801b02a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801ad52:	3301      	adds	r3, #1
 801ad54:	f100 8169 	bmi.w	801b02a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801ad58:	429a      	cmp	r2, r3
 801ad5a:	f2c0 8166 	blt.w	801b02a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801ad5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad60:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ad62:	931a      	str	r3, [sp, #104]	@ 0x68
 801ad64:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	f340 818c 	ble.w	801b084 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801ad6c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801ad6e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801ad72:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ad76:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ad7a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801ad7c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801ad80:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801ad82:	141b      	asrs	r3, r3, #16
 801ad84:	f100 81d0 	bmi.w	801b128 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ad88:	f100 38ff 	add.w	r8, r0, #4294967295
 801ad8c:	4543      	cmp	r3, r8
 801ad8e:	f280 81cb 	bge.w	801b128 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ad92:	f1bc 0f00 	cmp.w	ip, #0
 801ad96:	f2c0 81c7 	blt.w	801b128 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ad9a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801ad9e:	45c4      	cmp	ip, r8
 801ada0:	f280 81c2 	bge.w	801b128 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ada4:	b200      	sxth	r0, r0
 801ada6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ada8:	fb0c 3300 	mla	r3, ip, r0, r3
 801adac:	eb04 0803 	add.w	r8, r4, r3
 801adb0:	5ce3      	ldrb	r3, [r4, r3]
 801adb2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801adb6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801adba:	2a00      	cmp	r2, #0
 801adbc:	f000 81a9 	beq.w	801b112 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801adc0:	f898 c001 	ldrb.w	ip, [r8, #1]
 801adc4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801adc8:	940e      	str	r4, [sp, #56]	@ 0x38
 801adca:	0e24      	lsrs	r4, r4, #24
 801adcc:	9415      	str	r4, [sp, #84]	@ 0x54
 801adce:	b179      	cbz	r1, 801adf0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801add0:	eb08 0c00 	add.w	ip, r8, r0
 801add4:	f818 0000 	ldrb.w	r0, [r8, r0]
 801add8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801addc:	900a      	str	r0, [sp, #40]	@ 0x28
 801adde:	0e00      	lsrs	r0, r0, #24
 801ade0:	9013      	str	r0, [sp, #76]	@ 0x4c
 801ade2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801ade6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801adea:	900f      	str	r0, [sp, #60]	@ 0x3c
 801adec:	0e00      	lsrs	r0, r0, #24
 801adee:	9016      	str	r0, [sp, #88]	@ 0x58
 801adf0:	b292      	uxth	r2, r2
 801adf2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801adf4:	b289      	uxth	r1, r1
 801adf6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801adf8:	fb02 f901 	mul.w	r9, r2, r1
 801adfc:	0112      	lsls	r2, r2, #4
 801adfe:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ae02:	eba2 0809 	sub.w	r8, r2, r9
 801ae06:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801ae0a:	b289      	uxth	r1, r1
 801ae0c:	fa1f f888 	uxth.w	r8, r8
 801ae10:	1a52      	subs	r2, r2, r1
 801ae12:	fb08 f000 	mul.w	r0, r8, r0
 801ae16:	b292      	uxth	r2, r2
 801ae18:	fb02 000e 	mla	r0, r2, lr, r0
 801ae1c:	fb01 0004 	mla	r0, r1, r4, r0
 801ae20:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801ae22:	fb09 0004 	mla	r0, r9, r4, r0
 801ae26:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ae2a:	2800      	cmp	r0, #0
 801ae2c:	f000 80f2 	beq.w	801b014 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801ae30:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801ae34:	d01b      	beq.n	801ae6e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801ae36:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801ae3a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ae3e:	fb0e fa0a 	mul.w	sl, lr, sl
 801ae42:	fb0e fe03 	mul.w	lr, lr, r3
 801ae46:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ae4a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801ae4e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801ae52:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801ae56:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ae5a:	4453      	add	r3, sl
 801ae5c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ae60:	0a1b      	lsrs	r3, r3, #8
 801ae62:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ae66:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801ae6a:	ea43 030c 	orr.w	r3, r3, ip
 801ae6e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ae70:	2cff      	cmp	r4, #255	@ 0xff
 801ae72:	d021      	beq.n	801aeb8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801ae74:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ae76:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801ae7a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ae7c:	fb04 fb0b 	mul.w	fp, r4, fp
 801ae80:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ae82:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ae86:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801ae88:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ae8c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ae90:	fb04 fa0a 	mul.w	sl, r4, sl
 801ae94:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ae98:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ae9c:	44de      	add	lr, fp
 801ae9e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801aea2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801aea6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801aeaa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801aeae:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801aeb2:	ea4e 040a 	orr.w	r4, lr, sl
 801aeb6:	940e      	str	r4, [sp, #56]	@ 0x38
 801aeb8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801aeba:	2cff      	cmp	r4, #255	@ 0xff
 801aebc:	d021      	beq.n	801af02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801aebe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801aec0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801aec4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801aec6:	fb04 fb0b 	mul.w	fp, r4, fp
 801aeca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801aecc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801aed0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801aed2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801aed6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801aeda:	fb04 fa0a 	mul.w	sl, r4, sl
 801aede:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801aee2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801aee6:	44de      	add	lr, fp
 801aee8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801aeec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801aef0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801aef4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801aef8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801aefc:	ea4e 040a 	orr.w	r4, lr, sl
 801af00:	940a      	str	r4, [sp, #40]	@ 0x28
 801af02:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801af04:	2cff      	cmp	r4, #255	@ 0xff
 801af06:	d021      	beq.n	801af4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801af08:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801af0a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801af0e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801af10:	fb04 fb0b 	mul.w	fp, r4, fp
 801af14:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801af16:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801af1a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801af1c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801af20:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801af24:	fb04 fa0a 	mul.w	sl, r4, sl
 801af28:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801af2c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801af30:	44de      	add	lr, fp
 801af32:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801af36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801af3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801af3e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801af42:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801af46:	ea4e 040a 	orr.w	r4, lr, sl
 801af4a:	940f      	str	r4, [sp, #60]	@ 0x3c
 801af4c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801af4e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801af52:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801af56:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801af5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801af5c:	fb08 fc0c 	mul.w	ip, r8, ip
 801af60:	fb02 cc0e 	mla	ip, r2, lr, ip
 801af64:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801af68:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801af6a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801af6e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801af72:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801af74:	fb09 cc0e 	mla	ip, r9, lr, ip
 801af78:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801af7c:	fb08 f80e 	mul.w	r8, r8, lr
 801af80:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801af84:	fb02 8303 	mla	r3, r2, r3, r8
 801af88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801af8a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801af8e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801af92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801af94:	fb01 330a 	mla	r3, r1, sl, r3
 801af98:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801af9c:	fb09 3901 	mla	r9, r9, r1, r3
 801afa0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801afa2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801afa4:	4343      	muls	r3, r0
 801afa6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801afaa:	1c58      	adds	r0, r3, #1
 801afac:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801afb0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801afb4:	ea4c 0c09 	orr.w	ip, ip, r9
 801afb8:	783b      	ldrb	r3, [r7, #0]
 801afba:	fa5f f28c 	uxtb.w	r2, ip
 801afbe:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801afc2:	fb12 f201 	smulbb	r2, r2, r1
 801afc6:	b2c0      	uxtb	r0, r0
 801afc8:	fb03 2300 	mla	r3, r3, r0, r2
 801afcc:	b29b      	uxth	r3, r3
 801afce:	1c5a      	adds	r2, r3, #1
 801afd0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801afd4:	787a      	ldrb	r2, [r7, #1]
 801afd6:	fb12 f200 	smulbb	r2, r2, r0
 801afda:	121b      	asrs	r3, r3, #8
 801afdc:	703b      	strb	r3, [r7, #0]
 801afde:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801afe2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801afe6:	fb03 2301 	mla	r3, r3, r1, r2
 801afea:	b29b      	uxth	r3, r3
 801afec:	1c5a      	adds	r2, r3, #1
 801afee:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801aff2:	121b      	asrs	r3, r3, #8
 801aff4:	707b      	strb	r3, [r7, #1]
 801aff6:	78bb      	ldrb	r3, [r7, #2]
 801aff8:	fb13 f000 	smulbb	r0, r3, r0
 801affc:	fb0c 0c01 	mla	ip, ip, r1, r0
 801b000:	fa1f fc8c 	uxth.w	ip, ip
 801b004:	f10c 0301 	add.w	r3, ip, #1
 801b008:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b00c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b010:	f887 c002 	strb.w	ip, [r7, #2]
 801b014:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801b016:	3703      	adds	r7, #3
 801b018:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801b01a:	441a      	add	r2, r3
 801b01c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b01e:	441d      	add	r5, r3
 801b020:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801b022:	9229      	str	r2, [sp, #164]	@ 0xa4
 801b024:	3b01      	subs	r3, #1
 801b026:	931a      	str	r3, [sp, #104]	@ 0x68
 801b028:	e69c      	b.n	801ad64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801b02a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801b02c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b02e:	441c      	add	r4, r3
 801b030:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b032:	441d      	add	r5, r3
 801b034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b036:	9429      	str	r4, [sp, #164]	@ 0xa4
 801b038:	3b01      	subs	r3, #1
 801b03a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b03c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b03e:	3303      	adds	r3, #3
 801b040:	930c      	str	r3, [sp, #48]	@ 0x30
 801b042:	e66f      	b.n	801ad24 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b044:	d026      	beq.n	801b094 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801b046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b048:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801b04a:	3b01      	subs	r3, #1
 801b04c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b04e:	fb00 4003 	mla	r0, r0, r3, r4
 801b052:	1400      	asrs	r0, r0, #16
 801b054:	f53f ae83 	bmi.w	801ad5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b058:	3901      	subs	r1, #1
 801b05a:	4288      	cmp	r0, r1
 801b05c:	f6bf ae7f 	bge.w	801ad5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b060:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801b062:	fb01 5303 	mla	r3, r1, r3, r5
 801b066:	141b      	asrs	r3, r3, #16
 801b068:	f53f ae79 	bmi.w	801ad5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b06c:	3a01      	subs	r2, #1
 801b06e:	4293      	cmp	r3, r2
 801b070:	f6bf ae75 	bge.w	801ad5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b074:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b076:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801b07a:	f103 0e03 	add.w	lr, r3, #3
 801b07e:	f1bb 0f00 	cmp.w	fp, #0
 801b082:	dc71      	bgt.n	801b168 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801b084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b086:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b08a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b08c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b090:	4423      	add	r3, r4
 801b092:	930c      	str	r3, [sp, #48]	@ 0x30
 801b094:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b096:	2b00      	cmp	r3, #0
 801b098:	f340 81b5 	ble.w	801b406 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801b09c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b0a0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b0a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b0a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b0aa:	eef0 6a62 	vmov.f32	s13, s5
 801b0ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b0b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b0b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0ba:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801b0be:	eef0 6a43 	vmov.f32	s13, s6
 801b0c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0c6:	ee16 5a90 	vmov	r5, s13
 801b0ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b0ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b0da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0e2:	ee12 2a90 	vmov	r2, s5
 801b0e6:	eef0 2a47 	vmov.f32	s5, s14
 801b0ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0ee:	ee13 2a10 	vmov	r2, s6
 801b0f2:	932b      	str	r3, [sp, #172]	@ 0xac
 801b0f4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b0f6:	eeb0 3a67 	vmov.f32	s6, s15
 801b0fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0fe:	932c      	str	r3, [sp, #176]	@ 0xb0
 801b100:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b102:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801b104:	3b01      	subs	r3, #1
 801b106:	9319      	str	r3, [sp, #100]	@ 0x64
 801b108:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b10a:	bf08      	it	eq
 801b10c:	4613      	moveq	r3, r2
 801b10e:	9309      	str	r3, [sp, #36]	@ 0x24
 801b110:	e5fa      	b.n	801ad08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b112:	2900      	cmp	r1, #0
 801b114:	f43f ae6c 	beq.w	801adf0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b118:	f818 0000 	ldrb.w	r0, [r8, r0]
 801b11c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801b120:	900a      	str	r0, [sp, #40]	@ 0x28
 801b122:	0e00      	lsrs	r0, r0, #24
 801b124:	9013      	str	r0, [sp, #76]	@ 0x4c
 801b126:	e663      	b.n	801adf0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b128:	f113 0801 	adds.w	r8, r3, #1
 801b12c:	f53f af72 	bmi.w	801b014 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b130:	4540      	cmp	r0, r8
 801b132:	f6ff af6f 	blt.w	801b014 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b136:	f11c 0801 	adds.w	r8, ip, #1
 801b13a:	f53f af6b 	bmi.w	801b014 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b13e:	45c6      	cmp	lr, r8
 801b140:	f6ff af68 	blt.w	801b014 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b144:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801b146:	b200      	sxth	r0, r0
 801b148:	9302      	str	r3, [sp, #8]
 801b14a:	fa0f f38e 	sxth.w	r3, lr
 801b14e:	9000      	str	r0, [sp, #0]
 801b150:	9301      	str	r3, [sp, #4]
 801b152:	4633      	mov	r3, r6
 801b154:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801b156:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801b15a:	e9cd c203 	strd	ip, r2, [sp, #12]
 801b15e:	4639      	mov	r1, r7
 801b160:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b162:	f7ff fc74 	bl	801aa4e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801b166:	e755      	b.n	801b014 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b168:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801b16a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b16e:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b170:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b174:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b176:	1427      	asrs	r7, r4, #16
 801b178:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b17a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b17e:	142b      	asrs	r3, r5, #16
 801b180:	fb01 7303 	mla	r3, r1, r3, r7
 801b184:	18e7      	adds	r7, r4, r3
 801b186:	5ce3      	ldrb	r3, [r4, r3]
 801b188:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801b18c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801b190:	2a00      	cmp	r2, #0
 801b192:	f000 812e 	beq.w	801b3f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801b196:	f897 8001 	ldrb.w	r8, [r7, #1]
 801b19a:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801b19e:	9410      	str	r4, [sp, #64]	@ 0x40
 801b1a0:	0e24      	lsrs	r4, r4, #24
 801b1a2:	9417      	str	r4, [sp, #92]	@ 0x5c
 801b1a4:	b170      	cbz	r0, 801b1c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801b1a6:	eb07 0801 	add.w	r8, r7, r1
 801b1aa:	5c79      	ldrb	r1, [r7, r1]
 801b1ac:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b1b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b1b2:	0e09      	lsrs	r1, r1, #24
 801b1b4:	9114      	str	r1, [sp, #80]	@ 0x50
 801b1b6:	f898 1001 	ldrb.w	r1, [r8, #1]
 801b1ba:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b1be:	9111      	str	r1, [sp, #68]	@ 0x44
 801b1c0:	0e09      	lsrs	r1, r1, #24
 801b1c2:	9118      	str	r1, [sp, #96]	@ 0x60
 801b1c4:	b292      	uxth	r2, r2
 801b1c6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801b1c8:	b280      	uxth	r0, r0
 801b1ca:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b1cc:	fb02 f900 	mul.w	r9, r2, r0
 801b1d0:	0112      	lsls	r2, r2, #4
 801b1d2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b1d6:	eba2 0809 	sub.w	r8, r2, r9
 801b1da:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801b1de:	b280      	uxth	r0, r0
 801b1e0:	fa1f f888 	uxth.w	r8, r8
 801b1e4:	1a12      	subs	r2, r2, r0
 801b1e6:	fb08 f101 	mul.w	r1, r8, r1
 801b1ea:	b292      	uxth	r2, r2
 801b1ec:	fb02 110c 	mla	r1, r2, ip, r1
 801b1f0:	fb00 1104 	mla	r1, r0, r4, r1
 801b1f4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801b1f6:	fb09 1104 	mla	r1, r9, r4, r1
 801b1fa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b1fe:	2900      	cmp	r1, #0
 801b200:	f000 80ec 	beq.w	801b3dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801b204:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801b208:	d019      	beq.n	801b23e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801b20a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801b20e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b212:	fb0c fa0a 	mul.w	sl, ip, sl
 801b216:	fb0c fc03 	mul.w	ip, ip, r3
 801b21a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b21e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801b222:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801b226:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b22a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801b22e:	4453      	add	r3, sl
 801b230:	0a3f      	lsrs	r7, r7, #8
 801b232:	0a1b      	lsrs	r3, r3, #8
 801b234:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801b238:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b23c:	433b      	orrs	r3, r7
 801b23e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801b240:	2cff      	cmp	r4, #255	@ 0xff
 801b242:	d020      	beq.n	801b286 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801b244:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b246:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801b24a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801b24c:	4367      	muls	r7, r4
 801b24e:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b250:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b254:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b258:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801b25a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801b25e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b262:	fb04 fa0a 	mul.w	sl, r4, sl
 801b266:	44bc      	add	ip, r7
 801b268:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801b26c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b270:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b274:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b278:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b27c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b280:	ea4c 040a 	orr.w	r4, ip, sl
 801b284:	9410      	str	r4, [sp, #64]	@ 0x40
 801b286:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b288:	2cff      	cmp	r4, #255	@ 0xff
 801b28a:	d020      	beq.n	801b2ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801b28c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b28e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801b292:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b294:	4367      	muls	r7, r4
 801b296:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b298:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b29c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b2a0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b2a2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801b2a6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b2aa:	fb04 fa0a 	mul.w	sl, r4, sl
 801b2ae:	44bc      	add	ip, r7
 801b2b0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801b2b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b2b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b2bc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b2c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b2c4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b2c8:	ea4c 040a 	orr.w	r4, ip, sl
 801b2cc:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b2ce:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801b2d0:	2cff      	cmp	r4, #255	@ 0xff
 801b2d2:	d020      	beq.n	801b316 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801b2d4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b2d6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801b2da:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801b2dc:	4367      	muls	r7, r4
 801b2de:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b2e0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b2e4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b2e8:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801b2ea:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801b2ee:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b2f2:	fb04 fa0a 	mul.w	sl, r4, sl
 801b2f6:	44bc      	add	ip, r7
 801b2f8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801b2fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b300:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b304:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b308:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b30c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b310:	ea4c 040a 	orr.w	r4, ip, sl
 801b314:	9411      	str	r4, [sp, #68]	@ 0x44
 801b316:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b318:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801b31c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b320:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801b324:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b326:	fb08 f707 	mul.w	r7, r8, r7
 801b32a:	fb02 770c 	mla	r7, r2, ip, r7
 801b32e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801b332:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801b334:	fb00 770c 	mla	r7, r0, ip, r7
 801b338:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801b33c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b33e:	fb09 770c 	mla	r7, r9, ip, r7
 801b342:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801b346:	fb08 f80c 	mul.w	r8, r8, ip
 801b34a:	0a3f      	lsrs	r7, r7, #8
 801b34c:	fb02 8303 	mla	r3, r2, r3, r8
 801b350:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b352:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801b356:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801b35a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b35c:	fb00 330a 	mla	r3, r0, sl, r3
 801b360:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801b364:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801b366:	fb09 3c0c 	mla	ip, r9, ip, r3
 801b36a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b36c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b370:	434b      	muls	r3, r1
 801b372:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801b376:	1c59      	adds	r1, r3, #1
 801b378:	ea47 070c 	orr.w	r7, r7, ip
 801b37c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801b380:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801b384:	b2fa      	uxtb	r2, r7
 801b386:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801b38a:	fb12 f200 	smulbb	r2, r2, r0
 801b38e:	b2c9      	uxtb	r1, r1
 801b390:	fb03 2301 	mla	r3, r3, r1, r2
 801b394:	b29b      	uxth	r3, r3
 801b396:	1c5a      	adds	r2, r3, #1
 801b398:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b39c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801b3a0:	fb12 f201 	smulbb	r2, r2, r1
 801b3a4:	121b      	asrs	r3, r3, #8
 801b3a6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801b3aa:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801b3ae:	0c3f      	lsrs	r7, r7, #16
 801b3b0:	fb03 2300 	mla	r3, r3, r0, r2
 801b3b4:	b29b      	uxth	r3, r3
 801b3b6:	1c5a      	adds	r2, r3, #1
 801b3b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b3bc:	121b      	asrs	r3, r3, #8
 801b3be:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801b3c2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801b3c6:	fb13 f101 	smulbb	r1, r3, r1
 801b3ca:	fb07 1700 	mla	r7, r7, r0, r1
 801b3ce:	b2bf      	uxth	r7, r7
 801b3d0:	1c7b      	adds	r3, r7, #1
 801b3d2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801b3d6:	123f      	asrs	r7, r7, #8
 801b3d8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801b3dc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801b3de:	f10e 0e03 	add.w	lr, lr, #3
 801b3e2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801b3e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b3e8:	441a      	add	r2, r3
 801b3ea:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b3ec:	9229      	str	r2, [sp, #164]	@ 0xa4
 801b3ee:	441d      	add	r5, r3
 801b3f0:	e645      	b.n	801b07e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801b3f2:	2800      	cmp	r0, #0
 801b3f4:	f43f aee6 	beq.w	801b1c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801b3f8:	5c79      	ldrb	r1, [r7, r1]
 801b3fa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b3fe:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b400:	0e09      	lsrs	r1, r1, #24
 801b402:	9114      	str	r1, [sp, #80]	@ 0x50
 801b404:	e6de      	b.n	801b1c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801b406:	b01f      	add	sp, #124	@ 0x7c
 801b408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b40c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801b40c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b410:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801b414:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801b418:	2d00      	cmp	r5, #0
 801b41a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801b41e:	fb05 700e 	mla	r0, r5, lr, r7
 801b422:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801b426:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801b42a:	eb02 0800 	add.w	r8, r2, r0
 801b42e:	f2c0 8105 	blt.w	801b63c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801b432:	45a9      	cmp	r9, r5
 801b434:	f340 8102 	ble.w	801b63c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801b438:	2f00      	cmp	r7, #0
 801b43a:	f2c0 80fd 	blt.w	801b638 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801b43e:	45be      	cmp	lr, r7
 801b440:	f340 80fa 	ble.w	801b638 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801b444:	5c12      	ldrb	r2, [r2, r0]
 801b446:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b44a:	1c7a      	adds	r2, r7, #1
 801b44c:	f100 80f9 	bmi.w	801b642 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801b450:	4596      	cmp	lr, r2
 801b452:	f340 80f6 	ble.w	801b642 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801b456:	2c00      	cmp	r4, #0
 801b458:	f000 80f5 	beq.w	801b646 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801b45c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b460:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b464:	3501      	adds	r5, #1
 801b466:	f100 80f2 	bmi.w	801b64e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801b46a:	45a9      	cmp	r9, r5
 801b46c:	f340 80ef 	ble.w	801b64e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801b470:	f1bc 0f00 	cmp.w	ip, #0
 801b474:	f000 80ee 	beq.w	801b654 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801b478:	2f00      	cmp	r7, #0
 801b47a:	f2c0 80e6 	blt.w	801b64a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801b47e:	45be      	cmp	lr, r7
 801b480:	f340 80e3 	ble.w	801b64a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801b484:	f818 200e 	ldrb.w	r2, [r8, lr]
 801b488:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b48c:	3701      	adds	r7, #1
 801b48e:	f100 80e4 	bmi.w	801b65a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801b492:	45be      	cmp	lr, r7
 801b494:	f340 80e1 	ble.w	801b65a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801b498:	2c00      	cmp	r4, #0
 801b49a:	f000 80e0 	beq.w	801b65e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801b49e:	44c6      	add	lr, r8
 801b4a0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801b4a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b4a8:	b2a3      	uxth	r3, r4
 801b4aa:	fa1f fc8c 	uxth.w	ip, ip
 801b4ae:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801b4b2:	fb0c fe03 	mul.w	lr, ip, r3
 801b4b6:	011b      	lsls	r3, r3, #4
 801b4b8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801b4bc:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801b4c0:	eba3 070e 	sub.w	r7, r3, lr
 801b4c4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801b4c8:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801b4cc:	fa1f f48c 	uxth.w	r4, ip
 801b4d0:	b2bf      	uxth	r7, r7
 801b4d2:	1b1b      	subs	r3, r3, r4
 801b4d4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801b4d8:	fb07 fc0a 	mul.w	ip, r7, sl
 801b4dc:	b29b      	uxth	r3, r3
 801b4de:	fb03 cc0b 	mla	ip, r3, fp, ip
 801b4e2:	9300      	str	r3, [sp, #0]
 801b4e4:	fb04 cc09 	mla	ip, r4, r9, ip
 801b4e8:	fb0e cc08 	mla	ip, lr, r8, ip
 801b4ec:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801b4f0:	9301      	str	r3, [sp, #4]
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	f000 809d 	beq.w	801b632 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801b4f8:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801b4fc:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801b500:	fb0b fc0c 	mul.w	ip, fp, ip
 801b504:	fb0b f606 	mul.w	r6, fp, r6
 801b508:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801b50c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801b510:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801b514:	44dc      	add	ip, fp
 801b516:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801b51a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801b51e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b522:	fb0a fb0b 	mul.w	fp, sl, fp
 801b526:	fb0a fa00 	mul.w	sl, sl, r0
 801b52a:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801b52e:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801b532:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801b536:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801b53a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801b53e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b542:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801b546:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b54a:	0a36      	lsrs	r6, r6, #8
 801b54c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b550:	44dc      	add	ip, fp
 801b552:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801b556:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801b55a:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801b55e:	fb09 fb0b 	mul.w	fp, r9, fp
 801b562:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b566:	fb09 f905 	mul.w	r9, r9, r5
 801b56a:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801b56e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b572:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801b576:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b57a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801b57e:	fb0c fc07 	mul.w	ip, ip, r7
 801b582:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801b586:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801b58a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801b58e:	4458      	add	r0, fp
 801b590:	fb08 f505 	mul.w	r5, r8, r5
 801b594:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b598:	fb08 f802 	mul.w	r8, r8, r2
 801b59c:	0a00      	lsrs	r0, r0, #8
 801b59e:	0a2a      	lsrs	r2, r5, #8
 801b5a0:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801b5a4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801b5a8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801b5ac:	4415      	add	r5, r2
 801b5ae:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801b5b2:	0a2d      	lsrs	r5, r5, #8
 801b5b4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b5b8:	9a00      	ldr	r2, [sp, #0]
 801b5ba:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801b5be:	fb03 cc02 	mla	ip, r3, r2, ip
 801b5c2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801b5c6:	9b01      	ldr	r3, [sp, #4]
 801b5c8:	fb05 c50e 	mla	r5, r5, lr, ip
 801b5cc:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801b5d0:	43db      	mvns	r3, r3
 801b5d2:	fb00 5004 	mla	r0, r0, r4, r5
 801b5d6:	b2db      	uxtb	r3, r3
 801b5d8:	0a00      	lsrs	r0, r0, #8
 801b5da:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801b5de:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801b5e2:	4378      	muls	r0, r7
 801b5e4:	fb02 0006 	mla	r0, r2, r6, r0
 801b5e8:	780a      	ldrb	r2, [r1, #0]
 801b5ea:	fb0e 0e08 	mla	lr, lr, r8, r0
 801b5ee:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801b5f2:	fb04 e000 	mla	r0, r4, r0, lr
 801b5f6:	fb02 f403 	mul.w	r4, r2, r3
 801b5fa:	0a00      	lsrs	r0, r0, #8
 801b5fc:	1c62      	adds	r2, r4, #1
 801b5fe:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801b602:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801b606:	4328      	orrs	r0, r5
 801b608:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801b60c:	700a      	strb	r2, [r1, #0]
 801b60e:	784a      	ldrb	r2, [r1, #1]
 801b610:	435a      	muls	r2, r3
 801b612:	1c54      	adds	r4, r2, #1
 801b614:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801b618:	0a02      	lsrs	r2, r0, #8
 801b61a:	0c00      	lsrs	r0, r0, #16
 801b61c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801b620:	704a      	strb	r2, [r1, #1]
 801b622:	788a      	ldrb	r2, [r1, #2]
 801b624:	4353      	muls	r3, r2
 801b626:	1c5a      	adds	r2, r3, #1
 801b628:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b62c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b630:	7088      	strb	r0, [r1, #2]
 801b632:	b003      	add	sp, #12
 801b634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b638:	2600      	movs	r6, #0
 801b63a:	e706      	b.n	801b44a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801b63c:	2000      	movs	r0, #0
 801b63e:	4606      	mov	r6, r0
 801b640:	e710      	b.n	801b464 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801b642:	2000      	movs	r0, #0
 801b644:	e70e      	b.n	801b464 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801b646:	4620      	mov	r0, r4
 801b648:	e70c      	b.n	801b464 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801b64a:	2500      	movs	r5, #0
 801b64c:	e71e      	b.n	801b48c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801b64e:	2200      	movs	r2, #0
 801b650:	4615      	mov	r5, r2
 801b652:	e729      	b.n	801b4a8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801b654:	4662      	mov	r2, ip
 801b656:	4665      	mov	r5, ip
 801b658:	e726      	b.n	801b4a8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801b65a:	2200      	movs	r2, #0
 801b65c:	e724      	b.n	801b4a8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801b65e:	4622      	mov	r2, r4
 801b660:	e722      	b.n	801b4a8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801b662 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b662:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b666:	b09b      	sub	sp, #108	@ 0x6c
 801b668:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b66c:	9218      	str	r2, [sp, #96]	@ 0x60
 801b66e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801b670:	9019      	str	r0, [sp, #100]	@ 0x64
 801b672:	9116      	str	r1, [sp, #88]	@ 0x58
 801b674:	6850      	ldr	r0, [r2, #4]
 801b676:	9307      	str	r3, [sp, #28]
 801b678:	6812      	ldr	r2, [r2, #0]
 801b67a:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801b67c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801b680:	fb00 1303 	mla	r3, r0, r3, r1
 801b684:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b688:	18d3      	adds	r3, r2, r3
 801b68a:	930a      	str	r3, [sp, #40]	@ 0x28
 801b68c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b692:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b694:	685e      	ldr	r6, [r3, #4]
 801b696:	3604      	adds	r6, #4
 801b698:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	dc03      	bgt.n	801b6a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801b69e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	f340 834f 	ble.w	801bd44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801b6a6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b6a8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b6ac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b6b0:	1e48      	subs	r0, r1, #1
 801b6b2:	1e57      	subs	r7, r2, #1
 801b6b4:	9b07      	ldr	r3, [sp, #28]
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	f340 8178 	ble.w	801b9ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b6bc:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801b6be:	142b      	asrs	r3, r5, #16
 801b6c0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801b6c4:	d406      	bmi.n	801b6d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b6c6:	4584      	cmp	ip, r0
 801b6c8:	da04      	bge.n	801b6d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	db02      	blt.n	801b6d4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b6ce:	42bb      	cmp	r3, r7
 801b6d0:	f2c0 816d 	blt.w	801b9ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801b6d4:	f11c 0c01 	adds.w	ip, ip, #1
 801b6d8:	f100 815b 	bmi.w	801b992 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801b6dc:	4561      	cmp	r1, ip
 801b6de:	f2c0 8158 	blt.w	801b992 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801b6e2:	3301      	adds	r3, #1
 801b6e4:	f100 8155 	bmi.w	801b992 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801b6e8:	429a      	cmp	r2, r3
 801b6ea:	f2c0 8152 	blt.w	801b992 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801b6ee:	9b07      	ldr	r3, [sp, #28]
 801b6f0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801b6f2:	9317      	str	r3, [sp, #92]	@ 0x5c
 801b6f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	f340 8178 	ble.w	801b9ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801b6fc:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801b6fe:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801b702:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b706:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b70a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b70c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801b710:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801b712:	141b      	asrs	r3, r3, #16
 801b714:	f100 81ba 	bmi.w	801ba8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801b718:	f101 38ff 	add.w	r8, r1, #4294967295
 801b71c:	4543      	cmp	r3, r8
 801b71e:	f280 81b5 	bge.w	801ba8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801b722:	f1bc 0f00 	cmp.w	ip, #0
 801b726:	f2c0 81b1 	blt.w	801ba8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801b72a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801b72e:	45c4      	cmp	ip, r8
 801b730:	f280 81ac 	bge.w	801ba8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801b734:	b209      	sxth	r1, r1
 801b736:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801b738:	fb0c 3301 	mla	r3, ip, r1, r3
 801b73c:	eb04 0803 	add.w	r8, r4, r3
 801b740:	5ce3      	ldrb	r3, [r4, r3]
 801b742:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801b746:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801b74a:	2a00      	cmp	r2, #0
 801b74c:	f000 8193 	beq.w	801ba76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801b750:	f898 c001 	ldrb.w	ip, [r8, #1]
 801b754:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801b758:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b75a:	0e24      	lsrs	r4, r4, #24
 801b75c:	9412      	str	r4, [sp, #72]	@ 0x48
 801b75e:	b178      	cbz	r0, 801b780 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801b760:	eb08 0c01 	add.w	ip, r8, r1
 801b764:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b768:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b76c:	9108      	str	r1, [sp, #32]
 801b76e:	0e09      	lsrs	r1, r1, #24
 801b770:	9110      	str	r1, [sp, #64]	@ 0x40
 801b772:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801b776:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b77a:	910c      	str	r1, [sp, #48]	@ 0x30
 801b77c:	0e09      	lsrs	r1, r1, #24
 801b77e:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b780:	b292      	uxth	r2, r2
 801b782:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801b784:	b280      	uxth	r0, r0
 801b786:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b788:	fb02 f900 	mul.w	r9, r2, r0
 801b78c:	0112      	lsls	r2, r2, #4
 801b78e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b792:	eba2 0809 	sub.w	r8, r2, r9
 801b796:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801b79a:	b280      	uxth	r0, r0
 801b79c:	fa1f f888 	uxth.w	r8, r8
 801b7a0:	1a12      	subs	r2, r2, r0
 801b7a2:	fb08 f101 	mul.w	r1, r8, r1
 801b7a6:	b292      	uxth	r2, r2
 801b7a8:	fb02 110e 	mla	r1, r2, lr, r1
 801b7ac:	fb00 1104 	mla	r1, r0, r4, r1
 801b7b0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b7b2:	fb09 1104 	mla	r1, r9, r4, r1
 801b7b6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b7ba:	2900      	cmp	r1, #0
 801b7bc:	f000 80de 	beq.w	801b97c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801b7c0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801b7c4:	d01b      	beq.n	801b7fe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801b7c6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801b7ca:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b7ce:	fb0e fa0a 	mul.w	sl, lr, sl
 801b7d2:	fb0e fe03 	mul.w	lr, lr, r3
 801b7d6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b7da:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801b7de:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801b7e2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b7e6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801b7ea:	4453      	add	r3, sl
 801b7ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b7f0:	0a1b      	lsrs	r3, r3, #8
 801b7f2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801b7f6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b7fa:	ea43 030c 	orr.w	r3, r3, ip
 801b7fe:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b800:	2cff      	cmp	r4, #255	@ 0xff
 801b802:	d021      	beq.n	801b848 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801b804:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b806:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b80a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b80c:	fb04 fb0b 	mul.w	fp, r4, fp
 801b810:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b812:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b816:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b818:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b81c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b820:	fb04 fa0a 	mul.w	sl, r4, sl
 801b824:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b828:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b82c:	44de      	add	lr, fp
 801b82e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b832:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b836:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b83a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b83e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b842:	ea4e 040a 	orr.w	r4, lr, sl
 801b846:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b848:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b84a:	2cff      	cmp	r4, #255	@ 0xff
 801b84c:	d021      	beq.n	801b892 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801b84e:	9c08      	ldr	r4, [sp, #32]
 801b850:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b854:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b856:	fb04 fb0b 	mul.w	fp, r4, fp
 801b85a:	9c08      	ldr	r4, [sp, #32]
 801b85c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b860:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b862:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b866:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b86a:	fb04 fa0a 	mul.w	sl, r4, sl
 801b86e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b872:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b876:	44de      	add	lr, fp
 801b878:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b87c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b880:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b884:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b888:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b88c:	ea4e 040a 	orr.w	r4, lr, sl
 801b890:	9408      	str	r4, [sp, #32]
 801b892:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b894:	2cff      	cmp	r4, #255	@ 0xff
 801b896:	d021      	beq.n	801b8dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801b898:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801b89a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b89e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b8a0:	fb04 fb0b 	mul.w	fp, r4, fp
 801b8a4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801b8a6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b8aa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b8ac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b8b0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b8b4:	fb04 fa0a 	mul.w	sl, r4, sl
 801b8b8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b8bc:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b8c0:	44de      	add	lr, fp
 801b8c2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b8c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b8ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b8ce:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b8d2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b8d6:	ea4e 040a 	orr.w	r4, lr, sl
 801b8da:	940c      	str	r4, [sp, #48]	@ 0x30
 801b8dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b8de:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801b8e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b8e6:	43c9      	mvns	r1, r1
 801b8e8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801b8ec:	9c08      	ldr	r4, [sp, #32]
 801b8ee:	b2c9      	uxtb	r1, r1
 801b8f0:	fb08 fc0c 	mul.w	ip, r8, ip
 801b8f4:	fb02 cc0e 	mla	ip, r2, lr, ip
 801b8f8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801b8fc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801b8fe:	fb00 cc0e 	mla	ip, r0, lr, ip
 801b902:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801b906:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b908:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b90c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801b910:	fb08 f80e 	mul.w	r8, r8, lr
 801b914:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b918:	fb02 8303 	mla	r3, r2, r3, r8
 801b91c:	9a08      	ldr	r2, [sp, #32]
 801b91e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b922:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801b926:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b928:	fb00 330a 	mla	r3, r0, sl, r3
 801b92c:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801b930:	fb09 3900 	mla	r9, r9, r0, r3
 801b934:	783b      	ldrb	r3, [r7, #0]
 801b936:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b93a:	fb03 f201 	mul.w	r2, r3, r1
 801b93e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801b942:	1c53      	adds	r3, r2, #1
 801b944:	ea4c 0c09 	orr.w	ip, ip, r9
 801b948:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b94c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801b950:	703b      	strb	r3, [r7, #0]
 801b952:	787b      	ldrb	r3, [r7, #1]
 801b954:	434b      	muls	r3, r1
 801b956:	1c5a      	adds	r2, r3, #1
 801b958:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b95c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801b960:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801b964:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b968:	707b      	strb	r3, [r7, #1]
 801b96a:	78bb      	ldrb	r3, [r7, #2]
 801b96c:	4359      	muls	r1, r3
 801b96e:	1c4b      	adds	r3, r1, #1
 801b970:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801b974:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801b978:	f887 c002 	strb.w	ip, [r7, #2]
 801b97c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b97e:	3703      	adds	r7, #3
 801b980:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801b982:	441a      	add	r2, r3
 801b984:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b986:	441d      	add	r5, r3
 801b988:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b98a:	9225      	str	r2, [sp, #148]	@ 0x94
 801b98c:	3b01      	subs	r3, #1
 801b98e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801b990:	e6b0      	b.n	801b6f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b992:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801b994:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801b996:	441c      	add	r4, r3
 801b998:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b99a:	441d      	add	r5, r3
 801b99c:	9b07      	ldr	r3, [sp, #28]
 801b99e:	9425      	str	r4, [sp, #148]	@ 0x94
 801b9a0:	3b01      	subs	r3, #1
 801b9a2:	9307      	str	r3, [sp, #28]
 801b9a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b9a6:	3303      	adds	r3, #3
 801b9a8:	930a      	str	r3, [sp, #40]	@ 0x28
 801b9aa:	e683      	b.n	801b6b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b9ac:	d026      	beq.n	801b9fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801b9ae:	9b07      	ldr	r3, [sp, #28]
 801b9b0:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801b9b2:	3b01      	subs	r3, #1
 801b9b4:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801b9b6:	fb00 4003 	mla	r0, r0, r3, r4
 801b9ba:	1400      	asrs	r0, r0, #16
 801b9bc:	f53f ae97 	bmi.w	801b6ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b9c0:	3901      	subs	r1, #1
 801b9c2:	4288      	cmp	r0, r1
 801b9c4:	f6bf ae93 	bge.w	801b6ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b9c8:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801b9ca:	fb01 5303 	mla	r3, r1, r3, r5
 801b9ce:	141b      	asrs	r3, r3, #16
 801b9d0:	f53f ae8d 	bmi.w	801b6ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b9d4:	3a01      	subs	r2, #1
 801b9d6:	4293      	cmp	r3, r2
 801b9d8:	f6bf ae89 	bge.w	801b6ee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b9dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b9de:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801b9e2:	f103 0e03 	add.w	lr, r3, #3
 801b9e6:	f1bb 0f00 	cmp.w	fp, #0
 801b9ea:	dc6d      	bgt.n	801bac8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801b9ec:	9b07      	ldr	r3, [sp, #28]
 801b9ee:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b9f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b9f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b9f8:	4423      	add	r3, r4
 801b9fa:	930a      	str	r3, [sp, #40]	@ 0x28
 801b9fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	f340 81a0 	ble.w	801bd44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801ba04:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ba08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ba0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ba0e:	eeb0 6a62 	vmov.f32	s12, s5
 801ba12:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ba16:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ba1a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba1e:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 801ba22:	eeb0 6a43 	vmov.f32	s12, s6
 801ba26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ba2a:	ee16 5a10 	vmov	r5, s12
 801ba2e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ba32:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ba36:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ba3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ba3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ba42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ba46:	ee12 2a90 	vmov	r2, s5
 801ba4a:	eef0 2a47 	vmov.f32	s5, s14
 801ba4e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba52:	ee13 2a10 	vmov	r2, s6
 801ba56:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ba58:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ba5a:	eeb0 3a67 	vmov.f32	s6, s15
 801ba5e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ba62:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ba64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ba66:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ba68:	3b01      	subs	r3, #1
 801ba6a:	9316      	str	r3, [sp, #88]	@ 0x58
 801ba6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ba6e:	bf08      	it	eq
 801ba70:	4613      	moveq	r3, r2
 801ba72:	9307      	str	r3, [sp, #28]
 801ba74:	e610      	b.n	801b698 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ba76:	2800      	cmp	r0, #0
 801ba78:	f43f ae82 	beq.w	801b780 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ba7c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ba80:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ba84:	9108      	str	r1, [sp, #32]
 801ba86:	0e09      	lsrs	r1, r1, #24
 801ba88:	9110      	str	r1, [sp, #64]	@ 0x40
 801ba8a:	e679      	b.n	801b780 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ba8c:	f113 0801 	adds.w	r8, r3, #1
 801ba90:	f53f af74 	bmi.w	801b97c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ba94:	4541      	cmp	r1, r8
 801ba96:	f6ff af71 	blt.w	801b97c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ba9a:	f11c 0801 	adds.w	r8, ip, #1
 801ba9e:	f53f af6d 	bmi.w	801b97c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801baa2:	45c6      	cmp	lr, r8
 801baa4:	f6ff af6a 	blt.w	801b97c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801baa8:	b209      	sxth	r1, r1
 801baaa:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801baae:	fa0f f38e 	sxth.w	r3, lr
 801bab2:	9100      	str	r1, [sp, #0]
 801bab4:	4639      	mov	r1, r7
 801bab6:	9301      	str	r3, [sp, #4]
 801bab8:	4633      	mov	r3, r6
 801baba:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801babe:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bac0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801bac2:	f7ff fca3 	bl	801b40c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801bac6:	e759      	b.n	801b97c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801bac8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801baca:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801bace:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801bad0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801bad4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bad6:	1427      	asrs	r7, r4, #16
 801bad8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801bada:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bade:	142b      	asrs	r3, r5, #16
 801bae0:	fb01 7303 	mla	r3, r1, r3, r7
 801bae4:	18e7      	adds	r7, r4, r3
 801bae6:	5ce3      	ldrb	r3, [r4, r3]
 801bae8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801baec:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801baf0:	2a00      	cmp	r2, #0
 801baf2:	f000 811d 	beq.w	801bd30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801baf6:	f897 8001 	ldrb.w	r8, [r7, #1]
 801bafa:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801bafe:	940d      	str	r4, [sp, #52]	@ 0x34
 801bb00:	0e24      	lsrs	r4, r4, #24
 801bb02:	9414      	str	r4, [sp, #80]	@ 0x50
 801bb04:	b170      	cbz	r0, 801bb24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801bb06:	eb07 0801 	add.w	r8, r7, r1
 801bb0a:	5c79      	ldrb	r1, [r7, r1]
 801bb0c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801bb10:	9109      	str	r1, [sp, #36]	@ 0x24
 801bb12:	0e09      	lsrs	r1, r1, #24
 801bb14:	9111      	str	r1, [sp, #68]	@ 0x44
 801bb16:	f898 1001 	ldrb.w	r1, [r8, #1]
 801bb1a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801bb1e:	910e      	str	r1, [sp, #56]	@ 0x38
 801bb20:	0e09      	lsrs	r1, r1, #24
 801bb22:	9115      	str	r1, [sp, #84]	@ 0x54
 801bb24:	b292      	uxth	r2, r2
 801bb26:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801bb28:	b280      	uxth	r0, r0
 801bb2a:	fb02 f900 	mul.w	r9, r2, r0
 801bb2e:	0112      	lsls	r2, r2, #4
 801bb30:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801bb34:	eba2 0809 	sub.w	r8, r2, r9
 801bb38:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801bb3c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bb3e:	b280      	uxth	r0, r0
 801bb40:	fa1f f888 	uxth.w	r8, r8
 801bb44:	1a09      	subs	r1, r1, r0
 801bb46:	fb08 f202 	mul.w	r2, r8, r2
 801bb4a:	b289      	uxth	r1, r1
 801bb4c:	fb01 220c 	mla	r2, r1, ip, r2
 801bb50:	fb00 2204 	mla	r2, r0, r4, r2
 801bb54:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801bb56:	fb09 2204 	mla	r2, r9, r4, r2
 801bb5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801bb5e:	2a00      	cmp	r2, #0
 801bb60:	f000 80db 	beq.w	801bd1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801bb64:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801bb68:	d019      	beq.n	801bb9e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801bb6a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801bb6e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801bb72:	fb0c fa0a 	mul.w	sl, ip, sl
 801bb76:	fb0c fc03 	mul.w	ip, ip, r3
 801bb7a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801bb7e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801bb82:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801bb86:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801bb8a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801bb8e:	4453      	add	r3, sl
 801bb90:	0a3f      	lsrs	r7, r7, #8
 801bb92:	0a1b      	lsrs	r3, r3, #8
 801bb94:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801bb98:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801bb9c:	433b      	orrs	r3, r7
 801bb9e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bba0:	2cff      	cmp	r4, #255	@ 0xff
 801bba2:	d020      	beq.n	801bbe6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801bba4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801bba6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801bbaa:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bbac:	4367      	muls	r7, r4
 801bbae:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801bbb0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bbb4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bbb8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bbba:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801bbbe:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bbc2:	fb04 fa0a 	mul.w	sl, r4, sl
 801bbc6:	44bc      	add	ip, r7
 801bbc8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801bbcc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bbd0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bbd4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bbd8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bbdc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801bbe0:	ea4c 040a 	orr.w	r4, ip, sl
 801bbe4:	940d      	str	r4, [sp, #52]	@ 0x34
 801bbe6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801bbe8:	2cff      	cmp	r4, #255	@ 0xff
 801bbea:	d020      	beq.n	801bc2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801bbec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801bbee:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801bbf2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801bbf4:	4367      	muls	r7, r4
 801bbf6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801bbf8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bbfc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bc00:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801bc02:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801bc06:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bc0a:	fb04 fa0a 	mul.w	sl, r4, sl
 801bc0e:	44bc      	add	ip, r7
 801bc10:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801bc14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bc18:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bc1c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bc20:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bc24:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801bc28:	ea4c 040a 	orr.w	r4, ip, sl
 801bc2c:	9409      	str	r4, [sp, #36]	@ 0x24
 801bc2e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801bc30:	2cff      	cmp	r4, #255	@ 0xff
 801bc32:	d020      	beq.n	801bc76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801bc34:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801bc36:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801bc3a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801bc3c:	4367      	muls	r7, r4
 801bc3e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801bc40:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bc44:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bc48:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801bc4a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801bc4e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bc52:	fb04 fa0a 	mul.w	sl, r4, sl
 801bc56:	44bc      	add	ip, r7
 801bc58:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801bc5c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bc60:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bc64:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bc68:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bc6c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801bc70:	ea4c 040a 	orr.w	r4, ip, sl
 801bc74:	940e      	str	r4, [sp, #56]	@ 0x38
 801bc76:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801bc78:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801bc7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801bc80:	43d2      	mvns	r2, r2
 801bc82:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801bc86:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801bc88:	b2d2      	uxtb	r2, r2
 801bc8a:	fb08 f707 	mul.w	r7, r8, r7
 801bc8e:	fb01 770c 	mla	r7, r1, ip, r7
 801bc92:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801bc96:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801bc98:	fb00 770c 	mla	r7, r0, ip, r7
 801bc9c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801bca0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801bca2:	fb09 770c 	mla	r7, r9, ip, r7
 801bca6:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801bcaa:	fb08 f80c 	mul.w	r8, r8, ip
 801bcae:	0a3f      	lsrs	r7, r7, #8
 801bcb0:	fb01 8303 	mla	r3, r1, r3, r8
 801bcb4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801bcb6:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801bcba:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801bcbe:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801bcc0:	fb00 330a 	mla	r3, r0, sl, r3
 801bcc4:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801bcc8:	fb09 3c0c 	mla	ip, r9, ip, r3
 801bccc:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801bcd0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bcd4:	fb03 f102 	mul.w	r1, r3, r2
 801bcd8:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801bcdc:	1c4b      	adds	r3, r1, #1
 801bcde:	ea47 070c 	orr.w	r7, r7, ip
 801bce2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801bce6:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801bcea:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801bcee:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801bcf2:	4353      	muls	r3, r2
 801bcf4:	1c59      	adds	r1, r3, #1
 801bcf6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801bcfa:	0a3b      	lsrs	r3, r7, #8
 801bcfc:	0c3f      	lsrs	r7, r7, #16
 801bcfe:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801bd02:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801bd06:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801bd0a:	435a      	muls	r2, r3
 801bd0c:	1c53      	adds	r3, r2, #1
 801bd0e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801bd12:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801bd16:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801bd1a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801bd1c:	f10e 0e03 	add.w	lr, lr, #3
 801bd20:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801bd22:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bd26:	441a      	add	r2, r3
 801bd28:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801bd2a:	9225      	str	r2, [sp, #148]	@ 0x94
 801bd2c:	441d      	add	r5, r3
 801bd2e:	e65a      	b.n	801b9e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801bd30:	2800      	cmp	r0, #0
 801bd32:	f43f aef7 	beq.w	801bb24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801bd36:	5c79      	ldrb	r1, [r7, r1]
 801bd38:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801bd3c:	9109      	str	r1, [sp, #36]	@ 0x24
 801bd3e:	0e09      	lsrs	r1, r1, #24
 801bd40:	9111      	str	r1, [sp, #68]	@ 0x44
 801bd42:	e6ef      	b.n	801bb24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801bd44:	b01b      	add	sp, #108	@ 0x6c
 801bd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bd4a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801bd4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd4e:	b08d      	sub	sp, #52	@ 0x34
 801bd50:	468b      	mov	fp, r1
 801bd52:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 801bd56:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 801bd5a:	fb0c 5703 	mla	r7, ip, r3, r5
 801bd5e:	f1bc 0f00 	cmp.w	ip, #0
 801bd62:	910b      	str	r1, [sp, #44]	@ 0x2c
 801bd64:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bd68:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 801bd6c:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 801bd70:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 801bd74:	eb02 0607 	add.w	r6, r2, r7
 801bd78:	f89b 4000 	ldrb.w	r4, [fp]
 801bd7c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801bd80:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801bd84:	f2c0 80c1 	blt.w	801bf0a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801bd88:	45e6      	cmp	lr, ip
 801bd8a:	f340 80be 	ble.w	801bf0a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801bd8e:	2d00      	cmp	r5, #0
 801bd90:	f2c0 80b7 	blt.w	801bf02 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801bd94:	42ab      	cmp	r3, r5
 801bd96:	f340 80b4 	ble.w	801bf02 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801bd9a:	5dd2      	ldrb	r2, [r2, r7]
 801bd9c:	9205      	str	r2, [sp, #20]
 801bd9e:	7872      	ldrb	r2, [r6, #1]
 801bda0:	9206      	str	r2, [sp, #24]
 801bda2:	78b2      	ldrb	r2, [r6, #2]
 801bda4:	9207      	str	r2, [sp, #28]
 801bda6:	1c6a      	adds	r2, r5, #1
 801bda8:	f100 80b6 	bmi.w	801bf18 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801bdac:	4293      	cmp	r3, r2
 801bdae:	f340 80b3 	ble.w	801bf18 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801bdb2:	f1b8 0f00 	cmp.w	r8, #0
 801bdb6:	f000 80af 	beq.w	801bf18 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801bdba:	78f2      	ldrb	r2, [r6, #3]
 801bdbc:	9201      	str	r2, [sp, #4]
 801bdbe:	7932      	ldrb	r2, [r6, #4]
 801bdc0:	9202      	str	r2, [sp, #8]
 801bdc2:	7972      	ldrb	r2, [r6, #5]
 801bdc4:	9203      	str	r2, [sp, #12]
 801bdc6:	f11c 0c01 	adds.w	ip, ip, #1
 801bdca:	f100 80ad 	bmi.w	801bf28 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801bdce:	45e6      	cmp	lr, ip
 801bdd0:	f340 80aa 	ble.w	801bf28 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801bdd4:	f1ba 0f00 	cmp.w	sl, #0
 801bdd8:	f000 80a6 	beq.w	801bf28 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801bddc:	2d00      	cmp	r5, #0
 801bdde:	f2c0 809f 	blt.w	801bf20 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801bde2:	42ab      	cmp	r3, r5
 801bde4:	f340 809c 	ble.w	801bf20 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801bde8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801bdec:	f816 9002 	ldrb.w	r9, [r6, r2]
 801bdf0:	2203      	movs	r2, #3
 801bdf2:	fb03 6c02 	mla	ip, r3, r2, r6
 801bdf6:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801bdfa:	f89c e002 	ldrb.w	lr, [ip, #2]
 801bdfe:	9704      	str	r7, [sp, #16]
 801be00:	3501      	adds	r5, #1
 801be02:	f100 8098 	bmi.w	801bf36 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801be06:	42ab      	cmp	r3, r5
 801be08:	f340 8095 	ble.w	801bf36 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801be0c:	f1b8 0f00 	cmp.w	r8, #0
 801be10:	f000 8091 	beq.w	801bf36 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801be14:	f04f 0c03 	mov.w	ip, #3
 801be18:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801be1c:	5cb5      	ldrb	r5, [r6, r2]
 801be1e:	fb03 620c 	mla	r2, r3, ip, r6
 801be22:	fb03 630c 	mla	r3, r3, ip, r6
 801be26:	7912      	ldrb	r2, [r2, #4]
 801be28:	795e      	ldrb	r6, [r3, #5]
 801be2a:	fa1f f388 	uxth.w	r3, r8
 801be2e:	fa1f fc8a 	uxth.w	ip, sl
 801be32:	fb03 f70c 	mul.w	r7, r3, ip
 801be36:	011b      	lsls	r3, r3, #4
 801be38:	9708      	str	r7, [sp, #32]
 801be3a:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801be3e:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 801be42:	1bdb      	subs	r3, r3, r7
 801be44:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 801be48:	fa1f fc8c 	uxth.w	ip, ip
 801be4c:	b29b      	uxth	r3, r3
 801be4e:	9709      	str	r7, [sp, #36]	@ 0x24
 801be50:	ebaa 0a0c 	sub.w	sl, sl, ip
 801be54:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801be56:	930a      	str	r3, [sp, #40]	@ 0x28
 801be58:	fa1f fa8a 	uxth.w	sl, sl
 801be5c:	ea6f 0807 	mvn.w	r8, r7
 801be60:	9f01      	ldr	r7, [sp, #4]
 801be62:	435f      	muls	r7, r3
 801be64:	9b05      	ldr	r3, [sp, #20]
 801be66:	fa5f f888 	uxtb.w	r8, r8
 801be6a:	fb0a 7703 	mla	r7, sl, r3, r7
 801be6e:	9b08      	ldr	r3, [sp, #32]
 801be70:	fb14 f408 	smulbb	r4, r4, r8
 801be74:	fb0c 7709 	mla	r7, ip, r9, r7
 801be78:	fb10 f008 	smulbb	r0, r0, r8
 801be7c:	fb11 f108 	smulbb	r1, r1, r8
 801be80:	fb03 7705 	mla	r7, r3, r5, r7
 801be84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801be86:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801be8a:	fb07 4703 	mla	r7, r7, r3, r4
 801be8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801be90:	b2bf      	uxth	r7, r7
 801be92:	1c7c      	adds	r4, r7, #1
 801be94:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801be98:	1224      	asrs	r4, r4, #8
 801be9a:	f88b 4000 	strb.w	r4, [fp]
 801be9e:	9c02      	ldr	r4, [sp, #8]
 801bea0:	435c      	muls	r4, r3
 801bea2:	9b06      	ldr	r3, [sp, #24]
 801bea4:	fb0a 4403 	mla	r4, sl, r3, r4
 801bea8:	9b04      	ldr	r3, [sp, #16]
 801beaa:	fb0c 4403 	mla	r4, ip, r3, r4
 801beae:	9b08      	ldr	r3, [sp, #32]
 801beb0:	fb03 4402 	mla	r4, r3, r2, r4
 801beb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801beb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801beb8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801bebc:	fb04 0403 	mla	r4, r4, r3, r0
 801bec0:	9b03      	ldr	r3, [sp, #12]
 801bec2:	435a      	muls	r2, r3
 801bec4:	b2a4      	uxth	r4, r4
 801bec6:	4613      	mov	r3, r2
 801bec8:	9a07      	ldr	r2, [sp, #28]
 801beca:	1c60      	adds	r0, r4, #1
 801becc:	fb0a 3a02 	mla	sl, sl, r2, r3
 801bed0:	9b08      	ldr	r3, [sp, #32]
 801bed2:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801bed6:	fb0c ac0e 	mla	ip, ip, lr, sl
 801beda:	1224      	asrs	r4, r4, #8
 801bedc:	fb03 c606 	mla	r6, r3, r6, ip
 801bee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bee2:	f88b 4001 	strb.w	r4, [fp, #1]
 801bee6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801beea:	fb06 1103 	mla	r1, r6, r3, r1
 801beee:	b289      	uxth	r1, r1
 801bef0:	1c4e      	adds	r6, r1, #1
 801bef2:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801bef6:	1209      	asrs	r1, r1, #8
 801bef8:	f88b 1002 	strb.w	r1, [fp, #2]
 801befc:	b00d      	add	sp, #52	@ 0x34
 801befe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bf06:	9405      	str	r4, [sp, #20]
 801bf08:	e74d      	b.n	801bda6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801bf0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bf0e:	9401      	str	r4, [sp, #4]
 801bf10:	9405      	str	r4, [sp, #20]
 801bf12:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bf16:	e756      	b.n	801bdc6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801bf18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bf1c:	9401      	str	r4, [sp, #4]
 801bf1e:	e752      	b.n	801bdc6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801bf20:	468e      	mov	lr, r1
 801bf22:	9004      	str	r0, [sp, #16]
 801bf24:	46a1      	mov	r9, r4
 801bf26:	e76b      	b.n	801be00 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801bf28:	460e      	mov	r6, r1
 801bf2a:	4602      	mov	r2, r0
 801bf2c:	4625      	mov	r5, r4
 801bf2e:	468e      	mov	lr, r1
 801bf30:	9004      	str	r0, [sp, #16]
 801bf32:	46a1      	mov	r9, r4
 801bf34:	e779      	b.n	801be2a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801bf36:	460e      	mov	r6, r1
 801bf38:	4602      	mov	r2, r0
 801bf3a:	4625      	mov	r5, r4
 801bf3c:	e775      	b.n	801be2a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801bf3e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bf3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf42:	b09f      	sub	sp, #124	@ 0x7c
 801bf44:	920e      	str	r2, [sp, #56]	@ 0x38
 801bf46:	9307      	str	r3, [sp, #28]
 801bf48:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801bf4a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801bf4e:	901d      	str	r0, [sp, #116]	@ 0x74
 801bf50:	930c      	str	r3, [sp, #48]	@ 0x30
 801bf52:	6850      	ldr	r0, [r2, #4]
 801bf54:	910b      	str	r1, [sp, #44]	@ 0x2c
 801bf56:	6812      	ldr	r2, [r2, #0]
 801bf58:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801bf5c:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 801bf60:	fb00 1303 	mla	r3, r0, r3, r1
 801bf64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bf68:	18d3      	adds	r3, r2, r3
 801bf6a:	9308      	str	r3, [sp, #32]
 801bf6c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801bf6e:	681b      	ldr	r3, [r3, #0]
 801bf70:	930a      	str	r3, [sp, #40]	@ 0x28
 801bf72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bf74:	43db      	mvns	r3, r3
 801bf76:	b2db      	uxtb	r3, r3
 801bf78:	9309      	str	r3, [sp, #36]	@ 0x24
 801bf7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	dc03      	bgt.n	801bf88 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801bf80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	f340 81f5 	ble.w	801c372 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801bf88:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801bf8a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bf8e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bf92:	1e48      	subs	r0, r1, #1
 801bf94:	1e54      	subs	r4, r2, #1
 801bf96:	9b07      	ldr	r3, [sp, #28]
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	f340 80d5 	ble.w	801c148 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801bf9e:	ea5f 452a 	movs.w	r5, sl, asr #16
 801bfa2:	ea4f 4328 	mov.w	r3, r8, asr #16
 801bfa6:	d406      	bmi.n	801bfb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bfa8:	4285      	cmp	r5, r0
 801bfaa:	da04      	bge.n	801bfb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	db02      	blt.n	801bfb6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bfb0:	42a3      	cmp	r3, r4
 801bfb2:	f2c0 80ca 	blt.w	801c14a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801bfb6:	3501      	adds	r5, #1
 801bfb8:	f100 80bb 	bmi.w	801c132 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801bfbc:	42a9      	cmp	r1, r5
 801bfbe:	f2c0 80b8 	blt.w	801c132 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801bfc2:	3301      	adds	r3, #1
 801bfc4:	f100 80b5 	bmi.w	801c132 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801bfc8:	429a      	cmp	r2, r3
 801bfca:	f2c0 80b2 	blt.w	801c132 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801bfce:	9b07      	ldr	r3, [sp, #28]
 801bfd0:	9d08      	ldr	r5, [sp, #32]
 801bfd2:	930d      	str	r3, [sp, #52]	@ 0x34
 801bfd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bfd6:	2b00      	cmp	r3, #0
 801bfd8:	f340 80d6 	ble.w	801c188 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801bfdc:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801bfde:	ea4f 4428 	mov.w	r4, r8, asr #16
 801bfe2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801bfe4:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801bfe8:	68c6      	ldr	r6, [r0, #12]
 801bfea:	ea5f 402a 	movs.w	r0, sl, asr #16
 801bfee:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801bff2:	689b      	ldr	r3, [r3, #8]
 801bff4:	f100 810f 	bmi.w	801c216 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801bff8:	1e5f      	subs	r7, r3, #1
 801bffa:	42b8      	cmp	r0, r7
 801bffc:	f280 810b 	bge.w	801c216 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c000:	2c00      	cmp	r4, #0
 801c002:	f2c0 8108 	blt.w	801c216 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c006:	1e77      	subs	r7, r6, #1
 801c008:	42bc      	cmp	r4, r7
 801c00a:	f280 8104 	bge.w	801c216 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c00e:	b21b      	sxth	r3, r3
 801c010:	fb04 0003 	mla	r0, r4, r3, r0
 801c014:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c016:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c01a:	1826      	adds	r6, r4, r0
 801c01c:	5c24      	ldrb	r4, [r4, r0]
 801c01e:	78b7      	ldrb	r7, [r6, #2]
 801c020:	7870      	ldrb	r0, [r6, #1]
 801c022:	970f      	str	r7, [sp, #60]	@ 0x3c
 801c024:	7977      	ldrb	r7, [r6, #5]
 801c026:	f896 e003 	ldrb.w	lr, [r6, #3]
 801c02a:	f896 c004 	ldrb.w	ip, [r6, #4]
 801c02e:	9710      	str	r7, [sp, #64]	@ 0x40
 801c030:	b1c9      	cbz	r1, 801c066 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c032:	f04f 0b03 	mov.w	fp, #3
 801c036:	f06f 0904 	mvn.w	r9, #4
 801c03a:	3605      	adds	r6, #5
 801c03c:	fb13 930b 	smlabb	r3, r3, fp, r9
 801c040:	eb06 0b03 	add.w	fp, r6, r3
 801c044:	5cf3      	ldrb	r3, [r6, r3]
 801c046:	9311      	str	r3, [sp, #68]	@ 0x44
 801c048:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801c04c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c04e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801c052:	9315      	str	r3, [sp, #84]	@ 0x54
 801c054:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801c058:	9312      	str	r3, [sp, #72]	@ 0x48
 801c05a:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801c05e:	9314      	str	r3, [sp, #80]	@ 0x50
 801c060:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801c064:	9316      	str	r3, [sp, #88]	@ 0x58
 801c066:	b292      	uxth	r2, r2
 801c068:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801c06a:	b289      	uxth	r1, r1
 801c06c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801c070:	fb02 f601 	mul.w	r6, r2, r1
 801c074:	0112      	lsls	r2, r2, #4
 801c076:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801c07a:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 801c07e:	1b92      	subs	r2, r2, r6
 801c080:	b289      	uxth	r1, r1
 801c082:	b292      	uxth	r2, r2
 801c084:	eba9 0901 	sub.w	r9, r9, r1
 801c088:	fb02 fe0e 	mul.w	lr, r2, lr
 801c08c:	fa1f f989 	uxth.w	r9, r9
 801c090:	fb02 fc0c 	mul.w	ip, r2, ip
 801c094:	fb09 e404 	mla	r4, r9, r4, lr
 801c098:	f895 e000 	ldrb.w	lr, [r5]
 801c09c:	fb09 c000 	mla	r0, r9, r0, ip
 801c0a0:	fb01 4407 	mla	r4, r1, r7, r4
 801c0a4:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801c0a6:	fb06 4407 	mla	r4, r6, r7, r4
 801c0aa:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801c0ac:	fb1e fe07 	smulbb	lr, lr, r7
 801c0b0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c0b4:	fb04 e403 	mla	r4, r4, r3, lr
 801c0b8:	b2a4      	uxth	r4, r4
 801c0ba:	f104 0e01 	add.w	lr, r4, #1
 801c0be:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801c0c2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c0c4:	fb01 0004 	mla	r0, r1, r4, r0
 801c0c8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c0ca:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c0ce:	fb06 0004 	mla	r0, r6, r4, r0
 801c0d2:	786c      	ldrb	r4, [r5, #1]
 801c0d4:	f885 e000 	strb.w	lr, [r5]
 801c0d8:	fb14 f407 	smulbb	r4, r4, r7
 801c0dc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c0e0:	fb00 4003 	mla	r0, r0, r3, r4
 801c0e4:	b280      	uxth	r0, r0
 801c0e6:	1c44      	adds	r4, r0, #1
 801c0e8:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801c0ec:	1200      	asrs	r0, r0, #8
 801c0ee:	7068      	strb	r0, [r5, #1]
 801c0f0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c0f2:	4342      	muls	r2, r0
 801c0f4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c0f6:	fb09 2200 	mla	r2, r9, r0, r2
 801c0fa:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c0fc:	fb01 2100 	mla	r1, r1, r0, r2
 801c100:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c102:	fb06 1602 	mla	r6, r6, r2, r1
 801c106:	78a9      	ldrb	r1, [r5, #2]
 801c108:	fb11 f107 	smulbb	r1, r1, r7
 801c10c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801c110:	fb06 1303 	mla	r3, r6, r3, r1
 801c114:	b29b      	uxth	r3, r3
 801c116:	1c5e      	adds	r6, r3, #1
 801c118:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801c11c:	121b      	asrs	r3, r3, #8
 801c11e:	70ab      	strb	r3, [r5, #2]
 801c120:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c122:	3503      	adds	r5, #3
 801c124:	449a      	add	sl, r3
 801c126:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c128:	4498      	add	r8, r3
 801c12a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c12c:	3b01      	subs	r3, #1
 801c12e:	930d      	str	r3, [sp, #52]	@ 0x34
 801c130:	e750      	b.n	801bfd4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c132:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c134:	449a      	add	sl, r3
 801c136:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c138:	4498      	add	r8, r3
 801c13a:	9b07      	ldr	r3, [sp, #28]
 801c13c:	3b01      	subs	r3, #1
 801c13e:	9307      	str	r3, [sp, #28]
 801c140:	9b08      	ldr	r3, [sp, #32]
 801c142:	3303      	adds	r3, #3
 801c144:	9308      	str	r3, [sp, #32]
 801c146:	e726      	b.n	801bf96 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c148:	d026      	beq.n	801c198 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801c14a:	9b07      	ldr	r3, [sp, #28]
 801c14c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801c14e:	3b01      	subs	r3, #1
 801c150:	fb00 a003 	mla	r0, r0, r3, sl
 801c154:	1400      	asrs	r0, r0, #16
 801c156:	f53f af3a 	bmi.w	801bfce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c15a:	3901      	subs	r1, #1
 801c15c:	4288      	cmp	r0, r1
 801c15e:	f6bf af36 	bge.w	801bfce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c162:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801c164:	fb01 8303 	mla	r3, r1, r3, r8
 801c168:	141b      	asrs	r3, r3, #16
 801c16a:	f53f af30 	bmi.w	801bfce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c16e:	3a01      	subs	r2, #1
 801c170:	4293      	cmp	r3, r2
 801c172:	f6bf af2c 	bge.w	801bfce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c176:	9b08      	ldr	r3, [sp, #32]
 801c178:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801c17c:	1cdd      	adds	r5, r3, #3
 801c17e:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 801c182:	f1bc 0f00 	cmp.w	ip, #0
 801c186:	dc5f      	bgt.n	801c248 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801c188:	9b07      	ldr	r3, [sp, #28]
 801c18a:	9a08      	ldr	r2, [sp, #32]
 801c18c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c190:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c194:	441a      	add	r2, r3
 801c196:	9208      	str	r2, [sp, #32]
 801c198:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	f340 80e9 	ble.w	801c372 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801c1a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c1a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c1a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c1aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c1ae:	eef0 6a62 	vmov.f32	s13, s5
 801c1b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c1b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c1ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c1be:	ee16 aa90 	vmov	sl, s13
 801c1c2:	eef0 6a43 	vmov.f32	s13, s6
 801c1c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c1ca:	ee16 8a90 	vmov	r8, s13
 801c1ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c1d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c1d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c1da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c1de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c1e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c1e6:	ee12 2a90 	vmov	r2, s5
 801c1ea:	eef0 2a47 	vmov.f32	s5, s14
 801c1ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801c1f2:	ee13 2a10 	vmov	r2, s6
 801c1f6:	932b      	str	r3, [sp, #172]	@ 0xac
 801c1f8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c1fa:	eeb0 3a67 	vmov.f32	s6, s15
 801c1fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801c202:	932c      	str	r3, [sp, #176]	@ 0xb0
 801c204:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c206:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c208:	3b01      	subs	r3, #1
 801c20a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c20c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c20e:	bf08      	it	eq
 801c210:	4613      	moveq	r3, r2
 801c212:	9307      	str	r3, [sp, #28]
 801c214:	e6b1      	b.n	801bf7a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c216:	1c47      	adds	r7, r0, #1
 801c218:	d482      	bmi.n	801c120 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c21a:	42bb      	cmp	r3, r7
 801c21c:	db80      	blt.n	801c120 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c21e:	1c67      	adds	r7, r4, #1
 801c220:	f53f af7e 	bmi.w	801c120 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c224:	42be      	cmp	r6, r7
 801c226:	f6ff af7b 	blt.w	801c120 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c22a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c22c:	b236      	sxth	r6, r6
 801c22e:	9001      	str	r0, [sp, #4]
 801c230:	b21b      	sxth	r3, r3
 801c232:	9600      	str	r6, [sp, #0]
 801c234:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801c236:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801c23a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801c23e:	4629      	mov	r1, r5
 801c240:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c242:	f7ff fd82 	bl	801bd4a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801c246:	e76b      	b.n	801c120 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c248:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801c24a:	ea4f 402a 	mov.w	r0, sl, asr #16
 801c24e:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801c252:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801c256:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801c25a:	ea4f 4128 	mov.w	r1, r8, asr #16
 801c25e:	fb07 0101 	mla	r1, r7, r1, r0
 801c262:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c264:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c268:	1844      	adds	r4, r0, r1
 801c26a:	5c40      	ldrb	r0, [r0, r1]
 801c26c:	78a6      	ldrb	r6, [r4, #2]
 801c26e:	7861      	ldrb	r1, [r4, #1]
 801c270:	960f      	str	r6, [sp, #60]	@ 0x3c
 801c272:	78e6      	ldrb	r6, [r4, #3]
 801c274:	910d      	str	r1, [sp, #52]	@ 0x34
 801c276:	9610      	str	r6, [sp, #64]	@ 0x40
 801c278:	f894 9004 	ldrb.w	r9, [r4, #4]
 801c27c:	f894 b005 	ldrb.w	fp, [r4, #5]
 801c280:	b192      	cbz	r2, 801c2a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801c282:	f06f 0604 	mvn.w	r6, #4
 801c286:	2103      	movs	r1, #3
 801c288:	3405      	adds	r4, #5
 801c28a:	fb17 6701 	smlabb	r7, r7, r1, r6
 801c28e:	19e6      	adds	r6, r4, r7
 801c290:	5de4      	ldrb	r4, [r4, r7]
 801c292:	9417      	str	r4, [sp, #92]	@ 0x5c
 801c294:	7874      	ldrb	r4, [r6, #1]
 801c296:	9419      	str	r4, [sp, #100]	@ 0x64
 801c298:	78b4      	ldrb	r4, [r6, #2]
 801c29a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801c29c:	78f4      	ldrb	r4, [r6, #3]
 801c29e:	9418      	str	r4, [sp, #96]	@ 0x60
 801c2a0:	7934      	ldrb	r4, [r6, #4]
 801c2a2:	941a      	str	r4, [sp, #104]	@ 0x68
 801c2a4:	7974      	ldrb	r4, [r6, #5]
 801c2a6:	941c      	str	r4, [sp, #112]	@ 0x70
 801c2a8:	b29b      	uxth	r3, r3
 801c2aa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801c2ac:	b292      	uxth	r2, r2
 801c2ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c2b0:	3503      	adds	r5, #3
 801c2b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c2b6:	fb03 f402 	mul.w	r4, r3, r2
 801c2ba:	011b      	lsls	r3, r3, #4
 801c2bc:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801c2c0:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 801c2c4:	1b1b      	subs	r3, r3, r4
 801c2c6:	b292      	uxth	r2, r2
 801c2c8:	b29b      	uxth	r3, r3
 801c2ca:	1ab6      	subs	r6, r6, r2
 801c2cc:	435f      	muls	r7, r3
 801c2ce:	b2b6      	uxth	r6, r6
 801c2d0:	fb03 f909 	mul.w	r9, r3, r9
 801c2d4:	fb03 fb0b 	mul.w	fp, r3, fp
 801c2d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c2da:	fb06 7000 	mla	r0, r6, r0, r7
 801c2de:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801c2e0:	fb06 bb03 	mla	fp, r6, r3, fp
 801c2e4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801c2e6:	fb02 0007 	mla	r0, r2, r7, r0
 801c2ea:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801c2ec:	fb02 bb03 	mla	fp, r2, r3, fp
 801c2f0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c2f2:	fb04 0007 	mla	r0, r4, r7, r0
 801c2f6:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801c2fa:	fb17 f701 	smulbb	r7, r7, r1
 801c2fe:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c302:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801c304:	fb00 700e 	mla	r0, r0, lr, r7
 801c308:	fb06 9101 	mla	r1, r6, r1, r9
 801c30c:	b280      	uxth	r0, r0
 801c30e:	1c47      	adds	r7, r0, #1
 801c310:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801c314:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801c316:	1200      	asrs	r0, r0, #8
 801c318:	f805 0c06 	strb.w	r0, [r5, #-6]
 801c31c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c31e:	fb02 1100 	mla	r1, r2, r0, r1
 801c322:	981a      	ldr	r0, [sp, #104]	@ 0x68
 801c324:	fb04 1100 	mla	r1, r4, r0, r1
 801c328:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801c32c:	fb04 b403 	mla	r4, r4, r3, fp
 801c330:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801c334:	fb10 f007 	smulbb	r0, r0, r7
 801c338:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c33c:	fb13 f307 	smulbb	r3, r3, r7
 801c340:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c344:	fb01 010e 	mla	r1, r1, lr, r0
 801c348:	fb04 340e 	mla	r4, r4, lr, r3
 801c34c:	b289      	uxth	r1, r1
 801c34e:	b2a4      	uxth	r4, r4
 801c350:	1c48      	adds	r0, r1, #1
 801c352:	1c63      	adds	r3, r4, #1
 801c354:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801c358:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801c35c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c35e:	1209      	asrs	r1, r1, #8
 801c360:	1224      	asrs	r4, r4, #8
 801c362:	449a      	add	sl, r3
 801c364:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c366:	f805 1c05 	strb.w	r1, [r5, #-5]
 801c36a:	f805 4c04 	strb.w	r4, [r5, #-4]
 801c36e:	4498      	add	r8, r3
 801c370:	e707      	b.n	801c182 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801c372:	b01f      	add	sp, #124	@ 0x7c
 801c374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c378 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c37c:	b087      	sub	sp, #28
 801c37e:	780d      	ldrb	r5, [r1, #0]
 801c380:	784c      	ldrb	r4, [r1, #1]
 801c382:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801c386:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 801c38a:	9004      	str	r0, [sp, #16]
 801c38c:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801c390:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 801c394:	9005      	str	r0, [sp, #20]
 801c396:	fb06 bc03 	mla	ip, r6, r3, fp
 801c39a:	2e00      	cmp	r6, #0
 801c39c:	7888      	ldrb	r0, [r1, #2]
 801c39e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c3a2:	eb02 090c 	add.w	r9, r2, ip
 801c3a6:	f2c0 8084 	blt.w	801c4b2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801c3aa:	42b7      	cmp	r7, r6
 801c3ac:	f340 8081 	ble.w	801c4b2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801c3b0:	f1bb 0f00 	cmp.w	fp, #0
 801c3b4:	db79      	blt.n	801c4aa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801c3b6:	455b      	cmp	r3, fp
 801c3b8:	dd77      	ble.n	801c4aa <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801c3ba:	f812 200c 	ldrb.w	r2, [r2, ip]
 801c3be:	9201      	str	r2, [sp, #4]
 801c3c0:	f899 2001 	ldrb.w	r2, [r9, #1]
 801c3c4:	9202      	str	r2, [sp, #8]
 801c3c6:	f899 2002 	ldrb.w	r2, [r9, #2]
 801c3ca:	9203      	str	r2, [sp, #12]
 801c3cc:	f11b 0201 	adds.w	r2, fp, #1
 801c3d0:	d476      	bmi.n	801c4c0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801c3d2:	4293      	cmp	r3, r2
 801c3d4:	dd74      	ble.n	801c4c0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801c3d6:	9a04      	ldr	r2, [sp, #16]
 801c3d8:	2a00      	cmp	r2, #0
 801c3da:	d071      	beq.n	801c4c0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801c3dc:	f899 8003 	ldrb.w	r8, [r9, #3]
 801c3e0:	f899 c004 	ldrb.w	ip, [r9, #4]
 801c3e4:	f899 a005 	ldrb.w	sl, [r9, #5]
 801c3e8:	3601      	adds	r6, #1
 801c3ea:	d471      	bmi.n	801c4d0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801c3ec:	42b7      	cmp	r7, r6
 801c3ee:	dd6f      	ble.n	801c4d0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801c3f0:	9a05      	ldr	r2, [sp, #20]
 801c3f2:	2a00      	cmp	r2, #0
 801c3f4:	d06c      	beq.n	801c4d0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801c3f6:	f1bb 0f00 	cmp.w	fp, #0
 801c3fa:	db65      	blt.n	801c4c8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801c3fc:	455b      	cmp	r3, fp
 801c3fe:	dd63      	ble.n	801c4c8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801c400:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801c404:	f819 e002 	ldrb.w	lr, [r9, r2]
 801c408:	2203      	movs	r2, #3
 801c40a:	fb03 9602 	mla	r6, r3, r2, r9
 801c40e:	7877      	ldrb	r7, [r6, #1]
 801c410:	78b6      	ldrb	r6, [r6, #2]
 801c412:	f11b 0b01 	adds.w	fp, fp, #1
 801c416:	d40c      	bmi.n	801c432 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801c418:	455b      	cmp	r3, fp
 801c41a:	dd0a      	ble.n	801c432 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801c41c:	9a04      	ldr	r2, [sp, #16]
 801c41e:	b142      	cbz	r2, 801c432 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801c420:	2203      	movs	r2, #3
 801c422:	fb13 2002 	smlabb	r0, r3, r2, r2
 801c426:	f819 5000 	ldrb.w	r5, [r9, r0]
 801c42a:	fb03 9002 	mla	r0, r3, r2, r9
 801c42e:	7904      	ldrb	r4, [r0, #4]
 801c430:	7940      	ldrb	r0, [r0, #5]
 801c432:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c436:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c43a:	fb03 fb02 	mul.w	fp, r3, r2
 801c43e:	011b      	lsls	r3, r3, #4
 801c440:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801c444:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 801c448:	eba3 030b 	sub.w	r3, r3, fp
 801c44c:	b292      	uxth	r2, r2
 801c44e:	b29b      	uxth	r3, r3
 801c450:	eba9 0902 	sub.w	r9, r9, r2
 801c454:	9304      	str	r3, [sp, #16]
 801c456:	fa1f f989 	uxth.w	r9, r9
 801c45a:	fb03 f808 	mul.w	r8, r3, r8
 801c45e:	9b01      	ldr	r3, [sp, #4]
 801c460:	fb09 8803 	mla	r8, r9, r3, r8
 801c464:	9b04      	ldr	r3, [sp, #16]
 801c466:	fb03 fc0c 	mul.w	ip, r3, ip
 801c46a:	9b02      	ldr	r3, [sp, #8]
 801c46c:	fb02 880e 	mla	r8, r2, lr, r8
 801c470:	fb09 cc03 	mla	ip, r9, r3, ip
 801c474:	9b04      	ldr	r3, [sp, #16]
 801c476:	fb0b 8805 	mla	r8, fp, r5, r8
 801c47a:	fb02 c707 	mla	r7, r2, r7, ip
 801c47e:	fb03 f30a 	mul.w	r3, r3, sl
 801c482:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c486:	fb0b 7404 	mla	r4, fp, r4, r7
 801c48a:	f881 8000 	strb.w	r8, [r1]
 801c48e:	1224      	asrs	r4, r4, #8
 801c490:	704c      	strb	r4, [r1, #1]
 801c492:	9c03      	ldr	r4, [sp, #12]
 801c494:	fb09 3904 	mla	r9, r9, r4, r3
 801c498:	fb02 9206 	mla	r2, r2, r6, r9
 801c49c:	fb0b 2000 	mla	r0, fp, r0, r2
 801c4a0:	1200      	asrs	r0, r0, #8
 801c4a2:	7088      	strb	r0, [r1, #2]
 801c4a4:	b007      	add	sp, #28
 801c4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4aa:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801c4ae:	9501      	str	r5, [sp, #4]
 801c4b0:	e78c      	b.n	801c3cc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801c4b2:	4682      	mov	sl, r0
 801c4b4:	46a4      	mov	ip, r4
 801c4b6:	46a8      	mov	r8, r5
 801c4b8:	9501      	str	r5, [sp, #4]
 801c4ba:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801c4be:	e793      	b.n	801c3e8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801c4c0:	4682      	mov	sl, r0
 801c4c2:	46a4      	mov	ip, r4
 801c4c4:	46a8      	mov	r8, r5
 801c4c6:	e78f      	b.n	801c3e8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801c4c8:	4606      	mov	r6, r0
 801c4ca:	4627      	mov	r7, r4
 801c4cc:	46ae      	mov	lr, r5
 801c4ce:	e7a0      	b.n	801c412 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801c4d0:	4606      	mov	r6, r0
 801c4d2:	4627      	mov	r7, r4
 801c4d4:	46ae      	mov	lr, r5
 801c4d6:	e7ac      	b.n	801c432 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801c4d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4dc:	b09b      	sub	sp, #108	@ 0x6c
 801c4de:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c4e0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801c4e2:	9019      	str	r0, [sp, #100]	@ 0x64
 801c4e4:	9109      	str	r1, [sp, #36]	@ 0x24
 801c4e6:	6850      	ldr	r0, [r2, #4]
 801c4e8:	9306      	str	r3, [sp, #24]
 801c4ea:	6812      	ldr	r2, [r2, #0]
 801c4ec:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801c4f0:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 801c4f4:	fb00 1303 	mla	r3, r0, r3, r1
 801c4f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c4fc:	18d3      	adds	r3, r2, r3
 801c4fe:	9307      	str	r3, [sp, #28]
 801c500:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	9308      	str	r3, [sp, #32]
 801c506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c508:	2b00      	cmp	r3, #0
 801c50a:	dc03      	bgt.n	801c514 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c50c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c50e:	2b00      	cmp	r3, #0
 801c510:	f340 81ab 	ble.w	801c86a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801c514:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c516:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c51a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c51e:	1e48      	subs	r0, r1, #1
 801c520:	1e55      	subs	r5, r2, #1
 801c522:	9b06      	ldr	r3, [sp, #24]
 801c524:	2b00      	cmp	r3, #0
 801c526:	f340 80b1 	ble.w	801c68c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c52a:	ea5f 462b 	movs.w	r6, fp, asr #16
 801c52e:	ea4f 4324 	mov.w	r3, r4, asr #16
 801c532:	d406      	bmi.n	801c542 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c534:	4286      	cmp	r6, r0
 801c536:	da04      	bge.n	801c542 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c538:	2b00      	cmp	r3, #0
 801c53a:	db02      	blt.n	801c542 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c53c:	42ab      	cmp	r3, r5
 801c53e:	f2c0 80a6 	blt.w	801c68e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801c542:	3601      	adds	r6, #1
 801c544:	f100 8097 	bmi.w	801c676 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801c548:	42b1      	cmp	r1, r6
 801c54a:	f2c0 8094 	blt.w	801c676 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801c54e:	3301      	adds	r3, #1
 801c550:	f100 8091 	bmi.w	801c676 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801c554:	429a      	cmp	r2, r3
 801c556:	f2c0 808e 	blt.w	801c676 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801c55a:	9b06      	ldr	r3, [sp, #24]
 801c55c:	9e07      	ldr	r6, [sp, #28]
 801c55e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c562:	2b00      	cmp	r3, #0
 801c564:	f340 80b0 	ble.w	801c6c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801c568:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801c56a:	1425      	asrs	r5, r4, #16
 801c56c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c56e:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801c572:	68c7      	ldr	r7, [r0, #12]
 801c574:	ea5f 402b 	movs.w	r0, fp, asr #16
 801c578:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801c57c:	689b      	ldr	r3, [r3, #8]
 801c57e:	f100 80ea 	bmi.w	801c756 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c582:	f103 3cff 	add.w	ip, r3, #4294967295
 801c586:	4560      	cmp	r0, ip
 801c588:	f280 80e5 	bge.w	801c756 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c58c:	2d00      	cmp	r5, #0
 801c58e:	f2c0 80e2 	blt.w	801c756 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c592:	f107 3cff 	add.w	ip, r7, #4294967295
 801c596:	4565      	cmp	r5, ip
 801c598:	f280 80dd 	bge.w	801c756 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801c59c:	b21b      	sxth	r3, r3
 801c59e:	fb05 0003 	mla	r0, r5, r3, r0
 801c5a2:	9d08      	ldr	r5, [sp, #32]
 801c5a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c5a8:	182f      	adds	r7, r5, r0
 801c5aa:	5c2d      	ldrb	r5, [r5, r0]
 801c5ac:	7878      	ldrb	r0, [r7, #1]
 801c5ae:	f897 e002 	ldrb.w	lr, [r7, #2]
 801c5b2:	900c      	str	r0, [sp, #48]	@ 0x30
 801c5b4:	f897 9003 	ldrb.w	r9, [r7, #3]
 801c5b8:	f897 8004 	ldrb.w	r8, [r7, #4]
 801c5bc:	f897 a005 	ldrb.w	sl, [r7, #5]
 801c5c0:	b1c9      	cbz	r1, 801c5f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801c5c2:	f04f 0c03 	mov.w	ip, #3
 801c5c6:	f06f 0004 	mvn.w	r0, #4
 801c5ca:	3705      	adds	r7, #5
 801c5cc:	fb13 030c 	smlabb	r3, r3, ip, r0
 801c5d0:	eb07 0c03 	add.w	ip, r7, r3
 801c5d4:	5cfb      	ldrb	r3, [r7, r3]
 801c5d6:	930d      	str	r3, [sp, #52]	@ 0x34
 801c5d8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801c5dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c5de:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801c5e2:	9311      	str	r3, [sp, #68]	@ 0x44
 801c5e4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801c5e8:	930e      	str	r3, [sp, #56]	@ 0x38
 801c5ea:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801c5ee:	9310      	str	r3, [sp, #64]	@ 0x40
 801c5f0:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801c5f4:	9312      	str	r3, [sp, #72]	@ 0x48
 801c5f6:	b292      	uxth	r2, r2
 801c5f8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801c5fa:	b289      	uxth	r1, r1
 801c5fc:	fb02 f301 	mul.w	r3, r2, r1
 801c600:	0112      	lsls	r2, r2, #4
 801c602:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801c606:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801c60a:	1ad2      	subs	r2, r2, r3
 801c60c:	b289      	uxth	r1, r1
 801c60e:	b292      	uxth	r2, r2
 801c610:	1a7f      	subs	r7, r7, r1
 801c612:	fb02 f909 	mul.w	r9, r2, r9
 801c616:	b2bf      	uxth	r7, r7
 801c618:	fb02 f808 	mul.w	r8, r2, r8
 801c61c:	fb02 fa0a 	mul.w	sl, r2, sl
 801c620:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c622:	fb07 9905 	mla	r9, r7, r5, r9
 801c626:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801c628:	fb07 8800 	mla	r8, r7, r0, r8
 801c62c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c62e:	fb07 aa0e 	mla	sl, r7, lr, sl
 801c632:	fb01 9905 	mla	r9, r1, r5, r9
 801c636:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801c638:	fb01 8800 	mla	r8, r1, r0, r8
 801c63c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c63e:	fb01 a102 	mla	r1, r1, r2, sl
 801c642:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c644:	fb03 9905 	mla	r9, r3, r5, r9
 801c648:	fb03 8800 	mla	r8, r3, r0, r8
 801c64c:	fb03 1302 	mla	r3, r3, r2, r1
 801c650:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c654:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c658:	121b      	asrs	r3, r3, #8
 801c65a:	f886 9000 	strb.w	r9, [r6]
 801c65e:	f886 8001 	strb.w	r8, [r6, #1]
 801c662:	70b3      	strb	r3, [r6, #2]
 801c664:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c666:	3603      	adds	r6, #3
 801c668:	449b      	add	fp, r3
 801c66a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c66c:	441c      	add	r4, r3
 801c66e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c670:	3b01      	subs	r3, #1
 801c672:	930a      	str	r3, [sp, #40]	@ 0x28
 801c674:	e774      	b.n	801c560 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801c676:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c678:	449b      	add	fp, r3
 801c67a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c67c:	441c      	add	r4, r3
 801c67e:	9b06      	ldr	r3, [sp, #24]
 801c680:	3b01      	subs	r3, #1
 801c682:	9306      	str	r3, [sp, #24]
 801c684:	9b07      	ldr	r3, [sp, #28]
 801c686:	3303      	adds	r3, #3
 801c688:	9307      	str	r3, [sp, #28]
 801c68a:	e74a      	b.n	801c522 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c68c:	d024      	beq.n	801c6d8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801c68e:	9b06      	ldr	r3, [sp, #24]
 801c690:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801c692:	3b01      	subs	r3, #1
 801c694:	fb00 b003 	mla	r0, r0, r3, fp
 801c698:	1400      	asrs	r0, r0, #16
 801c69a:	f53f af5e 	bmi.w	801c55a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c69e:	3901      	subs	r1, #1
 801c6a0:	4288      	cmp	r0, r1
 801c6a2:	f6bf af5a 	bge.w	801c55a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c6a6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801c6a8:	fb01 4303 	mla	r3, r1, r3, r4
 801c6ac:	141b      	asrs	r3, r3, #16
 801c6ae:	f53f af54 	bmi.w	801c55a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c6b2:	3a01      	subs	r2, #1
 801c6b4:	4293      	cmp	r3, r2
 801c6b6:	f6bf af50 	bge.w	801c55a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c6ba:	9b07      	ldr	r3, [sp, #28]
 801c6bc:	f8dd e018 	ldr.w	lr, [sp, #24]
 801c6c0:	1cde      	adds	r6, r3, #3
 801c6c2:	f1be 0f00 	cmp.w	lr, #0
 801c6c6:	dc5f      	bgt.n	801c788 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c6c8:	9b06      	ldr	r3, [sp, #24]
 801c6ca:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c6ce:	9b07      	ldr	r3, [sp, #28]
 801c6d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c6d4:	4423      	add	r3, r4
 801c6d6:	9307      	str	r3, [sp, #28]
 801c6d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	f340 80c5 	ble.w	801c86a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801c6e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c6e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c6e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c6ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c6ee:	eef0 6a62 	vmov.f32	s13, s5
 801c6f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c6f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c6fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c6fe:	ee16 ba90 	vmov	fp, s13
 801c702:	eef0 6a43 	vmov.f32	s13, s6
 801c706:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c70a:	ee16 4a90 	vmov	r4, s13
 801c70e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c712:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c716:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c71a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c71e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c722:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c726:	ee12 2a90 	vmov	r2, s5
 801c72a:	eef0 2a47 	vmov.f32	s5, s14
 801c72e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c732:	ee13 2a10 	vmov	r2, s6
 801c736:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c738:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c73a:	eeb0 3a67 	vmov.f32	s6, s15
 801c73e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c742:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c746:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c748:	3b01      	subs	r3, #1
 801c74a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c74c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c74e:	bf08      	it	eq
 801c750:	4613      	moveq	r3, r2
 801c752:	9306      	str	r3, [sp, #24]
 801c754:	e6d7      	b.n	801c506 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c756:	f110 0c01 	adds.w	ip, r0, #1
 801c75a:	d483      	bmi.n	801c664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801c75c:	4563      	cmp	r3, ip
 801c75e:	db81      	blt.n	801c664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801c760:	f115 0c01 	adds.w	ip, r5, #1
 801c764:	f53f af7e 	bmi.w	801c664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801c768:	4567      	cmp	r7, ip
 801c76a:	f6ff af7b 	blt.w	801c664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801c76e:	b23f      	sxth	r7, r7
 801c770:	b21b      	sxth	r3, r3
 801c772:	9700      	str	r7, [sp, #0]
 801c774:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801c778:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801c77c:	9a08      	ldr	r2, [sp, #32]
 801c77e:	4631      	mov	r1, r6
 801c780:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c782:	f7ff fdf9 	bl	801c378 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801c786:	e76d      	b.n	801c664 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801c788:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801c78a:	ea4f 402b 	mov.w	r0, fp, asr #16
 801c78e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801c792:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801c796:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801c79a:	1421      	asrs	r1, r4, #16
 801c79c:	930a      	str	r3, [sp, #40]	@ 0x28
 801c79e:	fb0c 0101 	mla	r1, ip, r1, r0
 801c7a2:	9808      	ldr	r0, [sp, #32]
 801c7a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c7a8:	1845      	adds	r5, r0, r1
 801c7aa:	5c40      	ldrb	r0, [r0, r1]
 801c7ac:	796f      	ldrb	r7, [r5, #5]
 801c7ae:	7869      	ldrb	r1, [r5, #1]
 801c7b0:	f895 8002 	ldrb.w	r8, [r5, #2]
 801c7b4:	f895 a003 	ldrb.w	sl, [r5, #3]
 801c7b8:	f895 9004 	ldrb.w	r9, [r5, #4]
 801c7bc:	970c      	str	r7, [sp, #48]	@ 0x30
 801c7be:	b1a2      	cbz	r2, 801c7ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801c7c0:	2703      	movs	r7, #3
 801c7c2:	f06f 0304 	mvn.w	r3, #4
 801c7c6:	3505      	adds	r5, #5
 801c7c8:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801c7cc:	eb05 070c 	add.w	r7, r5, ip
 801c7d0:	f815 500c 	ldrb.w	r5, [r5, ip]
 801c7d4:	9513      	str	r5, [sp, #76]	@ 0x4c
 801c7d6:	787d      	ldrb	r5, [r7, #1]
 801c7d8:	9515      	str	r5, [sp, #84]	@ 0x54
 801c7da:	78bd      	ldrb	r5, [r7, #2]
 801c7dc:	9517      	str	r5, [sp, #92]	@ 0x5c
 801c7de:	78fd      	ldrb	r5, [r7, #3]
 801c7e0:	9514      	str	r5, [sp, #80]	@ 0x50
 801c7e2:	793d      	ldrb	r5, [r7, #4]
 801c7e4:	9516      	str	r5, [sp, #88]	@ 0x58
 801c7e6:	797d      	ldrb	r5, [r7, #5]
 801c7e8:	9518      	str	r5, [sp, #96]	@ 0x60
 801c7ea:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801c7ee:	b292      	uxth	r2, r2
 801c7f0:	3603      	adds	r6, #3
 801c7f2:	f10e 3eff 	add.w	lr, lr, #4294967295
 801c7f6:	fb03 f502 	mul.w	r5, r3, r2
 801c7fa:	011b      	lsls	r3, r3, #4
 801c7fc:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801c800:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 801c804:	1b5b      	subs	r3, r3, r5
 801c806:	b292      	uxth	r2, r2
 801c808:	b29b      	uxth	r3, r3
 801c80a:	1abf      	subs	r7, r7, r2
 801c80c:	fb03 f909 	mul.w	r9, r3, r9
 801c810:	b2bf      	uxth	r7, r7
 801c812:	fb03 fa0a 	mul.w	sl, r3, sl
 801c816:	fb07 9901 	mla	r9, r7, r1, r9
 801c81a:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801c81c:	fb07 aa00 	mla	sl, r7, r0, sl
 801c820:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801c822:	fb02 9901 	mla	r9, r2, r1, r9
 801c826:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801c828:	fb02 aa00 	mla	sl, r2, r0, sl
 801c82c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801c82e:	fb05 9901 	mla	r9, r5, r1, r9
 801c832:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c834:	fb05 aa00 	mla	sl, r5, r0, sl
 801c838:	434b      	muls	r3, r1
 801c83a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c83c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c840:	fb07 3308 	mla	r3, r7, r8, r3
 801c844:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c848:	f806 ac06 	strb.w	sl, [r6, #-6]
 801c84c:	fb02 3201 	mla	r2, r2, r1, r3
 801c850:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c852:	f806 9c05 	strb.w	r9, [r6, #-5]
 801c856:	fb05 2503 	mla	r5, r5, r3, r2
 801c85a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c85c:	122d      	asrs	r5, r5, #8
 801c85e:	449b      	add	fp, r3
 801c860:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c862:	f806 5c04 	strb.w	r5, [r6, #-4]
 801c866:	441c      	add	r4, r3
 801c868:	e72b      	b.n	801c6c2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801c86a:	b01b      	add	sp, #108	@ 0x6c
 801c86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c870 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801c870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c874:	b087      	sub	sp, #28
 801c876:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801c87a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801c87e:	fb05 7003 	mla	r0, r5, r3, r7
 801c882:	2d00      	cmp	r5, #0
 801c884:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801c888:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801c88c:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801c890:	f2c0 811f 	blt.w	801cad2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801c894:	45a8      	cmp	r8, r5
 801c896:	f340 811c 	ble.w	801cad2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801c89a:	2f00      	cmp	r7, #0
 801c89c:	f2c0 8117 	blt.w	801cace <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801c8a0:	42bb      	cmp	r3, r7
 801c8a2:	f340 8114 	ble.w	801cace <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801c8a6:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801c8aa:	1c7a      	adds	r2, r7, #1
 801c8ac:	f100 8114 	bmi.w	801cad8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801c8b0:	4293      	cmp	r3, r2
 801c8b2:	f340 8111 	ble.w	801cad8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801c8b6:	2c00      	cmp	r4, #0
 801c8b8:	f000 8110 	beq.w	801cadc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801c8bc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801c8c0:	3501      	adds	r5, #1
 801c8c2:	f100 810f 	bmi.w	801cae4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801c8c6:	45a8      	cmp	r8, r5
 801c8c8:	f340 810c 	ble.w	801cae4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801c8cc:	f1be 0f00 	cmp.w	lr, #0
 801c8d0:	f000 810b 	beq.w	801caea <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801c8d4:	2f00      	cmp	r7, #0
 801c8d6:	f2c0 8103 	blt.w	801cae0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801c8da:	42bb      	cmp	r3, r7
 801c8dc:	f340 8100 	ble.w	801cae0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801c8e0:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801c8e4:	3701      	adds	r7, #1
 801c8e6:	f100 8103 	bmi.w	801caf0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801c8ea:	42bb      	cmp	r3, r7
 801c8ec:	f340 8100 	ble.w	801caf0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801c8f0:	2c00      	cmp	r4, #0
 801c8f2:	f000 80ff 	beq.w	801caf4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801c8f6:	3301      	adds	r3, #1
 801c8f8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801c8fc:	fa1f fc84 	uxth.w	ip, r4
 801c900:	fa1f fe8e 	uxth.w	lr, lr
 801c904:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801c908:	fb0c f90e 	mul.w	r9, ip, lr
 801c90c:	0e13      	lsrs	r3, r2, #24
 801c90e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801c912:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801c916:	9302      	str	r3, [sp, #8]
 801c918:	ebac 0709 	sub.w	r7, ip, r9
 801c91c:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801c920:	fa1f f48e 	uxth.w	r4, lr
 801c924:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801c928:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801c92c:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801c930:	fb0a fe0e 	mul.w	lr, sl, lr
 801c934:	1b1b      	subs	r3, r3, r4
 801c936:	fb0a f606 	mul.w	r6, sl, r6
 801c93a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801c93e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801c942:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801c946:	b29b      	uxth	r3, r3
 801c948:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c94c:	b2bf      	uxth	r7, r7
 801c94e:	9301      	str	r3, [sp, #4]
 801c950:	44e6      	add	lr, ip
 801c952:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801c956:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c95a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801c95e:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801c962:	9303      	str	r3, [sp, #12]
 801c964:	0a33      	lsrs	r3, r6, #8
 801c966:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801c96a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801c96e:	9304      	str	r3, [sp, #16]
 801c970:	fb0b f606 	mul.w	r6, fp, r6
 801c974:	fb0b f000 	mul.w	r0, fp, r0
 801c978:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801c97c:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801c980:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c984:	44b6      	add	lr, r6
 801c986:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801c98a:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801c98e:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801c992:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801c996:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c99a:	fb08 f606 	mul.w	r6, r8, r6
 801c99e:	0a03      	lsrs	r3, r0, #8
 801c9a0:	fb08 f505 	mul.w	r5, r8, r5
 801c9a4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c9a8:	0a30      	lsrs	r0, r6, #8
 801c9aa:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801c9ae:	9305      	str	r3, [sp, #20]
 801c9b0:	0e13      	lsrs	r3, r2, #24
 801c9b2:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801c9b6:	fb0e fe07 	mul.w	lr, lr, r7
 801c9ba:	4430      	add	r0, r6
 801c9bc:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801c9c0:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801c9c4:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801c9c8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801c9cc:	0a00      	lsrs	r0, r0, #8
 801c9ce:	435e      	muls	r6, r3
 801c9d0:	0a2d      	lsrs	r5, r5, #8
 801c9d2:	435a      	muls	r2, r3
 801c9d4:	9b03      	ldr	r3, [sp, #12]
 801c9d6:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801c9da:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801c9de:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801c9e2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c9e6:	44b4      	add	ip, r6
 801c9e8:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801c9ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c9f0:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801c9f4:	9e01      	ldr	r6, [sp, #4]
 801c9f6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c9fa:	fb03 ee06 	mla	lr, r3, r6, lr
 801c9fe:	9b04      	ldr	r3, [sp, #16]
 801ca00:	0a12      	lsrs	r2, r2, #8
 801ca02:	fb0c ee09 	mla	lr, ip, r9, lr
 801ca06:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801ca0a:	9b05      	ldr	r3, [sp, #20]
 801ca0c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ca10:	fb00 ee04 	mla	lr, r0, r4, lr
 801ca14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ca18:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801ca1c:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801ca20:	9b01      	ldr	r3, [sp, #4]
 801ca22:	fb07 fe0e 	mul.w	lr, r7, lr
 801ca26:	fb07 f70b 	mul.w	r7, r7, fp
 801ca2a:	fb03 ee06 	mla	lr, r3, r6, lr
 801ca2e:	fb03 730a 	mla	r3, r3, sl, r7
 801ca32:	fb09 e202 	mla	r2, r9, r2, lr
 801ca36:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801ca3a:	fb04 2e0e 	mla	lr, r4, lr, r2
 801ca3e:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 801ca42:	fb04 3408 	mla	r4, r4, r8, r3
 801ca46:	9b02      	ldr	r3, [sp, #8]
 801ca48:	b292      	uxth	r2, r2
 801ca4a:	fb09 4903 	mla	r9, r9, r3, r4
 801ca4e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ca52:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801ca56:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801ca5a:	fb09 f902 	mul.w	r9, r9, r2
 801ca5e:	ea40 0e0e 	orr.w	lr, r0, lr
 801ca62:	f109 0301 	add.w	r3, r9, #1
 801ca66:	fa5f f08e 	uxtb.w	r0, lr
 801ca6a:	fb10 f002 	smulbb	r0, r0, r2
 801ca6e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801ca72:	780b      	ldrb	r3, [r1, #0]
 801ca74:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801ca78:	fa5f f989 	uxtb.w	r9, r9
 801ca7c:	fb03 0309 	mla	r3, r3, r9, r0
 801ca80:	b29b      	uxth	r3, r3
 801ca82:	1c58      	adds	r0, r3, #1
 801ca84:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ca88:	7848      	ldrb	r0, [r1, #1]
 801ca8a:	fb10 f009 	smulbb	r0, r0, r9
 801ca8e:	121b      	asrs	r3, r3, #8
 801ca90:	700b      	strb	r3, [r1, #0]
 801ca92:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801ca96:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801ca9a:	fb03 0302 	mla	r3, r3, r2, r0
 801ca9e:	b29b      	uxth	r3, r3
 801caa0:	1c58      	adds	r0, r3, #1
 801caa2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801caa6:	121b      	asrs	r3, r3, #8
 801caa8:	704b      	strb	r3, [r1, #1]
 801caaa:	788b      	ldrb	r3, [r1, #2]
 801caac:	fb13 f909 	smulbb	r9, r3, r9
 801cab0:	fb0e 9e02 	mla	lr, lr, r2, r9
 801cab4:	fa1f fe8e 	uxth.w	lr, lr
 801cab8:	f10e 0301 	add.w	r3, lr, #1
 801cabc:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801cac0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801cac4:	f881 e002 	strb.w	lr, [r1, #2]
 801cac8:	b007      	add	sp, #28
 801caca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cace:	2600      	movs	r6, #0
 801cad0:	e6eb      	b.n	801c8aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801cad2:	2000      	movs	r0, #0
 801cad4:	4606      	mov	r6, r0
 801cad6:	e6f3      	b.n	801c8c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801cad8:	2000      	movs	r0, #0
 801cada:	e6f1      	b.n	801c8c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801cadc:	4620      	mov	r0, r4
 801cade:	e6ef      	b.n	801c8c0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801cae0:	2500      	movs	r5, #0
 801cae2:	e6ff      	b.n	801c8e4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801cae4:	2200      	movs	r2, #0
 801cae6:	4615      	mov	r5, r2
 801cae8:	e708      	b.n	801c8fc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801caea:	4672      	mov	r2, lr
 801caec:	4675      	mov	r5, lr
 801caee:	e705      	b.n	801c8fc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801caf0:	2200      	movs	r2, #0
 801caf2:	e703      	b.n	801c8fc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801caf4:	4622      	mov	r2, r4
 801caf6:	e701      	b.n	801c8fc <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801caf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801caf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cafc:	b09d      	sub	sp, #116	@ 0x74
 801cafe:	9219      	str	r2, [sp, #100]	@ 0x64
 801cb00:	9307      	str	r3, [sp, #28]
 801cb02:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801cb04:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 801cb08:	901b      	str	r0, [sp, #108]	@ 0x6c
 801cb0a:	931a      	str	r3, [sp, #104]	@ 0x68
 801cb0c:	6850      	ldr	r0, [r2, #4]
 801cb0e:	9117      	str	r1, [sp, #92]	@ 0x5c
 801cb10:	6812      	ldr	r2, [r2, #0]
 801cb12:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 801cb16:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 801cb1a:	fb00 1303 	mla	r3, r0, r3, r1
 801cb1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb22:	18d3      	adds	r3, r2, r3
 801cb24:	930a      	str	r3, [sp, #40]	@ 0x28
 801cb26:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801cb28:	681b      	ldr	r3, [r3, #0]
 801cb2a:	9310      	str	r3, [sp, #64]	@ 0x40
 801cb2c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801cb30:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cb32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cb34:	2b00      	cmp	r3, #0
 801cb36:	dc03      	bgt.n	801cb40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cb38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	f340 8368 	ble.w	801d210 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801cb40:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801cb42:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cb46:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cb4a:	1e48      	subs	r0, r1, #1
 801cb4c:	1e57      	subs	r7, r2, #1
 801cb4e:	9b07      	ldr	r3, [sp, #28]
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	f340 8187 	ble.w	801ce64 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801cb56:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801cb5a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801cb5e:	d406      	bmi.n	801cb6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cb60:	4584      	cmp	ip, r0
 801cb62:	da04      	bge.n	801cb6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	db02      	blt.n	801cb6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801cb68:	42bb      	cmp	r3, r7
 801cb6a:	f2c0 817c 	blt.w	801ce66 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801cb6e:	f11c 0c01 	adds.w	ip, ip, #1
 801cb72:	f100 816c 	bmi.w	801ce4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801cb76:	4561      	cmp	r1, ip
 801cb78:	f2c0 8169 	blt.w	801ce4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801cb7c:	3301      	adds	r3, #1
 801cb7e:	f100 8166 	bmi.w	801ce4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801cb82:	429a      	cmp	r2, r3
 801cb84:	f2c0 8163 	blt.w	801ce4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801cb88:	9b07      	ldr	r3, [sp, #28]
 801cb8a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801cb8c:	9318      	str	r3, [sp, #96]	@ 0x60
 801cb8e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	f340 8186 	ble.w	801cea2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801cb96:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801cb98:	142a      	asrs	r2, r5, #16
 801cb9a:	ea4f 4026 	mov.w	r0, r6, asr #16
 801cb9e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801cba2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801cba6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801cbaa:	f100 81cb 	bmi.w	801cf44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801cbae:	f10e 38ff 	add.w	r8, lr, #4294967295
 801cbb2:	4542      	cmp	r2, r8
 801cbb4:	f280 81c6 	bge.w	801cf44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801cbb8:	2800      	cmp	r0, #0
 801cbba:	f2c0 81c3 	blt.w	801cf44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801cbbe:	f103 38ff 	add.w	r8, r3, #4294967295
 801cbc2:	4540      	cmp	r0, r8
 801cbc4:	f280 81be 	bge.w	801cf44 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801cbc8:	fa0f f38e 	sxth.w	r3, lr
 801cbcc:	fb00 2203 	mla	r2, r0, r3, r2
 801cbd0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801cbd2:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801cbd6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801cbda:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801cbde:	2900      	cmp	r1, #0
 801cbe0:	f000 81a6 	beq.w	801cf30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801cbe4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801cbe8:	900c      	str	r0, [sp, #48]	@ 0x30
 801cbea:	0e00      	lsrs	r0, r0, #24
 801cbec:	9013      	str	r0, [sp, #76]	@ 0x4c
 801cbee:	f1bc 0f00 	cmp.w	ip, #0
 801cbf2:	d00f      	beq.n	801cc14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801cbf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801cbf8:	3b01      	subs	r3, #1
 801cbfa:	009b      	lsls	r3, r3, #2
 801cbfc:	3304      	adds	r3, #4
 801cbfe:	eb08 0003 	add.w	r0, r8, r3
 801cc02:	f858 3003 	ldr.w	r3, [r8, r3]
 801cc06:	9308      	str	r3, [sp, #32]
 801cc08:	0e1b      	lsrs	r3, r3, #24
 801cc0a:	9311      	str	r3, [sp, #68]	@ 0x44
 801cc0c:	6843      	ldr	r3, [r0, #4]
 801cc0e:	930d      	str	r3, [sp, #52]	@ 0x34
 801cc10:	0e1b      	lsrs	r3, r3, #24
 801cc12:	9314      	str	r3, [sp, #80]	@ 0x50
 801cc14:	b289      	uxth	r1, r1
 801cc16:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801cc18:	fa1f fc8c 	uxth.w	ip, ip
 801cc1c:	0108      	lsls	r0, r1, #4
 801cc1e:	fb01 f90c 	mul.w	r9, r1, ip
 801cc22:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801cc26:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801cc2a:	eba0 0809 	sub.w	r8, r0, r9
 801cc2e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801cc30:	fa1f f18c 	uxth.w	r1, ip
 801cc34:	fa1f f888 	uxth.w	r8, r8
 801cc38:	1a5b      	subs	r3, r3, r1
 801cc3a:	fb08 f000 	mul.w	r0, r8, r0
 801cc3e:	b29b      	uxth	r3, r3
 801cc40:	fb03 000e 	mla	r0, r3, lr, r0
 801cc44:	fb01 0004 	mla	r0, r1, r4, r0
 801cc48:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801cc4a:	fb09 0004 	mla	r0, r9, r4, r0
 801cc4e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801cc52:	2800      	cmp	r0, #0
 801cc54:	f000 80f2 	beq.w	801ce3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801cc58:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801cc5c:	d01b      	beq.n	801cc96 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801cc5e:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801cc62:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801cc66:	fb0e fa0a 	mul.w	sl, lr, sl
 801cc6a:	fb0e fe02 	mul.w	lr, lr, r2
 801cc6e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801cc72:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801cc76:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801cc7a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801cc7e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801cc82:	4452      	add	r2, sl
 801cc84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cc88:	0a12      	lsrs	r2, r2, #8
 801cc8a:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801cc8e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801cc92:	ea42 020c 	orr.w	r2, r2, ip
 801cc96:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cc98:	2cff      	cmp	r4, #255	@ 0xff
 801cc9a:	d021      	beq.n	801cce0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801cc9c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801cc9e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801cca2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cca4:	fb04 fb0b 	mul.w	fp, r4, fp
 801cca8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ccaa:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ccae:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ccb0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ccb4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ccb8:	fb04 fa0a 	mul.w	sl, r4, sl
 801ccbc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ccc0:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ccc4:	44de      	add	lr, fp
 801ccc6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ccca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ccce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ccd2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ccd6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ccda:	ea4e 040a 	orr.w	r4, lr, sl
 801ccde:	940c      	str	r4, [sp, #48]	@ 0x30
 801cce0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801cce2:	2cff      	cmp	r4, #255	@ 0xff
 801cce4:	d021      	beq.n	801cd2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801cce6:	9c08      	ldr	r4, [sp, #32]
 801cce8:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801ccec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ccee:	fb04 fb0b 	mul.w	fp, r4, fp
 801ccf2:	9c08      	ldr	r4, [sp, #32]
 801ccf4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ccf8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ccfa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ccfe:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cd02:	fb04 fa0a 	mul.w	sl, r4, sl
 801cd06:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cd0a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801cd0e:	44de      	add	lr, fp
 801cd10:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cd14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cd18:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cd1c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cd20:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801cd24:	ea4e 040a 	orr.w	r4, lr, sl
 801cd28:	9408      	str	r4, [sp, #32]
 801cd2a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801cd2c:	2cff      	cmp	r4, #255	@ 0xff
 801cd2e:	d021      	beq.n	801cd74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801cd30:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801cd32:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801cd36:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801cd38:	fb04 fb0b 	mul.w	fp, r4, fp
 801cd3c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801cd3e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801cd42:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801cd44:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801cd48:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cd4c:	fb04 fa0a 	mul.w	sl, r4, sl
 801cd50:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cd54:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801cd58:	44de      	add	lr, fp
 801cd5a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cd5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cd62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cd66:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cd6a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801cd6e:	ea4e 040a 	orr.w	r4, lr, sl
 801cd72:	940d      	str	r4, [sp, #52]	@ 0x34
 801cd74:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801cd76:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801cd7a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801cd7e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801cd82:	9c08      	ldr	r4, [sp, #32]
 801cd84:	fb08 fc0c 	mul.w	ip, r8, ip
 801cd88:	fb03 cc0e 	mla	ip, r3, lr, ip
 801cd8c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801cd90:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801cd92:	fb01 cc0e 	mla	ip, r1, lr, ip
 801cd96:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801cd9a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801cd9c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801cda0:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801cda4:	fb08 f80e 	mul.w	r8, r8, lr
 801cda8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cdac:	fb03 8202 	mla	r2, r3, r2, r8
 801cdb0:	9b08      	ldr	r3, [sp, #32]
 801cdb2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cdb6:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 801cdba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cdbc:	fb01 220a 	mla	r2, r1, sl, r2
 801cdc0:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 801cdc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cdc6:	fb09 2901 	mla	r9, r9, r1, r2
 801cdca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cdcc:	4343      	muls	r3, r0
 801cdce:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801cdd2:	1c58      	adds	r0, r3, #1
 801cdd4:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801cdd8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801cddc:	783b      	ldrb	r3, [r7, #0]
 801cdde:	ea4c 0c09 	orr.w	ip, ip, r9
 801cde2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801cde6:	fa5f f28c 	uxtb.w	r2, ip
 801cdea:	b2c0      	uxtb	r0, r0
 801cdec:	fb12 f201 	smulbb	r2, r2, r1
 801cdf0:	fb03 2300 	mla	r3, r3, r0, r2
 801cdf4:	b29b      	uxth	r3, r3
 801cdf6:	1c5a      	adds	r2, r3, #1
 801cdf8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cdfc:	787a      	ldrb	r2, [r7, #1]
 801cdfe:	fb12 f200 	smulbb	r2, r2, r0
 801ce02:	121b      	asrs	r3, r3, #8
 801ce04:	703b      	strb	r3, [r7, #0]
 801ce06:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801ce0a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ce0e:	fb03 2301 	mla	r3, r3, r1, r2
 801ce12:	b29b      	uxth	r3, r3
 801ce14:	1c5a      	adds	r2, r3, #1
 801ce16:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ce1a:	121b      	asrs	r3, r3, #8
 801ce1c:	707b      	strb	r3, [r7, #1]
 801ce1e:	78bb      	ldrb	r3, [r7, #2]
 801ce20:	fb13 f000 	smulbb	r0, r3, r0
 801ce24:	fb0c 0c01 	mla	ip, ip, r1, r0
 801ce28:	fa1f fc8c 	uxth.w	ip, ip
 801ce2c:	f10c 0301 	add.w	r3, ip, #1
 801ce30:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ce34:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ce38:	f887 c002 	strb.w	ip, [r7, #2]
 801ce3c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801ce3e:	3703      	adds	r7, #3
 801ce40:	441d      	add	r5, r3
 801ce42:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801ce44:	441e      	add	r6, r3
 801ce46:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ce48:	3b01      	subs	r3, #1
 801ce4a:	9318      	str	r3, [sp, #96]	@ 0x60
 801ce4c:	e69f      	b.n	801cb8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ce4e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801ce50:	441d      	add	r5, r3
 801ce52:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801ce54:	441e      	add	r6, r3
 801ce56:	9b07      	ldr	r3, [sp, #28]
 801ce58:	3b01      	subs	r3, #1
 801ce5a:	9307      	str	r3, [sp, #28]
 801ce5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ce5e:	3303      	adds	r3, #3
 801ce60:	930a      	str	r3, [sp, #40]	@ 0x28
 801ce62:	e674      	b.n	801cb4e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801ce64:	d025      	beq.n	801ceb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801ce66:	9b07      	ldr	r3, [sp, #28]
 801ce68:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 801ce6a:	3b01      	subs	r3, #1
 801ce6c:	fb00 5003 	mla	r0, r0, r3, r5
 801ce70:	1400      	asrs	r0, r0, #16
 801ce72:	f53f ae89 	bmi.w	801cb88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ce76:	3901      	subs	r1, #1
 801ce78:	4288      	cmp	r0, r1
 801ce7a:	f6bf ae85 	bge.w	801cb88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ce7e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801ce80:	fb01 6303 	mla	r3, r1, r3, r6
 801ce84:	141b      	asrs	r3, r3, #16
 801ce86:	f53f ae7f 	bmi.w	801cb88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ce8a:	3a01      	subs	r2, #1
 801ce8c:	4293      	cmp	r3, r2
 801ce8e:	f6bf ae7b 	bge.w	801cb88 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ce92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ce94:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ce98:	f103 0e03 	add.w	lr, r3, #3
 801ce9c:	f1bb 0f00 	cmp.w	fp, #0
 801cea0:	dc6e      	bgt.n	801cf80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801cea2:	9b07      	ldr	r3, [sp, #28]
 801cea4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801cea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ceaa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ceae:	4423      	add	r3, r4
 801ceb0:	930a      	str	r3, [sp, #40]	@ 0x28
 801ceb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	f340 81ab 	ble.w	801d210 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801ceba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801cebe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801cec0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cec4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cec8:	eef0 6a62 	vmov.f32	s13, s5
 801cecc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ced0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ced4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ced8:	ee16 5a90 	vmov	r5, s13
 801cedc:	eef0 6a43 	vmov.f32	s13, s6
 801cee0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cee4:	ee16 6a90 	vmov	r6, s13
 801cee8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ceec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cef0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cef4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cef8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cefc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf00:	ee12 2a90 	vmov	r2, s5
 801cf04:	eef0 2a47 	vmov.f32	s5, s14
 801cf08:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf0c:	ee13 2a10 	vmov	r2, s6
 801cf10:	9329      	str	r3, [sp, #164]	@ 0xa4
 801cf12:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801cf14:	eeb0 3a67 	vmov.f32	s6, s15
 801cf18:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf1c:	932a      	str	r3, [sp, #168]	@ 0xa8
 801cf1e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cf20:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801cf22:	3b01      	subs	r3, #1
 801cf24:	9317      	str	r3, [sp, #92]	@ 0x5c
 801cf26:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801cf28:	bf08      	it	eq
 801cf2a:	4613      	moveq	r3, r2
 801cf2c:	9307      	str	r3, [sp, #28]
 801cf2e:	e600      	b.n	801cb32 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801cf30:	f1bc 0f00 	cmp.w	ip, #0
 801cf34:	f43f ae6e 	beq.w	801cc14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801cf38:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801cf3c:	9308      	str	r3, [sp, #32]
 801cf3e:	0e1b      	lsrs	r3, r3, #24
 801cf40:	9311      	str	r3, [sp, #68]	@ 0x44
 801cf42:	e667      	b.n	801cc14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801cf44:	f112 0801 	adds.w	r8, r2, #1
 801cf48:	f53f af78 	bmi.w	801ce3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801cf4c:	45c6      	cmp	lr, r8
 801cf4e:	f6ff af75 	blt.w	801ce3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801cf52:	f110 0801 	adds.w	r8, r0, #1
 801cf56:	f53f af71 	bmi.w	801ce3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801cf5a:	4543      	cmp	r3, r8
 801cf5c:	f6ff af6e 	blt.w	801ce3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801cf60:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801cf62:	b21b      	sxth	r3, r3
 801cf64:	9201      	str	r2, [sp, #4]
 801cf66:	9300      	str	r3, [sp, #0]
 801cf68:	fa0f f38e 	sxth.w	r3, lr
 801cf6c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801cf6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cf72:	e9cd c404 	strd	ip, r4, [sp, #16]
 801cf76:	4639      	mov	r1, r7
 801cf78:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801cf7a:	f7ff fc79 	bl	801c870 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801cf7e:	e75d      	b.n	801ce3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801cf80:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801cf82:	142f      	asrs	r7, r5, #16
 801cf84:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801cf86:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801cf8a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801cf8e:	1433      	asrs	r3, r6, #16
 801cf90:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801cf94:	fb02 7303 	mla	r3, r2, r3, r7
 801cf98:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801cf9c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801cfa0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801cfa4:	2900      	cmp	r1, #0
 801cfa6:	f000 812a 	beq.w	801d1fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801cfaa:	687c      	ldr	r4, [r7, #4]
 801cfac:	940e      	str	r4, [sp, #56]	@ 0x38
 801cfae:	0e24      	lsrs	r4, r4, #24
 801cfb0:	9415      	str	r4, [sp, #84]	@ 0x54
 801cfb2:	b178      	cbz	r0, 801cfd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801cfb4:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801cfb8:	3a01      	subs	r2, #1
 801cfba:	0092      	lsls	r2, r2, #2
 801cfbc:	3204      	adds	r2, #4
 801cfbe:	eb07 0802 	add.w	r8, r7, r2
 801cfc2:	58ba      	ldr	r2, [r7, r2]
 801cfc4:	9209      	str	r2, [sp, #36]	@ 0x24
 801cfc6:	0e12      	lsrs	r2, r2, #24
 801cfc8:	9212      	str	r2, [sp, #72]	@ 0x48
 801cfca:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801cfce:	920f      	str	r2, [sp, #60]	@ 0x3c
 801cfd0:	0e12      	lsrs	r2, r2, #24
 801cfd2:	9216      	str	r2, [sp, #88]	@ 0x58
 801cfd4:	b289      	uxth	r1, r1
 801cfd6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801cfd8:	b280      	uxth	r0, r0
 801cfda:	fb01 f900 	mul.w	r9, r1, r0
 801cfde:	0109      	lsls	r1, r1, #4
 801cfe0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801cfe4:	eba1 0809 	sub.w	r8, r1, r9
 801cfe8:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 801cfec:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801cfee:	b280      	uxth	r0, r0
 801cff0:	fa1f f888 	uxth.w	r8, r8
 801cff4:	1a12      	subs	r2, r2, r0
 801cff6:	fb08 f101 	mul.w	r1, r8, r1
 801cffa:	b292      	uxth	r2, r2
 801cffc:	fb02 110c 	mla	r1, r2, ip, r1
 801d000:	fb00 1104 	mla	r1, r0, r4, r1
 801d004:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d006:	fb09 1104 	mla	r1, r9, r4, r1
 801d00a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d00e:	2900      	cmp	r1, #0
 801d010:	f000 80ec 	beq.w	801d1ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801d014:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801d018:	d019      	beq.n	801d04e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801d01a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d01e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d022:	fb0c fa0a 	mul.w	sl, ip, sl
 801d026:	fb0c fc03 	mul.w	ip, ip, r3
 801d02a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d02e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d032:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801d036:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d03a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d03e:	4453      	add	r3, sl
 801d040:	0a3f      	lsrs	r7, r7, #8
 801d042:	0a1b      	lsrs	r3, r3, #8
 801d044:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801d048:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d04c:	433b      	orrs	r3, r7
 801d04e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d050:	2cff      	cmp	r4, #255	@ 0xff
 801d052:	d020      	beq.n	801d096 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801d054:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d056:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d05a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d05c:	4367      	muls	r7, r4
 801d05e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d060:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d064:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d068:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d06a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d06e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d072:	fb04 fa0a 	mul.w	sl, r4, sl
 801d076:	44bc      	add	ip, r7
 801d078:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d07c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d080:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d084:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d088:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d08c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d090:	ea4c 040a 	orr.w	r4, ip, sl
 801d094:	940e      	str	r4, [sp, #56]	@ 0x38
 801d096:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d098:	2cff      	cmp	r4, #255	@ 0xff
 801d09a:	d020      	beq.n	801d0de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801d09c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d09e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d0a2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d0a4:	4367      	muls	r7, r4
 801d0a6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d0a8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d0ac:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d0b0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d0b2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d0b6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d0ba:	fb04 fa0a 	mul.w	sl, r4, sl
 801d0be:	44bc      	add	ip, r7
 801d0c0:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d0c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d0c8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d0cc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d0d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d0d4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d0d8:	ea4c 040a 	orr.w	r4, ip, sl
 801d0dc:	9409      	str	r4, [sp, #36]	@ 0x24
 801d0de:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d0e0:	2cff      	cmp	r4, #255	@ 0xff
 801d0e2:	d020      	beq.n	801d126 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801d0e4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d0e6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d0ea:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d0ec:	4367      	muls	r7, r4
 801d0ee:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d0f0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d0f4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d0f8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d0fa:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d0fe:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d102:	fb04 fa0a 	mul.w	sl, r4, sl
 801d106:	44bc      	add	ip, r7
 801d108:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d10c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d110:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d114:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d118:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d11c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d120:	ea4c 040a 	orr.w	r4, ip, sl
 801d124:	940f      	str	r4, [sp, #60]	@ 0x3c
 801d126:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d128:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801d12c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d130:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d134:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d136:	fb08 f707 	mul.w	r7, r8, r7
 801d13a:	fb02 770c 	mla	r7, r2, ip, r7
 801d13e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d142:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d144:	fb00 770c 	mla	r7, r0, ip, r7
 801d148:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d14c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d14e:	fb09 770c 	mla	r7, r9, ip, r7
 801d152:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801d156:	fb08 f80c 	mul.w	r8, r8, ip
 801d15a:	0a3f      	lsrs	r7, r7, #8
 801d15c:	fb02 8303 	mla	r3, r2, r3, r8
 801d160:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d162:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801d166:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801d16a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d16c:	fb00 330a 	mla	r3, r0, sl, r3
 801d170:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801d174:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801d176:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d17a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d17c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d180:	434b      	muls	r3, r1
 801d182:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d186:	1c59      	adds	r1, r3, #1
 801d188:	ea47 070c 	orr.w	r7, r7, ip
 801d18c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d190:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d194:	b2fa      	uxtb	r2, r7
 801d196:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d19a:	fb12 f200 	smulbb	r2, r2, r0
 801d19e:	b2c9      	uxtb	r1, r1
 801d1a0:	fb03 2301 	mla	r3, r3, r1, r2
 801d1a4:	b29b      	uxth	r3, r3
 801d1a6:	1c5a      	adds	r2, r3, #1
 801d1a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d1ac:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801d1b0:	fb12 f201 	smulbb	r2, r2, r1
 801d1b4:	121b      	asrs	r3, r3, #8
 801d1b6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d1ba:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801d1be:	0c3f      	lsrs	r7, r7, #16
 801d1c0:	fb03 2300 	mla	r3, r3, r0, r2
 801d1c4:	b29b      	uxth	r3, r3
 801d1c6:	1c5a      	adds	r2, r3, #1
 801d1c8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d1cc:	121b      	asrs	r3, r3, #8
 801d1ce:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d1d2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801d1d6:	fb13 f101 	smulbb	r1, r3, r1
 801d1da:	fb07 1700 	mla	r7, r7, r0, r1
 801d1de:	b2bf      	uxth	r7, r7
 801d1e0:	1c79      	adds	r1, r7, #1
 801d1e2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801d1e6:	123f      	asrs	r7, r7, #8
 801d1e8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801d1ec:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d1ee:	f10e 0e03 	add.w	lr, lr, #3
 801d1f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d1f6:	441d      	add	r5, r3
 801d1f8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d1fa:	441e      	add	r6, r3
 801d1fc:	e64e      	b.n	801ce9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801d1fe:	2800      	cmp	r0, #0
 801d200:	f43f aee8 	beq.w	801cfd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d204:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801d208:	9209      	str	r2, [sp, #36]	@ 0x24
 801d20a:	0e12      	lsrs	r2, r2, #24
 801d20c:	9212      	str	r2, [sp, #72]	@ 0x48
 801d20e:	e6e1      	b.n	801cfd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d210:	b01d      	add	sp, #116	@ 0x74
 801d212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d216 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801d216:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d21a:	b087      	sub	sp, #28
 801d21c:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801d220:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801d224:	fb05 7003 	mla	r0, r5, r3, r7
 801d228:	2d00      	cmp	r5, #0
 801d22a:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801d22e:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801d232:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801d236:	f2c0 810a 	blt.w	801d44e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801d23a:	45a8      	cmp	r8, r5
 801d23c:	f340 8107 	ble.w	801d44e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801d240:	2f00      	cmp	r7, #0
 801d242:	f2c0 8102 	blt.w	801d44a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801d246:	42bb      	cmp	r3, r7
 801d248:	f340 80ff 	ble.w	801d44a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801d24c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801d250:	1c7a      	adds	r2, r7, #1
 801d252:	f100 80ff 	bmi.w	801d454 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801d256:	4293      	cmp	r3, r2
 801d258:	f340 80fc 	ble.w	801d454 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801d25c:	2c00      	cmp	r4, #0
 801d25e:	f000 80fb 	beq.w	801d458 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801d262:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d266:	3501      	adds	r5, #1
 801d268:	f100 80fa 	bmi.w	801d460 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801d26c:	45a8      	cmp	r8, r5
 801d26e:	f340 80f7 	ble.w	801d460 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801d272:	f1be 0f00 	cmp.w	lr, #0
 801d276:	f000 80f6 	beq.w	801d466 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801d27a:	2f00      	cmp	r7, #0
 801d27c:	f2c0 80ee 	blt.w	801d45c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801d280:	42bb      	cmp	r3, r7
 801d282:	f340 80eb 	ble.w	801d45c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801d286:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801d28a:	3701      	adds	r7, #1
 801d28c:	f100 80ee 	bmi.w	801d46c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801d290:	42bb      	cmp	r3, r7
 801d292:	f340 80eb 	ble.w	801d46c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801d296:	2c00      	cmp	r4, #0
 801d298:	f000 80ea 	beq.w	801d470 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801d29c:	3301      	adds	r3, #1
 801d29e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d2a2:	fa1f fc84 	uxth.w	ip, r4
 801d2a6:	fa1f fe8e 	uxth.w	lr, lr
 801d2aa:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801d2ae:	fb0c f90e 	mul.w	r9, ip, lr
 801d2b2:	0e13      	lsrs	r3, r2, #24
 801d2b4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801d2b8:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801d2bc:	9302      	str	r3, [sp, #8]
 801d2be:	ebac 0709 	sub.w	r7, ip, r9
 801d2c2:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801d2c6:	fa1f f48e 	uxth.w	r4, lr
 801d2ca:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801d2ce:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d2d2:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801d2d6:	fb0a fe0e 	mul.w	lr, sl, lr
 801d2da:	1b1b      	subs	r3, r3, r4
 801d2dc:	fb0a f606 	mul.w	r6, sl, r6
 801d2e0:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801d2e4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801d2e8:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801d2ec:	b29b      	uxth	r3, r3
 801d2ee:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d2f2:	b2bf      	uxth	r7, r7
 801d2f4:	9301      	str	r3, [sp, #4]
 801d2f6:	44e6      	add	lr, ip
 801d2f8:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801d2fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d300:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d304:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801d308:	9303      	str	r3, [sp, #12]
 801d30a:	0a33      	lsrs	r3, r6, #8
 801d30c:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801d310:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d314:	9304      	str	r3, [sp, #16]
 801d316:	fb0b f606 	mul.w	r6, fp, r6
 801d31a:	fb0b f000 	mul.w	r0, fp, r0
 801d31e:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801d322:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d326:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d32a:	44b6      	add	lr, r6
 801d32c:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801d330:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801d334:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801d338:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801d33c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d340:	fb08 f606 	mul.w	r6, r8, r6
 801d344:	0a03      	lsrs	r3, r0, #8
 801d346:	fb08 f505 	mul.w	r5, r8, r5
 801d34a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d34e:	0a30      	lsrs	r0, r6, #8
 801d350:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d354:	9305      	str	r3, [sp, #20]
 801d356:	0e13      	lsrs	r3, r2, #24
 801d358:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d35c:	fb0e fe07 	mul.w	lr, lr, r7
 801d360:	4430      	add	r0, r6
 801d362:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801d366:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801d36a:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801d36e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d372:	0a00      	lsrs	r0, r0, #8
 801d374:	435e      	muls	r6, r3
 801d376:	0a2d      	lsrs	r5, r5, #8
 801d378:	435a      	muls	r2, r3
 801d37a:	9b03      	ldr	r3, [sp, #12]
 801d37c:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801d380:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d384:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d388:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d38c:	44b4      	add	ip, r6
 801d38e:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801d392:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d396:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801d39a:	9e01      	ldr	r6, [sp, #4]
 801d39c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d3a0:	fb03 ee06 	mla	lr, r3, r6, lr
 801d3a4:	9b04      	ldr	r3, [sp, #16]
 801d3a6:	0a12      	lsrs	r2, r2, #8
 801d3a8:	fb0c ee09 	mla	lr, ip, r9, lr
 801d3ac:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801d3b0:	9b05      	ldr	r3, [sp, #20]
 801d3b2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d3b6:	fb00 ee04 	mla	lr, r0, r4, lr
 801d3ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d3be:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801d3c2:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801d3c6:	9b01      	ldr	r3, [sp, #4]
 801d3c8:	fb07 fe0e 	mul.w	lr, r7, lr
 801d3cc:	fb07 f70b 	mul.w	r7, r7, fp
 801d3d0:	fb03 ee06 	mla	lr, r3, r6, lr
 801d3d4:	fb03 730a 	mla	r3, r3, sl, r7
 801d3d8:	fb09 e202 	mla	r2, r9, r2, lr
 801d3dc:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801d3e0:	fb04 2e0e 	mla	lr, r4, lr, r2
 801d3e4:	fb04 3408 	mla	r4, r4, r8, r3
 801d3e8:	9b02      	ldr	r3, [sp, #8]
 801d3ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d3ee:	fb09 4903 	mla	r9, r9, r3, r4
 801d3f2:	780b      	ldrb	r3, [r1, #0]
 801d3f4:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801d3f8:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801d3fc:	ea40 0e0e 	orr.w	lr, r0, lr
 801d400:	fa5f f989 	uxtb.w	r9, r9
 801d404:	fb03 f209 	mul.w	r2, r3, r9
 801d408:	1c53      	adds	r3, r2, #1
 801d40a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d40e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801d412:	700b      	strb	r3, [r1, #0]
 801d414:	784b      	ldrb	r3, [r1, #1]
 801d416:	fb03 f309 	mul.w	r3, r3, r9
 801d41a:	1c5a      	adds	r2, r3, #1
 801d41c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d420:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801d424:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801d428:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d42c:	704b      	strb	r3, [r1, #1]
 801d42e:	788b      	ldrb	r3, [r1, #2]
 801d430:	fb03 f909 	mul.w	r9, r3, r9
 801d434:	f109 0301 	add.w	r3, r9, #1
 801d438:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801d43c:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801d440:	f881 e002 	strb.w	lr, [r1, #2]
 801d444:	b007      	add	sp, #28
 801d446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d44a:	2600      	movs	r6, #0
 801d44c:	e700      	b.n	801d250 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801d44e:	2000      	movs	r0, #0
 801d450:	4606      	mov	r6, r0
 801d452:	e708      	b.n	801d266 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801d454:	2000      	movs	r0, #0
 801d456:	e706      	b.n	801d266 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801d458:	4620      	mov	r0, r4
 801d45a:	e704      	b.n	801d266 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801d45c:	2500      	movs	r5, #0
 801d45e:	e714      	b.n	801d28a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801d460:	2200      	movs	r2, #0
 801d462:	4615      	mov	r5, r2
 801d464:	e71d      	b.n	801d2a2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801d466:	4672      	mov	r2, lr
 801d468:	4675      	mov	r5, lr
 801d46a:	e71a      	b.n	801d2a2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801d46c:	2200      	movs	r2, #0
 801d46e:	e718      	b.n	801d2a2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801d470:	4622      	mov	r2, r4
 801d472:	e716      	b.n	801d2a2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801d474 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d478:	b099      	sub	sp, #100	@ 0x64
 801d47a:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 801d47e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801d480:	9017      	str	r0, [sp, #92]	@ 0x5c
 801d482:	9306      	str	r3, [sp, #24]
 801d484:	6850      	ldr	r0, [r2, #4]
 801d486:	6812      	ldr	r2, [r2, #0]
 801d488:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 801d48c:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 801d490:	fb00 1303 	mla	r3, r0, r3, r1
 801d494:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d498:	18d3      	adds	r3, r2, r3
 801d49a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d49c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	930e      	str	r3, [sp, #56]	@ 0x38
 801d4a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	dc03      	bgt.n	801d4b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d4a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	f340 8360 	ble.w	801db70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801d4b0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d4b2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d4b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d4ba:	1e48      	subs	r0, r1, #1
 801d4bc:	1e57      	subs	r7, r2, #1
 801d4be:	9b06      	ldr	r3, [sp, #24]
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	f340 817b 	ble.w	801d7bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801d4c6:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801d4ca:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d4ce:	d406      	bmi.n	801d4de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d4d0:	4584      	cmp	ip, r0
 801d4d2:	da04      	bge.n	801d4de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	db02      	blt.n	801d4de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d4d8:	42bb      	cmp	r3, r7
 801d4da:	f2c0 8170 	blt.w	801d7be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801d4de:	f11c 0c01 	adds.w	ip, ip, #1
 801d4e2:	f100 8160 	bmi.w	801d7a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801d4e6:	4561      	cmp	r1, ip
 801d4e8:	f2c0 815d 	blt.w	801d7a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801d4ec:	3301      	adds	r3, #1
 801d4ee:	f100 815a 	bmi.w	801d7a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801d4f2:	429a      	cmp	r2, r3
 801d4f4:	f2c0 8157 	blt.w	801d7a6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801d4f8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801d4fc:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801d4fe:	f1b8 0f00 	cmp.w	r8, #0
 801d502:	f340 8179 	ble.w	801d7f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801d506:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801d508:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801d50c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d50e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d512:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801d516:	142a      	asrs	r2, r5, #16
 801d518:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d51c:	689b      	ldr	r3, [r3, #8]
 801d51e:	f100 81be 	bmi.w	801d89e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d522:	f103 39ff 	add.w	r9, r3, #4294967295
 801d526:	454a      	cmp	r2, r9
 801d528:	f280 81b9 	bge.w	801d89e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d52c:	f1bc 0f00 	cmp.w	ip, #0
 801d530:	f2c0 81b5 	blt.w	801d89e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d534:	f10e 39ff 	add.w	r9, lr, #4294967295
 801d538:	45cc      	cmp	ip, r9
 801d53a:	f280 81b0 	bge.w	801d89e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801d53e:	b21b      	sxth	r3, r3
 801d540:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d542:	fb0c 2203 	mla	r2, ip, r3, r2
 801d546:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801d54a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d54e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801d552:	2900      	cmp	r1, #0
 801d554:	f000 8197 	beq.w	801d886 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801d558:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801d55c:	940a      	str	r4, [sp, #40]	@ 0x28
 801d55e:	0e24      	lsrs	r4, r4, #24
 801d560:	9411      	str	r4, [sp, #68]	@ 0x44
 801d562:	b180      	cbz	r0, 801d586 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801d564:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801d568:	3b01      	subs	r3, #1
 801d56a:	009b      	lsls	r3, r3, #2
 801d56c:	3304      	adds	r3, #4
 801d56e:	eb09 0c03 	add.w	ip, r9, r3
 801d572:	f859 3003 	ldr.w	r3, [r9, r3]
 801d576:	9307      	str	r3, [sp, #28]
 801d578:	0e1b      	lsrs	r3, r3, #24
 801d57a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d57c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801d580:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d582:	0e1b      	lsrs	r3, r3, #24
 801d584:	9312      	str	r3, [sp, #72]	@ 0x48
 801d586:	b289      	uxth	r1, r1
 801d588:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d58a:	b280      	uxth	r0, r0
 801d58c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d58e:	fb01 fa00 	mul.w	sl, r1, r0
 801d592:	0109      	lsls	r1, r1, #4
 801d594:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801d598:	eba1 090a 	sub.w	r9, r1, sl
 801d59c:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801d5a0:	b280      	uxth	r0, r0
 801d5a2:	fa1f f989 	uxth.w	r9, r9
 801d5a6:	1a09      	subs	r1, r1, r0
 801d5a8:	fb09 f303 	mul.w	r3, r9, r3
 801d5ac:	b289      	uxth	r1, r1
 801d5ae:	fb01 330e 	mla	r3, r1, lr, r3
 801d5b2:	fb00 3304 	mla	r3, r0, r4, r3
 801d5b6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d5b8:	fb0a 3304 	mla	r3, sl, r4, r3
 801d5bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d5c0:	2b00      	cmp	r3, #0
 801d5c2:	f000 80e8 	beq.w	801d796 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d5c6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801d5ca:	d01b      	beq.n	801d604 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801d5cc:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 801d5d0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d5d4:	fb0e fb0b 	mul.w	fp, lr, fp
 801d5d8:	fb0e fe02 	mul.w	lr, lr, r2
 801d5dc:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801d5e0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d5e4:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801d5e8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801d5ec:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d5f0:	445a      	add	r2, fp
 801d5f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d5f6:	0a12      	lsrs	r2, r2, #8
 801d5f8:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d5fc:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801d600:	ea42 020c 	orr.w	r2, r2, ip
 801d604:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d606:	2cff      	cmp	r4, #255	@ 0xff
 801d608:	d021      	beq.n	801d64e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801d60a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d60c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d610:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d612:	fb04 fc0c 	mul.w	ip, r4, ip
 801d616:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d618:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801d61c:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801d620:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d622:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801d626:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d62a:	fb04 fb0b 	mul.w	fp, r4, fp
 801d62e:	44e6      	add	lr, ip
 801d630:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801d634:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d638:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801d63c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d640:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801d644:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801d648:	ea4e 040b 	orr.w	r4, lr, fp
 801d64c:	940a      	str	r4, [sp, #40]	@ 0x28
 801d64e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d650:	2cff      	cmp	r4, #255	@ 0xff
 801d652:	d021      	beq.n	801d698 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801d654:	9c07      	ldr	r4, [sp, #28]
 801d656:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d65a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d65c:	fb04 fc0c 	mul.w	ip, r4, ip
 801d660:	9c07      	ldr	r4, [sp, #28]
 801d662:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801d666:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801d66a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d66c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801d670:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d674:	fb04 fb0b 	mul.w	fp, r4, fp
 801d678:	44e6      	add	lr, ip
 801d67a:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801d67e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d682:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801d686:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d68a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801d68e:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801d692:	ea4e 040b 	orr.w	r4, lr, fp
 801d696:	9407      	str	r4, [sp, #28]
 801d698:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d69a:	2cff      	cmp	r4, #255	@ 0xff
 801d69c:	d021      	beq.n	801d6e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801d69e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d6a0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d6a4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d6a6:	fb04 fc0c 	mul.w	ip, r4, ip
 801d6aa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d6ac:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801d6b0:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801d6b4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d6b6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801d6ba:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d6be:	fb04 fb0b 	mul.w	fp, r4, fp
 801d6c2:	44e6      	add	lr, ip
 801d6c4:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801d6c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d6cc:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801d6d0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d6d4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801d6d8:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801d6dc:	ea4e 040b 	orr.w	r4, lr, fp
 801d6e0:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d6e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d6e4:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801d6e8:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d6ec:	2bff      	cmp	r3, #255	@ 0xff
 801d6ee:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d6f2:	9c07      	ldr	r4, [sp, #28]
 801d6f4:	fb09 fc0c 	mul.w	ip, r9, ip
 801d6f8:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d6fc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d700:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801d702:	fb00 cc0e 	mla	ip, r0, lr, ip
 801d706:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d70a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d70c:	fb0a cc0e 	mla	ip, sl, lr, ip
 801d710:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801d714:	fb09 f90e 	mul.w	r9, r9, lr
 801d718:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d71c:	fb01 9202 	mla	r2, r1, r2, r9
 801d720:	9907      	ldr	r1, [sp, #28]
 801d722:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d726:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 801d72a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d72c:	fb00 220b 	mla	r2, r0, fp, r2
 801d730:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 801d734:	fb0a 2a00 	mla	sl, sl, r0, r2
 801d738:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d73c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d740:	ea4c 0c0a 	orr.w	ip, ip, sl
 801d744:	fa5f f08c 	uxtb.w	r0, ip
 801d748:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801d74c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d750:	f000 80a2 	beq.w	801d898 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801d754:	43db      	mvns	r3, r3
 801d756:	783a      	ldrb	r2, [r7, #0]
 801d758:	f897 a002 	ldrb.w	sl, [r7, #2]
 801d75c:	b2db      	uxtb	r3, r3
 801d75e:	fb02 fe03 	mul.w	lr, r2, r3
 801d762:	fb0a fa03 	mul.w	sl, sl, r3
 801d766:	f10e 0201 	add.w	r2, lr, #1
 801d76a:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801d76e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d772:	703a      	strb	r2, [r7, #0]
 801d774:	787a      	ldrb	r2, [r7, #1]
 801d776:	fb02 f003 	mul.w	r0, r2, r3
 801d77a:	f10a 0301 	add.w	r3, sl, #1
 801d77e:	1c42      	adds	r2, r0, #1
 801d780:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801d784:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801d788:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801d78c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801d790:	707a      	strb	r2, [r7, #1]
 801d792:	f887 c002 	strb.w	ip, [r7, #2]
 801d796:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d798:	3703      	adds	r7, #3
 801d79a:	f108 38ff 	add.w	r8, r8, #4294967295
 801d79e:	441d      	add	r5, r3
 801d7a0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d7a2:	441e      	add	r6, r3
 801d7a4:	e6ab      	b.n	801d4fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801d7a6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d7a8:	441d      	add	r5, r3
 801d7aa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d7ac:	441e      	add	r6, r3
 801d7ae:	9b06      	ldr	r3, [sp, #24]
 801d7b0:	3b01      	subs	r3, #1
 801d7b2:	9306      	str	r3, [sp, #24]
 801d7b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d7b6:	3303      	adds	r3, #3
 801d7b8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d7ba:	e680      	b.n	801d4be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d7bc:	d024      	beq.n	801d808 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801d7be:	9b06      	ldr	r3, [sp, #24]
 801d7c0:	9825      	ldr	r0, [sp, #148]	@ 0x94
 801d7c2:	3b01      	subs	r3, #1
 801d7c4:	fb00 5003 	mla	r0, r0, r3, r5
 801d7c8:	1400      	asrs	r0, r0, #16
 801d7ca:	f53f ae95 	bmi.w	801d4f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d7ce:	3901      	subs	r1, #1
 801d7d0:	4288      	cmp	r0, r1
 801d7d2:	f6bf ae91 	bge.w	801d4f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d7d6:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801d7d8:	fb01 6303 	mla	r3, r1, r3, r6
 801d7dc:	141b      	asrs	r3, r3, #16
 801d7de:	f53f ae8b 	bmi.w	801d4f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d7e2:	3a01      	subs	r2, #1
 801d7e4:	4293      	cmp	r3, r2
 801d7e6:	f6bf ae87 	bge.w	801d4f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d7ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d7ec:	f8dd b018 	ldr.w	fp, [sp, #24]
 801d7f0:	1cdf      	adds	r7, r3, #3
 801d7f2:	f1bb 0f00 	cmp.w	fp, #0
 801d7f6:	dc6e      	bgt.n	801d8d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801d7f8:	9b06      	ldr	r3, [sp, #24]
 801d7fa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d7fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d800:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d804:	4423      	add	r3, r4
 801d806:	9309      	str	r3, [sp, #36]	@ 0x24
 801d808:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d80a:	2b00      	cmp	r3, #0
 801d80c:	f340 81b0 	ble.w	801db70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801d810:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d814:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d816:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d81a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d81e:	eef0 6a62 	vmov.f32	s13, s5
 801d822:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d826:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d82a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d82e:	ee16 5a90 	vmov	r5, s13
 801d832:	eef0 6a43 	vmov.f32	s13, s6
 801d836:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d83a:	ee16 6a90 	vmov	r6, s13
 801d83e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d842:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d846:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d84a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d84e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d852:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d856:	ee12 2a90 	vmov	r2, s5
 801d85a:	eef0 2a47 	vmov.f32	s5, s14
 801d85e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d862:	ee13 2a10 	vmov	r2, s6
 801d866:	9325      	str	r3, [sp, #148]	@ 0x94
 801d868:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d86a:	eeb0 3a67 	vmov.f32	s6, s15
 801d86e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d872:	9326      	str	r3, [sp, #152]	@ 0x98
 801d874:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d876:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d878:	3b01      	subs	r3, #1
 801d87a:	9315      	str	r3, [sp, #84]	@ 0x54
 801d87c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d87e:	bf08      	it	eq
 801d880:	4613      	moveq	r3, r2
 801d882:	9306      	str	r3, [sp, #24]
 801d884:	e60d      	b.n	801d4a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801d886:	2800      	cmp	r0, #0
 801d888:	f43f ae7d 	beq.w	801d586 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801d88c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d890:	9307      	str	r3, [sp, #28]
 801d892:	0e1b      	lsrs	r3, r3, #24
 801d894:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d896:	e676      	b.n	801d586 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801d898:	7038      	strb	r0, [r7, #0]
 801d89a:	7079      	strb	r1, [r7, #1]
 801d89c:	e779      	b.n	801d792 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801d89e:	f112 0901 	adds.w	r9, r2, #1
 801d8a2:	f53f af78 	bmi.w	801d796 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d8a6:	454b      	cmp	r3, r9
 801d8a8:	f6ff af75 	blt.w	801d796 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d8ac:	f11c 0901 	adds.w	r9, ip, #1
 801d8b0:	f53f af71 	bmi.w	801d796 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d8b4:	45ce      	cmp	lr, r9
 801d8b6:	f6ff af6e 	blt.w	801d796 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d8ba:	b21b      	sxth	r3, r3
 801d8bc:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801d8c0:	fa0f f28e 	sxth.w	r2, lr
 801d8c4:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801d8c8:	9200      	str	r2, [sp, #0]
 801d8ca:	4639      	mov	r1, r7
 801d8cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d8ce:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801d8d0:	f7ff fca1 	bl	801d216 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801d8d4:	e75f      	b.n	801d796 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d8d6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d8d8:	1429      	asrs	r1, r5, #16
 801d8da:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d8dc:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801d8e0:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801d8e4:	1433      	asrs	r3, r6, #16
 801d8e6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d8ea:	fb0c 1303 	mla	r3, ip, r3, r1
 801d8ee:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d8f0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801d8f4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d8f8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d8fc:	2a00      	cmp	r2, #0
 801d8fe:	f000 8129 	beq.w	801db54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801d902:	684c      	ldr	r4, [r1, #4]
 801d904:	940c      	str	r4, [sp, #48]	@ 0x30
 801d906:	0e24      	lsrs	r4, r4, #24
 801d908:	9413      	str	r4, [sp, #76]	@ 0x4c
 801d90a:	b198      	cbz	r0, 801d934 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801d90c:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 801d910:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d914:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801d918:	f10c 0c04 	add.w	ip, ip, #4
 801d91c:	eb01 080c 	add.w	r8, r1, ip
 801d920:	f851 100c 	ldr.w	r1, [r1, ip]
 801d924:	9108      	str	r1, [sp, #32]
 801d926:	0e09      	lsrs	r1, r1, #24
 801d928:	9110      	str	r1, [sp, #64]	@ 0x40
 801d92a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d92e:	910d      	str	r1, [sp, #52]	@ 0x34
 801d930:	0e09      	lsrs	r1, r1, #24
 801d932:	9114      	str	r1, [sp, #80]	@ 0x50
 801d934:	b292      	uxth	r2, r2
 801d936:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d938:	b280      	uxth	r0, r0
 801d93a:	fb02 f900 	mul.w	r9, r2, r0
 801d93e:	0112      	lsls	r2, r2, #4
 801d940:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d944:	eba2 0809 	sub.w	r8, r2, r9
 801d948:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801d94c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d94e:	b280      	uxth	r0, r0
 801d950:	fa1f f888 	uxth.w	r8, r8
 801d954:	1a09      	subs	r1, r1, r0
 801d956:	fb08 f202 	mul.w	r2, r8, r2
 801d95a:	b289      	uxth	r1, r1
 801d95c:	fb01 220e 	mla	r2, r1, lr, r2
 801d960:	fb00 2204 	mla	r2, r0, r4, r2
 801d964:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d966:	fb09 2204 	mla	r2, r9, r4, r2
 801d96a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d96e:	2a00      	cmp	r2, #0
 801d970:	f000 80e8 	beq.w	801db44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801d974:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801d978:	d01b      	beq.n	801d9b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801d97a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d97e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d982:	fb0e fa0a 	mul.w	sl, lr, sl
 801d986:	fb0e fe03 	mul.w	lr, lr, r3
 801d98a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d98e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d992:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801d996:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d99a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d99e:	4453      	add	r3, sl
 801d9a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d9a4:	0a1b      	lsrs	r3, r3, #8
 801d9a6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d9aa:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d9ae:	ea43 030c 	orr.w	r3, r3, ip
 801d9b2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d9b4:	2cff      	cmp	r4, #255	@ 0xff
 801d9b6:	d021      	beq.n	801d9fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801d9b8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d9ba:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d9be:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d9c0:	fb04 fc0c 	mul.w	ip, r4, ip
 801d9c4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d9c6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801d9ca:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d9ce:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d9d0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801d9d4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d9d8:	fb04 fa0a 	mul.w	sl, r4, sl
 801d9dc:	44e6      	add	lr, ip
 801d9de:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d9e2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d9e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d9ea:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d9ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d9f2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d9f6:	ea4e 040a 	orr.w	r4, lr, sl
 801d9fa:	940c      	str	r4, [sp, #48]	@ 0x30
 801d9fc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d9fe:	2cff      	cmp	r4, #255	@ 0xff
 801da00:	d021      	beq.n	801da46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801da02:	9c08      	ldr	r4, [sp, #32]
 801da04:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801da08:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801da0a:	fb04 fc0c 	mul.w	ip, r4, ip
 801da0e:	9c08      	ldr	r4, [sp, #32]
 801da10:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801da14:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801da16:	fb04 fa0e 	mul.w	sl, r4, lr
 801da1a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801da1e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801da22:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801da26:	44e6      	add	lr, ip
 801da28:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801da2c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801da30:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801da34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801da38:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801da3c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801da40:	ea4e 040a 	orr.w	r4, lr, sl
 801da44:	9408      	str	r4, [sp, #32]
 801da46:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801da48:	2cff      	cmp	r4, #255	@ 0xff
 801da4a:	d021      	beq.n	801da90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801da4c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801da4e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801da52:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801da54:	fb04 fc0c 	mul.w	ip, r4, ip
 801da58:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801da5a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801da5e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801da62:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801da64:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801da68:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801da6c:	fb04 fa0a 	mul.w	sl, r4, sl
 801da70:	44e6      	add	lr, ip
 801da72:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801da76:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801da7a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801da7e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801da82:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801da86:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801da8a:	ea4e 040a 	orr.w	r4, lr, sl
 801da8e:	940d      	str	r4, [sp, #52]	@ 0x34
 801da90:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801da92:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801da96:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801da9a:	2aff      	cmp	r2, #255	@ 0xff
 801da9c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801daa0:	9c08      	ldr	r4, [sp, #32]
 801daa2:	fb08 fc0c 	mul.w	ip, r8, ip
 801daa6:	fb01 cc0e 	mla	ip, r1, lr, ip
 801daaa:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801daae:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801dab0:	fb00 cc0e 	mla	ip, r0, lr, ip
 801dab4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801dab8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801daba:	fb09 cc0e 	mla	ip, r9, lr, ip
 801dabe:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801dac2:	fb08 f80e 	mul.w	r8, r8, lr
 801dac6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801daca:	fb01 8303 	mla	r3, r1, r3, r8
 801dace:	9908      	ldr	r1, [sp, #32]
 801dad0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dad4:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801dad8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801dada:	fb00 330a 	mla	r3, r0, sl, r3
 801dade:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 801dae2:	fb09 3e0e 	mla	lr, r9, lr, r3
 801dae6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801daea:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801daee:	ea4c 0c0e 	orr.w	ip, ip, lr
 801daf2:	fa5f f08c 	uxtb.w	r0, ip
 801daf6:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801dafa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801dafe:	d032      	beq.n	801db66 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801db00:	43d2      	mvns	r2, r2
 801db02:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801db06:	b2d2      	uxtb	r2, r2
 801db08:	fb0e fe02 	mul.w	lr, lr, r2
 801db0c:	f10e 0301 	add.w	r3, lr, #1
 801db10:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801db14:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801db18:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801db1c:	4350      	muls	r0, r2
 801db1e:	f807 3c03 	strb.w	r3, [r7, #-3]
 801db22:	1c43      	adds	r3, r0, #1
 801db24:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801db28:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801db2c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801db30:	4353      	muls	r3, r2
 801db32:	f807 1c02 	strb.w	r1, [r7, #-2]
 801db36:	1c5a      	adds	r2, r3, #1
 801db38:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801db3c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801db40:	f807 cc01 	strb.w	ip, [r7, #-1]
 801db44:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801db46:	3703      	adds	r7, #3
 801db48:	f10b 3bff 	add.w	fp, fp, #4294967295
 801db4c:	441d      	add	r5, r3
 801db4e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801db50:	441e      	add	r6, r3
 801db52:	e64e      	b.n	801d7f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801db54:	2800      	cmp	r0, #0
 801db56:	f43f aeed 	beq.w	801d934 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801db5a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801db5e:	9108      	str	r1, [sp, #32]
 801db60:	0e09      	lsrs	r1, r1, #24
 801db62:	9110      	str	r1, [sp, #64]	@ 0x40
 801db64:	e6e6      	b.n	801d934 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801db66:	f807 0c03 	strb.w	r0, [r7, #-3]
 801db6a:	f807 1c02 	strb.w	r1, [r7, #-2]
 801db6e:	e7e7      	b.n	801db40 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801db70:	b019      	add	sp, #100	@ 0x64
 801db72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801db78 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801db78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db7c:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 801db80:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801db84:	2c00      	cmp	r4, #0
 801db86:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801db8a:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 801db8e:	fb00 4e03 	mla	lr, r0, r3, r4
 801db92:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801db96:	f2c0 80b8 	blt.w	801dd0a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801db9a:	45a1      	cmp	r9, r4
 801db9c:	f340 80b5 	ble.w	801dd0a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801dba0:	2800      	cmp	r0, #0
 801dba2:	f2c0 80b2 	blt.w	801dd0a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801dba6:	4580      	cmp	r8, r0
 801dba8:	f340 80af 	ble.w	801dd0a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801dbac:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801dbb0:	f01e 0f01 	tst.w	lr, #1
 801dbb4:	5d56      	ldrb	r6, [r2, r5]
 801dbb6:	bf0c      	ite	eq
 801dbb8:	f006 060f 	andeq.w	r6, r6, #15
 801dbbc:	1136      	asrne	r6, r6, #4
 801dbbe:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801dbc2:	b2f6      	uxtb	r6, r6
 801dbc4:	f114 0a01 	adds.w	sl, r4, #1
 801dbc8:	f100 80a1 	bmi.w	801dd0e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801dbcc:	45d1      	cmp	r9, sl
 801dbce:	f340 809e 	ble.w	801dd0e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801dbd2:	2800      	cmp	r0, #0
 801dbd4:	f2c0 809b 	blt.w	801dd0e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801dbd8:	4580      	cmp	r8, r0
 801dbda:	f340 8098 	ble.w	801dd0e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801dbde:	2f00      	cmp	r7, #0
 801dbe0:	f000 8097 	beq.w	801dd12 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801dbe4:	f10e 0b01 	add.w	fp, lr, #1
 801dbe8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801dbec:	f01b 0f01 	tst.w	fp, #1
 801dbf0:	5d55      	ldrb	r5, [r2, r5]
 801dbf2:	bf0c      	ite	eq
 801dbf4:	f005 050f 	andeq.w	r5, r5, #15
 801dbf8:	112d      	asrne	r5, r5, #4
 801dbfa:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801dbfe:	b2ed      	uxtb	r5, r5
 801dc00:	f1bc 0f00 	cmp.w	ip, #0
 801dc04:	f000 8089 	beq.w	801dd1a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801dc08:	2c00      	cmp	r4, #0
 801dc0a:	f100 0001 	add.w	r0, r0, #1
 801dc0e:	f2c0 8082 	blt.w	801dd16 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801dc12:	45a1      	cmp	r9, r4
 801dc14:	dd7f      	ble.n	801dd16 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801dc16:	2800      	cmp	r0, #0
 801dc18:	db7d      	blt.n	801dd16 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801dc1a:	4580      	cmp	r8, r0
 801dc1c:	dd7b      	ble.n	801dd16 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801dc1e:	eb03 0b0e 	add.w	fp, r3, lr
 801dc22:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801dc26:	f01b 0f01 	tst.w	fp, #1
 801dc2a:	5d14      	ldrb	r4, [r2, r4]
 801dc2c:	bf0c      	ite	eq
 801dc2e:	f004 040f 	andeq.w	r4, r4, #15
 801dc32:	1124      	asrne	r4, r4, #4
 801dc34:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801dc38:	b2e4      	uxtb	r4, r4
 801dc3a:	f1ba 0f00 	cmp.w	sl, #0
 801dc3e:	db6f      	blt.n	801dd20 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801dc40:	45d1      	cmp	r9, sl
 801dc42:	dd6d      	ble.n	801dd20 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801dc44:	2800      	cmp	r0, #0
 801dc46:	db6b      	blt.n	801dd20 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801dc48:	4580      	cmp	r8, r0
 801dc4a:	dd69      	ble.n	801dd20 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801dc4c:	2f00      	cmp	r7, #0
 801dc4e:	d069      	beq.n	801dd24 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801dc50:	3301      	adds	r3, #1
 801dc52:	449e      	add	lr, r3
 801dc54:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801dc58:	f01e 0f01 	tst.w	lr, #1
 801dc5c:	5cd0      	ldrb	r0, [r2, r3]
 801dc5e:	bf0c      	ite	eq
 801dc60:	f000 000f 	andeq.w	r0, r0, #15
 801dc64:	1100      	asrne	r0, r0, #4
 801dc66:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801dc6a:	b2c3      	uxtb	r3, r0
 801dc6c:	b2ba      	uxth	r2, r7
 801dc6e:	fa1f fc8c 	uxth.w	ip, ip
 801dc72:	fb02 f00c 	mul.w	r0, r2, ip
 801dc76:	0112      	lsls	r2, r2, #4
 801dc78:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801dc7c:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801dc80:	1a12      	subs	r2, r2, r0
 801dc82:	fa1f fc8c 	uxth.w	ip, ip
 801dc86:	b292      	uxth	r2, r2
 801dc88:	eba7 070c 	sub.w	r7, r7, ip
 801dc8c:	436a      	muls	r2, r5
 801dc8e:	b2bf      	uxth	r7, r7
 801dc90:	fb06 2207 	mla	r2, r6, r7, r2
 801dc94:	fb0c 2404 	mla	r4, ip, r4, r2
 801dc98:	fb00 4303 	mla	r3, r0, r3, r4
 801dc9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dca0:	b38b      	cbz	r3, 801dd06 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801dca2:	4a21      	ldr	r2, [pc, #132]	@ (801dd28 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801dca4:	6814      	ldr	r4, [r2, #0]
 801dca6:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 801dcaa:	b2e5      	uxtb	r5, r4
 801dcac:	4353      	muls	r3, r2
 801dcae:	1c5a      	adds	r2, r3, #1
 801dcb0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801dcb4:	1212      	asrs	r2, r2, #8
 801dcb6:	b290      	uxth	r0, r2
 801dcb8:	43d2      	mvns	r2, r2
 801dcba:	fb15 f500 	smulbb	r5, r5, r0
 801dcbe:	b2d3      	uxtb	r3, r2
 801dcc0:	780a      	ldrb	r2, [r1, #0]
 801dcc2:	fb02 5203 	mla	r2, r2, r3, r5
 801dcc6:	b292      	uxth	r2, r2
 801dcc8:	1c55      	adds	r5, r2, #1
 801dcca:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801dcce:	784d      	ldrb	r5, [r1, #1]
 801dcd0:	fb15 f503 	smulbb	r5, r5, r3
 801dcd4:	1212      	asrs	r2, r2, #8
 801dcd6:	700a      	strb	r2, [r1, #0]
 801dcd8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801dcdc:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801dce0:	fb02 5200 	mla	r2, r2, r0, r5
 801dce4:	b292      	uxth	r2, r2
 801dce6:	1c55      	adds	r5, r2, #1
 801dce8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801dcec:	1212      	asrs	r2, r2, #8
 801dcee:	704a      	strb	r2, [r1, #1]
 801dcf0:	788a      	ldrb	r2, [r1, #2]
 801dcf2:	fb12 f303 	smulbb	r3, r2, r3
 801dcf6:	fb04 3300 	mla	r3, r4, r0, r3
 801dcfa:	b29b      	uxth	r3, r3
 801dcfc:	1c5a      	adds	r2, r3, #1
 801dcfe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801dd02:	121b      	asrs	r3, r3, #8
 801dd04:	708b      	strb	r3, [r1, #2]
 801dd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd0a:	2600      	movs	r6, #0
 801dd0c:	e75a      	b.n	801dbc4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801dd0e:	2500      	movs	r5, #0
 801dd10:	e776      	b.n	801dc00 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801dd12:	463d      	mov	r5, r7
 801dd14:	e774      	b.n	801dc00 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801dd16:	2400      	movs	r4, #0
 801dd18:	e78f      	b.n	801dc3a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801dd1a:	4663      	mov	r3, ip
 801dd1c:	4664      	mov	r4, ip
 801dd1e:	e7a5      	b.n	801dc6c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801dd20:	2300      	movs	r3, #0
 801dd22:	e7a3      	b.n	801dc6c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801dd24:	463b      	mov	r3, r7
 801dd26:	e7a1      	b.n	801dc6c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801dd28:	24025168 	.word	0x24025168

0801dd2c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd30:	b097      	sub	sp, #92	@ 0x5c
 801dd32:	9214      	str	r2, [sp, #80]	@ 0x50
 801dd34:	9309      	str	r3, [sp, #36]	@ 0x24
 801dd36:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801dd38:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801dd3c:	9015      	str	r0, [sp, #84]	@ 0x54
 801dd3e:	910c      	str	r1, [sp, #48]	@ 0x30
 801dd40:	6850      	ldr	r0, [r2, #4]
 801dd42:	930e      	str	r3, [sp, #56]	@ 0x38
 801dd44:	6812      	ldr	r2, [r2, #0]
 801dd46:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 801dd4a:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 801dd4e:	fb00 1303 	mla	r3, r0, r3, r1
 801dd52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd56:	eb02 0a03 	add.w	sl, r2, r3
 801dd5a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dd5c:	689b      	ldr	r3, [r3, #8]
 801dd5e:	3301      	adds	r3, #1
 801dd60:	f023 0301 	bic.w	r3, r3, #1
 801dd64:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dd66:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dd68:	681f      	ldr	r7, [r3, #0]
 801dd6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	dc03      	bgt.n	801dd78 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801dd70:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	f340 8247 	ble.w	801e206 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801dd78:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dd7a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dd7e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dd82:	1e48      	subs	r0, r1, #1
 801dd84:	f102 3cff 	add.w	ip, r2, #4294967295
 801dd88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	f340 80e5 	ble.w	801df5a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801dd90:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801dd94:	ea4f 4326 	mov.w	r3, r6, asr #16
 801dd98:	d406      	bmi.n	801dda8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dd9a:	4586      	cmp	lr, r0
 801dd9c:	da04      	bge.n	801dda8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dd9e:	2b00      	cmp	r3, #0
 801dda0:	db02      	blt.n	801dda8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801dda2:	4563      	cmp	r3, ip
 801dda4:	f2c0 80da 	blt.w	801df5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801dda8:	f11e 0e01 	adds.w	lr, lr, #1
 801ddac:	f100 80cb 	bmi.w	801df46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ddb0:	4571      	cmp	r1, lr
 801ddb2:	f2c0 80c8 	blt.w	801df46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ddb6:	3301      	adds	r3, #1
 801ddb8:	f100 80c5 	bmi.w	801df46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ddbc:	429a      	cmp	r2, r3
 801ddbe:	f2c0 80c2 	blt.w	801df46 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ddc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ddc4:	46d0      	mov	r8, sl
 801ddc6:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801ddca:	930d      	str	r3, [sp, #52]	@ 0x34
 801ddcc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ddce:	2b00      	cmp	r3, #0
 801ddd0:	f340 80e3 	ble.w	801df9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801ddd4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ddd6:	1430      	asrs	r0, r6, #16
 801ddd8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801dddc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801dde0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801dde4:	142b      	asrs	r3, r5, #16
 801dde6:	f100 812e 	bmi.w	801e046 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ddea:	f10c 3bff 	add.w	fp, ip, #4294967295
 801ddee:	455b      	cmp	r3, fp
 801ddf0:	f280 8129 	bge.w	801e046 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ddf4:	2800      	cmp	r0, #0
 801ddf6:	f2c0 8126 	blt.w	801e046 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ddfa:	f10e 3bff 	add.w	fp, lr, #4294967295
 801ddfe:	4558      	cmp	r0, fp
 801de00:	f280 8121 	bge.w	801e046 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801de04:	fb00 3309 	mla	r3, r0, r9, r3
 801de08:	0858      	lsrs	r0, r3, #1
 801de0a:	07dc      	lsls	r4, r3, #31
 801de0c:	f817 c000 	ldrb.w	ip, [r7, r0]
 801de10:	bf54      	ite	pl
 801de12:	f00c 0c0f 	andpl.w	ip, ip, #15
 801de16:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801de1a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801de1e:	fa5f fc8c 	uxtb.w	ip, ip
 801de22:	2a00      	cmp	r2, #0
 801de24:	f000 80fe 	beq.w	801e024 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801de28:	1c58      	adds	r0, r3, #1
 801de2a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801de2e:	07c0      	lsls	r0, r0, #31
 801de30:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801de34:	bf54      	ite	pl
 801de36:	f00e 0e0f 	andpl.w	lr, lr, #15
 801de3a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801de3e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801de42:	fa5f f08e 	uxtb.w	r0, lr
 801de46:	9010      	str	r0, [sp, #64]	@ 0x40
 801de48:	b1d9      	cbz	r1, 801de82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801de4a:	444b      	add	r3, r9
 801de4c:	0858      	lsrs	r0, r3, #1
 801de4e:	07dc      	lsls	r4, r3, #31
 801de50:	f103 0301 	add.w	r3, r3, #1
 801de54:	5c38      	ldrb	r0, [r7, r0]
 801de56:	bf54      	ite	pl
 801de58:	f000 000f 	andpl.w	r0, r0, #15
 801de5c:	1100      	asrmi	r0, r0, #4
 801de5e:	07dc      	lsls	r4, r3, #31
 801de60:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801de64:	b2c0      	uxtb	r0, r0
 801de66:	900a      	str	r0, [sp, #40]	@ 0x28
 801de68:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801de6c:	f817 e000 	ldrb.w	lr, [r7, r0]
 801de70:	bf54      	ite	pl
 801de72:	f00e 030f 	andpl.w	r3, lr, #15
 801de76:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801de7a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801de7e:	b2db      	uxtb	r3, r3
 801de80:	9311      	str	r3, [sp, #68]	@ 0x44
 801de82:	b292      	uxth	r2, r2
 801de84:	b289      	uxth	r1, r1
 801de86:	0113      	lsls	r3, r2, #4
 801de88:	fb02 f001 	mul.w	r0, r2, r1
 801de8c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801de8e:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801de92:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801de96:	1a1b      	subs	r3, r3, r0
 801de98:	b289      	uxth	r1, r1
 801de9a:	b29b      	uxth	r3, r3
 801de9c:	ebae 0e01 	sub.w	lr, lr, r1
 801dea0:	4353      	muls	r3, r2
 801dea2:	fa1f fe8e 	uxth.w	lr, lr
 801dea6:	fb0c 320e 	mla	r2, ip, lr, r3
 801deaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801deac:	fb01 2203 	mla	r2, r1, r3, r2
 801deb0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801deb2:	fb00 2203 	mla	r2, r0, r3, r2
 801deb6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801deba:	2a00      	cmp	r2, #0
 801debc:	d039      	beq.n	801df32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801debe:	4bc7      	ldr	r3, [pc, #796]	@ (801e1dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801dec0:	6819      	ldr	r1, [r3, #0]
 801dec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dec4:	fa5f fc81 	uxtb.w	ip, r1
 801dec8:	435a      	muls	r2, r3
 801deca:	1c53      	adds	r3, r2, #1
 801decc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801ded0:	1212      	asrs	r2, r2, #8
 801ded2:	b290      	uxth	r0, r2
 801ded4:	43d2      	mvns	r2, r2
 801ded6:	fb1c fc00 	smulbb	ip, ip, r0
 801deda:	b2d3      	uxtb	r3, r2
 801dedc:	f898 2000 	ldrb.w	r2, [r8]
 801dee0:	fb02 c203 	mla	r2, r2, r3, ip
 801dee4:	b292      	uxth	r2, r2
 801dee6:	f102 0c01 	add.w	ip, r2, #1
 801deea:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801deee:	f898 c001 	ldrb.w	ip, [r8, #1]
 801def2:	fb1c fc03 	smulbb	ip, ip, r3
 801def6:	1212      	asrs	r2, r2, #8
 801def8:	f888 2000 	strb.w	r2, [r8]
 801defc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801df00:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801df04:	fb02 c200 	mla	r2, r2, r0, ip
 801df08:	b292      	uxth	r2, r2
 801df0a:	f102 0c01 	add.w	ip, r2, #1
 801df0e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801df12:	1212      	asrs	r2, r2, #8
 801df14:	f888 2001 	strb.w	r2, [r8, #1]
 801df18:	f898 2002 	ldrb.w	r2, [r8, #2]
 801df1c:	fb12 f303 	smulbb	r3, r2, r3
 801df20:	fb01 3300 	mla	r3, r1, r0, r3
 801df24:	b29b      	uxth	r3, r3
 801df26:	1c5a      	adds	r2, r3, #1
 801df28:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801df2c:	121b      	asrs	r3, r3, #8
 801df2e:	f888 3002 	strb.w	r3, [r8, #2]
 801df32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801df34:	f108 0803 	add.w	r8, r8, #3
 801df38:	441d      	add	r5, r3
 801df3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801df3c:	441e      	add	r6, r3
 801df3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801df40:	3b01      	subs	r3, #1
 801df42:	930d      	str	r3, [sp, #52]	@ 0x34
 801df44:	e742      	b.n	801ddcc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801df46:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801df48:	f10a 0a03 	add.w	sl, sl, #3
 801df4c:	441d      	add	r5, r3
 801df4e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801df50:	441e      	add	r6, r3
 801df52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df54:	3b01      	subs	r3, #1
 801df56:	9309      	str	r3, [sp, #36]	@ 0x24
 801df58:	e716      	b.n	801dd88 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801df5a:	d024      	beq.n	801dfa6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801df5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df5e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801df60:	3b01      	subs	r3, #1
 801df62:	fb00 5003 	mla	r0, r0, r3, r5
 801df66:	1400      	asrs	r0, r0, #16
 801df68:	f53f af2b 	bmi.w	801ddc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801df6c:	3901      	subs	r1, #1
 801df6e:	4288      	cmp	r0, r1
 801df70:	f6bf af27 	bge.w	801ddc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801df74:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801df76:	fb01 6303 	mla	r3, r1, r3, r6
 801df7a:	141b      	asrs	r3, r3, #16
 801df7c:	f53f af21 	bmi.w	801ddc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801df80:	3a01      	subs	r2, #1
 801df82:	4293      	cmp	r3, r2
 801df84:	f6bf af1d 	bge.w	801ddc2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801df88:	f10a 0e03 	add.w	lr, sl, #3
 801df8c:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 801df90:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801df94:	f1b8 0f00 	cmp.w	r8, #0
 801df98:	dc76      	bgt.n	801e088 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801df9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df9c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801dfa0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dfa4:	44a2      	add	sl, r4
 801dfa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dfa8:	2b00      	cmp	r3, #0
 801dfaa:	f340 812c 	ble.w	801e206 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801dfae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dfb2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801dfb4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dfb8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dfbc:	eef0 6a62 	vmov.f32	s13, s5
 801dfc0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dfc4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dfc8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dfcc:	ee16 5a90 	vmov	r5, s13
 801dfd0:	eef0 6a43 	vmov.f32	s13, s6
 801dfd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dfd8:	ee16 6a90 	vmov	r6, s13
 801dfdc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dfe0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dfe4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dfe8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dfec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dff0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dff4:	ee12 2a90 	vmov	r2, s5
 801dff8:	eef0 2a47 	vmov.f32	s5, s14
 801dffc:	fb92 f3f3 	sdiv	r3, r2, r3
 801e000:	ee13 2a10 	vmov	r2, s6
 801e004:	9323      	str	r3, [sp, #140]	@ 0x8c
 801e006:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e008:	eeb0 3a67 	vmov.f32	s6, s15
 801e00c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e010:	9324      	str	r3, [sp, #144]	@ 0x90
 801e012:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e014:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e016:	3b01      	subs	r3, #1
 801e018:	930c      	str	r3, [sp, #48]	@ 0x30
 801e01a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e01c:	bf08      	it	eq
 801e01e:	4613      	moveq	r3, r2
 801e020:	9309      	str	r3, [sp, #36]	@ 0x24
 801e022:	e6a2      	b.n	801dd6a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e024:	2900      	cmp	r1, #0
 801e026:	f43f af2c 	beq.w	801de82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e02a:	eb09 0003 	add.w	r0, r9, r3
 801e02e:	0843      	lsrs	r3, r0, #1
 801e030:	07c0      	lsls	r0, r0, #31
 801e032:	5cfb      	ldrb	r3, [r7, r3]
 801e034:	bf54      	ite	pl
 801e036:	f003 030f 	andpl.w	r3, r3, #15
 801e03a:	111b      	asrmi	r3, r3, #4
 801e03c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e040:	b2db      	uxtb	r3, r3
 801e042:	930a      	str	r3, [sp, #40]	@ 0x28
 801e044:	e71d      	b.n	801de82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e046:	f113 0b01 	adds.w	fp, r3, #1
 801e04a:	f53f af72 	bmi.w	801df32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e04e:	45dc      	cmp	ip, fp
 801e050:	f6ff af6f 	blt.w	801df32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e054:	f110 0b01 	adds.w	fp, r0, #1
 801e058:	f53f af6b 	bmi.w	801df32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e05c:	45de      	cmp	lr, fp
 801e05e:	f6ff af68 	blt.w	801df32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e062:	9302      	str	r3, [sp, #8]
 801e064:	fa0f f38e 	sxth.w	r3, lr
 801e068:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e06a:	9301      	str	r3, [sp, #4]
 801e06c:	fa0f f38c 	sxth.w	r3, ip
 801e070:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801e074:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e078:	9300      	str	r3, [sp, #0]
 801e07a:	463a      	mov	r2, r7
 801e07c:	464b      	mov	r3, r9
 801e07e:	4641      	mov	r1, r8
 801e080:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e082:	f7ff fd79 	bl	801db78 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801e086:	e754      	b.n	801df32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e088:	142a      	asrs	r2, r5, #16
 801e08a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e08e:	1433      	asrs	r3, r6, #16
 801e090:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e094:	fb09 2303 	mla	r3, r9, r3, r2
 801e098:	085a      	lsrs	r2, r3, #1
 801e09a:	07dc      	lsls	r4, r3, #31
 801e09c:	5cba      	ldrb	r2, [r7, r2]
 801e09e:	bf54      	ite	pl
 801e0a0:	f002 020f 	andpl.w	r2, r2, #15
 801e0a4:	1112      	asrmi	r2, r2, #4
 801e0a6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e0aa:	b2d2      	uxtb	r2, r2
 801e0ac:	2900      	cmp	r1, #0
 801e0ae:	f000 8097 	beq.w	801e1e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801e0b2:	f103 0b01 	add.w	fp, r3, #1
 801e0b6:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801e0ba:	f01b 0f01 	tst.w	fp, #1
 801e0be:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e0c2:	bf0c      	ite	eq
 801e0c4:	f00c 0c0f 	andeq.w	ip, ip, #15
 801e0c8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801e0cc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e0d0:	fa5f f48c 	uxtb.w	r4, ip
 801e0d4:	9412      	str	r4, [sp, #72]	@ 0x48
 801e0d6:	b300      	cbz	r0, 801e11a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e0d8:	444b      	add	r3, r9
 801e0da:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e0de:	07dc      	lsls	r4, r3, #31
 801e0e0:	f103 0301 	add.w	r3, r3, #1
 801e0e4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e0e8:	bf54      	ite	pl
 801e0ea:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e0ee:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e0f2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e0f6:	fa5f f48c 	uxtb.w	r4, ip
 801e0fa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e0fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e100:	07dc      	lsls	r4, r3, #31
 801e102:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e106:	bf54      	ite	pl
 801e108:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e10c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e110:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e114:	fa5f f38c 	uxtb.w	r3, ip
 801e118:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e11a:	b289      	uxth	r1, r1
 801e11c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e11e:	b280      	uxth	r0, r0
 801e120:	fb01 f300 	mul.w	r3, r1, r0
 801e124:	0109      	lsls	r1, r1, #4
 801e126:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801e12a:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 801e12e:	1ac9      	subs	r1, r1, r3
 801e130:	b280      	uxth	r0, r0
 801e132:	b289      	uxth	r1, r1
 801e134:	ebac 0c00 	sub.w	ip, ip, r0
 801e138:	4361      	muls	r1, r4
 801e13a:	fa1f fc8c 	uxth.w	ip, ip
 801e13e:	fb02 120c 	mla	r2, r2, ip, r1
 801e142:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e144:	fb00 2001 	mla	r0, r0, r1, r2
 801e148:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e14a:	fb03 0302 	mla	r3, r3, r2, r0
 801e14e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e152:	2b00      	cmp	r3, #0
 801e154:	d039      	beq.n	801e1ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801e156:	4a21      	ldr	r2, [pc, #132]	@ (801e1dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801e158:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801e15c:	6810      	ldr	r0, [r2, #0]
 801e15e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e160:	fa5f fc80 	uxtb.w	ip, r0
 801e164:	4353      	muls	r3, r2
 801e166:	1c5a      	adds	r2, r3, #1
 801e168:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e16c:	121b      	asrs	r3, r3, #8
 801e16e:	b29a      	uxth	r2, r3
 801e170:	43db      	mvns	r3, r3
 801e172:	fb1c fc02 	smulbb	ip, ip, r2
 801e176:	b2db      	uxtb	r3, r3
 801e178:	fb01 c103 	mla	r1, r1, r3, ip
 801e17c:	b289      	uxth	r1, r1
 801e17e:	f101 0c01 	add.w	ip, r1, #1
 801e182:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801e186:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801e18a:	fb1c fc03 	smulbb	ip, ip, r3
 801e18e:	1209      	asrs	r1, r1, #8
 801e190:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801e194:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801e198:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801e19c:	fb01 c102 	mla	r1, r1, r2, ip
 801e1a0:	b289      	uxth	r1, r1
 801e1a2:	f101 0c01 	add.w	ip, r1, #1
 801e1a6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801e1aa:	1209      	asrs	r1, r1, #8
 801e1ac:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801e1b0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801e1b4:	fb11 f303 	smulbb	r3, r1, r3
 801e1b8:	fb00 3002 	mla	r0, r0, r2, r3
 801e1bc:	b280      	uxth	r0, r0
 801e1be:	1c42      	adds	r2, r0, #1
 801e1c0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e1c4:	1200      	asrs	r0, r0, #8
 801e1c6:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801e1ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e1cc:	f10e 0e03 	add.w	lr, lr, #3
 801e1d0:	f108 38ff 	add.w	r8, r8, #4294967295
 801e1d4:	441d      	add	r5, r3
 801e1d6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e1d8:	441e      	add	r6, r3
 801e1da:	e6db      	b.n	801df94 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801e1dc:	24025168 	.word	0x24025168
 801e1e0:	2800      	cmp	r0, #0
 801e1e2:	d09a      	beq.n	801e11a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e1e4:	444b      	add	r3, r9
 801e1e6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e1ea:	07db      	lsls	r3, r3, #31
 801e1ec:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e1f0:	bf54      	ite	pl
 801e1f2:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e1f6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e1fa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e1fe:	fa5f f38c 	uxtb.w	r3, ip
 801e202:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e204:	e789      	b.n	801e11a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e206:	b017      	add	sp, #92	@ 0x5c
 801e208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e20c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801e20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e210:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 801e214:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801e218:	2d00      	cmp	r5, #0
 801e21a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801e21e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801e222:	fb04 5e03 	mla	lr, r4, r3, r5
 801e226:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801e22a:	f2c0 80b1 	blt.w	801e390 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e22e:	45a9      	cmp	r9, r5
 801e230:	f340 80ae 	ble.w	801e390 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e234:	2c00      	cmp	r4, #0
 801e236:	f2c0 80ab 	blt.w	801e390 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e23a:	45a0      	cmp	r8, r4
 801e23c:	f340 80a8 	ble.w	801e390 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e240:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801e244:	f01e 0f01 	tst.w	lr, #1
 801e248:	5d97      	ldrb	r7, [r2, r6]
 801e24a:	bf0c      	ite	eq
 801e24c:	f007 070f 	andeq.w	r7, r7, #15
 801e250:	113f      	asrne	r7, r7, #4
 801e252:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801e256:	b2ff      	uxtb	r7, r7
 801e258:	f115 0a01 	adds.w	sl, r5, #1
 801e25c:	f100 809a 	bmi.w	801e394 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e260:	45d1      	cmp	r9, sl
 801e262:	f340 8097 	ble.w	801e394 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e266:	2c00      	cmp	r4, #0
 801e268:	f2c0 8094 	blt.w	801e394 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e26c:	45a0      	cmp	r8, r4
 801e26e:	f340 8091 	ble.w	801e394 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e272:	2800      	cmp	r0, #0
 801e274:	f000 8090 	beq.w	801e398 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801e278:	f10e 0b01 	add.w	fp, lr, #1
 801e27c:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801e280:	f01b 0f01 	tst.w	fp, #1
 801e284:	5d96      	ldrb	r6, [r2, r6]
 801e286:	bf0c      	ite	eq
 801e288:	f006 060f 	andeq.w	r6, r6, #15
 801e28c:	1136      	asrne	r6, r6, #4
 801e28e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801e292:	b2f6      	uxtb	r6, r6
 801e294:	f1bc 0f00 	cmp.w	ip, #0
 801e298:	f000 8082 	beq.w	801e3a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801e29c:	2d00      	cmp	r5, #0
 801e29e:	f104 0401 	add.w	r4, r4, #1
 801e2a2:	db7b      	blt.n	801e39c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e2a4:	45a9      	cmp	r9, r5
 801e2a6:	dd79      	ble.n	801e39c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e2a8:	2c00      	cmp	r4, #0
 801e2aa:	db77      	blt.n	801e39c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e2ac:	45a0      	cmp	r8, r4
 801e2ae:	dd75      	ble.n	801e39c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e2b0:	eb03 0b0e 	add.w	fp, r3, lr
 801e2b4:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801e2b8:	f01b 0f01 	tst.w	fp, #1
 801e2bc:	5d55      	ldrb	r5, [r2, r5]
 801e2be:	bf0c      	ite	eq
 801e2c0:	f005 050f 	andeq.w	r5, r5, #15
 801e2c4:	112d      	asrne	r5, r5, #4
 801e2c6:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801e2ca:	b2ed      	uxtb	r5, r5
 801e2cc:	f1ba 0f00 	cmp.w	sl, #0
 801e2d0:	db69      	blt.n	801e3a6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e2d2:	45d1      	cmp	r9, sl
 801e2d4:	dd67      	ble.n	801e3a6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e2d6:	2c00      	cmp	r4, #0
 801e2d8:	db65      	blt.n	801e3a6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e2da:	45a0      	cmp	r8, r4
 801e2dc:	dd63      	ble.n	801e3a6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e2de:	2800      	cmp	r0, #0
 801e2e0:	d063      	beq.n	801e3aa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801e2e2:	3301      	adds	r3, #1
 801e2e4:	449e      	add	lr, r3
 801e2e6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801e2ea:	f01e 0f01 	tst.w	lr, #1
 801e2ee:	5cd4      	ldrb	r4, [r2, r3]
 801e2f0:	bf0c      	ite	eq
 801e2f2:	f004 040f 	andeq.w	r4, r4, #15
 801e2f6:	1124      	asrne	r4, r4, #4
 801e2f8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801e2fc:	b2e3      	uxtb	r3, r4
 801e2fe:	b282      	uxth	r2, r0
 801e300:	fa1f fc8c 	uxth.w	ip, ip
 801e304:	fb02 f40c 	mul.w	r4, r2, ip
 801e308:	0112      	lsls	r2, r2, #4
 801e30a:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801e30e:	fa1f f08c 	uxth.w	r0, ip
 801e312:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 801e316:	1b12      	subs	r2, r2, r4
 801e318:	ebac 0c00 	sub.w	ip, ip, r0
 801e31c:	b292      	uxth	r2, r2
 801e31e:	fa1f fc8c 	uxth.w	ip, ip
 801e322:	4372      	muls	r2, r6
 801e324:	fb07 220c 	mla	r2, r7, ip, r2
 801e328:	fb00 2005 	mla	r0, r0, r5, r2
 801e32c:	fb04 0303 	mla	r3, r4, r3, r0
 801e330:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e334:	b353      	cbz	r3, 801e38c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801e336:	4a1e      	ldr	r2, [pc, #120]	@ (801e3b0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801e338:	7808      	ldrb	r0, [r1, #0]
 801e33a:	6814      	ldr	r4, [r2, #0]
 801e33c:	b29a      	uxth	r2, r3
 801e33e:	43db      	mvns	r3, r3
 801e340:	b2e5      	uxtb	r5, r4
 801e342:	b2db      	uxtb	r3, r3
 801e344:	fb15 f502 	smulbb	r5, r5, r2
 801e348:	fb00 5003 	mla	r0, r0, r3, r5
 801e34c:	b280      	uxth	r0, r0
 801e34e:	1c45      	adds	r5, r0, #1
 801e350:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801e354:	784d      	ldrb	r5, [r1, #1]
 801e356:	fb15 f503 	smulbb	r5, r5, r3
 801e35a:	1200      	asrs	r0, r0, #8
 801e35c:	7008      	strb	r0, [r1, #0]
 801e35e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801e362:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801e366:	fb00 5002 	mla	r0, r0, r2, r5
 801e36a:	b280      	uxth	r0, r0
 801e36c:	1c45      	adds	r5, r0, #1
 801e36e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801e372:	1200      	asrs	r0, r0, #8
 801e374:	7048      	strb	r0, [r1, #1]
 801e376:	7888      	ldrb	r0, [r1, #2]
 801e378:	fb10 f303 	smulbb	r3, r0, r3
 801e37c:	fb04 3202 	mla	r2, r4, r2, r3
 801e380:	b292      	uxth	r2, r2
 801e382:	1c53      	adds	r3, r2, #1
 801e384:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e388:	1212      	asrs	r2, r2, #8
 801e38a:	708a      	strb	r2, [r1, #2]
 801e38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e390:	2700      	movs	r7, #0
 801e392:	e761      	b.n	801e258 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801e394:	2600      	movs	r6, #0
 801e396:	e77d      	b.n	801e294 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801e398:	4606      	mov	r6, r0
 801e39a:	e77b      	b.n	801e294 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801e39c:	2500      	movs	r5, #0
 801e39e:	e795      	b.n	801e2cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801e3a0:	4663      	mov	r3, ip
 801e3a2:	4665      	mov	r5, ip
 801e3a4:	e7ab      	b.n	801e2fe <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801e3a6:	2300      	movs	r3, #0
 801e3a8:	e7a9      	b.n	801e2fe <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801e3aa:	4603      	mov	r3, r0
 801e3ac:	e7a7      	b.n	801e2fe <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801e3ae:	bf00      	nop
 801e3b0:	24025168 	.word	0x24025168

0801e3b4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3b8:	b093      	sub	sp, #76	@ 0x4c
 801e3ba:	461c      	mov	r4, r3
 801e3bc:	920c      	str	r2, [sp, #48]	@ 0x30
 801e3be:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e3c0:	9011      	str	r0, [sp, #68]	@ 0x44
 801e3c2:	9107      	str	r1, [sp, #28]
 801e3c4:	6850      	ldr	r0, [r2, #4]
 801e3c6:	6812      	ldr	r2, [r2, #0]
 801e3c8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801e3cc:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 801e3d0:	fb00 1303 	mla	r3, r0, r3, r1
 801e3d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e3d8:	eb02 0b03 	add.w	fp, r2, r3
 801e3dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e3de:	689b      	ldr	r3, [r3, #8]
 801e3e0:	3301      	adds	r3, #1
 801e3e2:	f023 0301 	bic.w	r3, r3, #1
 801e3e6:	9309      	str	r3, [sp, #36]	@ 0x24
 801e3e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e3ea:	f8d3 8000 	ldr.w	r8, [r3]
 801e3ee:	9b07      	ldr	r3, [sp, #28]
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	dc03      	bgt.n	801e3fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e3f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	f340 822b 	ble.w	801e852 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801e3fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e3fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e402:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e406:	1e48      	subs	r0, r1, #1
 801e408:	1e57      	subs	r7, r2, #1
 801e40a:	2c00      	cmp	r4, #0
 801e40c:	f340 80d7 	ble.w	801e5be <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801e410:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801e414:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e418:	d406      	bmi.n	801e428 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e41a:	4584      	cmp	ip, r0
 801e41c:	da04      	bge.n	801e428 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e41e:	2b00      	cmp	r3, #0
 801e420:	db02      	blt.n	801e428 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e422:	42bb      	cmp	r3, r7
 801e424:	f2c0 80cc 	blt.w	801e5c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801e428:	f11c 0c01 	adds.w	ip, ip, #1
 801e42c:	f100 80bf 	bmi.w	801e5ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e430:	4561      	cmp	r1, ip
 801e432:	f2c0 80bc 	blt.w	801e5ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e436:	3301      	adds	r3, #1
 801e438:	f100 80b9 	bmi.w	801e5ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e43c:	429a      	cmp	r2, r3
 801e43e:	f2c0 80b6 	blt.w	801e5ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e442:	46a2      	mov	sl, r4
 801e444:	465f      	mov	r7, fp
 801e446:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801e44a:	f1ba 0f00 	cmp.w	sl, #0
 801e44e:	f340 80d4 	ble.w	801e5fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801e452:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801e456:	1430      	asrs	r0, r6, #16
 801e458:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801e45c:	9308      	str	r3, [sp, #32]
 801e45e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e460:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801e464:	142b      	asrs	r3, r5, #16
 801e466:	f100 8124 	bmi.w	801e6b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801e46a:	f10c 32ff 	add.w	r2, ip, #4294967295
 801e46e:	4293      	cmp	r3, r2
 801e470:	f280 811f 	bge.w	801e6b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801e474:	2800      	cmp	r0, #0
 801e476:	f2c0 811c 	blt.w	801e6b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801e47a:	f10e 32ff 	add.w	r2, lr, #4294967295
 801e47e:	4290      	cmp	r0, r2
 801e480:	f280 8117 	bge.w	801e6b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801e484:	fb00 3309 	mla	r3, r0, r9, r3
 801e488:	0858      	lsrs	r0, r3, #1
 801e48a:	07da      	lsls	r2, r3, #31
 801e48c:	9a08      	ldr	r2, [sp, #32]
 801e48e:	f818 c000 	ldrb.w	ip, [r8, r0]
 801e492:	bf54      	ite	pl
 801e494:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e498:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e49c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e4a0:	fa5f fc8c 	uxtb.w	ip, ip
 801e4a4:	2a00      	cmp	r2, #0
 801e4a6:	f000 80ed 	beq.w	801e684 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801e4aa:	1c58      	adds	r0, r3, #1
 801e4ac:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801e4b0:	07c0      	lsls	r0, r0, #31
 801e4b2:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801e4b6:	bf54      	ite	pl
 801e4b8:	f00e 0e0f 	andpl.w	lr, lr, #15
 801e4bc:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801e4c0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801e4c4:	fa5f fe8e 	uxtb.w	lr, lr
 801e4c8:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 801e4cc:	b1c9      	cbz	r1, 801e502 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e4ce:	444b      	add	r3, r9
 801e4d0:	0858      	lsrs	r0, r3, #1
 801e4d2:	07da      	lsls	r2, r3, #31
 801e4d4:	f818 0000 	ldrb.w	r0, [r8, r0]
 801e4d8:	bf54      	ite	pl
 801e4da:	f000 000f 	andpl.w	r0, r0, #15
 801e4de:	1100      	asrmi	r0, r0, #4
 801e4e0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e4e4:	b2c0      	uxtb	r0, r0
 801e4e6:	900a      	str	r0, [sp, #40]	@ 0x28
 801e4e8:	1c58      	adds	r0, r3, #1
 801e4ea:	0843      	lsrs	r3, r0, #1
 801e4ec:	07c2      	lsls	r2, r0, #31
 801e4ee:	f818 3003 	ldrb.w	r3, [r8, r3]
 801e4f2:	bf54      	ite	pl
 801e4f4:	f003 030f 	andpl.w	r3, r3, #15
 801e4f8:	111b      	asrmi	r3, r3, #4
 801e4fa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e4fe:	b2db      	uxtb	r3, r3
 801e500:	930e      	str	r3, [sp, #56]	@ 0x38
 801e502:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e506:	b289      	uxth	r1, r1
 801e508:	fb02 f301 	mul.w	r3, r2, r1
 801e50c:	0112      	lsls	r2, r2, #4
 801e50e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801e512:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 801e516:	1ad2      	subs	r2, r2, r3
 801e518:	b289      	uxth	r1, r1
 801e51a:	b292      	uxth	r2, r2
 801e51c:	1a40      	subs	r0, r0, r1
 801e51e:	fa1f fe80 	uxth.w	lr, r0
 801e522:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e524:	4342      	muls	r2, r0
 801e526:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801e52a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e52c:	fb01 c102 	mla	r1, r1, r2, ip
 801e530:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e532:	fb03 1302 	mla	r3, r3, r2, r1
 801e536:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e53a:	b383      	cbz	r3, 801e59e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e53c:	4ac6      	ldr	r2, [pc, #792]	@ (801e858 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801e53e:	2bff      	cmp	r3, #255	@ 0xff
 801e540:	6812      	ldr	r2, [r2, #0]
 801e542:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801e546:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801e54a:	b2d2      	uxtb	r2, r2
 801e54c:	f000 80ac 	beq.w	801e6a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801e550:	b299      	uxth	r1, r3
 801e552:	43db      	mvns	r3, r3
 801e554:	f897 c000 	ldrb.w	ip, [r7]
 801e558:	fb12 f201 	smulbb	r2, r2, r1
 801e55c:	b2db      	uxtb	r3, r3
 801e55e:	fb10 f001 	smulbb	r0, r0, r1
 801e562:	fb0c 2203 	mla	r2, ip, r3, r2
 801e566:	fb1e f101 	smulbb	r1, lr, r1
 801e56a:	b292      	uxth	r2, r2
 801e56c:	f102 0c01 	add.w	ip, r2, #1
 801e570:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e574:	1212      	asrs	r2, r2, #8
 801e576:	703a      	strb	r2, [r7, #0]
 801e578:	787a      	ldrb	r2, [r7, #1]
 801e57a:	fb02 0003 	mla	r0, r2, r3, r0
 801e57e:	b280      	uxth	r0, r0
 801e580:	1c42      	adds	r2, r0, #1
 801e582:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e586:	78ba      	ldrb	r2, [r7, #2]
 801e588:	fb02 1303 	mla	r3, r2, r3, r1
 801e58c:	1200      	asrs	r0, r0, #8
 801e58e:	b29b      	uxth	r3, r3
 801e590:	7078      	strb	r0, [r7, #1]
 801e592:	f103 0e01 	add.w	lr, r3, #1
 801e596:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801e59a:	121b      	asrs	r3, r3, #8
 801e59c:	70bb      	strb	r3, [r7, #2]
 801e59e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e5a0:	3703      	adds	r7, #3
 801e5a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e5a6:	441d      	add	r5, r3
 801e5a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e5aa:	441e      	add	r6, r3
 801e5ac:	e74d      	b.n	801e44a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e5ae:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e5b0:	3c01      	subs	r4, #1
 801e5b2:	f10b 0b03 	add.w	fp, fp, #3
 801e5b6:	441d      	add	r5, r3
 801e5b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e5ba:	441e      	add	r6, r3
 801e5bc:	e725      	b.n	801e40a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801e5be:	d021      	beq.n	801e604 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801e5c0:	1e63      	subs	r3, r4, #1
 801e5c2:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801e5c4:	fb00 5003 	mla	r0, r0, r3, r5
 801e5c8:	1400      	asrs	r0, r0, #16
 801e5ca:	f53f af3a 	bmi.w	801e442 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e5ce:	3901      	subs	r1, #1
 801e5d0:	4288      	cmp	r0, r1
 801e5d2:	f6bf af36 	bge.w	801e442 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e5d6:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801e5d8:	fb01 6303 	mla	r3, r1, r3, r6
 801e5dc:	141b      	asrs	r3, r3, #16
 801e5de:	f53f af30 	bmi.w	801e442 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e5e2:	3a01      	subs	r2, #1
 801e5e4:	4293      	cmp	r3, r2
 801e5e6:	f6bf af2c 	bge.w	801e442 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e5ea:	f10b 0c03 	add.w	ip, fp, #3
 801e5ee:	46a6      	mov	lr, r4
 801e5f0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801e5f4:	f1be 0f00 	cmp.w	lr, #0
 801e5f8:	dc79      	bgt.n	801e6ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801e5fa:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801e5fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e602:	44a3      	add	fp, r4
 801e604:	9b07      	ldr	r3, [sp, #28]
 801e606:	2b00      	cmp	r3, #0
 801e608:	f340 8123 	ble.w	801e852 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801e60c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e610:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e612:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e616:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e61a:	eef0 6a62 	vmov.f32	s13, s5
 801e61e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e622:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e626:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e62a:	ee16 5a90 	vmov	r5, s13
 801e62e:	eef0 6a43 	vmov.f32	s13, s6
 801e632:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e636:	ee16 6a90 	vmov	r6, s13
 801e63a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e63e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e642:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e646:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e64a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e64e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e652:	ee12 2a90 	vmov	r2, s5
 801e656:	eef0 2a47 	vmov.f32	s5, s14
 801e65a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e65e:	ee13 2a10 	vmov	r2, s6
 801e662:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e664:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e666:	eeb0 3a67 	vmov.f32	s6, s15
 801e66a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e66e:	9320      	str	r3, [sp, #128]	@ 0x80
 801e670:	9b07      	ldr	r3, [sp, #28]
 801e672:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e674:	3b01      	subs	r3, #1
 801e676:	9307      	str	r3, [sp, #28]
 801e678:	bf08      	it	eq
 801e67a:	4614      	moveq	r4, r2
 801e67c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801e67e:	bf18      	it	ne
 801e680:	461c      	movne	r4, r3
 801e682:	e6b4      	b.n	801e3ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e684:	2900      	cmp	r1, #0
 801e686:	f43f af3c 	beq.w	801e502 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e68a:	eb09 0003 	add.w	r0, r9, r3
 801e68e:	0843      	lsrs	r3, r0, #1
 801e690:	07c0      	lsls	r0, r0, #31
 801e692:	f818 3003 	ldrb.w	r3, [r8, r3]
 801e696:	bf54      	ite	pl
 801e698:	f003 030f 	andpl.w	r3, r3, #15
 801e69c:	111b      	asrmi	r3, r3, #4
 801e69e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e6a2:	b2db      	uxtb	r3, r3
 801e6a4:	930a      	str	r3, [sp, #40]	@ 0x28
 801e6a6:	e72c      	b.n	801e502 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e6a8:	703a      	strb	r2, [r7, #0]
 801e6aa:	7078      	strb	r0, [r7, #1]
 801e6ac:	f887 e002 	strb.w	lr, [r7, #2]
 801e6b0:	e775      	b.n	801e59e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e6b2:	1c5a      	adds	r2, r3, #1
 801e6b4:	f53f af73 	bmi.w	801e59e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e6b8:	4594      	cmp	ip, r2
 801e6ba:	f6ff af70 	blt.w	801e59e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e6be:	1c42      	adds	r2, r0, #1
 801e6c0:	f53f af6d 	bmi.w	801e59e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e6c4:	4596      	cmp	lr, r2
 801e6c6:	f6ff af6a 	blt.w	801e59e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e6ca:	9302      	str	r3, [sp, #8]
 801e6cc:	fa0f f38e 	sxth.w	r3, lr
 801e6d0:	9a08      	ldr	r2, [sp, #32]
 801e6d2:	9301      	str	r3, [sp, #4]
 801e6d4:	fa0f f38c 	sxth.w	r3, ip
 801e6d8:	9105      	str	r1, [sp, #20]
 801e6da:	4639      	mov	r1, r7
 801e6dc:	9300      	str	r3, [sp, #0]
 801e6de:	464b      	mov	r3, r9
 801e6e0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801e6e4:	4642      	mov	r2, r8
 801e6e6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801e6e8:	f7ff fd90 	bl	801e20c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801e6ec:	e757      	b.n	801e59e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801e6ee:	142a      	asrs	r2, r5, #16
 801e6f0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e6f4:	1433      	asrs	r3, r6, #16
 801e6f6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801e6fa:	fb09 2303 	mla	r3, r9, r3, r2
 801e6fe:	085a      	lsrs	r2, r3, #1
 801e700:	07d9      	lsls	r1, r3, #31
 801e702:	f818 2002 	ldrb.w	r2, [r8, r2]
 801e706:	bf54      	ite	pl
 801e708:	f002 020f 	andpl.w	r2, r2, #15
 801e70c:	1112      	asrmi	r2, r2, #4
 801e70e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e712:	b2d2      	uxtb	r2, r2
 801e714:	2800      	cmp	r0, #0
 801e716:	f000 8085 	beq.w	801e824 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801e71a:	f103 0a01 	add.w	sl, r3, #1
 801e71e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801e722:	f01a 0f01 	tst.w	sl, #1
 801e726:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e72a:	bf0c      	ite	eq
 801e72c:	f001 010f 	andeq.w	r1, r1, #15
 801e730:	1109      	asrne	r1, r1, #4
 801e732:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e736:	b2c9      	uxtb	r1, r1
 801e738:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e73a:	b1df      	cbz	r7, 801e774 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801e73c:	444b      	add	r3, r9
 801e73e:	0859      	lsrs	r1, r3, #1
 801e740:	f013 0f01 	tst.w	r3, #1
 801e744:	f103 0301 	add.w	r3, r3, #1
 801e748:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e74c:	bf0c      	ite	eq
 801e74e:	f001 010f 	andeq.w	r1, r1, #15
 801e752:	1109      	asrne	r1, r1, #4
 801e754:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e758:	b2c9      	uxtb	r1, r1
 801e75a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e75c:	0859      	lsrs	r1, r3, #1
 801e75e:	07db      	lsls	r3, r3, #31
 801e760:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e764:	bf54      	ite	pl
 801e766:	f001 010f 	andpl.w	r1, r1, #15
 801e76a:	1109      	asrmi	r1, r1, #4
 801e76c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e770:	b2c9      	uxtb	r1, r1
 801e772:	9110      	str	r1, [sp, #64]	@ 0x40
 801e774:	b280      	uxth	r0, r0
 801e776:	b2bf      	uxth	r7, r7
 801e778:	fb00 f307 	mul.w	r3, r0, r7
 801e77c:	0100      	lsls	r0, r0, #4
 801e77e:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801e782:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 801e786:	1ac0      	subs	r0, r0, r3
 801e788:	b2bf      	uxth	r7, r7
 801e78a:	b280      	uxth	r0, r0
 801e78c:	1bc9      	subs	r1, r1, r7
 801e78e:	fa1f fa81 	uxth.w	sl, r1
 801e792:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e794:	4348      	muls	r0, r1
 801e796:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e798:	fb02 020a 	mla	r2, r2, sl, r0
 801e79c:	fb07 2701 	mla	r7, r7, r1, r2
 801e7a0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e7a2:	fb03 7302 	mla	r3, r3, r2, r7
 801e7a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e7aa:	b393      	cbz	r3, 801e812 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801e7ac:	4a2a      	ldr	r2, [pc, #168]	@ (801e858 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801e7ae:	2bff      	cmp	r3, #255	@ 0xff
 801e7b0:	6811      	ldr	r1, [r2, #0]
 801e7b2:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801e7b6:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801e7ba:	b2c9      	uxtb	r1, r1
 801e7bc:	d042      	beq.n	801e844 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801e7be:	b298      	uxth	r0, r3
 801e7c0:	43db      	mvns	r3, r3
 801e7c2:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801e7c6:	fb11 f100 	smulbb	r1, r1, r0
 801e7ca:	b2db      	uxtb	r3, r3
 801e7cc:	fb17 f700 	smulbb	r7, r7, r0
 801e7d0:	fb02 1103 	mla	r1, r2, r3, r1
 801e7d4:	fb1a f000 	smulbb	r0, sl, r0
 801e7d8:	b289      	uxth	r1, r1
 801e7da:	1c4a      	adds	r2, r1, #1
 801e7dc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e7e0:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801e7e4:	fb02 7703 	mla	r7, r2, r3, r7
 801e7e8:	1209      	asrs	r1, r1, #8
 801e7ea:	b2bf      	uxth	r7, r7
 801e7ec:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801e7f0:	1c7a      	adds	r2, r7, #1
 801e7f2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801e7f6:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801e7fa:	fb02 0303 	mla	r3, r2, r3, r0
 801e7fe:	123f      	asrs	r7, r7, #8
 801e800:	b29b      	uxth	r3, r3
 801e802:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801e806:	1c5a      	adds	r2, r3, #1
 801e808:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e80c:	121b      	asrs	r3, r3, #8
 801e80e:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801e812:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e814:	f10c 0c03 	add.w	ip, ip, #3
 801e818:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e81c:	441d      	add	r5, r3
 801e81e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e820:	441e      	add	r6, r3
 801e822:	e6e7      	b.n	801e5f4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801e824:	2f00      	cmp	r7, #0
 801e826:	d0a5      	beq.n	801e774 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801e828:	444b      	add	r3, r9
 801e82a:	0859      	lsrs	r1, r3, #1
 801e82c:	07db      	lsls	r3, r3, #31
 801e82e:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e832:	bf54      	ite	pl
 801e834:	f001 010f 	andpl.w	r1, r1, #15
 801e838:	1109      	asrmi	r1, r1, #4
 801e83a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801e83e:	b2c9      	uxtb	r1, r1
 801e840:	910b      	str	r1, [sp, #44]	@ 0x2c
 801e842:	e797      	b.n	801e774 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801e844:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801e848:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801e84c:	f80c ac01 	strb.w	sl, [ip, #-1]
 801e850:	e7df      	b.n	801e812 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801e852:	b013      	add	sp, #76	@ 0x4c
 801e854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e858:	24025168 	.word	0x24025168

0801e85c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 801e85c:	b530      	push	{r4, r5, lr}
 801e85e:	b29d      	uxth	r5, r3
 801e860:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801e864:	780c      	ldrb	r4, [r1, #0]
 801e866:	b298      	uxth	r0, r3
 801e868:	7813      	ldrb	r3, [r2, #0]
 801e86a:	fb14 f405 	smulbb	r4, r4, r5
 801e86e:	fb13 f300 	smulbb	r3, r3, r0
 801e872:	441c      	add	r4, r3
 801e874:	b2a4      	uxth	r4, r4
 801e876:	1c63      	adds	r3, r4, #1
 801e878:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801e87c:	7853      	ldrb	r3, [r2, #1]
 801e87e:	fb13 f300 	smulbb	r3, r3, r0
 801e882:	1224      	asrs	r4, r4, #8
 801e884:	7014      	strb	r4, [r2, #0]
 801e886:	784c      	ldrb	r4, [r1, #1]
 801e888:	fb14 f405 	smulbb	r4, r4, r5
 801e88c:	441c      	add	r4, r3
 801e88e:	b2a4      	uxth	r4, r4
 801e890:	1c63      	adds	r3, r4, #1
 801e892:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801e896:	1224      	asrs	r4, r4, #8
 801e898:	7054      	strb	r4, [r2, #1]
 801e89a:	788b      	ldrb	r3, [r1, #2]
 801e89c:	7891      	ldrb	r1, [r2, #2]
 801e89e:	fb13 f305 	smulbb	r3, r3, r5
 801e8a2:	fb11 f000 	smulbb	r0, r1, r0
 801e8a6:	4403      	add	r3, r0
 801e8a8:	b29b      	uxth	r3, r3
 801e8aa:	1c59      	adds	r1, r3, #1
 801e8ac:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801e8b0:	121b      	asrs	r3, r3, #8
 801e8b2:	7093      	strb	r3, [r2, #2]
 801e8b4:	bd30      	pop	{r4, r5, pc}
	...

0801e8b8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801e8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8bc:	461c      	mov	r4, r3
 801e8be:	b08b      	sub	sp, #44	@ 0x2c
 801e8c0:	460e      	mov	r6, r1
 801e8c2:	4615      	mov	r5, r2
 801e8c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e8c6:	4682      	mov	sl, r0
 801e8c8:	6861      	ldr	r1, [r4, #4]
 801e8ca:	aa06      	add	r2, sp, #24
 801e8cc:	6820      	ldr	r0, [r4, #0]
 801e8ce:	2702      	movs	r7, #2
 801e8d0:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 801e8d4:	3504      	adds	r5, #4
 801e8d6:	c203      	stmia	r2!, {r0, r1}
 801e8d8:	6818      	ldr	r0, [r3, #0]
 801e8da:	aa08      	add	r2, sp, #32
 801e8dc:	6859      	ldr	r1, [r3, #4]
 801e8de:	c203      	stmia	r2!, {r0, r1}
 801e8e0:	a806      	add	r0, sp, #24
 801e8e2:	f7f3 fe63 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e8e6:	4621      	mov	r1, r4
 801e8e8:	a808      	add	r0, sp, #32
 801e8ea:	f7f3 fe87 	bl	80125fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e8ee:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e8f2:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 801e8f6:	f002 0301 	and.w	r3, r2, #1
 801e8fa:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801e8fe:	9302      	str	r3, [sp, #8]
 801e900:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e904:	f003 0101 	and.w	r1, r3, #1
 801e908:	9101      	str	r1, [sp, #4]
 801e90a:	9801      	ldr	r0, [sp, #4]
 801e90c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801e910:	4403      	add	r3, r0
 801e912:	fb01 2303 	mla	r3, r1, r3, r2
 801e916:	fb93 f3f7 	sdiv	r3, r3, r7
 801e91a:	441e      	add	r6, r3
 801e91c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801e920:	441a      	add	r2, r3
 801e922:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801e926:	4419      	add	r1, r3
 801e928:	4b70      	ldr	r3, [pc, #448]	@ (801eaec <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801e92a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e92e:	6818      	ldr	r0, [r3, #0]
 801e930:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 801e934:	6803      	ldr	r3, [r0, #0]
 801e936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e938:	4798      	blx	r3
 801e93a:	4a6d      	ldr	r2, [pc, #436]	@ (801eaf0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 801e93c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801e940:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801e944:	8813      	ldrh	r3, [r2, #0]
 801e946:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801e94a:	fb03 1404 	mla	r4, r3, r4, r1
 801e94e:	4611      	mov	r1, r2
 801e950:	fb0b f303 	mul.w	r3, fp, r3
 801e954:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e958:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e95c:	4404      	add	r4, r0
 801e95e:	4423      	add	r3, r4
 801e960:	d073      	beq.n	801ea4a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 801e962:	9705      	str	r7, [sp, #20]
 801e964:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801e968:	9b03      	ldr	r3, [sp, #12]
 801e96a:	429c      	cmp	r4, r3
 801e96c:	f080 80b5 	bcs.w	801eada <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801e970:	9b02      	ldr	r3, [sp, #8]
 801e972:	b35b      	cbz	r3, 801e9cc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 801e974:	7831      	ldrb	r1, [r6, #0]
 801e976:	4622      	mov	r2, r4
 801e978:	1c77      	adds	r7, r6, #1
 801e97a:	3403      	adds	r4, #3
 801e97c:	f001 010f 	and.w	r1, r1, #15
 801e980:	f108 3bff 	add.w	fp, r8, #4294967295
 801e984:	464b      	mov	r3, r9
 801e986:	4650      	mov	r0, sl
 801e988:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e98c:	4429      	add	r1, r5
 801e98e:	f7ff ff65 	bl	801e85c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801e992:	f1bb 0f01 	cmp.w	fp, #1
 801e996:	dd1c      	ble.n	801e9d2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801e998:	7839      	ldrb	r1, [r7, #0]
 801e99a:	4622      	mov	r2, r4
 801e99c:	464b      	mov	r3, r9
 801e99e:	4650      	mov	r0, sl
 801e9a0:	0909      	lsrs	r1, r1, #4
 801e9a2:	f1ab 0b02 	sub.w	fp, fp, #2
 801e9a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e9aa:	4429      	add	r1, r5
 801e9ac:	f7ff ff56 	bl	801e85c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801e9b0:	f817 1b01 	ldrb.w	r1, [r7], #1
 801e9b4:	1ce2      	adds	r2, r4, #3
 801e9b6:	464b      	mov	r3, r9
 801e9b8:	f001 010f 	and.w	r1, r1, #15
 801e9bc:	4650      	mov	r0, sl
 801e9be:	3406      	adds	r4, #6
 801e9c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e9c4:	4429      	add	r1, r5
 801e9c6:	f7ff ff49 	bl	801e85c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801e9ca:	e7e2      	b.n	801e992 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801e9cc:	4637      	mov	r7, r6
 801e9ce:	46c3      	mov	fp, r8
 801e9d0:	e7df      	b.n	801e992 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801e9d2:	d10a      	bne.n	801e9ea <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 801e9d4:	7839      	ldrb	r1, [r7, #0]
 801e9d6:	4622      	mov	r2, r4
 801e9d8:	3403      	adds	r4, #3
 801e9da:	464b      	mov	r3, r9
 801e9dc:	0909      	lsrs	r1, r1, #4
 801e9de:	4650      	mov	r0, sl
 801e9e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e9e4:	4429      	add	r1, r5
 801e9e6:	f7ff ff39 	bl	801e85c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801e9ea:	9b04      	ldr	r3, [sp, #16]
 801e9ec:	9a01      	ldr	r2, [sp, #4]
 801e9ee:	881b      	ldrh	r3, [r3, #0]
 801e9f0:	eba3 0308 	sub.w	r3, r3, r8
 801e9f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e9f8:	441c      	add	r4, r3
 801e9fa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801e9fe:	4413      	add	r3, r2
 801ea00:	9a05      	ldr	r2, [sp, #20]
 801ea02:	fb93 f3f2 	sdiv	r3, r3, r2
 801ea06:	441e      	add	r6, r3
 801ea08:	e7ae      	b.n	801e968 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 801ea0a:	4632      	mov	r2, r6
 801ea0c:	46c4      	mov	ip, r8
 801ea0e:	e037      	b.n	801ea80 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801ea10:	d10e      	bne.n	801ea30 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 801ea12:	7812      	ldrb	r2, [r2, #0]
 801ea14:	3003      	adds	r0, #3
 801ea16:	0912      	lsrs	r2, r2, #4
 801ea18:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ea1c:	18ac      	adds	r4, r5, r2
 801ea1e:	5caa      	ldrb	r2, [r5, r2]
 801ea20:	f800 2c03 	strb.w	r2, [r0, #-3]
 801ea24:	7862      	ldrb	r2, [r4, #1]
 801ea26:	f800 2c02 	strb.w	r2, [r0, #-2]
 801ea2a:	78a2      	ldrb	r2, [r4, #2]
 801ea2c:	f800 2c01 	strb.w	r2, [r0, #-1]
 801ea30:	880c      	ldrh	r4, [r1, #0]
 801ea32:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801ea36:	eba4 0408 	sub.w	r4, r4, r8
 801ea3a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ea3e:	4404      	add	r4, r0
 801ea40:	9801      	ldr	r0, [sp, #4]
 801ea42:	4402      	add	r2, r0
 801ea44:	fb92 f2f7 	sdiv	r2, r2, r7
 801ea48:	4416      	add	r6, r2
 801ea4a:	429c      	cmp	r4, r3
 801ea4c:	d245      	bcs.n	801eada <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801ea4e:	9a02      	ldr	r2, [sp, #8]
 801ea50:	2a00      	cmp	r2, #0
 801ea52:	d0da      	beq.n	801ea0a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 801ea54:	7830      	ldrb	r0, [r6, #0]
 801ea56:	1c72      	adds	r2, r6, #1
 801ea58:	3403      	adds	r4, #3
 801ea5a:	f000 000f 	and.w	r0, r0, #15
 801ea5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ea62:	eb05 0c00 	add.w	ip, r5, r0
 801ea66:	5c28      	ldrb	r0, [r5, r0]
 801ea68:	f804 0c03 	strb.w	r0, [r4, #-3]
 801ea6c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801ea70:	f804 0c02 	strb.w	r0, [r4, #-2]
 801ea74:	f89c 0002 	ldrb.w	r0, [ip, #2]
 801ea78:	f108 3cff 	add.w	ip, r8, #4294967295
 801ea7c:	f804 0c01 	strb.w	r0, [r4, #-1]
 801ea80:	f1bc 0f01 	cmp.w	ip, #1
 801ea84:	4620      	mov	r0, r4
 801ea86:	f104 0406 	add.w	r4, r4, #6
 801ea8a:	ddc1      	ble.n	801ea10 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 801ea8c:	7810      	ldrb	r0, [r2, #0]
 801ea8e:	f1ac 0c02 	sub.w	ip, ip, #2
 801ea92:	0900      	lsrs	r0, r0, #4
 801ea94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ea98:	eb05 0e00 	add.w	lr, r5, r0
 801ea9c:	5c28      	ldrb	r0, [r5, r0]
 801ea9e:	f804 0c06 	strb.w	r0, [r4, #-6]
 801eaa2:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801eaa6:	f804 0c05 	strb.w	r0, [r4, #-5]
 801eaaa:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801eaae:	f804 0c04 	strb.w	r0, [r4, #-4]
 801eab2:	f812 0b01 	ldrb.w	r0, [r2], #1
 801eab6:	f000 000f 	and.w	r0, r0, #15
 801eaba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801eabe:	eb05 0e00 	add.w	lr, r5, r0
 801eac2:	5c28      	ldrb	r0, [r5, r0]
 801eac4:	f804 0c03 	strb.w	r0, [r4, #-3]
 801eac8:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801eacc:	f804 0c02 	strb.w	r0, [r4, #-2]
 801ead0:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801ead4:	f804 0c01 	strb.w	r0, [r4, #-1]
 801ead8:	e7d2      	b.n	801ea80 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801eada:	4b04      	ldr	r3, [pc, #16]	@ (801eaec <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801eadc:	6818      	ldr	r0, [r3, #0]
 801eade:	6803      	ldr	r3, [r0, #0]
 801eae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eae2:	4798      	blx	r3
 801eae4:	b00b      	add	sp, #44	@ 0x2c
 801eae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaea:	bf00      	nop
 801eaec:	24025158 	.word	0x24025158
 801eaf0:	24025152 	.word	0x24025152

0801eaf4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 801eaf4:	b530      	push	{r4, r5, lr}
 801eaf6:	f89d 000c 	ldrb.w	r0, [sp, #12]
 801eafa:	780d      	ldrb	r5, [r1, #0]
 801eafc:	28ff      	cmp	r0, #255	@ 0xff
 801eafe:	d107      	bne.n	801eb10 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801eb00:	2bff      	cmp	r3, #255	@ 0xff
 801eb02:	d105      	bne.n	801eb10 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801eb04:	7015      	strb	r5, [r2, #0]
 801eb06:	784b      	ldrb	r3, [r1, #1]
 801eb08:	7053      	strb	r3, [r2, #1]
 801eb0a:	788b      	ldrb	r3, [r1, #2]
 801eb0c:	7093      	strb	r3, [r2, #2]
 801eb0e:	bd30      	pop	{r4, r5, pc}
 801eb10:	fb10 f003 	smulbb	r0, r0, r3
 801eb14:	b283      	uxth	r3, r0
 801eb16:	1c58      	adds	r0, r3, #1
 801eb18:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801eb1c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801eb20:	b284      	uxth	r4, r0
 801eb22:	43c0      	mvns	r0, r0
 801eb24:	fb15 f504 	smulbb	r5, r5, r4
 801eb28:	b2c3      	uxtb	r3, r0
 801eb2a:	7810      	ldrb	r0, [r2, #0]
 801eb2c:	fb00 5003 	mla	r0, r0, r3, r5
 801eb30:	b280      	uxth	r0, r0
 801eb32:	1c45      	adds	r5, r0, #1
 801eb34:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801eb38:	7855      	ldrb	r5, [r2, #1]
 801eb3a:	fb15 f503 	smulbb	r5, r5, r3
 801eb3e:	1200      	asrs	r0, r0, #8
 801eb40:	7010      	strb	r0, [r2, #0]
 801eb42:	7848      	ldrb	r0, [r1, #1]
 801eb44:	fb00 5004 	mla	r0, r0, r4, r5
 801eb48:	b280      	uxth	r0, r0
 801eb4a:	1c45      	adds	r5, r0, #1
 801eb4c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801eb50:	1200      	asrs	r0, r0, #8
 801eb52:	7050      	strb	r0, [r2, #1]
 801eb54:	7888      	ldrb	r0, [r1, #2]
 801eb56:	7891      	ldrb	r1, [r2, #2]
 801eb58:	fb11 f303 	smulbb	r3, r1, r3
 801eb5c:	fb00 3304 	mla	r3, r0, r4, r3
 801eb60:	b29b      	uxth	r3, r3
 801eb62:	1c59      	adds	r1, r3, #1
 801eb64:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801eb68:	121b      	asrs	r3, r3, #8
 801eb6a:	e7cf      	b.n	801eb0c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

0801eb6c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801eb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb70:	461d      	mov	r5, r3
 801eb72:	b08f      	sub	sp, #60	@ 0x3c
 801eb74:	460c      	mov	r4, r1
 801eb76:	4616      	mov	r6, r2
 801eb78:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801eb7a:	4680      	mov	r8, r0
 801eb7c:	6869      	ldr	r1, [r5, #4]
 801eb7e:	aa0a      	add	r2, sp, #40	@ 0x28
 801eb80:	6828      	ldr	r0, [r5, #0]
 801eb82:	3604      	adds	r6, #4
 801eb84:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 801eb88:	4f57      	ldr	r7, [pc, #348]	@ (801ece8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 801eb8a:	c203      	stmia	r2!, {r0, r1}
 801eb8c:	6818      	ldr	r0, [r3, #0]
 801eb8e:	aa0c      	add	r2, sp, #48	@ 0x30
 801eb90:	6859      	ldr	r1, [r3, #4]
 801eb92:	c203      	stmia	r2!, {r0, r1}
 801eb94:	a80a      	add	r0, sp, #40	@ 0x28
 801eb96:	f7f3 fd09 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801eb9a:	4629      	mov	r1, r5
 801eb9c:	a80c      	add	r0, sp, #48	@ 0x30
 801eb9e:	2502      	movs	r5, #2
 801eba0:	f7f3 fd2c 	bl	80125fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801eba4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801eba8:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 801ebac:	f002 0301 	and.w	r3, r2, #1
 801ebb0:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 801ebb4:	9304      	str	r3, [sp, #16]
 801ebb6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801ebba:	f003 0101 	and.w	r1, r3, #1
 801ebbe:	9103      	str	r1, [sp, #12]
 801ebc0:	9803      	ldr	r0, [sp, #12]
 801ebc2:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801ebc6:	4403      	add	r3, r0
 801ebc8:	6838      	ldr	r0, [r7, #0]
 801ebca:	fb01 2303 	mla	r3, r1, r3, r2
 801ebce:	fb93 f3f5 	sdiv	r3, r3, r5
 801ebd2:	18e5      	adds	r5, r4, r3
 801ebd4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801ebd8:	441a      	add	r2, r3
 801ebda:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801ebde:	4419      	add	r1, r3
 801ebe0:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801ebe4:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 801ebe8:	6803      	ldr	r3, [r0, #0]
 801ebea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ebec:	4798      	blx	r3
 801ebee:	4a3f      	ldr	r2, [pc, #252]	@ (801ecec <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 801ebf0:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 801ebf4:	8813      	ldrh	r3, [r2, #0]
 801ebf6:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801ebfa:	9207      	str	r2, [sp, #28]
 801ebfc:	fb03 1404 	mla	r4, r3, r4, r1
 801ec00:	fb0a f303 	mul.w	r3, sl, r3
 801ec04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ec08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec0c:	4404      	add	r4, r0
 801ec0e:	18e3      	adds	r3, r4, r3
 801ec10:	e9cd 3705 	strd	r3, r7, [sp, #20]
 801ec14:	9b05      	ldr	r3, [sp, #20]
 801ec16:	429c      	cmp	r4, r3
 801ec18:	d25d      	bcs.n	801ecd6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 801ec1a:	9b04      	ldr	r3, [sp, #16]
 801ec1c:	2b00      	cmp	r3, #0
 801ec1e:	d037      	beq.n	801ec90 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 801ec20:	782b      	ldrb	r3, [r5, #0]
 801ec22:	1c6f      	adds	r7, r5, #1
 801ec24:	f003 030f 	and.w	r3, r3, #15
 801ec28:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ec2c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec2e:	0e1b      	lsrs	r3, r3, #24
 801ec30:	d006      	beq.n	801ec40 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 801ec32:	9300      	str	r3, [sp, #0]
 801ec34:	4622      	mov	r2, r4
 801ec36:	464b      	mov	r3, r9
 801ec38:	a909      	add	r1, sp, #36	@ 0x24
 801ec3a:	4640      	mov	r0, r8
 801ec3c:	f7ff ff5a 	bl	801eaf4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801ec40:	3403      	adds	r4, #3
 801ec42:	f10b 3aff 	add.w	sl, fp, #4294967295
 801ec46:	f1ba 0f01 	cmp.w	sl, #1
 801ec4a:	dd24      	ble.n	801ec96 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 801ec4c:	783b      	ldrb	r3, [r7, #0]
 801ec4e:	091b      	lsrs	r3, r3, #4
 801ec50:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ec54:	9308      	str	r3, [sp, #32]
 801ec56:	0e1b      	lsrs	r3, r3, #24
 801ec58:	d006      	beq.n	801ec68 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 801ec5a:	9300      	str	r3, [sp, #0]
 801ec5c:	4622      	mov	r2, r4
 801ec5e:	464b      	mov	r3, r9
 801ec60:	a908      	add	r1, sp, #32
 801ec62:	4640      	mov	r0, r8
 801ec64:	f7ff ff46 	bl	801eaf4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801ec68:	f817 3b01 	ldrb.w	r3, [r7], #1
 801ec6c:	f003 030f 	and.w	r3, r3, #15
 801ec70:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ec74:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec76:	0e1b      	lsrs	r3, r3, #24
 801ec78:	d006      	beq.n	801ec88 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 801ec7a:	9300      	str	r3, [sp, #0]
 801ec7c:	1ce2      	adds	r2, r4, #3
 801ec7e:	464b      	mov	r3, r9
 801ec80:	a909      	add	r1, sp, #36	@ 0x24
 801ec82:	4640      	mov	r0, r8
 801ec84:	f7ff ff36 	bl	801eaf4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801ec88:	3406      	adds	r4, #6
 801ec8a:	f1aa 0a02 	sub.w	sl, sl, #2
 801ec8e:	e7da      	b.n	801ec46 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801ec90:	462f      	mov	r7, r5
 801ec92:	46da      	mov	sl, fp
 801ec94:	e7d7      	b.n	801ec46 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801ec96:	d10e      	bne.n	801ecb6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 801ec98:	783b      	ldrb	r3, [r7, #0]
 801ec9a:	091b      	lsrs	r3, r3, #4
 801ec9c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801eca0:	9309      	str	r3, [sp, #36]	@ 0x24
 801eca2:	0e1b      	lsrs	r3, r3, #24
 801eca4:	d006      	beq.n	801ecb4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 801eca6:	9300      	str	r3, [sp, #0]
 801eca8:	4622      	mov	r2, r4
 801ecaa:	464b      	mov	r3, r9
 801ecac:	a909      	add	r1, sp, #36	@ 0x24
 801ecae:	4640      	mov	r0, r8
 801ecb0:	f7ff ff20 	bl	801eaf4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801ecb4:	3403      	adds	r4, #3
 801ecb6:	9b07      	ldr	r3, [sp, #28]
 801ecb8:	9a03      	ldr	r2, [sp, #12]
 801ecba:	881b      	ldrh	r3, [r3, #0]
 801ecbc:	eba3 030b 	sub.w	r3, r3, fp
 801ecc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ecc4:	441c      	add	r4, r3
 801ecc6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801ecca:	4413      	add	r3, r2
 801eccc:	2202      	movs	r2, #2
 801ecce:	fb93 f3f2 	sdiv	r3, r3, r2
 801ecd2:	441d      	add	r5, r3
 801ecd4:	e79e      	b.n	801ec14 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 801ecd6:	9b06      	ldr	r3, [sp, #24]
 801ecd8:	6818      	ldr	r0, [r3, #0]
 801ecda:	6803      	ldr	r3, [r0, #0]
 801ecdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ecde:	4798      	blx	r3
 801ece0:	b00f      	add	sp, #60	@ 0x3c
 801ece2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ece6:	bf00      	nop
 801ece8:	24025158 	.word	0x24025158
 801ecec:	24025152 	.word	0x24025152

0801ecf0 <CRC_Lock>:
 801ecf0:	4a2d      	ldr	r2, [pc, #180]	@ (801eda8 <CRC_Lock+0xb8>)
 801ecf2:	b530      	push	{r4, r5, lr}
 801ecf4:	6813      	ldr	r3, [r2, #0]
 801ecf6:	f24c 2540 	movw	r5, #49728	@ 0xc240
 801ecfa:	f023 0301 	bic.w	r3, r3, #1
 801ecfe:	6013      	str	r3, [r2, #0]
 801ed00:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 801ed04:	4b29      	ldr	r3, [pc, #164]	@ (801edac <CRC_Lock+0xbc>)
 801ed06:	681c      	ldr	r4, [r3, #0]
 801ed08:	4014      	ands	r4, r2
 801ed0a:	42ac      	cmp	r4, r5
 801ed0c:	d005      	beq.n	801ed1a <CRC_Lock+0x2a>
 801ed0e:	681c      	ldr	r4, [r3, #0]
 801ed10:	f24c 2570 	movw	r5, #49776	@ 0xc270
 801ed14:	4014      	ands	r4, r2
 801ed16:	42ac      	cmp	r4, r5
 801ed18:	d125      	bne.n	801ed66 <CRC_Lock+0x76>
 801ed1a:	4b25      	ldr	r3, [pc, #148]	@ (801edb0 <CRC_Lock+0xc0>)
 801ed1c:	681b      	ldr	r3, [r3, #0]
 801ed1e:	2b00      	cmp	r3, #0
 801ed20:	d139      	bne.n	801ed96 <CRC_Lock+0xa6>
 801ed22:	4b24      	ldr	r3, [pc, #144]	@ (801edb4 <CRC_Lock+0xc4>)
 801ed24:	681a      	ldr	r2, [r3, #0]
 801ed26:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801ed2a:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 801ed2e:	d00d      	beq.n	801ed4c <CRC_Lock+0x5c>
 801ed30:	681a      	ldr	r2, [r3, #0]
 801ed32:	f240 4483 	movw	r4, #1155	@ 0x483
 801ed36:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801ed3a:	42a2      	cmp	r2, r4
 801ed3c:	d006      	beq.n	801ed4c <CRC_Lock+0x5c>
 801ed3e:	681b      	ldr	r3, [r3, #0]
 801ed40:	f240 4285 	movw	r2, #1157	@ 0x485
 801ed44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ed48:	4293      	cmp	r3, r2
 801ed4a:	d124      	bne.n	801ed96 <CRC_Lock+0xa6>
 801ed4c:	4b1a      	ldr	r3, [pc, #104]	@ (801edb8 <CRC_Lock+0xc8>)
 801ed4e:	2201      	movs	r2, #1
 801ed50:	601a      	str	r2, [r3, #0]
 801ed52:	681a      	ldr	r2, [r3, #0]
 801ed54:	2a00      	cmp	r2, #0
 801ed56:	d1fc      	bne.n	801ed52 <CRC_Lock+0x62>
 801ed58:	4b18      	ldr	r3, [pc, #96]	@ (801edbc <CRC_Lock+0xcc>)
 801ed5a:	6018      	str	r0, [r3, #0]
 801ed5c:	6818      	ldr	r0, [r3, #0]
 801ed5e:	1a43      	subs	r3, r0, r1
 801ed60:	4258      	negs	r0, r3
 801ed62:	4158      	adcs	r0, r3
 801ed64:	e00e      	b.n	801ed84 <CRC_Lock+0x94>
 801ed66:	681b      	ldr	r3, [r3, #0]
 801ed68:	4013      	ands	r3, r2
 801ed6a:	f24d 2220 	movw	r2, #53792	@ 0xd220
 801ed6e:	4293      	cmp	r3, r2
 801ed70:	d111      	bne.n	801ed96 <CRC_Lock+0xa6>
 801ed72:	4b13      	ldr	r3, [pc, #76]	@ (801edc0 <CRC_Lock+0xd0>)
 801ed74:	f240 4286 	movw	r2, #1158	@ 0x486
 801ed78:	681b      	ldr	r3, [r3, #0]
 801ed7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ed7e:	4293      	cmp	r3, r2
 801ed80:	d001      	beq.n	801ed86 <CRC_Lock+0x96>
 801ed82:	2000      	movs	r0, #0
 801ed84:	bd30      	pop	{r4, r5, pc}
 801ed86:	4b0f      	ldr	r3, [pc, #60]	@ (801edc4 <CRC_Lock+0xd4>)
 801ed88:	2201      	movs	r2, #1
 801ed8a:	601a      	str	r2, [r3, #0]
 801ed8c:	681a      	ldr	r2, [r3, #0]
 801ed8e:	2a00      	cmp	r2, #0
 801ed90:	d1fc      	bne.n	801ed8c <CRC_Lock+0x9c>
 801ed92:	4b0d      	ldr	r3, [pc, #52]	@ (801edc8 <CRC_Lock+0xd8>)
 801ed94:	e7e1      	b.n	801ed5a <CRC_Lock+0x6a>
 801ed96:	4b0d      	ldr	r3, [pc, #52]	@ (801edcc <CRC_Lock+0xdc>)
 801ed98:	2201      	movs	r2, #1
 801ed9a:	601a      	str	r2, [r3, #0]
 801ed9c:	681a      	ldr	r2, [r3, #0]
 801ed9e:	2a00      	cmp	r2, #0
 801eda0:	d1fc      	bne.n	801ed9c <CRC_Lock+0xac>
 801eda2:	4b0b      	ldr	r3, [pc, #44]	@ (801edd0 <CRC_Lock+0xe0>)
 801eda4:	e7d9      	b.n	801ed5a <CRC_Lock+0x6a>
 801eda6:	bf00      	nop
 801eda8:	e0002000 	.word	0xe0002000
 801edac:	e000ed00 	.word	0xe000ed00
 801edb0:	e0042000 	.word	0xe0042000
 801edb4:	5c001000 	.word	0x5c001000
 801edb8:	58024c08 	.word	0x58024c08
 801edbc:	58024c00 	.word	0x58024c00
 801edc0:	46008ff0 	.word	0x46008ff0
 801edc4:	46024c08 	.word	0x46024c08
 801edc8:	46024c00 	.word	0x46024c00
 801edcc:	40023008 	.word	0x40023008
 801edd0:	40023000 	.word	0x40023000

0801edd4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801edd4:	6101      	str	r1, [r0, #16]
 801edd6:	4770      	bx	lr

0801edd8 <_ZN8touchgfx8Gestures4tickEv>:
 801edd8:	7b83      	ldrb	r3, [r0, #14]
 801edda:	b14b      	cbz	r3, 801edf0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801eddc:	8903      	ldrh	r3, [r0, #8]
 801edde:	3301      	adds	r3, #1
 801ede0:	b29b      	uxth	r3, r3
 801ede2:	2b07      	cmp	r3, #7
 801ede4:	8103      	strh	r3, [r0, #8]
 801ede6:	bf81      	itttt	hi
 801ede8:	2300      	movhi	r3, #0
 801edea:	8143      	strhhi	r3, [r0, #10]
 801edec:	8183      	strhhi	r3, [r0, #12]
 801edee:	7383      	strbhi	r3, [r0, #14]
 801edf0:	4770      	bx	lr
	...

0801edf4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801edf4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801edf8:	4698      	mov	r8, r3
 801edfa:	8883      	ldrh	r3, [r0, #4]
 801edfc:	4604      	mov	r4, r0
 801edfe:	4617      	mov	r7, r2
 801ee00:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ee04:	eba8 0303 	sub.w	r3, r8, r3
 801ee08:	4a19      	ldr	r2, [pc, #100]	@ (801ee70 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801ee0a:	460e      	mov	r6, r1
 801ee0c:	b21b      	sxth	r3, r3
 801ee0e:	88c1      	ldrh	r1, [r0, #6]
 801ee10:	9200      	str	r2, [sp, #0]
 801ee12:	2000      	movs	r0, #0
 801ee14:	2b00      	cmp	r3, #0
 801ee16:	8aa2      	ldrh	r2, [r4, #20]
 801ee18:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 801ee1c:	bfb8      	it	lt
 801ee1e:	425b      	neglt	r3, r3
 801ee20:	f88d 0004 	strb.w	r0, [sp, #4]
 801ee24:	f8ad 1008 	strh.w	r1, [sp, #8]
 801ee28:	b21b      	sxth	r3, r3
 801ee2a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801ee2e:	f8ad 500c 	strh.w	r5, [sp, #12]
 801ee32:	4293      	cmp	r3, r2
 801ee34:	dc07      	bgt.n	801ee46 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801ee36:	1a69      	subs	r1, r5, r1
 801ee38:	b209      	sxth	r1, r1
 801ee3a:	2900      	cmp	r1, #0
 801ee3c:	bfb8      	it	lt
 801ee3e:	4249      	neglt	r1, r1
 801ee40:	b209      	sxth	r1, r1
 801ee42:	428a      	cmp	r2, r1
 801ee44:	da10      	bge.n	801ee68 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801ee46:	6920      	ldr	r0, [r4, #16]
 801ee48:	4669      	mov	r1, sp
 801ee4a:	eba8 0606 	sub.w	r6, r8, r6
 801ee4e:	1bef      	subs	r7, r5, r7
 801ee50:	6803      	ldr	r3, [r0, #0]
 801ee52:	685b      	ldr	r3, [r3, #4]
 801ee54:	4798      	blx	r3
 801ee56:	2300      	movs	r3, #0
 801ee58:	2001      	movs	r0, #1
 801ee5a:	8166      	strh	r6, [r4, #10]
 801ee5c:	8123      	strh	r3, [r4, #8]
 801ee5e:	81a7      	strh	r7, [r4, #12]
 801ee60:	f8a4 8004 	strh.w	r8, [r4, #4]
 801ee64:	80e5      	strh	r5, [r4, #6]
 801ee66:	73a0      	strb	r0, [r4, #14]
 801ee68:	b004      	add	sp, #16
 801ee6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee6e:	bf00      	nop
 801ee70:	08023e68 	.word	0x08023e68

0801ee74 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801ee74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ee76:	461e      	mov	r6, r3
 801ee78:	1e4b      	subs	r3, r1, #1
 801ee7a:	b085      	sub	sp, #20
 801ee7c:	4604      	mov	r4, r0
 801ee7e:	2b01      	cmp	r3, #1
 801ee80:	460d      	mov	r5, r1
 801ee82:	4617      	mov	r7, r2
 801ee84:	d84b      	bhi.n	801ef1e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801ee86:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801ee8a:	1cd3      	adds	r3, r2, #3
 801ee8c:	b29b      	uxth	r3, r3
 801ee8e:	2b06      	cmp	r3, #6
 801ee90:	d916      	bls.n	801eec0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801ee92:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 801ef34 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801ee96:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ee9a:	f8cd c004 	str.w	ip, [sp, #4]
 801ee9e:	f04f 0c00 	mov.w	ip, #0
 801eea2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801eea6:	6900      	ldr	r0, [r0, #16]
 801eea8:	f8ad 100c 	strh.w	r1, [sp, #12]
 801eeac:	a901      	add	r1, sp, #4
 801eeae:	f88d c008 	strb.w	ip, [sp, #8]
 801eeb2:	f8ad 200a 	strh.w	r2, [sp, #10]
 801eeb6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801eeba:	6803      	ldr	r3, [r0, #0]
 801eebc:	689b      	ldr	r3, [r3, #8]
 801eebe:	4798      	blx	r3
 801eec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801eec4:	1cd3      	adds	r3, r2, #3
 801eec6:	b29b      	uxth	r3, r3
 801eec8:	2b06      	cmp	r3, #6
 801eeca:	d916      	bls.n	801eefa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801eecc:	f8df c064 	ldr.w	ip, [pc, #100]	@ 801ef34 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801eed0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801eed4:	f8cd c004 	str.w	ip, [sp, #4]
 801eed8:	f04f 0c01 	mov.w	ip, #1
 801eedc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801eee0:	6920      	ldr	r0, [r4, #16]
 801eee2:	f8ad 100c 	strh.w	r1, [sp, #12]
 801eee6:	a901      	add	r1, sp, #4
 801eee8:	f88d c008 	strb.w	ip, [sp, #8]
 801eeec:	f8ad 200a 	strh.w	r2, [sp, #10]
 801eef0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801eef4:	6803      	ldr	r3, [r0, #0]
 801eef6:	689b      	ldr	r3, [r3, #8]
 801eef8:	4798      	blx	r3
 801eefa:	4b0d      	ldr	r3, [pc, #52]	@ (801ef30 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801eefc:	a901      	add	r1, sp, #4
 801eefe:	6920      	ldr	r0, [r4, #16]
 801ef00:	9301      	str	r3, [sp, #4]
 801ef02:	2300      	movs	r3, #0
 801ef04:	f88d 5008 	strb.w	r5, [sp, #8]
 801ef08:	f8ad 700a 	strh.w	r7, [sp, #10]
 801ef0c:	f8ad 600c 	strh.w	r6, [sp, #12]
 801ef10:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ef14:	6803      	ldr	r3, [r0, #0]
 801ef16:	681b      	ldr	r3, [r3, #0]
 801ef18:	4798      	blx	r3
 801ef1a:	b005      	add	sp, #20
 801ef1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef1e:	2900      	cmp	r1, #0
 801ef20:	d1eb      	bne.n	801eefa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801ef22:	80a2      	strh	r2, [r4, #4]
 801ef24:	80c6      	strh	r6, [r0, #6]
 801ef26:	60a1      	str	r1, [r4, #8]
 801ef28:	81a1      	strh	r1, [r4, #12]
 801ef2a:	73a1      	strb	r1, [r4, #14]
 801ef2c:	e7e5      	b.n	801eefa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801ef2e:	bf00      	nop
 801ef30:	08023e54 	.word	0x08023e54
 801ef34:	08023e7c 	.word	0x08023e7c

0801ef38 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 801ef38:	10c9      	asrs	r1, r1, #3
 801ef3a:	2900      	cmp	r1, #0
 801ef3c:	bfb8      	it	lt
 801ef3e:	4249      	neglt	r1, r1
 801ef40:	2801      	cmp	r0, #1
 801ef42:	d108      	bne.n	801ef56 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 801ef44:	f3c1 0008 	ubfx	r0, r1, #0, #9
 801ef48:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 801ef4c:	4601      	mov	r1, r0
 801ef4e:	dd02      	ble.n	801ef56 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 801ef50:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 801ef54:	4770      	bx	lr
 801ef56:	29ff      	cmp	r1, #255	@ 0xff
 801ef58:	bfa8      	it	ge
 801ef5a:	21ff      	movge	r1, #255	@ 0xff
 801ef5c:	4608      	mov	r0, r1
 801ef5e:	4770      	bx	lr

0801ef60 <_ZN8touchgfx10Rasterizer6lineToEii>:
 801ef60:	b410      	push	{r4}
 801ef62:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801ef66:	429c      	cmp	r4, r3
 801ef68:	d803      	bhi.n	801ef72 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 801ef6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ef6e:	f7f1 be57 	b.w	8010c20 <_ZN8touchgfx7Outline6lineToEii>
 801ef72:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ef76:	4770      	bx	lr

0801ef78 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 801ef78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef7c:	b08b      	sub	sp, #44	@ 0x2c
 801ef7e:	4606      	mov	r6, r0
 801ef80:	468a      	mov	sl, r1
 801ef82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ef86:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801ef8a:	9308      	str	r3, [sp, #32]
 801ef8c:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801ef90:	9309      	str	r3, [sp, #36]	@ 0x24
 801ef92:	f7f1 ffb0 	bl	8010ef6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 801ef96:	68b5      	ldr	r5, [r6, #8]
 801ef98:	4604      	mov	r4, r0
 801ef9a:	2d00      	cmp	r5, #0
 801ef9c:	d044      	beq.n	801f028 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801ef9e:	6873      	ldr	r3, [r6, #4]
 801efa0:	42ab      	cmp	r3, r5
 801efa2:	d33d      	bcc.n	801f020 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 801efa4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801efa8:	f04f 0800 	mov.w	r8, #0
 801efac:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 801efb0:	eb02 0b03 	add.w	fp, r2, r3
 801efb4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801efb8:	fb02 1203 	mla	r2, r2, r3, r1
 801efbc:	9205      	str	r2, [sp, #20]
 801efbe:	1e6a      	subs	r2, r5, #1
 801efc0:	9204      	str	r2, [sp, #16]
 801efc2:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 801efc6:	f9b4 7000 	ldrsh.w	r7, [r4]
 801efca:	454b      	cmp	r3, r9
 801efcc:	463a      	mov	r2, r7
 801efce:	d008      	beq.n	801efe2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 801efd0:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 801efd4:	eb03 0b09 	add.w	fp, r3, r9
 801efd8:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 801efdc:	fb03 1309 	mla	r3, r3, r9, r1
 801efe0:	9305      	str	r3, [sp, #20]
 801efe2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801efe6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801efea:	4498      	add	r8, r3
 801efec:	9b04      	ldr	r3, [sp, #16]
 801efee:	3b01      	subs	r3, #1
 801eff0:	9304      	str	r3, [sp, #16]
 801eff2:	9b04      	ldr	r3, [sp, #16]
 801eff4:	3301      	adds	r3, #1
 801eff6:	d015      	beq.n	801f024 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 801eff8:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 801effc:	42bb      	cmp	r3, r7
 801effe:	d117      	bne.n	801f030 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 801f000:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801f004:	9b04      	ldr	r3, [sp, #16]
 801f006:	4548      	cmp	r0, r9
 801f008:	f103 33ff 	add.w	r3, r3, #4294967295
 801f00c:	d17d      	bne.n	801f10a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 801f00e:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 801f012:	4401      	add	r1, r0
 801f014:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f018:	4480      	add	r8, r0
 801f01a:	e7e9      	b.n	801eff0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 801f01c:	461f      	mov	r7, r3
 801f01e:	e042      	b.n	801f0a6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 801f020:	2000      	movs	r0, #0
 801f022:	e002      	b.n	801f02a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 801f024:	2900      	cmp	r1, #0
 801f026:	d16d      	bne.n	801f104 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 801f028:	2001      	movs	r0, #1
 801f02a:	b00b      	add	sp, #44	@ 0x2c
 801f02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f030:	b379      	cbz	r1, 801f092 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 801f032:	2f00      	cmp	r7, #0
 801f034:	db29      	blt.n	801f08a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801f036:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 801f03a:	42bb      	cmp	r3, r7
 801f03c:	dd25      	ble.n	801f08a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801f03e:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 801f042:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 801f046:	f7ff ff77 	bl	801ef38 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 801f04a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f04c:	fb10 f003 	smulbb	r0, r0, r3
 801f050:	b280      	uxth	r0, r0
 801f052:	1c41      	adds	r1, r0, #1
 801f054:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f058:	1209      	asrs	r1, r1, #8
 801f05a:	f011 0fff 	tst.w	r1, #255	@ 0xff
 801f05e:	d014      	beq.n	801f08a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801f060:	b2c9      	uxtb	r1, r1
 801f062:	9808      	ldr	r0, [sp, #32]
 801f064:	b2ba      	uxth	r2, r7
 801f066:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 801f068:	9102      	str	r1, [sp, #8]
 801f06a:	2101      	movs	r1, #1
 801f06c:	4413      	add	r3, r2
 801f06e:	4402      	add	r2, r0
 801f070:	9101      	str	r1, [sp, #4]
 801f072:	fa0f f18b 	sxth.w	r1, fp
 801f076:	f8da 0000 	ldr.w	r0, [sl]
 801f07a:	b21b      	sxth	r3, r3
 801f07c:	9100      	str	r1, [sp, #0]
 801f07e:	b212      	sxth	r2, r2
 801f080:	6941      	ldr	r1, [r0, #20]
 801f082:	4650      	mov	r0, sl
 801f084:	460d      	mov	r5, r1
 801f086:	9905      	ldr	r1, [sp, #20]
 801f088:	47a8      	blx	r5
 801f08a:	9b04      	ldr	r3, [sp, #16]
 801f08c:	1c7a      	adds	r2, r7, #1
 801f08e:	3301      	adds	r3, #1
 801f090:	d0ca      	beq.n	801f028 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801f092:	f9b4 7000 	ldrsh.w	r7, [r4]
 801f096:	1abb      	subs	r3, r7, r2
 801f098:	2b00      	cmp	r3, #0
 801f09a:	dd31      	ble.n	801f100 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f09c:	2a00      	cmp	r2, #0
 801f09e:	dabd      	bge.n	801f01c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 801f0a0:	2f00      	cmp	r7, #0
 801f0a2:	dd2d      	ble.n	801f100 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f0a4:	2200      	movs	r2, #0
 801f0a6:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 801f0aa:	19d1      	adds	r1, r2, r7
 801f0ac:	4299      	cmp	r1, r3
 801f0ae:	db02      	blt.n	801f0b6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 801f0b0:	1a9f      	subs	r7, r3, r2
 801f0b2:	2f00      	cmp	r7, #0
 801f0b4:	dd24      	ble.n	801f100 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f0b6:	ea4f 1188 	mov.w	r1, r8, lsl #6
 801f0ba:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 801f0be:	f7ff ff3b 	bl	801ef38 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 801f0c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f0c4:	fb10 f003 	smulbb	r0, r0, r3
 801f0c8:	b280      	uxth	r0, r0
 801f0ca:	1c41      	adds	r1, r0, #1
 801f0cc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f0d0:	1209      	asrs	r1, r1, #8
 801f0d2:	f011 0fff 	tst.w	r1, #255	@ 0xff
 801f0d6:	d013      	beq.n	801f100 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f0d8:	b292      	uxth	r2, r2
 801f0da:	9808      	ldr	r0, [sp, #32]
 801f0dc:	b2c9      	uxtb	r1, r1
 801f0de:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 801f0e0:	b23f      	sxth	r7, r7
 801f0e2:	4413      	add	r3, r2
 801f0e4:	9102      	str	r1, [sp, #8]
 801f0e6:	4402      	add	r2, r0
 801f0e8:	fa0f f18b 	sxth.w	r1, fp
 801f0ec:	f8da 0000 	ldr.w	r0, [sl]
 801f0f0:	b21b      	sxth	r3, r3
 801f0f2:	9100      	str	r1, [sp, #0]
 801f0f4:	b212      	sxth	r2, r2
 801f0f6:	9701      	str	r7, [sp, #4]
 801f0f8:	9905      	ldr	r1, [sp, #20]
 801f0fa:	6947      	ldr	r7, [r0, #20]
 801f0fc:	4650      	mov	r0, sl
 801f0fe:	47b8      	blx	r7
 801f100:	464b      	mov	r3, r9
 801f102:	e75e      	b.n	801efc2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 801f104:	2f00      	cmp	r7, #0
 801f106:	da96      	bge.n	801f036 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 801f108:	e78e      	b.n	801f028 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801f10a:	2900      	cmp	r1, #0
 801f10c:	d0f8      	beq.n	801f100 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f10e:	e790      	b.n	801f032 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0801f110 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 801f110:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801f114:	461e      	mov	r6, r3
 801f116:	4b36      	ldr	r3, [pc, #216]	@ (801f1f0 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 801f118:	2500      	movs	r5, #0
 801f11a:	f100 0814 	add.w	r8, r0, #20
 801f11e:	4604      	mov	r4, r0
 801f120:	4617      	mov	r7, r2
 801f122:	e9c0 3100 	strd	r3, r1, [r0]
 801f126:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801f12a:	8185      	strh	r5, [r0, #12]
 801f12c:	8103      	strh	r3, [r0, #8]
 801f12e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801f132:	81c5      	strh	r5, [r0, #14]
 801f134:	7283      	strb	r3, [r0, #10]
 801f136:	8205      	strh	r5, [r0, #16]
 801f138:	8245      	strh	r5, [r0, #18]
 801f13a:	4640      	mov	r0, r8
 801f13c:	f7f1 f8b6 	bl	80102ac <_ZN8touchgfx7OutlineC1Ev>
 801f140:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 801f144:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 801f148:	466b      	mov	r3, sp
 801f14a:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 801f14e:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 801f152:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 801f156:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 801f15a:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 801f15e:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 801f162:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 801f166:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 801f16a:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 801f16e:	6830      	ldr	r0, [r6, #0]
 801f170:	6871      	ldr	r1, [r6, #4]
 801f172:	8872      	ldrh	r2, [r6, #2]
 801f174:	8835      	ldrh	r5, [r6, #0]
 801f176:	c303      	stmia	r3!, {r0, r1}
 801f178:	887b      	ldrh	r3, [r7, #2]
 801f17a:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 801f17e:	4413      	add	r3, r2
 801f180:	883a      	ldrh	r2, [r7, #0]
 801f182:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801f186:	442a      	add	r2, r5
 801f188:	81e3      	strh	r3, [r4, #14]
 801f18a:	8220      	strh	r0, [r4, #16]
 801f18c:	4668      	mov	r0, sp
 801f18e:	81a2      	strh	r2, [r4, #12]
 801f190:	8261      	strh	r1, [r4, #18]
 801f192:	4639      	mov	r1, r7
 801f194:	f7f3 fa32 	bl	80125fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f198:	f104 000c 	add.w	r0, r4, #12
 801f19c:	f7f3 fa06 	bl	80125ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f1a0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801f1a4:	f8bd 2000 	ldrh.w	r2, [sp]
 801f1a8:	4640      	mov	r0, r8
 801f1aa:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 801f1ae:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 801f1b2:	f7f1 f85f 	bl	8010274 <_ZN8touchgfx7Outline5resetEv>
 801f1b6:	f9bd 3000 	ldrsh.w	r3, [sp]
 801f1ba:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 801f1be:	4620      	mov	r0, r4
 801f1c0:	015b      	lsls	r3, r3, #5
 801f1c2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801f1c4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801f1c8:	015b      	lsls	r3, r3, #5
 801f1ca:	6523      	str	r3, [r4, #80]	@ 0x50
 801f1cc:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801f1d0:	015b      	lsls	r3, r3, #5
 801f1d2:	6563      	str	r3, [r4, #84]	@ 0x54
 801f1d4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801f1d8:	015b      	lsls	r3, r3, #5
 801f1da:	65a3      	str	r3, [r4, #88]	@ 0x58
 801f1dc:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 801f1e0:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 801f1e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801f1e8:	b002      	add	sp, #8
 801f1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f1ee:	bf00      	nop
 801f1f0:	080240f4 	.word	0x080240f4

0801f1f4 <_ZN8touchgfx6Canvas5closeEv>:
 801f1f4:	b538      	push	{r3, r4, r5, lr}
 801f1f6:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 801f1fa:	4604      	mov	r4, r0
 801f1fc:	b193      	cbz	r3, 801f224 <_ZN8touchgfx6Canvas5closeEv+0x30>
 801f1fe:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 801f202:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 801f206:	4213      	tst	r3, r2
 801f208:	d10c      	bne.n	801f224 <_ZN8touchgfx6Canvas5closeEv+0x30>
 801f20a:	f100 0514 	add.w	r5, r0, #20
 801f20e:	b123      	cbz	r3, 801f21a <_ZN8touchgfx6Canvas5closeEv+0x26>
 801f210:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 801f214:	4628      	mov	r0, r5
 801f216:	f7ff fea3 	bl	801ef60 <_ZN8touchgfx10Rasterizer6lineToEii>
 801f21a:	4628      	mov	r0, r5
 801f21c:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 801f220:	f7ff fe9e 	bl	801ef60 <_ZN8touchgfx10Rasterizer6lineToEii>
 801f224:	2300      	movs	r3, #0
 801f226:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 801f22a:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 801f22e:	4298      	cmp	r0, r3
 801f230:	bf34      	ite	cc
 801f232:	2000      	movcc	r0, #0
 801f234:	2001      	movcs	r0, #1
 801f236:	bd38      	pop	{r3, r4, r5, pc}

0801f238 <_ZN8touchgfx6Canvas6renderEh>:
 801f238:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801f23c:	7a85      	ldrb	r5, [r0, #10]
 801f23e:	4604      	mov	r4, r0
 801f240:	4369      	muls	r1, r5
 801f242:	1c4d      	adds	r5, r1, #1
 801f244:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801f248:	122d      	asrs	r5, r5, #8
 801f24a:	f000 8098 	beq.w	801f37e <_ZN8touchgfx6Canvas6renderEh+0x146>
 801f24e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 801f252:	2b00      	cmp	r3, #0
 801f254:	f000 8093 	beq.w	801f37e <_ZN8touchgfx6Canvas6renderEh+0x146>
 801f258:	f7ff ffcc 	bl	801f1f4 <_ZN8touchgfx6Canvas5closeEv>
 801f25c:	4607      	mov	r7, r0
 801f25e:	2800      	cmp	r0, #0
 801f260:	d045      	beq.n	801f2ee <_ZN8touchgfx6Canvas6renderEh+0xb6>
 801f262:	6860      	ldr	r0, [r4, #4]
 801f264:	4e47      	ldr	r6, [pc, #284]	@ (801f384 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 801f266:	6803      	ldr	r3, [r0, #0]
 801f268:	6837      	ldr	r7, [r6, #0]
 801f26a:	689b      	ldr	r3, [r3, #8]
 801f26c:	4798      	blx	r3
 801f26e:	4601      	mov	r1, r0
 801f270:	4638      	mov	r0, r7
 801f272:	f7ef f961 	bl	800e538 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 801f276:	4607      	mov	r7, r0
 801f278:	f7e4 fc54 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 801f27c:	6803      	ldr	r3, [r0, #0]
 801f27e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f280:	4798      	blx	r3
 801f282:	4680      	mov	r8, r0
 801f284:	f7e4 fc4e 	bl	8003b24 <_ZN8touchgfx3HAL3lcdEv>
 801f288:	6803      	ldr	r3, [r0, #0]
 801f28a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f28c:	4798      	blx	r3
 801f28e:	280b      	cmp	r0, #11
 801f290:	d85a      	bhi.n	801f348 <_ZN8touchgfx6Canvas6renderEh+0x110>
 801f292:	e8df f000 	tbb	[pc, r0]
 801f296:	5b50      	.short	0x5b50
 801f298:	3059066b 	.word	0x3059066b
 801f29c:	64646440 	.word	0x64646440
 801f2a0:	6464      	.short	0x6464
 801f2a2:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801f2a6:	2208      	movs	r2, #8
 801f2a8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f2ac:	fb91 f2f2 	sdiv	r2, r1, r2
 801f2b0:	fb08 2303 	mla	r3, r8, r3, r2
 801f2b4:	441f      	add	r7, r3
 801f2b6:	424b      	negs	r3, r1
 801f2b8:	f001 0107 	and.w	r1, r1, #7
 801f2bc:	f003 0307 	and.w	r3, r3, #7
 801f2c0:	bf58      	it	pl
 801f2c2:	4259      	negpl	r1, r3
 801f2c4:	b2c9      	uxtb	r1, r1
 801f2c6:	b2ed      	uxtb	r5, r5
 801f2c8:	463a      	mov	r2, r7
 801f2ca:	fa0f f388 	sxth.w	r3, r8
 801f2ce:	f104 0014 	add.w	r0, r4, #20
 801f2d2:	e9cd 1500 	strd	r1, r5, [sp]
 801f2d6:	6861      	ldr	r1, [r4, #4]
 801f2d8:	f7ff fe4e 	bl	801ef78 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 801f2dc:	4607      	mov	r7, r0
 801f2de:	6860      	ldr	r0, [r4, #4]
 801f2e0:	6803      	ldr	r3, [r0, #0]
 801f2e2:	691b      	ldr	r3, [r3, #16]
 801f2e4:	4798      	blx	r3
 801f2e6:	6830      	ldr	r0, [r6, #0]
 801f2e8:	6803      	ldr	r3, [r0, #0]
 801f2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f2ec:	4798      	blx	r3
 801f2ee:	4638      	mov	r0, r7
 801f2f0:	b002      	add	sp, #8
 801f2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f2f6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801f2fa:	2204      	movs	r2, #4
 801f2fc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f300:	fb91 f2f2 	sdiv	r2, r1, r2
 801f304:	fb08 2303 	mla	r3, r8, r3, r2
 801f308:	441f      	add	r7, r3
 801f30a:	424b      	negs	r3, r1
 801f30c:	f001 0103 	and.w	r1, r1, #3
 801f310:	f003 0303 	and.w	r3, r3, #3
 801f314:	e7d4      	b.n	801f2c0 <_ZN8touchgfx6Canvas6renderEh+0x88>
 801f316:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801f31a:	2202      	movs	r2, #2
 801f31c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f320:	2900      	cmp	r1, #0
 801f322:	fb91 f2f2 	sdiv	r2, r1, r2
 801f326:	f001 0101 	and.w	r1, r1, #1
 801f32a:	fb08 2303 	mla	r3, r8, r3, r2
 801f32e:	bfb8      	it	lt
 801f330:	4249      	neglt	r1, r1
 801f332:	441f      	add	r7, r3
 801f334:	e7c6      	b.n	801f2c4 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 801f336:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f33a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f33e:	fb08 f303 	mul.w	r3, r8, r3
 801f342:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801f346:	441f      	add	r7, r3
 801f348:	2100      	movs	r1, #0
 801f34a:	e7bc      	b.n	801f2c6 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 801f34c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f350:	2103      	movs	r1, #3
 801f352:	fb08 f203 	mul.w	r2, r8, r3
 801f356:	89a3      	ldrh	r3, [r4, #12]
 801f358:	fb13 2301 	smlabb	r3, r3, r1, r2
 801f35c:	e7f3      	b.n	801f346 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801f35e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f362:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f366:	fb08 2303 	mla	r3, r8, r3, r2
 801f36a:	e7ec      	b.n	801f346 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801f36c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f374:	fb08 f303 	mul.w	r3, r8, r3
 801f378:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801f37c:	e7e3      	b.n	801f346 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801f37e:	2701      	movs	r7, #1
 801f380:	e7b5      	b.n	801f2ee <_ZN8touchgfx6Canvas6renderEh+0xb6>
 801f382:	bf00      	nop
 801f384:	24025158 	.word	0x24025158

0801f388 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 801f388:	4b06      	ldr	r3, [pc, #24]	@ (801f3a4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 801f38a:	b510      	push	{r4, lr}
 801f38c:	781b      	ldrb	r3, [r3, #0]
 801f38e:	2b01      	cmp	r3, #1
 801f390:	d107      	bne.n	801f3a2 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 801f392:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801f396:	680b      	ldr	r3, [r1, #0]
 801f398:	6814      	ldr	r4, [r2, #0]
 801f39a:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 801f39e:	6013      	str	r3, [r2, #0]
 801f3a0:	600c      	str	r4, [r1, #0]
 801f3a2:	bd10      	pop	{r4, pc}
 801f3a4:	24025150 	.word	0x24025150

0801f3a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 801f3a8:	b513      	push	{r0, r1, r4, lr}
 801f3aa:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 801f3ae:	4604      	mov	r4, r0
 801f3b0:	e9cd 2100 	strd	r2, r1, [sp]
 801f3b4:	b9a3      	cbnz	r3, 801f3e0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 801f3b6:	466a      	mov	r2, sp
 801f3b8:	a901      	add	r1, sp, #4
 801f3ba:	4620      	mov	r0, r4
 801f3bc:	f7ff ffe4 	bl	801f388 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801f3c0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801f3c2:	9901      	ldr	r1, [sp, #4]
 801f3c4:	9a00      	ldr	r2, [sp, #0]
 801f3c6:	1ac9      	subs	r1, r1, r3
 801f3c8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801f3ca:	1ad2      	subs	r2, r2, r3
 801f3cc:	9101      	str	r1, [sp, #4]
 801f3ce:	2a00      	cmp	r2, #0
 801f3d0:	9200      	str	r2, [sp, #0]
 801f3d2:	da0b      	bge.n	801f3ec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 801f3d4:	2301      	movs	r3, #1
 801f3d6:	2900      	cmp	r1, #0
 801f3d8:	da0e      	bge.n	801f3f8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 801f3da:	f043 0304 	orr.w	r3, r3, #4
 801f3de:	e013      	b.n	801f408 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 801f3e0:	f7ff ff08 	bl	801f1f4 <_ZN8touchgfx6Canvas5closeEv>
 801f3e4:	2800      	cmp	r0, #0
 801f3e6:	d1e6      	bne.n	801f3b6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 801f3e8:	b002      	add	sp, #8
 801f3ea:	bd10      	pop	{r4, pc}
 801f3ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801f3ee:	429a      	cmp	r2, r3
 801f3f0:	bfac      	ite	ge
 801f3f2:	2302      	movge	r3, #2
 801f3f4:	2300      	movlt	r3, #0
 801f3f6:	e7ee      	b.n	801f3d6 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 801f3f8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 801f3fa:	4281      	cmp	r1, r0
 801f3fc:	bfac      	ite	ge
 801f3fe:	2008      	movge	r0, #8
 801f400:	2000      	movlt	r0, #0
 801f402:	4318      	orrs	r0, r3
 801f404:	b2c3      	uxtb	r3, r0
 801f406:	b158      	cbz	r0, 801f420 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 801f408:	2200      	movs	r2, #0
 801f40a:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 801f40e:	9901      	ldr	r1, [sp, #4]
 801f410:	9a00      	ldr	r2, [sp, #0]
 801f412:	66e1      	str	r1, [r4, #108]	@ 0x6c
 801f414:	6722      	str	r2, [r4, #112]	@ 0x70
 801f416:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 801f41a:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 801f41e:	e7e3      	b.n	801f3e8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 801f420:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 801f424:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 801f428:	4298      	cmp	r0, r3
 801f42a:	d803      	bhi.n	801f434 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 801f42c:	f104 0014 	add.w	r0, r4, #20
 801f430:	f7f1 fc10 	bl	8010c54 <_ZN8touchgfx7Outline6moveToEii>
 801f434:	2301      	movs	r3, #1
 801f436:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 801f43a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 801f43e:	2300      	movs	r3, #0
 801f440:	e7e5      	b.n	801f40e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0801f442 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 801f442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f444:	ab02      	add	r3, sp, #8
 801f446:	4604      	mov	r4, r0
 801f448:	9101      	str	r1, [sp, #4]
 801f44a:	a901      	add	r1, sp, #4
 801f44c:	f843 2d08 	str.w	r2, [r3, #-8]!
 801f450:	461a      	mov	r2, r3
 801f452:	f7ff ff99 	bl	801f388 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801f456:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801f458:	9901      	ldr	r1, [sp, #4]
 801f45a:	9a00      	ldr	r2, [sp, #0]
 801f45c:	1ac9      	subs	r1, r1, r3
 801f45e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801f460:	1ad2      	subs	r2, r2, r3
 801f462:	9101      	str	r1, [sp, #4]
 801f464:	2a00      	cmp	r2, #0
 801f466:	9200      	str	r2, [sp, #0]
 801f468:	db1c      	blt.n	801f4a4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 801f46a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801f46c:	429a      	cmp	r2, r3
 801f46e:	bfac      	ite	ge
 801f470:	2002      	movge	r0, #2
 801f472:	2000      	movlt	r0, #0
 801f474:	2900      	cmp	r1, #0
 801f476:	db17      	blt.n	801f4a8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 801f478:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801f47a:	4299      	cmp	r1, r3
 801f47c:	bfac      	ite	ge
 801f47e:	2308      	movge	r3, #8
 801f480:	2300      	movlt	r3, #0
 801f482:	4303      	orrs	r3, r0
 801f484:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 801f488:	b2dd      	uxtb	r5, r3
 801f48a:	b978      	cbnz	r0, 801f4ac <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 801f48c:	f104 0014 	add.w	r0, r4, #20
 801f490:	f7ff fd66 	bl	801ef60 <_ZN8touchgfx10Rasterizer6lineToEii>
 801f494:	9b01      	ldr	r3, [sp, #4]
 801f496:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 801f49a:	6623      	str	r3, [r4, #96]	@ 0x60
 801f49c:	9b00      	ldr	r3, [sp, #0]
 801f49e:	6663      	str	r3, [r4, #100]	@ 0x64
 801f4a0:	b002      	add	sp, #8
 801f4a2:	bd70      	pop	{r4, r5, r6, pc}
 801f4a4:	2001      	movs	r0, #1
 801f4a6:	e7e5      	b.n	801f474 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 801f4a8:	2304      	movs	r3, #4
 801f4aa:	e7ea      	b.n	801f482 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 801f4ac:	b113      	cbz	r3, 801f4b4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 801f4ae:	ea10 0305 	ands.w	r3, r0, r5
 801f4b2:	d11c      	bne.n	801f4ee <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 801f4b4:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 801f4b8:	f104 0614 	add.w	r6, r4, #20
 801f4bc:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 801f4c0:	b98b      	cbnz	r3, 801f4e6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 801f4c2:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 801f4c6:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 801f4ca:	4298      	cmp	r0, r3
 801f4cc:	d802      	bhi.n	801f4d4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 801f4ce:	4630      	mov	r0, r6
 801f4d0:	f7f1 fbc0 	bl	8010c54 <_ZN8touchgfx7Outline6moveToEii>
 801f4d4:	2301      	movs	r3, #1
 801f4d6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 801f4da:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 801f4de:	4630      	mov	r0, r6
 801f4e0:	e9dd 2100 	ldrd	r2, r1, [sp]
 801f4e4:	e7d4      	b.n	801f490 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 801f4e6:	4630      	mov	r0, r6
 801f4e8:	f7ff fd3a 	bl	801ef60 <_ZN8touchgfx10Rasterizer6lineToEii>
 801f4ec:	e7f7      	b.n	801f4de <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 801f4ee:	461d      	mov	r5, r3
 801f4f0:	e7d0      	b.n	801f494 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0801f4f4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 801f4f4:	b538      	push	{r3, r4, r5, lr}
 801f4f6:	ed2d 8b10 	vpush	{d8-d15}
 801f4fa:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 801f4fe:	4605      	mov	r5, r0
 801f500:	eeb0 ca40 	vmov.f32	s24, s0
 801f504:	460c      	mov	r4, r1
 801f506:	eef0 ca60 	vmov.f32	s25, s1
 801f50a:	ed9f ba57 	vldr	s22, [pc, #348]	@ 801f668 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 801f50e:	eeb0 da41 	vmov.f32	s26, s2
 801f512:	eef0 da61 	vmov.f32	s27, s3
 801f516:	eeb0 ea42 	vmov.f32	s28, s4
 801f51a:	eef0 ea62 	vmov.f32	s29, s5
 801f51e:	eef0 aa6b 	vmov.f32	s21, s23
 801f522:	2c08      	cmp	r4, #8
 801f524:	d86e      	bhi.n	801f604 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 801f526:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 801f52a:	ee7d 7aee 	vsub.f32	s15, s27, s29
 801f52e:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 801f532:	ee3e 7aec 	vsub.f32	s14, s29, s25
 801f536:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 801f53a:	ee3c fa0d 	vadd.f32	s30, s24, s26
 801f53e:	ee7c faad 	vadd.f32	s31, s25, s27
 801f542:	eee6 7a07 	vfma.f32	s15, s12, s14
 801f546:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 801f54a:	ee3d aaae 	vadd.f32	s20, s27, s29
 801f54e:	ee2f fa2b 	vmul.f32	s30, s30, s23
 801f552:	ee6f faab 	vmul.f32	s31, s31, s23
 801f556:	ee69 9aab 	vmul.f32	s19, s19, s23
 801f55a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f55e:	ee2a aa2b 	vmul.f32	s20, s20, s23
 801f562:	ee7f 8a29 	vadd.f32	s17, s30, s19
 801f566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f56a:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 801f56e:	ee68 8aab 	vmul.f32	s17, s17, s23
 801f572:	bf48      	it	mi
 801f574:	eef1 7a67 	vnegmi.f32	s15, s15
 801f578:	ee29 9a2b 	vmul.f32	s18, s18, s23
 801f57c:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 801f580:	eef4 7acb 	vcmpe.f32	s15, s22
 801f584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f588:	dd3f      	ble.n	801f60a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 801f58a:	ee27 7a07 	vmul.f32	s14, s14, s14
 801f58e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f592:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801f596:	ee27 7a06 	vmul.f32	s14, s14, s12
 801f59a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5a2:	d847      	bhi.n	801f634 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 801f5a4:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 801f5a8:	ee3e 0aed 	vsub.f32	s0, s29, s27
 801f5ac:	f000 fa78 	bl	801faa0 <atan2f>
 801f5b0:	eeb0 8a40 	vmov.f32	s16, s0
 801f5b4:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 801f5b8:	ee3d 0aec 	vsub.f32	s0, s27, s25
 801f5bc:	f000 fa70 	bl	801faa0 <atan2f>
 801f5c0:	ee38 0a40 	vsub.f32	s0, s16, s0
 801f5c4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 801f66c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 801f5c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5d0:	bf48      	it	mi
 801f5d2:	eeb1 0a40 	vnegmi.f32	s0, s0
 801f5d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5de:	bfa4      	itt	ge
 801f5e0:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 801f670 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 801f5e4:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 801f5e8:	eddf 7a22 	vldr	s15, [pc, #136]	@ 801f674 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 801f5ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5f4:	d51e      	bpl.n	801f634 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 801f5f6:	eef0 0a49 	vmov.f32	s1, s18
 801f5fa:	4628      	mov	r0, r5
 801f5fc:	eeb0 0a68 	vmov.f32	s0, s17
 801f600:	f7ef fe1a 	bl	800f238 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801f604:	ecbd 8b10 	vpop	{d8-d15}
 801f608:	bd38      	pop	{r3, r4, r5, pc}
 801f60a:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 801f60e:	eeb0 7a68 	vmov.f32	s14, s17
 801f612:	eef0 6a49 	vmov.f32	s13, s18
 801f616:	eea7 7aea 	vfms.f32	s14, s15, s21
 801f61a:	ee7c 7aae 	vadd.f32	s15, s25, s29
 801f61e:	eee7 6aea 	vfms.f32	s13, s15, s21
 801f622:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801f626:	eee7 7a07 	vfma.f32	s15, s14, s14
 801f62a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801f62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f632:	d9e0      	bls.n	801f5f6 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 801f634:	3401      	adds	r4, #1
 801f636:	eef0 0a6c 	vmov.f32	s1, s25
 801f63a:	eeb0 0a4c 	vmov.f32	s0, s24
 801f63e:	4628      	mov	r0, r5
 801f640:	4621      	mov	r1, r4
 801f642:	eef0 2a49 	vmov.f32	s5, s18
 801f646:	eeb0 2a68 	vmov.f32	s4, s17
 801f64a:	eef0 1a6f 	vmov.f32	s3, s31
 801f64e:	eeb0 1a4f 	vmov.f32	s2, s30
 801f652:	f7ff ff4f 	bl	801f4f4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 801f656:	eef0 da4a 	vmov.f32	s27, s20
 801f65a:	eeb0 da69 	vmov.f32	s26, s19
 801f65e:	eef0 ca49 	vmov.f32	s25, s18
 801f662:	eeb0 ca68 	vmov.f32	s24, s17
 801f666:	e75c      	b.n	801f522 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 801f668:	2edbe6ff 	.word	0x2edbe6ff
 801f66c:	40490fdb 	.word	0x40490fdb
 801f670:	40c90fdb 	.word	0x40c90fdb
 801f674:	3dcccccd 	.word	0x3dcccccd

0801f678 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 801f678:	b530      	push	{r4, r5, lr}
 801f67a:	ed2d 8b10 	vpush	{d8-d15}
 801f67e:	eef0 8a40 	vmov.f32	s17, s0
 801f682:	b085      	sub	sp, #20
 801f684:	eef0 9a60 	vmov.f32	s19, s1
 801f688:	4604      	mov	r4, r0
 801f68a:	eef0 fa41 	vmov.f32	s31, s2
 801f68e:	460d      	mov	r5, r1
 801f690:	eeb0 fa61 	vmov.f32	s30, s3
 801f694:	eef0 ba42 	vmov.f32	s23, s4
 801f698:	eeb0 ca62 	vmov.f32	s24, s5
 801f69c:	eef0 aa43 	vmov.f32	s21, s6
 801f6a0:	eeb0 ba63 	vmov.f32	s22, s7
 801f6a4:	2d08      	cmp	r5, #8
 801f6a6:	f200 8113 	bhi.w	801f8d0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 801f6aa:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801f6ae:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 801f6b2:	ee7f 6aab 	vadd.f32	s13, s31, s23
 801f6b6:	ee38 daaf 	vadd.f32	s26, s17, s31
 801f6ba:	ee26 6a27 	vmul.f32	s12, s12, s15
 801f6be:	ee7c ca0b 	vadd.f32	s25, s24, s22
 801f6c2:	ee2d da27 	vmul.f32	s26, s26, s15
 801f6c6:	ed8d 6a01 	vstr	s12, [sp, #4]
 801f6ca:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801f6ce:	ee6c caa7 	vmul.f32	s25, s25, s15
 801f6d2:	eeb0 ea4d 	vmov.f32	s28, s26
 801f6d6:	ee79 da8f 	vadd.f32	s27, s19, s30
 801f6da:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 801f6de:	eea6 eaa7 	vfma.f32	s28, s13, s15
 801f6e2:	ee66 6a27 	vmul.f32	s13, s12, s15
 801f6e6:	ee6d daa7 	vmul.f32	s27, s27, s15
 801f6ea:	edcd 6a03 	vstr	s13, [sp, #12]
 801f6ee:	eef0 6a6c 	vmov.f32	s13, s25
 801f6f2:	eef0 ea6d 	vmov.f32	s29, s27
 801f6f6:	ee2e ea27 	vmul.f32	s28, s28, s15
 801f6fa:	eee7 6a27 	vfma.f32	s13, s14, s15
 801f6fe:	eee7 ea27 	vfma.f32	s29, s14, s15
 801f702:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801f706:	ee6e eaa7 	vmul.f32	s29, s29, s15
 801f70a:	eef0 6a67 	vmov.f32	s13, s15
 801f70e:	ed8d 7a02 	vstr	s14, [sp, #8]
 801f712:	ed9d 7a03 	vldr	s14, [sp, #12]
 801f716:	ee3e 9a07 	vadd.f32	s18, s28, s14
 801f71a:	ed9d 7a02 	vldr	s14, [sp, #8]
 801f71e:	ee3e aa87 	vadd.f32	s20, s29, s14
 801f722:	ee29 9a27 	vmul.f32	s18, s18, s15
 801f726:	ee2a aa27 	vmul.f32	s20, s20, s15
 801f72a:	2d00      	cmp	r5, #0
 801f72c:	f000 810b 	beq.w	801f946 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801f730:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 801f734:	eddf 4a95 	vldr	s9, [pc, #596]	@ 801f98c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 801f738:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 801f73c:	ee7b 7a69 	vsub.f32	s15, s22, s19
 801f740:	ee3f 6aea 	vsub.f32	s12, s31, s21
 801f744:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801f748:	ee3b 5aea 	vsub.f32	s10, s23, s21
 801f74c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f750:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 801f754:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 801f758:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801f75c:	eea5 6a27 	vfma.f32	s12, s10, s15
 801f760:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 801f764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f768:	bf48      	it	mi
 801f76a:	eeb1 7a47 	vnegmi.f32	s14, s14
 801f76e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801f772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f776:	eeb4 7ae4 	vcmpe.f32	s14, s9
 801f77a:	bf48      	it	mi
 801f77c:	eeb1 6a46 	vnegmi.f32	s12, s12
 801f780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f784:	f340 80a8 	ble.w	801f8d8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 801f788:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801f78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f790:	dd5a      	ble.n	801f848 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 801f792:	ee65 5aa5 	vmul.f32	s11, s11, s11
 801f796:	ee37 7a06 	vadd.f32	s14, s14, s12
 801f79a:	eee7 5aa7 	vfma.f32	s11, s15, s15
 801f79e:	ee27 7a07 	vmul.f32	s14, s14, s14
 801f7a2:	ee65 7a85 	vmul.f32	s15, s11, s10
 801f7a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7ae:	f200 80ca 	bhi.w	801f946 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801f7b2:	ee7b 0aef 	vsub.f32	s1, s23, s31
 801f7b6:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 801f7ba:	f000 f971 	bl	801faa0 <atan2f>
 801f7be:	eeb0 8a40 	vmov.f32	s16, s0
 801f7c2:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 801f7c6:	ee3f 0a69 	vsub.f32	s0, s30, s19
 801f7ca:	f000 f969 	bl	801faa0 <atan2f>
 801f7ce:	ee38 fa40 	vsub.f32	s30, s16, s0
 801f7d2:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 801f7d6:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 801f7da:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 801f7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7e2:	bf48      	it	mi
 801f7e4:	eeb1 fa4f 	vnegmi.f32	s30, s30
 801f7e8:	f000 f95a 	bl	801faa0 <atan2f>
 801f7ec:	ee30 0a48 	vsub.f32	s0, s0, s16
 801f7f0:	eddf 7a67 	vldr	s15, [pc, #412]	@ 801f990 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 801f7f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7fc:	eeb4 fae7 	vcmpe.f32	s30, s15
 801f800:	eddf 7a63 	vldr	s15, [pc, #396]	@ 801f990 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 801f804:	bf48      	it	mi
 801f806:	eeb1 0a40 	vnegmi.f32	s0, s0
 801f80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f80e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f812:	eddf 7a60 	vldr	s15, [pc, #384]	@ 801f994 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 801f816:	bfa4      	itt	ge
 801f818:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 801f998 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 801f81c:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 801f820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f824:	bfa4      	itt	ge
 801f826:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 801f998 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 801f82a:	ee37 0a40 	vsubge.f32	s0, s14, s0
 801f82e:	ee3f 0a00 	vadd.f32	s0, s30, s0
 801f832:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f83a:	f140 8084 	bpl.w	801f946 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801f83e:	eef0 0a4a 	vmov.f32	s1, s20
 801f842:	eeb0 0a49 	vmov.f32	s0, s18
 801f846:	e040      	b.n	801f8ca <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 801f848:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f84c:	ee27 7a07 	vmul.f32	s14, s14, s14
 801f850:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801f854:	ee67 7a85 	vmul.f32	s15, s15, s10
 801f858:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f860:	d871      	bhi.n	801f946 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801f862:	ee7b 0aef 	vsub.f32	s1, s23, s31
 801f866:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 801f86a:	f000 f919 	bl	801faa0 <atan2f>
 801f86e:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 801f872:	eeb0 8a40 	vmov.f32	s16, s0
 801f876:	ee3f 0a69 	vsub.f32	s0, s30, s19
 801f87a:	f000 f911 	bl	801faa0 <atan2f>
 801f87e:	ee38 0a40 	vsub.f32	s0, s16, s0
 801f882:	eddf 7a43 	vldr	s15, [pc, #268]	@ 801f990 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 801f886:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f88e:	bf48      	it	mi
 801f890:	eeb1 0a40 	vnegmi.f32	s0, s0
 801f894:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f89c:	bfa4      	itt	ge
 801f89e:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 801f998 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 801f8a2:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 801f8a6:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801f994 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 801f8aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801f8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8b2:	d548      	bpl.n	801f946 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801f8b4:	eef0 0a4f 	vmov.f32	s1, s30
 801f8b8:	4620      	mov	r0, r4
 801f8ba:	eeb0 0a6f 	vmov.f32	s0, s31
 801f8be:	f7ef fcbb 	bl	800f238 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801f8c2:	eef0 0a4c 	vmov.f32	s1, s24
 801f8c6:	eeb0 0a6b 	vmov.f32	s0, s23
 801f8ca:	4620      	mov	r0, r4
 801f8cc:	f7ef fcb4 	bl	800f238 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801f8d0:	b005      	add	sp, #20
 801f8d2:	ecbd 8b10 	vpop	{d8-d15}
 801f8d6:	bd30      	pop	{r4, r5, pc}
 801f8d8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 801f98c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 801f8dc:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801f8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8e4:	dd19      	ble.n	801f91a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 801f8e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f8ea:	ee26 7a06 	vmul.f32	s14, s12, s12
 801f8ee:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801f8f2:	ee67 7a85 	vmul.f32	s15, s15, s10
 801f8f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801f8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8fe:	d822      	bhi.n	801f946 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801f900:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 801f904:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 801f908:	f000 f8ca 	bl	801faa0 <atan2f>
 801f90c:	ee7b 0aef 	vsub.f32	s1, s23, s31
 801f910:	eeb0 8a40 	vmov.f32	s16, s0
 801f914:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 801f918:	e7af      	b.n	801f87a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 801f91a:	ee78 7aaa 	vadd.f32	s15, s17, s21
 801f91e:	eeb0 7a49 	vmov.f32	s14, s18
 801f922:	eeb0 6a4a 	vmov.f32	s12, s20
 801f926:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801f92a:	ee79 7a8b 	vadd.f32	s15, s19, s22
 801f92e:	eea7 6ae6 	vfms.f32	s12, s15, s13
 801f932:	ee66 7a06 	vmul.f32	s15, s12, s12
 801f936:	eee7 7a07 	vfma.f32	s15, s14, s14
 801f93a:	eef4 7ac5 	vcmpe.f32	s15, s10
 801f93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f942:	f67f af7c 	bls.w	801f83e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 801f946:	3501      	adds	r5, #1
 801f948:	eef0 0a69 	vmov.f32	s1, s19
 801f94c:	eeb0 0a68 	vmov.f32	s0, s17
 801f950:	4620      	mov	r0, r4
 801f952:	4629      	mov	r1, r5
 801f954:	eef0 3a4a 	vmov.f32	s7, s20
 801f958:	eeb0 3a49 	vmov.f32	s6, s18
 801f95c:	eef0 2a6e 	vmov.f32	s5, s29
 801f960:	eeb0 2a4e 	vmov.f32	s4, s28
 801f964:	eef0 1a6d 	vmov.f32	s3, s27
 801f968:	eeb0 1a4d 	vmov.f32	s2, s26
 801f96c:	f7ff fe84 	bl	801f678 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 801f970:	eeb0 ca6c 	vmov.f32	s24, s25
 801f974:	eddd ba01 	vldr	s23, [sp, #4]
 801f978:	eef0 9a4a 	vmov.f32	s19, s20
 801f97c:	ed9d fa02 	vldr	s30, [sp, #8]
 801f980:	eef0 8a49 	vmov.f32	s17, s18
 801f984:	eddd fa03 	vldr	s31, [sp, #12]
 801f988:	e68c      	b.n	801f6a4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 801f98a:	bf00      	nop
 801f98c:	2edbe6ff 	.word	0x2edbe6ff
 801f990:	40490fdb 	.word	0x40490fdb
 801f994:	3dcccccd 	.word	0x3dcccccd
 801f998:	40c90fdb 	.word	0x40c90fdb

0801f99c <_ZN8touchgfx6CanvasD1Ev>:
 801f99c:	4b04      	ldr	r3, [pc, #16]	@ (801f9b0 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 801f99e:	b510      	push	{r4, lr}
 801f9a0:	4604      	mov	r4, r0
 801f9a2:	f840 3b14 	str.w	r3, [r0], #20
 801f9a6:	f7f0 fc5d 	bl	8010264 <_ZN8touchgfx7OutlineD1Ev>
 801f9aa:	4620      	mov	r0, r4
 801f9ac:	bd10      	pop	{r4, pc}
 801f9ae:	bf00      	nop
 801f9b0:	080240f4 	.word	0x080240f4

0801f9b4 <_ZN8touchgfx6CanvasD0Ev>:
 801f9b4:	b510      	push	{r4, lr}
 801f9b6:	4604      	mov	r4, r0
 801f9b8:	f7ff fff0 	bl	801f99c <_ZN8touchgfx6CanvasD1Ev>
 801f9bc:	2174      	movs	r1, #116	@ 0x74
 801f9be:	4620      	mov	r0, r4
 801f9c0:	f000 f826 	bl	801fa10 <_ZdlPvj>
 801f9c4:	4620      	mov	r0, r4
 801f9c6:	bd10      	pop	{r4, pc}

0801f9c8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801f9c8:	790b      	ldrb	r3, [r1, #4]
 801f9ca:	2b00      	cmp	r3, #0
 801f9cc:	bf0c      	ite	eq
 801f9ce:	2301      	moveq	r3, #1
 801f9d0:	2300      	movne	r3, #0
 801f9d2:	b570      	push	{r4, r5, r6, lr}
 801f9d4:	4604      	mov	r4, r0
 801f9d6:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801f9da:	460e      	mov	r6, r1
 801f9dc:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 801f9e0:	d109      	bne.n	801f9f6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801f9e2:	b14d      	cbz	r5, 801f9f8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801f9e4:	7933      	ldrb	r3, [r6, #4]
 801f9e6:	2b01      	cmp	r3, #1
 801f9e8:	d10c      	bne.n	801fa04 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801f9ea:	6823      	ldr	r3, [r4, #0]
 801f9ec:	4620      	mov	r0, r4
 801f9ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801f9f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f9f4:	4718      	bx	r3
 801f9f6:	b12d      	cbz	r5, 801fa04 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801f9f8:	6823      	ldr	r3, [r4, #0]
 801f9fa:	4620      	mov	r0, r4
 801f9fc:	695b      	ldr	r3, [r3, #20]
 801f9fe:	4798      	blx	r3
 801fa00:	2d00      	cmp	r5, #0
 801fa02:	d1ef      	bne.n	801f9e4 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801fa04:	bd70      	pop	{r4, r5, r6, pc}

0801fa06 <__aeabi_atexit>:
 801fa06:	460b      	mov	r3, r1
 801fa08:	4601      	mov	r1, r0
 801fa0a:	4618      	mov	r0, r3
 801fa0c:	f000 bcb8 	b.w	8020380 <__cxa_atexit>

0801fa10 <_ZdlPvj>:
 801fa10:	f000 b829 	b.w	801fa66 <_ZdlPv>

0801fa14 <__cxa_guard_acquire>:
 801fa14:	6802      	ldr	r2, [r0, #0]
 801fa16:	07d2      	lsls	r2, r2, #31
 801fa18:	4603      	mov	r3, r0
 801fa1a:	d405      	bmi.n	801fa28 <__cxa_guard_acquire+0x14>
 801fa1c:	7842      	ldrb	r2, [r0, #1]
 801fa1e:	b102      	cbz	r2, 801fa22 <__cxa_guard_acquire+0xe>
 801fa20:	deff      	udf	#255	@ 0xff
 801fa22:	2001      	movs	r0, #1
 801fa24:	7058      	strb	r0, [r3, #1]
 801fa26:	4770      	bx	lr
 801fa28:	2000      	movs	r0, #0
 801fa2a:	4770      	bx	lr

0801fa2c <__cxa_guard_release>:
 801fa2c:	2301      	movs	r3, #1
 801fa2e:	6003      	str	r3, [r0, #0]
 801fa30:	4770      	bx	lr

0801fa32 <_Znwj>:
 801fa32:	2801      	cmp	r0, #1
 801fa34:	bf38      	it	cc
 801fa36:	2001      	movcc	r0, #1
 801fa38:	b510      	push	{r4, lr}
 801fa3a:	4604      	mov	r4, r0
 801fa3c:	4620      	mov	r0, r4
 801fa3e:	f000 fba3 	bl	8020188 <malloc>
 801fa42:	b100      	cbz	r0, 801fa46 <_Znwj+0x14>
 801fa44:	bd10      	pop	{r4, pc}
 801fa46:	f000 f823 	bl	801fa90 <_ZSt15get_new_handlerv>
 801fa4a:	b908      	cbnz	r0, 801fa50 <_Znwj+0x1e>
 801fa4c:	f000 fb71 	bl	8020132 <abort>
 801fa50:	4780      	blx	r0
 801fa52:	e7f3      	b.n	801fa3c <_Znwj+0xa>

0801fa54 <__cxa_pure_virtual>:
 801fa54:	b508      	push	{r3, lr}
 801fa56:	f000 f815 	bl	801fa84 <_ZSt9terminatev>

0801fa5a <_ZSt17__throw_bad_allocv>:
 801fa5a:	b508      	push	{r3, lr}
 801fa5c:	f000 fb69 	bl	8020132 <abort>

0801fa60 <_ZSt20__throw_length_errorPKc>:
 801fa60:	b508      	push	{r3, lr}
 801fa62:	f000 fb66 	bl	8020132 <abort>

0801fa66 <_ZdlPv>:
 801fa66:	f000 bb97 	b.w	8020198 <free>

0801fa6a <_ZN10__cxxabiv111__terminateEPFvvE>:
 801fa6a:	b508      	push	{r3, lr}
 801fa6c:	4780      	blx	r0
 801fa6e:	f000 fb60 	bl	8020132 <abort>
	...

0801fa74 <_ZSt13get_terminatev>:
 801fa74:	4b02      	ldr	r3, [pc, #8]	@ (801fa80 <_ZSt13get_terminatev+0xc>)
 801fa76:	6818      	ldr	r0, [r3, #0]
 801fa78:	f3bf 8f5b 	dmb	ish
 801fa7c:	4770      	bx	lr
 801fa7e:	bf00      	nop
 801fa80:	240000d8 	.word	0x240000d8

0801fa84 <_ZSt9terminatev>:
 801fa84:	b508      	push	{r3, lr}
 801fa86:	f7ff fff5 	bl	801fa74 <_ZSt13get_terminatev>
 801fa8a:	f7ff ffee 	bl	801fa6a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801fa90 <_ZSt15get_new_handlerv>:
 801fa90:	4b02      	ldr	r3, [pc, #8]	@ (801fa9c <_ZSt15get_new_handlerv+0xc>)
 801fa92:	6818      	ldr	r0, [r3, #0]
 801fa94:	f3bf 8f5b 	dmb	ish
 801fa98:	4770      	bx	lr
 801fa9a:	bf00      	nop
 801fa9c:	24025a8c 	.word	0x24025a8c

0801faa0 <atan2f>:
 801faa0:	f000 b9ce 	b.w	801fe40 <__ieee754_atan2f>

0801faa4 <sqrtf>:
 801faa4:	b508      	push	{r3, lr}
 801faa6:	ed2d 8b02 	vpush	{d8}
 801faaa:	eeb0 8a40 	vmov.f32	s16, s0
 801faae:	f000 f9c4 	bl	801fe3a <__ieee754_sqrtf>
 801fab2:	eeb4 8a48 	vcmp.f32	s16, s16
 801fab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801faba:	d60c      	bvs.n	801fad6 <sqrtf+0x32>
 801fabc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801fadc <sqrtf+0x38>
 801fac0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801fac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fac8:	d505      	bpl.n	801fad6 <sqrtf+0x32>
 801faca:	f000 fee1 	bl	8020890 <__errno>
 801face:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801fad2:	2321      	movs	r3, #33	@ 0x21
 801fad4:	6003      	str	r3, [r0, #0]
 801fad6:	ecbd 8b02 	vpop	{d8}
 801fada:	bd08      	pop	{r3, pc}
 801fadc:	00000000 	.word	0x00000000

0801fae0 <sinf_poly>:
 801fae0:	07cb      	lsls	r3, r1, #31
 801fae2:	d412      	bmi.n	801fb0a <sinf_poly+0x2a>
 801fae4:	ee21 5b00 	vmul.f64	d5, d1, d0
 801fae8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801faec:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801faf0:	eea6 7b01 	vfma.f64	d7, d6, d1
 801faf4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801faf8:	ee21 1b05 	vmul.f64	d1, d1, d5
 801fafc:	eea6 0b05 	vfma.f64	d0, d6, d5
 801fb00:	eea7 0b01 	vfma.f64	d0, d7, d1
 801fb04:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801fb08:	4770      	bx	lr
 801fb0a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801fb0e:	ee21 5b01 	vmul.f64	d5, d1, d1
 801fb12:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801fb16:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801fb1a:	eea1 7b06 	vfma.f64	d7, d1, d6
 801fb1e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801fb22:	eea1 0b06 	vfma.f64	d0, d1, d6
 801fb26:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801fb2a:	ee21 1b05 	vmul.f64	d1, d1, d5
 801fb2e:	eea5 0b06 	vfma.f64	d0, d5, d6
 801fb32:	e7e5      	b.n	801fb00 <sinf_poly+0x20>
 801fb34:	0000      	movs	r0, r0
	...

0801fb38 <sinf>:
 801fb38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801fb3a:	ee10 4a10 	vmov	r4, s0
 801fb3e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801fb42:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801fb46:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801fb4a:	eef0 7a40 	vmov.f32	s15, s0
 801fb4e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801fb52:	d218      	bcs.n	801fb86 <sinf+0x4e>
 801fb54:	ee26 1b06 	vmul.f64	d1, d6, d6
 801fb58:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801fb5c:	d20a      	bcs.n	801fb74 <sinf+0x3c>
 801fb5e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 801fb62:	d103      	bne.n	801fb6c <sinf+0x34>
 801fb64:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801fb68:	ed8d 1a01 	vstr	s2, [sp, #4]
 801fb6c:	eeb0 0a67 	vmov.f32	s0, s15
 801fb70:	b003      	add	sp, #12
 801fb72:	bd30      	pop	{r4, r5, pc}
 801fb74:	483a      	ldr	r0, [pc, #232]	@ (801fc60 <sinf+0x128>)
 801fb76:	eeb0 0b46 	vmov.f64	d0, d6
 801fb7a:	2100      	movs	r1, #0
 801fb7c:	b003      	add	sp, #12
 801fb7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fb82:	f7ff bfad 	b.w	801fae0 <sinf_poly>
 801fb86:	f240 422e 	movw	r2, #1070	@ 0x42e
 801fb8a:	4293      	cmp	r3, r2
 801fb8c:	d824      	bhi.n	801fbd8 <sinf+0xa0>
 801fb8e:	4b34      	ldr	r3, [pc, #208]	@ (801fc60 <sinf+0x128>)
 801fb90:	ed93 7b08 	vldr	d7, [r3, #32]
 801fb94:	ee26 7b07 	vmul.f64	d7, d6, d7
 801fb98:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801fb9c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801fba0:	ee17 1a90 	vmov	r1, s15
 801fba4:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801fba8:	1609      	asrs	r1, r1, #24
 801fbaa:	ee07 1a90 	vmov	s15, r1
 801fbae:	f001 0203 	and.w	r2, r1, #3
 801fbb2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801fbb6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801fbba:	ed92 0b00 	vldr	d0, [r2]
 801fbbe:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 801fbc2:	f011 0f02 	tst.w	r1, #2
 801fbc6:	eea5 6b47 	vfms.f64	d6, d5, d7
 801fbca:	bf08      	it	eq
 801fbcc:	4618      	moveq	r0, r3
 801fbce:	ee26 1b06 	vmul.f64	d1, d6, d6
 801fbd2:	ee20 0b06 	vmul.f64	d0, d0, d6
 801fbd6:	e7d1      	b.n	801fb7c <sinf+0x44>
 801fbd8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801fbdc:	d237      	bcs.n	801fc4e <sinf+0x116>
 801fbde:	4921      	ldr	r1, [pc, #132]	@ (801fc64 <sinf+0x12c>)
 801fbe0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801fbe4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801fbe8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801fbec:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801fbf0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801fbf4:	6a10      	ldr	r0, [r2, #32]
 801fbf6:	6912      	ldr	r2, [r2, #16]
 801fbf8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801fbfc:	40ab      	lsls	r3, r5
 801fbfe:	fba0 5003 	umull	r5, r0, r0, r3
 801fc02:	4359      	muls	r1, r3
 801fc04:	fbe3 0102 	umlal	r0, r1, r3, r2
 801fc08:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801fc0c:	0f9d      	lsrs	r5, r3, #30
 801fc0e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801fc12:	1ac9      	subs	r1, r1, r3
 801fc14:	f7e0 fd42 	bl	800069c <__aeabi_l2d>
 801fc18:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801fc1c:	4b10      	ldr	r3, [pc, #64]	@ (801fc60 <sinf+0x128>)
 801fc1e:	f004 0203 	and.w	r2, r4, #3
 801fc22:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801fc26:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801fc58 <sinf+0x120>
 801fc2a:	ed92 0b00 	vldr	d0, [r2]
 801fc2e:	ec41 0b17 	vmov	d7, r0, r1
 801fc32:	f014 0f02 	tst.w	r4, #2
 801fc36:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fc3a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801fc3e:	4629      	mov	r1, r5
 801fc40:	bf08      	it	eq
 801fc42:	4618      	moveq	r0, r3
 801fc44:	ee27 1b07 	vmul.f64	d1, d7, d7
 801fc48:	ee20 0b07 	vmul.f64	d0, d0, d7
 801fc4c:	e796      	b.n	801fb7c <sinf+0x44>
 801fc4e:	b003      	add	sp, #12
 801fc50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801fc54:	f000 b8e2 	b.w	801fe1c <__math_invalidf>
 801fc58:	54442d18 	.word	0x54442d18
 801fc5c:	3c1921fb 	.word	0x3c1921fb
 801fc60:	08024160 	.word	0x08024160
 801fc64:	08024100 	.word	0x08024100

0801fc68 <sinf_poly>:
 801fc68:	07cb      	lsls	r3, r1, #31
 801fc6a:	d412      	bmi.n	801fc92 <sinf_poly+0x2a>
 801fc6c:	ee21 5b00 	vmul.f64	d5, d1, d0
 801fc70:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 801fc74:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 801fc78:	eea6 7b01 	vfma.f64	d7, d6, d1
 801fc7c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 801fc80:	ee21 1b05 	vmul.f64	d1, d1, d5
 801fc84:	eea6 0b05 	vfma.f64	d0, d6, d5
 801fc88:	eea7 0b01 	vfma.f64	d0, d7, d1
 801fc8c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801fc90:	4770      	bx	lr
 801fc92:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 801fc96:	ee21 5b01 	vmul.f64	d5, d1, d1
 801fc9a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801fc9e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 801fca2:	eea1 7b06 	vfma.f64	d7, d1, d6
 801fca6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801fcaa:	eea1 0b06 	vfma.f64	d0, d1, d6
 801fcae:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801fcb2:	ee21 1b05 	vmul.f64	d1, d1, d5
 801fcb6:	eea5 0b06 	vfma.f64	d0, d5, d6
 801fcba:	e7e5      	b.n	801fc88 <sinf_poly+0x20>
 801fcbc:	0000      	movs	r0, r0
	...

0801fcc0 <cosf>:
 801fcc0:	b538      	push	{r3, r4, r5, lr}
 801fcc2:	ee10 4a10 	vmov	r4, s0
 801fcc6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801fcca:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801fcce:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801fcd2:	d21f      	bcs.n	801fd14 <cosf+0x54>
 801fcd4:	ee27 7b07 	vmul.f64	d7, d7, d7
 801fcd8:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 801fcdc:	f0c0 8082 	bcc.w	801fde4 <cosf+0x124>
 801fce0:	ee27 4b07 	vmul.f64	d4, d7, d7
 801fce4:	4b44      	ldr	r3, [pc, #272]	@ (801fdf8 <cosf+0x138>)
 801fce6:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 801fcea:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 801fcee:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 801fcf2:	eea7 6b05 	vfma.f64	d6, d7, d5
 801fcf6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 801fcfa:	eea7 0b05 	vfma.f64	d0, d7, d5
 801fcfe:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 801fd02:	ee27 7b04 	vmul.f64	d7, d7, d4
 801fd06:	eea4 0b05 	vfma.f64	d0, d4, d5
 801fd0a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801fd0e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801fd12:	bd38      	pop	{r3, r4, r5, pc}
 801fd14:	f240 422e 	movw	r2, #1070	@ 0x42e
 801fd18:	4293      	cmp	r3, r2
 801fd1a:	d829      	bhi.n	801fd70 <cosf+0xb0>
 801fd1c:	4b36      	ldr	r3, [pc, #216]	@ (801fdf8 <cosf+0x138>)
 801fd1e:	ed93 6b08 	vldr	d6, [r3, #32]
 801fd22:	ee27 6b06 	vmul.f64	d6, d7, d6
 801fd26:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801fd2a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801fd2e:	ee16 1a90 	vmov	r1, s13
 801fd32:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801fd36:	1609      	asrs	r1, r1, #24
 801fd38:	ee06 1a90 	vmov	s13, r1
 801fd3c:	f001 0203 	and.w	r2, r1, #3
 801fd40:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801fd44:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801fd48:	ed92 0b00 	vldr	d0, [r2]
 801fd4c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 801fd50:	f011 0f02 	tst.w	r1, #2
 801fd54:	f081 0101 	eor.w	r1, r1, #1
 801fd58:	eea5 7b46 	vfms.f64	d7, d5, d6
 801fd5c:	bf08      	it	eq
 801fd5e:	4618      	moveq	r0, r3
 801fd60:	ee27 1b07 	vmul.f64	d1, d7, d7
 801fd64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fd68:	ee20 0b07 	vmul.f64	d0, d0, d7
 801fd6c:	f7ff bf7c 	b.w	801fc68 <sinf_poly>
 801fd70:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 801fd74:	d232      	bcs.n	801fddc <cosf+0x11c>
 801fd76:	4921      	ldr	r1, [pc, #132]	@ (801fdfc <cosf+0x13c>)
 801fd78:	f3c4 6083 	ubfx	r0, r4, #26, #4
 801fd7c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801fd80:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801fd84:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801fd88:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801fd8c:	6a10      	ldr	r0, [r2, #32]
 801fd8e:	6912      	ldr	r2, [r2, #16]
 801fd90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801fd94:	40ab      	lsls	r3, r5
 801fd96:	fba0 5003 	umull	r5, r0, r0, r3
 801fd9a:	4359      	muls	r1, r3
 801fd9c:	fbe3 0102 	umlal	r0, r1, r3, r2
 801fda0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 801fda4:	0f9d      	lsrs	r5, r3, #30
 801fda6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801fdaa:	1ac9      	subs	r1, r1, r3
 801fdac:	f7e0 fc76 	bl	800069c <__aeabi_l2d>
 801fdb0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801fdb4:	4b10      	ldr	r3, [pc, #64]	@ (801fdf8 <cosf+0x138>)
 801fdb6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 801fdf0 <cosf+0x130>
 801fdba:	ec41 0b17 	vmov	d7, r0, r1
 801fdbe:	f004 0203 	and.w	r2, r4, #3
 801fdc2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801fdc6:	ed92 0b00 	vldr	d0, [r2]
 801fdca:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fdce:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801fdd2:	f014 0f02 	tst.w	r4, #2
 801fdd6:	f085 0101 	eor.w	r1, r5, #1
 801fdda:	e7bf      	b.n	801fd5c <cosf+0x9c>
 801fddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fde0:	f000 b81c 	b.w	801fe1c <__math_invalidf>
 801fde4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801fde8:	e793      	b.n	801fd12 <cosf+0x52>
 801fdea:	bf00      	nop
 801fdec:	f3af 8000 	nop.w
 801fdf0:	54442d18 	.word	0x54442d18
 801fdf4:	3c1921fb 	.word	0x3c1921fb
 801fdf8:	08024160 	.word	0x08024160
 801fdfc:	08024100 	.word	0x08024100

0801fe00 <with_errnof>:
 801fe00:	b510      	push	{r4, lr}
 801fe02:	ed2d 8b02 	vpush	{d8}
 801fe06:	eeb0 8a40 	vmov.f32	s16, s0
 801fe0a:	4604      	mov	r4, r0
 801fe0c:	f000 fd40 	bl	8020890 <__errno>
 801fe10:	eeb0 0a48 	vmov.f32	s0, s16
 801fe14:	ecbd 8b02 	vpop	{d8}
 801fe18:	6004      	str	r4, [r0, #0]
 801fe1a:	bd10      	pop	{r4, pc}

0801fe1c <__math_invalidf>:
 801fe1c:	eef0 7a40 	vmov.f32	s15, s0
 801fe20:	ee30 7a40 	vsub.f32	s14, s0, s0
 801fe24:	eef4 7a67 	vcmp.f32	s15, s15
 801fe28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe2c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801fe30:	d602      	bvs.n	801fe38 <__math_invalidf+0x1c>
 801fe32:	2021      	movs	r0, #33	@ 0x21
 801fe34:	f7ff bfe4 	b.w	801fe00 <with_errnof>
 801fe38:	4770      	bx	lr

0801fe3a <__ieee754_sqrtf>:
 801fe3a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801fe3e:	4770      	bx	lr

0801fe40 <__ieee754_atan2f>:
 801fe40:	ee10 2a90 	vmov	r2, s1
 801fe44:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 801fe48:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801fe4c:	b510      	push	{r4, lr}
 801fe4e:	eef0 7a40 	vmov.f32	s15, s0
 801fe52:	d806      	bhi.n	801fe62 <__ieee754_atan2f+0x22>
 801fe54:	ee10 0a10 	vmov	r0, s0
 801fe58:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801fe5c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801fe60:	d904      	bls.n	801fe6c <__ieee754_atan2f+0x2c>
 801fe62:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801fe66:	eeb0 0a67 	vmov.f32	s0, s15
 801fe6a:	bd10      	pop	{r4, pc}
 801fe6c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801fe70:	d103      	bne.n	801fe7a <__ieee754_atan2f+0x3a>
 801fe72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fe76:	f000 b881 	b.w	801ff7c <atanf>
 801fe7a:	1794      	asrs	r4, r2, #30
 801fe7c:	f004 0402 	and.w	r4, r4, #2
 801fe80:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801fe84:	b93b      	cbnz	r3, 801fe96 <__ieee754_atan2f+0x56>
 801fe86:	2c02      	cmp	r4, #2
 801fe88:	d05c      	beq.n	801ff44 <__ieee754_atan2f+0x104>
 801fe8a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 801ff58 <__ieee754_atan2f+0x118>
 801fe8e:	2c03      	cmp	r4, #3
 801fe90:	fe47 7a00 	vseleq.f32	s15, s14, s0
 801fe94:	e7e7      	b.n	801fe66 <__ieee754_atan2f+0x26>
 801fe96:	b939      	cbnz	r1, 801fea8 <__ieee754_atan2f+0x68>
 801fe98:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801ff5c <__ieee754_atan2f+0x11c>
 801fe9c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801ff60 <__ieee754_atan2f+0x120>
 801fea0:	2800      	cmp	r0, #0
 801fea2:	fe67 7a87 	vselge.f32	s15, s15, s14
 801fea6:	e7de      	b.n	801fe66 <__ieee754_atan2f+0x26>
 801fea8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801feac:	d110      	bne.n	801fed0 <__ieee754_atan2f+0x90>
 801feae:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801feb2:	f104 34ff 	add.w	r4, r4, #4294967295
 801feb6:	d107      	bne.n	801fec8 <__ieee754_atan2f+0x88>
 801feb8:	2c02      	cmp	r4, #2
 801feba:	d846      	bhi.n	801ff4a <__ieee754_atan2f+0x10a>
 801febc:	4b29      	ldr	r3, [pc, #164]	@ (801ff64 <__ieee754_atan2f+0x124>)
 801febe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801fec2:	edd3 7a00 	vldr	s15, [r3]
 801fec6:	e7ce      	b.n	801fe66 <__ieee754_atan2f+0x26>
 801fec8:	2c02      	cmp	r4, #2
 801feca:	d841      	bhi.n	801ff50 <__ieee754_atan2f+0x110>
 801fecc:	4b26      	ldr	r3, [pc, #152]	@ (801ff68 <__ieee754_atan2f+0x128>)
 801fece:	e7f6      	b.n	801febe <__ieee754_atan2f+0x7e>
 801fed0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801fed4:	d0e0      	beq.n	801fe98 <__ieee754_atan2f+0x58>
 801fed6:	1a5b      	subs	r3, r3, r1
 801fed8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801fedc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801fee0:	da1a      	bge.n	801ff18 <__ieee754_atan2f+0xd8>
 801fee2:	2a00      	cmp	r2, #0
 801fee4:	da01      	bge.n	801feea <__ieee754_atan2f+0xaa>
 801fee6:	313c      	adds	r1, #60	@ 0x3c
 801fee8:	db19      	blt.n	801ff1e <__ieee754_atan2f+0xde>
 801feea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801feee:	f000 f919 	bl	8020124 <fabsf>
 801fef2:	f000 f843 	bl	801ff7c <atanf>
 801fef6:	eef0 7a40 	vmov.f32	s15, s0
 801fefa:	2c01      	cmp	r4, #1
 801fefc:	d012      	beq.n	801ff24 <__ieee754_atan2f+0xe4>
 801fefe:	2c02      	cmp	r4, #2
 801ff00:	d017      	beq.n	801ff32 <__ieee754_atan2f+0xf2>
 801ff02:	2c00      	cmp	r4, #0
 801ff04:	d0af      	beq.n	801fe66 <__ieee754_atan2f+0x26>
 801ff06:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801ff6c <__ieee754_atan2f+0x12c>
 801ff0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ff0e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 801ff70 <__ieee754_atan2f+0x130>
 801ff12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ff16:	e7a6      	b.n	801fe66 <__ieee754_atan2f+0x26>
 801ff18:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801ff5c <__ieee754_atan2f+0x11c>
 801ff1c:	e7ed      	b.n	801fefa <__ieee754_atan2f+0xba>
 801ff1e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801ff74 <__ieee754_atan2f+0x134>
 801ff22:	e7ea      	b.n	801fefa <__ieee754_atan2f+0xba>
 801ff24:	ee17 3a90 	vmov	r3, s15
 801ff28:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801ff2c:	ee07 3a90 	vmov	s15, r3
 801ff30:	e799      	b.n	801fe66 <__ieee754_atan2f+0x26>
 801ff32:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801ff6c <__ieee754_atan2f+0x12c>
 801ff36:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ff3a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801ff70 <__ieee754_atan2f+0x130>
 801ff3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ff42:	e790      	b.n	801fe66 <__ieee754_atan2f+0x26>
 801ff44:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 801ff70 <__ieee754_atan2f+0x130>
 801ff48:	e78d      	b.n	801fe66 <__ieee754_atan2f+0x26>
 801ff4a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801ff78 <__ieee754_atan2f+0x138>
 801ff4e:	e78a      	b.n	801fe66 <__ieee754_atan2f+0x26>
 801ff50:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801ff74 <__ieee754_atan2f+0x134>
 801ff54:	e787      	b.n	801fe66 <__ieee754_atan2f+0x26>
 801ff56:	bf00      	nop
 801ff58:	c0490fdb 	.word	0xc0490fdb
 801ff5c:	3fc90fdb 	.word	0x3fc90fdb
 801ff60:	bfc90fdb 	.word	0xbfc90fdb
 801ff64:	0802424c 	.word	0x0802424c
 801ff68:	08024240 	.word	0x08024240
 801ff6c:	33bbbd2e 	.word	0x33bbbd2e
 801ff70:	40490fdb 	.word	0x40490fdb
 801ff74:	00000000 	.word	0x00000000
 801ff78:	3f490fdb 	.word	0x3f490fdb

0801ff7c <atanf>:
 801ff7c:	b538      	push	{r3, r4, r5, lr}
 801ff7e:	ee10 5a10 	vmov	r5, s0
 801ff82:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801ff86:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801ff8a:	eef0 7a40 	vmov.f32	s15, s0
 801ff8e:	d30f      	bcc.n	801ffb0 <atanf+0x34>
 801ff90:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801ff94:	d904      	bls.n	801ffa0 <atanf+0x24>
 801ff96:	ee70 7a00 	vadd.f32	s15, s0, s0
 801ff9a:	eeb0 0a67 	vmov.f32	s0, s15
 801ff9e:	bd38      	pop	{r3, r4, r5, pc}
 801ffa0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80200d8 <atanf+0x15c>
 801ffa4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80200dc <atanf+0x160>
 801ffa8:	2d00      	cmp	r5, #0
 801ffaa:	fe77 7a27 	vselgt.f32	s15, s14, s15
 801ffae:	e7f4      	b.n	801ff9a <atanf+0x1e>
 801ffb0:	4b4b      	ldr	r3, [pc, #300]	@ (80200e0 <atanf+0x164>)
 801ffb2:	429c      	cmp	r4, r3
 801ffb4:	d810      	bhi.n	801ffd8 <atanf+0x5c>
 801ffb6:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801ffba:	d20a      	bcs.n	801ffd2 <atanf+0x56>
 801ffbc:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80200e4 <atanf+0x168>
 801ffc0:	ee30 7a07 	vadd.f32	s14, s0, s14
 801ffc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ffc8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801ffcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffd0:	dce3      	bgt.n	801ff9a <atanf+0x1e>
 801ffd2:	f04f 33ff 	mov.w	r3, #4294967295
 801ffd6:	e013      	b.n	8020000 <atanf+0x84>
 801ffd8:	f000 f8a4 	bl	8020124 <fabsf>
 801ffdc:	4b42      	ldr	r3, [pc, #264]	@ (80200e8 <atanf+0x16c>)
 801ffde:	429c      	cmp	r4, r3
 801ffe0:	d84f      	bhi.n	8020082 <atanf+0x106>
 801ffe2:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801ffe6:	429c      	cmp	r4, r3
 801ffe8:	d841      	bhi.n	802006e <atanf+0xf2>
 801ffea:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801ffee:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801fff2:	eea0 7a27 	vfma.f32	s14, s0, s15
 801fff6:	2300      	movs	r3, #0
 801fff8:	ee30 0a27 	vadd.f32	s0, s0, s15
 801fffc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020000:	1c5a      	adds	r2, r3, #1
 8020002:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8020006:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80200ec <atanf+0x170>
 802000a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 80200f0 <atanf+0x174>
 802000e:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 80200f4 <atanf+0x178>
 8020012:	ee66 6a06 	vmul.f32	s13, s12, s12
 8020016:	eee6 5a87 	vfma.f32	s11, s13, s14
 802001a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80200f8 <atanf+0x17c>
 802001e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8020022:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80200fc <atanf+0x180>
 8020026:	eee7 5a26 	vfma.f32	s11, s14, s13
 802002a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8020100 <atanf+0x184>
 802002e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8020032:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8020104 <atanf+0x188>
 8020036:	eee7 5a26 	vfma.f32	s11, s14, s13
 802003a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8020108 <atanf+0x18c>
 802003e:	eea6 5a87 	vfma.f32	s10, s13, s14
 8020042:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 802010c <atanf+0x190>
 8020046:	eea5 7a26 	vfma.f32	s14, s10, s13
 802004a:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8020110 <atanf+0x194>
 802004e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8020052:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8020114 <atanf+0x198>
 8020056:	eea5 7a26 	vfma.f32	s14, s10, s13
 802005a:	ee27 7a26 	vmul.f32	s14, s14, s13
 802005e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8020062:	ee27 7a87 	vmul.f32	s14, s15, s14
 8020066:	d121      	bne.n	80200ac <atanf+0x130>
 8020068:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802006c:	e795      	b.n	801ff9a <atanf+0x1e>
 802006e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8020072:	ee30 7a67 	vsub.f32	s14, s0, s15
 8020076:	ee30 0a27 	vadd.f32	s0, s0, s15
 802007a:	2301      	movs	r3, #1
 802007c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020080:	e7be      	b.n	8020000 <atanf+0x84>
 8020082:	4b25      	ldr	r3, [pc, #148]	@ (8020118 <atanf+0x19c>)
 8020084:	429c      	cmp	r4, r3
 8020086:	d80b      	bhi.n	80200a0 <atanf+0x124>
 8020088:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802008c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020090:	eea0 7a27 	vfma.f32	s14, s0, s15
 8020094:	2302      	movs	r3, #2
 8020096:	ee70 6a67 	vsub.f32	s13, s0, s15
 802009a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802009e:	e7af      	b.n	8020000 <atanf+0x84>
 80200a0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80200a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80200a8:	2303      	movs	r3, #3
 80200aa:	e7a9      	b.n	8020000 <atanf+0x84>
 80200ac:	4a1b      	ldr	r2, [pc, #108]	@ (802011c <atanf+0x1a0>)
 80200ae:	491c      	ldr	r1, [pc, #112]	@ (8020120 <atanf+0x1a4>)
 80200b0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80200b4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80200b8:	edd3 6a00 	vldr	s13, [r3]
 80200bc:	ee37 7a66 	vsub.f32	s14, s14, s13
 80200c0:	2d00      	cmp	r5, #0
 80200c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80200c6:	edd2 7a00 	vldr	s15, [r2]
 80200ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80200ce:	bfb8      	it	lt
 80200d0:	eef1 7a67 	vneglt.f32	s15, s15
 80200d4:	e761      	b.n	801ff9a <atanf+0x1e>
 80200d6:	bf00      	nop
 80200d8:	bfc90fdb 	.word	0xbfc90fdb
 80200dc:	3fc90fdb 	.word	0x3fc90fdb
 80200e0:	3edfffff 	.word	0x3edfffff
 80200e4:	7149f2ca 	.word	0x7149f2ca
 80200e8:	3f97ffff 	.word	0x3f97ffff
 80200ec:	3c8569d7 	.word	0x3c8569d7
 80200f0:	3d4bda59 	.word	0x3d4bda59
 80200f4:	bd6ef16b 	.word	0xbd6ef16b
 80200f8:	3d886b35 	.word	0x3d886b35
 80200fc:	3dba2e6e 	.word	0x3dba2e6e
 8020100:	3e124925 	.word	0x3e124925
 8020104:	3eaaaaab 	.word	0x3eaaaaab
 8020108:	bd15a221 	.word	0xbd15a221
 802010c:	bd9d8795 	.word	0xbd9d8795
 8020110:	bde38e38 	.word	0xbde38e38
 8020114:	be4ccccd 	.word	0xbe4ccccd
 8020118:	401bffff 	.word	0x401bffff
 802011c:	08024268 	.word	0x08024268
 8020120:	08024258 	.word	0x08024258

08020124 <fabsf>:
 8020124:	ee10 3a10 	vmov	r3, s0
 8020128:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802012c:	ee00 3a10 	vmov	s0, r3
 8020130:	4770      	bx	lr

08020132 <abort>:
 8020132:	b508      	push	{r3, lr}
 8020134:	2006      	movs	r0, #6
 8020136:	f000 fb39 	bl	80207ac <raise>
 802013a:	2001      	movs	r0, #1
 802013c:	f7e1 fa9c 	bl	8001678 <_exit>

08020140 <__assert_func>:
 8020140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020142:	4614      	mov	r4, r2
 8020144:	461a      	mov	r2, r3
 8020146:	4b09      	ldr	r3, [pc, #36]	@ (802016c <__assert_func+0x2c>)
 8020148:	681b      	ldr	r3, [r3, #0]
 802014a:	4605      	mov	r5, r0
 802014c:	68d8      	ldr	r0, [r3, #12]
 802014e:	b954      	cbnz	r4, 8020166 <__assert_func+0x26>
 8020150:	4b07      	ldr	r3, [pc, #28]	@ (8020170 <__assert_func+0x30>)
 8020152:	461c      	mov	r4, r3
 8020154:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020158:	9100      	str	r1, [sp, #0]
 802015a:	462b      	mov	r3, r5
 802015c:	4905      	ldr	r1, [pc, #20]	@ (8020174 <__assert_func+0x34>)
 802015e:	f000 f9c1 	bl	80204e4 <fiprintf>
 8020162:	f7ff ffe6 	bl	8020132 <abort>
 8020166:	4b04      	ldr	r3, [pc, #16]	@ (8020178 <__assert_func+0x38>)
 8020168:	e7f4      	b.n	8020154 <__assert_func+0x14>
 802016a:	bf00      	nop
 802016c:	240000e8 	.word	0x240000e8
 8020170:	080242b3 	.word	0x080242b3
 8020174:	08024285 	.word	0x08024285
 8020178:	08024278 	.word	0x08024278

0802017c <atexit>:
 802017c:	2300      	movs	r3, #0
 802017e:	4601      	mov	r1, r0
 8020180:	461a      	mov	r2, r3
 8020182:	4618      	mov	r0, r3
 8020184:	f000 bbc0 	b.w	8020908 <__register_exitproc>

08020188 <malloc>:
 8020188:	4b02      	ldr	r3, [pc, #8]	@ (8020194 <malloc+0xc>)
 802018a:	4601      	mov	r1, r0
 802018c:	6818      	ldr	r0, [r3, #0]
 802018e:	f000 b82d 	b.w	80201ec <_malloc_r>
 8020192:	bf00      	nop
 8020194:	240000e8 	.word	0x240000e8

08020198 <free>:
 8020198:	4b02      	ldr	r3, [pc, #8]	@ (80201a4 <free+0xc>)
 802019a:	4601      	mov	r1, r0
 802019c:	6818      	ldr	r0, [r3, #0]
 802019e:	f000 bc0f 	b.w	80209c0 <_free_r>
 80201a2:	bf00      	nop
 80201a4:	240000e8 	.word	0x240000e8

080201a8 <sbrk_aligned>:
 80201a8:	b570      	push	{r4, r5, r6, lr}
 80201aa:	4e0f      	ldr	r6, [pc, #60]	@ (80201e8 <sbrk_aligned+0x40>)
 80201ac:	460c      	mov	r4, r1
 80201ae:	6831      	ldr	r1, [r6, #0]
 80201b0:	4605      	mov	r5, r0
 80201b2:	b911      	cbnz	r1, 80201ba <sbrk_aligned+0x12>
 80201b4:	f000 fb4a 	bl	802084c <_sbrk_r>
 80201b8:	6030      	str	r0, [r6, #0]
 80201ba:	4621      	mov	r1, r4
 80201bc:	4628      	mov	r0, r5
 80201be:	f000 fb45 	bl	802084c <_sbrk_r>
 80201c2:	1c43      	adds	r3, r0, #1
 80201c4:	d103      	bne.n	80201ce <sbrk_aligned+0x26>
 80201c6:	f04f 34ff 	mov.w	r4, #4294967295
 80201ca:	4620      	mov	r0, r4
 80201cc:	bd70      	pop	{r4, r5, r6, pc}
 80201ce:	1cc4      	adds	r4, r0, #3
 80201d0:	f024 0403 	bic.w	r4, r4, #3
 80201d4:	42a0      	cmp	r0, r4
 80201d6:	d0f8      	beq.n	80201ca <sbrk_aligned+0x22>
 80201d8:	1a21      	subs	r1, r4, r0
 80201da:	4628      	mov	r0, r5
 80201dc:	f000 fb36 	bl	802084c <_sbrk_r>
 80201e0:	3001      	adds	r0, #1
 80201e2:	d1f2      	bne.n	80201ca <sbrk_aligned+0x22>
 80201e4:	e7ef      	b.n	80201c6 <sbrk_aligned+0x1e>
 80201e6:	bf00      	nop
 80201e8:	24025a90 	.word	0x24025a90

080201ec <_malloc_r>:
 80201ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80201f0:	1ccd      	adds	r5, r1, #3
 80201f2:	f025 0503 	bic.w	r5, r5, #3
 80201f6:	3508      	adds	r5, #8
 80201f8:	2d0c      	cmp	r5, #12
 80201fa:	bf38      	it	cc
 80201fc:	250c      	movcc	r5, #12
 80201fe:	2d00      	cmp	r5, #0
 8020200:	4606      	mov	r6, r0
 8020202:	db01      	blt.n	8020208 <_malloc_r+0x1c>
 8020204:	42a9      	cmp	r1, r5
 8020206:	d904      	bls.n	8020212 <_malloc_r+0x26>
 8020208:	230c      	movs	r3, #12
 802020a:	6033      	str	r3, [r6, #0]
 802020c:	2000      	movs	r0, #0
 802020e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020212:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80202e8 <_malloc_r+0xfc>
 8020216:	f000 f869 	bl	80202ec <__malloc_lock>
 802021a:	f8d8 3000 	ldr.w	r3, [r8]
 802021e:	461c      	mov	r4, r3
 8020220:	bb44      	cbnz	r4, 8020274 <_malloc_r+0x88>
 8020222:	4629      	mov	r1, r5
 8020224:	4630      	mov	r0, r6
 8020226:	f7ff ffbf 	bl	80201a8 <sbrk_aligned>
 802022a:	1c43      	adds	r3, r0, #1
 802022c:	4604      	mov	r4, r0
 802022e:	d158      	bne.n	80202e2 <_malloc_r+0xf6>
 8020230:	f8d8 4000 	ldr.w	r4, [r8]
 8020234:	4627      	mov	r7, r4
 8020236:	2f00      	cmp	r7, #0
 8020238:	d143      	bne.n	80202c2 <_malloc_r+0xd6>
 802023a:	2c00      	cmp	r4, #0
 802023c:	d04b      	beq.n	80202d6 <_malloc_r+0xea>
 802023e:	6823      	ldr	r3, [r4, #0]
 8020240:	4639      	mov	r1, r7
 8020242:	4630      	mov	r0, r6
 8020244:	eb04 0903 	add.w	r9, r4, r3
 8020248:	f000 fb00 	bl	802084c <_sbrk_r>
 802024c:	4581      	cmp	r9, r0
 802024e:	d142      	bne.n	80202d6 <_malloc_r+0xea>
 8020250:	6821      	ldr	r1, [r4, #0]
 8020252:	1a6d      	subs	r5, r5, r1
 8020254:	4629      	mov	r1, r5
 8020256:	4630      	mov	r0, r6
 8020258:	f7ff ffa6 	bl	80201a8 <sbrk_aligned>
 802025c:	3001      	adds	r0, #1
 802025e:	d03a      	beq.n	80202d6 <_malloc_r+0xea>
 8020260:	6823      	ldr	r3, [r4, #0]
 8020262:	442b      	add	r3, r5
 8020264:	6023      	str	r3, [r4, #0]
 8020266:	f8d8 3000 	ldr.w	r3, [r8]
 802026a:	685a      	ldr	r2, [r3, #4]
 802026c:	bb62      	cbnz	r2, 80202c8 <_malloc_r+0xdc>
 802026e:	f8c8 7000 	str.w	r7, [r8]
 8020272:	e00f      	b.n	8020294 <_malloc_r+0xa8>
 8020274:	6822      	ldr	r2, [r4, #0]
 8020276:	1b52      	subs	r2, r2, r5
 8020278:	d420      	bmi.n	80202bc <_malloc_r+0xd0>
 802027a:	2a0b      	cmp	r2, #11
 802027c:	d917      	bls.n	80202ae <_malloc_r+0xc2>
 802027e:	1961      	adds	r1, r4, r5
 8020280:	42a3      	cmp	r3, r4
 8020282:	6025      	str	r5, [r4, #0]
 8020284:	bf18      	it	ne
 8020286:	6059      	strne	r1, [r3, #4]
 8020288:	6863      	ldr	r3, [r4, #4]
 802028a:	bf08      	it	eq
 802028c:	f8c8 1000 	streq.w	r1, [r8]
 8020290:	5162      	str	r2, [r4, r5]
 8020292:	604b      	str	r3, [r1, #4]
 8020294:	4630      	mov	r0, r6
 8020296:	f000 f82f 	bl	80202f8 <__malloc_unlock>
 802029a:	f104 000b 	add.w	r0, r4, #11
 802029e:	1d23      	adds	r3, r4, #4
 80202a0:	f020 0007 	bic.w	r0, r0, #7
 80202a4:	1ac2      	subs	r2, r0, r3
 80202a6:	bf1c      	itt	ne
 80202a8:	1a1b      	subne	r3, r3, r0
 80202aa:	50a3      	strne	r3, [r4, r2]
 80202ac:	e7af      	b.n	802020e <_malloc_r+0x22>
 80202ae:	6862      	ldr	r2, [r4, #4]
 80202b0:	42a3      	cmp	r3, r4
 80202b2:	bf0c      	ite	eq
 80202b4:	f8c8 2000 	streq.w	r2, [r8]
 80202b8:	605a      	strne	r2, [r3, #4]
 80202ba:	e7eb      	b.n	8020294 <_malloc_r+0xa8>
 80202bc:	4623      	mov	r3, r4
 80202be:	6864      	ldr	r4, [r4, #4]
 80202c0:	e7ae      	b.n	8020220 <_malloc_r+0x34>
 80202c2:	463c      	mov	r4, r7
 80202c4:	687f      	ldr	r7, [r7, #4]
 80202c6:	e7b6      	b.n	8020236 <_malloc_r+0x4a>
 80202c8:	461a      	mov	r2, r3
 80202ca:	685b      	ldr	r3, [r3, #4]
 80202cc:	42a3      	cmp	r3, r4
 80202ce:	d1fb      	bne.n	80202c8 <_malloc_r+0xdc>
 80202d0:	2300      	movs	r3, #0
 80202d2:	6053      	str	r3, [r2, #4]
 80202d4:	e7de      	b.n	8020294 <_malloc_r+0xa8>
 80202d6:	230c      	movs	r3, #12
 80202d8:	6033      	str	r3, [r6, #0]
 80202da:	4630      	mov	r0, r6
 80202dc:	f000 f80c 	bl	80202f8 <__malloc_unlock>
 80202e0:	e794      	b.n	802020c <_malloc_r+0x20>
 80202e2:	6005      	str	r5, [r0, #0]
 80202e4:	e7d6      	b.n	8020294 <_malloc_r+0xa8>
 80202e6:	bf00      	nop
 80202e8:	24025a94 	.word	0x24025a94

080202ec <__malloc_lock>:
 80202ec:	4801      	ldr	r0, [pc, #4]	@ (80202f4 <__malloc_lock+0x8>)
 80202ee:	f000 bafa 	b.w	80208e6 <__retarget_lock_acquire_recursive>
 80202f2:	bf00      	nop
 80202f4:	24025bd8 	.word	0x24025bd8

080202f8 <__malloc_unlock>:
 80202f8:	4801      	ldr	r0, [pc, #4]	@ (8020300 <__malloc_unlock+0x8>)
 80202fa:	f000 baf5 	b.w	80208e8 <__retarget_lock_release_recursive>
 80202fe:	bf00      	nop
 8020300:	24025bd8 	.word	0x24025bd8

08020304 <rand>:
 8020304:	4b16      	ldr	r3, [pc, #88]	@ (8020360 <rand+0x5c>)
 8020306:	b510      	push	{r4, lr}
 8020308:	681c      	ldr	r4, [r3, #0]
 802030a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 802030c:	b9b3      	cbnz	r3, 802033c <rand+0x38>
 802030e:	2018      	movs	r0, #24
 8020310:	f7ff ff3a 	bl	8020188 <malloc>
 8020314:	4602      	mov	r2, r0
 8020316:	6320      	str	r0, [r4, #48]	@ 0x30
 8020318:	b920      	cbnz	r0, 8020324 <rand+0x20>
 802031a:	4b12      	ldr	r3, [pc, #72]	@ (8020364 <rand+0x60>)
 802031c:	4812      	ldr	r0, [pc, #72]	@ (8020368 <rand+0x64>)
 802031e:	2152      	movs	r1, #82	@ 0x52
 8020320:	f7ff ff0e 	bl	8020140 <__assert_func>
 8020324:	4911      	ldr	r1, [pc, #68]	@ (802036c <rand+0x68>)
 8020326:	4b12      	ldr	r3, [pc, #72]	@ (8020370 <rand+0x6c>)
 8020328:	e9c0 1300 	strd	r1, r3, [r0]
 802032c:	4b11      	ldr	r3, [pc, #68]	@ (8020374 <rand+0x70>)
 802032e:	6083      	str	r3, [r0, #8]
 8020330:	230b      	movs	r3, #11
 8020332:	8183      	strh	r3, [r0, #12]
 8020334:	2100      	movs	r1, #0
 8020336:	2001      	movs	r0, #1
 8020338:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802033c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802033e:	480e      	ldr	r0, [pc, #56]	@ (8020378 <rand+0x74>)
 8020340:	690b      	ldr	r3, [r1, #16]
 8020342:	694c      	ldr	r4, [r1, #20]
 8020344:	4a0d      	ldr	r2, [pc, #52]	@ (802037c <rand+0x78>)
 8020346:	4358      	muls	r0, r3
 8020348:	fb02 0004 	mla	r0, r2, r4, r0
 802034c:	fba3 3202 	umull	r3, r2, r3, r2
 8020350:	3301      	adds	r3, #1
 8020352:	eb40 0002 	adc.w	r0, r0, r2
 8020356:	e9c1 3004 	strd	r3, r0, [r1, #16]
 802035a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802035e:	bd10      	pop	{r4, pc}
 8020360:	240000e8 	.word	0x240000e8
 8020364:	080242b4 	.word	0x080242b4
 8020368:	080242cb 	.word	0x080242cb
 802036c:	abcd330e 	.word	0xabcd330e
 8020370:	e66d1234 	.word	0xe66d1234
 8020374:	0005deec 	.word	0x0005deec
 8020378:	5851f42d 	.word	0x5851f42d
 802037c:	4c957f2d 	.word	0x4c957f2d

08020380 <__cxa_atexit>:
 8020380:	b510      	push	{r4, lr}
 8020382:	4604      	mov	r4, r0
 8020384:	4804      	ldr	r0, [pc, #16]	@ (8020398 <__cxa_atexit+0x18>)
 8020386:	4613      	mov	r3, r2
 8020388:	b120      	cbz	r0, 8020394 <__cxa_atexit+0x14>
 802038a:	460a      	mov	r2, r1
 802038c:	2002      	movs	r0, #2
 802038e:	4621      	mov	r1, r4
 8020390:	f000 faba 	bl	8020908 <__register_exitproc>
 8020394:	bd10      	pop	{r4, pc}
 8020396:	bf00      	nop
 8020398:	08020909 	.word	0x08020909

0802039c <std>:
 802039c:	2300      	movs	r3, #0
 802039e:	b510      	push	{r4, lr}
 80203a0:	4604      	mov	r4, r0
 80203a2:	e9c0 3300 	strd	r3, r3, [r0]
 80203a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80203aa:	6083      	str	r3, [r0, #8]
 80203ac:	8181      	strh	r1, [r0, #12]
 80203ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80203b0:	81c2      	strh	r2, [r0, #14]
 80203b2:	6183      	str	r3, [r0, #24]
 80203b4:	4619      	mov	r1, r3
 80203b6:	2208      	movs	r2, #8
 80203b8:	305c      	adds	r0, #92	@ 0x5c
 80203ba:	f000 f9b5 	bl	8020728 <memset>
 80203be:	4b0d      	ldr	r3, [pc, #52]	@ (80203f4 <std+0x58>)
 80203c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80203c2:	4b0d      	ldr	r3, [pc, #52]	@ (80203f8 <std+0x5c>)
 80203c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80203c6:	4b0d      	ldr	r3, [pc, #52]	@ (80203fc <std+0x60>)
 80203c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80203ca:	4b0d      	ldr	r3, [pc, #52]	@ (8020400 <std+0x64>)
 80203cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80203ce:	4b0d      	ldr	r3, [pc, #52]	@ (8020404 <std+0x68>)
 80203d0:	6224      	str	r4, [r4, #32]
 80203d2:	429c      	cmp	r4, r3
 80203d4:	d006      	beq.n	80203e4 <std+0x48>
 80203d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80203da:	4294      	cmp	r4, r2
 80203dc:	d002      	beq.n	80203e4 <std+0x48>
 80203de:	33d0      	adds	r3, #208	@ 0xd0
 80203e0:	429c      	cmp	r4, r3
 80203e2:	d105      	bne.n	80203f0 <std+0x54>
 80203e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80203e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80203ec:	f000 ba7a 	b.w	80208e4 <__retarget_lock_init_recursive>
 80203f0:	bd10      	pop	{r4, pc}
 80203f2:	bf00      	nop
 80203f4:	08020545 	.word	0x08020545
 80203f8:	08020567 	.word	0x08020567
 80203fc:	0802059f 	.word	0x0802059f
 8020400:	080205c3 	.word	0x080205c3
 8020404:	24025a98 	.word	0x24025a98

08020408 <stdio_exit_handler>:
 8020408:	4a02      	ldr	r2, [pc, #8]	@ (8020414 <stdio_exit_handler+0xc>)
 802040a:	4903      	ldr	r1, [pc, #12]	@ (8020418 <stdio_exit_handler+0x10>)
 802040c:	4803      	ldr	r0, [pc, #12]	@ (802041c <stdio_exit_handler+0x14>)
 802040e:	f000 b87b 	b.w	8020508 <_fwalk_sglue>
 8020412:	bf00      	nop
 8020414:	240000dc 	.word	0x240000dc
 8020418:	080210fd 	.word	0x080210fd
 802041c:	240000ec 	.word	0x240000ec

08020420 <cleanup_stdio>:
 8020420:	6841      	ldr	r1, [r0, #4]
 8020422:	4b0c      	ldr	r3, [pc, #48]	@ (8020454 <cleanup_stdio+0x34>)
 8020424:	4299      	cmp	r1, r3
 8020426:	b510      	push	{r4, lr}
 8020428:	4604      	mov	r4, r0
 802042a:	d001      	beq.n	8020430 <cleanup_stdio+0x10>
 802042c:	f000 fe66 	bl	80210fc <_fflush_r>
 8020430:	68a1      	ldr	r1, [r4, #8]
 8020432:	4b09      	ldr	r3, [pc, #36]	@ (8020458 <cleanup_stdio+0x38>)
 8020434:	4299      	cmp	r1, r3
 8020436:	d002      	beq.n	802043e <cleanup_stdio+0x1e>
 8020438:	4620      	mov	r0, r4
 802043a:	f000 fe5f 	bl	80210fc <_fflush_r>
 802043e:	68e1      	ldr	r1, [r4, #12]
 8020440:	4b06      	ldr	r3, [pc, #24]	@ (802045c <cleanup_stdio+0x3c>)
 8020442:	4299      	cmp	r1, r3
 8020444:	d004      	beq.n	8020450 <cleanup_stdio+0x30>
 8020446:	4620      	mov	r0, r4
 8020448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802044c:	f000 be56 	b.w	80210fc <_fflush_r>
 8020450:	bd10      	pop	{r4, pc}
 8020452:	bf00      	nop
 8020454:	24025a98 	.word	0x24025a98
 8020458:	24025b00 	.word	0x24025b00
 802045c:	24025b68 	.word	0x24025b68

08020460 <global_stdio_init.part.0>:
 8020460:	b510      	push	{r4, lr}
 8020462:	4b0b      	ldr	r3, [pc, #44]	@ (8020490 <global_stdio_init.part.0+0x30>)
 8020464:	4c0b      	ldr	r4, [pc, #44]	@ (8020494 <global_stdio_init.part.0+0x34>)
 8020466:	4a0c      	ldr	r2, [pc, #48]	@ (8020498 <global_stdio_init.part.0+0x38>)
 8020468:	601a      	str	r2, [r3, #0]
 802046a:	4620      	mov	r0, r4
 802046c:	2200      	movs	r2, #0
 802046e:	2104      	movs	r1, #4
 8020470:	f7ff ff94 	bl	802039c <std>
 8020474:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8020478:	2201      	movs	r2, #1
 802047a:	2109      	movs	r1, #9
 802047c:	f7ff ff8e 	bl	802039c <std>
 8020480:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8020484:	2202      	movs	r2, #2
 8020486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802048a:	2112      	movs	r1, #18
 802048c:	f7ff bf86 	b.w	802039c <std>
 8020490:	24025bd0 	.word	0x24025bd0
 8020494:	24025a98 	.word	0x24025a98
 8020498:	08020409 	.word	0x08020409

0802049c <__sfp_lock_acquire>:
 802049c:	4801      	ldr	r0, [pc, #4]	@ (80204a4 <__sfp_lock_acquire+0x8>)
 802049e:	f000 ba22 	b.w	80208e6 <__retarget_lock_acquire_recursive>
 80204a2:	bf00      	nop
 80204a4:	24025bda 	.word	0x24025bda

080204a8 <__sfp_lock_release>:
 80204a8:	4801      	ldr	r0, [pc, #4]	@ (80204b0 <__sfp_lock_release+0x8>)
 80204aa:	f000 ba1d 	b.w	80208e8 <__retarget_lock_release_recursive>
 80204ae:	bf00      	nop
 80204b0:	24025bda 	.word	0x24025bda

080204b4 <__sinit>:
 80204b4:	b510      	push	{r4, lr}
 80204b6:	4604      	mov	r4, r0
 80204b8:	f7ff fff0 	bl	802049c <__sfp_lock_acquire>
 80204bc:	6a23      	ldr	r3, [r4, #32]
 80204be:	b11b      	cbz	r3, 80204c8 <__sinit+0x14>
 80204c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80204c4:	f7ff bff0 	b.w	80204a8 <__sfp_lock_release>
 80204c8:	4b04      	ldr	r3, [pc, #16]	@ (80204dc <__sinit+0x28>)
 80204ca:	6223      	str	r3, [r4, #32]
 80204cc:	4b04      	ldr	r3, [pc, #16]	@ (80204e0 <__sinit+0x2c>)
 80204ce:	681b      	ldr	r3, [r3, #0]
 80204d0:	2b00      	cmp	r3, #0
 80204d2:	d1f5      	bne.n	80204c0 <__sinit+0xc>
 80204d4:	f7ff ffc4 	bl	8020460 <global_stdio_init.part.0>
 80204d8:	e7f2      	b.n	80204c0 <__sinit+0xc>
 80204da:	bf00      	nop
 80204dc:	08020421 	.word	0x08020421
 80204e0:	24025bd0 	.word	0x24025bd0

080204e4 <fiprintf>:
 80204e4:	b40e      	push	{r1, r2, r3}
 80204e6:	b503      	push	{r0, r1, lr}
 80204e8:	4601      	mov	r1, r0
 80204ea:	ab03      	add	r3, sp, #12
 80204ec:	4805      	ldr	r0, [pc, #20]	@ (8020504 <fiprintf+0x20>)
 80204ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80204f2:	6800      	ldr	r0, [r0, #0]
 80204f4:	9301      	str	r3, [sp, #4]
 80204f6:	f000 fad7 	bl	8020aa8 <_vfiprintf_r>
 80204fa:	b002      	add	sp, #8
 80204fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8020500:	b003      	add	sp, #12
 8020502:	4770      	bx	lr
 8020504:	240000e8 	.word	0x240000e8

08020508 <_fwalk_sglue>:
 8020508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802050c:	4607      	mov	r7, r0
 802050e:	4688      	mov	r8, r1
 8020510:	4614      	mov	r4, r2
 8020512:	2600      	movs	r6, #0
 8020514:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020518:	f1b9 0901 	subs.w	r9, r9, #1
 802051c:	d505      	bpl.n	802052a <_fwalk_sglue+0x22>
 802051e:	6824      	ldr	r4, [r4, #0]
 8020520:	2c00      	cmp	r4, #0
 8020522:	d1f7      	bne.n	8020514 <_fwalk_sglue+0xc>
 8020524:	4630      	mov	r0, r6
 8020526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802052a:	89ab      	ldrh	r3, [r5, #12]
 802052c:	2b01      	cmp	r3, #1
 802052e:	d907      	bls.n	8020540 <_fwalk_sglue+0x38>
 8020530:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020534:	3301      	adds	r3, #1
 8020536:	d003      	beq.n	8020540 <_fwalk_sglue+0x38>
 8020538:	4629      	mov	r1, r5
 802053a:	4638      	mov	r0, r7
 802053c:	47c0      	blx	r8
 802053e:	4306      	orrs	r6, r0
 8020540:	3568      	adds	r5, #104	@ 0x68
 8020542:	e7e9      	b.n	8020518 <_fwalk_sglue+0x10>

08020544 <__sread>:
 8020544:	b510      	push	{r4, lr}
 8020546:	460c      	mov	r4, r1
 8020548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802054c:	f000 f958 	bl	8020800 <_read_r>
 8020550:	2800      	cmp	r0, #0
 8020552:	bfab      	itete	ge
 8020554:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8020556:	89a3      	ldrhlt	r3, [r4, #12]
 8020558:	181b      	addge	r3, r3, r0
 802055a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802055e:	bfac      	ite	ge
 8020560:	6563      	strge	r3, [r4, #84]	@ 0x54
 8020562:	81a3      	strhlt	r3, [r4, #12]
 8020564:	bd10      	pop	{r4, pc}

08020566 <__swrite>:
 8020566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802056a:	461f      	mov	r7, r3
 802056c:	898b      	ldrh	r3, [r1, #12]
 802056e:	05db      	lsls	r3, r3, #23
 8020570:	4605      	mov	r5, r0
 8020572:	460c      	mov	r4, r1
 8020574:	4616      	mov	r6, r2
 8020576:	d505      	bpl.n	8020584 <__swrite+0x1e>
 8020578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802057c:	2302      	movs	r3, #2
 802057e:	2200      	movs	r2, #0
 8020580:	f000 f92c 	bl	80207dc <_lseek_r>
 8020584:	89a3      	ldrh	r3, [r4, #12]
 8020586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802058a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802058e:	81a3      	strh	r3, [r4, #12]
 8020590:	4632      	mov	r2, r6
 8020592:	463b      	mov	r3, r7
 8020594:	4628      	mov	r0, r5
 8020596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802059a:	f000 b967 	b.w	802086c <_write_r>

0802059e <__sseek>:
 802059e:	b510      	push	{r4, lr}
 80205a0:	460c      	mov	r4, r1
 80205a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80205a6:	f000 f919 	bl	80207dc <_lseek_r>
 80205aa:	1c43      	adds	r3, r0, #1
 80205ac:	89a3      	ldrh	r3, [r4, #12]
 80205ae:	bf15      	itete	ne
 80205b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80205b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80205b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80205ba:	81a3      	strheq	r3, [r4, #12]
 80205bc:	bf18      	it	ne
 80205be:	81a3      	strhne	r3, [r4, #12]
 80205c0:	bd10      	pop	{r4, pc}

080205c2 <__sclose>:
 80205c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80205c6:	f000 b8f9 	b.w	80207bc <_close_r>

080205ca <__swbuf_r>:
 80205ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80205cc:	460e      	mov	r6, r1
 80205ce:	4614      	mov	r4, r2
 80205d0:	4605      	mov	r5, r0
 80205d2:	b118      	cbz	r0, 80205dc <__swbuf_r+0x12>
 80205d4:	6a03      	ldr	r3, [r0, #32]
 80205d6:	b90b      	cbnz	r3, 80205dc <__swbuf_r+0x12>
 80205d8:	f7ff ff6c 	bl	80204b4 <__sinit>
 80205dc:	69a3      	ldr	r3, [r4, #24]
 80205de:	60a3      	str	r3, [r4, #8]
 80205e0:	89a3      	ldrh	r3, [r4, #12]
 80205e2:	071a      	lsls	r2, r3, #28
 80205e4:	d501      	bpl.n	80205ea <__swbuf_r+0x20>
 80205e6:	6923      	ldr	r3, [r4, #16]
 80205e8:	b943      	cbnz	r3, 80205fc <__swbuf_r+0x32>
 80205ea:	4621      	mov	r1, r4
 80205ec:	4628      	mov	r0, r5
 80205ee:	f000 f82b 	bl	8020648 <__swsetup_r>
 80205f2:	b118      	cbz	r0, 80205fc <__swbuf_r+0x32>
 80205f4:	f04f 37ff 	mov.w	r7, #4294967295
 80205f8:	4638      	mov	r0, r7
 80205fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80205fc:	6823      	ldr	r3, [r4, #0]
 80205fe:	6922      	ldr	r2, [r4, #16]
 8020600:	1a98      	subs	r0, r3, r2
 8020602:	6963      	ldr	r3, [r4, #20]
 8020604:	b2f6      	uxtb	r6, r6
 8020606:	4283      	cmp	r3, r0
 8020608:	4637      	mov	r7, r6
 802060a:	dc05      	bgt.n	8020618 <__swbuf_r+0x4e>
 802060c:	4621      	mov	r1, r4
 802060e:	4628      	mov	r0, r5
 8020610:	f000 fd74 	bl	80210fc <_fflush_r>
 8020614:	2800      	cmp	r0, #0
 8020616:	d1ed      	bne.n	80205f4 <__swbuf_r+0x2a>
 8020618:	68a3      	ldr	r3, [r4, #8]
 802061a:	3b01      	subs	r3, #1
 802061c:	60a3      	str	r3, [r4, #8]
 802061e:	6823      	ldr	r3, [r4, #0]
 8020620:	1c5a      	adds	r2, r3, #1
 8020622:	6022      	str	r2, [r4, #0]
 8020624:	701e      	strb	r6, [r3, #0]
 8020626:	6962      	ldr	r2, [r4, #20]
 8020628:	1c43      	adds	r3, r0, #1
 802062a:	429a      	cmp	r2, r3
 802062c:	d004      	beq.n	8020638 <__swbuf_r+0x6e>
 802062e:	89a3      	ldrh	r3, [r4, #12]
 8020630:	07db      	lsls	r3, r3, #31
 8020632:	d5e1      	bpl.n	80205f8 <__swbuf_r+0x2e>
 8020634:	2e0a      	cmp	r6, #10
 8020636:	d1df      	bne.n	80205f8 <__swbuf_r+0x2e>
 8020638:	4621      	mov	r1, r4
 802063a:	4628      	mov	r0, r5
 802063c:	f000 fd5e 	bl	80210fc <_fflush_r>
 8020640:	2800      	cmp	r0, #0
 8020642:	d0d9      	beq.n	80205f8 <__swbuf_r+0x2e>
 8020644:	e7d6      	b.n	80205f4 <__swbuf_r+0x2a>
	...

08020648 <__swsetup_r>:
 8020648:	b538      	push	{r3, r4, r5, lr}
 802064a:	4b29      	ldr	r3, [pc, #164]	@ (80206f0 <__swsetup_r+0xa8>)
 802064c:	4605      	mov	r5, r0
 802064e:	6818      	ldr	r0, [r3, #0]
 8020650:	460c      	mov	r4, r1
 8020652:	b118      	cbz	r0, 802065c <__swsetup_r+0x14>
 8020654:	6a03      	ldr	r3, [r0, #32]
 8020656:	b90b      	cbnz	r3, 802065c <__swsetup_r+0x14>
 8020658:	f7ff ff2c 	bl	80204b4 <__sinit>
 802065c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020660:	0719      	lsls	r1, r3, #28
 8020662:	d422      	bmi.n	80206aa <__swsetup_r+0x62>
 8020664:	06da      	lsls	r2, r3, #27
 8020666:	d407      	bmi.n	8020678 <__swsetup_r+0x30>
 8020668:	2209      	movs	r2, #9
 802066a:	602a      	str	r2, [r5, #0]
 802066c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020670:	81a3      	strh	r3, [r4, #12]
 8020672:	f04f 30ff 	mov.w	r0, #4294967295
 8020676:	e033      	b.n	80206e0 <__swsetup_r+0x98>
 8020678:	0758      	lsls	r0, r3, #29
 802067a:	d512      	bpl.n	80206a2 <__swsetup_r+0x5a>
 802067c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802067e:	b141      	cbz	r1, 8020692 <__swsetup_r+0x4a>
 8020680:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020684:	4299      	cmp	r1, r3
 8020686:	d002      	beq.n	802068e <__swsetup_r+0x46>
 8020688:	4628      	mov	r0, r5
 802068a:	f000 f999 	bl	80209c0 <_free_r>
 802068e:	2300      	movs	r3, #0
 8020690:	6363      	str	r3, [r4, #52]	@ 0x34
 8020692:	89a3      	ldrh	r3, [r4, #12]
 8020694:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8020698:	81a3      	strh	r3, [r4, #12]
 802069a:	2300      	movs	r3, #0
 802069c:	6063      	str	r3, [r4, #4]
 802069e:	6923      	ldr	r3, [r4, #16]
 80206a0:	6023      	str	r3, [r4, #0]
 80206a2:	89a3      	ldrh	r3, [r4, #12]
 80206a4:	f043 0308 	orr.w	r3, r3, #8
 80206a8:	81a3      	strh	r3, [r4, #12]
 80206aa:	6923      	ldr	r3, [r4, #16]
 80206ac:	b94b      	cbnz	r3, 80206c2 <__swsetup_r+0x7a>
 80206ae:	89a3      	ldrh	r3, [r4, #12]
 80206b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80206b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80206b8:	d003      	beq.n	80206c2 <__swsetup_r+0x7a>
 80206ba:	4621      	mov	r1, r4
 80206bc:	4628      	mov	r0, r5
 80206be:	f000 fd6b 	bl	8021198 <__smakebuf_r>
 80206c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80206c6:	f013 0201 	ands.w	r2, r3, #1
 80206ca:	d00a      	beq.n	80206e2 <__swsetup_r+0x9a>
 80206cc:	2200      	movs	r2, #0
 80206ce:	60a2      	str	r2, [r4, #8]
 80206d0:	6962      	ldr	r2, [r4, #20]
 80206d2:	4252      	negs	r2, r2
 80206d4:	61a2      	str	r2, [r4, #24]
 80206d6:	6922      	ldr	r2, [r4, #16]
 80206d8:	b942      	cbnz	r2, 80206ec <__swsetup_r+0xa4>
 80206da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80206de:	d1c5      	bne.n	802066c <__swsetup_r+0x24>
 80206e0:	bd38      	pop	{r3, r4, r5, pc}
 80206e2:	0799      	lsls	r1, r3, #30
 80206e4:	bf58      	it	pl
 80206e6:	6962      	ldrpl	r2, [r4, #20]
 80206e8:	60a2      	str	r2, [r4, #8]
 80206ea:	e7f4      	b.n	80206d6 <__swsetup_r+0x8e>
 80206ec:	2000      	movs	r0, #0
 80206ee:	e7f7      	b.n	80206e0 <__swsetup_r+0x98>
 80206f0:	240000e8 	.word	0x240000e8

080206f4 <memmove>:
 80206f4:	4288      	cmp	r0, r1
 80206f6:	b510      	push	{r4, lr}
 80206f8:	eb01 0402 	add.w	r4, r1, r2
 80206fc:	d902      	bls.n	8020704 <memmove+0x10>
 80206fe:	4284      	cmp	r4, r0
 8020700:	4623      	mov	r3, r4
 8020702:	d807      	bhi.n	8020714 <memmove+0x20>
 8020704:	1e43      	subs	r3, r0, #1
 8020706:	42a1      	cmp	r1, r4
 8020708:	d008      	beq.n	802071c <memmove+0x28>
 802070a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802070e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020712:	e7f8      	b.n	8020706 <memmove+0x12>
 8020714:	4402      	add	r2, r0
 8020716:	4601      	mov	r1, r0
 8020718:	428a      	cmp	r2, r1
 802071a:	d100      	bne.n	802071e <memmove+0x2a>
 802071c:	bd10      	pop	{r4, pc}
 802071e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020726:	e7f7      	b.n	8020718 <memmove+0x24>

08020728 <memset>:
 8020728:	4402      	add	r2, r0
 802072a:	4603      	mov	r3, r0
 802072c:	4293      	cmp	r3, r2
 802072e:	d100      	bne.n	8020732 <memset+0xa>
 8020730:	4770      	bx	lr
 8020732:	f803 1b01 	strb.w	r1, [r3], #1
 8020736:	e7f9      	b.n	802072c <memset+0x4>

08020738 <strncmp>:
 8020738:	b510      	push	{r4, lr}
 802073a:	b16a      	cbz	r2, 8020758 <strncmp+0x20>
 802073c:	3901      	subs	r1, #1
 802073e:	1884      	adds	r4, r0, r2
 8020740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020744:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8020748:	429a      	cmp	r2, r3
 802074a:	d103      	bne.n	8020754 <strncmp+0x1c>
 802074c:	42a0      	cmp	r0, r4
 802074e:	d001      	beq.n	8020754 <strncmp+0x1c>
 8020750:	2a00      	cmp	r2, #0
 8020752:	d1f5      	bne.n	8020740 <strncmp+0x8>
 8020754:	1ad0      	subs	r0, r2, r3
 8020756:	bd10      	pop	{r4, pc}
 8020758:	4610      	mov	r0, r2
 802075a:	e7fc      	b.n	8020756 <strncmp+0x1e>

0802075c <_raise_r>:
 802075c:	291f      	cmp	r1, #31
 802075e:	b538      	push	{r3, r4, r5, lr}
 8020760:	4605      	mov	r5, r0
 8020762:	460c      	mov	r4, r1
 8020764:	d904      	bls.n	8020770 <_raise_r+0x14>
 8020766:	2316      	movs	r3, #22
 8020768:	6003      	str	r3, [r0, #0]
 802076a:	f04f 30ff 	mov.w	r0, #4294967295
 802076e:	bd38      	pop	{r3, r4, r5, pc}
 8020770:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8020772:	b112      	cbz	r2, 802077a <_raise_r+0x1e>
 8020774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020778:	b94b      	cbnz	r3, 802078e <_raise_r+0x32>
 802077a:	4628      	mov	r0, r5
 802077c:	f000 f864 	bl	8020848 <_getpid_r>
 8020780:	4622      	mov	r2, r4
 8020782:	4601      	mov	r1, r0
 8020784:	4628      	mov	r0, r5
 8020786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802078a:	f000 b84b 	b.w	8020824 <_kill_r>
 802078e:	2b01      	cmp	r3, #1
 8020790:	d00a      	beq.n	80207a8 <_raise_r+0x4c>
 8020792:	1c59      	adds	r1, r3, #1
 8020794:	d103      	bne.n	802079e <_raise_r+0x42>
 8020796:	2316      	movs	r3, #22
 8020798:	6003      	str	r3, [r0, #0]
 802079a:	2001      	movs	r0, #1
 802079c:	e7e7      	b.n	802076e <_raise_r+0x12>
 802079e:	2100      	movs	r1, #0
 80207a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80207a4:	4620      	mov	r0, r4
 80207a6:	4798      	blx	r3
 80207a8:	2000      	movs	r0, #0
 80207aa:	e7e0      	b.n	802076e <_raise_r+0x12>

080207ac <raise>:
 80207ac:	4b02      	ldr	r3, [pc, #8]	@ (80207b8 <raise+0xc>)
 80207ae:	4601      	mov	r1, r0
 80207b0:	6818      	ldr	r0, [r3, #0]
 80207b2:	f7ff bfd3 	b.w	802075c <_raise_r>
 80207b6:	bf00      	nop
 80207b8:	240000e8 	.word	0x240000e8

080207bc <_close_r>:
 80207bc:	b538      	push	{r3, r4, r5, lr}
 80207be:	4d06      	ldr	r5, [pc, #24]	@ (80207d8 <_close_r+0x1c>)
 80207c0:	2300      	movs	r3, #0
 80207c2:	4604      	mov	r4, r0
 80207c4:	4608      	mov	r0, r1
 80207c6:	602b      	str	r3, [r5, #0]
 80207c8:	f7e0 ff78 	bl	80016bc <_close>
 80207cc:	1c43      	adds	r3, r0, #1
 80207ce:	d102      	bne.n	80207d6 <_close_r+0x1a>
 80207d0:	682b      	ldr	r3, [r5, #0]
 80207d2:	b103      	cbz	r3, 80207d6 <_close_r+0x1a>
 80207d4:	6023      	str	r3, [r4, #0]
 80207d6:	bd38      	pop	{r3, r4, r5, pc}
 80207d8:	24025bd4 	.word	0x24025bd4

080207dc <_lseek_r>:
 80207dc:	b538      	push	{r3, r4, r5, lr}
 80207de:	4d07      	ldr	r5, [pc, #28]	@ (80207fc <_lseek_r+0x20>)
 80207e0:	4604      	mov	r4, r0
 80207e2:	4608      	mov	r0, r1
 80207e4:	4611      	mov	r1, r2
 80207e6:	2200      	movs	r2, #0
 80207e8:	602a      	str	r2, [r5, #0]
 80207ea:	461a      	mov	r2, r3
 80207ec:	f7e0 ff70 	bl	80016d0 <_lseek>
 80207f0:	1c43      	adds	r3, r0, #1
 80207f2:	d102      	bne.n	80207fa <_lseek_r+0x1e>
 80207f4:	682b      	ldr	r3, [r5, #0]
 80207f6:	b103      	cbz	r3, 80207fa <_lseek_r+0x1e>
 80207f8:	6023      	str	r3, [r4, #0]
 80207fa:	bd38      	pop	{r3, r4, r5, pc}
 80207fc:	24025bd4 	.word	0x24025bd4

08020800 <_read_r>:
 8020800:	b538      	push	{r3, r4, r5, lr}
 8020802:	4d07      	ldr	r5, [pc, #28]	@ (8020820 <_read_r+0x20>)
 8020804:	4604      	mov	r4, r0
 8020806:	4608      	mov	r0, r1
 8020808:	4611      	mov	r1, r2
 802080a:	2200      	movs	r2, #0
 802080c:	602a      	str	r2, [r5, #0]
 802080e:	461a      	mov	r2, r3
 8020810:	f7e0 ff38 	bl	8001684 <_read>
 8020814:	1c43      	adds	r3, r0, #1
 8020816:	d102      	bne.n	802081e <_read_r+0x1e>
 8020818:	682b      	ldr	r3, [r5, #0]
 802081a:	b103      	cbz	r3, 802081e <_read_r+0x1e>
 802081c:	6023      	str	r3, [r4, #0]
 802081e:	bd38      	pop	{r3, r4, r5, pc}
 8020820:	24025bd4 	.word	0x24025bd4

08020824 <_kill_r>:
 8020824:	b538      	push	{r3, r4, r5, lr}
 8020826:	4d07      	ldr	r5, [pc, #28]	@ (8020844 <_kill_r+0x20>)
 8020828:	2300      	movs	r3, #0
 802082a:	4604      	mov	r4, r0
 802082c:	4608      	mov	r0, r1
 802082e:	4611      	mov	r1, r2
 8020830:	602b      	str	r3, [r5, #0]
 8020832:	f7e0 ff19 	bl	8001668 <_kill>
 8020836:	1c43      	adds	r3, r0, #1
 8020838:	d102      	bne.n	8020840 <_kill_r+0x1c>
 802083a:	682b      	ldr	r3, [r5, #0]
 802083c:	b103      	cbz	r3, 8020840 <_kill_r+0x1c>
 802083e:	6023      	str	r3, [r4, #0]
 8020840:	bd38      	pop	{r3, r4, r5, pc}
 8020842:	bf00      	nop
 8020844:	24025bd4 	.word	0x24025bd4

08020848 <_getpid_r>:
 8020848:	f7e0 bf0c 	b.w	8001664 <_getpid>

0802084c <_sbrk_r>:
 802084c:	b538      	push	{r3, r4, r5, lr}
 802084e:	4d06      	ldr	r5, [pc, #24]	@ (8020868 <_sbrk_r+0x1c>)
 8020850:	2300      	movs	r3, #0
 8020852:	4604      	mov	r4, r0
 8020854:	4608      	mov	r0, r1
 8020856:	602b      	str	r3, [r5, #0]
 8020858:	f7e0 ff3c 	bl	80016d4 <_sbrk>
 802085c:	1c43      	adds	r3, r0, #1
 802085e:	d102      	bne.n	8020866 <_sbrk_r+0x1a>
 8020860:	682b      	ldr	r3, [r5, #0]
 8020862:	b103      	cbz	r3, 8020866 <_sbrk_r+0x1a>
 8020864:	6023      	str	r3, [r4, #0]
 8020866:	bd38      	pop	{r3, r4, r5, pc}
 8020868:	24025bd4 	.word	0x24025bd4

0802086c <_write_r>:
 802086c:	b538      	push	{r3, r4, r5, lr}
 802086e:	4d07      	ldr	r5, [pc, #28]	@ (802088c <_write_r+0x20>)
 8020870:	4604      	mov	r4, r0
 8020872:	4608      	mov	r0, r1
 8020874:	4611      	mov	r1, r2
 8020876:	2200      	movs	r2, #0
 8020878:	602a      	str	r2, [r5, #0]
 802087a:	461a      	mov	r2, r3
 802087c:	f7e0 ff10 	bl	80016a0 <_write>
 8020880:	1c43      	adds	r3, r0, #1
 8020882:	d102      	bne.n	802088a <_write_r+0x1e>
 8020884:	682b      	ldr	r3, [r5, #0]
 8020886:	b103      	cbz	r3, 802088a <_write_r+0x1e>
 8020888:	6023      	str	r3, [r4, #0]
 802088a:	bd38      	pop	{r3, r4, r5, pc}
 802088c:	24025bd4 	.word	0x24025bd4

08020890 <__errno>:
 8020890:	4b01      	ldr	r3, [pc, #4]	@ (8020898 <__errno+0x8>)
 8020892:	6818      	ldr	r0, [r3, #0]
 8020894:	4770      	bx	lr
 8020896:	bf00      	nop
 8020898:	240000e8 	.word	0x240000e8

0802089c <__libc_init_array>:
 802089c:	b570      	push	{r4, r5, r6, lr}
 802089e:	4d0d      	ldr	r5, [pc, #52]	@ (80208d4 <__libc_init_array+0x38>)
 80208a0:	4c0d      	ldr	r4, [pc, #52]	@ (80208d8 <__libc_init_array+0x3c>)
 80208a2:	1b64      	subs	r4, r4, r5
 80208a4:	10a4      	asrs	r4, r4, #2
 80208a6:	2600      	movs	r6, #0
 80208a8:	42a6      	cmp	r6, r4
 80208aa:	d109      	bne.n	80208c0 <__libc_init_array+0x24>
 80208ac:	4d0b      	ldr	r5, [pc, #44]	@ (80208dc <__libc_init_array+0x40>)
 80208ae:	4c0c      	ldr	r4, [pc, #48]	@ (80208e0 <__libc_init_array+0x44>)
 80208b0:	f000 fcd0 	bl	8021254 <_init>
 80208b4:	1b64      	subs	r4, r4, r5
 80208b6:	10a4      	asrs	r4, r4, #2
 80208b8:	2600      	movs	r6, #0
 80208ba:	42a6      	cmp	r6, r4
 80208bc:	d105      	bne.n	80208ca <__libc_init_array+0x2e>
 80208be:	bd70      	pop	{r4, r5, r6, pc}
 80208c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80208c4:	4798      	blx	r3
 80208c6:	3601      	adds	r6, #1
 80208c8:	e7ee      	b.n	80208a8 <__libc_init_array+0xc>
 80208ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80208ce:	4798      	blx	r3
 80208d0:	3601      	adds	r6, #1
 80208d2:	e7f2      	b.n	80208ba <__libc_init_array+0x1e>
 80208d4:	08024884 	.word	0x08024884
 80208d8:	08024884 	.word	0x08024884
 80208dc:	08024884 	.word	0x08024884
 80208e0:	080248a0 	.word	0x080248a0

080208e4 <__retarget_lock_init_recursive>:
 80208e4:	4770      	bx	lr

080208e6 <__retarget_lock_acquire_recursive>:
 80208e6:	4770      	bx	lr

080208e8 <__retarget_lock_release_recursive>:
 80208e8:	4770      	bx	lr

080208ea <memcpy>:
 80208ea:	440a      	add	r2, r1
 80208ec:	4291      	cmp	r1, r2
 80208ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80208f2:	d100      	bne.n	80208f6 <memcpy+0xc>
 80208f4:	4770      	bx	lr
 80208f6:	b510      	push	{r4, lr}
 80208f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80208fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020900:	4291      	cmp	r1, r2
 8020902:	d1f9      	bne.n	80208f8 <memcpy+0xe>
 8020904:	bd10      	pop	{r4, pc}
	...

08020908 <__register_exitproc>:
 8020908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802090c:	4d27      	ldr	r5, [pc, #156]	@ (80209ac <__register_exitproc+0xa4>)
 802090e:	4607      	mov	r7, r0
 8020910:	6828      	ldr	r0, [r5, #0]
 8020912:	4691      	mov	r9, r2
 8020914:	460e      	mov	r6, r1
 8020916:	4698      	mov	r8, r3
 8020918:	f7ff ffe5 	bl	80208e6 <__retarget_lock_acquire_recursive>
 802091c:	4a24      	ldr	r2, [pc, #144]	@ (80209b0 <__register_exitproc+0xa8>)
 802091e:	6814      	ldr	r4, [r2, #0]
 8020920:	b93c      	cbnz	r4, 8020932 <__register_exitproc+0x2a>
 8020922:	4b24      	ldr	r3, [pc, #144]	@ (80209b4 <__register_exitproc+0xac>)
 8020924:	6013      	str	r3, [r2, #0]
 8020926:	4a24      	ldr	r2, [pc, #144]	@ (80209b8 <__register_exitproc+0xb0>)
 8020928:	b112      	cbz	r2, 8020930 <__register_exitproc+0x28>
 802092a:	6812      	ldr	r2, [r2, #0]
 802092c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8020930:	4c20      	ldr	r4, [pc, #128]	@ (80209b4 <__register_exitproc+0xac>)
 8020932:	6863      	ldr	r3, [r4, #4]
 8020934:	2b1f      	cmp	r3, #31
 8020936:	dd06      	ble.n	8020946 <__register_exitproc+0x3e>
 8020938:	6828      	ldr	r0, [r5, #0]
 802093a:	f7ff ffd5 	bl	80208e8 <__retarget_lock_release_recursive>
 802093e:	f04f 30ff 	mov.w	r0, #4294967295
 8020942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020946:	b32f      	cbz	r7, 8020994 <__register_exitproc+0x8c>
 8020948:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802094c:	b968      	cbnz	r0, 802096a <__register_exitproc+0x62>
 802094e:	4b1b      	ldr	r3, [pc, #108]	@ (80209bc <__register_exitproc+0xb4>)
 8020950:	2b00      	cmp	r3, #0
 8020952:	d0f1      	beq.n	8020938 <__register_exitproc+0x30>
 8020954:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8020958:	f7ff fc16 	bl	8020188 <malloc>
 802095c:	2800      	cmp	r0, #0
 802095e:	d0eb      	beq.n	8020938 <__register_exitproc+0x30>
 8020960:	2300      	movs	r3, #0
 8020962:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8020966:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802096a:	6863      	ldr	r3, [r4, #4]
 802096c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8020970:	2201      	movs	r2, #1
 8020972:	409a      	lsls	r2, r3
 8020974:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8020978:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802097c:	4313      	orrs	r3, r2
 802097e:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8020982:	2f02      	cmp	r7, #2
 8020984:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8020988:	bf02      	ittt	eq
 802098a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802098e:	4313      	orreq	r3, r2
 8020990:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8020994:	6863      	ldr	r3, [r4, #4]
 8020996:	6828      	ldr	r0, [r5, #0]
 8020998:	1c5a      	adds	r2, r3, #1
 802099a:	3302      	adds	r3, #2
 802099c:	6062      	str	r2, [r4, #4]
 802099e:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80209a2:	f7ff ffa1 	bl	80208e8 <__retarget_lock_release_recursive>
 80209a6:	2000      	movs	r0, #0
 80209a8:	e7cb      	b.n	8020942 <__register_exitproc+0x3a>
 80209aa:	bf00      	nop
 80209ac:	24000138 	.word	0x24000138
 80209b0:	24025c68 	.word	0x24025c68
 80209b4:	24025bdc 	.word	0x24025bdc
 80209b8:	08024324 	.word	0x08024324
 80209bc:	08020189 	.word	0x08020189

080209c0 <_free_r>:
 80209c0:	b538      	push	{r3, r4, r5, lr}
 80209c2:	4605      	mov	r5, r0
 80209c4:	2900      	cmp	r1, #0
 80209c6:	d041      	beq.n	8020a4c <_free_r+0x8c>
 80209c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80209cc:	1f0c      	subs	r4, r1, #4
 80209ce:	2b00      	cmp	r3, #0
 80209d0:	bfb8      	it	lt
 80209d2:	18e4      	addlt	r4, r4, r3
 80209d4:	f7ff fc8a 	bl	80202ec <__malloc_lock>
 80209d8:	4a1d      	ldr	r2, [pc, #116]	@ (8020a50 <_free_r+0x90>)
 80209da:	6813      	ldr	r3, [r2, #0]
 80209dc:	b933      	cbnz	r3, 80209ec <_free_r+0x2c>
 80209de:	6063      	str	r3, [r4, #4]
 80209e0:	6014      	str	r4, [r2, #0]
 80209e2:	4628      	mov	r0, r5
 80209e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80209e8:	f7ff bc86 	b.w	80202f8 <__malloc_unlock>
 80209ec:	42a3      	cmp	r3, r4
 80209ee:	d908      	bls.n	8020a02 <_free_r+0x42>
 80209f0:	6820      	ldr	r0, [r4, #0]
 80209f2:	1821      	adds	r1, r4, r0
 80209f4:	428b      	cmp	r3, r1
 80209f6:	bf01      	itttt	eq
 80209f8:	6819      	ldreq	r1, [r3, #0]
 80209fa:	685b      	ldreq	r3, [r3, #4]
 80209fc:	1809      	addeq	r1, r1, r0
 80209fe:	6021      	streq	r1, [r4, #0]
 8020a00:	e7ed      	b.n	80209de <_free_r+0x1e>
 8020a02:	461a      	mov	r2, r3
 8020a04:	685b      	ldr	r3, [r3, #4]
 8020a06:	b10b      	cbz	r3, 8020a0c <_free_r+0x4c>
 8020a08:	42a3      	cmp	r3, r4
 8020a0a:	d9fa      	bls.n	8020a02 <_free_r+0x42>
 8020a0c:	6811      	ldr	r1, [r2, #0]
 8020a0e:	1850      	adds	r0, r2, r1
 8020a10:	42a0      	cmp	r0, r4
 8020a12:	d10b      	bne.n	8020a2c <_free_r+0x6c>
 8020a14:	6820      	ldr	r0, [r4, #0]
 8020a16:	4401      	add	r1, r0
 8020a18:	1850      	adds	r0, r2, r1
 8020a1a:	4283      	cmp	r3, r0
 8020a1c:	6011      	str	r1, [r2, #0]
 8020a1e:	d1e0      	bne.n	80209e2 <_free_r+0x22>
 8020a20:	6818      	ldr	r0, [r3, #0]
 8020a22:	685b      	ldr	r3, [r3, #4]
 8020a24:	6053      	str	r3, [r2, #4]
 8020a26:	4408      	add	r0, r1
 8020a28:	6010      	str	r0, [r2, #0]
 8020a2a:	e7da      	b.n	80209e2 <_free_r+0x22>
 8020a2c:	d902      	bls.n	8020a34 <_free_r+0x74>
 8020a2e:	230c      	movs	r3, #12
 8020a30:	602b      	str	r3, [r5, #0]
 8020a32:	e7d6      	b.n	80209e2 <_free_r+0x22>
 8020a34:	6820      	ldr	r0, [r4, #0]
 8020a36:	1821      	adds	r1, r4, r0
 8020a38:	428b      	cmp	r3, r1
 8020a3a:	bf04      	itt	eq
 8020a3c:	6819      	ldreq	r1, [r3, #0]
 8020a3e:	685b      	ldreq	r3, [r3, #4]
 8020a40:	6063      	str	r3, [r4, #4]
 8020a42:	bf04      	itt	eq
 8020a44:	1809      	addeq	r1, r1, r0
 8020a46:	6021      	streq	r1, [r4, #0]
 8020a48:	6054      	str	r4, [r2, #4]
 8020a4a:	e7ca      	b.n	80209e2 <_free_r+0x22>
 8020a4c:	bd38      	pop	{r3, r4, r5, pc}
 8020a4e:	bf00      	nop
 8020a50:	24025a94 	.word	0x24025a94

08020a54 <__sfputc_r>:
 8020a54:	6893      	ldr	r3, [r2, #8]
 8020a56:	3b01      	subs	r3, #1
 8020a58:	2b00      	cmp	r3, #0
 8020a5a:	b410      	push	{r4}
 8020a5c:	6093      	str	r3, [r2, #8]
 8020a5e:	da08      	bge.n	8020a72 <__sfputc_r+0x1e>
 8020a60:	6994      	ldr	r4, [r2, #24]
 8020a62:	42a3      	cmp	r3, r4
 8020a64:	db01      	blt.n	8020a6a <__sfputc_r+0x16>
 8020a66:	290a      	cmp	r1, #10
 8020a68:	d103      	bne.n	8020a72 <__sfputc_r+0x1e>
 8020a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020a6e:	f7ff bdac 	b.w	80205ca <__swbuf_r>
 8020a72:	6813      	ldr	r3, [r2, #0]
 8020a74:	1c58      	adds	r0, r3, #1
 8020a76:	6010      	str	r0, [r2, #0]
 8020a78:	7019      	strb	r1, [r3, #0]
 8020a7a:	4608      	mov	r0, r1
 8020a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020a80:	4770      	bx	lr

08020a82 <__sfputs_r>:
 8020a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a84:	4606      	mov	r6, r0
 8020a86:	460f      	mov	r7, r1
 8020a88:	4614      	mov	r4, r2
 8020a8a:	18d5      	adds	r5, r2, r3
 8020a8c:	42ac      	cmp	r4, r5
 8020a8e:	d101      	bne.n	8020a94 <__sfputs_r+0x12>
 8020a90:	2000      	movs	r0, #0
 8020a92:	e007      	b.n	8020aa4 <__sfputs_r+0x22>
 8020a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020a98:	463a      	mov	r2, r7
 8020a9a:	4630      	mov	r0, r6
 8020a9c:	f7ff ffda 	bl	8020a54 <__sfputc_r>
 8020aa0:	1c43      	adds	r3, r0, #1
 8020aa2:	d1f3      	bne.n	8020a8c <__sfputs_r+0xa>
 8020aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020aa8 <_vfiprintf_r>:
 8020aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020aac:	460d      	mov	r5, r1
 8020aae:	b09d      	sub	sp, #116	@ 0x74
 8020ab0:	4614      	mov	r4, r2
 8020ab2:	4698      	mov	r8, r3
 8020ab4:	4606      	mov	r6, r0
 8020ab6:	b118      	cbz	r0, 8020ac0 <_vfiprintf_r+0x18>
 8020ab8:	6a03      	ldr	r3, [r0, #32]
 8020aba:	b90b      	cbnz	r3, 8020ac0 <_vfiprintf_r+0x18>
 8020abc:	f7ff fcfa 	bl	80204b4 <__sinit>
 8020ac0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020ac2:	07d9      	lsls	r1, r3, #31
 8020ac4:	d405      	bmi.n	8020ad2 <_vfiprintf_r+0x2a>
 8020ac6:	89ab      	ldrh	r3, [r5, #12]
 8020ac8:	059a      	lsls	r2, r3, #22
 8020aca:	d402      	bmi.n	8020ad2 <_vfiprintf_r+0x2a>
 8020acc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020ace:	f7ff ff0a 	bl	80208e6 <__retarget_lock_acquire_recursive>
 8020ad2:	89ab      	ldrh	r3, [r5, #12]
 8020ad4:	071b      	lsls	r3, r3, #28
 8020ad6:	d501      	bpl.n	8020adc <_vfiprintf_r+0x34>
 8020ad8:	692b      	ldr	r3, [r5, #16]
 8020ada:	b99b      	cbnz	r3, 8020b04 <_vfiprintf_r+0x5c>
 8020adc:	4629      	mov	r1, r5
 8020ade:	4630      	mov	r0, r6
 8020ae0:	f7ff fdb2 	bl	8020648 <__swsetup_r>
 8020ae4:	b170      	cbz	r0, 8020b04 <_vfiprintf_r+0x5c>
 8020ae6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020ae8:	07dc      	lsls	r4, r3, #31
 8020aea:	d504      	bpl.n	8020af6 <_vfiprintf_r+0x4e>
 8020aec:	f04f 30ff 	mov.w	r0, #4294967295
 8020af0:	b01d      	add	sp, #116	@ 0x74
 8020af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020af6:	89ab      	ldrh	r3, [r5, #12]
 8020af8:	0598      	lsls	r0, r3, #22
 8020afa:	d4f7      	bmi.n	8020aec <_vfiprintf_r+0x44>
 8020afc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020afe:	f7ff fef3 	bl	80208e8 <__retarget_lock_release_recursive>
 8020b02:	e7f3      	b.n	8020aec <_vfiprintf_r+0x44>
 8020b04:	2300      	movs	r3, #0
 8020b06:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b08:	2320      	movs	r3, #32
 8020b0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020b0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8020b12:	2330      	movs	r3, #48	@ 0x30
 8020b14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020cc4 <_vfiprintf_r+0x21c>
 8020b18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020b1c:	f04f 0901 	mov.w	r9, #1
 8020b20:	4623      	mov	r3, r4
 8020b22:	469a      	mov	sl, r3
 8020b24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020b28:	b10a      	cbz	r2, 8020b2e <_vfiprintf_r+0x86>
 8020b2a:	2a25      	cmp	r2, #37	@ 0x25
 8020b2c:	d1f9      	bne.n	8020b22 <_vfiprintf_r+0x7a>
 8020b2e:	ebba 0b04 	subs.w	fp, sl, r4
 8020b32:	d00b      	beq.n	8020b4c <_vfiprintf_r+0xa4>
 8020b34:	465b      	mov	r3, fp
 8020b36:	4622      	mov	r2, r4
 8020b38:	4629      	mov	r1, r5
 8020b3a:	4630      	mov	r0, r6
 8020b3c:	f7ff ffa1 	bl	8020a82 <__sfputs_r>
 8020b40:	3001      	adds	r0, #1
 8020b42:	f000 80a7 	beq.w	8020c94 <_vfiprintf_r+0x1ec>
 8020b46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020b48:	445a      	add	r2, fp
 8020b4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8020b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8020b50:	2b00      	cmp	r3, #0
 8020b52:	f000 809f 	beq.w	8020c94 <_vfiprintf_r+0x1ec>
 8020b56:	2300      	movs	r3, #0
 8020b58:	f04f 32ff 	mov.w	r2, #4294967295
 8020b5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020b60:	f10a 0a01 	add.w	sl, sl, #1
 8020b64:	9304      	str	r3, [sp, #16]
 8020b66:	9307      	str	r3, [sp, #28]
 8020b68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020b6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8020b6e:	4654      	mov	r4, sl
 8020b70:	2205      	movs	r2, #5
 8020b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b76:	4853      	ldr	r0, [pc, #332]	@ (8020cc4 <_vfiprintf_r+0x21c>)
 8020b78:	f7df fbb2 	bl	80002e0 <memchr>
 8020b7c:	9a04      	ldr	r2, [sp, #16]
 8020b7e:	b9d8      	cbnz	r0, 8020bb8 <_vfiprintf_r+0x110>
 8020b80:	06d1      	lsls	r1, r2, #27
 8020b82:	bf44      	itt	mi
 8020b84:	2320      	movmi	r3, #32
 8020b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020b8a:	0713      	lsls	r3, r2, #28
 8020b8c:	bf44      	itt	mi
 8020b8e:	232b      	movmi	r3, #43	@ 0x2b
 8020b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020b94:	f89a 3000 	ldrb.w	r3, [sl]
 8020b98:	2b2a      	cmp	r3, #42	@ 0x2a
 8020b9a:	d015      	beq.n	8020bc8 <_vfiprintf_r+0x120>
 8020b9c:	9a07      	ldr	r2, [sp, #28]
 8020b9e:	4654      	mov	r4, sl
 8020ba0:	2000      	movs	r0, #0
 8020ba2:	f04f 0c0a 	mov.w	ip, #10
 8020ba6:	4621      	mov	r1, r4
 8020ba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020bac:	3b30      	subs	r3, #48	@ 0x30
 8020bae:	2b09      	cmp	r3, #9
 8020bb0:	d94b      	bls.n	8020c4a <_vfiprintf_r+0x1a2>
 8020bb2:	b1b0      	cbz	r0, 8020be2 <_vfiprintf_r+0x13a>
 8020bb4:	9207      	str	r2, [sp, #28]
 8020bb6:	e014      	b.n	8020be2 <_vfiprintf_r+0x13a>
 8020bb8:	eba0 0308 	sub.w	r3, r0, r8
 8020bbc:	fa09 f303 	lsl.w	r3, r9, r3
 8020bc0:	4313      	orrs	r3, r2
 8020bc2:	9304      	str	r3, [sp, #16]
 8020bc4:	46a2      	mov	sl, r4
 8020bc6:	e7d2      	b.n	8020b6e <_vfiprintf_r+0xc6>
 8020bc8:	9b03      	ldr	r3, [sp, #12]
 8020bca:	1d19      	adds	r1, r3, #4
 8020bcc:	681b      	ldr	r3, [r3, #0]
 8020bce:	9103      	str	r1, [sp, #12]
 8020bd0:	2b00      	cmp	r3, #0
 8020bd2:	bfbb      	ittet	lt
 8020bd4:	425b      	neglt	r3, r3
 8020bd6:	f042 0202 	orrlt.w	r2, r2, #2
 8020bda:	9307      	strge	r3, [sp, #28]
 8020bdc:	9307      	strlt	r3, [sp, #28]
 8020bde:	bfb8      	it	lt
 8020be0:	9204      	strlt	r2, [sp, #16]
 8020be2:	7823      	ldrb	r3, [r4, #0]
 8020be4:	2b2e      	cmp	r3, #46	@ 0x2e
 8020be6:	d10a      	bne.n	8020bfe <_vfiprintf_r+0x156>
 8020be8:	7863      	ldrb	r3, [r4, #1]
 8020bea:	2b2a      	cmp	r3, #42	@ 0x2a
 8020bec:	d132      	bne.n	8020c54 <_vfiprintf_r+0x1ac>
 8020bee:	9b03      	ldr	r3, [sp, #12]
 8020bf0:	1d1a      	adds	r2, r3, #4
 8020bf2:	681b      	ldr	r3, [r3, #0]
 8020bf4:	9203      	str	r2, [sp, #12]
 8020bf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020bfa:	3402      	adds	r4, #2
 8020bfc:	9305      	str	r3, [sp, #20]
 8020bfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8020cd4 <_vfiprintf_r+0x22c>
 8020c02:	7821      	ldrb	r1, [r4, #0]
 8020c04:	2203      	movs	r2, #3
 8020c06:	4650      	mov	r0, sl
 8020c08:	f7df fb6a 	bl	80002e0 <memchr>
 8020c0c:	b138      	cbz	r0, 8020c1e <_vfiprintf_r+0x176>
 8020c0e:	9b04      	ldr	r3, [sp, #16]
 8020c10:	eba0 000a 	sub.w	r0, r0, sl
 8020c14:	2240      	movs	r2, #64	@ 0x40
 8020c16:	4082      	lsls	r2, r0
 8020c18:	4313      	orrs	r3, r2
 8020c1a:	3401      	adds	r4, #1
 8020c1c:	9304      	str	r3, [sp, #16]
 8020c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020c22:	4829      	ldr	r0, [pc, #164]	@ (8020cc8 <_vfiprintf_r+0x220>)
 8020c24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020c28:	2206      	movs	r2, #6
 8020c2a:	f7df fb59 	bl	80002e0 <memchr>
 8020c2e:	2800      	cmp	r0, #0
 8020c30:	d03f      	beq.n	8020cb2 <_vfiprintf_r+0x20a>
 8020c32:	4b26      	ldr	r3, [pc, #152]	@ (8020ccc <_vfiprintf_r+0x224>)
 8020c34:	bb1b      	cbnz	r3, 8020c7e <_vfiprintf_r+0x1d6>
 8020c36:	9b03      	ldr	r3, [sp, #12]
 8020c38:	3307      	adds	r3, #7
 8020c3a:	f023 0307 	bic.w	r3, r3, #7
 8020c3e:	3308      	adds	r3, #8
 8020c40:	9303      	str	r3, [sp, #12]
 8020c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020c44:	443b      	add	r3, r7
 8020c46:	9309      	str	r3, [sp, #36]	@ 0x24
 8020c48:	e76a      	b.n	8020b20 <_vfiprintf_r+0x78>
 8020c4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8020c4e:	460c      	mov	r4, r1
 8020c50:	2001      	movs	r0, #1
 8020c52:	e7a8      	b.n	8020ba6 <_vfiprintf_r+0xfe>
 8020c54:	2300      	movs	r3, #0
 8020c56:	3401      	adds	r4, #1
 8020c58:	9305      	str	r3, [sp, #20]
 8020c5a:	4619      	mov	r1, r3
 8020c5c:	f04f 0c0a 	mov.w	ip, #10
 8020c60:	4620      	mov	r0, r4
 8020c62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020c66:	3a30      	subs	r2, #48	@ 0x30
 8020c68:	2a09      	cmp	r2, #9
 8020c6a:	d903      	bls.n	8020c74 <_vfiprintf_r+0x1cc>
 8020c6c:	2b00      	cmp	r3, #0
 8020c6e:	d0c6      	beq.n	8020bfe <_vfiprintf_r+0x156>
 8020c70:	9105      	str	r1, [sp, #20]
 8020c72:	e7c4      	b.n	8020bfe <_vfiprintf_r+0x156>
 8020c74:	fb0c 2101 	mla	r1, ip, r1, r2
 8020c78:	4604      	mov	r4, r0
 8020c7a:	2301      	movs	r3, #1
 8020c7c:	e7f0      	b.n	8020c60 <_vfiprintf_r+0x1b8>
 8020c7e:	ab03      	add	r3, sp, #12
 8020c80:	9300      	str	r3, [sp, #0]
 8020c82:	462a      	mov	r2, r5
 8020c84:	4b12      	ldr	r3, [pc, #72]	@ (8020cd0 <_vfiprintf_r+0x228>)
 8020c86:	a904      	add	r1, sp, #16
 8020c88:	4630      	mov	r0, r6
 8020c8a:	f3af 8000 	nop.w
 8020c8e:	4607      	mov	r7, r0
 8020c90:	1c78      	adds	r0, r7, #1
 8020c92:	d1d6      	bne.n	8020c42 <_vfiprintf_r+0x19a>
 8020c94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020c96:	07d9      	lsls	r1, r3, #31
 8020c98:	d405      	bmi.n	8020ca6 <_vfiprintf_r+0x1fe>
 8020c9a:	89ab      	ldrh	r3, [r5, #12]
 8020c9c:	059a      	lsls	r2, r3, #22
 8020c9e:	d402      	bmi.n	8020ca6 <_vfiprintf_r+0x1fe>
 8020ca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020ca2:	f7ff fe21 	bl	80208e8 <__retarget_lock_release_recursive>
 8020ca6:	89ab      	ldrh	r3, [r5, #12]
 8020ca8:	065b      	lsls	r3, r3, #25
 8020caa:	f53f af1f 	bmi.w	8020aec <_vfiprintf_r+0x44>
 8020cae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020cb0:	e71e      	b.n	8020af0 <_vfiprintf_r+0x48>
 8020cb2:	ab03      	add	r3, sp, #12
 8020cb4:	9300      	str	r3, [sp, #0]
 8020cb6:	462a      	mov	r2, r5
 8020cb8:	4b05      	ldr	r3, [pc, #20]	@ (8020cd0 <_vfiprintf_r+0x228>)
 8020cba:	a904      	add	r1, sp, #16
 8020cbc:	4630      	mov	r0, r6
 8020cbe:	f000 f879 	bl	8020db4 <_printf_i>
 8020cc2:	e7e4      	b.n	8020c8e <_vfiprintf_r+0x1e6>
 8020cc4:	08024328 	.word	0x08024328
 8020cc8:	08024332 	.word	0x08024332
 8020ccc:	00000000 	.word	0x00000000
 8020cd0:	08020a83 	.word	0x08020a83
 8020cd4:	0802432e 	.word	0x0802432e

08020cd8 <_printf_common>:
 8020cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020cdc:	4616      	mov	r6, r2
 8020cde:	4698      	mov	r8, r3
 8020ce0:	688a      	ldr	r2, [r1, #8]
 8020ce2:	690b      	ldr	r3, [r1, #16]
 8020ce4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020ce8:	4293      	cmp	r3, r2
 8020cea:	bfb8      	it	lt
 8020cec:	4613      	movlt	r3, r2
 8020cee:	6033      	str	r3, [r6, #0]
 8020cf0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020cf4:	4607      	mov	r7, r0
 8020cf6:	460c      	mov	r4, r1
 8020cf8:	b10a      	cbz	r2, 8020cfe <_printf_common+0x26>
 8020cfa:	3301      	adds	r3, #1
 8020cfc:	6033      	str	r3, [r6, #0]
 8020cfe:	6823      	ldr	r3, [r4, #0]
 8020d00:	0699      	lsls	r1, r3, #26
 8020d02:	bf42      	ittt	mi
 8020d04:	6833      	ldrmi	r3, [r6, #0]
 8020d06:	3302      	addmi	r3, #2
 8020d08:	6033      	strmi	r3, [r6, #0]
 8020d0a:	6825      	ldr	r5, [r4, #0]
 8020d0c:	f015 0506 	ands.w	r5, r5, #6
 8020d10:	d106      	bne.n	8020d20 <_printf_common+0x48>
 8020d12:	f104 0a19 	add.w	sl, r4, #25
 8020d16:	68e3      	ldr	r3, [r4, #12]
 8020d18:	6832      	ldr	r2, [r6, #0]
 8020d1a:	1a9b      	subs	r3, r3, r2
 8020d1c:	42ab      	cmp	r3, r5
 8020d1e:	dc26      	bgt.n	8020d6e <_printf_common+0x96>
 8020d20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8020d24:	6822      	ldr	r2, [r4, #0]
 8020d26:	3b00      	subs	r3, #0
 8020d28:	bf18      	it	ne
 8020d2a:	2301      	movne	r3, #1
 8020d2c:	0692      	lsls	r2, r2, #26
 8020d2e:	d42b      	bmi.n	8020d88 <_printf_common+0xb0>
 8020d30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8020d34:	4641      	mov	r1, r8
 8020d36:	4638      	mov	r0, r7
 8020d38:	47c8      	blx	r9
 8020d3a:	3001      	adds	r0, #1
 8020d3c:	d01e      	beq.n	8020d7c <_printf_common+0xa4>
 8020d3e:	6823      	ldr	r3, [r4, #0]
 8020d40:	6922      	ldr	r2, [r4, #16]
 8020d42:	f003 0306 	and.w	r3, r3, #6
 8020d46:	2b04      	cmp	r3, #4
 8020d48:	bf02      	ittt	eq
 8020d4a:	68e5      	ldreq	r5, [r4, #12]
 8020d4c:	6833      	ldreq	r3, [r6, #0]
 8020d4e:	1aed      	subeq	r5, r5, r3
 8020d50:	68a3      	ldr	r3, [r4, #8]
 8020d52:	bf0c      	ite	eq
 8020d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020d58:	2500      	movne	r5, #0
 8020d5a:	4293      	cmp	r3, r2
 8020d5c:	bfc4      	itt	gt
 8020d5e:	1a9b      	subgt	r3, r3, r2
 8020d60:	18ed      	addgt	r5, r5, r3
 8020d62:	2600      	movs	r6, #0
 8020d64:	341a      	adds	r4, #26
 8020d66:	42b5      	cmp	r5, r6
 8020d68:	d11a      	bne.n	8020da0 <_printf_common+0xc8>
 8020d6a:	2000      	movs	r0, #0
 8020d6c:	e008      	b.n	8020d80 <_printf_common+0xa8>
 8020d6e:	2301      	movs	r3, #1
 8020d70:	4652      	mov	r2, sl
 8020d72:	4641      	mov	r1, r8
 8020d74:	4638      	mov	r0, r7
 8020d76:	47c8      	blx	r9
 8020d78:	3001      	adds	r0, #1
 8020d7a:	d103      	bne.n	8020d84 <_printf_common+0xac>
 8020d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8020d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d84:	3501      	adds	r5, #1
 8020d86:	e7c6      	b.n	8020d16 <_printf_common+0x3e>
 8020d88:	18e1      	adds	r1, r4, r3
 8020d8a:	1c5a      	adds	r2, r3, #1
 8020d8c:	2030      	movs	r0, #48	@ 0x30
 8020d8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8020d92:	4422      	add	r2, r4
 8020d94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8020d98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8020d9c:	3302      	adds	r3, #2
 8020d9e:	e7c7      	b.n	8020d30 <_printf_common+0x58>
 8020da0:	2301      	movs	r3, #1
 8020da2:	4622      	mov	r2, r4
 8020da4:	4641      	mov	r1, r8
 8020da6:	4638      	mov	r0, r7
 8020da8:	47c8      	blx	r9
 8020daa:	3001      	adds	r0, #1
 8020dac:	d0e6      	beq.n	8020d7c <_printf_common+0xa4>
 8020dae:	3601      	adds	r6, #1
 8020db0:	e7d9      	b.n	8020d66 <_printf_common+0x8e>
	...

08020db4 <_printf_i>:
 8020db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020db8:	7e0f      	ldrb	r7, [r1, #24]
 8020dba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8020dbc:	2f78      	cmp	r7, #120	@ 0x78
 8020dbe:	4691      	mov	r9, r2
 8020dc0:	4680      	mov	r8, r0
 8020dc2:	460c      	mov	r4, r1
 8020dc4:	469a      	mov	sl, r3
 8020dc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8020dca:	d807      	bhi.n	8020ddc <_printf_i+0x28>
 8020dcc:	2f62      	cmp	r7, #98	@ 0x62
 8020dce:	d80a      	bhi.n	8020de6 <_printf_i+0x32>
 8020dd0:	2f00      	cmp	r7, #0
 8020dd2:	f000 80d2 	beq.w	8020f7a <_printf_i+0x1c6>
 8020dd6:	2f58      	cmp	r7, #88	@ 0x58
 8020dd8:	f000 80b9 	beq.w	8020f4e <_printf_i+0x19a>
 8020ddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020de0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8020de4:	e03a      	b.n	8020e5c <_printf_i+0xa8>
 8020de6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8020dea:	2b15      	cmp	r3, #21
 8020dec:	d8f6      	bhi.n	8020ddc <_printf_i+0x28>
 8020dee:	a101      	add	r1, pc, #4	@ (adr r1, 8020df4 <_printf_i+0x40>)
 8020df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020df4:	08020e4d 	.word	0x08020e4d
 8020df8:	08020e61 	.word	0x08020e61
 8020dfc:	08020ddd 	.word	0x08020ddd
 8020e00:	08020ddd 	.word	0x08020ddd
 8020e04:	08020ddd 	.word	0x08020ddd
 8020e08:	08020ddd 	.word	0x08020ddd
 8020e0c:	08020e61 	.word	0x08020e61
 8020e10:	08020ddd 	.word	0x08020ddd
 8020e14:	08020ddd 	.word	0x08020ddd
 8020e18:	08020ddd 	.word	0x08020ddd
 8020e1c:	08020ddd 	.word	0x08020ddd
 8020e20:	08020f61 	.word	0x08020f61
 8020e24:	08020e8b 	.word	0x08020e8b
 8020e28:	08020f1b 	.word	0x08020f1b
 8020e2c:	08020ddd 	.word	0x08020ddd
 8020e30:	08020ddd 	.word	0x08020ddd
 8020e34:	08020f83 	.word	0x08020f83
 8020e38:	08020ddd 	.word	0x08020ddd
 8020e3c:	08020e8b 	.word	0x08020e8b
 8020e40:	08020ddd 	.word	0x08020ddd
 8020e44:	08020ddd 	.word	0x08020ddd
 8020e48:	08020f23 	.word	0x08020f23
 8020e4c:	6833      	ldr	r3, [r6, #0]
 8020e4e:	1d1a      	adds	r2, r3, #4
 8020e50:	681b      	ldr	r3, [r3, #0]
 8020e52:	6032      	str	r2, [r6, #0]
 8020e54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020e58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8020e5c:	2301      	movs	r3, #1
 8020e5e:	e09d      	b.n	8020f9c <_printf_i+0x1e8>
 8020e60:	6833      	ldr	r3, [r6, #0]
 8020e62:	6820      	ldr	r0, [r4, #0]
 8020e64:	1d19      	adds	r1, r3, #4
 8020e66:	6031      	str	r1, [r6, #0]
 8020e68:	0606      	lsls	r6, r0, #24
 8020e6a:	d501      	bpl.n	8020e70 <_printf_i+0xbc>
 8020e6c:	681d      	ldr	r5, [r3, #0]
 8020e6e:	e003      	b.n	8020e78 <_printf_i+0xc4>
 8020e70:	0645      	lsls	r5, r0, #25
 8020e72:	d5fb      	bpl.n	8020e6c <_printf_i+0xb8>
 8020e74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8020e78:	2d00      	cmp	r5, #0
 8020e7a:	da03      	bge.n	8020e84 <_printf_i+0xd0>
 8020e7c:	232d      	movs	r3, #45	@ 0x2d
 8020e7e:	426d      	negs	r5, r5
 8020e80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020e84:	4859      	ldr	r0, [pc, #356]	@ (8020fec <_printf_i+0x238>)
 8020e86:	230a      	movs	r3, #10
 8020e88:	e011      	b.n	8020eae <_printf_i+0xfa>
 8020e8a:	6821      	ldr	r1, [r4, #0]
 8020e8c:	6833      	ldr	r3, [r6, #0]
 8020e8e:	0608      	lsls	r0, r1, #24
 8020e90:	f853 5b04 	ldr.w	r5, [r3], #4
 8020e94:	d402      	bmi.n	8020e9c <_printf_i+0xe8>
 8020e96:	0649      	lsls	r1, r1, #25
 8020e98:	bf48      	it	mi
 8020e9a:	b2ad      	uxthmi	r5, r5
 8020e9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8020e9e:	4853      	ldr	r0, [pc, #332]	@ (8020fec <_printf_i+0x238>)
 8020ea0:	6033      	str	r3, [r6, #0]
 8020ea2:	bf14      	ite	ne
 8020ea4:	230a      	movne	r3, #10
 8020ea6:	2308      	moveq	r3, #8
 8020ea8:	2100      	movs	r1, #0
 8020eaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8020eae:	6866      	ldr	r6, [r4, #4]
 8020eb0:	60a6      	str	r6, [r4, #8]
 8020eb2:	2e00      	cmp	r6, #0
 8020eb4:	bfa2      	ittt	ge
 8020eb6:	6821      	ldrge	r1, [r4, #0]
 8020eb8:	f021 0104 	bicge.w	r1, r1, #4
 8020ebc:	6021      	strge	r1, [r4, #0]
 8020ebe:	b90d      	cbnz	r5, 8020ec4 <_printf_i+0x110>
 8020ec0:	2e00      	cmp	r6, #0
 8020ec2:	d04b      	beq.n	8020f5c <_printf_i+0x1a8>
 8020ec4:	4616      	mov	r6, r2
 8020ec6:	fbb5 f1f3 	udiv	r1, r5, r3
 8020eca:	fb03 5711 	mls	r7, r3, r1, r5
 8020ece:	5dc7      	ldrb	r7, [r0, r7]
 8020ed0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020ed4:	462f      	mov	r7, r5
 8020ed6:	42bb      	cmp	r3, r7
 8020ed8:	460d      	mov	r5, r1
 8020eda:	d9f4      	bls.n	8020ec6 <_printf_i+0x112>
 8020edc:	2b08      	cmp	r3, #8
 8020ede:	d10b      	bne.n	8020ef8 <_printf_i+0x144>
 8020ee0:	6823      	ldr	r3, [r4, #0]
 8020ee2:	07df      	lsls	r7, r3, #31
 8020ee4:	d508      	bpl.n	8020ef8 <_printf_i+0x144>
 8020ee6:	6923      	ldr	r3, [r4, #16]
 8020ee8:	6861      	ldr	r1, [r4, #4]
 8020eea:	4299      	cmp	r1, r3
 8020eec:	bfde      	ittt	le
 8020eee:	2330      	movle	r3, #48	@ 0x30
 8020ef0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020ef4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8020ef8:	1b92      	subs	r2, r2, r6
 8020efa:	6122      	str	r2, [r4, #16]
 8020efc:	f8cd a000 	str.w	sl, [sp]
 8020f00:	464b      	mov	r3, r9
 8020f02:	aa03      	add	r2, sp, #12
 8020f04:	4621      	mov	r1, r4
 8020f06:	4640      	mov	r0, r8
 8020f08:	f7ff fee6 	bl	8020cd8 <_printf_common>
 8020f0c:	3001      	adds	r0, #1
 8020f0e:	d14a      	bne.n	8020fa6 <_printf_i+0x1f2>
 8020f10:	f04f 30ff 	mov.w	r0, #4294967295
 8020f14:	b004      	add	sp, #16
 8020f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020f1a:	6823      	ldr	r3, [r4, #0]
 8020f1c:	f043 0320 	orr.w	r3, r3, #32
 8020f20:	6023      	str	r3, [r4, #0]
 8020f22:	4833      	ldr	r0, [pc, #204]	@ (8020ff0 <_printf_i+0x23c>)
 8020f24:	2778      	movs	r7, #120	@ 0x78
 8020f26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8020f2a:	6823      	ldr	r3, [r4, #0]
 8020f2c:	6831      	ldr	r1, [r6, #0]
 8020f2e:	061f      	lsls	r7, r3, #24
 8020f30:	f851 5b04 	ldr.w	r5, [r1], #4
 8020f34:	d402      	bmi.n	8020f3c <_printf_i+0x188>
 8020f36:	065f      	lsls	r7, r3, #25
 8020f38:	bf48      	it	mi
 8020f3a:	b2ad      	uxthmi	r5, r5
 8020f3c:	6031      	str	r1, [r6, #0]
 8020f3e:	07d9      	lsls	r1, r3, #31
 8020f40:	bf44      	itt	mi
 8020f42:	f043 0320 	orrmi.w	r3, r3, #32
 8020f46:	6023      	strmi	r3, [r4, #0]
 8020f48:	b11d      	cbz	r5, 8020f52 <_printf_i+0x19e>
 8020f4a:	2310      	movs	r3, #16
 8020f4c:	e7ac      	b.n	8020ea8 <_printf_i+0xf4>
 8020f4e:	4827      	ldr	r0, [pc, #156]	@ (8020fec <_printf_i+0x238>)
 8020f50:	e7e9      	b.n	8020f26 <_printf_i+0x172>
 8020f52:	6823      	ldr	r3, [r4, #0]
 8020f54:	f023 0320 	bic.w	r3, r3, #32
 8020f58:	6023      	str	r3, [r4, #0]
 8020f5a:	e7f6      	b.n	8020f4a <_printf_i+0x196>
 8020f5c:	4616      	mov	r6, r2
 8020f5e:	e7bd      	b.n	8020edc <_printf_i+0x128>
 8020f60:	6833      	ldr	r3, [r6, #0]
 8020f62:	6825      	ldr	r5, [r4, #0]
 8020f64:	6961      	ldr	r1, [r4, #20]
 8020f66:	1d18      	adds	r0, r3, #4
 8020f68:	6030      	str	r0, [r6, #0]
 8020f6a:	062e      	lsls	r6, r5, #24
 8020f6c:	681b      	ldr	r3, [r3, #0]
 8020f6e:	d501      	bpl.n	8020f74 <_printf_i+0x1c0>
 8020f70:	6019      	str	r1, [r3, #0]
 8020f72:	e002      	b.n	8020f7a <_printf_i+0x1c6>
 8020f74:	0668      	lsls	r0, r5, #25
 8020f76:	d5fb      	bpl.n	8020f70 <_printf_i+0x1bc>
 8020f78:	8019      	strh	r1, [r3, #0]
 8020f7a:	2300      	movs	r3, #0
 8020f7c:	6123      	str	r3, [r4, #16]
 8020f7e:	4616      	mov	r6, r2
 8020f80:	e7bc      	b.n	8020efc <_printf_i+0x148>
 8020f82:	6833      	ldr	r3, [r6, #0]
 8020f84:	1d1a      	adds	r2, r3, #4
 8020f86:	6032      	str	r2, [r6, #0]
 8020f88:	681e      	ldr	r6, [r3, #0]
 8020f8a:	6862      	ldr	r2, [r4, #4]
 8020f8c:	2100      	movs	r1, #0
 8020f8e:	4630      	mov	r0, r6
 8020f90:	f7df f9a6 	bl	80002e0 <memchr>
 8020f94:	b108      	cbz	r0, 8020f9a <_printf_i+0x1e6>
 8020f96:	1b80      	subs	r0, r0, r6
 8020f98:	6060      	str	r0, [r4, #4]
 8020f9a:	6863      	ldr	r3, [r4, #4]
 8020f9c:	6123      	str	r3, [r4, #16]
 8020f9e:	2300      	movs	r3, #0
 8020fa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020fa4:	e7aa      	b.n	8020efc <_printf_i+0x148>
 8020fa6:	6923      	ldr	r3, [r4, #16]
 8020fa8:	4632      	mov	r2, r6
 8020faa:	4649      	mov	r1, r9
 8020fac:	4640      	mov	r0, r8
 8020fae:	47d0      	blx	sl
 8020fb0:	3001      	adds	r0, #1
 8020fb2:	d0ad      	beq.n	8020f10 <_printf_i+0x15c>
 8020fb4:	6823      	ldr	r3, [r4, #0]
 8020fb6:	079b      	lsls	r3, r3, #30
 8020fb8:	d413      	bmi.n	8020fe2 <_printf_i+0x22e>
 8020fba:	68e0      	ldr	r0, [r4, #12]
 8020fbc:	9b03      	ldr	r3, [sp, #12]
 8020fbe:	4298      	cmp	r0, r3
 8020fc0:	bfb8      	it	lt
 8020fc2:	4618      	movlt	r0, r3
 8020fc4:	e7a6      	b.n	8020f14 <_printf_i+0x160>
 8020fc6:	2301      	movs	r3, #1
 8020fc8:	4632      	mov	r2, r6
 8020fca:	4649      	mov	r1, r9
 8020fcc:	4640      	mov	r0, r8
 8020fce:	47d0      	blx	sl
 8020fd0:	3001      	adds	r0, #1
 8020fd2:	d09d      	beq.n	8020f10 <_printf_i+0x15c>
 8020fd4:	3501      	adds	r5, #1
 8020fd6:	68e3      	ldr	r3, [r4, #12]
 8020fd8:	9903      	ldr	r1, [sp, #12]
 8020fda:	1a5b      	subs	r3, r3, r1
 8020fdc:	42ab      	cmp	r3, r5
 8020fde:	dcf2      	bgt.n	8020fc6 <_printf_i+0x212>
 8020fe0:	e7eb      	b.n	8020fba <_printf_i+0x206>
 8020fe2:	2500      	movs	r5, #0
 8020fe4:	f104 0619 	add.w	r6, r4, #25
 8020fe8:	e7f5      	b.n	8020fd6 <_printf_i+0x222>
 8020fea:	bf00      	nop
 8020fec:	08024339 	.word	0x08024339
 8020ff0:	0802434a 	.word	0x0802434a

08020ff4 <__sflush_r>:
 8020ff4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ffc:	0716      	lsls	r6, r2, #28
 8020ffe:	4605      	mov	r5, r0
 8021000:	460c      	mov	r4, r1
 8021002:	d454      	bmi.n	80210ae <__sflush_r+0xba>
 8021004:	684b      	ldr	r3, [r1, #4]
 8021006:	2b00      	cmp	r3, #0
 8021008:	dc02      	bgt.n	8021010 <__sflush_r+0x1c>
 802100a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802100c:	2b00      	cmp	r3, #0
 802100e:	dd48      	ble.n	80210a2 <__sflush_r+0xae>
 8021010:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021012:	2e00      	cmp	r6, #0
 8021014:	d045      	beq.n	80210a2 <__sflush_r+0xae>
 8021016:	2300      	movs	r3, #0
 8021018:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802101c:	682f      	ldr	r7, [r5, #0]
 802101e:	6a21      	ldr	r1, [r4, #32]
 8021020:	602b      	str	r3, [r5, #0]
 8021022:	d030      	beq.n	8021086 <__sflush_r+0x92>
 8021024:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021026:	89a3      	ldrh	r3, [r4, #12]
 8021028:	0759      	lsls	r1, r3, #29
 802102a:	d505      	bpl.n	8021038 <__sflush_r+0x44>
 802102c:	6863      	ldr	r3, [r4, #4]
 802102e:	1ad2      	subs	r2, r2, r3
 8021030:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021032:	b10b      	cbz	r3, 8021038 <__sflush_r+0x44>
 8021034:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021036:	1ad2      	subs	r2, r2, r3
 8021038:	2300      	movs	r3, #0
 802103a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802103c:	6a21      	ldr	r1, [r4, #32]
 802103e:	4628      	mov	r0, r5
 8021040:	47b0      	blx	r6
 8021042:	1c43      	adds	r3, r0, #1
 8021044:	89a3      	ldrh	r3, [r4, #12]
 8021046:	d106      	bne.n	8021056 <__sflush_r+0x62>
 8021048:	6829      	ldr	r1, [r5, #0]
 802104a:	291d      	cmp	r1, #29
 802104c:	d82b      	bhi.n	80210a6 <__sflush_r+0xb2>
 802104e:	4a2a      	ldr	r2, [pc, #168]	@ (80210f8 <__sflush_r+0x104>)
 8021050:	410a      	asrs	r2, r1
 8021052:	07d6      	lsls	r6, r2, #31
 8021054:	d427      	bmi.n	80210a6 <__sflush_r+0xb2>
 8021056:	2200      	movs	r2, #0
 8021058:	6062      	str	r2, [r4, #4]
 802105a:	04d9      	lsls	r1, r3, #19
 802105c:	6922      	ldr	r2, [r4, #16]
 802105e:	6022      	str	r2, [r4, #0]
 8021060:	d504      	bpl.n	802106c <__sflush_r+0x78>
 8021062:	1c42      	adds	r2, r0, #1
 8021064:	d101      	bne.n	802106a <__sflush_r+0x76>
 8021066:	682b      	ldr	r3, [r5, #0]
 8021068:	b903      	cbnz	r3, 802106c <__sflush_r+0x78>
 802106a:	6560      	str	r0, [r4, #84]	@ 0x54
 802106c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802106e:	602f      	str	r7, [r5, #0]
 8021070:	b1b9      	cbz	r1, 80210a2 <__sflush_r+0xae>
 8021072:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021076:	4299      	cmp	r1, r3
 8021078:	d002      	beq.n	8021080 <__sflush_r+0x8c>
 802107a:	4628      	mov	r0, r5
 802107c:	f7ff fca0 	bl	80209c0 <_free_r>
 8021080:	2300      	movs	r3, #0
 8021082:	6363      	str	r3, [r4, #52]	@ 0x34
 8021084:	e00d      	b.n	80210a2 <__sflush_r+0xae>
 8021086:	2301      	movs	r3, #1
 8021088:	4628      	mov	r0, r5
 802108a:	47b0      	blx	r6
 802108c:	4602      	mov	r2, r0
 802108e:	1c50      	adds	r0, r2, #1
 8021090:	d1c9      	bne.n	8021026 <__sflush_r+0x32>
 8021092:	682b      	ldr	r3, [r5, #0]
 8021094:	2b00      	cmp	r3, #0
 8021096:	d0c6      	beq.n	8021026 <__sflush_r+0x32>
 8021098:	2b1d      	cmp	r3, #29
 802109a:	d001      	beq.n	80210a0 <__sflush_r+0xac>
 802109c:	2b16      	cmp	r3, #22
 802109e:	d11e      	bne.n	80210de <__sflush_r+0xea>
 80210a0:	602f      	str	r7, [r5, #0]
 80210a2:	2000      	movs	r0, #0
 80210a4:	e022      	b.n	80210ec <__sflush_r+0xf8>
 80210a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80210aa:	b21b      	sxth	r3, r3
 80210ac:	e01b      	b.n	80210e6 <__sflush_r+0xf2>
 80210ae:	690f      	ldr	r7, [r1, #16]
 80210b0:	2f00      	cmp	r7, #0
 80210b2:	d0f6      	beq.n	80210a2 <__sflush_r+0xae>
 80210b4:	0793      	lsls	r3, r2, #30
 80210b6:	680e      	ldr	r6, [r1, #0]
 80210b8:	bf08      	it	eq
 80210ba:	694b      	ldreq	r3, [r1, #20]
 80210bc:	600f      	str	r7, [r1, #0]
 80210be:	bf18      	it	ne
 80210c0:	2300      	movne	r3, #0
 80210c2:	eba6 0807 	sub.w	r8, r6, r7
 80210c6:	608b      	str	r3, [r1, #8]
 80210c8:	f1b8 0f00 	cmp.w	r8, #0
 80210cc:	dde9      	ble.n	80210a2 <__sflush_r+0xae>
 80210ce:	6a21      	ldr	r1, [r4, #32]
 80210d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80210d2:	4643      	mov	r3, r8
 80210d4:	463a      	mov	r2, r7
 80210d6:	4628      	mov	r0, r5
 80210d8:	47b0      	blx	r6
 80210da:	2800      	cmp	r0, #0
 80210dc:	dc08      	bgt.n	80210f0 <__sflush_r+0xfc>
 80210de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80210e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80210e6:	81a3      	strh	r3, [r4, #12]
 80210e8:	f04f 30ff 	mov.w	r0, #4294967295
 80210ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80210f0:	4407      	add	r7, r0
 80210f2:	eba8 0800 	sub.w	r8, r8, r0
 80210f6:	e7e7      	b.n	80210c8 <__sflush_r+0xd4>
 80210f8:	dfbffffe 	.word	0xdfbffffe

080210fc <_fflush_r>:
 80210fc:	b538      	push	{r3, r4, r5, lr}
 80210fe:	690b      	ldr	r3, [r1, #16]
 8021100:	4605      	mov	r5, r0
 8021102:	460c      	mov	r4, r1
 8021104:	b913      	cbnz	r3, 802110c <_fflush_r+0x10>
 8021106:	2500      	movs	r5, #0
 8021108:	4628      	mov	r0, r5
 802110a:	bd38      	pop	{r3, r4, r5, pc}
 802110c:	b118      	cbz	r0, 8021116 <_fflush_r+0x1a>
 802110e:	6a03      	ldr	r3, [r0, #32]
 8021110:	b90b      	cbnz	r3, 8021116 <_fflush_r+0x1a>
 8021112:	f7ff f9cf 	bl	80204b4 <__sinit>
 8021116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802111a:	2b00      	cmp	r3, #0
 802111c:	d0f3      	beq.n	8021106 <_fflush_r+0xa>
 802111e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021120:	07d0      	lsls	r0, r2, #31
 8021122:	d404      	bmi.n	802112e <_fflush_r+0x32>
 8021124:	0599      	lsls	r1, r3, #22
 8021126:	d402      	bmi.n	802112e <_fflush_r+0x32>
 8021128:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802112a:	f7ff fbdc 	bl	80208e6 <__retarget_lock_acquire_recursive>
 802112e:	4628      	mov	r0, r5
 8021130:	4621      	mov	r1, r4
 8021132:	f7ff ff5f 	bl	8020ff4 <__sflush_r>
 8021136:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021138:	07da      	lsls	r2, r3, #31
 802113a:	4605      	mov	r5, r0
 802113c:	d4e4      	bmi.n	8021108 <_fflush_r+0xc>
 802113e:	89a3      	ldrh	r3, [r4, #12]
 8021140:	059b      	lsls	r3, r3, #22
 8021142:	d4e1      	bmi.n	8021108 <_fflush_r+0xc>
 8021144:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021146:	f7ff fbcf 	bl	80208e8 <__retarget_lock_release_recursive>
 802114a:	e7dd      	b.n	8021108 <_fflush_r+0xc>

0802114c <__swhatbuf_r>:
 802114c:	b570      	push	{r4, r5, r6, lr}
 802114e:	460c      	mov	r4, r1
 8021150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021154:	2900      	cmp	r1, #0
 8021156:	b096      	sub	sp, #88	@ 0x58
 8021158:	4615      	mov	r5, r2
 802115a:	461e      	mov	r6, r3
 802115c:	da0d      	bge.n	802117a <__swhatbuf_r+0x2e>
 802115e:	89a3      	ldrh	r3, [r4, #12]
 8021160:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021164:	f04f 0100 	mov.w	r1, #0
 8021168:	bf14      	ite	ne
 802116a:	2340      	movne	r3, #64	@ 0x40
 802116c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021170:	2000      	movs	r0, #0
 8021172:	6031      	str	r1, [r6, #0]
 8021174:	602b      	str	r3, [r5, #0]
 8021176:	b016      	add	sp, #88	@ 0x58
 8021178:	bd70      	pop	{r4, r5, r6, pc}
 802117a:	466a      	mov	r2, sp
 802117c:	f000 f848 	bl	8021210 <_fstat_r>
 8021180:	2800      	cmp	r0, #0
 8021182:	dbec      	blt.n	802115e <__swhatbuf_r+0x12>
 8021184:	9901      	ldr	r1, [sp, #4]
 8021186:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802118a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802118e:	4259      	negs	r1, r3
 8021190:	4159      	adcs	r1, r3
 8021192:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021196:	e7eb      	b.n	8021170 <__swhatbuf_r+0x24>

08021198 <__smakebuf_r>:
 8021198:	898b      	ldrh	r3, [r1, #12]
 802119a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802119c:	079d      	lsls	r5, r3, #30
 802119e:	4606      	mov	r6, r0
 80211a0:	460c      	mov	r4, r1
 80211a2:	d507      	bpl.n	80211b4 <__smakebuf_r+0x1c>
 80211a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80211a8:	6023      	str	r3, [r4, #0]
 80211aa:	6123      	str	r3, [r4, #16]
 80211ac:	2301      	movs	r3, #1
 80211ae:	6163      	str	r3, [r4, #20]
 80211b0:	b003      	add	sp, #12
 80211b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80211b4:	ab01      	add	r3, sp, #4
 80211b6:	466a      	mov	r2, sp
 80211b8:	f7ff ffc8 	bl	802114c <__swhatbuf_r>
 80211bc:	9f00      	ldr	r7, [sp, #0]
 80211be:	4605      	mov	r5, r0
 80211c0:	4639      	mov	r1, r7
 80211c2:	4630      	mov	r0, r6
 80211c4:	f7ff f812 	bl	80201ec <_malloc_r>
 80211c8:	b948      	cbnz	r0, 80211de <__smakebuf_r+0x46>
 80211ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80211ce:	059a      	lsls	r2, r3, #22
 80211d0:	d4ee      	bmi.n	80211b0 <__smakebuf_r+0x18>
 80211d2:	f023 0303 	bic.w	r3, r3, #3
 80211d6:	f043 0302 	orr.w	r3, r3, #2
 80211da:	81a3      	strh	r3, [r4, #12]
 80211dc:	e7e2      	b.n	80211a4 <__smakebuf_r+0xc>
 80211de:	89a3      	ldrh	r3, [r4, #12]
 80211e0:	6020      	str	r0, [r4, #0]
 80211e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80211e6:	81a3      	strh	r3, [r4, #12]
 80211e8:	9b01      	ldr	r3, [sp, #4]
 80211ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80211ee:	b15b      	cbz	r3, 8021208 <__smakebuf_r+0x70>
 80211f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80211f4:	4630      	mov	r0, r6
 80211f6:	f000 f81d 	bl	8021234 <_isatty_r>
 80211fa:	b128      	cbz	r0, 8021208 <__smakebuf_r+0x70>
 80211fc:	89a3      	ldrh	r3, [r4, #12]
 80211fe:	f023 0303 	bic.w	r3, r3, #3
 8021202:	f043 0301 	orr.w	r3, r3, #1
 8021206:	81a3      	strh	r3, [r4, #12]
 8021208:	89a3      	ldrh	r3, [r4, #12]
 802120a:	431d      	orrs	r5, r3
 802120c:	81a5      	strh	r5, [r4, #12]
 802120e:	e7cf      	b.n	80211b0 <__smakebuf_r+0x18>

08021210 <_fstat_r>:
 8021210:	b538      	push	{r3, r4, r5, lr}
 8021212:	4d07      	ldr	r5, [pc, #28]	@ (8021230 <_fstat_r+0x20>)
 8021214:	2300      	movs	r3, #0
 8021216:	4604      	mov	r4, r0
 8021218:	4608      	mov	r0, r1
 802121a:	4611      	mov	r1, r2
 802121c:	602b      	str	r3, [r5, #0]
 802121e:	f7e0 fa50 	bl	80016c2 <_fstat>
 8021222:	1c43      	adds	r3, r0, #1
 8021224:	d102      	bne.n	802122c <_fstat_r+0x1c>
 8021226:	682b      	ldr	r3, [r5, #0]
 8021228:	b103      	cbz	r3, 802122c <_fstat_r+0x1c>
 802122a:	6023      	str	r3, [r4, #0]
 802122c:	bd38      	pop	{r3, r4, r5, pc}
 802122e:	bf00      	nop
 8021230:	24025bd4 	.word	0x24025bd4

08021234 <_isatty_r>:
 8021234:	b538      	push	{r3, r4, r5, lr}
 8021236:	4d06      	ldr	r5, [pc, #24]	@ (8021250 <_isatty_r+0x1c>)
 8021238:	2300      	movs	r3, #0
 802123a:	4604      	mov	r4, r0
 802123c:	4608      	mov	r0, r1
 802123e:	602b      	str	r3, [r5, #0]
 8021240:	f7e0 fa44 	bl	80016cc <_isatty>
 8021244:	1c43      	adds	r3, r0, #1
 8021246:	d102      	bne.n	802124e <_isatty_r+0x1a>
 8021248:	682b      	ldr	r3, [r5, #0]
 802124a:	b103      	cbz	r3, 802124e <_isatty_r+0x1a>
 802124c:	6023      	str	r3, [r4, #0]
 802124e:	bd38      	pop	{r3, r4, r5, pc}
 8021250:	24025bd4 	.word	0x24025bd4

08021254 <_init>:
 8021254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021256:	bf00      	nop
 8021258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802125a:	bc08      	pop	{r3}
 802125c:	469e      	mov	lr, r3
 802125e:	4770      	bx	lr

08021260 <_fini>:
 8021260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021262:	bf00      	nop
 8021264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021266:	bc08      	pop	{r3}
 8021268:	469e      	mov	lr, r3
 802126a:	4770      	bx	lr
